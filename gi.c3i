module gi;

import g;

union Argument {
	CInt v_boolean;
	ichar v_int8;
	char v_uint8;
	short v_int16;
	ushort v_uint16;
	int v_int32;
	uint v_uint32;
	long v_int64;
	ulong v_uint64;
	float v_float;
	double v_double;
	short v_short;
	ushort v_ushort;
	int v_int;
	uint v_uint;
	long v_long;
	ulong v_ulong;
	long v_ssize;
	ulong v_size;
	ZString v_string;
	void* v_pointer;
}

enum ArrayType {
	C,
	ARRAY,
	PTR_ARRAY,
	BYTE_ARRAY
}

struct AttributeIter {
	void* data;
	void* data2;
	void* data3;
	void* data4;
}

struct BaseInfo {
	int dummy1;
	int dummy2;
	void* dummy3;
	void* dummy4;
	void* dummy5;
	uint dummy6;
	uint dummy7;
	char[4] padding;
}

fn CInt BaseInfo.equal (BaseInfo* self, BaseInfo* info2) @extern ("g_base_info_equal");
fn ZString BaseInfo.get_attribute (BaseInfo* self, ZString name) @extern ("g_base_info_get_attribute");
fn BaseInfo* BaseInfo.get_container (BaseInfo* self) @extern ("g_base_info_get_container");
fn ZString BaseInfo.get_name (BaseInfo* self) @extern ("g_base_info_get_name");
fn ZString BaseInfo.get_namespace (BaseInfo* self) @extern ("g_base_info_get_namespace");
fn InfoType BaseInfo.get_type (BaseInfo* self) @extern ("g_base_info_get_type");
fn Typelib* BaseInfo.get_typelib (BaseInfo* self) @extern ("g_base_info_get_typelib");
fn CInt BaseInfo.is_deprecated (BaseInfo* self) @extern ("g_base_info_is_deprecated");
fn CInt BaseInfo.iterate_attributes (BaseInfo* self, AttributeIter iterator, ZString name, ZString value) @extern ("g_base_info_iterate_attributes");

enum Direction {
	IN,
	OUT,
	INOUT
}

enum FieldInfoFlags: CInt (inline CInt bit) {
	READABLE = 1,
	WRITABLE = 2
}

enum FunctionInfoFlags: CInt (inline CInt bit) {
	IS_METHOD = 1,
	IS_CONSTRUCTOR = 2,
	IS_GETTER = 4,
	IS_SETTER = 8,
	WRAPS_VFUNC = 16,
	THROWS = 32
}

enum InfoType : inline int {
	INVALID,
	FUNCTION,
	CALLBACK,
	STRUCT,
	BOXED,
	ENUM,
	FLAGS,
	OBJECT,
	INTERFACE,
	CONSTANT,
	INVALID_0,
	UNION,
	VALUE,
	SIGNAL,
	VFUNC,
	PROPERTY,
	FIELD,
	ARG,
	TYPE,
	UNRESOLVED
}

const int MAJOR_VERSION = 1;
const int MICRO_VERSION = 0;
const int MINOR_VERSION = 82;

struct Repository {
	void* unused;
}

fn CInt Repository.dump (Repository* self, ZString arg) @extern ("g_irepository_dump");
fn uint Repository.error_quark (Repository* self) @extern ("g_irepository_error_quark");
fn Repository* Repository.get_default (Repository* self) @extern ("g_irepository_get_default");
fn void Repository.prepend_library_path (Repository* self, ZString directory) @extern ("g_irepository_prepend_library_path");
fn void Repository.prepend_search_path (Repository* self, ZString* directory) @extern ("g_irepository_prepend_search_path");
fn BaseInfo* Repository.find_by_error_domain (Repository* self, uint domain) @extern ("g_irepository_find_by_error_domain");
fn BaseInfo* Repository.find_by_name (Repository* self, ZString namespace_, ZString name) @extern ("g_irepository_find_by_name");
fn ZString Repository.get_c_prefix (Repository* self, ZString namespace_) @extern ("g_irepository_get_c_prefix");
fn char** Repository.get_dependencies (Repository* self, ZString namespace_) @extern ("g_irepository_get_dependencies");
fn char** Repository.get_immediate_dependencies (Repository* self, ZString namespace_) @extern ("g_irepository_get_immediate_dependencies");
fn BaseInfo* Repository.get_info (Repository* self, ZString namespace_, int index) @extern ("g_irepository_get_info");
fn char** Repository.get_loaded_namespaces (Repository* self) @extern ("g_irepository_get_loaded_namespaces");
fn int Repository.get_n_infos (Repository* self, ZString namespace_) @extern ("g_irepository_get_n_infos");

fn ZString Repository.get_shared_library (Repository* self, ZString namespace_) @extern ("g_irepository_get_shared_library");
fn ZString Repository.get_typelib_path (Repository* self, ZString namespace_) @extern ("g_irepository_get_typelib_path");
fn ZString Repository.get_version (Repository* self, ZString namespace_) @extern ("g_irepository_get_version");
fn CInt Repository.is_registered (Repository* self, ZString namespace_, ZString version) @extern ("g_irepository_is_registered");
fn ZString Repository.load_typelib (Repository* self, Typelib* typelib, RepositoryLoadFlags flags) @extern ("g_irepository_load_typelib");
fn Typelib* Repository.require (Repository* self, ZString namespace_, ZString version, RepositoryLoadFlags flags, Error** error) @extern ("g_irepository_require");
fn Typelib* Repository.require_private (Repository* self, ZString typelib_dir, ZString namespace_, ZString version, RepositoryLoadFlags flags) @extern ("g_irepository_require_private");
fn List* Repository.enumerate_versions (Repository* self, ZString space) @extern ("g_irepository_enumerate_versions");

enum RepositoryError {
	TYPELIB_NOT_FOUND,
	NAMESPACE_MISMATCH,
	NAMESPACE_VERSION_CONFLICT,
	LIBRARY_NOT_FOUND
}

enum RepositoryLoadFlags: CInt (inline CInt bit) {
	REPOSITORY_LOAD_FLAG_NONE = 0,
	REPOSITORY_LOAD_FLAG_LAZY = 1
}

def RepositoryPrivate = void;


enum ScopeType {
	INVALID,
	CALL,
	ASYNC,
	NOTIFIED,
	FOREVER
}

const int TYPE_TAG_N_TYPES = 22;

enum Transfer {
	NOTHING,
	CONTAINER,
	EVERYTHING
}


enum TypeTag: inline int {
	VOID,
	BOOLEAN,
	INT8,
	UINT8,
	INT16,
	UINT16,
	INT32,
	UINT32,
	INT64,
	UINT64,
	FLOAT,
	DOUBLE,
	GTYPE,
	UTF8,
	FILENAME,
	ARRAY,
	INTERFACE,
	GLIST,
	GSLIST,
	GHASH,
	ERROR,
	UNICHAR
}

struct Typelib {
	void* unused;
}

fn void Typelib.free (Typelib* self) @extern ("g_typelib_free");
fn ZString Typelib.get_namespace (Typelib* self) @extern ("g_typelib_get_namespace");
fn CInt Typelib.symbol (Typelib* self, ZString symbol_name, void* symbol) @extern ("g_typelib_symbol");
def UnresolvedInfo = void;

enum VFuncInfoFlags: CInt (inline CInt bit) {
	MUST_CHAIN_UP = 1,
	MUST_OVERRIDE = 2,
	MUST_NOT_OVERRIDE = 4,
	THROWS = 8
}

extern fn int arg_info_get_closure (BaseInfo* info) @extern ("g_arg_info_get_closure");
extern fn int arg_info_get_destroy (BaseInfo* info) @extern ("g_arg_info_get_destroy");
extern fn Direction arg_info_get_direction (BaseInfo* info) @extern ("g_arg_info_get_direction");
extern fn Transfer arg_info_get_ownership_transfer (BaseInfo* info) @extern ("g_arg_info_get_ownership_transfer");
extern fn ScopeType arg_info_get_scope (BaseInfo* info) @extern ("g_arg_info_get_scope");
extern fn BaseInfo* arg_info_get_type (BaseInfo* info) @extern ("g_arg_info_get_type");
extern fn CInt arg_info_is_caller_allocates (BaseInfo* info) @extern ("g_arg_info_is_caller_allocates");
extern fn CInt arg_info_is_optional (BaseInfo* info) @extern ("g_arg_info_is_optional");
extern fn CInt arg_info_is_return_value (BaseInfo* info) @extern ("g_arg_info_is_return_value");
extern fn CInt arg_info_is_skip (BaseInfo* info) @extern ("g_arg_info_is_skip");
extern fn void arg_info_load_type (BaseInfo* info, BaseInfo type) @extern ("g_arg_info_load_type");
extern fn CInt arg_info_may_be_null (BaseInfo* info) @extern ("g_arg_info_may_be_null");
extern fn CInt callable_info_can_throw_gerror (BaseInfo* info) @extern ("g_callable_info_can_throw_gerror");
extern fn BaseInfo* callable_info_get_arg (BaseInfo* info, int n) @extern ("g_callable_info_get_arg");
extern fn Transfer callable_info_get_caller_owns (BaseInfo* info) @extern ("g_callable_info_get_caller_owns");
extern fn Transfer callable_info_get_instance_ownership_transfer (BaseInfo* info) @extern ("g_callable_info_get_instance_ownership_transfer");
extern fn int callable_info_get_n_args (BaseInfo* info) @extern ("g_callable_info_get_n_args");
extern fn ZString callable_info_get_return_attribute (BaseInfo* info, ZString name) @extern ("g_callable_info_get_return_attribute");
extern fn BaseInfo* callable_info_get_return_type (BaseInfo* info) @extern ("g_callable_info_get_return_type");
extern fn CInt callable_info_invoke (BaseInfo* info, void* function, char** in_args, int n_in_args, char** out_args, int n_out_args, Argument* return_value, CInt is_method, CInt throws) @extern ("g_callable_info_invoke");
extern fn CInt callable_info_is_method (BaseInfo* info) @extern ("g_callable_info_is_method");
extern fn CInt callable_info_iterate_return_attributes (BaseInfo* info, AttributeIter iterator, ZString name, ZString value) @extern ("g_callable_info_iterate_return_attributes");
extern fn void callable_info_load_arg (BaseInfo* info, int n, BaseInfo arg) @extern ("g_callable_info_load_arg");
extern fn void callable_info_load_return_type (BaseInfo* info, BaseInfo type) @extern ("g_callable_info_load_return_type");
extern fn CInt callable_info_may_return_null (BaseInfo* info) @extern ("g_callable_info_may_return_null");
extern fn CInt callable_info_skip_return (BaseInfo* info) @extern ("g_callable_info_skip_return");
extern fn BaseInfo* constant_info_get_type (BaseInfo* info) @extern ("g_constant_info_get_type");
extern fn ZString enum_info_get_error_domain (BaseInfo* info) @extern ("g_enum_info_get_error_domain");
extern fn BaseInfo* enum_info_get_method (BaseInfo* info, int n) @extern ("g_enum_info_get_method");
extern fn int enum_info_get_n_methods (BaseInfo* info) @extern ("g_enum_info_get_n_methods");
extern fn int enum_info_get_n_values (BaseInfo* info) @extern ("g_enum_info_get_n_values");
extern fn TypeTag enum_info_get_storage_type (BaseInfo* info) @extern ("g_enum_info_get_storage_type");
extern fn BaseInfo* enum_info_get_value (BaseInfo* info, int n) @extern ("g_enum_info_get_value");
extern fn FieldInfoFlags field_info_get_flags (BaseInfo* info) @extern ("g_field_info_get_flags");
extern fn int field_info_get_offset (BaseInfo* info) @extern ("g_field_info_get_offset");
extern fn int field_info_get_size (BaseInfo* info) @extern ("g_field_info_get_size");
extern fn BaseInfo* field_info_get_type (BaseInfo* info) @extern ("g_field_info_get_type");
extern fn FunctionInfoFlags function_info_get_flags (BaseInfo* info) @extern ("g_function_info_get_flags");
extern fn BaseInfo* function_info_get_property (BaseInfo* info) @extern ("g_function_info_get_property");
extern fn ZString function_info_get_symbol (BaseInfo* info) @extern ("g_function_info_get_symbol");
extern fn BaseInfo* function_info_get_vfunc (BaseInfo* info) @extern ("g_function_info_get_vfunc");
extern fn uint gi_get_major_version () @extern ("gi_get_major_version");
extern fn uint gi_get_micro_version () @extern ("gi_get_micro_version");
extern fn uint gi_get_minor_version () @extern ("gi_get_minor_version");
extern fn BaseInfo* info_new (InfoType type, BaseInfo* container, Typelib* typelib, uint offset) @extern ("g_info_new");
extern fn ZString info_type_to_string (InfoType type) @extern ("g_info_type_to_string");
extern fn BaseInfo* interface_info_find_method (BaseInfo* info, ZString name) @extern ("g_interface_info_find_method");
extern fn BaseInfo* interface_info_find_signal (BaseInfo* info, ZString name) @extern ("g_interface_info_find_signal");
extern fn BaseInfo* interface_info_find_vfunc (BaseInfo* info, ZString name) @extern ("g_interface_info_find_vfunc");
extern fn BaseInfo* interface_info_get_constant (BaseInfo* info, int n) @extern ("g_interface_info_get_constant");
extern fn BaseInfo* interface_info_get_iface_struct (BaseInfo* info) @extern ("g_interface_info_get_iface_struct");
extern fn BaseInfo* interface_info_get_method (BaseInfo* info, int n) @extern ("g_interface_info_get_method");
extern fn int interface_info_get_n_constants (BaseInfo* info) @extern ("g_interface_info_get_n_constants");
extern fn int interface_info_get_n_methods (BaseInfo* info) @extern ("g_interface_info_get_n_methods");
extern fn int interface_info_get_n_prerequisites (BaseInfo* info) @extern ("g_interface_info_get_n_prerequisites");
extern fn int interface_info_get_n_properties (BaseInfo* info) @extern ("g_interface_info_get_n_properties");
extern fn int interface_info_get_n_signals (BaseInfo* info) @extern ("g_interface_info_get_n_signals");
extern fn int interface_info_get_n_vfuncs (BaseInfo* info) @extern ("g_interface_info_get_n_vfuncs");
extern fn BaseInfo* interface_info_get_prerequisite (BaseInfo* info, int n) @extern ("g_interface_info_get_prerequisite");
extern fn BaseInfo* interface_info_get_property (BaseInfo* info, int n) @extern ("g_interface_info_get_property");
extern fn BaseInfo* interface_info_get_signal (BaseInfo* info, int n) @extern ("g_interface_info_get_signal");
extern fn BaseInfo* interface_info_get_vfunc (BaseInfo* info, int n) @extern ("g_interface_info_get_vfunc");
extern fn uint invoke_error_quark () @extern ("g_invoke_error_quark");

enum InvokeError {
	FAILED,
	SYMBOL_NOT_FOUND,
	ARGUMENT_MISMATCH
}

extern fn BaseInfo* object_info_find_method (BaseInfo* info, ZString name) @extern ("g_object_info_find_method");
extern fn BaseInfo* object_info_find_method_using_interfaces (BaseInfo* info, ZString name, BaseInfo* implementor) @extern ("g_object_info_find_method_using_interfaces");
extern fn BaseInfo* object_info_find_signal (BaseInfo* info, ZString name) @extern ("g_object_info_find_signal");
extern fn BaseInfo* object_info_find_vfunc (BaseInfo* info, ZString name) @extern ("g_object_info_find_vfunc");
extern fn BaseInfo* object_info_find_vfunc_using_interfaces (BaseInfo* info, ZString name, BaseInfo* implementor) @extern ("g_object_info_find_vfunc_using_interfaces");
extern fn CInt object_info_get_abstract (BaseInfo* info) @extern ("g_object_info_get_abstract");
extern fn BaseInfo* object_info_get_class_struct (BaseInfo* info) @extern ("g_object_info_get_class_struct");
extern fn BaseInfo* object_info_get_constant (BaseInfo* info, int n) @extern ("g_object_info_get_constant");
extern fn BaseInfo* object_info_get_field (BaseInfo* info, int n) @extern ("g_object_info_get_field");
extern fn CInt object_info_get_final (BaseInfo* info) @extern ("g_object_info_get_final");
extern fn CInt object_info_get_fundamental (BaseInfo* info) @extern ("g_object_info_get_fundamental");
extern fn ZString object_info_get_get_value_function (BaseInfo* info) @extern ("g_object_info_get_get_value_function");
extern fn BaseInfo* object_info_get_interface (BaseInfo* info, int n) @extern ("g_object_info_get_interface");
extern fn BaseInfo* object_info_get_method (BaseInfo* info, int n) @extern ("g_object_info_get_method");
extern fn int object_info_get_n_constants (BaseInfo* info) @extern ("g_object_info_get_n_constants");
extern fn int object_info_get_n_fields (BaseInfo* info) @extern ("g_object_info_get_n_fields");
extern fn int object_info_get_n_interfaces (BaseInfo* info) @extern ("g_object_info_get_n_interfaces");
extern fn int object_info_get_n_methods (BaseInfo* info) @extern ("g_object_info_get_n_methods");
extern fn int object_info_get_n_properties (BaseInfo* info) @extern ("g_object_info_get_n_properties");
extern fn int object_info_get_n_signals (BaseInfo* info) @extern ("g_object_info_get_n_signals");
extern fn int object_info_get_n_vfuncs (BaseInfo* info) @extern ("g_object_info_get_n_vfuncs");
extern fn BaseInfo* object_info_get_parent (BaseInfo* info) @extern ("g_object_info_get_parent");
extern fn BaseInfo* object_info_get_property (BaseInfo* info, int n) @extern ("g_object_info_get_property");
extern fn ZString object_info_get_ref_function (BaseInfo* info) @extern ("g_object_info_get_ref_function");
extern fn ZString object_info_get_set_value_function (BaseInfo* info) @extern ("g_object_info_get_set_value_function");
extern fn BaseInfo* object_info_get_signal (BaseInfo* info, int n) @extern ("g_object_info_get_signal");
extern fn ZString object_info_get_type_init (BaseInfo* info) @extern ("g_object_info_get_type_init");
extern fn ZString object_info_get_type_name (BaseInfo* info) @extern ("g_object_info_get_type_name");
extern fn ZString object_info_get_unref_function (BaseInfo* info) @extern ("g_object_info_get_unref_function");
extern fn BaseInfo* object_info_get_vfunc (BaseInfo* info, int n) @extern ("g_object_info_get_vfunc");
extern fn BaseInfo* property_info_get_getter (BaseInfo* info) @extern ("g_property_info_get_getter");
extern fn Transfer property_info_get_ownership_transfer (BaseInfo* info) @extern ("g_property_info_get_ownership_transfer");
extern fn BaseInfo* property_info_get_setter (BaseInfo* info) @extern ("g_property_info_get_setter");
extern fn BaseInfo* property_info_get_type (BaseInfo* info) @extern ("g_property_info_get_type");
extern fn ZString registered_type_info_get_type_init (BaseInfo* info) @extern ("g_registered_type_info_get_type_init");
extern fn ZString registered_type_info_get_type_name (BaseInfo* info) @extern ("g_registered_type_info_get_type_name");
extern fn BaseInfo* signal_info_get_class_closure (BaseInfo* info) @extern ("g_signal_info_get_class_closure");
extern fn CInt signal_info_true_stops_emit (BaseInfo* info) @extern ("g_signal_info_true_stops_emit");
extern fn BaseInfo* struct_info_find_field (BaseInfo* info, ZString name) @extern ("g_struct_info_find_field");
extern fn BaseInfo* struct_info_find_method (BaseInfo* info, ZString name) @extern ("g_struct_info_find_method");
extern fn ulong struct_info_get_alignment (BaseInfo* info) @extern ("g_struct_info_get_alignment");
extern fn ZString struct_info_get_copy_function (BaseInfo* info) @extern ("g_struct_info_get_copy_function");
extern fn BaseInfo* struct_info_get_field (BaseInfo* info, int n) @extern ("g_struct_info_get_field");
extern fn ZString struct_info_get_free_function (BaseInfo* info) @extern ("g_struct_info_get_free_function");
extern fn BaseInfo* struct_info_get_method (BaseInfo* info, int n) @extern ("g_struct_info_get_method");
extern fn int struct_info_get_n_fields (BaseInfo* info) @extern ("g_struct_info_get_n_fields");
extern fn int struct_info_get_n_methods (BaseInfo* info) @extern ("g_struct_info_get_n_methods");
extern fn ulong struct_info_get_size (BaseInfo* info) @extern ("g_struct_info_get_size");
extern fn CInt struct_info_is_foreign (BaseInfo* info) @extern ("g_struct_info_is_foreign");
extern fn CInt struct_info_is_gtype_struct (BaseInfo* info) @extern ("g_struct_info_is_gtype_struct");
extern fn void type_info_argument_from_hash_pointer (BaseInfo* info, void* hash_pointer, Argument* arg) @extern ("g_type_info_argument_from_hash_pointer");
extern fn int type_info_get_array_fixed_size (BaseInfo* info) @extern ("g_type_info_get_array_fixed_size");
extern fn int type_info_get_array_length (BaseInfo* info) @extern ("g_type_info_get_array_length");
extern fn ArrayType type_info_get_array_type (BaseInfo* info) @extern ("g_type_info_get_array_type");
extern fn BaseInfo* type_info_get_interface (BaseInfo* info) @extern ("g_type_info_get_interface");
extern fn BaseInfo* type_info_get_param_type (BaseInfo* info, int n) @extern ("g_type_info_get_param_type");
extern fn TypeTag type_info_get_storage_type (BaseInfo* info) @extern ("g_type_info_get_storage_type");
extern fn TypeTag type_info_get_tag (BaseInfo* info) @extern ("g_type_info_get_tag");
extern fn void* type_info_hash_pointer_from_argument (BaseInfo* info, Argument* arg) @extern ("g_type_info_hash_pointer_from_argument");
extern fn CInt type_info_is_pointer (BaseInfo* info) @extern ("g_type_info_is_pointer");
extern fn CInt type_info_is_zero_terminated (BaseInfo* info) @extern ("g_type_info_is_zero_terminated");
extern fn void gi_type_tag_argument_from_hash_pointer (TypeTag storage_type, void* hash_pointer, Argument* arg) @extern ("gi_type_tag_argument_from_hash_pointer");
extern fn void* gi_type_tag_hash_pointer_from_argument (TypeTag storage_type, Argument* arg) @extern ("gi_type_tag_hash_pointer_from_argument");
extern fn ZString type_tag_to_string (TypeTag type) @extern ("g_type_tag_to_string");
extern fn BaseInfo* union_info_find_method (BaseInfo* info, ZString name) @extern ("g_union_info_find_method");
extern fn ulong union_info_get_alignment (BaseInfo* info) @extern ("g_union_info_get_alignment");
extern fn ZString union_info_get_copy_function (BaseInfo* info) @extern ("g_union_info_get_copy_function");
extern fn BaseInfo* union_info_get_discriminator (BaseInfo* info, int n) @extern ("g_union_info_get_discriminator");
extern fn int union_info_get_discriminator_offset (BaseInfo* info) @extern ("g_union_info_get_discriminator_offset");
extern fn BaseInfo* union_info_get_discriminator_type (BaseInfo* info) @extern ("g_union_info_get_discriminator_type");
extern fn BaseInfo* union_info_get_field (BaseInfo* info, int n) @extern ("g_union_info_get_field");
extern fn ZString union_info_get_free_function (BaseInfo* info) @extern ("g_union_info_get_free_function");
extern fn BaseInfo* union_info_get_method (BaseInfo* info, int n) @extern ("g_union_info_get_method");
extern fn int union_info_get_n_fields (BaseInfo* info) @extern ("g_union_info_get_n_fields");
extern fn int union_info_get_n_methods (BaseInfo* info) @extern ("g_union_info_get_n_methods");
extern fn ulong union_info_get_size (BaseInfo* info) @extern ("g_union_info_get_size");
extern fn CInt union_info_is_discriminated (BaseInfo* info) @extern ("g_union_info_is_discriminated");
extern fn long value_info_get_value (BaseInfo* info) @extern ("g_value_info_get_value");
extern fn VFuncInfoFlags vfunc_info_get_flags (BaseInfo* info) @extern ("g_vfunc_info_get_flags");
extern fn BaseInfo* vfunc_info_get_invoker (BaseInfo* info) @extern ("g_vfunc_info_get_invoker");
extern fn int vfunc_info_get_offset (BaseInfo* info) @extern ("g_vfunc_info_get_offset");
extern fn BaseInfo* vfunc_info_get_signal (BaseInfo* info) @extern ("g_vfunc_info_get_signal");
