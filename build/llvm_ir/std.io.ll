; ModuleID = 'std::io'
source_filename = "std::io"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%.introspect = type { i8, i64, ptr, i64, i64, i64, [0 x i64] }
%.fault = type { i64, %"char[]", i64 }
%"char[]" = type { ptr, i64 }
%any = type { ptr, i64 }
%File = type { ptr }
%"any[]" = type { ptr, i64 }
%BitReader = type { %any, i32, i32 }
%BitWriter = type { %any, i32, i32 }
%ByteReader = type { %"char[]", i64 }
%ReadBuffer = type { %any, %"char[]", i64, i64 }
%WriteBuffer = type { %any, %"char[]", i64 }
%ByteWriter = type { %"char[]", i64, %any }
%ByteBuffer = type { %any, i64, %"char[]", i64, i64, i8 }
%TeeReader = type { %any, %any }
%MultiWriter = type { %"any[]", %any }
%Scanner = type { %any, %"char[]", i64, i64 }
%MultiReader = type { %"any[]", i64, %any }
%LimitReader = type { %any, i64 }
%Formatter = type { ptr, ptr, %.anon }
%.anon = type { i32, i32, i32, i64, i64 }
%OnStackAllocator = type { %any, %"char[]", i64, ptr }
%"char[][]" = type { ptr, i64 }
%BufferData = type { %"char[]", i64 }

$std.io.BitReader.init = comdat any

$std.io.BitReader.clear = comdat any

$std.io.BitReader.read_bits = comdat any

$std.io.BitWriter.init = comdat any

$std.io.BitWriter.flush = comdat any

$std.io.BitWriter.write_bits = comdat any

$std.io.ByteReader.len = comdat any

$std.io.ByteReader.init = comdat any

$std.io.ByteReader.read = comdat any

$std.io.ByteReader.read_byte = comdat any

$std.io.ByteReader.pushback_byte = comdat any

$std.io.ByteReader.seek = comdat any

$std.io.ByteReader.write_to = comdat any

$std.io.ByteReader.available = comdat any

$std.io.ReadBuffer.init = comdat any

$std.io.ReadBuffer.str_view = comdat any

$std.io.ReadBuffer.close = comdat any

$std.io.ReadBuffer.read = comdat any

$std.io.ReadBuffer.read_byte = comdat any

$std.io.WriteBuffer.init = comdat any

$std.io.WriteBuffer.str_view = comdat any

$std.io.WriteBuffer.close = comdat any

$std.io.WriteBuffer.flush = comdat any

$std.io.WriteBuffer.write = comdat any

$std.io.WriteBuffer.write_byte = comdat any

$std.io.ByteWriter.new_init = comdat any

$std.io.ByteWriter.temp_init = comdat any

$std.io.ByteWriter.init_with_buffer = comdat any

$std.io.ByteWriter.destroy = comdat any

$std.io.ByteWriter.str_view = comdat any

$std.io.ByteWriter.ensure_capacity = comdat any

$std.io.ByteWriter.write = comdat any

$std.io.ByteWriter.write_byte = comdat any

$std.io.ByteWriter.read_from = comdat any

$std.io.ByteBuffer.new_init = comdat any

$std.io.ByteBuffer.temp_init = comdat any

$std.io.ByteBuffer.init_with_buffer = comdat any

$std.io.ByteBuffer.free = comdat any

$std.io.ByteBuffer.write = comdat any

$std.io.ByteBuffer.write_byte = comdat any

$std.io.ByteBuffer.read = comdat any

$std.io.ByteBuffer.read_byte = comdat any

$std.io.ByteBuffer.pushback_byte = comdat any

$std.io.ByteBuffer.seek = comdat any

$std.io.ByteBuffer.available = comdat any

$std.io.ByteBuffer.grow = comdat any

$std.io.TeeReader.init = comdat any

$std.io.TeeReader.read = comdat any

$std.io.TeeReader.read_byte = comdat any

$std.io.MultiWriter.new_init = comdat any

$std.io.MultiWriter.temp_init = comdat any

$std.io.MultiWriter.free = comdat any

$std.io.MultiWriter.write = comdat any

$std.io.MultiWriter.write_byte = comdat any

$std.io.Scanner.init = comdat any

$std.io.Scanner.flush = comdat any

$std.io.Scanner.close = comdat any

$std.io.Scanner.scan = comdat any

$std.io.Scanner.read = comdat any

$std.io.Scanner.read_byte = comdat any

$std.io.MultiReader.new_init = comdat any

$std.io.MultiReader.temp_init = comdat any

$std.io.MultiReader.free = comdat any

$std.io.MultiReader.read = comdat any

$std.io.MultiReader.read_byte = comdat any

$std.io.LimitReader.init = comdat any

$std.io.LimitReader.close = comdat any

$std.io.LimitReader.read = comdat any

$std.io.LimitReader.read_byte = comdat any

$std.io.LimitReader.available = comdat any

$std.core.ReflectedParam.to_format = comdat any

$std.io.Formatter.printf = comdat any

$std.io.Formatter.init = comdat any

$std.io.Formatter.print_with_function = comdat any

$std.io.Formatter.vprintf = comdat any

$std.io.Formatter.print = comdat any

$std.io.available = comdat any

$std.io.copy_to = comdat any

$std.io.wrap_bytes = comdat any

$std.io.fprintf = comdat any

$std.io.fprintfn = comdat any

$std.io.printf = comdat any

$std.io.printfn = comdat any

$std.io.eprintf = comdat any

$std.io.eprintfn = comdat any

$std.io.bprintf = comdat any

$std.io.putchar = comdat any

$std.io.stdout = comdat any

$std.io.stderr = comdat any

$std.io.stdin = comdat any

$std.io.Formatter.pad = comdat any

$std.io.Formatter.out_chars = comdat any

$std.io.Formatter.etoa = comdat any

$std.io.Formatter.ftoa = comdat any

$std.io.Formatter.gtoa = comdat any

$std.io.Formatter.atoa = comdat any

$std.io.print_hex_chars = comdat any

$std.io.fmt_u = comdat any

$.dyn_search = comdat any

$"$ct.std.io.BitReader" = comdat any

$"$ct.std.io.BitWriter" = comdat any

$"$ct.std.io.ByteReader" = comdat any

$"$ct.std.io.ReadBuffer" = comdat any

$"$ct.std.io.WriteBuffer" = comdat any

$"$ct.std.io.ByteWriter" = comdat any

$"$ct.std.io.ByteBuffer" = comdat any

$"$ct.std.io.TeeReader" = comdat any

$"$ct.std.io.MultiWriter" = comdat any

$"$ct.std.io.Scanner" = comdat any

$"$ct.std.io.MultiReader" = comdat any

$"$ct.std.io.LimitReader" = comdat any

$"$ct.std.io.File" = comdat any

$"std.io.PrintFault$BUFFER_EXCEEDED" = comdat any

$"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" = comdat any

$"std.io.PrintFault$INVALID_FORMAT" = comdat any

$"std.io.PrintFault$NOT_ENOUGH_ARGUMENTS" = comdat any

$"std.io.PrintFault$INVALID_ARGUMENT" = comdat any

$"$ct.std.io.PrintFault" = comdat any

$"$ct.std.io.$anon" = comdat any

$"$ct.std.io.Formatter" = comdat any

$"$ct.std.io.PrintFlags" = comdat any

$"$ct.uint" = comdat any

$"std.io.IoError$ALREADY_EXISTS" = comdat any

$"std.io.IoError$BUSY" = comdat any

$"std.io.IoError$CANNOT_READ_DIR" = comdat any

$"std.io.IoError$DIR_NOT_EMPTY" = comdat any

$"std.io.IoError$EOF" = comdat any

$"std.io.IoError$FILE_CANNOT_DELETE" = comdat any

$"std.io.IoError$FILE_IS_DIR" = comdat any

$"std.io.IoError$FILE_IS_PIPE" = comdat any

$"std.io.IoError$FILE_NOT_DIR" = comdat any

$"std.io.IoError$FILE_NOT_FOUND" = comdat any

$"std.io.IoError$FILE_NOT_VALID" = comdat any

$"std.io.IoError$GENERAL_ERROR" = comdat any

$"std.io.IoError$ILLEGAL_ARGUMENT" = comdat any

$"std.io.IoError$INCOMPLETE_WRITE" = comdat any

$"std.io.IoError$INTERRUPTED" = comdat any

$"std.io.IoError$INVALID_POSITION" = comdat any

$"std.io.IoError$INVALID_PUSHBACK" = comdat any

$"std.io.IoError$NAME_TOO_LONG" = comdat any

$"std.io.IoError$NOT_SEEKABLE" = comdat any

$"std.io.IoError$NO_PERMISSION" = comdat any

$"std.io.IoError$OUT_OF_SPACE" = comdat any

$"std.io.IoError$OVERFLOW" = comdat any

$"std.io.IoError$READ_ONLY" = comdat any

$"std.io.IoError$SYMLINK_FAILED" = comdat any

$"std.io.IoError$TOO_MANY_DESCRIPTORS" = comdat any

$"std.io.IoError$UNEXPECTED_EOF" = comdat any

$"std.io.IoError$UNKNOWN_ERROR" = comdat any

$"std.io.IoError$UNSUPPORTED_OPERATION" = comdat any

$"std.io.IoError$WOULD_BLOCK" = comdat any

$"$ct.std.io.IoError" = comdat any

$"$ct.std.io.BufferData" = comdat any

$"$ct.int" = comdat any

$"$ct.std.io.Seek" = comdat any

$"std.io.FormattingFault$BAD_FORMAT" = comdat any

$"$ct.std.io.FormattingFault" = comdat any

$"$ct.std.io.FloatFormatting" = comdat any

$std.io.WRITER_BITS = comdat any

$"$ct.ulong" = comdat any

$"$sel.read_byte" = comdat any

$"$sel.write" = comdat any

$"$sel.close" = comdat any

$"$sel.read" = comdat any

$"$sel.flush" = comdat any

$"$ct.std.core.mem.allocator.TempAllocator" = comdat any

$"$ct.void" = comdat any

$"$sel.release" = comdat any

$"$sel.acquire" = comdat any

$"$sel.resize" = comdat any

$"$sel.available" = comdat any

$"$ct.long" = comdat any

$"$ct.anyfault" = comdat any

$"std.core.builtin.SearchResult$MISSING" = comdat any

$"$ct.std.core.builtin.SearchResult" = comdat any

$std.io.PRINTF_NTOA_BUFFER_SIZE = comdat any

$"$ct.String" = comdat any

$"$ct.sa$char" = comdat any

$"$ct.char" = comdat any

$"$sel.to_format" = comdat any

$"$sel.to_string" = comdat any

$"$ct.std.core.mem.allocator.OnStackAllocator" = comdat any

$"$ct.ichar" = comdat any

$"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" = comdat any

$"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" = comdat any

$"$ct.std.core.types.ConversionResult" = comdat any

$"$ct.short" = comdat any

$"$ct.int128" = comdat any

$"$ct.ushort" = comdat any

$"$ct.uint128" = comdat any

$"$ct.std.core.string.ZString" = comdat any

$"$ct.p$char" = comdat any

$"$ct.std.core.dstring.DString" = comdat any

$"$ct.p$std.core.dstring.DStringOpaque" = comdat any

$"$ct.std.core.dstring.DStringOpaque" = comdat any

$"$ct.sa$ichar" = comdat any

$"$sel.seek" = comdat any

$"$sel.write_to" = comdat any

$"$sel.read_to" = comdat any

$"$sel.write_byte" = comdat any

$std.io.XDIGITS_H = comdat any

$std.io.XDIGITS_L = comdat any

$"$ct.bool" = comdat any

$"$ct.float" = comdat any

$"$ct.double" = comdat any

$"$ct.dyn.std.io.ByteReader.len" = comdat any

$"$sel.len" = comdat any

$"$ct.dyn.std.io.ByteReader.read" = comdat any

$"$ct.dyn.std.io.ByteReader.read_byte" = comdat any

$"$ct.dyn.std.io.ByteReader.pushback_byte" = comdat any

$"$sel.pushback_byte" = comdat any

$"$ct.dyn.std.io.ByteReader.seek" = comdat any

$"$ct.dyn.std.io.ByteReader.write_to" = comdat any

$"$ct.dyn.std.io.ByteReader.available" = comdat any

$"$ct.dyn.std.io.ReadBuffer.close" = comdat any

$"$ct.dyn.std.io.ReadBuffer.read" = comdat any

$"$ct.dyn.std.io.ReadBuffer.read_byte" = comdat any

$"$ct.dyn.std.io.WriteBuffer.close" = comdat any

$"$ct.dyn.std.io.WriteBuffer.flush" = comdat any

$"$ct.dyn.std.io.WriteBuffer.write" = comdat any

$"$ct.dyn.std.io.WriteBuffer.write_byte" = comdat any

$"$ct.dyn.std.io.ByteWriter.destroy" = comdat any

$"$sel.destroy" = comdat any

$"$ct.dyn.std.io.ByteWriter.write" = comdat any

$"$ct.dyn.std.io.ByteWriter.write_byte" = comdat any

$"$ct.dyn.std.io.ByteWriter.read_from" = comdat any

$"$sel.read_from" = comdat any

$"$ct.dyn.std.io.ByteBuffer.write" = comdat any

$"$ct.dyn.std.io.ByteBuffer.write_byte" = comdat any

$"$ct.dyn.std.io.ByteBuffer.read" = comdat any

$"$ct.dyn.std.io.ByteBuffer.read_byte" = comdat any

$"$ct.dyn.std.io.ByteBuffer.pushback_byte" = comdat any

$"$ct.dyn.std.io.ByteBuffer.seek" = comdat any

$"$ct.dyn.std.io.ByteBuffer.available" = comdat any

$"$ct.dyn.std.io.TeeReader.read" = comdat any

$"$ct.dyn.std.io.TeeReader.read_byte" = comdat any

$"$ct.dyn.std.io.MultiWriter.write" = comdat any

$"$ct.dyn.std.io.MultiWriter.write_byte" = comdat any

$"$ct.dyn.std.io.Scanner.flush" = comdat any

$"$ct.dyn.std.io.Scanner.close" = comdat any

$"$ct.dyn.std.io.Scanner.read" = comdat any

$"$ct.dyn.std.io.Scanner.read_byte" = comdat any

$"$ct.dyn.std.io.MultiReader.read" = comdat any

$"$ct.dyn.std.io.MultiReader.read_byte" = comdat any

$"$ct.dyn.std.io.LimitReader.close" = comdat any

$"$ct.dyn.std.io.LimitReader.read" = comdat any

$"$ct.dyn.std.io.LimitReader.read_byte" = comdat any

$"$ct.dyn.std.io.LimitReader.available" = comdat any

$"$ct.dyn.std.core.ReflectedParam.to_format" = comdat any

$"$ct.ReflectedParam" = comdat any

@"$ct.std.io.BitReader" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.BitWriter" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.ByteReader" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.ReadBuffer" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 48, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.WriteBuffer" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.ByteWriter" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.ByteBuffer" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 64, i64 0, i64 6, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.TeeReader" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 32, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.MultiWriter" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 32, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.Scanner" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 48, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.MultiReader" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.LimitReader" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.File" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, comdat, align 8
@"std.io.PrintFault$BUFFER_EXCEEDED" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.PrintFault" to i64), %"char[]" { ptr @.fault, i64 15 }, i64 1 }, comdat, align 8
@.fault = internal constant [16 x i8] c"BUFFER_EXCEEDED\00", align 1
@"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.PrintFault" to i64), %"char[]" { ptr @.fault.1, i64 24 }, i64 2 }, comdat, align 8
@.fault.1 = internal constant [25 x i8] c"INTERNAL_BUFFER_EXCEEDED\00", align 1
@"std.io.PrintFault$INVALID_FORMAT" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.PrintFault" to i64), %"char[]" { ptr @.fault.2, i64 14 }, i64 3 }, comdat, align 8
@.fault.2 = internal constant [15 x i8] c"INVALID_FORMAT\00", align 1
@"std.io.PrintFault$NOT_ENOUGH_ARGUMENTS" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.PrintFault" to i64), %"char[]" { ptr @.fault.3, i64 20 }, i64 4 }, comdat, align 8
@.fault.3 = internal constant [21 x i8] c"NOT_ENOUGH_ARGUMENTS\00", align 1
@"std.io.PrintFault$INVALID_ARGUMENT" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.PrintFault" to i64), %"char[]" { ptr @.fault.4, i64 16 }, i64 5 }, comdat, align 8
@.fault.4 = internal constant [17 x i8] c"INVALID_ARGUMENT\00", align 1
@"$ct.std.io.PrintFault" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 5, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.$anon" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 32, i64 0, i64 5, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.Formatter" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 48, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.PrintFlags" = linkonce global %.introspect { i8 12, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.uint" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"std.io.IoError$ALREADY_EXISTS" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.6, i64 14 }, i64 1 }, comdat, align 8
@.fault.6 = internal constant [15 x i8] c"ALREADY_EXISTS\00", align 1
@"std.io.IoError$BUSY" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.7, i64 4 }, i64 2 }, comdat, align 8
@.fault.7 = internal constant [5 x i8] c"BUSY\00", align 1
@"std.io.IoError$CANNOT_READ_DIR" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.8, i64 15 }, i64 3 }, comdat, align 8
@.fault.8 = internal constant [16 x i8] c"CANNOT_READ_DIR\00", align 1
@"std.io.IoError$DIR_NOT_EMPTY" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.9, i64 13 }, i64 4 }, comdat, align 8
@.fault.9 = internal constant [14 x i8] c"DIR_NOT_EMPTY\00", align 1
@"std.io.IoError$EOF" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.10, i64 3 }, i64 5 }, comdat, align 8
@.fault.10 = internal constant [4 x i8] c"EOF\00", align 1
@"std.io.IoError$FILE_CANNOT_DELETE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.11, i64 18 }, i64 6 }, comdat, align 8
@.fault.11 = internal constant [19 x i8] c"FILE_CANNOT_DELETE\00", align 1
@"std.io.IoError$FILE_IS_DIR" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.12, i64 11 }, i64 7 }, comdat, align 8
@.fault.12 = internal constant [12 x i8] c"FILE_IS_DIR\00", align 1
@"std.io.IoError$FILE_IS_PIPE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.13, i64 12 }, i64 8 }, comdat, align 8
@.fault.13 = internal constant [13 x i8] c"FILE_IS_PIPE\00", align 1
@"std.io.IoError$FILE_NOT_DIR" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.14, i64 12 }, i64 9 }, comdat, align 8
@.fault.14 = internal constant [13 x i8] c"FILE_NOT_DIR\00", align 1
@"std.io.IoError$FILE_NOT_FOUND" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.15, i64 14 }, i64 10 }, comdat, align 8
@.fault.15 = internal constant [15 x i8] c"FILE_NOT_FOUND\00", align 1
@"std.io.IoError$FILE_NOT_VALID" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.16, i64 14 }, i64 11 }, comdat, align 8
@.fault.16 = internal constant [15 x i8] c"FILE_NOT_VALID\00", align 1
@"std.io.IoError$GENERAL_ERROR" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.17, i64 13 }, i64 12 }, comdat, align 8
@.fault.17 = internal constant [14 x i8] c"GENERAL_ERROR\00", align 1
@"std.io.IoError$ILLEGAL_ARGUMENT" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.18, i64 16 }, i64 13 }, comdat, align 8
@.fault.18 = internal constant [17 x i8] c"ILLEGAL_ARGUMENT\00", align 1
@"std.io.IoError$INCOMPLETE_WRITE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.19, i64 16 }, i64 14 }, comdat, align 8
@.fault.19 = internal constant [17 x i8] c"INCOMPLETE_WRITE\00", align 1
@"std.io.IoError$INTERRUPTED" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.20, i64 11 }, i64 15 }, comdat, align 8
@.fault.20 = internal constant [12 x i8] c"INTERRUPTED\00", align 1
@"std.io.IoError$INVALID_POSITION" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.21, i64 16 }, i64 16 }, comdat, align 8
@.fault.21 = internal constant [17 x i8] c"INVALID_POSITION\00", align 1
@"std.io.IoError$INVALID_PUSHBACK" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.22, i64 16 }, i64 17 }, comdat, align 8
@.fault.22 = internal constant [17 x i8] c"INVALID_PUSHBACK\00", align 1
@"std.io.IoError$NAME_TOO_LONG" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.23, i64 13 }, i64 18 }, comdat, align 8
@.fault.23 = internal constant [14 x i8] c"NAME_TOO_LONG\00", align 1
@"std.io.IoError$NOT_SEEKABLE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.24, i64 12 }, i64 19 }, comdat, align 8
@.fault.24 = internal constant [13 x i8] c"NOT_SEEKABLE\00", align 1
@"std.io.IoError$NO_PERMISSION" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.25, i64 13 }, i64 20 }, comdat, align 8
@.fault.25 = internal constant [14 x i8] c"NO_PERMISSION\00", align 1
@"std.io.IoError$OUT_OF_SPACE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.26, i64 12 }, i64 21 }, comdat, align 8
@.fault.26 = internal constant [13 x i8] c"OUT_OF_SPACE\00", align 1
@"std.io.IoError$OVERFLOW" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.27, i64 8 }, i64 22 }, comdat, align 8
@.fault.27 = internal constant [9 x i8] c"OVERFLOW\00", align 1
@"std.io.IoError$READ_ONLY" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.28, i64 9 }, i64 23 }, comdat, align 8
@.fault.28 = internal constant [10 x i8] c"READ_ONLY\00", align 1
@"std.io.IoError$SYMLINK_FAILED" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.29, i64 14 }, i64 24 }, comdat, align 8
@.fault.29 = internal constant [15 x i8] c"SYMLINK_FAILED\00", align 1
@"std.io.IoError$TOO_MANY_DESCRIPTORS" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.30, i64 20 }, i64 25 }, comdat, align 8
@.fault.30 = internal constant [21 x i8] c"TOO_MANY_DESCRIPTORS\00", align 1
@"std.io.IoError$UNEXPECTED_EOF" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.31, i64 14 }, i64 26 }, comdat, align 8
@.fault.31 = internal constant [15 x i8] c"UNEXPECTED_EOF\00", align 1
@"std.io.IoError$UNKNOWN_ERROR" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.32, i64 13 }, i64 27 }, comdat, align 8
@.fault.32 = internal constant [14 x i8] c"UNKNOWN_ERROR\00", align 1
@"std.io.IoError$UNSUPPORTED_OPERATION" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.33, i64 21 }, i64 28 }, comdat, align 8
@.fault.33 = internal constant [22 x i8] c"UNSUPPORTED_OPERATION\00", align 1
@"std.io.IoError$WOULD_BLOCK" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.34, i64 11 }, i64 29 }, comdat, align 8
@.fault.34 = internal constant [12 x i8] c"WOULD_BLOCK\00", align 1
@"$ct.std.io.IoError" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 29, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.BufferData" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@.enum.SET = internal constant [4 x i8] c"SET\00", align 1
@.enum.CURSOR = internal constant [7 x i8] c"CURSOR\00", align 1
@.enum.END = internal constant [4 x i8] c"END\00", align 1
@"$ct.int" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.Seek" = linkonce global { i8, i64, ptr, i64, i64, i64, [3 x %"char[]"] } { i8 8, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.int" to i64), i64 3, [3 x %"char[]"] [%"char[]" { ptr @.enum.SET, i64 3 }, %"char[]" { ptr @.enum.CURSOR, i64 6 }, %"char[]" { ptr @.enum.END, i64 3 }] }, comdat, align 8
@"std.io.FormattingFault$BAD_FORMAT" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.FormattingFault" to i64), %"char[]" { ptr @.fault.35, i64 10 }, i64 1 }, comdat, align 8
@.fault.35 = internal constant [11 x i8] c"BAD_FORMAT\00", align 1
@"$ct.std.io.FormattingFault" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, comdat, align 8
@.enum.FLOAT = internal constant [6 x i8] c"FLOAT\00", align 1
@.enum.EXPONENTIAL = internal constant [12 x i8] c"EXPONENTIAL\00", align 1
@.enum.ADAPTIVE = internal constant [9 x i8] c"ADAPTIVE\00", align 1
@.enum.HEX = internal constant [4 x i8] c"HEX\00", align 1
@"$ct.std.io.FloatFormatting" = linkonce global { i8, i64, ptr, i64, i64, i64, [4 x %"char[]"] } { i8 8, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.int" to i64), i64 4, [4 x %"char[]"] [%"char[]" { ptr @.enum.FLOAT, i64 5 }, %"char[]" { ptr @.enum.EXPONENTIAL, i64 11 }, %"char[]" { ptr @.enum.ADAPTIVE, i64 8 }, %"char[]" { ptr @.enum.HEX, i64 3 }] }, comdat, align 8
@std.io.WRITER_BITS = weak local_unnamed_addr constant i32 24, comdat, align 4, !dbg !0
@.panic_msg = internal constant [63 x i8] c"Reference parameter 'self' was passed a null pointer argument.\00", align 1
@.file = internal constant [8 x i8] c"bits.c3\00", align 1
@.func = internal constant [5 x i8] c"init\00", align 1
@std.core.builtin.panic = extern_weak global ptr, align 8
@.panic_msg.36 = internal constant [46 x i8] c"Dereference of null pointer, 'self' was null.\00", align 1
@"$ct.ulong" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.37 = internal constant [95 x i8] c"Unaligned access: ptr %% %s = %s, use @unaligned_load / @unaligned_store for unaligned access.\00", align 1
@.func.38 = internal constant [6 x i8] c"clear\00", align 1
@.func.39 = internal constant [10 x i8] c"read_bits\00", align 1
@.panic_msg.40 = internal constant [32 x i8] c"@require \22nbits <= 8\22 violated.\00", align 1
@.panic_msg.41 = internal constant [57 x i8] c"@require \22self.len + nbits <= uint.sizeof * 8\22 violated.\00", align 1
@"$sel.read_byte" = linkonce_odr constant [10 x i8] c"read_byte\00", comdat, align 1
@.panic_msg.42 = internal constant [47 x i8] c"No method 'read_byte' could be found on target\00", align 1
@.panic_msg.43 = internal constant [36 x i8] c"Shift amount out of range (was %s).\00", align 1
@.func.44 = internal constant [6 x i8] c"flush\00", align 1
@.panic_msg.45 = internal constant [118 x i8] c"@require \22is_arrayptr_or_slice_of_char(bytes)\22 violated: 'argument must be a pointer to an array or a slice of char'.\00", align 1
@.file.46 = internal constant [12 x i8] c"bitorder.c3\00", align 1
@.panic_msg.47 = internal constant [47 x i8] c"Dereference of null pointer, 'bytes' was null.\00", align 1
@.panic_msg.48 = internal constant [59 x i8] c"Dereference of null pointer, '$typeof(x)*)s.ptr' was null.\00", align 1
@.panic_msg.49 = internal constant [54 x i8] c"Dereference of null pointer, '$Type*)&expr' was null.\00", align 1
@.file.50 = internal constant [11 x i8] c"builtin.c3\00", align 1
@.panic_msg.51 = internal constant [61 x i8] c"End index out of bounds (end index of %d exceeds size of %d)\00", align 1
@"$sel.write" = linkonce_odr constant [6 x i8] c"write\00", comdat, align 1
@.panic_msg.52 = internal constant [43 x i8] c"No method 'write' could be found on target\00", align 1
@.file.53 = internal constant [10 x i8] c"stream.c3\00", align 1
@.func.54 = internal constant [11 x i8] c"write_bits\00", align 1
@.panic_msg.55 = internal constant [33 x i8] c"@require \22nbits <= 32\22 violated.\00", align 1
@.file.56 = internal constant [14 x i8] c"bytereader.c3\00", align 1
@.func.57 = internal constant [4 x i8] c"len\00", align 1
@.func.58 = internal constant [5 x i8] c"read\00", align 1
@.panic_msg.59 = internal constant [60 x i8] c"Array index out of bounds (array had size %d, index was %d)\00", align 1
@.panic_msg.60 = internal constant [96 x i8] c"@require \22len == 0 || dst + len <= src || src + len <= dst\22 violated: 'Ranges may not overlap'.\00", align 1
@.file.61 = internal constant [7 x i8] c"mem.c3\00", align 1
@.func.62 = internal constant [10 x i8] c"read_byte\00", align 1
@.func.63 = internal constant [14 x i8] c"pushback_byte\00", align 1
@.func.64 = internal constant [5 x i8] c"seek\00", align 1
@.func.65 = internal constant [9 x i8] c"write_to\00", align 1
@.panic_msg.66 = internal constant [62 x i8] c"Index exceeds array length (array had size %d, index was %d).\00", align 1
@.panic_msg.67 = internal constant [17 x i8] c"Assert violation\00", align 1
@.func.68 = internal constant [10 x i8] c"available\00", align 1
@.file.69 = internal constant [10 x i8] c"buffer.c3\00", align 1
@.panic_msg.70 = internal constant [35 x i8] c"@require \22bytes.len > 0\22 violated.\00", align 1
@.panic_msg.71 = internal constant [89 x i8] c"@require \22self.bytes.len == 0\22 violated: 'Init may not run on already initialized data'.\00", align 1
@.func.72 = internal constant [9 x i8] c"str_view\00", align 1
@.func.73 = internal constant [6 x i8] c"close\00", align 1
@"$sel.close" = linkonce_odr constant [6 x i8] c"close\00", comdat, align 1
@.panic_msg.74 = internal constant [43 x i8] c"No method 'close' could be found on target\00", align 1
@"$sel.read" = linkonce_odr constant [5 x i8] c"read\00", comdat, align 1
@.panic_msg.75 = internal constant [42 x i8] c"No method 'read' could be found on target\00", align 1
@.panic_msg.76 = internal constant [39 x i8] c"Slice copy length mismatch (%d != %d).\00", align 1
@.func.77 = internal constant [7 x i8] c"refill\00", align 1
@.panic_msg.78 = internal constant [64 x i8] c"@require \22bytes.len > 0\22 violated: 'Non-empty buffer required'.\00", align 1
@"$sel.flush" = linkonce_odr constant [6 x i8] c"flush\00", comdat, align 1
@.panic_msg.79 = internal constant [43 x i8] c"No method 'flush' could be found on target\00", align 1
@.func.80 = internal constant [6 x i8] c"write\00", align 1
@.func.81 = internal constant [11 x i8] c"write_byte\00", align 1
@.func.82 = internal constant [14 x i8] c"write_pending\00", align 1
@.file.83 = internal constant [14 x i8] c"bytewriter.c3\00", align 1
@.func.84 = internal constant [9 x i8] c"new_init\00", align 1
@.panic_msg.85 = internal constant [53 x i8] c"@ensure \22(bool)allocator, self.index == 0\22 violated.\00", align 1
@.func.86 = internal constant [10 x i8] c"temp_init\00", align 1
@std.core.mem.allocator.thread_temp_allocator = extern_weak thread_local global ptr, align 8
@"$ct.std.core.mem.allocator.TempAllocator" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 5, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.87 = internal constant [36 x i8] c"@ensure \22self.index == 0\22 violated.\00", align 1
@.func.88 = internal constant [17 x i8] c"init_with_buffer\00", align 1
@"$ct.void" = linkonce global %.introspect { i8 0, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.func.89 = internal constant [8 x i8] c"destroy\00", align 1
@"$sel.release" = linkonce_odr constant [8 x i8] c"release\00", comdat, align 1
@.panic_msg.90 = internal constant [45 x i8] c"No method 'release' could be found on target\00", align 1
@.file.91 = internal constant [17 x i8] c"mem_allocator.c3\00", align 1
@.func.92 = internal constant [16 x i8] c"ensure_capacity\00", align 1
@"$sel.acquire" = linkonce_odr constant [8 x i8] c"acquire\00", comdat, align 1
@.panic_msg.93 = internal constant [45 x i8] c"No method 'acquire' could be found on target\00", align 1
@"$sel.resize" = linkonce_odr constant [7 x i8] c"resize\00", comdat, align 1
@.panic_msg.94 = internal constant [44 x i8] c"No method 'resize' could be found on target\00", align 1
@.func.95 = internal constant [10 x i8] c"read_from\00", align 1
@"$sel.available" = linkonce_odr constant [10 x i8] c"available\00", comdat, align 1
@.panic_msg.96 = internal constant [47 x i8] c"No method 'available' could be found on target\00", align 1
@.file.97 = internal constant [14 x i8] c"bytebuffer.c3\00", align 1
@.panic_msg.98 = internal constant [72 x i8] c"@require \22self.bytes.len == 0\22 violated: 'Buffer already initialized.'.\00", align 1
@.panic_msg.99 = internal constant [33 x i8] c"@require \22buf.len > 0\22 violated.\00", align 1
@.func.100 = internal constant [5 x i8] c"free\00", align 1
@"$ct.long" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.101 = internal constant [23 x i8] c"Negative indexing (%d)\00", align 1
@.func.102 = internal constant [5 x i8] c"grow\00", align 1
@"$ct.anyfault" = linkonce global %.introspect { i8 6, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.103 = internal constant [37 x i8] c"Unexpected fault '%s' was unwrapped!\00", align 1
@.file.104 = internal constant [13 x i8] c"teereader.c3\00", align 1
@.file.105 = internal constant [15 x i8] c"multiwriter.c3\00", align 1
@.panic_msg.106 = internal constant [37 x i8] c"@require \22writers.len > 0\22 violated.\00", align 1
@.panic_msg.107 = internal constant [91 x i8] c"@require \22self.writers.len == 0\22 violated: 'Init may not run on already initialized data'.\00", align 1
@.panic_msg.108 = internal constant [54 x i8] c"Dereference of null pointer, 'self.writers' was null.\00", align 1
@.file.109 = internal constant [11 x i8] c"scanner.c3\00", align 1
@.panic_msg.110 = internal constant [66 x i8] c"@require \22buffer.len > 0\22 violated: 'Non-empty buffer required.'.\00", align 1
@.func.111 = internal constant [5 x i8] c"scan\00", align 1
@.panic_msg.112 = internal constant [68 x i8] c"@require \22pattern.len > 0\22 violated: 'Non-empty pattern required.'.\00", align 1
@.panic_msg.113 = internal constant [70 x i8] c"@require \22self.buf.len > pattern.len\22 violated: 'Pattern too large.'.\00", align 1
@"std.core.builtin.SearchResult$MISSING" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.builtin.SearchResult" to i64), %"char[]" { ptr @.fault.114, i64 7 }, i64 1 }, comdat, align 8
@.fault.114 = internal constant [8 x i8] c"MISSING\00", align 1
@"$ct.std.core.builtin.SearchResult" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, comdat, align 8
@.file.115 = internal constant [15 x i8] c"multireader.c3\00", align 1
@.panic_msg.116 = internal constant [91 x i8] c"@require \22self.readers.len == 0\22 violated: 'Init may not run on already initialized data'.\00", align 1
@.file.117 = internal constant [15 x i8] c"limitreader.c3\00", align 1
@std.io.PRINTF_NTOA_BUFFER_SIZE = weak local_unnamed_addr constant i32 256, comdat, align 4, !dbg !4
@.file.118 = internal constant [13 x i8] c"formatter.c3\00", align 1
@.func.119 = internal constant [10 x i8] c"to_format\00", align 1
@.str = private unnamed_addr constant [17 x i8] c"[Parameter '%s']\00", align 1
@"$ct.String" = linkonce global %.introspect { i8 18, i64 ptrtoint (ptr @"$ct.sa$char" to i64), ptr null, i64 16, i64 ptrtoint (ptr @"$ct.sa$char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.sa$char" = linkonce global %.introspect { i8 16, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.char" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.func.120 = internal constant [7 x i8] c"printf\00", align 1
@.func.121 = internal constant [4 x i8] c"out\00", align 1
@.panic_msg.122 = internal constant [55 x i8] c"Calling null function pointer, 'self.out_fn' was null.\00", align 1
@.func.123 = internal constant [20 x i8] c"print_with_function\00", align 1
@"$sel.to_format" = linkonce_odr constant [10 x i8] c"to_format\00", comdat, align 1
@.str.124 = private unnamed_addr constant [7 x i8] c"(null)\00", align 1
@.panic_msg.125 = internal constant [47 x i8] c"No method 'to_format' could be found on target\00", align 1
@"$sel.to_string" = linkonce_odr constant [10 x i8] c"to_string\00", comdat, align 1
@.str.126 = private unnamed_addr constant [7 x i8] c"(null)\00", align 1
@std.core.mem.allocator.thread_allocator = extern_weak thread_local global %any, align 8
@"$ct.std.core.mem.allocator.OnStackAllocator" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 48, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.127 = internal constant [47 x i8] c"No method 'to_string' could be found on target\00", align 1
@.func.128 = internal constant [8 x i8] c"out_str\00", align 1
@.str.129 = private unnamed_addr constant [7 x i8] c"typeid\00", align 1
@.str.130 = private unnamed_addr constant [5 x i8] c"void\00", align 1
@.panic_msg.131 = internal constant [59 x i8] c"Dereference of null pointer, 'anyfault*)arg.ptr' was null.\00", align 1
@.panic_msg.132 = internal constant [50 x i8] c"Dereference of null pointer, 'any*)arg' was null.\00", align 1
@.str.133 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.134 = private unnamed_addr constant [13 x i8] c"formatter.c3\00", align 1
@.str.135 = private unnamed_addr constant [18 x i8] c"Formatter.out_str\00", align 1
@.str.136 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.str.137 = private unnamed_addr constant [4 x i8] c"ERR\00", align 1
@.panic_msg.138 = internal constant [55 x i8] c"Dereference of null pointer, 'bool*)arg.ptr' was null.\00", align 1
@.str.139 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@.str.140 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@.panic_msg.141 = internal constant [70 x i8] c"@require \22$Type.kindof.is_int()\22 violated: 'Type was not an integer'.\00", align 1
@.file.142 = internal constant [9 x i8] c"types.c3\00", align 1
@.panic_msg.143 = internal constant [68 x i8] c"@require \22v.type.kindof == ENUM\22 violated: 'Value was not an enum'.\00", align 1
@.panic_msg.144 = internal constant [50 x i8] c"Attempted to access 'inner' on non composite type\00", align 1
@.panic_msg.145 = internal constant [72 x i8] c"@require \22v.type.kindof.is_int()\22 violated: 'Value was not an integer'.\00", align 1
@"$ct.ichar" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.146 = internal constant [53 x i8] c"Dereference of null pointer, 'char*)v.ptr' was null.\00", align 1
@"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.types.ConversionResult" to i64), %"char[]" { ptr @.fault.147, i64 18 }, i64 1 }, comdat, align 8
@.fault.147 = internal constant [19 x i8] c"VALUE_OUT_OF_RANGE\00", align 1
@"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.types.ConversionResult" to i64), %"char[]" { ptr @.fault.148, i64 27 }, i64 2 }, comdat, align 8
@.fault.148 = internal constant [28 x i8] c"VALUE_OUT_OF_UNSIGNED_RANGE\00", align 1
@"$ct.std.core.types.ConversionResult" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.short" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 2, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.149 = internal constant [54 x i8] c"Dereference of null pointer, 'short*)v.ptr' was null.\00", align 1
@.panic_msg.150 = internal constant [52 x i8] c"Dereference of null pointer, 'int*)v.ptr' was null.\00", align 1
@.panic_msg.151 = internal constant [53 x i8] c"Dereference of null pointer, 'long*)v.ptr' was null.\00", align 1
@"$ct.int128" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 16, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.152 = internal constant [55 x i8] c"Dereference of null pointer, 'int128*)v.ptr' was null.\00", align 1
@"$ct.ushort" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 2, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.153 = internal constant [55 x i8] c"Dereference of null pointer, 'ushort*)v.ptr' was null.\00", align 1
@.panic_msg.154 = internal constant [53 x i8] c"Dereference of null pointer, 'uint*)v.ptr' was null.\00", align 1
@.panic_msg.155 = internal constant [54 x i8] c"Dereference of null pointer, 'ulong*)v.ptr' was null.\00", align 1
@"$ct.uint128" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 16, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.156 = internal constant [56 x i8] c"Dereference of null pointer, 'uint128*)v.ptr' was null.\00", align 1
@.str.157 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.158 = private unnamed_addr constant [13 x i8] c"formatter.c3\00", align 1
@.str.159 = private unnamed_addr constant [18 x i8] c"Formatter.out_str\00", align 1
@.panic_msg.160 = internal constant [52 x i8] c"Attempted to access 'names' on non enum/fault type.\00", align 1
@.panic_msg.161 = internal constant [50 x i8] c"Illegal enum value found, numerical value was %d.\00", align 1
@.str.162 = private unnamed_addr constant [9 x i8] c"<struct>\00", align 1
@.str.163 = private unnamed_addr constant [8 x i8] c"<union>\00", align 1
@.str.164 = private unnamed_addr constant [12 x i8] c"<bitstruct>\00", align 1
@.str.165 = private unnamed_addr constant [11 x i8] c"<function>\00", align 1
@.panic_msg.166 = internal constant [53 x i8] c"Dereference of null pointer, 'String*)arg' was null.\00", align 1
@"$ct.std.core.string.ZString" = linkonce global %.introspect { i8 18, i64 ptrtoint (ptr @"$ct.p$char" to i64), ptr null, i64 8, i64 ptrtoint (ptr @"$ct.p$char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.p$char" = linkonce global %.introspect { i8 19, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.167 = internal constant [54 x i8] c"Dereference of null pointer, 'ZString*)arg' was null.\00", align 1
@.panic_msg.168 = internal constant [55 x i8] c"Dereference of null pointer, 'ZString*)arg)' was null.\00", align 1
@.str.169 = private unnamed_addr constant [7 x i8] c"(null)\00", align 1
@"$ct.std.core.dstring.DString" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.p$std.core.dstring.DStringOpaque" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.p$std.core.dstring.DStringOpaque" = linkonce global %.introspect { i8 19, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.std.core.dstring.DStringOpaque" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.dstring.DStringOpaque" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 1, i64 ptrtoint (ptr @"$ct.void" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.170 = internal constant [54 x i8] c"Dereference of null pointer, 'DString*)arg' was null.\00", align 1
@.panic_msg.171 = internal constant [55 x i8] c"Dereference of null pointer, 'DString*)arg)' was null.\00", align 1
@.str.172 = private unnamed_addr constant [7 x i8] c"(null)\00", align 1
@.panic_msg.173 = internal constant [49 x i8] c"Dereference of null pointer, 'pointer' was null.\00", align 1
@.str.174 = private unnamed_addr constant [3 x i8] c"0x\00", align 1
@.panic_msg.175 = internal constant [44 x i8] c"Attempted to access 'len' on non array type\00", align 1
@.str.176 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.177 = private unnamed_addr constant [3 x i8] c"[<\00", align 1
@.str.178 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.179 = private unnamed_addr constant [3 x i8] c">]\00", align 1
@.panic_msg.180 = internal constant [46 x i8] c"Dereference of null pointer, 'temp' was null.\00", align 1
@.str.181 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.182 = private unnamed_addr constant [16 x i8] c"Already handled\00", align 1
@.str.183 = private unnamed_addr constant [13 x i8] c"formatter.c3\00", align 1
@.str.184 = private unnamed_addr constant [18 x i8] c"Formatter.out_str\00", align 1
@.str.185 = private unnamed_addr constant [13 x i8] c"Invalid type\00", align 1
@.func.186 = internal constant [8 x i8] c"vprintf\00", align 1
@.str.187 = private unnamed_addr constant [5 x i8] c"%ERR\00", align 1
@.str.188 = private unnamed_addr constant [5 x i8] c"%ERR\00", align 1
@.str.189 = private unnamed_addr constant [5 x i8] c"%ERR\00", align 1
@.str.190 = private unnamed_addr constant [13 x i8] c"<BAD FORMAT>\00", align 1
@.str.191 = private unnamed_addr constant [13 x i8] c"<BAD FORMAT>\00", align 1
@.str.192 = private unnamed_addr constant [10 x i8] c"<MISSING>\00", align 1
@.str.193 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.str.194 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.str.195 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.str.196 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.panic_msg.197 = internal constant [49 x i8] c"Dereference of null pointer, 'current' was null.\00", align 1
@"$ct.sa$ichar" = linkonce global %.introspect { i8 16, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.ichar" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.198 = internal constant [57 x i8] c"Dereference of null pointer, 'char[]*)current' was null.\00", align 1
@.str.199 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.str.200 = private unnamed_addr constant [13 x i8] c"<BAD FORMAT>\00", align 1
@.str.201 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.func.202 = internal constant [6 x i8] c"print\00", align 1
@std.io.MAX_VARS = internal unnamed_addr constant { [2 x i8], i8, i8, i8, [3 x i8], i8 } { [2 x i8] zeroinitializer, i8 3, i8 0, i8 5, [3 x i8] zeroinitializer, i8 10 }, align 1, !dbg !7
@"$sel.seek" = linkonce_odr constant [5 x i8] c"seek\00", comdat, align 1
@.panic_msg.203 = internal constant [42 x i8] c"No method 'seek' could be found on target\00", align 1
@.func.204 = internal constant [8 x i8] c"copy_to\00", align 1
@"$sel.write_to" = linkonce_odr constant [9 x i8] c"write_to\00", comdat, align 1
@.panic_msg.205 = internal constant [46 x i8] c"No method 'write_to' could be found on target\00", align 1
@"$sel.read_to" = linkonce_odr constant [8 x i8] c"read_to\00", comdat, align 1
@.panic_msg.206 = internal constant [45 x i8] c"No method 'read_to' could be found on target\00", align 1
@"$sel.write_byte" = linkonce_odr constant [11 x i8] c"write_byte\00", comdat, align 1
@.panic_msg.207 = internal constant [48 x i8] c"No method 'write_byte' could be found on target\00", align 1
@.file.208 = internal constant [6 x i8] c"io.c3\00", align 1
@.func.209 = internal constant [9 x i8] c"fprintfn\00", align 1
@.panic_msg.210 = internal constant [48 x i8] c"Dereference of null pointer, 'stream' was null.\00", align 1
@.func.211 = internal constant [17 x i8] c"out_putstream_fn\00", align 1
@.func.212 = internal constant [8 x i8] c"bprintf\00", align 1
@.func.213 = internal constant [14 x i8] c"out_buffer_fn\00", align 1
@stdout.file = internal global %File zeroinitializer, align 8, !dbg !14
@stdout = external global ptr, align 8
@stderr.file = internal global %File zeroinitializer, align 8, !dbg !22
@stderr = external global ptr, align 8
@stdin.file = internal global %File zeroinitializer, align 8, !dbg !24
@stdin = external global ptr, align 8
@std.io.XDIGITS_H = weak constant [16 x i8] c"0123456789ABCDEF", comdat, align 16, !dbg !26
@std.io.XDIGITS_L = weak constant [16 x i8] c"0123456789abcdef", comdat, align 16, !dbg !32
@.file.215 = internal constant [21 x i8] c"formatter_private.c3\00", align 1
@.func.216 = internal constant [16 x i8] c"print_hex_chars\00", align 1
@.panic_msg.217 = internal constant [48 x i8] c"Dereference of null pointer, 'is_neg' was null.\00", align 1
@.func.218 = internal constant [13 x i8] c"int_from_any\00", align 1
@.panic_msg.219 = internal constant [56 x i8] c"Dereference of null pointer, 'void**)arg.ptr' was null.\00", align 1
@"$ct.bool" = linkonce global %.introspect { i8 1, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.220 = internal constant [45 x i8] c"Dereference of null pointer, 'arg' was null.\00", align 1
@"$ct.float" = linkonce global %.introspect { i8 4, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.double" = linkonce global %.introspect { i8 4, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.func.221 = internal constant [15 x i8] c"float_from_any\00", align 1
@.panic_msg.222 = internal constant [49 x i8] c"Dereference of null pointer, 'len_ptr' was null.\00", align 1
@.func.223 = internal constant [12 x i8] c"simple_atoi\00", align 1
@.panic_msg.224 = internal constant [45 x i8] c"Dereference of null pointer, '--s' was null.\00", align 1
@.func.225 = internal constant [6 x i8] c"fmt_u\00", align 1
@.panic_msg.226 = internal constant [51 x i8] c"Dereference of null pointer, 'index_ptr' was null.\00", align 1
@.func.227 = internal constant [26 x i8] c"printf_parse_format_field\00", align 1
@.panic_msg.228 = internal constant [56 x i8] c"Dereference of null pointer, 'args_index_ptr' was null.\00", align 1
@.str.229 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.230 = private unnamed_addr constant [21 x i8] c"formatter_private.c3\00", align 1
@.str.231 = private unnamed_addr constant [26 x i8] c"printf_parse_format_field\00", align 1
@.func.232 = internal constant [7 x i8] c"adjust\00", align 1
@.func.233 = internal constant [11 x i8] c"out_substr\00", align 1
@.func.234 = internal constant [4 x i8] c"pad\00", align 1
@.func.235 = internal constant [10 x i8] c"out_chars\00", align 1
@.func.236 = internal constant [5 x i8] c"etoa\00", align 1
@.func.237 = internal constant [5 x i8] c"ftoa\00", align 1
@.func.238 = internal constant [5 x i8] c"gtoa\00", align 1
@.func.239 = internal constant [5 x i8] c"atoa\00", align 1
@.func.240 = internal constant [12 x i8] c"floatformat\00", align 1
@floatformat.BUF_SIZE = internal unnamed_addr constant i32 126, align 4, !dbg !34
@.str.241 = private unnamed_addr constant [4 x i8] c"INF\00", align 1
@.str.242 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.243 = private unnamed_addr constant [4 x i8] c"NAN\00", align 1
@.str.244 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.panic_msg.245 = internal constant [48 x i8] c"Dereference of null pointer, '--estr' was null.\00", align 1
@.panic_msg.246 = internal constant [45 x i8] c"Dereference of null pointer, 's++' was null.\00", align 1
@.str.247 = private unnamed_addr constant [3 x i8] c"0X\00", align 1
@.str.248 = private unnamed_addr constant [3 x i8] c"0x\00", align 1
@.panic_msg.249 = internal constant [43 x i8] c"Dereference of null pointer, 'd' was null.\00", align 1
@.panic_msg.250 = internal constant [45 x i8] c"Dereference of null pointer, '--a' was null.\00", align 1
@.panic_msg.251 = internal constant [43 x i8] c"Dereference of null pointer, 'a' was null.\00", align 1
@.panic_msg.252 = internal constant [11 x i8] c"% by zero.\00", align 1
@.panic_msg.253 = internal constant [18 x i8] c"Division by zero.\00", align 1
@.panic_msg.254 = internal constant [45 x i8] c"Dereference of null pointer, 'd--' was null.\00", align 1
@.func.255 = internal constant [5 x i8] c"ntoa\00", align 1
@.func.256 = internal constant [12 x i8] c"ntoa_format\00", align 1
@.str.257 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.258 = private unnamed_addr constant [21 x i8] c"formatter_private.c3\00", align 1
@.str.259 = private unnamed_addr constant [22 x i8] c"Formatter.ntoa_format\00", align 1
@.func.260 = internal constant [9 x i8] c"ntoa_any\00", align 1
@.func.261 = internal constant [9 x i8] c"out_char\00", align 1
@.str.262 = private unnamed_addr constant [11 x i8] c"<NOT CHAR>\00", align 1
@.str.263 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.264 = private unnamed_addr constant [21 x i8] c"formatter_private.c3\00", align 1
@.str.265 = private unnamed_addr constant [19 x i8] c"Formatter.out_char\00", align 1
@.func.266 = internal constant [12 x i8] c"out_reverse\00", align 1
@"$ct.dyn.std.io.ByteReader.len" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteReader.len, ptr @"$sel.len", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.len" = linkonce_odr constant [4 x i8] c"len\00", comdat, align 1
@"$ct.dyn.std.io.ByteReader.read" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteReader.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteReader.read_byte" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteReader.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteReader.pushback_byte" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteReader.pushback_byte, ptr @"$sel.pushback_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.pushback_byte" = linkonce_odr constant [14 x i8] c"pushback_byte\00", comdat, align 1
@"$ct.dyn.std.io.ByteReader.seek" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteReader.seek, ptr @"$sel.seek", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteReader.write_to" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteReader.write_to, ptr @"$sel.write_to", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteReader.available" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteReader.available, ptr @"$sel.available", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ReadBuffer.close" = weak global { ptr, ptr, ptr } { ptr @std.io.ReadBuffer.close, ptr @"$sel.close", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ReadBuffer.read" = weak global { ptr, ptr, ptr } { ptr @std.io.ReadBuffer.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ReadBuffer.read_byte" = weak global { ptr, ptr, ptr } { ptr @std.io.ReadBuffer.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.WriteBuffer.close" = weak global { ptr, ptr, ptr } { ptr @std.io.WriteBuffer.close, ptr @"$sel.close", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.WriteBuffer.flush" = weak global { ptr, ptr, ptr } { ptr @std.io.WriteBuffer.flush, ptr @"$sel.flush", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.WriteBuffer.write" = weak global { ptr, ptr, ptr } { ptr @std.io.WriteBuffer.write, ptr @"$sel.write", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.WriteBuffer.write_byte" = weak global { ptr, ptr, ptr } { ptr @std.io.WriteBuffer.write_byte, ptr @"$sel.write_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteWriter.destroy" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteWriter.destroy, ptr @"$sel.destroy", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.destroy" = linkonce_odr constant [8 x i8] c"destroy\00", comdat, align 1
@"$ct.dyn.std.io.ByteWriter.write" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteWriter.write, ptr @"$sel.write", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteWriter.write_byte" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteWriter.write_byte, ptr @"$sel.write_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteWriter.read_from" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteWriter.read_from, ptr @"$sel.read_from", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.read_from" = linkonce_odr constant [10 x i8] c"read_from\00", comdat, align 1
@"$ct.dyn.std.io.ByteBuffer.write" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.write, ptr @"$sel.write", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteBuffer.write_byte" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.write_byte, ptr @"$sel.write_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteBuffer.read" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteBuffer.read_byte" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteBuffer.pushback_byte" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.pushback_byte, ptr @"$sel.pushback_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteBuffer.seek" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.seek, ptr @"$sel.seek", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteBuffer.available" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.available, ptr @"$sel.available", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.TeeReader.read" = weak global { ptr, ptr, ptr } { ptr @std.io.TeeReader.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.TeeReader.read_byte" = weak global { ptr, ptr, ptr } { ptr @std.io.TeeReader.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.MultiWriter.write" = weak global { ptr, ptr, ptr } { ptr @std.io.MultiWriter.write, ptr @"$sel.write", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.MultiWriter.write_byte" = weak global { ptr, ptr, ptr } { ptr @std.io.MultiWriter.write_byte, ptr @"$sel.write_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.Scanner.flush" = weak global { ptr, ptr, ptr } { ptr @std.io.Scanner.flush, ptr @"$sel.flush", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.Scanner.close" = weak global { ptr, ptr, ptr } { ptr @std.io.Scanner.close, ptr @"$sel.close", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.Scanner.read" = weak global { ptr, ptr, ptr } { ptr @std.io.Scanner.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.Scanner.read_byte" = weak global { ptr, ptr, ptr } { ptr @std.io.Scanner.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.MultiReader.read" = weak global { ptr, ptr, ptr } { ptr @std.io.MultiReader.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.MultiReader.read_byte" = weak global { ptr, ptr, ptr } { ptr @std.io.MultiReader.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.LimitReader.close" = weak global { ptr, ptr, ptr } { ptr @std.io.LimitReader.close, ptr @"$sel.close", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.LimitReader.read" = weak global { ptr, ptr, ptr } { ptr @std.io.LimitReader.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.LimitReader.read_byte" = weak global { ptr, ptr, ptr } { ptr @std.io.LimitReader.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.LimitReader.available" = weak global { ptr, ptr, ptr } { ptr @std.io.LimitReader.available, ptr @"$sel.available", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.ReflectedParam.to_format" = weak global { ptr, ptr, ptr } { ptr @std.core.ReflectedParam.to_format, ptr @"$sel.to_format", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.ReflectedParam" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 1, ptr @.c3_dynamic_register, ptr null }]

; Function Attrs: nounwind ssp uwtable
define weak void @std.io.BitReader.init(ptr %0, i64 %1, ptr %2) #0 comdat !dbg !81 {
entry:
  %self = alloca ptr, align 8
  %byte_reader = alloca %any, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.assign_list = alloca %BitReader, align 8
  %3 = icmp eq ptr %0, null, !dbg !97
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !97
  br i1 %4, label %panic, label %checkok, !dbg !97

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !98, !DIExpression(), !99)
  store i64 %1, ptr %byte_reader, align 8
  %ptradd = getelementptr inbounds i8, ptr %byte_reader, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %byte_reader, !100, !DIExpression(), !101)
  %5 = load ptr, ptr %self, align 8, !dbg !102
  %checknull = icmp eq ptr %5, null, !dbg !102
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !102
  br i1 %6, label %panic1, label %checkok2, !dbg !102

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !102
  %8 = urem i64 %7, 8, !dbg !102
  %9 = icmp ne i64 %8, 0, !dbg !102
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !102
  br i1 %10, label %panic3, label %checkok6, !dbg !102

checkok6:                                         ; preds = %checkok2
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 24, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %byte_reader, i32 16, i1 false), !dbg !103
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 8 %.assign_list, i32 24, i1 false), !dbg !103
  ret void, !dbg !103

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !99
  call void %11(ptr @.panic_msg, i64 62, ptr @.file, i64 7, ptr @.func, i64 4, i32 10) #5, !dbg !99
  unreachable, !dbg !99

panic1:                                           ; preds = %checkok
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !102
  call void %12(ptr @.panic_msg.36, i64 45, ptr @.file, i64 7, ptr @.func, i64 4, i32 12) #5, !dbg !102
  unreachable, !dbg !102

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %13 = insertvalue %any undef, ptr %taddr, 0
  %14 = insertvalue %any %13, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %15 = insertvalue %any undef, ptr %taddr4, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %14, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %16, ptr %ptradd5, align 16
  %17 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %17, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file, i64 7, ptr @.func, i64 4, i32 12, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !102
  unreachable, !dbg !102
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.io.BitReader.clear(ptr %0) #0 comdat !dbg !104 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !107
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !107
  br i1 %2, label %panic, label %checkok, !dbg !107

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !108, !DIExpression(), !109)
  %3 = load ptr, ptr %self, align 8, !dbg !110
  %ptradd = getelementptr inbounds i8, ptr %3, i64 20, !dbg !110
  store i32 0, ptr %ptradd, align 4, !dbg !111
  ret void, !dbg !111

panic:                                            ; preds = %entry
  %4 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !109
  call void %4(ptr @.panic_msg, i64 62, ptr @.file, i64 7, ptr @.func.38, i64 5, i32 15) #5, !dbg !109
  unreachable, !dbg !109
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.BitReader.read_bits(ptr %0, ptr %1, i32 %2) #0 comdat !dbg !112 {
entry:
  %self = alloca ptr, align 8
  %nbits = alloca i32, align 4
  %bits = alloca i32, align 4
  %c = alloca i8, align 1
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i8, align 1
  %mask = alloca i32, align 4
  %taddr = alloca i32, align 4
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr16 = alloca i32, align 4
  %varargslots17 = alloca [1 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %taddr26 = alloca i32, align 4
  %varargslots27 = alloca [1 x %any], align 16
  %indirectarg29 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !118
  %3 = icmp eq ptr %1, null, !dbg !118
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !118
  br i1 %4, label %panic, label %checkok, !dbg !118

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !119, !DIExpression(), !120)
  store i32 %2, ptr %nbits, align 4
    #dbg_declare(ptr %nbits, !121, !DIExpression(), !122)
  %5 = load i32, ptr %nbits, align 4, !dbg !123
  %ge = icmp uge i32 8, %5, !dbg !123
  br i1 %ge, label %assert_ok, label %assert_fail, !dbg !123

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !123
  call void %6(ptr @.panic_msg.40, i64 31, ptr @.file, i64 7, ptr @.func.39, i64 9, i32 21) #5, !dbg !123
  unreachable, !dbg !123

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !125
  %ptradd = getelementptr inbounds i8, ptr %7, i64 20, !dbg !125
  %8 = load i32, ptr %ptradd, align 4, !dbg !125
  %9 = load i32, ptr %nbits, align 4, !dbg !126
  %add = add i32 %8, %9, !dbg !125
  %zext = zext i32 %add to i64, !dbg !125
  %ge1 = icmp uge i64 32, %zext, !dbg !125
  br i1 %ge1, label %assert_ok3, label %assert_fail2, !dbg !125

assert_fail2:                                     ; preds = %assert_ok
  %10 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !125
  call void %10(ptr @.panic_msg.41, i64 56, ptr @.file, i64 7, ptr @.func.39, i64 9, i32 22) #5, !dbg !125
  unreachable, !dbg !125

assert_ok3:                                       ; preds = %assert_ok
    #dbg_declare(ptr %bits, !127, !DIExpression(), !128)
  %11 = load ptr, ptr %self, align 8, !dbg !129
  %ptradd4 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !129
  %12 = load i32, ptr %ptradd4, align 8, !dbg !129
  store i32 %12, ptr %bits, align 4, !dbg !129
  %13 = load ptr, ptr %self, align 8, !dbg !130
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 20, !dbg !130
  %14 = load i32, ptr %ptradd5, align 4, !dbg !130
  %15 = load i32, ptr %nbits, align 4, !dbg !131
  %lt = icmp ult i32 %14, %15, !dbg !130
  br i1 %lt, label %if.then, label %if.exit, !dbg !130

if.then:                                          ; preds = %assert_ok3
    #dbg_declare(ptr %c, !132, !DIExpression(), !134)
  %16 = load ptr, ptr %self, align 8, !dbg !135
  %ptradd6 = getelementptr inbounds i8, ptr %16, i64 8, !dbg !135
  %17 = load i64, ptr %ptradd6, align 8, !dbg !135
  %18 = inttoptr i64 %17 to ptr, !dbg !135
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !118
  %19 = icmp eq ptr %18, %type, !dbg !118
  br i1 %19, label %cache_hit, label %cache_miss, !dbg !118

cache_miss:                                       ; preds = %if.then
  %ptradd7 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !118
  %20 = load ptr, ptr %ptradd7, align 8, !dbg !118
  %21 = call ptr @.dyn_search(ptr %20, ptr @"$sel.read_byte"), !dbg !118
  store ptr %21, ptr %.inlinecache, align 8, !dbg !118
  store ptr %18, ptr %.cachedtype, align 8, !dbg !118
  br label %22, !dbg !118

cache_hit:                                        ; preds = %if.then
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !118
  br label %22, !dbg !118

22:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %21, %cache_miss ], !dbg !118
  %23 = icmp eq ptr %fn_phi, null, !dbg !118
  br i1 %23, label %missing_function, label %match, !dbg !118

missing_function:                                 ; preds = %22
  %24 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !135
  call void %24(ptr @.panic_msg.42, i64 46, ptr @.file, i64 7, ptr @.func.39, i64 9, i32 30) #5, !dbg !135
  unreachable, !dbg !135

match:                                            ; preds = %22
  %25 = load ptr, ptr %16, align 8
  %26 = call i64 %fn_phi(ptr %retparam, ptr %25), !dbg !135
  %not_err = icmp eq i64 %26, 0, !dbg !135
  %27 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !135
  br i1 %27, label %after_check, label %assign_optional, !dbg !135

assign_optional:                                  ; preds = %match
  store i64 %26, ptr %error_var, align 8, !dbg !135
  br label %guard_block, !dbg !135

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !135

guard_block:                                      ; preds = %assign_optional
  %28 = load i64, ptr %error_var, align 8, !dbg !135
  ret i64 %28, !dbg !135

noerr_block:                                      ; preds = %after_check
  %29 = load i8, ptr %retparam, align 1, !dbg !135
  store i8 %29, ptr %c, align 1, !dbg !135
  %30 = load i32, ptr %bits, align 4, !dbg !136
  %shl = shl i32 %30, 8, !dbg !136
  %31 = freeze i32 %shl, !dbg !136
  store i32 %31, ptr %bits, align 4, !dbg !136
  %32 = load i32, ptr %bits, align 4, !dbg !137
  %33 = load i8, ptr %c, align 1, !dbg !138
  %zext8 = zext i8 %33 to i32, !dbg !138
  %or = or i32 %32, %zext8, !dbg !137
  store i32 %or, ptr %bits, align 4, !dbg !137
  %34 = load ptr, ptr %self, align 8, !dbg !139
  %ptradd9 = getelementptr inbounds i8, ptr %34, i64 16, !dbg !139
  %35 = load i32, ptr %bits, align 4, !dbg !140
  store i32 %35, ptr %ptradd9, align 8, !dbg !140
  %36 = load ptr, ptr %self, align 8, !dbg !141
  %ptradd10 = getelementptr inbounds i8, ptr %36, i64 20, !dbg !141
  %37 = load i32, ptr %ptradd10, align 4, !dbg !141
  %add11 = add i32 %37, 8, !dbg !141
  store i32 %add11, ptr %ptradd10, align 4, !dbg !141
  br label %if.exit, !dbg !141

if.exit:                                          ; preds = %noerr_block, %assert_ok3
  %38 = load ptr, ptr %self, align 8, !dbg !142
  %ptradd12 = getelementptr inbounds i8, ptr %38, i64 20, !dbg !142
  %39 = load i32, ptr %ptradd12, align 4, !dbg !142
  %40 = load i32, ptr %nbits, align 4, !dbg !143
  %sub = sub i32 %39, %40, !dbg !142
  store i32 %sub, ptr %ptradd12, align 4, !dbg !142
    #dbg_declare(ptr %mask, !144, !DIExpression(), !145)
  %41 = load i32, ptr %nbits, align 4, !dbg !146
  %shift_underflow = icmp slt i32 %41, 0, !dbg !147
  %42 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !147
  br i1 %42, label %panic13, label %checkok14, !dbg !147

checkok14:                                        ; preds = %if.exit
  %shift_exceeds = icmp sge i32 %41, 32, !dbg !147
  %43 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !147
  br i1 %43, label %panic15, label %checkok20, !dbg !147

checkok20:                                        ; preds = %checkok14
  %shl21 = shl i32 1, %41, !dbg !147
  %44 = freeze i32 %shl21, !dbg !147
  %sub22 = sub i32 %44, 1, !dbg !147
  store i32 %sub22, ptr %mask, align 4, !dbg !147
  %45 = load i32, ptr %bits, align 4, !dbg !148
  %46 = load ptr, ptr %self, align 8, !dbg !149
  %ptradd23 = getelementptr inbounds i8, ptr %46, i64 20, !dbg !149
  %47 = load i32, ptr %ptradd23, align 4, !dbg !149
  %shift_exceeds24 = icmp uge i32 %47, 32, !dbg !148
  %48 = call i1 @llvm.expect.i1(i1 %shift_exceeds24, i1 false), !dbg !148
  br i1 %48, label %panic25, label %checkok30, !dbg !148

checkok30:                                        ; preds = %checkok20
  %lshr = lshr i32 %45, %47, !dbg !148
  %49 = freeze i32 %lshr, !dbg !148
  %50 = load i32, ptr %mask, align 4, !dbg !150
  %and = and i32 %49, %50, !dbg !151
  %trunc = trunc i32 %and to i8, !dbg !151
  store i8 %trunc, ptr %0, align 1, !dbg !151
  ret i64 0, !dbg !151

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !120
  call void %51(ptr @.panic_msg, i64 62, ptr @.file, i64 7, ptr @.func.39, i64 9, i32 24) #5, !dbg !120
  unreachable, !dbg !120

panic13:                                          ; preds = %if.exit
  store i32 %41, ptr %taddr, align 4
  %52 = insertvalue %any undef, ptr %taddr, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.43, i64 35, ptr @.file, i64 7, ptr @.func.39, i64 9, i32 37, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !147
  unreachable, !dbg !147

panic15:                                          ; preds = %checkok14
  store i32 %41, ptr %taddr16, align 4
  %55 = insertvalue %any undef, ptr %taddr16, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %56, ptr %varargslots17, align 16
  %57 = insertvalue %"any[]" undef, ptr %varargslots17, 0
  %"$$temp18" = insertvalue %"any[]" %57, i64 1, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.43, i64 35, ptr @.file, i64 7, ptr @.func.39, i64 9, i32 37, ptr byval(%"any[]") align 8 %indirectarg19) #5, !dbg !147
  unreachable, !dbg !147

panic25:                                          ; preds = %checkok20
  store i32 %47, ptr %taddr26, align 4
  %58 = insertvalue %any undef, ptr %taddr26, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %59, ptr %varargslots27, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp28" = insertvalue %"any[]" %60, i64 1, 1
  store %"any[]" %"$$temp28", ptr %indirectarg29, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.43, i64 35, ptr @.file, i64 7, ptr @.func.39, i64 9, i32 38, ptr byval(%"any[]") align 8 %indirectarg29) #5, !dbg !148
  unreachable, !dbg !148
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.io.BitWriter.init(ptr %0, i64 %1, ptr %2) #0 comdat !dbg !152 {
entry:
  %self = alloca ptr, align 8
  %byte_writer = alloca %any, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.assign_list = alloca %BitWriter, align 8
  %3 = icmp eq ptr %0, null, !dbg !165
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !165
  br i1 %4, label %panic, label %checkok, !dbg !165

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !166, !DIExpression(), !167)
  store i64 %1, ptr %byte_writer, align 8
  %ptradd = getelementptr inbounds i8, ptr %byte_writer, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %byte_writer, !168, !DIExpression(), !169)
  %5 = load ptr, ptr %self, align 8, !dbg !170
  %checknull = icmp eq ptr %5, null, !dbg !170
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !170
  br i1 %6, label %panic1, label %checkok2, !dbg !170

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !170
  %8 = urem i64 %7, 8, !dbg !170
  %9 = icmp ne i64 %8, 0, !dbg !170
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !170
  br i1 %10, label %panic3, label %checkok6, !dbg !170

checkok6:                                         ; preds = %checkok2
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 24, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %byte_writer, i32 16, i1 false), !dbg !171
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 8 %.assign_list, i32 24, i1 false), !dbg !171
  ret void, !dbg !171

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !167
  call void %11(ptr @.panic_msg, i64 62, ptr @.file, i64 7, ptr @.func, i64 4, i32 52) #5, !dbg !167
  unreachable, !dbg !167

panic1:                                           ; preds = %checkok
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !170
  call void %12(ptr @.panic_msg.36, i64 45, ptr @.file, i64 7, ptr @.func, i64 4, i32 54) #5, !dbg !170
  unreachable, !dbg !170

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %13 = insertvalue %any undef, ptr %taddr, 0
  %14 = insertvalue %any %13, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %15 = insertvalue %any undef, ptr %taddr4, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %14, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %16, ptr %ptradd5, align 16
  %17 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %17, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file, i64 7, ptr @.func, i64 4, i32 54, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !170
  unreachable, !dbg !170
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.BitWriter.flush(ptr %0) #0 comdat !dbg !172 {
entry:
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %padding = alloca i32, align 4
  %bits = alloca i32, align 4
  %taddr = alloca i32, align 4
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %n = alloca i32, align 4
  %buffer = alloca [4 x i8], align 1
  %x = alloca i32, align 4
  %bytes = alloca ptr, align 8
  %bytes9 = alloca ptr, align 8
  %s = alloca %"char[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %varargslots18 = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %expr = alloca i32, align 4
  %taddr27 = alloca i64, align 8
  %taddr28 = alloca i64, align 8
  %varargslots29 = alloca [2 x %any], align 16
  %indirectarg32 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %stream = alloca %any, align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %buffer45 = alloca %"char[]", align 8
  %blockret = alloca i64, align 8
  %n50 = alloca i64, align 8
  %error_var51 = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !175
  %1 = icmp eq ptr %0, null, !dbg !175
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !175
  br i1 %2, label %panic, label %checkok, !dbg !175

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !176, !DIExpression(), !177)
  %3 = load ptr, ptr %self, align 8, !dbg !178
  %ptradd = getelementptr inbounds i8, ptr %3, i64 20, !dbg !178
  %4 = load i32, ptr %ptradd, align 4, !dbg !178
  %eq = icmp eq i32 0, %4, !dbg !178
  br i1 %eq, label %if.then, label %if.exit, !dbg !178

if.then:                                          ; preds = %checkok
  ret i64 0

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %padding, !179, !DIExpression(), !180)
  %5 = load ptr, ptr %self, align 8, !dbg !181
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 20, !dbg !181
  %6 = load i32, ptr %ptradd1, align 4, !dbg !181
  %zext = zext i32 %6 to i64, !dbg !181
  %sub = sub i64 32, %zext, !dbg !182
  %trunc = trunc i64 %sub to i32, !dbg !182
  store i32 %trunc, ptr %padding, align 4, !dbg !182
    #dbg_declare(ptr %bits, !183, !DIExpression(), !184)
  %7 = load ptr, ptr %self, align 8, !dbg !185
  %ptradd2 = getelementptr inbounds i8, ptr %7, i64 16, !dbg !185
  %8 = load i32, ptr %ptradd2, align 8, !dbg !185
  %9 = load i32, ptr %padding, align 4, !dbg !186
  %shift_exceeds = icmp uge i32 %9, 32, !dbg !185
  %10 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !185
  br i1 %10, label %panic3, label %checkok4, !dbg !185

checkok4:                                         ; preds = %if.exit
  %shl = shl i32 %8, %9, !dbg !185
  %11 = freeze i32 %shl, !dbg !185
  store i32 %11, ptr %bits, align 4, !dbg !185
    #dbg_declare(ptr %n, !187, !DIExpression(), !188)
  %12 = load ptr, ptr %self, align 8, !dbg !189
  %ptradd5 = getelementptr inbounds i8, ptr %12, i64 20, !dbg !189
  %13 = load i32, ptr %ptradd5, align 4, !dbg !189
  %add = add i32 %13, 7, !dbg !189
  %sdiv = sdiv i32 %add, 8, !dbg !189
  store i32 %sdiv, ptr %n, align 4, !dbg !189
    #dbg_declare(ptr %buffer, !190, !DIExpression(), !194)
  store i8 0, ptr %buffer, align 1, !dbg !194
  %ptradd6 = getelementptr inbounds i8, ptr %buffer, i64 1, !dbg !194
  store i8 0, ptr %ptradd6, align 1, !dbg !194
  %ptradd7 = getelementptr inbounds i8, ptr %buffer, i64 2, !dbg !194
  store i8 0, ptr %ptradd7, align 1, !dbg !194
  %ptradd8 = getelementptr inbounds i8, ptr %buffer, i64 3, !dbg !194
  store i8 0, ptr %ptradd8, align 1, !dbg !194
  %14 = load i32, ptr %bits, align 4
  store i32 %14, ptr %x, align 4
  store ptr %buffer, ptr %bytes, align 8
  %15 = load ptr, ptr %bytes, align 8
  store ptr %15, ptr %bytes9, align 8
  br i1 true, label %assert_ok, label %assert_fail, !dbg !195

assert_fail:                                      ; preds = %checkok4
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !198
  call void %16(ptr @.panic_msg.45, i64 117, ptr @.file.46, i64 11, ptr @.func.44, i64 5, i32 107) #5, !dbg !198
  unreachable, !dbg !198

assert_ok:                                        ; preds = %checkok4
    #dbg_declare(ptr %s, !202, !DIExpression(), !209)
  call void @llvm.memset.p0.i64(ptr align 8 %s, i8 0, i64 16, i1 false), !dbg !209
  %17 = load ptr, ptr %bytes, align 8, !dbg !210
  %checknull = icmp eq ptr %17, null, !dbg !210
  %18 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !210
  br i1 %18, label %panic10, label %checkok11, !dbg !210

checkok11:                                        ; preds = %assert_ok
  %19 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !210
  %20 = insertvalue %"char[]" %19, i64 4, 1, !dbg !210
  store %"char[]" %20, ptr %s, align 8, !dbg !210
  %21 = load ptr, ptr %s, align 8, !dbg !211
  %checknull12 = icmp eq ptr %21, null, !dbg !211
  %22 = call i1 @llvm.expect.i1(i1 %checknull12, i1 false), !dbg !211
  br i1 %22, label %panic13, label %checkok14, !dbg !211

checkok14:                                        ; preds = %checkok11
  %23 = ptrtoint ptr %21 to i64, !dbg !212
  %24 = urem i64 %23, 4, !dbg !212
  %25 = icmp ne i64 %24, 0, !dbg !212
  %26 = call i1 @llvm.expect.i1(i1 %25, i1 false), !dbg !212
  br i1 %26, label %panic15, label %checkok22, !dbg !212

checkok22:                                        ; preds = %checkok14
  %27 = load i32, ptr %x, align 4
  store i32 %27, ptr %expr, align 4
  %checknull23 = icmp eq ptr %expr, null, !dbg !213
  %28 = call i1 @llvm.expect.i1(i1 %checknull23, i1 false), !dbg !213
  br i1 %28, label %panic24, label %checkok25, !dbg !213

checkok25:                                        ; preds = %checkok22
  %29 = ptrtoint ptr %expr to i64, !dbg !217
  %30 = urem i64 %29, 4, !dbg !217
  %31 = icmp ne i64 %30, 0, !dbg !217
  %32 = call i1 @llvm.expect.i1(i1 %31, i1 false), !dbg !217
  br i1 %32, label %panic26, label %checkok33, !dbg !217

checkok33:                                        ; preds = %checkok25
  %33 = load i32, ptr %expr, align 4, !dbg !217
  %34 = call i32 @llvm.bswap.i32(i32 %33), !dbg !217
  store i32 %34, ptr %21, align 4, !dbg !217
  %35 = load ptr, ptr %self, align 8, !dbg !218
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %stream, ptr align 8 %35, i32 16, i1 false)
  %36 = load i32, ptr %n, align 4, !dbg !219
  %zext34 = zext i32 %36 to i64, !dbg !219
  %add35 = add i64 0, %zext34, !dbg !219
  %lt = icmp ult i64 4, %add35, !dbg !219
  %sub36 = sub i64 %add35, 1, !dbg !219
  %37 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !219
  br i1 %37, label %panic37, label %checkok44, !dbg !219

checkok44:                                        ; preds = %checkok33
  %size = sub i64 %add35, 0, !dbg !220
  %38 = insertvalue %"char[]" undef, ptr %buffer, 0, !dbg !220
  %39 = insertvalue %"char[]" %38, i64 %size, 1, !dbg !220
  store %"char[]" %39, ptr %buffer45, align 8
  %ptradd46 = getelementptr inbounds i8, ptr %buffer45, i64 8, !dbg !221
  %40 = load i64, ptr %ptradd46, align 8, !dbg !221
  %eq47 = icmp eq i64 0, %40, !dbg !221
  br i1 %eq47, label %if.then48, label %if.exit49, !dbg !221

if.then48:                                        ; preds = %checkok44
  store i64 0, ptr %blockret, align 8, !dbg !224
  br label %expr_block.exit, !dbg !224

if.exit49:                                        ; preds = %checkok44
    #dbg_declare(ptr %n50, !225, !DIExpression(), !226)
  %ptradd52 = getelementptr inbounds i8, ptr %stream, i64 8, !dbg !227
  %41 = load i64, ptr %ptradd52, align 8, !dbg !227
  %42 = inttoptr i64 %41 to ptr, !dbg !227
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !175
  %43 = icmp eq ptr %42, %type, !dbg !175
  br i1 %43, label %cache_hit, label %cache_miss, !dbg !175

cache_miss:                                       ; preds = %if.exit49
  %ptradd53 = getelementptr inbounds i8, ptr %42, i64 16, !dbg !175
  %44 = load ptr, ptr %ptradd53, align 8, !dbg !175
  %45 = call ptr @.dyn_search(ptr %44, ptr @"$sel.write"), !dbg !175
  store ptr %45, ptr %.inlinecache, align 8, !dbg !175
  store ptr %42, ptr %.cachedtype, align 8, !dbg !175
  br label %46, !dbg !175

cache_hit:                                        ; preds = %if.exit49
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !175
  br label %46, !dbg !175

46:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %45, %cache_miss ], !dbg !175
  %47 = icmp eq ptr %fn_phi, null, !dbg !175
  br i1 %47, label %missing_function, label %match, !dbg !175

missing_function:                                 ; preds = %46
  %48 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !228
  call void %48(ptr @.panic_msg.52, i64 42, ptr @.file.53, i64 9, ptr @.func.44, i64 5, i32 102) #5, !dbg !228
  unreachable, !dbg !228

match:                                            ; preds = %46
  %49 = load ptr, ptr %stream, align 8
  %lo = load ptr, ptr %buffer45, align 8
  %ptradd54 = getelementptr inbounds i8, ptr %buffer45, i64 8
  %hi = load i64, ptr %ptradd54, align 8
  %50 = call i64 %fn_phi(ptr %retparam, ptr %49, ptr %lo, i64 %hi), !dbg !228
  %not_err = icmp eq i64 %50, 0, !dbg !228
  %51 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !228
  br i1 %51, label %after_check, label %assign_optional, !dbg !228

assign_optional:                                  ; preds = %match
  store i64 %50, ptr %error_var51, align 8, !dbg !228
  br label %guard_block, !dbg !228

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !228

guard_block:                                      ; preds = %assign_optional
  %52 = load i64, ptr %error_var51, align 8, !dbg !228
  store i64 %52, ptr %error_var, align 8, !dbg !228
  br label %guard_block58, !dbg !228

noerr_block:                                      ; preds = %after_check
  %53 = load i64, ptr %retparam, align 8, !dbg !228
  store i64 %53, ptr %n50, align 8, !dbg !228
  %54 = load i64, ptr %n50, align 8, !dbg !229
  %ptradd55 = getelementptr inbounds i8, ptr %buffer45, i64 8, !dbg !230
  %55 = load i64, ptr %ptradd55, align 8, !dbg !230
  %neq = icmp ne i64 %54, %55, !dbg !229
  br i1 %neq, label %if.then56, label %if.exit57, !dbg !229

if.then56:                                        ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.io.IoError$INCOMPLETE_WRITE" to i64), ptr %error_var, align 8, !dbg !231
  br label %guard_block58, !dbg !231

if.exit57:                                        ; preds = %noerr_block
  %56 = load i64, ptr %n50, align 8, !dbg !232
  store i64 %56, ptr %blockret, align 8, !dbg !232
  br label %expr_block.exit, !dbg !232

expr_block.exit:                                  ; preds = %if.exit57, %if.then48
  br label %noerr_block59, !dbg !232

guard_block58:                                    ; preds = %if.then56, %guard_block
  %57 = load i64, ptr %error_var, align 8, !dbg !232
  ret i64 %57, !dbg !232

noerr_block59:                                    ; preds = %expr_block.exit
  %58 = load ptr, ptr %self, align 8, !dbg !233
  %ptradd60 = getelementptr inbounds i8, ptr %58, i64 20, !dbg !233
  store i32 0, ptr %ptradd60, align 4, !dbg !234
  ret i64 0, !dbg !234

panic:                                            ; preds = %entry
  %59 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !177
  call void %59(ptr @.panic_msg, i64 62, ptr @.file, i64 7, ptr @.func.44, i64 5, i32 57) #5, !dbg !177
  unreachable, !dbg !177

panic3:                                           ; preds = %if.exit
  store i32 %9, ptr %taddr, align 4
  %60 = insertvalue %any undef, ptr %taddr, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %61, ptr %varargslots, align 16
  %62 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %62, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.43, i64 35, ptr @.file, i64 7, ptr @.func.44, i64 5, i32 62, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !185
  unreachable, !dbg !185

panic10:                                          ; preds = %assert_ok
  %63 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !210
  call void %63(ptr @.panic_msg.47, i64 46, ptr @.file.46, i64 11, ptr @.func.44, i64 5, i32 115) #5, !dbg !210
  unreachable, !dbg !210

panic13:                                          ; preds = %checkok11
  %64 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !212
  call void %64(ptr @.panic_msg.48, i64 58, ptr @.file.46, i64 11, ptr @.func.44, i64 5, i32 119) #5, !dbg !212
  unreachable, !dbg !212

panic15:                                          ; preds = %checkok14
  store i64 4, ptr %taddr16, align 8
  %65 = insertvalue %any undef, ptr %taddr16, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr17, align 8
  %67 = insertvalue %any undef, ptr %taddr17, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %66, ptr %varargslots18, align 16
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots18, i64 16
  store %any %68, ptr %ptradd19, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp20" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.46, i64 11, ptr @.func.44, i64 5, i32 119, ptr byval(%"any[]") align 8 %indirectarg21) #5, !dbg !212
  unreachable, !dbg !212

panic24:                                          ; preds = %checkok22
  %70 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !217
  call void %70(ptr @.panic_msg.49, i64 53, ptr @.file.50, i64 10, ptr @.func.44, i64 5, i32 212) #5, !dbg !217
  unreachable, !dbg !217

panic26:                                          ; preds = %checkok25
  store i64 4, ptr %taddr27, align 8
  %71 = insertvalue %any undef, ptr %taddr27, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %30, ptr %taddr28, align 8
  %73 = insertvalue %any undef, ptr %taddr28, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %72, ptr %varargslots29, align 16
  %ptradd30 = getelementptr inbounds i8, ptr %varargslots29, i64 16
  store %any %74, ptr %ptradd30, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots29, 0
  %"$$temp31" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp31", ptr %indirectarg32, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.50, i64 10, ptr @.func.44, i64 5, i32 212, ptr byval(%"any[]") align 8 %indirectarg32) #5, !dbg !217
  unreachable, !dbg !217

panic37:                                          ; preds = %checkok33
  store i64 %sub36, ptr %taddr38, align 8
  %76 = insertvalue %any undef, ptr %taddr38, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr39, align 8
  %78 = insertvalue %any undef, ptr %taddr39, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %77, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %79, ptr %ptradd41, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 60, ptr @.file, i64 7, ptr @.func.44, i64 5, i32 66, ptr byval(%"any[]") align 8 %indirectarg43) #5, !dbg !220
  unreachable, !dbg !220
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.BitWriter.write_bits(ptr %0, i32 %1, i32 %2) #0 comdat !dbg !235 {
entry:
  %self = alloca ptr, align 8
  %bits = alloca i32, align 4
  %nbits = alloca i32, align 4
  %reterr = alloca i64, align 8
  %to_push = alloca i32, align 4
  %bits_to_push = alloca i32, align 4
  %taddr = alloca i32, align 4
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr6 = alloca i32, align 4
  %varargslots7 = alloca [1 x %any], align 16
  %indirectarg9 = alloca %"any[]", align 8
  %taddr13 = alloca i32, align 4
  %varargslots14 = alloca [1 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %taddr22 = alloca i32, align 4
  %varargslots23 = alloca [1 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %reterr34 = alloca i64, align 8
  %taddr39 = alloca i32, align 4
  %varargslots40 = alloca [1 x %any], align 16
  %indirectarg42 = alloca %"any[]", align 8
  %taddr48 = alloca i32, align 4
  %varargslots49 = alloca [1 x %any], align 16
  %indirectarg51 = alloca %"any[]", align 8
  %taddr55 = alloca i32, align 4
  %varargslots56 = alloca [1 x %any], align 16
  %indirectarg58 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !238
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !238
  br i1 %4, label %panic, label %checkok, !dbg !238

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !239, !DIExpression(), !240)
  store i32 %1, ptr %bits, align 4
    #dbg_declare(ptr %bits, !241, !DIExpression(), !242)
  store i32 %2, ptr %nbits, align 4
    #dbg_declare(ptr %nbits, !243, !DIExpression(), !244)
  %5 = load i32, ptr %nbits, align 4, !dbg !245
  %ge = icmp uge i32 32, %5, !dbg !245
  br i1 %ge, label %assert_ok, label %assert_fail, !dbg !245

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !245
  call void %6(ptr @.panic_msg.55, i64 32, ptr @.file, i64 7, ptr @.func.54, i64 10, i32 71) #5, !dbg !245
  unreachable, !dbg !245

assert_ok:                                        ; preds = %checkok
  %7 = load i32, ptr %nbits, align 4, !dbg !247
  %eq = icmp eq i32 0, %7, !dbg !247
  br i1 %eq, label %if.then, label %if.exit, !dbg !247

if.then:                                          ; preds = %assert_ok
  ret i64 0

if.exit:                                          ; preds = %assert_ok
  br label %loop.cond, !dbg !248

loop.cond:                                        ; preds = %noerr_block, %if.exit
  %8 = load ptr, ptr %self, align 8, !dbg !249
  %ptradd = getelementptr inbounds i8, ptr %8, i64 20, !dbg !249
  %9 = load i32, ptr %ptradd, align 4, !dbg !249
  %10 = load i32, ptr %nbits, align 4, !dbg !251
  %add = add i32 %9, %10, !dbg !249
  %lt = icmp ult i32 24, %add, !dbg !249
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !249

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %to_push, !252, !DIExpression(), !254)
  %11 = load ptr, ptr %self, align 8, !dbg !255
  %ptradd1 = getelementptr inbounds i8, ptr %11, i64 20, !dbg !255
  %12 = load i32, ptr %ptradd1, align 4, !dbg !255
  %sub = sub i32 24, %12, !dbg !256
  store i32 %sub, ptr %to_push, align 4, !dbg !256
    #dbg_declare(ptr %bits_to_push, !257, !DIExpression(), !258)
  %13 = load i32, ptr %bits, align 4, !dbg !259
  %14 = load i32, ptr %nbits, align 4, !dbg !260
  %15 = load i32, ptr %to_push, align 4, !dbg !261
  %sub2 = sub i32 %14, %15, !dbg !260
  %shift_exceeds = icmp uge i32 %sub2, 32, !dbg !259
  %16 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !259
  br i1 %16, label %panic3, label %checkok4, !dbg !259

checkok4:                                         ; preds = %loop.body
  %lshr = lshr i32 %13, %sub2, !dbg !259
  %17 = freeze i32 %lshr, !dbg !259
  %18 = load i32, ptr %to_push, align 4, !dbg !262
  %shift_underflow = icmp slt i32 %18, 0, !dbg !263
  %19 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !263
  br i1 %19, label %panic5, label %checkok10, !dbg !263

checkok10:                                        ; preds = %checkok4
  %shift_exceeds11 = icmp sge i32 %18, 32, !dbg !263
  %20 = call i1 @llvm.expect.i1(i1 %shift_exceeds11, i1 false), !dbg !263
  br i1 %20, label %panic12, label %checkok17, !dbg !263

checkok17:                                        ; preds = %checkok10
  %shl = shl i32 1, %18, !dbg !263
  %21 = freeze i32 %shl, !dbg !263
  %sub18 = sub i32 %21, 1, !dbg !263
  %and = and i32 %17, %sub18, !dbg !259
  store i32 %and, ptr %bits_to_push, align 4, !dbg !259
  %22 = load ptr, ptr %self, align 8, !dbg !264
  %ptradd19 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !264
  %23 = load i32, ptr %ptradd19, align 8, !dbg !264
  %24 = load i32, ptr %to_push, align 4, !dbg !265
  %shift_exceeds20 = icmp uge i32 %24, 32, !dbg !264
  %25 = call i1 @llvm.expect.i1(i1 %shift_exceeds20, i1 false), !dbg !264
  br i1 %25, label %panic21, label %checkok26, !dbg !264

checkok26:                                        ; preds = %checkok17
  %shl27 = shl i32 %23, %24, !dbg !264
  %26 = freeze i32 %shl27, !dbg !264
  store i32 %26, ptr %ptradd19, align 8, !dbg !264
  %27 = load ptr, ptr %self, align 8, !dbg !266
  %ptradd28 = getelementptr inbounds i8, ptr %27, i64 16, !dbg !266
  %28 = load i32, ptr %ptradd28, align 8, !dbg !266
  %29 = load i32, ptr %bits_to_push, align 4, !dbg !267
  %or = or i32 %28, %29, !dbg !266
  store i32 %or, ptr %ptradd28, align 8, !dbg !266
  %30 = load ptr, ptr %self, align 8, !dbg !268
  %ptradd29 = getelementptr inbounds i8, ptr %30, i64 20, !dbg !268
  %31 = load i32, ptr %ptradd29, align 4, !dbg !268
  %32 = load i32, ptr %to_push, align 4, !dbg !269
  %add30 = add i32 %31, %32, !dbg !268
  store i32 %add30, ptr %ptradd29, align 4, !dbg !268
  %33 = load i32, ptr %nbits, align 4, !dbg !270
  %34 = load i32, ptr %to_push, align 4, !dbg !271
  %sub31 = sub i32 %33, %34, !dbg !270
  store i32 %sub31, ptr %nbits, align 4, !dbg !270
  %35 = load ptr, ptr %self, align 8, !dbg !272
  %36 = call i64 @std.io.BitWriter.flush(ptr %35), !dbg !272
  %not_err = icmp eq i64 %36, 0, !dbg !272
  %37 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !272
  br i1 %37, label %after_check, label %assign_optional, !dbg !272

assign_optional:                                  ; preds = %checkok26
  store i64 %36, ptr %error_var, align 8, !dbg !272
  br label %guard_block, !dbg !272

after_check:                                      ; preds = %checkok26
  br label %noerr_block, !dbg !272

guard_block:                                      ; preds = %assign_optional
  %38 = load i64, ptr %error_var, align 8, !dbg !272
  ret i64 %38, !dbg !272

noerr_block:                                      ; preds = %after_check
  br label %loop.cond, !dbg !272

loop.exit:                                        ; preds = %loop.cond
  %39 = load i32, ptr %nbits, align 4, !dbg !273
  %eq32 = icmp eq i32 0, %39, !dbg !273
  br i1 %eq32, label %if.then33, label %if.exit35, !dbg !273

if.then33:                                        ; preds = %loop.exit
  ret i64 0

if.exit35:                                        ; preds = %loop.exit
  %40 = load ptr, ptr %self, align 8, !dbg !274
  %ptradd36 = getelementptr inbounds i8, ptr %40, i64 16, !dbg !274
  %41 = load i32, ptr %ptradd36, align 8, !dbg !274
  %42 = load i32, ptr %nbits, align 4, !dbg !275
  %shift_exceeds37 = icmp uge i32 %42, 32, !dbg !274
  %43 = call i1 @llvm.expect.i1(i1 %shift_exceeds37, i1 false), !dbg !274
  br i1 %43, label %panic38, label %checkok43, !dbg !274

checkok43:                                        ; preds = %if.exit35
  %shl44 = shl i32 %41, %42, !dbg !274
  %44 = freeze i32 %shl44, !dbg !274
  store i32 %44, ptr %ptradd36, align 8, !dbg !274
  %45 = load ptr, ptr %self, align 8, !dbg !276
  %ptradd45 = getelementptr inbounds i8, ptr %45, i64 16, !dbg !276
  %46 = load i32, ptr %ptradd45, align 8, !dbg !276
  %47 = load i32, ptr %bits, align 4, !dbg !277
  %48 = load i32, ptr %nbits, align 4, !dbg !278
  %shift_underflow46 = icmp slt i32 %48, 0, !dbg !279
  %49 = call i1 @llvm.expect.i1(i1 %shift_underflow46, i1 false), !dbg !279
  br i1 %49, label %panic47, label %checkok52, !dbg !279

checkok52:                                        ; preds = %checkok43
  %shift_exceeds53 = icmp sge i32 %48, 32, !dbg !279
  %50 = call i1 @llvm.expect.i1(i1 %shift_exceeds53, i1 false), !dbg !279
  br i1 %50, label %panic54, label %checkok59, !dbg !279

checkok59:                                        ; preds = %checkok52
  %shl60 = shl i32 1, %48, !dbg !279
  %51 = freeze i32 %shl60, !dbg !279
  %sub61 = sub i32 %51, 1, !dbg !279
  %and62 = and i32 %47, %sub61, !dbg !277
  %or63 = or i32 %46, %and62, !dbg !276
  store i32 %or63, ptr %ptradd45, align 8, !dbg !276
  %52 = load ptr, ptr %self, align 8, !dbg !280
  %ptradd64 = getelementptr inbounds i8, ptr %52, i64 20, !dbg !280
  %53 = load i32, ptr %ptradd64, align 4, !dbg !280
  %54 = load i32, ptr %nbits, align 4, !dbg !281
  %add65 = add i32 %53, %54, !dbg !280
  store i32 %add65, ptr %ptradd64, align 4, !dbg !280
  ret i64 0, !dbg !280

panic:                                            ; preds = %entry
  %55 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !240
  call void %55(ptr @.panic_msg, i64 62, ptr @.file, i64 7, ptr @.func.54, i64 10, i32 73) #5, !dbg !240
  unreachable, !dbg !240

panic3:                                           ; preds = %loop.body
  store i32 %sub2, ptr %taddr, align 4
  %56 = insertvalue %any undef, ptr %taddr, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %57, ptr %varargslots, align 16
  %58 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %58, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.43, i64 35, ptr @.file, i64 7, ptr @.func.54, i64 10, i32 79, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !259
  unreachable, !dbg !259

panic5:                                           ; preds = %checkok4
  store i32 %18, ptr %taddr6, align 4
  %59 = insertvalue %any undef, ptr %taddr6, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %60, ptr %varargslots7, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots7, 0
  %"$$temp8" = insertvalue %"any[]" %61, i64 1, 1
  store %"any[]" %"$$temp8", ptr %indirectarg9, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.43, i64 35, ptr @.file, i64 7, ptr @.func.54, i64 10, i32 79, ptr byval(%"any[]") align 8 %indirectarg9) #5, !dbg !263
  unreachable, !dbg !263

panic12:                                          ; preds = %checkok10
  store i32 %18, ptr %taddr13, align 4
  %62 = insertvalue %any undef, ptr %taddr13, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %63, ptr %varargslots14, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp15" = insertvalue %"any[]" %64, i64 1, 1
  store %"any[]" %"$$temp15", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.43, i64 35, ptr @.file, i64 7, ptr @.func.54, i64 10, i32 79, ptr byval(%"any[]") align 8 %indirectarg16) #5, !dbg !263
  unreachable, !dbg !263

panic21:                                          ; preds = %checkok17
  store i32 %24, ptr %taddr22, align 4
  %65 = insertvalue %any undef, ptr %taddr22, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %66, ptr %varargslots23, align 16
  %67 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp24" = insertvalue %"any[]" %67, i64 1, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.43, i64 35, ptr @.file, i64 7, ptr @.func.54, i64 10, i32 81, ptr byval(%"any[]") align 8 %indirectarg25) #5, !dbg !264
  unreachable, !dbg !264

panic38:                                          ; preds = %if.exit35
  store i32 %42, ptr %taddr39, align 4
  %68 = insertvalue %any undef, ptr %taddr39, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %69, ptr %varargslots40, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp41" = insertvalue %"any[]" %70, i64 1, 1
  store %"any[]" %"$$temp41", ptr %indirectarg42, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.43, i64 35, ptr @.file, i64 7, ptr @.func.54, i64 10, i32 91, ptr byval(%"any[]") align 8 %indirectarg42) #5, !dbg !274
  unreachable, !dbg !274

panic47:                                          ; preds = %checkok43
  store i32 %48, ptr %taddr48, align 4
  %71 = insertvalue %any undef, ptr %taddr48, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %72, ptr %varargslots49, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp50" = insertvalue %"any[]" %73, i64 1, 1
  store %"any[]" %"$$temp50", ptr %indirectarg51, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.43, i64 35, ptr @.file, i64 7, ptr @.func.54, i64 10, i32 92, ptr byval(%"any[]") align 8 %indirectarg51) #5, !dbg !279
  unreachable, !dbg !279

panic54:                                          ; preds = %checkok52
  store i32 %48, ptr %taddr55, align 4
  %74 = insertvalue %any undef, ptr %taddr55, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %75, ptr %varargslots56, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots56, 0
  %"$$temp57" = insertvalue %"any[]" %76, i64 1, 1
  store %"any[]" %"$$temp57", ptr %indirectarg58, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.43, i64 35, ptr @.file, i64 7, ptr @.func.54, i64 10, i32 92, ptr byval(%"any[]") align 8 %indirectarg58) #5, !dbg !279
  unreachable, !dbg !279
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteReader.len(ptr %0) #0 comdat !dbg !282 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !290
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !290
  br i1 %2, label %panic, label %checkok, !dbg !290

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !291, !DIExpression(), !292)
  %3 = load ptr, ptr %self, align 8, !dbg !293
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !293
  %4 = load i64, ptr %ptradd, align 8, !dbg !293
  ret i64 %4, !dbg !293

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !292
  call void %5(ptr @.panic_msg, i64 62, ptr @.file.56, i64 13, ptr @.func.57, i64 3, i32 9) #5, !dbg !292
  unreachable, !dbg !292
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.ByteReader.init(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !294 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.assign_list = alloca %ByteReader, align 8
  %3 = icmp eq ptr %0, null, !dbg !297
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !297
  br i1 %4, label %panic, label %checkok, !dbg !297

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !298, !DIExpression(), !299)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !300, !DIExpression(), !301)
  %5 = load ptr, ptr %self, align 8, !dbg !302
  %checknull = icmp eq ptr %5, null, !dbg !302
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !302
  br i1 %6, label %panic1, label %checkok2, !dbg !302

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !302
  %8 = urem i64 %7, 8, !dbg !302
  %9 = icmp ne i64 %8, 0, !dbg !302
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !302
  br i1 %10, label %panic3, label %checkok6, !dbg !302

checkok6:                                         ; preds = %checkok2
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 24, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %bytes, i32 16, i1 false), !dbg !303
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 8 %.assign_list, i32 24, i1 false), !dbg !303
  %11 = load ptr, ptr %self, align 8, !dbg !304
  ret ptr %11, !dbg !304

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !299
  call void %12(ptr @.panic_msg, i64 62, ptr @.file.56, i64 13, ptr @.func, i64 4, i32 14) #5, !dbg !299
  unreachable, !dbg !299

panic1:                                           ; preds = %checkok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !302
  call void %13(ptr @.panic_msg.36, i64 45, ptr @.file.56, i64 13, ptr @.func, i64 4, i32 16) #5, !dbg !302
  unreachable, !dbg !302

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %14 = insertvalue %any undef, ptr %taddr, 0
  %15 = insertvalue %any %14, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %16 = insertvalue %any undef, ptr %taddr4, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %15, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %17, ptr %ptradd5, align 16
  %18 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %18, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.56, i64 13, ptr @.func, i64 4, i32 16, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !302
  unreachable, !dbg !302
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteReader.read(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !305 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %x = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %reterr = alloca i64, align 8
  %dst = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %src = alloca ptr, align 8
  %len16 = alloca i64, align 8
  %reterr25 = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !309
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !309
  br i1 %5, label %panic, label %checkok, !dbg !309

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !310, !DIExpression(), !311)
  store ptr %2, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !312, !DIExpression(), !313)
  %6 = load ptr, ptr %self, align 8, !dbg !314
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !314
  %7 = load i64, ptr %ptradd1, align 8, !dbg !314
  %8 = load ptr, ptr %self, align 8, !dbg !315
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 8, !dbg !315
  %9 = load i64, ptr %ptradd2, align 8, !dbg !315
  %ge = icmp uge i64 %7, %9, !dbg !314
  br i1 %ge, label %if.then, label %if.exit, !dbg !314

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !316

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %len, !317, !DIExpression(), !318)
  %10 = load ptr, ptr %self, align 8, !dbg !319
  %ptradd3 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !319
  %11 = load i64, ptr %ptradd3, align 8, !dbg !319
  %12 = load ptr, ptr %self, align 8, !dbg !320
  %ptradd4 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !320
  %13 = load i64, ptr %ptradd4, align 8, !dbg !320
  %sub = sub i64 %11, %13, !dbg !319
  store i64 %sub, ptr %x, align 8
  %ptradd5 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !321
  %14 = load i64, ptr %ptradd5, align 8
  store i64 %14, ptr %.anon, align 8
  %15 = load i64, ptr %x, align 8
  store i64 %15, ptr %a, align 8
  %16 = load i64, ptr %.anon, align 8
  store i64 %16, ptr %b, align 8
  %17 = load i64, ptr %a, align 8, !dbg !322
  %18 = load i64, ptr %b, align 8, !dbg !328
  %lt = icmp ult i64 %17, %18, !dbg !322
  br i1 %lt, label %cond.lhs, label %cond.rhs, !dbg !322

cond.lhs:                                         ; preds = %if.exit
  %19 = load i64, ptr %x, align 8, !dbg !329
  br label %cond.phi, !dbg !329

cond.rhs:                                         ; preds = %if.exit
  %20 = load i64, ptr %.anon, align 8, !dbg !330
  br label %cond.phi, !dbg !330

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %19, %cond.lhs ], [ %20, %cond.rhs ], !dbg !330
  store i64 %val, ptr %len, align 8, !dbg !330
  %21 = load i64, ptr %len, align 8, !dbg !331
  %eq = icmp eq i64 0, %21, !dbg !331
  br i1 %eq, label %if.then6, label %if.exit7, !dbg !331

if.then6:                                         ; preds = %cond.phi
  store i64 0, ptr %0, align 8, !dbg !332
  ret i64 0, !dbg !332

if.exit7:                                         ; preds = %cond.phi
  %22 = load ptr, ptr %bytes, align 8, !dbg !333
  store ptr %22, ptr %dst, align 8
  %23 = load ptr, ptr %self, align 8, !dbg !334
  %ptradd8 = getelementptr inbounds i8, ptr %23, i64 8, !dbg !334
  %24 = load i64, ptr %ptradd8, align 8, !dbg !334
  %25 = load ptr, ptr %23, align 8, !dbg !334
  %26 = load ptr, ptr %self, align 8, !dbg !335
  %ptradd9 = getelementptr inbounds i8, ptr %26, i64 16, !dbg !335
  %27 = load i64, ptr %ptradd9, align 8, !dbg !335
  %ge10 = icmp uge i64 %27, %24, !dbg !335
  %28 = call i1 @llvm.expect.i1(i1 %ge10, i1 false), !dbg !335
  br i1 %28, label %panic11, label %checkok14, !dbg !335

checkok14:                                        ; preds = %if.exit7
  %ptradd15 = getelementptr inbounds i8, ptr %25, i64 %27, !dbg !335
  store ptr %ptradd15, ptr %src, align 8
  %29 = load i64, ptr %len, align 8
  store i64 %29, ptr %len16, align 8
  %30 = load i64, ptr %len16, align 8, !dbg !336
  %eq17 = icmp eq i64 0, %30, !dbg !336
  br i1 %eq17, label %or.phi, label %or.rhs, !dbg !336

or.rhs:                                           ; preds = %checkok14
  %31 = load ptr, ptr %dst, align 8, !dbg !341
  %32 = load i64, ptr %len16, align 8, !dbg !342
  %ptradd_any = getelementptr i8, ptr %31, i64 %32, !dbg !342
  %33 = load ptr, ptr %src, align 8, !dbg !343
  %le = icmp ule ptr %ptradd_any, %33, !dbg !341
  br label %or.phi, !dbg !341

or.phi:                                           ; preds = %or.rhs, %checkok14
  %val18 = phi i1 [ true, %checkok14 ], [ %le, %or.rhs ], !dbg !341
  br i1 %val18, label %or.phi22, label %or.rhs19, !dbg !341

or.rhs19:                                         ; preds = %or.phi
  %34 = load ptr, ptr %src, align 8, !dbg !344
  %35 = load i64, ptr %len16, align 8, !dbg !345
  %ptradd_any20 = getelementptr i8, ptr %34, i64 %35, !dbg !345
  %36 = load ptr, ptr %dst, align 8, !dbg !346
  %le21 = icmp ule ptr %ptradd_any20, %36, !dbg !344
  br label %or.phi22, !dbg !344

or.phi22:                                         ; preds = %or.rhs19, %or.phi
  %val23 = phi i1 [ true, %or.phi ], [ %le21, %or.rhs19 ], !dbg !344
  br i1 %val23, label %assert_ok, label %assert_fail, !dbg !344

assert_fail:                                      ; preds = %or.phi22
  %37 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !336
  call void %37(ptr @.panic_msg.60, i64 95, ptr @.file.61, i64 6, ptr @.func.58, i64 4, i32 324) #5, !dbg !336
  unreachable, !dbg !336

assert_ok:                                        ; preds = %or.phi22
  %38 = load ptr, ptr %dst, align 8, !dbg !347
  %39 = load ptr, ptr %src, align 8, !dbg !348
  %40 = load i64, ptr %len16, align 8, !dbg !349
  call void @llvm.memcpy.p0.p0.i64(ptr %38, ptr %39, i64 %40, i1 false), !dbg !350
  %41 = load ptr, ptr %self, align 8, !dbg !351
  %ptradd24 = getelementptr inbounds i8, ptr %41, i64 16, !dbg !351
  %42 = load i64, ptr %ptradd24, align 8, !dbg !351
  %43 = load i64, ptr %len, align 8, !dbg !352
  %add = add i64 %42, %43, !dbg !351
  store i64 %add, ptr %ptradd24, align 8, !dbg !351
  %44 = load i64, ptr %len, align 8, !dbg !353
  store i64 %44, ptr %0, align 8, !dbg !353
  ret i64 0, !dbg !353

panic:                                            ; preds = %entry
  %45 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !311
  call void %45(ptr @.panic_msg, i64 62, ptr @.file.56, i64 13, ptr @.func.58, i64 4, i32 20) #5, !dbg !311
  unreachable, !dbg !311

panic11:                                          ; preds = %if.exit7
  store i64 %24, ptr %taddr, align 8
  %46 = insertvalue %any undef, ptr %taddr, 0
  %47 = insertvalue %any %46, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %27, ptr %taddr12, align 8
  %48 = insertvalue %any undef, ptr %taddr12, 0
  %49 = insertvalue %any %48, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %47, ptr %varargslots, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %49, ptr %ptradd13, align 16
  %50 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %50, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.56, i64 13, ptr @.func.58, i64 4, i32 25, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !335
  unreachable, !dbg !335
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteReader.read_byte(ptr %0, ptr %1) #0 comdat !dbg !354 {
entry:
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %2 = icmp eq ptr %1, null, !dbg !357
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !357
  br i1 %3, label %panic, label %checkok, !dbg !357

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !358, !DIExpression(), !359)
  %4 = load ptr, ptr %self, align 8, !dbg !360
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !360
  %5 = load i64, ptr %ptradd, align 8, !dbg !360
  %6 = load ptr, ptr %self, align 8, !dbg !361
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !361
  %7 = load i64, ptr %ptradd1, align 8, !dbg !361
  %ge = icmp uge i64 %5, %7, !dbg !360
  br i1 %ge, label %if.then, label %if.exit, !dbg !360

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !362

if.exit:                                          ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !363
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 8, !dbg !363
  %9 = load i64, ptr %ptradd2, align 8, !dbg !363
  %10 = load ptr, ptr %8, align 8, !dbg !363
  %11 = load ptr, ptr %self, align 8, !dbg !364
  %ptradd3 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !364
  %12 = load i64, ptr %ptradd3, align 8, !dbg !364
  %add = add i64 %12, 1, !dbg !364
  store i64 %add, ptr %ptradd3, align 8, !dbg !364
  %ge4 = icmp uge i64 %12, %9, !dbg !364
  %13 = call i1 @llvm.expect.i1(i1 %ge4, i1 false), !dbg !364
  br i1 %13, label %panic5, label %checkok8, !dbg !364

checkok8:                                         ; preds = %if.exit
  %ptradd9 = getelementptr inbounds i8, ptr %10, i64 %12, !dbg !364
  %14 = load i8, ptr %ptradd9, align 1, !dbg !364
  store i8 %14, ptr %0, align 1, !dbg !364
  ret i64 0, !dbg !364

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !359
  call void %15(ptr @.panic_msg, i64 62, ptr @.file.56, i64 13, ptr @.func.62, i64 9, i32 30) #5, !dbg !359
  unreachable, !dbg !359

panic5:                                           ; preds = %if.exit
  store i64 %9, ptr %taddr, align 8
  %16 = insertvalue %any undef, ptr %taddr, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr6, align 8
  %18 = insertvalue %any undef, ptr %taddr6, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %17, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd7, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.56, i64 13, ptr @.func.62, i64 9, i32 33, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !364
  unreachable, !dbg !364
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteReader.pushback_byte(ptr %0) #0 comdat !dbg !365 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !368
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !368
  br i1 %2, label %panic, label %checkok, !dbg !368

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !369, !DIExpression(), !370)
  %3 = load ptr, ptr %self, align 8, !dbg !371
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !371
  %4 = load i64, ptr %ptradd, align 8, !dbg !371
  %i2nb = icmp eq i64 %4, 0, !dbg !371
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !371

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @"std.io.IoError$INVALID_PUSHBACK" to i64), !dbg !372

if.exit:                                          ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !373
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !373
  %6 = load i64, ptr %ptradd1, align 8, !dbg !373
  %sub = sub i64 %6, 1, !dbg !373
  store i64 %sub, ptr %ptradd1, align 8, !dbg !373
  ret i64 0, !dbg !373

panic:                                            ; preds = %entry
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !370
  call void %7(ptr @.panic_msg, i64 62, ptr @.file.56, i64 13, ptr @.func.63, i64 13, i32 36) #5, !dbg !370
  unreachable, !dbg !370
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteReader.seek(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !374 {
entry:
  %self = alloca ptr, align 8
  %offset = alloca i64, align 8
  %seek = alloca i32, align 4
  %new_index = alloca i64, align 8
  %switch = alloca i32, align 4
  %reterr = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !377
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !377
  br i1 %5, label %panic, label %checkok, !dbg !377

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !378, !DIExpression(), !379)
  store i64 %2, ptr %offset, align 8
    #dbg_declare(ptr %offset, !380, !DIExpression(), !382)
  store i32 %3, ptr %seek, align 4
    #dbg_declare(ptr %seek, !383, !DIExpression(), !384)
    #dbg_declare(ptr %new_index, !385, !DIExpression(), !386)
  store i64 0, ptr %new_index, align 8, !dbg !386
  %6 = load i32, ptr %seek, align 4
  store i32 %6, ptr %switch, align 4
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %7 = load i32, ptr %switch, align 4
  switch i32 %7, label %switch.exit [
    i32 0, label %switch.case
    i32 1, label %switch.case1
    i32 2, label %switch.case2
  ]

switch.case:                                      ; preds = %switch.entry
  %8 = load i64, ptr %offset, align 8, !dbg !387
  store i64 %8, ptr %new_index, align 8, !dbg !387
  br label %switch.exit, !dbg !387

switch.case1:                                     ; preds = %switch.entry
  %9 = load ptr, ptr %self, align 8, !dbg !390
  %ptradd = getelementptr inbounds i8, ptr %9, i64 16, !dbg !390
  %10 = load i64, ptr %ptradd, align 8, !dbg !390
  %11 = load i64, ptr %offset, align 8, !dbg !392
  %add = add i64 %10, %11, !dbg !390
  store i64 %add, ptr %new_index, align 8, !dbg !390
  br label %switch.exit, !dbg !390

switch.case2:                                     ; preds = %switch.entry
  %12 = load ptr, ptr %self, align 8, !dbg !393
  %ptradd3 = getelementptr inbounds i8, ptr %12, i64 8, !dbg !393
  %13 = load i64, ptr %ptradd3, align 8, !dbg !393
  %14 = load i64, ptr %offset, align 8, !dbg !395
  %add4 = add i64 %13, %14, !dbg !393
  store i64 %add4, ptr %new_index, align 8, !dbg !393
  br label %switch.exit, !dbg !393

switch.exit:                                      ; preds = %switch.case2, %switch.case1, %switch.case, %switch.entry
  %15 = load i64, ptr %new_index, align 8, !dbg !396
  %lt = icmp slt i64 %15, 0, !dbg !396
  br i1 %lt, label %if.then, label %if.exit, !dbg !396

if.then:                                          ; preds = %switch.exit
  ret i64 ptrtoint (ptr @"std.io.IoError$INVALID_POSITION" to i64), !dbg !397

if.exit:                                          ; preds = %switch.exit
  %16 = load ptr, ptr %self, align 8, !dbg !398
  %ptradd5 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !398
  %17 = load i64, ptr %new_index, align 8, !dbg !399
  store i64 %17, ptr %ptradd5, align 8, !dbg !399
  %18 = load i64, ptr %new_index, align 8, !dbg !400
  store i64 %18, ptr %0, align 8, !dbg !400
  ret i64 0, !dbg !400

panic:                                            ; preds = %entry
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !379
  call void %19(ptr @.panic_msg, i64 62, ptr @.file.56, i64 13, ptr @.func.64, i64 4, i32 42) #5, !dbg !379
  unreachable, !dbg !379
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteReader.write_to(ptr %0, ptr %1, i64 %2, ptr %3) #0 comdat !dbg !401 {
entry:
  %self = alloca ptr, align 8
  %writer = alloca %any, align 8
  %reterr = alloca i64, align 8
  %written = alloca i64, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %reterr14 = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !404
  %4 = icmp eq ptr %1, null, !dbg !404
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !404
  br i1 %5, label %panic, label %checkok, !dbg !404

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !405, !DIExpression(), !406)
  store i64 %2, ptr %writer, align 8
  %ptradd = getelementptr inbounds i8, ptr %writer, i64 8
  store ptr %3, ptr %ptradd, align 8
    #dbg_declare(ptr %writer, !407, !DIExpression(), !408)
  %6 = load ptr, ptr %self, align 8, !dbg !409
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !409
  %7 = load i64, ptr %ptradd1, align 8, !dbg !409
  %8 = load ptr, ptr %self, align 8, !dbg !410
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 8, !dbg !410
  %9 = load i64, ptr %ptradd2, align 8, !dbg !410
  %ge = icmp uge i64 %7, %9, !dbg !409
  br i1 %ge, label %if.then, label %if.exit, !dbg !409

if.then:                                          ; preds = %checkok
  store i64 0, ptr %0, align 8, !dbg !411
  ret i64 0, !dbg !411

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %written, !412, !DIExpression(), !413)
  %10 = load ptr, ptr %self, align 8, !dbg !414
  %11 = load %"char[]", ptr %10, align 8, !dbg !414
  %12 = extractvalue %"char[]" %11, 0, !dbg !414
  %13 = load ptr, ptr %self, align 8, !dbg !415
  %ptradd3 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !415
  %14 = load i64, ptr %ptradd3, align 8, !dbg !415
  %15 = extractvalue %"char[]" %11, 1, !dbg !415
  %gt = icmp ugt i64 %14, %15, !dbg !415
  %16 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !415
  br i1 %16, label %panic4, label %checkok7, !dbg !415

checkok7:                                         ; preds = %if.exit
  %size = sub i64 %15, %14, !dbg !414
  %ptradd8 = getelementptr inbounds i8, ptr %12, i64 %14, !dbg !414
  %17 = insertvalue %"char[]" undef, ptr %ptradd8, 0, !dbg !414
  %18 = insertvalue %"char[]" %17, i64 %size, 1, !dbg !414
  %ptradd9 = getelementptr inbounds i8, ptr %writer, i64 8, !dbg !414
  %19 = load i64, ptr %ptradd9, align 8, !dbg !414
  %20 = inttoptr i64 %19 to ptr, !dbg !414
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !404
  %21 = icmp eq ptr %20, %type, !dbg !404
  br i1 %21, label %cache_hit, label %cache_miss, !dbg !404

cache_miss:                                       ; preds = %checkok7
  %ptradd10 = getelementptr inbounds i8, ptr %20, i64 16, !dbg !404
  %22 = load ptr, ptr %ptradd10, align 8, !dbg !404
  %23 = call ptr @.dyn_search(ptr %22, ptr @"$sel.write"), !dbg !404
  store ptr %23, ptr %.inlinecache, align 8, !dbg !404
  store ptr %20, ptr %.cachedtype, align 8, !dbg !404
  br label %24, !dbg !404

cache_hit:                                        ; preds = %checkok7
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !404
  br label %24, !dbg !404

24:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %23, %cache_miss ], !dbg !404
  %25 = icmp eq ptr %fn_phi, null, !dbg !404
  br i1 %25, label %missing_function, label %match, !dbg !404

missing_function:                                 ; preds = %24
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !416
  call void %26(ptr @.panic_msg.52, i64 42, ptr @.file.56, i64 13, ptr @.func.65, i64 8, i32 59) #5, !dbg !416
  unreachable, !dbg !416

match:                                            ; preds = %24
  %27 = load ptr, ptr %writer, align 8
  %28 = call i64 %fn_phi(ptr %retparam, ptr %27, ptr %ptradd8, i64 %size), !dbg !416
  %not_err = icmp eq i64 %28, 0, !dbg !416
  %29 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !416
  br i1 %29, label %after_check, label %assign_optional, !dbg !416

assign_optional:                                  ; preds = %match
  store i64 %28, ptr %error_var, align 8, !dbg !416
  br label %guard_block, !dbg !416

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !416

guard_block:                                      ; preds = %assign_optional
  %30 = load i64, ptr %error_var, align 8, !dbg !416
  ret i64 %30, !dbg !416

noerr_block:                                      ; preds = %after_check
  %31 = load i64, ptr %retparam, align 8, !dbg !416
  store i64 %31, ptr %written, align 8, !dbg !416
  %32 = load ptr, ptr %self, align 8, !dbg !417
  %ptradd11 = getelementptr inbounds i8, ptr %32, i64 16, !dbg !417
  %33 = load i64, ptr %ptradd11, align 8, !dbg !417
  %34 = load i64, ptr %written, align 8, !dbg !418
  %add = add i64 %33, %34, !dbg !417
  store i64 %add, ptr %ptradd11, align 8, !dbg !417
  %35 = load ptr, ptr %self, align 8, !dbg !419
  %ptradd12 = getelementptr inbounds i8, ptr %35, i64 16, !dbg !419
  %36 = load i64, ptr %ptradd12, align 8, !dbg !419
  %37 = load ptr, ptr %self, align 8, !dbg !420
  %ptradd13 = getelementptr inbounds i8, ptr %37, i64 8, !dbg !420
  %38 = load i64, ptr %ptradd13, align 8, !dbg !420
  %le = icmp ule i64 %36, %38, !dbg !419
  br i1 %le, label %assert_ok, label %assert_fail, !dbg !419

assert_fail:                                      ; preds = %noerr_block
  %39 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !419
  call void %39(ptr @.panic_msg.67, i64 16, ptr @.file.56, i64 13, ptr @.func.65, i64 8, i32 61) #5, !dbg !419
  unreachable, !dbg !419

assert_ok:                                        ; preds = %noerr_block
  %40 = load i64, ptr %written, align 8, !dbg !421
  store i64 %40, ptr %0, align 8, !dbg !421
  ret i64 0, !dbg !421

panic:                                            ; preds = %entry
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !406
  call void %41(ptr @.panic_msg, i64 62, ptr @.file.56, i64 13, ptr @.func.65, i64 8, i32 56) #5, !dbg !406
  unreachable, !dbg !406

panic4:                                           ; preds = %if.exit
  store i64 %15, ptr %taddr, align 8
  %42 = insertvalue %any undef, ptr %taddr, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr5, align 8
  %44 = insertvalue %any undef, ptr %taddr5, 0
  %45 = insertvalue %any %44, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %43, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %45, ptr %ptradd6, align 16
  %46 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %46, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.56, i64 13, ptr @.func.65, i64 8, i32 59, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !414
  unreachable, !dbg !414
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteReader.available(ptr %0, ptr %1) #0 comdat !dbg !422 {
entry:
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %x = alloca i32, align 4
  %.anon = alloca i64, align 8
  %a = alloca i32, align 4
  %b = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !425
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !425
  br i1 %3, label %panic, label %checkok, !dbg !425

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !426, !DIExpression(), !427)
  store i32 0, ptr %x, align 4
  %4 = load ptr, ptr %self, align 8, !dbg !428
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !428
  %5 = load i64, ptr %ptradd, align 8, !dbg !428
  %6 = load ptr, ptr %self, align 8, !dbg !429
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !429
  %7 = load i64, ptr %ptradd1, align 8, !dbg !429
  %sub = sub i64 %5, %7, !dbg !428
  store i64 %sub, ptr %.anon, align 8
  %8 = load i32, ptr %x, align 4
  store i32 %8, ptr %a, align 4
  %9 = load i64, ptr %.anon, align 8
  store i64 %9, ptr %b, align 8
  %10 = load i32, ptr %a, align 4, !dbg !430
  %sext = sext i32 %10 to i64, !dbg !430
  %11 = load i64, ptr %b, align 8, !dbg !435
  %gt = icmp sgt i64 %sext, %11, !dbg !430
  %check = icmp sge i64 %11, 0, !dbg !430
  %siui-gt = and i1 %check, %gt, !dbg !430
  br i1 %siui-gt, label %cond.lhs, label %cond.rhs, !dbg !430

cond.lhs:                                         ; preds = %checkok
  %12 = load i32, ptr %x, align 4, !dbg !436
  %sext2 = sext i32 %12 to i64, !dbg !436
  br label %cond.phi, !dbg !436

cond.rhs:                                         ; preds = %checkok
  %13 = load i64, ptr %.anon, align 8, !dbg !437
  br label %cond.phi, !dbg !437

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %sext2, %cond.lhs ], [ %13, %cond.rhs ], !dbg !437
  store i64 %val, ptr %0, align 8, !dbg !437
  ret i64 0, !dbg !437

panic:                                            ; preds = %entry
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !427
  call void %14(ptr @.panic_msg, i64 62, ptr @.file.56, i64 13, ptr @.func.68, i64 9, i32 65) #5, !dbg !427
  unreachable, !dbg !427
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.ReadBuffer.init(ptr %0, i64 %1, ptr %2, ptr %3, i64 %4) #0 comdat !dbg !438 {
entry:
  %self = alloca ptr, align 8
  %wrapped_stream = alloca %any, align 8
  %bytes = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.assign_list = alloca %ReadBuffer, align 8
  %5 = icmp eq ptr %0, null, !dbg !449
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !449
  br i1 %6, label %panic, label %checkok, !dbg !449

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !450, !DIExpression(), !451)
  store i64 %1, ptr %wrapped_stream, align 8
  %ptradd = getelementptr inbounds i8, ptr %wrapped_stream, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %wrapped_stream, !452, !DIExpression(), !453)
  store ptr %3, ptr %bytes, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %bytes, !454, !DIExpression(), !455)
  %ptradd2 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !456
  %7 = load i64, ptr %ptradd2, align 8, !dbg !456
  %lt = icmp ult i64 0, %7, !dbg !456
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !456

assert_fail:                                      ; preds = %checkok
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !456
  call void %8(ptr @.panic_msg.70, i64 34, ptr @.file.69, i64 9, ptr @.func, i64 4, i32 14) #5, !dbg !456
  unreachable, !dbg !456

assert_ok:                                        ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !458
  %ptradd3 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !458
  %ptradd4 = getelementptr inbounds i8, ptr %ptradd3, i64 8, !dbg !458
  %10 = load i64, ptr %ptradd4, align 8, !dbg !458
  %eq = icmp eq i64 0, %10, !dbg !458
  br i1 %eq, label %assert_ok6, label %assert_fail5, !dbg !458

assert_fail5:                                     ; preds = %assert_ok
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !458
  call void %11(ptr @.panic_msg.71, i64 88, ptr @.file.69, i64 9, ptr @.func, i64 4, i32 15) #5, !dbg !458
  unreachable, !dbg !458

assert_ok6:                                       ; preds = %assert_ok
  %12 = load ptr, ptr %self, align 8, !dbg !459
  %checknull = icmp eq ptr %12, null, !dbg !459
  %13 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !459
  br i1 %13, label %panic7, label %checkok8, !dbg !459

checkok8:                                         ; preds = %assert_ok6
  %14 = ptrtoint ptr %12 to i64, !dbg !459
  %15 = urem i64 %14, 8, !dbg !459
  %16 = icmp ne i64 %15, 0, !dbg !459
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !459
  br i1 %17, label %panic9, label %checkok12, !dbg !459

checkok12:                                        ; preds = %checkok8
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 48, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %wrapped_stream, i32 16, i1 false), !dbg !460
  %ptradd13 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !460
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd13, ptr align 8 %bytes, i32 16, i1 false), !dbg !461
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %12, ptr align 8 %.assign_list, i32 48, i1 false), !dbg !461
  %18 = load ptr, ptr %self, align 8, !dbg !462
  ret ptr %18, !dbg !462

panic:                                            ; preds = %entry
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !451
  call void %19(ptr @.panic_msg, i64 62, ptr @.file.69, i64 9, ptr @.func, i64 4, i32 17) #5, !dbg !451
  unreachable, !dbg !451

panic7:                                           ; preds = %assert_ok6
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !459
  call void %20(ptr @.panic_msg.36, i64 45, ptr @.file.69, i64 9, ptr @.func, i64 4, i32 19) #5, !dbg !459
  unreachable, !dbg !459

panic9:                                           ; preds = %checkok8
  store i64 8, ptr %taddr, align 8
  %21 = insertvalue %any undef, ptr %taddr, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr10, align 8
  %23 = insertvalue %any undef, ptr %taddr10, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %22, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %24, ptr %ptradd11, align 16
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.69, i64 9, ptr @.func, i64 4, i32 19, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !459
  unreachable, !dbg !459
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.io.ReadBuffer.str_view(ptr %0) #0 comdat !dbg !463 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !467
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !467
  br i1 %2, label %panic, label %checkok, !dbg !467

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !468, !DIExpression(), !469)
  %3 = load ptr, ptr %self, align 8, !dbg !470
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !470
  %4 = load %"char[]", ptr %ptradd, align 8, !dbg !470
  %5 = extractvalue %"char[]" %4, 0, !dbg !470
  %6 = load ptr, ptr %self, align 8, !dbg !471
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 32, !dbg !471
  %7 = load i64, ptr %ptradd1, align 8, !dbg !471
  %8 = extractvalue %"char[]" %4, 1, !dbg !471
  %gt = icmp ugt i64 %7, %8, !dbg !471
  %9 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !471
  br i1 %9, label %panic2, label %checkok5, !dbg !471

checkok5:                                         ; preds = %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !472
  %ptradd6 = getelementptr inbounds i8, ptr %10, i64 40, !dbg !472
  %11 = load i64, ptr %ptradd6, align 8, !dbg !472
  %12 = load ptr, ptr %self, align 8, !dbg !473
  %ptradd7 = getelementptr inbounds i8, ptr %12, i64 32, !dbg !473
  %13 = load i64, ptr %ptradd7, align 8, !dbg !473
  %sub = sub i64 %11, %13, !dbg !472
  %add = add i64 %7, %sub, !dbg !472
  %lt = icmp ult i64 %8, %add, !dbg !472
  %sub8 = sub i64 %add, 1, !dbg !472
  %14 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !472
  br i1 %14, label %panic9, label %checkok16, !dbg !472

checkok16:                                        ; preds = %checkok5
  %size = sub i64 %add, %7, !dbg !474
  %ptradd17 = getelementptr inbounds i8, ptr %5, i64 %7, !dbg !474
  %15 = insertvalue %"char[]" undef, ptr %ptradd17, 0, !dbg !474
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !474
  store %"char[]" %16, ptr %taddr18, align 8
  %17 = load { ptr, i64 }, ptr %taddr18, align 8
  ret { ptr, i64 } %17

panic:                                            ; preds = %entry
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !469
  call void %18(ptr @.panic_msg, i64 62, ptr @.file.69, i64 9, ptr @.func.72, i64 8, i32 22) #5, !dbg !469
  unreachable, !dbg !469

panic2:                                           ; preds = %checkok
  store i64 %8, ptr %taddr, align 8
  %19 = insertvalue %any undef, ptr %taddr, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr3, align 8
  %21 = insertvalue %any undef, ptr %taddr3, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %20, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %22, ptr %ptradd4, align 16
  %23 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %23, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.69, i64 9, ptr @.func.72, i64 8, i32 24, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !474
  unreachable, !dbg !474

panic9:                                           ; preds = %checkok5
  store i64 %sub8, ptr %taddr10, align 8
  %24 = insertvalue %any undef, ptr %taddr10, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr11, align 8
  %26 = insertvalue %any undef, ptr %taddr11, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %25, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %27, ptr %ptradd13, align 16
  %28 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %28, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 60, ptr @.file.69, i64 9, ptr @.func.72, i64 8, i32 24, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !474
  unreachable, !dbg !474
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ReadBuffer.close(ptr %0) #0 comdat !dbg !475 {
entry:
  %self = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %.inlinecache3 = alloca ptr, align 8
  %.cachedtype4 = alloca ptr, align 8
  store ptr null, ptr %.cachedtype4, align 8, !dbg !478
  store ptr null, ptr %.cachedtype, align 8, !dbg !478
  %1 = icmp eq ptr %0, null, !dbg !478
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !478
  br i1 %2, label %panic, label %checkok, !dbg !478

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !479, !DIExpression(), !480)
  %3 = load ptr, ptr %self, align 8, !dbg !481
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !481
  %4 = load i64, ptr %ptradd, align 8, !dbg !481
  %5 = inttoptr i64 %4 to ptr, !dbg !481
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !478
  %6 = icmp eq ptr %5, %type, !dbg !478
  br i1 %6, label %cache_hit, label %cache_miss, !dbg !478

cache_miss:                                       ; preds = %checkok
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !478
  %7 = load ptr, ptr %ptradd1, align 8, !dbg !478
  %8 = call ptr @.dyn_search(ptr %7, ptr @"$sel.close"), !dbg !478
  store ptr %8, ptr %.inlinecache, align 8, !dbg !478
  store ptr %5, ptr %.cachedtype, align 8, !dbg !478
  br label %9, !dbg !478

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !478
  br label %9, !dbg !478

9:                                                ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %8, %cache_miss ], !dbg !478
  %i2b = icmp ne ptr %fn_phi, null, !dbg !478
  br i1 %i2b, label %if.then, label %if.exit, !dbg !478

if.then:                                          ; preds = %9
  %10 = load ptr, ptr %self, align 8, !dbg !482
  %ptradd2 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !482
  %11 = load i64, ptr %ptradd2, align 8, !dbg !482
  %12 = inttoptr i64 %11 to ptr, !dbg !482
  %type5 = load ptr, ptr %.cachedtype4, align 8, !dbg !478
  %13 = icmp eq ptr %12, %type5, !dbg !478
  br i1 %13, label %cache_hit8, label %cache_miss6, !dbg !478

cache_miss6:                                      ; preds = %if.then
  %ptradd7 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !478
  %14 = load ptr, ptr %ptradd7, align 8, !dbg !478
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.close"), !dbg !478
  store ptr %15, ptr %.inlinecache3, align 8, !dbg !478
  store ptr %12, ptr %.cachedtype4, align 8, !dbg !478
  br label %16, !dbg !478

cache_hit8:                                       ; preds = %if.then
  %cache_hit_fn9 = load ptr, ptr %.inlinecache3, align 8, !dbg !478
  br label %16, !dbg !478

16:                                               ; preds = %cache_hit8, %cache_miss6
  %fn_phi10 = phi ptr [ %cache_hit_fn9, %cache_hit8 ], [ %15, %cache_miss6 ], !dbg !478
  %17 = icmp eq ptr %fn_phi10, null, !dbg !478
  br i1 %17, label %missing_function, label %match, !dbg !478

missing_function:                                 ; preds = %16
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !482
  call void %18(ptr @.panic_msg.74, i64 42, ptr @.file.69, i64 9, ptr @.func.73, i64 5, i32 29) #5, !dbg !482
  unreachable, !dbg !482

match:                                            ; preds = %16
  %19 = load ptr, ptr %10, align 8, !dbg !482
  %20 = call i64 %fn_phi10(ptr %19), !dbg !482
  %not_err = icmp eq i64 %20, 0, !dbg !482
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !482
  br i1 %21, label %after_check, label %assign_optional, !dbg !482

assign_optional:                                  ; preds = %match
  store i64 %20, ptr %error_var, align 8, !dbg !482
  br label %guard_block, !dbg !482

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !482

guard_block:                                      ; preds = %assign_optional
  %22 = load i64, ptr %error_var, align 8, !dbg !482
  ret i64 %22, !dbg !482

noerr_block:                                      ; preds = %after_check
  br label %if.exit, !dbg !482

if.exit:                                          ; preds = %noerr_block, %9
  ret i64 0, !dbg !482

panic:                                            ; preds = %entry
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !480
  call void %23(ptr @.panic_msg, i64 62, ptr @.file.69, i64 9, ptr @.func.73, i64 5, i32 27) #5, !dbg !480
  unreachable, !dbg !480
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ReadBuffer.read(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !483 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %error_var12 = alloca i64, align 8
  %n = alloca i64, align 8
  %x = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr26 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr32 = alloca i64, align 8
  %taddr33 = alloca i64, align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca i64, align 8
  %varargslots44 = alloca [2 x %any], align 16
  %indirectarg47 = alloca %"any[]", align 8
  %taddr53 = alloca i64, align 8
  %taddr54 = alloca i64, align 8
  %varargslots55 = alloca [2 x %any], align 16
  %indirectarg58 = alloca %"any[]", align 8
  %taddr62 = alloca i64, align 8
  %taddr63 = alloca i64, align 8
  %varargslots64 = alloca [2 x %any], align 16
  %indirectarg67 = alloca %"any[]", align 8
  %reterr71 = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !486
  %4 = icmp eq ptr %1, null, !dbg !486
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !486
  br i1 %5, label %panic, label %checkok, !dbg !486

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !487, !DIExpression(), !488)
  store ptr %2, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !489, !DIExpression(), !490)
  %6 = load ptr, ptr %self, align 8, !dbg !491
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 32, !dbg !491
  %7 = load i64, ptr %ptradd1, align 8, !dbg !491
  %8 = load ptr, ptr %self, align 8, !dbg !492
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 40, !dbg !492
  %9 = load i64, ptr %ptradd2, align 8, !dbg !492
  %eq = icmp eq i64 %7, %9, !dbg !491
  br i1 %eq, label %if.then, label %if.exit18, !dbg !491

if.then:                                          ; preds = %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !493
  %ptradd3 = getelementptr inbounds i8, ptr %10, i64 32, !dbg !493
  %11 = load i64, ptr %ptradd3, align 8, !dbg !493
  %eq4 = icmp eq i64 0, %11, !dbg !493
  br i1 %eq4, label %and.rhs, label %and.phi, !dbg !493

and.rhs:                                          ; preds = %if.then
  %ptradd5 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !495
  %12 = load i64, ptr %ptradd5, align 8, !dbg !495
  %13 = load ptr, ptr %self, align 8, !dbg !496
  %ptradd6 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !496
  %ptradd7 = getelementptr inbounds i8, ptr %ptradd6, i64 8, !dbg !496
  %14 = load i64, ptr %ptradd7, align 8, !dbg !496
  %ge = icmp uge i64 %12, %14, !dbg !495
  br label %and.phi, !dbg !495

and.phi:                                          ; preds = %and.rhs, %if.then
  %val = phi i1 [ false, %if.then ], [ %ge, %and.rhs ], !dbg !495
  br i1 %val, label %if.then8, label %if.exit, !dbg !495

if.then8:                                         ; preds = %and.phi
  %15 = load ptr, ptr %self, align 8, !dbg !497
  %ptradd9 = getelementptr inbounds i8, ptr %15, i64 8, !dbg !499
  %16 = load i64, ptr %ptradd9, align 8, !dbg !499
  %17 = inttoptr i64 %16 to ptr, !dbg !499
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !486
  %18 = icmp eq ptr %17, %type, !dbg !486
  br i1 %18, label %cache_hit, label %cache_miss, !dbg !486

cache_miss:                                       ; preds = %if.then8
  %ptradd10 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !486
  %19 = load ptr, ptr %ptradd10, align 8, !dbg !486
  %20 = call ptr @.dyn_search(ptr %19, ptr @"$sel.read"), !dbg !486
  store ptr %20, ptr %.inlinecache, align 8, !dbg !486
  store ptr %17, ptr %.cachedtype, align 8, !dbg !486
  br label %21, !dbg !486

cache_hit:                                        ; preds = %if.then8
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !486
  br label %21, !dbg !486

21:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %20, %cache_miss ], !dbg !486
  %22 = icmp eq ptr %fn_phi, null, !dbg !486
  br i1 %22, label %missing_function, label %match, !dbg !486

missing_function:                                 ; preds = %21
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !497
  call void %23(ptr @.panic_msg.75, i64 41, ptr @.file.69, i64 9, ptr @.func.58, i64 4, i32 39) #5, !dbg !497
  unreachable, !dbg !497

match:                                            ; preds = %21
  %24 = load ptr, ptr %15, align 8
  %lo = load ptr, ptr %bytes, align 8
  %ptradd11 = getelementptr inbounds i8, ptr %bytes, i64 8
  %hi = load i64, ptr %ptradd11, align 8
  %25 = call i64 %fn_phi(ptr %retparam, ptr %24, ptr %lo, i64 %hi), !dbg !497
  %not_err = icmp eq i64 %25, 0, !dbg !497
  %26 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !497
  br i1 %26, label %after_check, label %assign_optional, !dbg !497

assign_optional:                                  ; preds = %match
  store i64 %25, ptr %error_var, align 8, !dbg !497
  br label %guard_block, !dbg !497

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !497

guard_block:                                      ; preds = %assign_optional
  %27 = load i64, ptr %error_var, align 8, !dbg !497
  ret i64 %27, !dbg !497

noerr_block:                                      ; preds = %after_check
  %28 = load i64, ptr %retparam, align 8, !dbg !497
  store i64 %28, ptr %0, align 8, !dbg !497
  ret i64 0, !dbg !497

if.exit:                                          ; preds = %and.phi
  %29 = load ptr, ptr %self, align 8, !dbg !500
  %30 = call i64 @std.io.ReadBuffer.refill(ptr %29) #6, !dbg !500
  %not_err13 = icmp eq i64 %30, 0, !dbg !500
  %31 = call i1 @llvm.expect.i1(i1 %not_err13, i1 true), !dbg !500
  br i1 %31, label %after_check15, label %assign_optional14, !dbg !500

assign_optional14:                                ; preds = %if.exit
  store i64 %30, ptr %error_var12, align 8, !dbg !500
  br label %guard_block16, !dbg !500

after_check15:                                    ; preds = %if.exit
  br label %noerr_block17, !dbg !500

guard_block16:                                    ; preds = %assign_optional14
  %32 = load i64, ptr %error_var12, align 8, !dbg !500
  ret i64 %32, !dbg !500

noerr_block17:                                    ; preds = %after_check15
  br label %if.exit18, !dbg !500

if.exit18:                                        ; preds = %noerr_block17, %checkok
    #dbg_declare(ptr %n, !501, !DIExpression(), !502)
  %33 = load ptr, ptr %self, align 8, !dbg !503
  %ptradd19 = getelementptr inbounds i8, ptr %33, i64 40, !dbg !503
  %34 = load i64, ptr %ptradd19, align 8, !dbg !503
  %35 = load ptr, ptr %self, align 8, !dbg !504
  %ptradd20 = getelementptr inbounds i8, ptr %35, i64 32, !dbg !504
  %36 = load i64, ptr %ptradd20, align 8, !dbg !504
  %sub = sub i64 %34, %36, !dbg !503
  store i64 %sub, ptr %x, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !505
  %37 = load i64, ptr %ptradd21, align 8
  store i64 %37, ptr %.anon, align 8
  %38 = load i64, ptr %x, align 8
  store i64 %38, ptr %a, align 8
  %39 = load i64, ptr %.anon, align 8
  store i64 %39, ptr %b, align 8
  %40 = load i64, ptr %a, align 8, !dbg !506
  %41 = load i64, ptr %b, align 8, !dbg !511
  %lt = icmp ult i64 %40, %41, !dbg !506
  br i1 %lt, label %cond.lhs, label %cond.rhs, !dbg !506

cond.lhs:                                         ; preds = %if.exit18
  %42 = load i64, ptr %x, align 8, !dbg !512
  br label %cond.phi, !dbg !512

cond.rhs:                                         ; preds = %if.exit18
  %43 = load i64, ptr %.anon, align 8, !dbg !513
  br label %cond.phi, !dbg !513

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val22 = phi i64 [ %42, %cond.lhs ], [ %43, %cond.rhs ], !dbg !513
  store i64 %val22, ptr %n, align 8, !dbg !513
  %44 = load ptr, ptr %self, align 8, !dbg !514
  %ptradd23 = getelementptr inbounds i8, ptr %44, i64 16, !dbg !514
  %45 = load %"char[]", ptr %ptradd23, align 8, !dbg !514
  %46 = extractvalue %"char[]" %45, 0, !dbg !514
  %47 = load ptr, ptr %self, align 8, !dbg !515
  %ptradd24 = getelementptr inbounds i8, ptr %47, i64 32, !dbg !515
  %48 = load i64, ptr %ptradd24, align 8, !dbg !515
  %49 = extractvalue %"char[]" %45, 1, !dbg !515
  %gt = icmp ugt i64 %48, %49, !dbg !515
  %50 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !515
  br i1 %50, label %panic25, label %checkok28, !dbg !515

checkok28:                                        ; preds = %cond.phi
  %51 = load i64, ptr %n, align 8, !dbg !516
  %add = add i64 %48, %51, !dbg !516
  %lt29 = icmp ult i64 %49, %add, !dbg !516
  %sub30 = sub i64 %add, 1, !dbg !516
  %52 = call i1 @llvm.expect.i1(i1 %lt29, i1 false), !dbg !516
  br i1 %52, label %panic31, label %checkok38, !dbg !516

checkok38:                                        ; preds = %checkok28
  %size = sub i64 %add, %48, !dbg !514
  %ptradd39 = getelementptr inbounds i8, ptr %46, i64 %48, !dbg !514
  %53 = insertvalue %"char[]" undef, ptr %ptradd39, 0, !dbg !514
  %54 = insertvalue %"char[]" %53, i64 %size, 1, !dbg !514
  %55 = load %"char[]", ptr %bytes, align 8, !dbg !517
  %56 = extractvalue %"char[]" %55, 0, !dbg !517
  %57 = extractvalue %"char[]" %55, 1, !dbg !518
  %gt40 = icmp ugt i64 0, %57, !dbg !518
  %58 = call i1 @llvm.expect.i1(i1 %gt40, i1 false), !dbg !518
  br i1 %58, label %panic41, label %checkok48, !dbg !518

checkok48:                                        ; preds = %checkok38
  %59 = load i64, ptr %n, align 8, !dbg !519
  %add49 = add i64 0, %59, !dbg !519
  %lt50 = icmp ult i64 %57, %add49, !dbg !519
  %sub51 = sub i64 %add49, 1, !dbg !519
  %60 = call i1 @llvm.expect.i1(i1 %lt50, i1 false), !dbg !519
  br i1 %60, label %panic52, label %checkok59, !dbg !519

checkok59:                                        ; preds = %checkok48
  %size60 = sub i64 %add49, 0, !dbg !517
  %61 = insertvalue %"char[]" undef, ptr %56, 0, !dbg !517
  %62 = insertvalue %"char[]" %61, i64 %size60, 1, !dbg !517
  %63 = extractvalue %"char[]" %62, 0, !dbg !517
  %64 = extractvalue %"char[]" %54, 0, !dbg !517
  %65 = extractvalue %"char[]" %54, 1, !dbg !517
  %66 = extractvalue %"char[]" %62, 1, !dbg !517
  %neq = icmp ne i64 %66, %65, !dbg !517
  %67 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !517
  br i1 %67, label %panic61, label %checkok68, !dbg !517

checkok68:                                        ; preds = %checkok59
  %68 = mul i64 %65, 1, !dbg !517
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %63, ptr align 1 %64, i64 %68, i1 false), !dbg !517
  %69 = load ptr, ptr %self, align 8, !dbg !520
  %ptradd69 = getelementptr inbounds i8, ptr %69, i64 32, !dbg !520
  %70 = load i64, ptr %ptradd69, align 8, !dbg !520
  %71 = load i64, ptr %n, align 8, !dbg !521
  %add70 = add i64 %70, %71, !dbg !520
  store i64 %add70, ptr %ptradd69, align 8, !dbg !520
  %72 = load i64, ptr %n, align 8, !dbg !522
  store i64 %72, ptr %0, align 8, !dbg !522
  ret i64 0, !dbg !522

panic:                                            ; preds = %entry
  %73 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !488
  call void %73(ptr @.panic_msg, i64 62, ptr @.file.69, i64 9, ptr @.func.58, i64 4, i32 32) #5, !dbg !488
  unreachable, !dbg !488

panic25:                                          ; preds = %cond.phi
  store i64 %49, ptr %taddr, align 8
  %74 = insertvalue %any undef, ptr %taddr, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %48, ptr %taddr26, align 8
  %76 = insertvalue %any undef, ptr %taddr26, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %75, ptr %varargslots, align 16
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %77, ptr %ptradd27, align 16
  %78 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %78, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.69, i64 9, ptr @.func.58, i64 4, i32 44, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !514
  unreachable, !dbg !514

panic31:                                          ; preds = %checkok28
  store i64 %sub30, ptr %taddr32, align 8
  %79 = insertvalue %any undef, ptr %taddr32, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %49, ptr %taddr33, align 8
  %81 = insertvalue %any undef, ptr %taddr33, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %80, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %82, ptr %ptradd35, align 16
  %83 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %83, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 60, ptr @.file.69, i64 9, ptr @.func.58, i64 4, i32 44, ptr byval(%"any[]") align 8 %indirectarg37) #5, !dbg !514
  unreachable, !dbg !514

panic41:                                          ; preds = %checkok38
  store i64 %57, ptr %taddr42, align 8
  %84 = insertvalue %any undef, ptr %taddr42, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr43, align 8
  %86 = insertvalue %any undef, ptr %taddr43, 0
  %87 = insertvalue %any %86, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %85, ptr %varargslots44, align 16
  %ptradd45 = getelementptr inbounds i8, ptr %varargslots44, i64 16
  store %any %87, ptr %ptradd45, align 16
  %88 = insertvalue %"any[]" undef, ptr %varargslots44, 0
  %"$$temp46" = insertvalue %"any[]" %88, i64 2, 1
  store %"any[]" %"$$temp46", ptr %indirectarg47, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.69, i64 9, ptr @.func.58, i64 4, i32 44, ptr byval(%"any[]") align 8 %indirectarg47) #5, !dbg !517
  unreachable, !dbg !517

panic52:                                          ; preds = %checkok48
  store i64 %sub51, ptr %taddr53, align 8
  %89 = insertvalue %any undef, ptr %taddr53, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %57, ptr %taddr54, align 8
  %91 = insertvalue %any undef, ptr %taddr54, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %90, ptr %varargslots55, align 16
  %ptradd56 = getelementptr inbounds i8, ptr %varargslots55, i64 16
  store %any %92, ptr %ptradd56, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots55, 0
  %"$$temp57" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp57", ptr %indirectarg58, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 60, ptr @.file.69, i64 9, ptr @.func.58, i64 4, i32 44, ptr byval(%"any[]") align 8 %indirectarg58) #5, !dbg !517
  unreachable, !dbg !517

panic61:                                          ; preds = %checkok59
  store i64 %66, ptr %taddr62, align 8
  %94 = insertvalue %any undef, ptr %taddr62, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %65, ptr %taddr63, align 8
  %96 = insertvalue %any undef, ptr %taddr63, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %95, ptr %varargslots64, align 16
  %ptradd65 = getelementptr inbounds i8, ptr %varargslots64, i64 16
  store %any %97, ptr %ptradd65, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots64, 0
  %"$$temp66" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp66", ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.76, i64 38, ptr @.file.69, i64 9, ptr @.func.58, i64 4, i32 44, ptr byval(%"any[]") align 8 %indirectarg67) #5, !dbg !517
  unreachable, !dbg !517
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ReadBuffer.read_byte(ptr %0, ptr %1) #0 comdat !dbg !523 {
entry:
  %self = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !526
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !526
  br i1 %3, label %panic, label %checkok, !dbg !526

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !527, !DIExpression(), !528)
  %4 = load ptr, ptr %self, align 8, !dbg !529
  %ptradd = getelementptr inbounds i8, ptr %4, i64 32, !dbg !529
  %5 = load i64, ptr %ptradd, align 8, !dbg !529
  %6 = load ptr, ptr %self, align 8, !dbg !530
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 40, !dbg !530
  %7 = load i64, ptr %ptradd1, align 8, !dbg !530
  %eq = icmp eq i64 %5, %7, !dbg !529
  br i1 %eq, label %if.then, label %if.exit, !dbg !529

if.then:                                          ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !531
  %9 = call i64 @std.io.ReadBuffer.refill(ptr %8) #6, !dbg !531
  %not_err = icmp eq i64 %9, 0, !dbg !531
  %10 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !531
  br i1 %10, label %after_check, label %assign_optional, !dbg !531

assign_optional:                                  ; preds = %if.then
  store i64 %9, ptr %error_var, align 8, !dbg !531
  br label %guard_block, !dbg !531

after_check:                                      ; preds = %if.then
  br label %noerr_block, !dbg !531

guard_block:                                      ; preds = %assign_optional
  %11 = load i64, ptr %error_var, align 8, !dbg !531
  ret i64 %11, !dbg !531

noerr_block:                                      ; preds = %after_check
  br label %if.exit, !dbg !531

if.exit:                                          ; preds = %noerr_block, %checkok
  %12 = load ptr, ptr %self, align 8, !dbg !532
  %ptradd2 = getelementptr inbounds i8, ptr %12, i64 32, !dbg !532
  %13 = load i64, ptr %ptradd2, align 8, !dbg !532
  %14 = load ptr, ptr %self, align 8, !dbg !533
  %ptradd3 = getelementptr inbounds i8, ptr %14, i64 40, !dbg !533
  %15 = load i64, ptr %ptradd3, align 8, !dbg !533
  %eq4 = icmp eq i64 %13, %15, !dbg !532
  br i1 %eq4, label %if.then5, label %if.exit6, !dbg !532

if.then5:                                         ; preds = %if.exit
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !534

if.exit6:                                         ; preds = %if.exit
    #dbg_declare(ptr %c, !535, !DIExpression(), !536)
  %16 = load ptr, ptr %self, align 8, !dbg !537
  %ptradd7 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !537
  %ptradd8 = getelementptr inbounds i8, ptr %ptradd7, i64 8, !dbg !537
  %17 = load i64, ptr %ptradd8, align 8, !dbg !537
  %18 = load ptr, ptr %ptradd7, align 8, !dbg !537
  %19 = load ptr, ptr %self, align 8, !dbg !538
  %ptradd9 = getelementptr inbounds i8, ptr %19, i64 32, !dbg !538
  %20 = load i64, ptr %ptradd9, align 8, !dbg !538
  %ge = icmp uge i64 %20, %17, !dbg !538
  %21 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !538
  br i1 %21, label %panic10, label %checkok13, !dbg !538

checkok13:                                        ; preds = %if.exit6
  %ptradd14 = getelementptr inbounds i8, ptr %18, i64 %20, !dbg !538
  %22 = load i8, ptr %ptradd14, align 1, !dbg !538
  store i8 %22, ptr %c, align 1, !dbg !538
  %23 = load ptr, ptr %self, align 8, !dbg !539
  %ptradd15 = getelementptr inbounds i8, ptr %23, i64 32, !dbg !539
  %24 = load i64, ptr %ptradd15, align 8, !dbg !539
  %add = add i64 %24, 1, !dbg !539
  store i64 %add, ptr %ptradd15, align 8, !dbg !539
  %25 = load i8, ptr %c, align 1, !dbg !540
  store i8 %25, ptr %0, align 1, !dbg !540
  ret i64 0, !dbg !540

panic:                                            ; preds = %entry
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !528
  call void %26(ptr @.panic_msg, i64 62, ptr @.file.69, i64 9, ptr @.func.62, i64 9, i32 49) #5, !dbg !528
  unreachable, !dbg !528

panic10:                                          ; preds = %if.exit6
  store i64 %17, ptr %taddr, align 8
  %27 = insertvalue %any undef, ptr %taddr, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %20, ptr %taddr11, align 8
  %29 = insertvalue %any undef, ptr %taddr11, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %28, ptr %varargslots, align 16
  %ptradd12 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %30, ptr %ptradd12, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.69, i64 9, ptr @.func.62, i64 9, i32 53, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !538
  unreachable, !dbg !538
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.ReadBuffer.refill(ptr %0) #0 !dbg !541 {
entry:
  %self = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !542
  %1 = icmp eq ptr %0, null, !dbg !542
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !542
  br i1 %2, label %panic, label %checkok, !dbg !542

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !543, !DIExpression(), !544)
  %3 = load ptr, ptr %self, align 8, !dbg !545
  %ptradd = getelementptr inbounds i8, ptr %3, i64 32, !dbg !545
  store i64 0, ptr %ptradd, align 8, !dbg !546
  %4 = load ptr, ptr %self, align 8, !dbg !547
  %ptradd1 = getelementptr inbounds i8, ptr %4, i64 40, !dbg !547
  %5 = load ptr, ptr %self, align 8, !dbg !548
  %6 = load ptr, ptr %self, align 8, !dbg !549
  %ptradd2 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !549
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !549
  %7 = load i64, ptr %ptradd3, align 8, !dbg !549
  %8 = inttoptr i64 %7 to ptr, !dbg !549
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !542
  %9 = icmp eq ptr %8, %type, !dbg !542
  br i1 %9, label %cache_hit, label %cache_miss, !dbg !542

cache_miss:                                       ; preds = %checkok
  %ptradd4 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !542
  %10 = load ptr, ptr %ptradd4, align 8, !dbg !542
  %11 = call ptr @.dyn_search(ptr %10, ptr @"$sel.read"), !dbg !542
  store ptr %11, ptr %.inlinecache, align 8, !dbg !542
  store ptr %8, ptr %.cachedtype, align 8, !dbg !542
  br label %12, !dbg !542

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !542
  br label %12, !dbg !542

12:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %11, %cache_miss ], !dbg !542
  %13 = icmp eq ptr %fn_phi, null, !dbg !542
  br i1 %13, label %missing_function, label %match, !dbg !542

missing_function:                                 ; preds = %12
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !548
  call void %14(ptr @.panic_msg.75, i64 41, ptr @.file.69, i64 9, ptr @.func.77, i64 6, i32 61) #5, !dbg !548
  unreachable, !dbg !548

match:                                            ; preds = %12
  %15 = load ptr, ptr %5, align 8
  %lo = load ptr, ptr %ptradd2, align 8
  %ptradd5 = getelementptr inbounds i8, ptr %ptradd2, i64 8
  %hi = load i64, ptr %ptradd5, align 8
  %16 = call i64 %fn_phi(ptr %retparam, ptr %15, ptr %lo, i64 %hi), !dbg !548
  %not_err = icmp eq i64 %16, 0, !dbg !548
  %17 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !548
  br i1 %17, label %after_check, label %assign_optional, !dbg !548

assign_optional:                                  ; preds = %match
  store i64 %16, ptr %error_var, align 8, !dbg !548
  br label %guard_block, !dbg !548

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !548

guard_block:                                      ; preds = %assign_optional
  %18 = load i64, ptr %error_var, align 8, !dbg !548
  ret i64 %18, !dbg !548

noerr_block:                                      ; preds = %after_check
  %19 = load i64, ptr %retparam, align 8, !dbg !548
  store i64 %19, ptr %ptradd1, align 8, !dbg !548
  ret i64 0, !dbg !548

panic:                                            ; preds = %entry
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !544
  call void %20(ptr @.panic_msg, i64 62, ptr @.file.69, i64 9, ptr @.func.77, i64 6, i32 58) #5, !dbg !544
  unreachable, !dbg !544
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.WriteBuffer.init(ptr %0, i64 %1, ptr %2, ptr %3, i64 %4) #0 comdat !dbg !550 {
entry:
  %self = alloca ptr, align 8
  %wrapped_stream = alloca %any, align 8
  %bytes = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.assign_list = alloca %WriteBuffer, align 8
  %5 = icmp eq ptr %0, null, !dbg !559
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !559
  br i1 %6, label %panic, label %checkok, !dbg !559

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !560, !DIExpression(), !561)
  store i64 %1, ptr %wrapped_stream, align 8
  %ptradd = getelementptr inbounds i8, ptr %wrapped_stream, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %wrapped_stream, !562, !DIExpression(), !563)
  store ptr %3, ptr %bytes, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %bytes, !564, !DIExpression(), !565)
  %ptradd2 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !566
  %7 = load i64, ptr %ptradd2, align 8, !dbg !566
  %lt = icmp ult i64 0, %7, !dbg !566
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !566

assert_fail:                                      ; preds = %checkok
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !566
  call void %8(ptr @.panic_msg.78, i64 63, ptr @.file.69, i64 9, ptr @.func, i64 4, i32 74) #5, !dbg !566
  unreachable, !dbg !566

assert_ok:                                        ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !568
  %ptradd3 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !568
  %ptradd4 = getelementptr inbounds i8, ptr %ptradd3, i64 8, !dbg !568
  %10 = load i64, ptr %ptradd4, align 8, !dbg !568
  %eq = icmp eq i64 0, %10, !dbg !568
  br i1 %eq, label %assert_ok6, label %assert_fail5, !dbg !568

assert_fail5:                                     ; preds = %assert_ok
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !568
  call void %11(ptr @.panic_msg.71, i64 88, ptr @.file.69, i64 9, ptr @.func, i64 4, i32 75) #5, !dbg !568
  unreachable, !dbg !568

assert_ok6:                                       ; preds = %assert_ok
  %12 = load ptr, ptr %self, align 8, !dbg !569
  %checknull = icmp eq ptr %12, null, !dbg !569
  %13 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !569
  br i1 %13, label %panic7, label %checkok8, !dbg !569

checkok8:                                         ; preds = %assert_ok6
  %14 = ptrtoint ptr %12 to i64, !dbg !569
  %15 = urem i64 %14, 8, !dbg !569
  %16 = icmp ne i64 %15, 0, !dbg !569
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !569
  br i1 %17, label %panic9, label %checkok12, !dbg !569

checkok12:                                        ; preds = %checkok8
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 40, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %wrapped_stream, i32 16, i1 false), !dbg !570
  %ptradd13 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !570
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd13, ptr align 8 %bytes, i32 16, i1 false), !dbg !571
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %12, ptr align 8 %.assign_list, i32 40, i1 false), !dbg !571
  %18 = load ptr, ptr %self, align 8, !dbg !572
  ret ptr %18, !dbg !572

panic:                                            ; preds = %entry
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !561
  call void %19(ptr @.panic_msg, i64 62, ptr @.file.69, i64 9, ptr @.func, i64 4, i32 77) #5, !dbg !561
  unreachable, !dbg !561

panic7:                                           ; preds = %assert_ok6
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !569
  call void %20(ptr @.panic_msg.36, i64 45, ptr @.file.69, i64 9, ptr @.func, i64 4, i32 79) #5, !dbg !569
  unreachable, !dbg !569

panic9:                                           ; preds = %checkok8
  store i64 8, ptr %taddr, align 8
  %21 = insertvalue %any undef, ptr %taddr, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr10, align 8
  %23 = insertvalue %any undef, ptr %taddr10, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %22, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %24, ptr %ptradd11, align 16
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.69, i64 9, ptr @.func, i64 4, i32 79, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !569
  unreachable, !dbg !569
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.io.WriteBuffer.str_view(ptr %0) #0 comdat !dbg !573 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr7 = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %varargslots9 = alloca [2 x %any], align 16
  %indirectarg12 = alloca %"any[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !576
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !576
  br i1 %2, label %panic, label %checkok, !dbg !576

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !577, !DIExpression(), !578)
  %3 = load ptr, ptr %self, align 8, !dbg !579
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !579
  %4 = load %"char[]", ptr %ptradd, align 8, !dbg !579
  %5 = extractvalue %"char[]" %4, 0, !dbg !579
  %6 = extractvalue %"char[]" %4, 1, !dbg !580
  %gt = icmp ugt i64 0, %6, !dbg !580
  %7 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !580
  br i1 %7, label %panic1, label %checkok4, !dbg !580

checkok4:                                         ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !581
  %ptradd5 = getelementptr inbounds i8, ptr %8, i64 32, !dbg !581
  %9 = load i64, ptr %ptradd5, align 8, !dbg !581
  %add = add i64 0, %9, !dbg !581
  %lt = icmp ult i64 %6, %add, !dbg !581
  %sub = sub i64 %add, 1, !dbg !581
  %10 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !581
  br i1 %10, label %panic6, label %checkok13, !dbg !581

checkok13:                                        ; preds = %checkok4
  %size = sub i64 %add, 0, !dbg !582
  %11 = insertvalue %"char[]" undef, ptr %5, 0, !dbg !582
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !582
  store %"char[]" %12, ptr %taddr14, align 8
  %13 = load { ptr, i64 }, ptr %taddr14, align 8
  ret { ptr, i64 } %13

panic:                                            ; preds = %entry
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !578
  call void %14(ptr @.panic_msg, i64 62, ptr @.file.69, i64 9, ptr @.func.72, i64 8, i32 83) #5, !dbg !578
  unreachable, !dbg !578

panic1:                                           ; preds = %checkok
  store i64 %6, ptr %taddr, align 8
  %15 = insertvalue %any undef, ptr %taddr, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr2, align 8
  %17 = insertvalue %any undef, ptr %taddr2, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %16, ptr %varargslots, align 16
  %ptradd3 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %18, ptr %ptradd3, align 16
  %19 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %19, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.69, i64 9, ptr @.func.72, i64 8, i32 85, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !582
  unreachable, !dbg !582

panic6:                                           ; preds = %checkok4
  store i64 %sub, ptr %taddr7, align 8
  %20 = insertvalue %any undef, ptr %taddr7, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr8, align 8
  %22 = insertvalue %any undef, ptr %taddr8, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %21, ptr %varargslots9, align 16
  %ptradd10 = getelementptr inbounds i8, ptr %varargslots9, i64 16
  store %any %23, ptr %ptradd10, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots9, 0
  %"$$temp11" = insertvalue %"any[]" %24, i64 2, 1
  store %"any[]" %"$$temp11", ptr %indirectarg12, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 60, ptr @.file.69, i64 9, ptr @.func.72, i64 8, i32 85, ptr byval(%"any[]") align 8 %indirectarg12) #5, !dbg !582
  unreachable, !dbg !582
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.WriteBuffer.close(ptr %0) #0 comdat !dbg !583 {
entry:
  %self = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache3 = alloca ptr, align 8
  %.cachedtype4 = alloca ptr, align 8
  store ptr null, ptr %.cachedtype4, align 8, !dbg !586
  store ptr null, ptr %.cachedtype, align 8, !dbg !586
  %1 = icmp eq ptr %0, null, !dbg !586
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !586
  br i1 %2, label %panic, label %checkok, !dbg !586

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !587, !DIExpression(), !588)
  %3 = load ptr, ptr %self, align 8, !dbg !589
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !589
  %4 = load i64, ptr %ptradd, align 8, !dbg !589
  %5 = inttoptr i64 %4 to ptr, !dbg !589
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !586
  %6 = icmp eq ptr %5, %type, !dbg !586
  br i1 %6, label %cache_hit, label %cache_miss, !dbg !586

cache_miss:                                       ; preds = %checkok
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !586
  %7 = load ptr, ptr %ptradd1, align 8, !dbg !586
  %8 = call ptr @.dyn_search(ptr %7, ptr @"$sel.close"), !dbg !586
  store ptr %8, ptr %.inlinecache, align 8, !dbg !586
  store ptr %5, ptr %.cachedtype, align 8, !dbg !586
  br label %9, !dbg !586

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !586
  br label %9, !dbg !586

9:                                                ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %8, %cache_miss ], !dbg !586
  %i2b = icmp ne ptr %fn_phi, null, !dbg !586
  br i1 %i2b, label %if.then, label %if.exit, !dbg !586

if.then:                                          ; preds = %9
  %10 = load ptr, ptr %self, align 8, !dbg !590
  %ptradd2 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !590
  %11 = load i64, ptr %ptradd2, align 8, !dbg !590
  %12 = inttoptr i64 %11 to ptr, !dbg !590
  %type5 = load ptr, ptr %.cachedtype4, align 8, !dbg !586
  %13 = icmp eq ptr %12, %type5, !dbg !586
  br i1 %13, label %cache_hit8, label %cache_miss6, !dbg !586

cache_miss6:                                      ; preds = %if.then
  %ptradd7 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !586
  %14 = load ptr, ptr %ptradd7, align 8, !dbg !586
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.close"), !dbg !586
  store ptr %15, ptr %.inlinecache3, align 8, !dbg !586
  store ptr %12, ptr %.cachedtype4, align 8, !dbg !586
  br label %16, !dbg !586

cache_hit8:                                       ; preds = %if.then
  %cache_hit_fn9 = load ptr, ptr %.inlinecache3, align 8, !dbg !586
  br label %16, !dbg !586

16:                                               ; preds = %cache_hit8, %cache_miss6
  %fn_phi10 = phi ptr [ %cache_hit_fn9, %cache_hit8 ], [ %15, %cache_miss6 ], !dbg !586
  %17 = icmp eq ptr %fn_phi10, null, !dbg !586
  br i1 %17, label %missing_function, label %match, !dbg !586

missing_function:                                 ; preds = %16
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !590
  call void %18(ptr @.panic_msg.74, i64 42, ptr @.file.69, i64 9, ptr @.func.73, i64 5, i32 90) #5, !dbg !590
  unreachable, !dbg !590

match:                                            ; preds = %16
  %19 = load ptr, ptr %10, align 8, !dbg !590
  %20 = call i64 %fn_phi10(ptr %19), !dbg !590
  %not_err = icmp eq i64 %20, 0, !dbg !590
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !590
  br i1 %21, label %after_check, label %assign_optional, !dbg !590

assign_optional:                                  ; preds = %match
  store i64 %20, ptr %reterr, align 8, !dbg !590
  br label %err_retblock, !dbg !590

after_check:                                      ; preds = %match
  ret i64 0, !dbg !590

err_retblock:                                     ; preds = %assign_optional
  %22 = load i64, ptr %reterr, align 8, !dbg !590
  ret i64 %22, !dbg !590

if.exit:                                          ; preds = %9
  ret i64 0, !dbg !590

panic:                                            ; preds = %entry
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !588
  call void %23(ptr @.panic_msg, i64 62, ptr @.file.69, i64 9, ptr @.func.73, i64 5, i32 88) #5, !dbg !588
  unreachable, !dbg !588
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.WriteBuffer.flush(ptr %0) #0 comdat !dbg !591 {
entry:
  %self = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %error_var2 = alloca i64, align 8
  %.inlinecache4 = alloca ptr, align 8
  %.cachedtype5 = alloca ptr, align 8
  store ptr null, ptr %.cachedtype5, align 8, !dbg !592
  store ptr null, ptr %.cachedtype, align 8, !dbg !592
  %1 = icmp eq ptr %0, null, !dbg !592
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !592
  br i1 %2, label %panic, label %checkok, !dbg !592

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !593, !DIExpression(), !594)
  %3 = load ptr, ptr %self, align 8, !dbg !595
  %4 = call i64 @std.io.WriteBuffer.write_pending(ptr %3), !dbg !595
  %not_err = icmp eq i64 %4, 0, !dbg !595
  %5 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !595
  br i1 %5, label %after_check, label %assign_optional, !dbg !595

assign_optional:                                  ; preds = %checkok
  store i64 %4, ptr %error_var, align 8, !dbg !595
  br label %guard_block, !dbg !595

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !595

guard_block:                                      ; preds = %assign_optional
  %6 = load i64, ptr %error_var, align 8, !dbg !595
  ret i64 %6, !dbg !595

noerr_block:                                      ; preds = %after_check
  %7 = load ptr, ptr %self, align 8, !dbg !596
  %ptradd = getelementptr inbounds i8, ptr %7, i64 8, !dbg !596
  %8 = load i64, ptr %ptradd, align 8, !dbg !596
  %9 = inttoptr i64 %8 to ptr, !dbg !596
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !592
  %10 = icmp eq ptr %9, %type, !dbg !592
  br i1 %10, label %cache_hit, label %cache_miss, !dbg !592

cache_miss:                                       ; preds = %noerr_block
  %ptradd1 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !592
  %11 = load ptr, ptr %ptradd1, align 8, !dbg !592
  %12 = call ptr @.dyn_search(ptr %11, ptr @"$sel.flush"), !dbg !592
  store ptr %12, ptr %.inlinecache, align 8, !dbg !592
  store ptr %9, ptr %.cachedtype, align 8, !dbg !592
  br label %13, !dbg !592

cache_hit:                                        ; preds = %noerr_block
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !592
  br label %13, !dbg !592

13:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %12, %cache_miss ], !dbg !592
  %i2b = icmp ne ptr %fn_phi, null, !dbg !592
  br i1 %i2b, label %if.then, label %if.exit, !dbg !592

if.then:                                          ; preds = %13
  %14 = load ptr, ptr %self, align 8, !dbg !597
  %ptradd3 = getelementptr inbounds i8, ptr %14, i64 8, !dbg !597
  %15 = load i64, ptr %ptradd3, align 8, !dbg !597
  %16 = inttoptr i64 %15 to ptr, !dbg !597
  %type6 = load ptr, ptr %.cachedtype5, align 8, !dbg !592
  %17 = icmp eq ptr %16, %type6, !dbg !592
  br i1 %17, label %cache_hit9, label %cache_miss7, !dbg !592

cache_miss7:                                      ; preds = %if.then
  %ptradd8 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !592
  %18 = load ptr, ptr %ptradd8, align 8, !dbg !592
  %19 = call ptr @.dyn_search(ptr %18, ptr @"$sel.flush"), !dbg !592
  store ptr %19, ptr %.inlinecache4, align 8, !dbg !592
  store ptr %16, ptr %.cachedtype5, align 8, !dbg !592
  br label %20, !dbg !592

cache_hit9:                                       ; preds = %if.then
  %cache_hit_fn10 = load ptr, ptr %.inlinecache4, align 8, !dbg !592
  br label %20, !dbg !592

20:                                               ; preds = %cache_hit9, %cache_miss7
  %fn_phi11 = phi ptr [ %cache_hit_fn10, %cache_hit9 ], [ %19, %cache_miss7 ], !dbg !592
  %21 = icmp eq ptr %fn_phi11, null, !dbg !592
  br i1 %21, label %missing_function, label %match, !dbg !592

missing_function:                                 ; preds = %20
  %22 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !597
  call void %22(ptr @.panic_msg.79, i64 42, ptr @.file.69, i64 9, ptr @.func.44, i64 5, i32 96) #5, !dbg !597
  unreachable, !dbg !597

match:                                            ; preds = %20
  %23 = load ptr, ptr %14, align 8, !dbg !597
  %24 = call i64 %fn_phi11(ptr %23), !dbg !597
  %not_err12 = icmp eq i64 %24, 0, !dbg !597
  %25 = call i1 @llvm.expect.i1(i1 %not_err12, i1 true), !dbg !597
  br i1 %25, label %after_check14, label %assign_optional13, !dbg !597

assign_optional13:                                ; preds = %match
  store i64 %24, ptr %error_var2, align 8, !dbg !597
  br label %guard_block15, !dbg !597

after_check14:                                    ; preds = %match
  br label %noerr_block16, !dbg !597

guard_block15:                                    ; preds = %assign_optional13
  %26 = load i64, ptr %error_var2, align 8, !dbg !597
  ret i64 %26, !dbg !597

noerr_block16:                                    ; preds = %after_check14
  br label %if.exit, !dbg !597

if.exit:                                          ; preds = %noerr_block16, %13
  ret i64 0, !dbg !597

panic:                                            ; preds = %entry
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !594
  call void %27(ptr @.panic_msg, i64 62, ptr @.file.69, i64 9, ptr @.func.44, i64 5, i32 93) #5, !dbg !594
  unreachable, !dbg !594
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.WriteBuffer.write(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !598 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %n = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr13 = alloca i64, align 8
  %taddr14 = alloca i64, align 8
  %varargslots15 = alloca [2 x %any], align 16
  %indirectarg18 = alloca %"any[]", align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %varargslots26 = alloca [2 x %any], align 16
  %indirectarg29 = alloca %"any[]", align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %varargslots36 = alloca [2 x %any], align 16
  %indirectarg39 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %error_var = alloca i64, align 8
  %reterr49 = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca i64, align 8
  %varargslots61 = alloca [2 x %any], align 16
  %indirectarg64 = alloca %"any[]", align 8
  %taddr70 = alloca i64, align 8
  %taddr71 = alloca i64, align 8
  %varargslots72 = alloca [2 x %any], align 16
  %indirectarg75 = alloca %"any[]", align 8
  %taddr82 = alloca i64, align 8
  %taddr83 = alloca i64, align 8
  %varargslots84 = alloca [2 x %any], align 16
  %indirectarg87 = alloca %"any[]", align 8
  %taddr92 = alloca i64, align 8
  %taddr93 = alloca i64, align 8
  %varargslots94 = alloca [2 x %any], align 16
  %indirectarg97 = alloca %"any[]", align 8
  %reterr101 = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !601
  %4 = icmp eq ptr %1, null, !dbg !601
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !601
  br i1 %5, label %panic, label %checkok, !dbg !601

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !602, !DIExpression(), !603)
  store ptr %2, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !604, !DIExpression(), !605)
    #dbg_declare(ptr %n, !606, !DIExpression(), !607)
  %6 = load ptr, ptr %self, align 8, !dbg !608
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !608
  %ptradd2 = getelementptr inbounds i8, ptr %ptradd1, i64 8, !dbg !608
  %7 = load i64, ptr %ptradd2, align 8, !dbg !608
  %8 = load ptr, ptr %self, align 8, !dbg !609
  %ptradd3 = getelementptr inbounds i8, ptr %8, i64 32, !dbg !609
  %9 = load i64, ptr %ptradd3, align 8, !dbg !609
  %sub = sub i64 %7, %9, !dbg !608
  store i64 %sub, ptr %n, align 8, !dbg !608
  %ptradd4 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !610
  %10 = load i64, ptr %ptradd4, align 8, !dbg !610
  %11 = load i64, ptr %n, align 8, !dbg !611
  %lt = icmp ult i64 %10, %11, !dbg !610
  br i1 %lt, label %if.then, label %if.exit, !dbg !610

if.then:                                          ; preds = %checkok
  %12 = load %"char[]", ptr %bytes, align 8, !dbg !612
  %13 = extractvalue %"char[]" %12, 0, !dbg !612
  %14 = extractvalue %"char[]" %12, 1, !dbg !614
  %gt = icmp ugt i64 0, %14, !dbg !614
  %15 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !614
  br i1 %15, label %panic5, label %checkok8, !dbg !614

checkok8:                                         ; preds = %if.then
  %size = sub i64 %14, 0, !dbg !612
  %16 = insertvalue %"char[]" undef, ptr %13, 0, !dbg !612
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !612
  %18 = load ptr, ptr %self, align 8, !dbg !615
  %ptradd9 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !615
  %19 = load %"char[]", ptr %ptradd9, align 8, !dbg !615
  %20 = extractvalue %"char[]" %19, 0, !dbg !615
  %21 = load ptr, ptr %self, align 8, !dbg !616
  %ptradd10 = getelementptr inbounds i8, ptr %21, i64 32, !dbg !616
  %22 = load i64, ptr %ptradd10, align 8, !dbg !616
  %23 = extractvalue %"char[]" %19, 1, !dbg !616
  %gt11 = icmp ugt i64 %22, %23, !dbg !616
  %24 = call i1 @llvm.expect.i1(i1 %gt11, i1 false), !dbg !616
  br i1 %24, label %panic12, label %checkok19, !dbg !616

checkok19:                                        ; preds = %checkok8
  %ptradd20 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !617
  %25 = load i64, ptr %ptradd20, align 8, !dbg !617
  %add = add i64 %22, %25, !dbg !617
  %lt21 = icmp ult i64 %23, %add, !dbg !617
  %sub22 = sub i64 %add, 1, !dbg !617
  %26 = call i1 @llvm.expect.i1(i1 %lt21, i1 false), !dbg !617
  br i1 %26, label %panic23, label %checkok30, !dbg !617

checkok30:                                        ; preds = %checkok19
  %size31 = sub i64 %add, %22, !dbg !615
  %ptradd32 = getelementptr inbounds i8, ptr %20, i64 %22, !dbg !615
  %27 = insertvalue %"char[]" undef, ptr %ptradd32, 0, !dbg !615
  %28 = insertvalue %"char[]" %27, i64 %size31, 1, !dbg !615
  %29 = extractvalue %"char[]" %28, 0, !dbg !615
  %30 = extractvalue %"char[]" %17, 0, !dbg !615
  %31 = extractvalue %"char[]" %17, 1, !dbg !615
  %32 = extractvalue %"char[]" %28, 1, !dbg !615
  %neq = icmp ne i64 %32, %31, !dbg !615
  %33 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !615
  br i1 %33, label %panic33, label %checkok40, !dbg !615

checkok40:                                        ; preds = %checkok30
  %34 = mul i64 %31, 1, !dbg !615
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %29, ptr align 1 %30, i64 %34, i1 false), !dbg !615
  %35 = load ptr, ptr %self, align 8, !dbg !618
  %ptradd41 = getelementptr inbounds i8, ptr %35, i64 32, !dbg !618
  %36 = load i64, ptr %ptradd41, align 8, !dbg !618
  %ptradd42 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !619
  %37 = load i64, ptr %ptradd42, align 8, !dbg !619
  %add43 = add i64 %36, %37, !dbg !618
  store i64 %add43, ptr %ptradd41, align 8, !dbg !618
  %ptradd44 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !620
  %38 = load i64, ptr %ptradd44, align 8, !dbg !620
  store i64 %38, ptr %0, align 8, !dbg !620
  ret i64 0, !dbg !620

if.exit:                                          ; preds = %checkok
  %39 = load ptr, ptr %self, align 8, !dbg !621
  %40 = call i64 @std.io.WriteBuffer.write_pending(ptr %39), !dbg !621
  %not_err = icmp eq i64 %40, 0, !dbg !621
  %41 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !621
  br i1 %41, label %after_check, label %assign_optional, !dbg !621

assign_optional:                                  ; preds = %if.exit
  store i64 %40, ptr %error_var, align 8, !dbg !621
  br label %guard_block, !dbg !621

after_check:                                      ; preds = %if.exit
  br label %noerr_block, !dbg !621

guard_block:                                      ; preds = %assign_optional
  %42 = load i64, ptr %error_var, align 8, !dbg !621
  ret i64 %42, !dbg !621

noerr_block:                                      ; preds = %after_check
  %ptradd45 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !622
  %43 = load i64, ptr %ptradd45, align 8, !dbg !622
  %44 = load ptr, ptr %self, align 8, !dbg !623
  %ptradd46 = getelementptr inbounds i8, ptr %44, i64 16, !dbg !623
  %ptradd47 = getelementptr inbounds i8, ptr %ptradd46, i64 8, !dbg !623
  %45 = load i64, ptr %ptradd47, align 8, !dbg !623
  %ge = icmp uge i64 %43, %45, !dbg !622
  br i1 %ge, label %if.then48, label %if.exit56, !dbg !622

if.then48:                                        ; preds = %noerr_block
  %46 = load ptr, ptr %self, align 8, !dbg !624
  %ptradd50 = getelementptr inbounds i8, ptr %46, i64 8, !dbg !626
  %47 = load i64, ptr %ptradd50, align 8, !dbg !626
  %48 = inttoptr i64 %47 to ptr, !dbg !626
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !601
  %49 = icmp eq ptr %48, %type, !dbg !601
  br i1 %49, label %cache_hit, label %cache_miss, !dbg !601

cache_miss:                                       ; preds = %if.then48
  %ptradd51 = getelementptr inbounds i8, ptr %48, i64 16, !dbg !601
  %50 = load ptr, ptr %ptradd51, align 8, !dbg !601
  %51 = call ptr @.dyn_search(ptr %50, ptr @"$sel.write"), !dbg !601
  store ptr %51, ptr %.inlinecache, align 8, !dbg !601
  store ptr %48, ptr %.cachedtype, align 8, !dbg !601
  br label %52, !dbg !601

cache_hit:                                        ; preds = %if.then48
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !601
  br label %52, !dbg !601

52:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %51, %cache_miss ], !dbg !601
  %53 = icmp eq ptr %fn_phi, null, !dbg !601
  br i1 %53, label %missing_function, label %match, !dbg !601

missing_function:                                 ; preds = %52
  %54 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !624
  call void %54(ptr @.panic_msg.52, i64 42, ptr @.file.69, i64 9, ptr @.func.80, i64 5, i32 113) #5, !dbg !624
  unreachable, !dbg !624

match:                                            ; preds = %52
  %55 = load ptr, ptr %46, align 8
  %lo = load ptr, ptr %bytes, align 8
  %ptradd52 = getelementptr inbounds i8, ptr %bytes, i64 8
  %hi = load i64, ptr %ptradd52, align 8
  %56 = call i64 %fn_phi(ptr %retparam, ptr %55, ptr %lo, i64 %hi), !dbg !624
  %not_err53 = icmp eq i64 %56, 0, !dbg !624
  %57 = call i1 @llvm.expect.i1(i1 %not_err53, i1 true), !dbg !624
  br i1 %57, label %after_check55, label %assign_optional54, !dbg !624

assign_optional54:                                ; preds = %match
  store i64 %56, ptr %reterr49, align 8, !dbg !624
  br label %err_retblock, !dbg !624

after_check55:                                    ; preds = %match
  %58 = load i64, ptr %retparam, align 8, !dbg !624
  store i64 %58, ptr %0, align 8, !dbg !624
  ret i64 0, !dbg !624

err_retblock:                                     ; preds = %assign_optional54
  %59 = load i64, ptr %reterr49, align 8, !dbg !624
  ret i64 %59, !dbg !624

if.exit56:                                        ; preds = %noerr_block
  %60 = load %"char[]", ptr %bytes, align 8, !dbg !627
  %61 = extractvalue %"char[]" %60, 0, !dbg !627
  %62 = extractvalue %"char[]" %60, 1, !dbg !628
  %gt57 = icmp ugt i64 0, %62, !dbg !628
  %63 = call i1 @llvm.expect.i1(i1 %gt57, i1 false), !dbg !628
  br i1 %63, label %panic58, label %checkok65, !dbg !628

checkok65:                                        ; preds = %if.exit56
  %size66 = sub i64 %62, 0, !dbg !627
  %64 = insertvalue %"char[]" undef, ptr %61, 0, !dbg !627
  %65 = insertvalue %"char[]" %64, i64 %size66, 1, !dbg !627
  %66 = load ptr, ptr %self, align 8, !dbg !629
  %ptradd67 = getelementptr inbounds i8, ptr %66, i64 16, !dbg !629
  %67 = load %"char[]", ptr %ptradd67, align 8, !dbg !629
  %68 = extractvalue %"char[]" %67, 0, !dbg !629
  %69 = extractvalue %"char[]" %67, 1, !dbg !630
  %gt68 = icmp ugt i64 0, %69, !dbg !630
  %70 = call i1 @llvm.expect.i1(i1 %gt68, i1 false), !dbg !630
  br i1 %70, label %panic69, label %checkok76, !dbg !630

checkok76:                                        ; preds = %checkok65
  %ptradd77 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !631
  %71 = load i64, ptr %ptradd77, align 8, !dbg !631
  %add78 = add i64 0, %71, !dbg !631
  %lt79 = icmp ult i64 %69, %add78, !dbg !631
  %sub80 = sub i64 %add78, 1, !dbg !631
  %72 = call i1 @llvm.expect.i1(i1 %lt79, i1 false), !dbg !631
  br i1 %72, label %panic81, label %checkok88, !dbg !631

checkok88:                                        ; preds = %checkok76
  %size89 = sub i64 %add78, 0, !dbg !629
  %73 = insertvalue %"char[]" undef, ptr %68, 0, !dbg !629
  %74 = insertvalue %"char[]" %73, i64 %size89, 1, !dbg !629
  %75 = extractvalue %"char[]" %74, 0, !dbg !629
  %76 = extractvalue %"char[]" %65, 0, !dbg !629
  %77 = extractvalue %"char[]" %65, 1, !dbg !629
  %78 = extractvalue %"char[]" %74, 1, !dbg !629
  %neq90 = icmp ne i64 %78, %77, !dbg !629
  %79 = call i1 @llvm.expect.i1(i1 %neq90, i1 false), !dbg !629
  br i1 %79, label %panic91, label %checkok98, !dbg !629

checkok98:                                        ; preds = %checkok88
  %80 = mul i64 %77, 1, !dbg !629
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %75, ptr align 1 %76, i64 %80, i1 false), !dbg !629
  %81 = load ptr, ptr %self, align 8, !dbg !632
  %ptradd99 = getelementptr inbounds i8, ptr %81, i64 32, !dbg !632
  %ptradd100 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !633
  %82 = load i64, ptr %ptradd100, align 8, !dbg !633
  store i64 %82, ptr %ptradd99, align 8, !dbg !633
  %ptradd102 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !634
  %83 = load i64, ptr %ptradd102, align 8, !dbg !634
  store i64 %83, ptr %0, align 8, !dbg !634
  ret i64 0, !dbg !634

panic:                                            ; preds = %entry
  %84 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !603
  call void %84(ptr @.panic_msg, i64 62, ptr @.file.69, i64 9, ptr @.func.80, i64 5, i32 99) #5, !dbg !603
  unreachable, !dbg !603

panic5:                                           ; preds = %if.then
  store i64 %14, ptr %taddr, align 8
  %85 = insertvalue %any undef, ptr %taddr, 0
  %86 = insertvalue %any %85, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr6, align 8
  %87 = insertvalue %any undef, ptr %taddr6, 0
  %88 = insertvalue %any %87, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %86, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %88, ptr %ptradd7, align 16
  %89 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %89, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.69, i64 9, ptr @.func.80, i64 5, i32 105, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !612
  unreachable, !dbg !612

panic12:                                          ; preds = %checkok8
  store i64 %23, ptr %taddr13, align 8
  %90 = insertvalue %any undef, ptr %taddr13, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr14, align 8
  %92 = insertvalue %any undef, ptr %taddr14, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %91, ptr %varargslots15, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots15, i64 16
  store %any %93, ptr %ptradd16, align 16
  %94 = insertvalue %"any[]" undef, ptr %varargslots15, 0
  %"$$temp17" = insertvalue %"any[]" %94, i64 2, 1
  store %"any[]" %"$$temp17", ptr %indirectarg18, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.69, i64 9, ptr @.func.80, i64 5, i32 105, ptr byval(%"any[]") align 8 %indirectarg18) #5, !dbg !615
  unreachable, !dbg !615

panic23:                                          ; preds = %checkok19
  store i64 %sub22, ptr %taddr24, align 8
  %95 = insertvalue %any undef, ptr %taddr24, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr25, align 8
  %97 = insertvalue %any undef, ptr %taddr25, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %96, ptr %varargslots26, align 16
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %98, ptr %ptradd27, align 16
  %99 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp28", ptr %indirectarg29, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 60, ptr @.file.69, i64 9, ptr @.func.80, i64 5, i32 105, ptr byval(%"any[]") align 8 %indirectarg29) #5, !dbg !615
  unreachable, !dbg !615

panic33:                                          ; preds = %checkok30
  store i64 %32, ptr %taddr34, align 8
  %100 = insertvalue %any undef, ptr %taddr34, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %31, ptr %taddr35, align 8
  %102 = insertvalue %any undef, ptr %taddr35, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %101, ptr %varargslots36, align 16
  %ptradd37 = getelementptr inbounds i8, ptr %varargslots36, i64 16
  store %any %103, ptr %ptradd37, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots36, 0
  %"$$temp38" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp38", ptr %indirectarg39, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.76, i64 38, ptr @.file.69, i64 9, ptr @.func.80, i64 5, i32 105, ptr byval(%"any[]") align 8 %indirectarg39) #5, !dbg !615
  unreachable, !dbg !615

panic58:                                          ; preds = %if.exit56
  store i64 %62, ptr %taddr59, align 8
  %105 = insertvalue %any undef, ptr %taddr59, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr60, align 8
  %107 = insertvalue %any undef, ptr %taddr60, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %106, ptr %varargslots61, align 16
  %ptradd62 = getelementptr inbounds i8, ptr %varargslots61, i64 16
  store %any %108, ptr %ptradd62, align 16
  %109 = insertvalue %"any[]" undef, ptr %varargslots61, 0
  %"$$temp63" = insertvalue %"any[]" %109, i64 2, 1
  store %"any[]" %"$$temp63", ptr %indirectarg64, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.69, i64 9, ptr @.func.80, i64 5, i32 116, ptr byval(%"any[]") align 8 %indirectarg64) #5, !dbg !627
  unreachable, !dbg !627

panic69:                                          ; preds = %checkok65
  store i64 %69, ptr %taddr70, align 8
  %110 = insertvalue %any undef, ptr %taddr70, 0
  %111 = insertvalue %any %110, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr71, align 8
  %112 = insertvalue %any undef, ptr %taddr71, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %111, ptr %varargslots72, align 16
  %ptradd73 = getelementptr inbounds i8, ptr %varargslots72, i64 16
  store %any %113, ptr %ptradd73, align 16
  %114 = insertvalue %"any[]" undef, ptr %varargslots72, 0
  %"$$temp74" = insertvalue %"any[]" %114, i64 2, 1
  store %"any[]" %"$$temp74", ptr %indirectarg75, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.69, i64 9, ptr @.func.80, i64 5, i32 116, ptr byval(%"any[]") align 8 %indirectarg75) #5, !dbg !629
  unreachable, !dbg !629

panic81:                                          ; preds = %checkok76
  store i64 %sub80, ptr %taddr82, align 8
  %115 = insertvalue %any undef, ptr %taddr82, 0
  %116 = insertvalue %any %115, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %69, ptr %taddr83, align 8
  %117 = insertvalue %any undef, ptr %taddr83, 0
  %118 = insertvalue %any %117, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %116, ptr %varargslots84, align 16
  %ptradd85 = getelementptr inbounds i8, ptr %varargslots84, i64 16
  store %any %118, ptr %ptradd85, align 16
  %119 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp86" = insertvalue %"any[]" %119, i64 2, 1
  store %"any[]" %"$$temp86", ptr %indirectarg87, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 60, ptr @.file.69, i64 9, ptr @.func.80, i64 5, i32 116, ptr byval(%"any[]") align 8 %indirectarg87) #5, !dbg !629
  unreachable, !dbg !629

panic91:                                          ; preds = %checkok88
  store i64 %78, ptr %taddr92, align 8
  %120 = insertvalue %any undef, ptr %taddr92, 0
  %121 = insertvalue %any %120, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %77, ptr %taddr93, align 8
  %122 = insertvalue %any undef, ptr %taddr93, 0
  %123 = insertvalue %any %122, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %121, ptr %varargslots94, align 16
  %ptradd95 = getelementptr inbounds i8, ptr %varargslots94, i64 16
  store %any %123, ptr %ptradd95, align 16
  %124 = insertvalue %"any[]" undef, ptr %varargslots94, 0
  %"$$temp96" = insertvalue %"any[]" %124, i64 2, 1
  store %"any[]" %"$$temp96", ptr %indirectarg97, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.76, i64 38, ptr @.file.69, i64 9, ptr @.func.80, i64 5, i32 116, ptr byval(%"any[]") align 8 %indirectarg97) #5, !dbg !629
  unreachable, !dbg !629
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.WriteBuffer.write_byte(ptr %0, i8 zeroext %1) #0 comdat !dbg !635 {
entry:
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %n = alloca i64, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !638
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !638
  br i1 %3, label %panic, label %checkok, !dbg !638

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !639, !DIExpression(), !640)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !641, !DIExpression(), !642)
    #dbg_declare(ptr %n, !643, !DIExpression(), !644)
  %4 = load ptr, ptr %self, align 8, !dbg !645
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !645
  %ptradd1 = getelementptr inbounds i8, ptr %ptradd, i64 8, !dbg !645
  %5 = load i64, ptr %ptradd1, align 8, !dbg !645
  %6 = load ptr, ptr %self, align 8, !dbg !646
  %ptradd2 = getelementptr inbounds i8, ptr %6, i64 32, !dbg !646
  %7 = load i64, ptr %ptradd2, align 8, !dbg !646
  %sub = sub i64 %5, %7, !dbg !645
  store i64 %sub, ptr %n, align 8, !dbg !645
  %8 = load i64, ptr %n, align 8, !dbg !647
  %eq = icmp eq i64 0, %8, !dbg !647
  br i1 %eq, label %if.then, label %if.exit, !dbg !647

if.then:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !648
  %10 = call i64 @std.io.WriteBuffer.write_pending(ptr %9), !dbg !648
  %not_err = icmp eq i64 %10, 0, !dbg !648
  %11 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !648
  br i1 %11, label %after_check, label %assign_optional, !dbg !648

assign_optional:                                  ; preds = %if.then
  store i64 %10, ptr %error_var, align 8, !dbg !648
  br label %guard_block, !dbg !648

after_check:                                      ; preds = %if.then
  br label %noerr_block, !dbg !648

guard_block:                                      ; preds = %assign_optional
  %12 = load i64, ptr %error_var, align 8, !dbg !648
  ret i64 %12, !dbg !648

noerr_block:                                      ; preds = %after_check
  br label %if.exit, !dbg !648

if.exit:                                          ; preds = %noerr_block, %checkok
  %13 = load ptr, ptr %self, align 8, !dbg !650
  %ptradd3 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !650
  %ptradd4 = getelementptr inbounds i8, ptr %ptradd3, i64 8, !dbg !650
  %14 = load i64, ptr %ptradd4, align 8, !dbg !650
  %15 = load ptr, ptr %ptradd3, align 8, !dbg !650
  %16 = load ptr, ptr %self, align 8, !dbg !651
  %ptradd5 = getelementptr inbounds i8, ptr %16, i64 32, !dbg !651
  %17 = load i64, ptr %ptradd5, align 8, !dbg !651
  %ge = icmp uge i64 %17, %14, !dbg !651
  %18 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !651
  br i1 %18, label %panic6, label %checkok9, !dbg !651

checkok9:                                         ; preds = %if.exit
  %ptradd10 = getelementptr inbounds i8, ptr %15, i64 %17, !dbg !651
  %19 = load i8, ptr %c, align 1, !dbg !652
  store i8 %19, ptr %ptradd10, align 1, !dbg !652
  %20 = load ptr, ptr %self, align 8, !dbg !653
  %ptradd11 = getelementptr inbounds i8, ptr %20, i64 32, !dbg !653
  %21 = load i64, ptr %ptradd11, align 8, !dbg !653
  %add = add i64 %21, 1, !dbg !653
  store i64 %add, ptr %ptradd11, align 8, !dbg !653
  ret i64 0, !dbg !653

panic:                                            ; preds = %entry
  %22 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !640
  call void %22(ptr @.panic_msg, i64 62, ptr @.file.69, i64 9, ptr @.func.81, i64 10, i32 121) #5, !dbg !640
  unreachable, !dbg !640

panic6:                                           ; preds = %if.exit
  store i64 %14, ptr %taddr, align 8
  %23 = insertvalue %any undef, ptr %taddr, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %17, ptr %taddr7, align 8
  %25 = insertvalue %any undef, ptr %taddr7, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %24, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %26, ptr %ptradd8, align 16
  %27 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %27, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.69, i64 9, ptr @.func.81, i64 10, i32 128, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !651
  unreachable, !dbg !651
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.WriteBuffer.write_pending(ptr %0) #0 !dbg !654 {
entry:
  %self = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr8 = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %varargslots10 = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !655
  %1 = icmp eq ptr %0, null, !dbg !655
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !655
  br i1 %2, label %panic, label %checkok, !dbg !655

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !656, !DIExpression(), !657)
  %3 = load ptr, ptr %self, align 8, !dbg !658
  %ptradd = getelementptr inbounds i8, ptr %3, i64 32, !dbg !658
  %4 = load i64, ptr %ptradd, align 8, !dbg !658
  %5 = load ptr, ptr %self, align 8, !dbg !659
  %6 = load ptr, ptr %self, align 8, !dbg !660
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !660
  %7 = load %"char[]", ptr %ptradd1, align 8, !dbg !660
  %8 = extractvalue %"char[]" %7, 0, !dbg !660
  %9 = extractvalue %"char[]" %7, 1, !dbg !661
  %gt = icmp ugt i64 0, %9, !dbg !661
  %10 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !661
  br i1 %10, label %panic2, label %checkok5, !dbg !661

checkok5:                                         ; preds = %checkok
  %11 = load ptr, ptr %self, align 8, !dbg !662
  %ptradd6 = getelementptr inbounds i8, ptr %11, i64 32, !dbg !662
  %12 = load i64, ptr %ptradd6, align 8, !dbg !662
  %add = add i64 0, %12, !dbg !662
  %lt = icmp ult i64 %9, %add, !dbg !662
  %sub = sub i64 %add, 1, !dbg !662
  %13 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !662
  br i1 %13, label %panic7, label %checkok14, !dbg !662

checkok14:                                        ; preds = %checkok5
  %size = sub i64 %add, 0, !dbg !660
  %14 = insertvalue %"char[]" undef, ptr %8, 0, !dbg !660
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !660
  %ptradd15 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !660
  %16 = load i64, ptr %ptradd15, align 8, !dbg !660
  %17 = inttoptr i64 %16 to ptr, !dbg !660
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !655
  %18 = icmp eq ptr %17, %type, !dbg !655
  br i1 %18, label %cache_hit, label %cache_miss, !dbg !655

cache_miss:                                       ; preds = %checkok14
  %ptradd16 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !655
  %19 = load ptr, ptr %ptradd16, align 8, !dbg !655
  %20 = call ptr @.dyn_search(ptr %19, ptr @"$sel.write"), !dbg !655
  store ptr %20, ptr %.inlinecache, align 8, !dbg !655
  store ptr %17, ptr %.cachedtype, align 8, !dbg !655
  br label %21, !dbg !655

cache_hit:                                        ; preds = %checkok14
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !655
  br label %21, !dbg !655

21:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %20, %cache_miss ], !dbg !655
  %22 = icmp eq ptr %fn_phi, null, !dbg !655
  br i1 %22, label %missing_function, label %match, !dbg !655

missing_function:                                 ; preds = %21
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !659
  call void %23(ptr @.panic_msg.52, i64 42, ptr @.file.69, i64 9, ptr @.func.82, i64 13, i32 134) #5, !dbg !659
  unreachable, !dbg !659

match:                                            ; preds = %21
  %24 = load ptr, ptr %5, align 8
  %25 = call i64 %fn_phi(ptr %retparam, ptr %24, ptr %8, i64 %size), !dbg !659
  %not_err = icmp eq i64 %25, 0, !dbg !659
  %26 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !659
  br i1 %26, label %after_check, label %assign_optional, !dbg !659

assign_optional:                                  ; preds = %match
  store i64 %25, ptr %error_var, align 8, !dbg !659
  br label %guard_block, !dbg !659

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !659

guard_block:                                      ; preds = %assign_optional
  %27 = load i64, ptr %error_var, align 8, !dbg !659
  ret i64 %27, !dbg !659

noerr_block:                                      ; preds = %after_check
  %28 = load i64, ptr %retparam, align 8, !dbg !659
  %sub17 = sub i64 %4, %28, !dbg !658
  store i64 %sub17, ptr %ptradd, align 8, !dbg !658
  %29 = load ptr, ptr %self, align 8, !dbg !663
  %ptradd18 = getelementptr inbounds i8, ptr %29, i64 32, !dbg !663
  %30 = load i64, ptr %ptradd18, align 8, !dbg !663
  %neq = icmp ne i64 0, %30, !dbg !663
  br i1 %neq, label %if.then, label %if.exit, !dbg !663

if.then:                                          ; preds = %noerr_block
  ret i64 ptrtoint (ptr @"std.io.IoError$INCOMPLETE_WRITE" to i64), !dbg !664

if.exit:                                          ; preds = %noerr_block
  ret i64 0, !dbg !664

panic:                                            ; preds = %entry
  %31 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !657
  call void %31(ptr @.panic_msg, i64 62, ptr @.file.69, i64 9, ptr @.func.82, i64 13, i32 132) #5, !dbg !657
  unreachable, !dbg !657

panic2:                                           ; preds = %checkok
  store i64 %9, ptr %taddr, align 8
  %32 = insertvalue %any undef, ptr %taddr, 0
  %33 = insertvalue %any %32, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr3, align 8
  %34 = insertvalue %any undef, ptr %taddr3, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %33, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %35, ptr %ptradd4, align 16
  %36 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %36, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.69, i64 9, ptr @.func.82, i64 13, i32 134, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !660
  unreachable, !dbg !660

panic7:                                           ; preds = %checkok5
  store i64 %sub, ptr %taddr8, align 8
  %37 = insertvalue %any undef, ptr %taddr8, 0
  %38 = insertvalue %any %37, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr9, align 8
  %39 = insertvalue %any undef, ptr %taddr9, 0
  %40 = insertvalue %any %39, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %38, ptr %varargslots10, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots10, i64 16
  store %any %40, ptr %ptradd11, align 16
  %41 = insertvalue %"any[]" undef, ptr %varargslots10, 0
  %"$$temp12" = insertvalue %"any[]" %41, i64 2, 1
  store %"any[]" %"$$temp12", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 60, ptr @.file.69, i64 9, ptr @.func.82, i64 13, i32 134, ptr byval(%"any[]") align 8 %indirectarg13) #5, !dbg !660
  unreachable, !dbg !660
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.ByteWriter.new_init(ptr %0, i64 %1, ptr %2) #0 comdat !dbg !665 {
entry:
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.assign_list = alloca %ByteWriter, align 8
  %3 = icmp eq ptr %0, null, !dbg !679
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !679
  br i1 %4, label %panic, label %checkok, !dbg !679

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !680, !DIExpression(), !681)
  store i64 %1, ptr %allocator, align 8
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %allocator, !682, !DIExpression(), !683)
  %5 = load ptr, ptr %self, align 8, !dbg !684
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !684
  %6 = load i64, ptr %ptradd1, align 8, !dbg !684
  %eq = icmp eq i64 0, %6, !dbg !684
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !684

assert_fail:                                      ; preds = %checkok
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !684
  call void %7(ptr @.panic_msg.71, i64 88, ptr @.file.83, i64 13, ptr @.func.84, i64 8, i32 14) #5, !dbg !684
  unreachable, !dbg !684

assert_ok:                                        ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !686
  %checknull = icmp eq ptr %8, null, !dbg !686
  %9 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !686
  br i1 %9, label %panic2, label %checkok3, !dbg !686

checkok3:                                         ; preds = %assert_ok
  %10 = ptrtoint ptr %8 to i64, !dbg !686
  %11 = urem i64 %10, 8, !dbg !686
  %12 = icmp ne i64 %11, 0, !dbg !686
  %13 = call i1 @llvm.expect.i1(i1 %12, i1 false), !dbg !686
  br i1 %13, label %panic4, label %checkok7, !dbg !686

checkok7:                                         ; preds = %checkok3
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 40, i1 false)
  store %"char[]" zeroinitializer, ptr %.assign_list, align 8, !dbg !687
  %ptradd8 = getelementptr inbounds i8, ptr %.assign_list, i64 24, !dbg !687
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd8, ptr align 8 %allocator, i32 16, i1 false), !dbg !688
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %8, ptr align 8 %.assign_list, i32 40, i1 false), !dbg !688
  %14 = load ptr, ptr %self, align 8, !dbg !689
  %15 = load ptr, ptr %allocator, align 8, !dbg !690
  %i2b = icmp ne ptr %15, null, !dbg !690
  br i1 %i2b, label %assert_ok10, label %assert_fail9, !dbg !690

assert_fail9:                                     ; preds = %checkok7
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !690
  call void %16(ptr @.panic_msg.85, i64 52, ptr @.file.83, i64 13, ptr @.func.84, i64 8, i32 15) #5, !dbg !690
  unreachable, !dbg !690

assert_ok10:                                      ; preds = %checkok7
  %17 = load ptr, ptr %self, align 8, !dbg !691
  %ptradd11 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !691
  %18 = load i64, ptr %ptradd11, align 8, !dbg !691
  %eq12 = icmp eq i64 0, %18, !dbg !691
  br i1 %eq12, label %assert_ok14, label %assert_fail13, !dbg !691

assert_fail13:                                    ; preds = %assert_ok10
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !691
  call void %19(ptr @.panic_msg.85, i64 52, ptr @.file.83, i64 13, ptr @.func.84, i64 8, i32 15) #5, !dbg !691
  unreachable, !dbg !691

assert_ok14:                                      ; preds = %assert_ok10
  ret ptr %14, !dbg !691

panic:                                            ; preds = %entry
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !681
  call void %20(ptr @.panic_msg, i64 62, ptr @.file.83, i64 13, ptr @.func.84, i64 8, i32 17) #5, !dbg !681
  unreachable, !dbg !681

panic2:                                           ; preds = %assert_ok
  %21 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !686
  call void %21(ptr @.panic_msg.36, i64 45, ptr @.file.83, i64 13, ptr @.func.84, i64 8, i32 19) #5, !dbg !686
  unreachable, !dbg !686

panic4:                                           ; preds = %checkok3
  store i64 8, ptr %taddr, align 8
  %22 = insertvalue %any undef, ptr %taddr, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %11, ptr %taddr5, align 8
  %24 = insertvalue %any undef, ptr %taddr5, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %23, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %25, ptr %ptradd6, align 16
  %26 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %26, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.83, i64 13, ptr @.func.84, i64 8, i32 19, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !686
  unreachable, !dbg !686
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.ByteWriter.temp_init(ptr %0) #0 comdat !dbg !692 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca %any, align 8
  %1 = icmp eq ptr %0, null, !dbg !695
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !695
  br i1 %2, label %panic, label %checkok, !dbg !695

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !696, !DIExpression(), !697)
  %3 = load ptr, ptr %self, align 8, !dbg !698
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !698
  %4 = load i64, ptr %ptradd, align 8, !dbg !698
  %eq = icmp eq i64 0, %4, !dbg !698
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !698

assert_fail:                                      ; preds = %checkok
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !698
  call void %5(ptr @.panic_msg.71, i64 88, ptr @.file.83, i64 13, ptr @.func.86, i64 9, i32 25) #5, !dbg !698
  unreachable, !dbg !698

assert_ok:                                        ; preds = %checkok
  %6 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !700
  %i2nb = icmp eq ptr %6, null, !dbg !700
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !700

if.then:                                          ; preds = %assert_ok
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !704
  br label %if.exit, !dbg !704

if.exit:                                          ; preds = %if.then, %assert_ok
  %7 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !706
  %8 = insertvalue %any undef, ptr %7, 0, !dbg !703
  %9 = insertvalue %any %8, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !703
  %10 = load ptr, ptr %self, align 8, !dbg !703
  store %any %9, ptr %taddr, align 8
  %lo = load i64, ptr %taddr, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi = load ptr, ptr %ptradd1, align 8
  %11 = call ptr @std.io.ByteWriter.new_init(ptr %10, i64 %lo, ptr %hi) #6, !dbg !707
  %12 = load ptr, ptr %self, align 8, !dbg !708
  %ptradd2 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !708
  %13 = load i64, ptr %ptradd2, align 8, !dbg !708
  %eq3 = icmp eq i64 0, %13, !dbg !708
  br i1 %eq3, label %assert_ok5, label %assert_fail4, !dbg !708

assert_fail4:                                     ; preds = %if.exit
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !708
  call void %14(ptr @.panic_msg.87, i64 35, ptr @.file.83, i64 13, ptr @.func.86, i64 9, i32 26) #5, !dbg !708
  unreachable, !dbg !708

assert_ok5:                                       ; preds = %if.exit
  ret ptr %11, !dbg !708

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !697
  call void %15(ptr @.panic_msg, i64 62, ptr @.file.83, i64 13, ptr @.func.86, i64 9, i32 28) #5, !dbg !697
  unreachable, !dbg !697
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.ByteWriter.init_with_buffer(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !709 {
entry:
  %self = alloca ptr, align 8
  %data = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.assign_list = alloca %ByteWriter, align 8
  %3 = icmp eq ptr %0, null, !dbg !712
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !712
  br i1 %4, label %panic, label %checkok, !dbg !712

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !713, !DIExpression(), !714)
  store ptr %1, ptr %data, align 8
  %ptradd = getelementptr inbounds i8, ptr %data, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %data, !715, !DIExpression(), !716)
  %5 = load ptr, ptr %self, align 8, !dbg !717
  %checknull = icmp eq ptr %5, null, !dbg !717
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !717
  br i1 %6, label %panic1, label %checkok2, !dbg !717

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !717
  %8 = urem i64 %7, 8, !dbg !717
  %9 = icmp ne i64 %8, 0, !dbg !717
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !717
  br i1 %10, label %panic3, label %checkok6, !dbg !717

checkok6:                                         ; preds = %checkok2
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 40, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %data, i32 16, i1 false), !dbg !718
  %ptradd7 = getelementptr inbounds i8, ptr %.assign_list, i64 24, !dbg !718
  store %any { ptr null, i64 ptrtoint (ptr @"$ct.void" to i64) }, ptr %ptradd7, align 8, !dbg !719
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 8 %.assign_list, i32 40, i1 false), !dbg !719
  %11 = load ptr, ptr %self, align 8, !dbg !720
  ret ptr %11, !dbg !720

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !714
  call void %12(ptr @.panic_msg, i64 62, ptr @.file.83, i64 13, ptr @.func.88, i64 16, i32 33) #5, !dbg !714
  unreachable, !dbg !714

panic1:                                           ; preds = %checkok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !717
  call void %13(ptr @.panic_msg.36, i64 45, ptr @.file.83, i64 13, ptr @.func.88, i64 16, i32 35) #5, !dbg !717
  unreachable, !dbg !717

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %14 = insertvalue %any undef, ptr %taddr, 0
  %15 = insertvalue %any %14, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %16 = insertvalue %any undef, ptr %taddr4, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %15, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %17, ptr %ptradd5, align 16
  %18 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %18, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.83, i64 13, ptr @.func.88, i64 16, i32 35, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !717
  unreachable, !dbg !717
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteWriter.destroy(ptr %0) #0 comdat !dbg !721 {
entry:
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr3 = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !724
  %1 = icmp eq ptr %0, null, !dbg !724
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !724
  br i1 %2, label %panic, label %checkok, !dbg !724

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !725, !DIExpression(), !726)
  %3 = load ptr, ptr %self, align 8, !dbg !727
  %ptradd = getelementptr inbounds i8, ptr %3, i64 24, !dbg !727
  %4 = load ptr, ptr %ptradd, align 8, !dbg !727
  %i2nb = icmp eq ptr %4, null, !dbg !727
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !727

if.then:                                          ; preds = %checkok
  ret i64 0

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %ptr, !728, !DIExpression(), !729)
  %5 = load ptr, ptr %self, align 8, !dbg !730
  %6 = load ptr, ptr %5, align 8, !dbg !730
  store ptr %6, ptr %ptr, align 8, !dbg !730
  %i2b = icmp ne ptr %6, null, !dbg !730
  br i1 %i2b, label %if.then1, label %if.exit9, !dbg !730

if.then1:                                         ; preds = %if.exit
  %7 = load ptr, ptr %self, align 8, !dbg !731
  %ptradd2 = getelementptr inbounds i8, ptr %7, i64 24, !dbg !731
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %ptradd2, i32 16, i1 false)
  %8 = load ptr, ptr %ptr, align 8
  store ptr %8, ptr %ptr3, align 8
  %9 = load ptr, ptr %ptr3, align 8, !dbg !732
  %i2nb4 = icmp eq ptr %9, null, !dbg !732
  br i1 %i2nb4, label %if.then5, label %if.exit6, !dbg !732

if.then5:                                         ; preds = %if.then1
  br label %expr_block.exit, !dbg !735

if.exit6:                                         ; preds = %if.then1
  %ptradd7 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !736
  %10 = load i64, ptr %ptradd7, align 8, !dbg !736
  %11 = inttoptr i64 %10 to ptr, !dbg !736
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !724
  %12 = icmp eq ptr %11, %type, !dbg !724
  br i1 %12, label %cache_hit, label %cache_miss, !dbg !724

cache_miss:                                       ; preds = %if.exit6
  %ptradd8 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !724
  %13 = load ptr, ptr %ptradd8, align 8, !dbg !724
  %14 = call ptr @.dyn_search(ptr %13, ptr @"$sel.release"), !dbg !724
  store ptr %14, ptr %.inlinecache, align 8, !dbg !724
  store ptr %11, ptr %.cachedtype, align 8, !dbg !724
  br label %15, !dbg !724

cache_hit:                                        ; preds = %if.exit6
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !724
  br label %15, !dbg !724

15:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %14, %cache_miss ], !dbg !724
  %16 = icmp eq ptr %fn_phi, null, !dbg !724
  br i1 %16, label %missing_function, label %match, !dbg !724

missing_function:                                 ; preds = %15
  %17 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !737
  call void %17(ptr @.panic_msg.90, i64 44, ptr @.file.91, i64 16, ptr @.func.89, i64 7, i32 105) #5, !dbg !737
  unreachable, !dbg !737

match:                                            ; preds = %15
  %18 = load ptr, ptr %allocator, align 8, !dbg !737
  %19 = load ptr, ptr %ptr3, align 8, !dbg !737
  call void %fn_phi(ptr %18, ptr %19, i8 zeroext 0), !dbg !737
  br label %expr_block.exit, !dbg !737

expr_block.exit:                                  ; preds = %match, %if.then5
  br label %if.exit9, !dbg !737

if.exit9:                                         ; preds = %expr_block.exit, %if.exit
  %20 = load ptr, ptr %self, align 8, !dbg !738
  %checknull = icmp eq ptr %20, null, !dbg !738
  %21 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !738
  br i1 %21, label %panic10, label %checkok11, !dbg !738

checkok11:                                        ; preds = %if.exit9
  %22 = ptrtoint ptr %20 to i64, !dbg !738
  %23 = urem i64 %22, 8, !dbg !738
  %24 = icmp ne i64 %23, 0, !dbg !738
  %25 = call i1 @llvm.expect.i1(i1 %24, i1 false), !dbg !738
  br i1 %25, label %panic12, label %checkok15, !dbg !738

checkok15:                                        ; preds = %checkok11
  call void @llvm.memset.p0.i64(ptr align 8 %20, i8 0, i64 40, i1 false), !dbg !738
  ret i64 0, !dbg !738

panic:                                            ; preds = %entry
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !726
  call void %26(ptr @.panic_msg, i64 62, ptr @.file.83, i64 13, ptr @.func.89, i64 7, i32 39) #5, !dbg !726
  unreachable, !dbg !726

panic10:                                          ; preds = %if.exit9
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !738
  call void %27(ptr @.panic_msg.36, i64 45, ptr @.file.83, i64 13, ptr @.func.89, i64 7, i32 43) #5, !dbg !738
  unreachable, !dbg !738

panic12:                                          ; preds = %checkok11
  store i64 8, ptr %taddr, align 8
  %28 = insertvalue %any undef, ptr %taddr, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr13, align 8
  %30 = insertvalue %any undef, ptr %taddr13, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %29, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %31, ptr %ptradd14, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.83, i64 13, ptr @.func.89, i64 7, i32 43, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !738
  unreachable, !dbg !738
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.io.ByteWriter.str_view(ptr %0) #0 comdat !dbg !739 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots8 = alloca [2 x %any], align 16
  %indirectarg11 = alloca %"any[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !742
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !742
  br i1 %2, label %panic, label %checkok, !dbg !742

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !743, !DIExpression(), !744)
  %3 = load ptr, ptr %self, align 8, !dbg !745
  %4 = load %"char[]", ptr %3, align 8, !dbg !745
  %5 = extractvalue %"char[]" %4, 0, !dbg !745
  %6 = extractvalue %"char[]" %4, 1, !dbg !746
  %gt = icmp ugt i64 0, %6, !dbg !746
  %7 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !746
  br i1 %7, label %panic1, label %checkok3, !dbg !746

checkok3:                                         ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !747
  %ptradd4 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !747
  %9 = load i64, ptr %ptradd4, align 8, !dbg !747
  %add = add i64 0, %9, !dbg !747
  %lt = icmp ult i64 %6, %add, !dbg !747
  %sub = sub i64 %add, 1, !dbg !747
  %10 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !747
  br i1 %10, label %panic5, label %checkok12, !dbg !747

checkok12:                                        ; preds = %checkok3
  %size = sub i64 %add, 0, !dbg !748
  %11 = insertvalue %"char[]" undef, ptr %5, 0, !dbg !748
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !748
  store %"char[]" %12, ptr %taddr13, align 8
  %13 = load { ptr, i64 }, ptr %taddr13, align 8
  ret { ptr, i64 } %13

panic:                                            ; preds = %entry
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !744
  call void %14(ptr @.panic_msg, i64 62, ptr @.file.83, i64 13, ptr @.func.72, i64 8, i32 46) #5, !dbg !744
  unreachable, !dbg !744

panic1:                                           ; preds = %checkok
  store i64 %6, ptr %taddr, align 8
  %15 = insertvalue %any undef, ptr %taddr, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr2, align 8
  %17 = insertvalue %any undef, ptr %taddr2, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %16, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %18, ptr %ptradd, align 16
  %19 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %19, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.83, i64 13, ptr @.func.72, i64 8, i32 48, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !748
  unreachable, !dbg !748

panic5:                                           ; preds = %checkok3
  store i64 %sub, ptr %taddr6, align 8
  %20 = insertvalue %any undef, ptr %taddr6, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr7, align 8
  %22 = insertvalue %any undef, ptr %taddr7, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %21, ptr %varargslots8, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots8, i64 16
  store %any %23, ptr %ptradd9, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots8, 0
  %"$$temp10" = insertvalue %"any[]" %24, i64 2, 1
  store %"any[]" %"$$temp10", ptr %indirectarg11, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 60, ptr @.file.83, i64 13, ptr @.func.72, i64 8, i32 48, ptr byval(%"any[]") align 8 %indirectarg11) #5, !dbg !748
  unreachable, !dbg !748
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteWriter.ensure_capacity(ptr %0, i64 %1) #0 comdat !dbg !749 {
entry:
  %self = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr = alloca i64, align 8
  %new_capacity = alloca i64, align 8
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %new_ptr = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %new_size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %allocator10 = alloca %any, align 8
  %ptr11 = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %.inlinecache21 = alloca ptr, align 8
  %.cachedtype22 = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %.inlinecache33 = alloca ptr, align 8
  %.cachedtype34 = alloca ptr, align 8
  %retparam43 = alloca ptr, align 8
  store ptr null, ptr %.cachedtype34, align 8, !dbg !752
  store ptr null, ptr %.cachedtype22, align 8, !dbg !752
  store ptr null, ptr %.cachedtype, align 8, !dbg !752
  %2 = icmp eq ptr %0, null, !dbg !752
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !752
  br i1 %3, label %panic, label %checkok, !dbg !752

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !753, !DIExpression(), !754)
  store i64 %1, ptr %len, align 8
    #dbg_declare(ptr %len, !755, !DIExpression(), !756)
  %4 = load ptr, ptr %self, align 8, !dbg !757
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !757
  %5 = load i64, ptr %ptradd, align 8, !dbg !757
  %6 = load i64, ptr %len, align 8, !dbg !758
  %gt = icmp ugt i64 %5, %6, !dbg !757
  br i1 %gt, label %if.then, label %if.exit, !dbg !757

if.then:                                          ; preds = %checkok
  ret i64 0

if.exit:                                          ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !759
  %ptradd1 = getelementptr inbounds i8, ptr %7, i64 24, !dbg !759
  %8 = load ptr, ptr %ptradd1, align 8, !dbg !759
  %i2nb = icmp eq ptr %8, null, !dbg !759
  br i1 %i2nb, label %if.then2, label %if.exit3, !dbg !759

if.then2:                                         ; preds = %if.exit
  ret i64 ptrtoint (ptr @"std.io.IoError$OUT_OF_SPACE" to i64), !dbg !760

if.exit3:                                         ; preds = %if.exit
  %9 = load i64, ptr %len, align 8, !dbg !761
  %gt4 = icmp ugt i64 16, %9, !dbg !761
  br i1 %gt4, label %if.then5, label %if.exit6, !dbg !761

if.then5:                                         ; preds = %if.exit3
  store i64 16, ptr %len, align 8, !dbg !762
  br label %if.exit6, !dbg !762

if.exit6:                                         ; preds = %if.then5, %if.exit3
    #dbg_declare(ptr %new_capacity, !763, !DIExpression(), !764)
  %10 = load i64, ptr %len, align 8
  store i64 %10, ptr %x, align 8
    #dbg_declare(ptr %y, !765, !DIExpression(), !768)
  store i64 1, ptr %y, align 8, !dbg !770
  br label %loop.cond, !dbg !771

loop.cond:                                        ; preds = %loop.body, %if.exit6
  %11 = load i64, ptr %y, align 8, !dbg !772
  %12 = load i64, ptr %x, align 8, !dbg !774
  %lt = icmp ult i64 %11, %12, !dbg !772
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !772

loop.body:                                        ; preds = %loop.cond
  %13 = load i64, ptr %y, align 8, !dbg !775
  %14 = load i64, ptr %y, align 8, !dbg !776
  %add = add i64 %13, %14, !dbg !775
  store i64 %add, ptr %y, align 8, !dbg !775
  br label %loop.cond, !dbg !775

loop.exit:                                        ; preds = %loop.cond
  %15 = load i64, ptr %y, align 8, !dbg !777
  store i64 %15, ptr %new_capacity, align 8, !dbg !777
    #dbg_declare(ptr %new_ptr, !778, !DIExpression(), !779)
  %16 = load ptr, ptr %self, align 8, !dbg !780
  %ptradd7 = getelementptr inbounds i8, ptr %16, i64 24, !dbg !780
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %ptradd7, i32 16, i1 false)
  %17 = load ptr, ptr %self, align 8, !dbg !781
  %18 = load ptr, ptr %17, align 8, !dbg !781
  store ptr %18, ptr %ptr, align 8
  %19 = load i64, ptr %new_capacity, align 8
  store i64 %19, ptr %new_size, align 8
  %20 = load i64, ptr %new_size, align 8, !dbg !782
  %i2nb8 = icmp eq i64 %20, 0, !dbg !782
  br i1 %i2nb8, label %if.then9, label %if.exit17, !dbg !782

if.then9:                                         ; preds = %loop.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator10, ptr align 8 %allocator, i32 16, i1 false)
  %21 = load ptr, ptr %ptr, align 8
  store ptr %21, ptr %ptr11, align 8
  %22 = load ptr, ptr %ptr11, align 8, !dbg !785
  %i2nb12 = icmp eq ptr %22, null, !dbg !785
  br i1 %i2nb12, label %if.then13, label %if.exit14, !dbg !785

if.then13:                                        ; preds = %if.then9
  br label %expr_block.exit, !dbg !789

if.exit14:                                        ; preds = %if.then9
  %ptradd15 = getelementptr inbounds i8, ptr %allocator10, i64 8, !dbg !790
  %23 = load i64, ptr %ptradd15, align 8, !dbg !790
  %24 = inttoptr i64 %23 to ptr, !dbg !790
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !752
  %25 = icmp eq ptr %24, %type, !dbg !752
  br i1 %25, label %cache_hit, label %cache_miss, !dbg !752

cache_miss:                                       ; preds = %if.exit14
  %ptradd16 = getelementptr inbounds i8, ptr %24, i64 16, !dbg !752
  %26 = load ptr, ptr %ptradd16, align 8, !dbg !752
  %27 = call ptr @.dyn_search(ptr %26, ptr @"$sel.release"), !dbg !752
  store ptr %27, ptr %.inlinecache, align 8, !dbg !752
  store ptr %24, ptr %.cachedtype, align 8, !dbg !752
  br label %28, !dbg !752

cache_hit:                                        ; preds = %if.exit14
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !752
  br label %28, !dbg !752

28:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %27, %cache_miss ], !dbg !752
  %29 = icmp eq ptr %fn_phi, null, !dbg !752
  br i1 %29, label %missing_function, label %match, !dbg !752

missing_function:                                 ; preds = %28
  %30 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !791
  call void %30(ptr @.panic_msg.90, i64 44, ptr @.file.91, i64 16, ptr @.func.92, i64 15, i32 105) #5, !dbg !791
  unreachable, !dbg !791

match:                                            ; preds = %28
  %31 = load ptr, ptr %allocator10, align 8, !dbg !791
  %32 = load ptr, ptr %ptr11, align 8, !dbg !791
  call void %fn_phi(ptr %31, ptr %32, i8 zeroext 0), !dbg !791
  br label %expr_block.exit, !dbg !791

expr_block.exit:                                  ; preds = %match, %if.then13
  store ptr null, ptr %blockret, align 8, !dbg !792
  br label %expr_block.exit47, !dbg !792

if.exit17:                                        ; preds = %loop.exit
  %33 = load ptr, ptr %ptr, align 8, !dbg !793
  %i2nb18 = icmp eq ptr %33, null, !dbg !793
  br i1 %i2nb18, label %if.then19, label %if.exit31, !dbg !793

if.then19:                                        ; preds = %if.exit17
  %ptradd20 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !794
  %34 = load i64, ptr %ptradd20, align 8, !dbg !794
  %35 = inttoptr i64 %34 to ptr, !dbg !794
  %type23 = load ptr, ptr %.cachedtype22, align 8, !dbg !752
  %36 = icmp eq ptr %35, %type23, !dbg !752
  br i1 %36, label %cache_hit26, label %cache_miss24, !dbg !752

cache_miss24:                                     ; preds = %if.then19
  %ptradd25 = getelementptr inbounds i8, ptr %35, i64 16, !dbg !752
  %37 = load ptr, ptr %ptradd25, align 8, !dbg !752
  %38 = call ptr @.dyn_search(ptr %37, ptr @"$sel.acquire"), !dbg !752
  store ptr %38, ptr %.inlinecache21, align 8, !dbg !752
  store ptr %35, ptr %.cachedtype22, align 8, !dbg !752
  br label %39, !dbg !752

cache_hit26:                                      ; preds = %if.then19
  %cache_hit_fn27 = load ptr, ptr %.inlinecache21, align 8, !dbg !752
  br label %39, !dbg !752

39:                                               ; preds = %cache_hit26, %cache_miss24
  %fn_phi28 = phi ptr [ %cache_hit_fn27, %cache_hit26 ], [ %38, %cache_miss24 ], !dbg !752
  %40 = icmp eq ptr %fn_phi28, null, !dbg !752
  br i1 %40, label %missing_function29, label %match30, !dbg !752

missing_function29:                               ; preds = %39
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !796
  call void %41(ptr @.panic_msg.93, i64 44, ptr @.file.91, i64 16, ptr @.func.92, i64 15, i32 95) #5, !dbg !796
  unreachable, !dbg !796

match30:                                          ; preds = %39
  %42 = load ptr, ptr %allocator, align 8
  %43 = load i64, ptr %new_size, align 8
  %44 = call i64 %fn_phi28(ptr %retparam, ptr %42, i64 %43, i32 0, i64 0), !dbg !796
  %not_err = icmp eq i64 %44, 0, !dbg !796
  %45 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !796
  br i1 %45, label %after_check, label %assign_optional, !dbg !796

assign_optional:                                  ; preds = %match30
  store i64 %44, ptr %error_var, align 8, !dbg !796
  br label %guard_block, !dbg !796

after_check:                                      ; preds = %match30
  %46 = load ptr, ptr %retparam, align 8, !dbg !796
  store ptr %46, ptr %blockret, align 8, !dbg !796
  br label %expr_block.exit47, !dbg !796

if.exit31:                                        ; preds = %if.exit17
  %ptradd32 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !797
  %47 = load i64, ptr %ptradd32, align 8, !dbg !797
  %48 = inttoptr i64 %47 to ptr, !dbg !797
  %type35 = load ptr, ptr %.cachedtype34, align 8, !dbg !752
  %49 = icmp eq ptr %48, %type35, !dbg !752
  br i1 %49, label %cache_hit38, label %cache_miss36, !dbg !752

cache_miss36:                                     ; preds = %if.exit31
  %ptradd37 = getelementptr inbounds i8, ptr %48, i64 16, !dbg !752
  %50 = load ptr, ptr %ptradd37, align 8, !dbg !752
  %51 = call ptr @.dyn_search(ptr %50, ptr @"$sel.resize"), !dbg !752
  store ptr %51, ptr %.inlinecache33, align 8, !dbg !752
  store ptr %48, ptr %.cachedtype34, align 8, !dbg !752
  br label %52, !dbg !752

cache_hit38:                                      ; preds = %if.exit31
  %cache_hit_fn39 = load ptr, ptr %.inlinecache33, align 8, !dbg !752
  br label %52, !dbg !752

52:                                               ; preds = %cache_hit38, %cache_miss36
  %fn_phi40 = phi ptr [ %cache_hit_fn39, %cache_hit38 ], [ %51, %cache_miss36 ], !dbg !752
  %53 = icmp eq ptr %fn_phi40, null, !dbg !752
  br i1 %53, label %missing_function41, label %match42, !dbg !752

missing_function41:                               ; preds = %52
  %54 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !799
  call void %54(ptr @.panic_msg.94, i64 43, ptr @.file.91, i64 16, ptr @.func.92, i64 15, i32 96) #5, !dbg !799
  unreachable, !dbg !799

match42:                                          ; preds = %52
  %55 = load ptr, ptr %allocator, align 8
  %56 = load ptr, ptr %ptr, align 8
  %57 = load i64, ptr %new_size, align 8
  %58 = call i64 %fn_phi40(ptr %retparam43, ptr %55, ptr %56, i64 %57, i64 0), !dbg !799
  %not_err44 = icmp eq i64 %58, 0, !dbg !799
  %59 = call i1 @llvm.expect.i1(i1 %not_err44, i1 true), !dbg !799
  br i1 %59, label %after_check46, label %assign_optional45, !dbg !799

assign_optional45:                                ; preds = %match42
  store i64 %58, ptr %error_var, align 8, !dbg !799
  br label %guard_block, !dbg !799

after_check46:                                    ; preds = %match42
  %60 = load ptr, ptr %retparam43, align 8, !dbg !799
  store ptr %60, ptr %blockret, align 8, !dbg !799
  br label %expr_block.exit47, !dbg !799

expr_block.exit47:                                ; preds = %after_check46, %after_check, %expr_block.exit
  br label %noerr_block, !dbg !799

guard_block:                                      ; preds = %assign_optional45, %assign_optional
  %61 = load i64, ptr %error_var, align 8, !dbg !799
  ret i64 %61, !dbg !799

noerr_block:                                      ; preds = %expr_block.exit47
  %62 = load ptr, ptr %blockret, align 8, !dbg !799
  store ptr %62, ptr %new_ptr, align 8, !dbg !799
  %63 = load ptr, ptr %self, align 8, !dbg !800
  %64 = load ptr, ptr %new_ptr, align 8, !dbg !801
  %65 = load i64, ptr %new_capacity, align 8, !dbg !802
  %add48 = add i64 0, %65, !dbg !802
  %size = sub i64 %add48, 0, !dbg !802
  %66 = insertvalue %"char[]" undef, ptr %64, 0, !dbg !802
  %67 = insertvalue %"char[]" %66, i64 %size, 1, !dbg !802
  store %"char[]" %67, ptr %63, align 8, !dbg !802
  ret i64 0, !dbg !802

panic:                                            ; preds = %entry
  %68 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !754
  call void %68(ptr @.panic_msg, i64 62, ptr @.file.83, i64 13, ptr @.func.92, i64 15, i32 51) #5, !dbg !754
  unreachable, !dbg !754
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteWriter.write(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !803 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !806
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !806
  br i1 %5, label %panic, label %checkok, !dbg !806

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !807, !DIExpression(), !808)
  store ptr %2, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !809, !DIExpression(), !810)
  %6 = load ptr, ptr %self, align 8, !dbg !811
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !811
  %7 = load i64, ptr %ptradd1, align 8, !dbg !811
  %ptradd2 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !812
  %8 = load i64, ptr %ptradd2, align 8, !dbg !812
  %add = add i64 %7, %8, !dbg !811
  %9 = load ptr, ptr %self, align 8, !dbg !811
  %10 = call i64 @std.io.ByteWriter.ensure_capacity(ptr %9, i64 %add) #6, !dbg !813
  %not_err = icmp eq i64 %10, 0, !dbg !813
  %11 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !813
  br i1 %11, label %after_check, label %assign_optional, !dbg !813

assign_optional:                                  ; preds = %checkok
  store i64 %10, ptr %error_var, align 8, !dbg !813
  br label %guard_block, !dbg !813

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !813

guard_block:                                      ; preds = %assign_optional
  %12 = load i64, ptr %error_var, align 8, !dbg !813
  ret i64 %12, !dbg !813

noerr_block:                                      ; preds = %after_check
  %13 = load ptr, ptr %self, align 8, !dbg !814
  %ptradd3 = getelementptr inbounds i8, ptr %13, i64 8, !dbg !814
  %14 = load i64, ptr %ptradd3, align 8, !dbg !814
  %15 = load ptr, ptr %13, align 8, !dbg !814
  %16 = load ptr, ptr %self, align 8, !dbg !815
  %ptradd4 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !815
  %17 = load i64, ptr %ptradd4, align 8, !dbg !815
  %ge = icmp uge i64 %17, %14, !dbg !815
  %18 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !815
  br i1 %18, label %panic5, label %checkok8, !dbg !815

checkok8:                                         ; preds = %noerr_block
  %ptradd9 = getelementptr inbounds i8, ptr %15, i64 %17, !dbg !815
  store ptr %ptradd9, ptr %dst, align 8
  %19 = load ptr, ptr %bytes, align 8, !dbg !816
  store ptr %19, ptr %src, align 8
  %ptradd10 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !817
  %20 = load i64, ptr %ptradd10, align 8
  store i64 %20, ptr %len, align 8
  %21 = load i64, ptr %len, align 8, !dbg !818
  %eq = icmp eq i64 0, %21, !dbg !818
  br i1 %eq, label %or.phi, label %or.rhs, !dbg !818

or.rhs:                                           ; preds = %checkok8
  %22 = load ptr, ptr %dst, align 8, !dbg !822
  %23 = load i64, ptr %len, align 8, !dbg !823
  %ptradd_any = getelementptr i8, ptr %22, i64 %23, !dbg !823
  %24 = load ptr, ptr %src, align 8, !dbg !824
  %le = icmp ule ptr %ptradd_any, %24, !dbg !822
  br label %or.phi, !dbg !822

or.phi:                                           ; preds = %or.rhs, %checkok8
  %val = phi i1 [ true, %checkok8 ], [ %le, %or.rhs ], !dbg !822
  br i1 %val, label %or.phi14, label %or.rhs11, !dbg !822

or.rhs11:                                         ; preds = %or.phi
  %25 = load ptr, ptr %src, align 8, !dbg !825
  %26 = load i64, ptr %len, align 8, !dbg !826
  %ptradd_any12 = getelementptr i8, ptr %25, i64 %26, !dbg !826
  %27 = load ptr, ptr %dst, align 8, !dbg !827
  %le13 = icmp ule ptr %ptradd_any12, %27, !dbg !825
  br label %or.phi14, !dbg !825

or.phi14:                                         ; preds = %or.rhs11, %or.phi
  %val15 = phi i1 [ true, %or.phi ], [ %le13, %or.rhs11 ], !dbg !825
  br i1 %val15, label %assert_ok, label %assert_fail, !dbg !825

assert_fail:                                      ; preds = %or.phi14
  %28 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !818
  call void %28(ptr @.panic_msg.60, i64 95, ptr @.file.61, i64 6, ptr @.func.80, i64 5, i32 324) #5, !dbg !818
  unreachable, !dbg !818

assert_ok:                                        ; preds = %or.phi14
  %29 = load ptr, ptr %dst, align 8, !dbg !828
  %30 = load ptr, ptr %src, align 8, !dbg !829
  %31 = load i64, ptr %len, align 8, !dbg !830
  call void @llvm.memcpy.p0.p0.i64(ptr %29, ptr %30, i64 %31, i1 false), !dbg !831
  %32 = load ptr, ptr %self, align 8, !dbg !832
  %ptradd16 = getelementptr inbounds i8, ptr %32, i64 16, !dbg !832
  %33 = load i64, ptr %ptradd16, align 8, !dbg !832
  %ptradd17 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !833
  %34 = load i64, ptr %ptradd17, align 8, !dbg !833
  %add18 = add i64 %33, %34, !dbg !832
  store i64 %add18, ptr %ptradd16, align 8, !dbg !832
  %ptradd19 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !834
  %35 = load i64, ptr %ptradd19, align 8, !dbg !834
  store i64 %35, ptr %0, align 8, !dbg !834
  ret i64 0, !dbg !834

panic:                                            ; preds = %entry
  %36 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !808
  call void %36(ptr @.panic_msg, i64 62, ptr @.file.83, i64 13, ptr @.func.80, i64 5, i32 61) #5, !dbg !808
  unreachable, !dbg !808

panic5:                                           ; preds = %noerr_block
  store i64 %14, ptr %taddr, align 8
  %37 = insertvalue %any undef, ptr %taddr, 0
  %38 = insertvalue %any %37, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %17, ptr %taddr6, align 8
  %39 = insertvalue %any undef, ptr %taddr6, 0
  %40 = insertvalue %any %39, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %38, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %40, ptr %ptradd7, align 16
  %41 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %41, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.83, i64 13, ptr @.func.80, i64 5, i32 64, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !815
  unreachable, !dbg !815
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteWriter.write_byte(ptr %0, i8 zeroext %1) #0 comdat !dbg !835 {
entry:
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !838
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !838
  br i1 %3, label %panic, label %checkok, !dbg !838

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !839, !DIExpression(), !840)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !841, !DIExpression(), !842)
  %4 = load ptr, ptr %self, align 8, !dbg !843
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !843
  %5 = load i64, ptr %ptradd, align 8, !dbg !843
  %add = add i64 %5, 1, !dbg !843
  %6 = load ptr, ptr %self, align 8, !dbg !843
  %7 = call i64 @std.io.ByteWriter.ensure_capacity(ptr %6, i64 %add) #6, !dbg !844
  %not_err = icmp eq i64 %7, 0, !dbg !844
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !844
  br i1 %8, label %after_check, label %assign_optional, !dbg !844

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %error_var, align 8, !dbg !844
  br label %guard_block, !dbg !844

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !844

guard_block:                                      ; preds = %assign_optional
  %9 = load i64, ptr %error_var, align 8, !dbg !844
  ret i64 %9, !dbg !844

noerr_block:                                      ; preds = %after_check
  %10 = load ptr, ptr %self, align 8, !dbg !845
  %ptradd1 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !845
  %11 = load i64, ptr %ptradd1, align 8, !dbg !845
  %12 = load ptr, ptr %10, align 8, !dbg !845
  %13 = load ptr, ptr %self, align 8, !dbg !846
  %ptradd2 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !846
  %14 = load i64, ptr %ptradd2, align 8, !dbg !846
  %add3 = add i64 %14, 1, !dbg !846
  store i64 %add3, ptr %ptradd2, align 8, !dbg !846
  %ge = icmp uge i64 %14, %11, !dbg !846
  %15 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !846
  br i1 %15, label %panic4, label %checkok7, !dbg !846

checkok7:                                         ; preds = %noerr_block
  %ptradd8 = getelementptr inbounds i8, ptr %12, i64 %14, !dbg !846
  %16 = load i8, ptr %c, align 1, !dbg !847
  store i8 %16, ptr %ptradd8, align 1, !dbg !847
  ret i64 0, !dbg !847

panic:                                            ; preds = %entry
  %17 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !840
  call void %17(ptr @.panic_msg, i64 62, ptr @.file.83, i64 13, ptr @.func.81, i64 10, i32 69) #5, !dbg !840
  unreachable, !dbg !840

panic4:                                           ; preds = %noerr_block
  store i64 %11, ptr %taddr, align 8
  %18 = insertvalue %any undef, ptr %taddr, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr5, align 8
  %20 = insertvalue %any undef, ptr %taddr5, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %19, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %21, ptr %ptradd6, align 16
  %22 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %22, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.83, i64 13, ptr @.func.81, i64 10, i32 72, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !846
  unreachable, !dbg !846
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteWriter.read_from(ptr %0, ptr %1, i64 %2, ptr %3) #0 comdat !dbg !848 {
entry:
  %self = alloca ptr, align 8
  %reader = alloca %any, align 8
  %start_index = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %available = alloca i64, align 8
  %error_var = alloca i64, align 8
  %.inlinecache5 = alloca ptr, align 8
  %.cachedtype6 = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %error_var14 = alloca i64, align 8
  %read = alloca i64, align 8
  %error_var21 = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.inlinecache29 = alloca ptr, align 8
  %.cachedtype30 = alloca ptr, align 8
  %retparam39 = alloca i64, align 8
  %reterr = alloca i64, align 8
  %error_var50 = alloca i64, align 8
  %len_to_read = alloca i64, align 8
  %error_var63 = alloca i64, align 8
  %read74 = alloca i64, align 8
  %error_var75 = alloca i64, align 8
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %.inlinecache89 = alloca ptr, align 8
  %.cachedtype90 = alloca ptr, align 8
  %retparam99 = alloca i64, align 8
  %reterr108 = alloca i64, align 8
  store ptr null, ptr %.cachedtype90, align 8, !dbg !851
  store ptr null, ptr %.cachedtype30, align 8, !dbg !851
  store ptr null, ptr %.cachedtype6, align 8, !dbg !851
  store ptr null, ptr %.cachedtype, align 8, !dbg !851
  %4 = icmp eq ptr %1, null, !dbg !851
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !851
  br i1 %5, label %panic, label %checkok, !dbg !851

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !852, !DIExpression(), !853)
  store i64 %2, ptr %reader, align 8
  %ptradd = getelementptr inbounds i8, ptr %reader, i64 8
  store ptr %3, ptr %ptradd, align 8
    #dbg_declare(ptr %reader, !854, !DIExpression(), !855)
    #dbg_declare(ptr %start_index, !856, !DIExpression(), !857)
  %6 = load ptr, ptr %self, align 8, !dbg !858
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !858
  %7 = load i64, ptr %ptradd1, align 8, !dbg !858
  store i64 %7, ptr %start_index, align 8, !dbg !858
  %ptradd2 = getelementptr inbounds i8, ptr %reader, i64 8, !dbg !859
  %8 = load i64, ptr %ptradd2, align 8, !dbg !859
  %9 = inttoptr i64 %8 to ptr, !dbg !859
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !851
  %10 = icmp eq ptr %9, %type, !dbg !851
  br i1 %10, label %cache_hit, label %cache_miss, !dbg !851

cache_miss:                                       ; preds = %checkok
  %ptradd3 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !851
  %11 = load ptr, ptr %ptradd3, align 8, !dbg !851
  %12 = call ptr @.dyn_search(ptr %11, ptr @"$sel.available"), !dbg !851
  store ptr %12, ptr %.inlinecache, align 8, !dbg !851
  store ptr %9, ptr %.cachedtype, align 8, !dbg !851
  br label %13, !dbg !851

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !851
  br label %13, !dbg !851

13:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %12, %cache_miss ], !dbg !851
  %i2b = icmp ne ptr %fn_phi, null, !dbg !851
  br i1 %i2b, label %if.then, label %if.exit, !dbg !851

if.then:                                          ; preds = %13
  br label %loop.cond, !dbg !860

loop.cond:                                        ; preds = %noerr_block44, %if.then
    #dbg_declare(ptr %available, !862, !DIExpression(), !864)
  %ptradd4 = getelementptr inbounds i8, ptr %reader, i64 8, !dbg !865
  %14 = load i64, ptr %ptradd4, align 8, !dbg !865
  %15 = inttoptr i64 %14 to ptr, !dbg !865
  %type7 = load ptr, ptr %.cachedtype6, align 8, !dbg !851
  %16 = icmp eq ptr %15, %type7, !dbg !851
  br i1 %16, label %cache_hit10, label %cache_miss8, !dbg !851

cache_miss8:                                      ; preds = %loop.cond
  %ptradd9 = getelementptr inbounds i8, ptr %15, i64 16, !dbg !851
  %17 = load ptr, ptr %ptradd9, align 8, !dbg !851
  %18 = call ptr @.dyn_search(ptr %17, ptr @"$sel.available"), !dbg !851
  store ptr %18, ptr %.inlinecache5, align 8, !dbg !851
  store ptr %15, ptr %.cachedtype6, align 8, !dbg !851
  br label %19, !dbg !851

cache_hit10:                                      ; preds = %loop.cond
  %cache_hit_fn11 = load ptr, ptr %.inlinecache5, align 8, !dbg !851
  br label %19, !dbg !851

19:                                               ; preds = %cache_hit10, %cache_miss8
  %fn_phi12 = phi ptr [ %cache_hit_fn11, %cache_hit10 ], [ %18, %cache_miss8 ], !dbg !851
  %20 = icmp eq ptr %fn_phi12, null, !dbg !851
  br i1 %20, label %missing_function, label %match, !dbg !851

missing_function:                                 ; preds = %19
  %21 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !865
  call void %21(ptr @.panic_msg.96, i64 46, ptr @.file.83, i64 13, ptr @.func.95, i64 9, i32 84) #5, !dbg !865
  unreachable, !dbg !865

match:                                            ; preds = %19
  %22 = load ptr, ptr %reader, align 8
  %23 = call i64 %fn_phi12(ptr %retparam, ptr %22), !dbg !865
  %not_err = icmp eq i64 %23, 0, !dbg !865
  %24 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !865
  br i1 %24, label %after_check, label %assign_optional, !dbg !865

assign_optional:                                  ; preds = %match
  store i64 %23, ptr %error_var, align 8, !dbg !865
  br label %guard_block, !dbg !865

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !865

guard_block:                                      ; preds = %assign_optional
  %25 = load i64, ptr %error_var, align 8, !dbg !865
  ret i64 %25, !dbg !865

noerr_block:                                      ; preds = %after_check
  %26 = load i64, ptr %retparam, align 8, !dbg !865
  store i64 %26, ptr %available, align 8, !dbg !865
  %i2b13 = icmp ne i64 %26, 0, !dbg !865
  br i1 %i2b13, label %loop.body, label %loop.exit, !dbg !865

loop.body:                                        ; preds = %noerr_block
  %27 = load ptr, ptr %self, align 8, !dbg !866
  %ptradd15 = getelementptr inbounds i8, ptr %27, i64 16, !dbg !866
  %28 = load i64, ptr %ptradd15, align 8, !dbg !866
  %29 = load i64, ptr %available, align 8, !dbg !868
  %add = add i64 %28, %29, !dbg !866
  %30 = load ptr, ptr %self, align 8, !dbg !866
  %31 = call i64 @std.io.ByteWriter.ensure_capacity(ptr %30, i64 %add) #6, !dbg !869
  %not_err16 = icmp eq i64 %31, 0, !dbg !869
  %32 = call i1 @llvm.expect.i1(i1 %not_err16, i1 true), !dbg !869
  br i1 %32, label %after_check18, label %assign_optional17, !dbg !869

assign_optional17:                                ; preds = %loop.body
  store i64 %31, ptr %error_var14, align 8, !dbg !869
  br label %guard_block19, !dbg !869

after_check18:                                    ; preds = %loop.body
  br label %noerr_block20, !dbg !869

guard_block19:                                    ; preds = %assign_optional17
  %33 = load i64, ptr %error_var14, align 8, !dbg !869
  ret i64 %33, !dbg !869

noerr_block20:                                    ; preds = %after_check18
    #dbg_declare(ptr %read, !870, !DIExpression(), !871)
  %34 = load ptr, ptr %self, align 8, !dbg !872
  %35 = load %"char[]", ptr %34, align 8, !dbg !872
  %36 = extractvalue %"char[]" %35, 0, !dbg !872
  %37 = load ptr, ptr %self, align 8, !dbg !873
  %ptradd22 = getelementptr inbounds i8, ptr %37, i64 16, !dbg !873
  %38 = load i64, ptr %ptradd22, align 8, !dbg !873
  %39 = extractvalue %"char[]" %35, 1, !dbg !873
  %gt = icmp ugt i64 %38, %39, !dbg !873
  %40 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !873
  br i1 %40, label %panic23, label %checkok26, !dbg !873

checkok26:                                        ; preds = %noerr_block20
  %size = sub i64 %39, %38, !dbg !872
  %ptradd27 = getelementptr inbounds i8, ptr %36, i64 %38, !dbg !872
  %41 = insertvalue %"char[]" undef, ptr %ptradd27, 0, !dbg !872
  %42 = insertvalue %"char[]" %41, i64 %size, 1, !dbg !872
  %ptradd28 = getelementptr inbounds i8, ptr %reader, i64 8, !dbg !872
  %43 = load i64, ptr %ptradd28, align 8, !dbg !872
  %44 = inttoptr i64 %43 to ptr, !dbg !872
  %type31 = load ptr, ptr %.cachedtype30, align 8, !dbg !851
  %45 = icmp eq ptr %44, %type31, !dbg !851
  br i1 %45, label %cache_hit34, label %cache_miss32, !dbg !851

cache_miss32:                                     ; preds = %checkok26
  %ptradd33 = getelementptr inbounds i8, ptr %44, i64 16, !dbg !851
  %46 = load ptr, ptr %ptradd33, align 8, !dbg !851
  %47 = call ptr @.dyn_search(ptr %46, ptr @"$sel.read"), !dbg !851
  store ptr %47, ptr %.inlinecache29, align 8, !dbg !851
  store ptr %44, ptr %.cachedtype30, align 8, !dbg !851
  br label %48, !dbg !851

cache_hit34:                                      ; preds = %checkok26
  %cache_hit_fn35 = load ptr, ptr %.inlinecache29, align 8, !dbg !851
  br label %48, !dbg !851

48:                                               ; preds = %cache_hit34, %cache_miss32
  %fn_phi36 = phi ptr [ %cache_hit_fn35, %cache_hit34 ], [ %47, %cache_miss32 ], !dbg !851
  %49 = icmp eq ptr %fn_phi36, null, !dbg !851
  br i1 %49, label %missing_function37, label %match38, !dbg !851

missing_function37:                               ; preds = %48
  %50 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !874
  call void %50(ptr @.panic_msg.75, i64 41, ptr @.file.83, i64 13, ptr @.func.95, i64 9, i32 87) #5, !dbg !874
  unreachable, !dbg !874

match38:                                          ; preds = %48
  %51 = load ptr, ptr %reader, align 8
  %52 = call i64 %fn_phi36(ptr %retparam39, ptr %51, ptr %ptradd27, i64 %size), !dbg !874
  %not_err40 = icmp eq i64 %52, 0, !dbg !874
  %53 = call i1 @llvm.expect.i1(i1 %not_err40, i1 true), !dbg !874
  br i1 %53, label %after_check42, label %assign_optional41, !dbg !874

assign_optional41:                                ; preds = %match38
  store i64 %52, ptr %error_var21, align 8, !dbg !874
  br label %guard_block43, !dbg !874

after_check42:                                    ; preds = %match38
  br label %noerr_block44, !dbg !874

guard_block43:                                    ; preds = %assign_optional41
  %54 = load i64, ptr %error_var21, align 8, !dbg !874
  ret i64 %54, !dbg !874

noerr_block44:                                    ; preds = %after_check42
  %55 = load i64, ptr %retparam39, align 8, !dbg !874
  store i64 %55, ptr %read, align 8, !dbg !874
  %56 = load ptr, ptr %self, align 8, !dbg !875
  %ptradd45 = getelementptr inbounds i8, ptr %56, i64 16, !dbg !875
  %57 = load i64, ptr %ptradd45, align 8, !dbg !875
  %58 = load i64, ptr %read, align 8, !dbg !876
  %add46 = add i64 %57, %58, !dbg !875
  store i64 %add46, ptr %ptradd45, align 8, !dbg !875
  br label %loop.cond, !dbg !875

loop.exit:                                        ; preds = %noerr_block
  %59 = load ptr, ptr %self, align 8, !dbg !877
  %ptradd47 = getelementptr inbounds i8, ptr %59, i64 16, !dbg !877
  %60 = load i64, ptr %ptradd47, align 8, !dbg !877
  %61 = load i64, ptr %start_index, align 8, !dbg !878
  %sub = sub i64 %60, %61, !dbg !877
  store i64 %sub, ptr %0, align 8, !dbg !877
  ret i64 0, !dbg !877

if.exit:                                          ; preds = %13
  %62 = load ptr, ptr %self, align 8, !dbg !879
  %ptradd48 = getelementptr inbounds i8, ptr %62, i64 8, !dbg !879
  %63 = load i64, ptr %ptradd48, align 8, !dbg !879
  %eq = icmp eq i64 0, %63, !dbg !879
  br i1 %eq, label %if.then49, label %if.exit56, !dbg !879

if.then49:                                        ; preds = %if.exit
  %64 = load ptr, ptr %self, align 8, !dbg !880
  %65 = call i64 @std.io.ByteWriter.ensure_capacity(ptr %64, i64 16) #6, !dbg !882
  %not_err51 = icmp eq i64 %65, 0, !dbg !882
  %66 = call i1 @llvm.expect.i1(i1 %not_err51, i1 true), !dbg !882
  br i1 %66, label %after_check53, label %assign_optional52, !dbg !882

assign_optional52:                                ; preds = %if.then49
  store i64 %65, ptr %error_var50, align 8, !dbg !882
  br label %guard_block54, !dbg !882

after_check53:                                    ; preds = %if.then49
  br label %noerr_block55, !dbg !882

guard_block54:                                    ; preds = %assign_optional52
  %67 = load i64, ptr %error_var50, align 8, !dbg !882
  ret i64 %67, !dbg !882

noerr_block55:                                    ; preds = %after_check53
  br label %if.exit56, !dbg !882

if.exit56:                                        ; preds = %noerr_block55, %if.exit
  br label %loop.body57, !dbg !883

loop.body57:                                      ; preds = %if.exit111, %if.exit56
    #dbg_declare(ptr %len_to_read, !884, !DIExpression(), !887)
  %68 = load ptr, ptr %self, align 8, !dbg !888
  %ptradd58 = getelementptr inbounds i8, ptr %68, i64 8, !dbg !888
  %69 = load i64, ptr %ptradd58, align 8, !dbg !888
  %70 = load ptr, ptr %self, align 8, !dbg !889
  %ptradd59 = getelementptr inbounds i8, ptr %70, i64 16, !dbg !889
  %71 = load i64, ptr %ptradd59, align 8, !dbg !889
  %sub60 = sub i64 %69, %71, !dbg !888
  store i64 %sub60, ptr %len_to_read, align 8, !dbg !888
  %72 = load i64, ptr %len_to_read, align 8, !dbg !890
  %gt61 = icmp ugt i64 16, %72, !dbg !890
  br i1 %gt61, label %if.then62, label %if.exit73, !dbg !890

if.then62:                                        ; preds = %loop.body57
  %73 = load ptr, ptr %self, align 8, !dbg !891
  %ptradd64 = getelementptr inbounds i8, ptr %73, i64 8, !dbg !891
  %74 = load i64, ptr %ptradd64, align 8, !dbg !891
  %mul = mul i64 %74, 2, !dbg !891
  %75 = load ptr, ptr %self, align 8, !dbg !891
  %76 = call i64 @std.io.ByteWriter.ensure_capacity(ptr %75, i64 %mul) #6, !dbg !893
  %not_err65 = icmp eq i64 %76, 0, !dbg !893
  %77 = call i1 @llvm.expect.i1(i1 %not_err65, i1 true), !dbg !893
  br i1 %77, label %after_check67, label %assign_optional66, !dbg !893

assign_optional66:                                ; preds = %if.then62
  store i64 %76, ptr %error_var63, align 8, !dbg !893
  br label %guard_block68, !dbg !893

after_check67:                                    ; preds = %if.then62
  br label %noerr_block69, !dbg !893

guard_block68:                                    ; preds = %assign_optional66
  %78 = load i64, ptr %error_var63, align 8, !dbg !893
  ret i64 %78, !dbg !893

noerr_block69:                                    ; preds = %after_check67
  %79 = load ptr, ptr %self, align 8, !dbg !894
  %ptradd70 = getelementptr inbounds i8, ptr %79, i64 8, !dbg !894
  %80 = load i64, ptr %ptradd70, align 8, !dbg !894
  %81 = load ptr, ptr %self, align 8, !dbg !895
  %ptradd71 = getelementptr inbounds i8, ptr %81, i64 16, !dbg !895
  %82 = load i64, ptr %ptradd71, align 8, !dbg !895
  %sub72 = sub i64 %80, %82, !dbg !894
  store i64 %sub72, ptr %len_to_read, align 8, !dbg !894
  br label %if.exit73, !dbg !894

if.exit73:                                        ; preds = %noerr_block69, %loop.body57
    #dbg_declare(ptr %read74, !896, !DIExpression(), !897)
  %83 = load ptr, ptr %self, align 8, !dbg !898
  %84 = load %"char[]", ptr %83, align 8, !dbg !898
  %85 = extractvalue %"char[]" %84, 0, !dbg !898
  %86 = load ptr, ptr %self, align 8, !dbg !899
  %ptradd76 = getelementptr inbounds i8, ptr %86, i64 16, !dbg !899
  %87 = load i64, ptr %ptradd76, align 8, !dbg !899
  %88 = extractvalue %"char[]" %84, 1, !dbg !899
  %gt77 = icmp ugt i64 %87, %88, !dbg !899
  %89 = call i1 @llvm.expect.i1(i1 %gt77, i1 false), !dbg !899
  br i1 %89, label %panic78, label %checkok85, !dbg !899

checkok85:                                        ; preds = %if.exit73
  %size86 = sub i64 %88, %87, !dbg !898
  %ptradd87 = getelementptr inbounds i8, ptr %85, i64 %87, !dbg !898
  %90 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !898
  %91 = insertvalue %"char[]" %90, i64 %size86, 1, !dbg !898
  %ptradd88 = getelementptr inbounds i8, ptr %reader, i64 8, !dbg !898
  %92 = load i64, ptr %ptradd88, align 8, !dbg !898
  %93 = inttoptr i64 %92 to ptr, !dbg !898
  %type91 = load ptr, ptr %.cachedtype90, align 8, !dbg !851
  %94 = icmp eq ptr %93, %type91, !dbg !851
  br i1 %94, label %cache_hit94, label %cache_miss92, !dbg !851

cache_miss92:                                     ; preds = %checkok85
  %ptradd93 = getelementptr inbounds i8, ptr %93, i64 16, !dbg !851
  %95 = load ptr, ptr %ptradd93, align 8, !dbg !851
  %96 = call ptr @.dyn_search(ptr %95, ptr @"$sel.read"), !dbg !851
  store ptr %96, ptr %.inlinecache89, align 8, !dbg !851
  store ptr %93, ptr %.cachedtype90, align 8, !dbg !851
  br label %97, !dbg !851

cache_hit94:                                      ; preds = %checkok85
  %cache_hit_fn95 = load ptr, ptr %.inlinecache89, align 8, !dbg !851
  br label %97, !dbg !851

97:                                               ; preds = %cache_hit94, %cache_miss92
  %fn_phi96 = phi ptr [ %cache_hit_fn95, %cache_hit94 ], [ %96, %cache_miss92 ], !dbg !851
  %98 = icmp eq ptr %fn_phi96, null, !dbg !851
  br i1 %98, label %missing_function97, label %match98, !dbg !851

missing_function97:                               ; preds = %97
  %99 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !900
  call void %99(ptr @.panic_msg.75, i64 41, ptr @.file.83, i64 13, ptr @.func.95, i64 9, i32 107) #5, !dbg !900
  unreachable, !dbg !900

match98:                                          ; preds = %97
  %100 = load ptr, ptr %reader, align 8
  %101 = call i64 %fn_phi96(ptr %retparam99, ptr %100, ptr %ptradd87, i64 %size86), !dbg !900
  %not_err100 = icmp eq i64 %101, 0, !dbg !900
  %102 = call i1 @llvm.expect.i1(i1 %not_err100, i1 true), !dbg !900
  br i1 %102, label %after_check102, label %assign_optional101, !dbg !900

assign_optional101:                               ; preds = %match98
  store i64 %101, ptr %error_var75, align 8, !dbg !900
  br label %guard_block103, !dbg !900

after_check102:                                   ; preds = %match98
  br label %noerr_block104, !dbg !900

guard_block103:                                   ; preds = %assign_optional101
  %103 = load i64, ptr %error_var75, align 8, !dbg !900
  ret i64 %103, !dbg !900

noerr_block104:                                   ; preds = %after_check102
  %104 = load i64, ptr %retparam99, align 8, !dbg !900
  store i64 %104, ptr %read74, align 8, !dbg !900
  %105 = load ptr, ptr %self, align 8, !dbg !901
  %ptradd105 = getelementptr inbounds i8, ptr %105, i64 16, !dbg !901
  %106 = load i64, ptr %ptradd105, align 8, !dbg !901
  %107 = load i64, ptr %read74, align 8, !dbg !902
  %add106 = add i64 %106, %107, !dbg !901
  store i64 %add106, ptr %ptradd105, align 8, !dbg !901
  %108 = load i64, ptr %read74, align 8, !dbg !903
  %109 = load i64, ptr %len_to_read, align 8, !dbg !904
  %lt = icmp ult i64 %108, %109, !dbg !903
  br i1 %lt, label %if.then107, label %if.exit111, !dbg !903

if.then107:                                       ; preds = %noerr_block104
  %110 = load ptr, ptr %self, align 8, !dbg !905
  %ptradd109 = getelementptr inbounds i8, ptr %110, i64 16, !dbg !905
  %111 = load i64, ptr %ptradd109, align 8, !dbg !905
  %112 = load i64, ptr %start_index, align 8, !dbg !906
  %sub110 = sub i64 %111, %112, !dbg !905
  store i64 %sub110, ptr %0, align 8, !dbg !905
  ret i64 0, !dbg !905

if.exit111:                                       ; preds = %noerr_block104
  br label %loop.body57, !dbg !905

panic:                                            ; preds = %entry
  %113 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !853
  call void %113(ptr @.panic_msg, i64 62, ptr @.file.83, i64 13, ptr @.func.95, i64 9, i32 79) #5, !dbg !853
  unreachable, !dbg !853

panic23:                                          ; preds = %noerr_block20
  store i64 %39, ptr %taddr, align 8
  %114 = insertvalue %any undef, ptr %taddr, 0
  %115 = insertvalue %any %114, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %38, ptr %taddr24, align 8
  %116 = insertvalue %any undef, ptr %taddr24, 0
  %117 = insertvalue %any %116, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %115, ptr %varargslots, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %117, ptr %ptradd25, align 16
  %118 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %118, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.83, i64 13, ptr @.func.95, i64 9, i32 87, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !872
  unreachable, !dbg !872

panic78:                                          ; preds = %if.exit73
  store i64 %88, ptr %taddr79, align 8
  %119 = insertvalue %any undef, ptr %taddr79, 0
  %120 = insertvalue %any %119, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %87, ptr %taddr80, align 8
  %121 = insertvalue %any undef, ptr %taddr80, 0
  %122 = insertvalue %any %121, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %120, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %122, ptr %ptradd82, align 16
  %123 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %123, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.83, i64 13, ptr @.func.95, i64 9, i32 107, ptr byval(%"any[]") align 8 %indirectarg84) #5, !dbg !898
  unreachable, !dbg !898
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.ByteBuffer.new_init(ptr %0, i64 %1, i64 %2, i64 %3, ptr %4) #0 comdat !dbg !907 {
entry:
  %self = alloca ptr, align 8
  %max_read = alloca i64, align 8
  %initial_capacity = alloca i64, align 8
  %allocator = alloca %any, align 8
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.assign_list = alloca %ByteBuffer, align 8
  %x = alloca i64, align 8
  %.anon = alloca i32, align 4
  %a = alloca i64, align 8
  %b = alloca i32, align 4
  %5 = icmp eq ptr %0, null, !dbg !921
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !921
  br i1 %6, label %panic, label %checkok, !dbg !921

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !922, !DIExpression(), !923)
  store i64 %1, ptr %max_read, align 8
    #dbg_declare(ptr %max_read, !924, !DIExpression(), !925)
  store i64 %2, ptr %initial_capacity, align 8
    #dbg_declare(ptr %initial_capacity, !926, !DIExpression(), !927)
  store i64 %3, ptr %allocator, align 8
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %4, ptr %ptradd, align 8
    #dbg_declare(ptr %allocator, !928, !DIExpression(), !929)
  %7 = load ptr, ptr %self, align 8, !dbg !930
  %ptradd1 = getelementptr inbounds i8, ptr %7, i64 24, !dbg !930
  %ptradd2 = getelementptr inbounds i8, ptr %ptradd1, i64 8, !dbg !930
  %8 = load i64, ptr %ptradd2, align 8, !dbg !930
  %eq = icmp eq i64 0, %8, !dbg !930
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !930

assert_fail:                                      ; preds = %checkok
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !930
  call void %9(ptr @.panic_msg.98, i64 71, ptr @.file.97, i64 13, ptr @.func.84, i64 8, i32 17) #5, !dbg !930
  unreachable, !dbg !930

assert_ok:                                        ; preds = %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !932
  %checknull = icmp eq ptr %10, null, !dbg !932
  %11 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !932
  br i1 %11, label %panic3, label %checkok4, !dbg !932

checkok4:                                         ; preds = %assert_ok
  %12 = ptrtoint ptr %10 to i64, !dbg !932
  %13 = urem i64 %12, 8, !dbg !932
  %14 = icmp ne i64 %13, 0, !dbg !932
  %15 = call i1 @llvm.expect.i1(i1 %14, i1 false), !dbg !932
  br i1 %15, label %panic5, label %checkok8, !dbg !932

checkok8:                                         ; preds = %checkok4
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 64, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %allocator, i32 16, i1 false), !dbg !933
  %ptradd9 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !933
  %16 = load i64, ptr %max_read, align 8, !dbg !934
  store i64 %16, ptr %ptradd9, align 8, !dbg !934
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %10, ptr align 8 %.assign_list, i32 64, i1 false), !dbg !934
  %17 = load i64, ptr %initial_capacity, align 8
  store i64 %17, ptr %x, align 8
  store i32 16, ptr %.anon, align 4
  %18 = load i64, ptr %x, align 8
  store i64 %18, ptr %a, align 8
  %19 = load i32, ptr %.anon, align 4
  store i32 %19, ptr %b, align 4
  %20 = load i64, ptr %a, align 8, !dbg !935
  %21 = load i32, ptr %b, align 4, !dbg !940
  %sext = sext i32 %21 to i64, !dbg !940
  %lt = icmp slt i64 %sext, %20, !dbg !935
  %check = icmp slt i64 %20, 0, !dbg !935
  %siui-lt = or i1 %check, %lt, !dbg !935
  br i1 %siui-lt, label %cond.lhs, label %cond.rhs, !dbg !935

cond.lhs:                                         ; preds = %checkok8
  %22 = load i64, ptr %x, align 8, !dbg !941
  br label %cond.phi, !dbg !941

cond.rhs:                                         ; preds = %checkok8
  %23 = load i32, ptr %.anon, align 4, !dbg !942
  %sext10 = sext i32 %23 to i64, !dbg !942
  br label %cond.phi, !dbg !942

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %22, %cond.lhs ], [ %sext10, %cond.rhs ], !dbg !942
  store i64 %val, ptr %initial_capacity, align 8, !dbg !942
  %24 = load ptr, ptr %self, align 8, !dbg !943
  %25 = load i64, ptr %initial_capacity, align 8, !dbg !943
  call void @std.io.ByteBuffer.grow(ptr %24, i64 %25), !dbg !944
  %26 = load ptr, ptr %self, align 8, !dbg !945
  ret ptr %26, !dbg !945

panic:                                            ; preds = %entry
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !923
  call void %27(ptr @.panic_msg, i64 62, ptr @.file.97, i64 13, ptr @.func.84, i64 8, i32 19) #5, !dbg !923
  unreachable, !dbg !923

panic3:                                           ; preds = %assert_ok
  %28 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !932
  call void %28(ptr @.panic_msg.36, i64 45, ptr @.file.97, i64 13, ptr @.func.84, i64 8, i32 21) #5, !dbg !932
  unreachable, !dbg !932

panic5:                                           ; preds = %checkok4
  store i64 8, ptr %taddr, align 8
  %29 = insertvalue %any undef, ptr %taddr, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr6, align 8
  %31 = insertvalue %any undef, ptr %taddr6, 0
  %32 = insertvalue %any %31, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %30, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %32, ptr %ptradd7, align 16
  %33 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %33, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.97, i64 13, ptr @.func.84, i64 8, i32 21, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !932
  unreachable, !dbg !932
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.ByteBuffer.temp_init(ptr %0, i64 %1, i64 %2) #0 comdat !dbg !946 {
entry:
  %self = alloca ptr, align 8
  %max_read = alloca i64, align 8
  %initial_capacity = alloca i64, align 8
  %taddr = alloca %any, align 8
  %3 = icmp eq ptr %0, null, !dbg !949
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !949
  br i1 %4, label %panic, label %checkok, !dbg !949

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !950, !DIExpression(), !951)
  store i64 %1, ptr %max_read, align 8
    #dbg_declare(ptr %max_read, !952, !DIExpression(), !953)
  store i64 %2, ptr %initial_capacity, align 8
    #dbg_declare(ptr %initial_capacity, !954, !DIExpression(), !955)
  %5 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !956
  %i2nb = icmp eq ptr %5, null, !dbg !956
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !956

if.then:                                          ; preds = %checkok
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !959
  br label %if.exit, !dbg !959

if.exit:                                          ; preds = %if.then, %checkok
  %6 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !961
  %7 = insertvalue %any undef, ptr %6, 0, !dbg !958
  %8 = insertvalue %any %7, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !958
  %9 = load ptr, ptr %self, align 8, !dbg !958
  %10 = load i64, ptr %max_read, align 8, !dbg !958
  %11 = load i64, ptr %initial_capacity, align 8, !dbg !958
  store %any %8, ptr %taddr, align 8
  %lo = load i64, ptr %taddr, align 8
  %ptradd = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi = load ptr, ptr %ptradd, align 8
  %12 = call ptr @std.io.ByteBuffer.new_init(ptr %9, i64 %10, i64 %11, i64 %lo, ptr %hi), !dbg !962
  ret ptr %12, !dbg !962

panic:                                            ; preds = %entry
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !951
  call void %13(ptr @.panic_msg, i64 62, ptr @.file.97, i64 13, ptr @.func.86, i64 9, i32 27) #5, !dbg !951
  unreachable, !dbg !951
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.ByteBuffer.init_with_buffer(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !963 {
entry:
  %self = alloca ptr, align 8
  %buf = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.assign_list = alloca %ByteBuffer, align 8
  %3 = icmp eq ptr %0, null, !dbg !966
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !966
  br i1 %4, label %panic, label %checkok, !dbg !966

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !967, !DIExpression(), !968)
  store ptr %1, ptr %buf, align 8
  %ptradd = getelementptr inbounds i8, ptr %buf, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %buf, !969, !DIExpression(), !970)
  %ptradd1 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !971
  %5 = load i64, ptr %ptradd1, align 8, !dbg !971
  %lt = icmp ult i64 0, %5, !dbg !971
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !971

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !971
  call void %6(ptr @.panic_msg.99, i64 32, ptr @.file.97, i64 13, ptr @.func.88, i64 16, i32 33) #5, !dbg !971
  unreachable, !dbg !971

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !973
  %ptradd2 = getelementptr inbounds i8, ptr %7, i64 24, !dbg !973
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd2, i64 8, !dbg !973
  %8 = load i64, ptr %ptradd3, align 8, !dbg !973
  %eq = icmp eq i64 0, %8, !dbg !973
  br i1 %eq, label %assert_ok5, label %assert_fail4, !dbg !973

assert_fail4:                                     ; preds = %assert_ok
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !973
  call void %9(ptr @.panic_msg.98, i64 71, ptr @.file.97, i64 13, ptr @.func.88, i64 16, i32 34) #5, !dbg !973
  unreachable, !dbg !973

assert_ok5:                                       ; preds = %assert_ok
  %10 = load ptr, ptr %self, align 8, !dbg !974
  %checknull = icmp eq ptr %10, null, !dbg !974
  %11 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !974
  br i1 %11, label %panic6, label %checkok7, !dbg !974

checkok7:                                         ; preds = %assert_ok5
  %12 = ptrtoint ptr %10 to i64, !dbg !974
  %13 = urem i64 %12, 8, !dbg !974
  %14 = icmp ne i64 %13, 0, !dbg !974
  %15 = call i1 @llvm.expect.i1(i1 %14, i1 false), !dbg !974
  br i1 %15, label %panic8, label %checkok11, !dbg !974

checkok11:                                        ; preds = %checkok7
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 64, i1 false)
  %ptradd12 = getelementptr inbounds i8, ptr %.assign_list, i64 16
  %ptradd13 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !975
  %16 = load i64, ptr %ptradd13, align 8, !dbg !975
  store i64 %16, ptr %ptradd12, align 8, !dbg !975
  %ptradd14 = getelementptr inbounds i8, ptr %.assign_list, i64 24, !dbg !975
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd14, ptr align 8 %buf, i32 16, i1 false), !dbg !976
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %10, ptr align 8 %.assign_list, i32 64, i1 false), !dbg !976
  %17 = load ptr, ptr %self, align 8, !dbg !977
  ret ptr %17, !dbg !977

panic:                                            ; preds = %entry
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !968
  call void %18(ptr @.panic_msg, i64 62, ptr @.file.97, i64 13, ptr @.func.88, i64 16, i32 36) #5, !dbg !968
  unreachable, !dbg !968

panic6:                                           ; preds = %assert_ok5
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !974
  call void %19(ptr @.panic_msg.36, i64 45, ptr @.file.97, i64 13, ptr @.func.88, i64 16, i32 38) #5, !dbg !974
  unreachable, !dbg !974

panic8:                                           ; preds = %checkok7
  store i64 8, ptr %taddr, align 8
  %20 = insertvalue %any undef, ptr %taddr, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr9, align 8
  %22 = insertvalue %any undef, ptr %taddr9, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %21, ptr %varargslots, align 16
  %ptradd10 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %23, ptr %ptradd10, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %24, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.97, i64 13, ptr @.func.88, i64 16, i32 38, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !974
  unreachable, !dbg !974
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.io.ByteBuffer.free(ptr %0) #0 comdat !dbg !978 {
entry:
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !981
  %1 = icmp eq ptr %0, null, !dbg !981
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !981
  br i1 %2, label %panic, label %checkok, !dbg !981

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !982, !DIExpression(), !983)
  %3 = load ptr, ptr %self, align 8, !dbg !984
  %4 = load ptr, ptr %3, align 8, !dbg !984
  %i2b = icmp ne ptr %4, null, !dbg !984
  br i1 %i2b, label %if.then, label %if.exit4, !dbg !984

if.then:                                          ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !985
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %5, i32 16, i1 false)
  %6 = load ptr, ptr %self, align 8, !dbg !986
  %ptradd = getelementptr inbounds i8, ptr %6, i64 24, !dbg !986
  %7 = load ptr, ptr %ptradd, align 8
  store ptr %7, ptr %ptr, align 8
  %8 = load ptr, ptr %ptr, align 8, !dbg !987
  %i2nb = icmp eq ptr %8, null, !dbg !987
  br i1 %i2nb, label %if.then1, label %if.exit, !dbg !987

if.then1:                                         ; preds = %if.then
  br label %expr_block.exit, !dbg !990

if.exit:                                          ; preds = %if.then
  %ptradd2 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !991
  %9 = load i64, ptr %ptradd2, align 8, !dbg !991
  %10 = inttoptr i64 %9 to ptr, !dbg !991
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !981
  %11 = icmp eq ptr %10, %type, !dbg !981
  br i1 %11, label %cache_hit, label %cache_miss, !dbg !981

cache_miss:                                       ; preds = %if.exit
  %ptradd3 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !981
  %12 = load ptr, ptr %ptradd3, align 8, !dbg !981
  %13 = call ptr @.dyn_search(ptr %12, ptr @"$sel.release"), !dbg !981
  store ptr %13, ptr %.inlinecache, align 8, !dbg !981
  store ptr %10, ptr %.cachedtype, align 8, !dbg !981
  br label %14, !dbg !981

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !981
  br label %14, !dbg !981

14:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %13, %cache_miss ], !dbg !981
  %15 = icmp eq ptr %fn_phi, null, !dbg !981
  br i1 %15, label %missing_function, label %match, !dbg !981

missing_function:                                 ; preds = %14
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !992
  call void %16(ptr @.panic_msg.90, i64 44, ptr @.file.91, i64 16, ptr @.func.100, i64 4, i32 105) #5, !dbg !992
  unreachable, !dbg !992

match:                                            ; preds = %14
  %17 = load ptr, ptr %allocator, align 8, !dbg !992
  %18 = load ptr, ptr %ptr, align 8, !dbg !992
  call void %fn_phi(ptr %17, ptr %18, i8 zeroext 0), !dbg !992
  br label %expr_block.exit, !dbg !992

expr_block.exit:                                  ; preds = %match, %if.then1
  br label %if.exit4, !dbg !992

if.exit4:                                         ; preds = %expr_block.exit, %checkok
  %19 = load ptr, ptr %self, align 8, !dbg !993
  %checknull = icmp eq ptr %19, null, !dbg !993
  %20 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !993
  br i1 %20, label %panic5, label %checkok6, !dbg !993

checkok6:                                         ; preds = %if.exit4
  %21 = ptrtoint ptr %19 to i64, !dbg !993
  %22 = urem i64 %21, 8, !dbg !993
  %23 = icmp ne i64 %22, 0, !dbg !993
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false), !dbg !993
  br i1 %24, label %panic7, label %checkok10, !dbg !993

checkok10:                                        ; preds = %checkok6
  call void @llvm.memset.p0.i64(ptr align 8 %19, i8 0, i64 64, i1 false), !dbg !993
  ret void, !dbg !993

panic:                                            ; preds = %entry
  %25 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !983
  call void %25(ptr @.panic_msg, i64 62, ptr @.file.97, i64 13, ptr @.func.100, i64 4, i32 42) #5, !dbg !983
  unreachable, !dbg !983

panic5:                                           ; preds = %if.exit4
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !993
  call void %26(ptr @.panic_msg.36, i64 45, ptr @.file.97, i64 13, ptr @.func.100, i64 4, i32 45) #5, !dbg !993
  unreachable, !dbg !993

panic7:                                           ; preds = %checkok6
  store i64 8, ptr %taddr, align 8
  %27 = insertvalue %any undef, ptr %taddr, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr8, align 8
  %29 = insertvalue %any undef, ptr %taddr8, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %28, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %30, ptr %ptradd9, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.97, i64 13, ptr @.func.100, i64 4, i32 45, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !993
  unreachable, !dbg !993
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteBuffer.write(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !994 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %cap = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %taddr25 = alloca i64, align 8
  %taddr26 = alloca i64, align 8
  %varargslots27 = alloca [2 x %any], align 16
  %indirectarg30 = alloca %"any[]", align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !997
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !997
  br i1 %5, label %panic, label %checkok, !dbg !997

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !998, !DIExpression(), !999)
  store ptr %2, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !1000, !DIExpression(), !1001)
    #dbg_declare(ptr %cap, !1002, !DIExpression(), !1003)
  %6 = load ptr, ptr %self, align 8, !dbg !1004
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 24, !dbg !1004
  %ptradd2 = getelementptr inbounds i8, ptr %ptradd1, i64 8, !dbg !1004
  %7 = load i64, ptr %ptradd2, align 8, !dbg !1004
  %8 = load ptr, ptr %self, align 8, !dbg !1005
  %ptradd3 = getelementptr inbounds i8, ptr %8, i64 48, !dbg !1005
  %9 = load i64, ptr %ptradd3, align 8, !dbg !1005
  %sub = sub i64 %7, %9, !dbg !1004
  store i64 %sub, ptr %cap, align 8, !dbg !1004
  %10 = load i64, ptr %cap, align 8, !dbg !1006
  %ptradd4 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1007
  %11 = load i64, ptr %ptradd4, align 8, !dbg !1007
  %lt = icmp ult i64 %10, %11, !dbg !1006
  br i1 %lt, label %if.then, label %if.exit, !dbg !1006

if.then:                                          ; preds = %checkok
  %ptradd5 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1008
  %12 = load ptr, ptr %self, align 8, !dbg !1008
  %13 = load i64, ptr %ptradd5, align 8, !dbg !1008
  call void @std.io.ByteBuffer.grow(ptr %12, i64 %13), !dbg !1009
  br label %if.exit, !dbg !1009

if.exit:                                          ; preds = %if.then, %checkok
  %14 = load %"char[]", ptr %bytes, align 8, !dbg !1010
  %15 = extractvalue %"char[]" %14, 0, !dbg !1010
  %16 = extractvalue %"char[]" %14, 1, !dbg !1011
  %gt = icmp ugt i64 0, %16, !dbg !1011
  %17 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1011
  br i1 %17, label %panic6, label %checkok9, !dbg !1011

checkok9:                                         ; preds = %if.exit
  %size = sub i64 %16, 0, !dbg !1010
  %18 = insertvalue %"char[]" undef, ptr %15, 0, !dbg !1010
  %19 = insertvalue %"char[]" %18, i64 %size, 1, !dbg !1010
  %20 = load ptr, ptr %self, align 8, !dbg !1012
  %ptradd10 = getelementptr inbounds i8, ptr %20, i64 24, !dbg !1012
  %21 = load %"char[]", ptr %ptradd10, align 8, !dbg !1012
  %22 = extractvalue %"char[]" %21, 0, !dbg !1012
  %23 = load ptr, ptr %self, align 8, !dbg !1013
  %ptradd11 = getelementptr inbounds i8, ptr %23, i64 48, !dbg !1013
  %24 = load i64, ptr %ptradd11, align 8, !dbg !1013
  %25 = extractvalue %"char[]" %21, 1, !dbg !1013
  %gt12 = icmp ugt i64 %24, %25, !dbg !1013
  %26 = call i1 @llvm.expect.i1(i1 %gt12, i1 false), !dbg !1013
  br i1 %26, label %panic13, label %checkok20, !dbg !1013

checkok20:                                        ; preds = %checkok9
  %ptradd21 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1014
  %27 = load i64, ptr %ptradd21, align 8, !dbg !1014
  %add = add i64 %24, %27, !dbg !1014
  %lt22 = icmp ult i64 %25, %add, !dbg !1014
  %sub23 = sub i64 %add, 1, !dbg !1014
  %28 = call i1 @llvm.expect.i1(i1 %lt22, i1 false), !dbg !1014
  br i1 %28, label %panic24, label %checkok31, !dbg !1014

checkok31:                                        ; preds = %checkok20
  %size32 = sub i64 %add, %24, !dbg !1012
  %ptradd33 = getelementptr inbounds i8, ptr %22, i64 %24, !dbg !1012
  %29 = insertvalue %"char[]" undef, ptr %ptradd33, 0, !dbg !1012
  %30 = insertvalue %"char[]" %29, i64 %size32, 1, !dbg !1012
  %31 = extractvalue %"char[]" %30, 0, !dbg !1012
  %32 = extractvalue %"char[]" %19, 0, !dbg !1012
  %33 = extractvalue %"char[]" %19, 1, !dbg !1012
  %34 = extractvalue %"char[]" %30, 1, !dbg !1012
  %neq = icmp ne i64 %34, %33, !dbg !1012
  %35 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1012
  br i1 %35, label %panic34, label %checkok41, !dbg !1012

checkok41:                                        ; preds = %checkok31
  %36 = mul i64 %33, 1, !dbg !1012
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %31, ptr align 1 %32, i64 %36, i1 false), !dbg !1012
  %37 = load ptr, ptr %self, align 8, !dbg !1015
  %ptradd42 = getelementptr inbounds i8, ptr %37, i64 48, !dbg !1015
  %38 = load i64, ptr %ptradd42, align 8, !dbg !1015
  %ptradd43 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1016
  %39 = load i64, ptr %ptradd43, align 8, !dbg !1016
  %add44 = add i64 %38, %39, !dbg !1015
  store i64 %add44, ptr %ptradd42, align 8, !dbg !1015
  %ptradd45 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1017
  %40 = load i64, ptr %ptradd45, align 8, !dbg !1017
  store i64 %40, ptr %0, align 8, !dbg !1017
  ret i64 0, !dbg !1017

panic:                                            ; preds = %entry
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !999
  call void %41(ptr @.panic_msg, i64 62, ptr @.file.97, i64 13, ptr @.func.80, i64 5, i32 48) #5, !dbg !999
  unreachable, !dbg !999

panic6:                                           ; preds = %if.exit
  store i64 %16, ptr %taddr, align 8
  %42 = insertvalue %any undef, ptr %taddr, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %44 = insertvalue %any undef, ptr %taddr7, 0
  %45 = insertvalue %any %44, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %43, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %45, ptr %ptradd8, align 16
  %46 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %46, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.97, i64 13, ptr @.func.80, i64 5, i32 52, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1010
  unreachable, !dbg !1010

panic13:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr14, align 8
  %47 = insertvalue %any undef, ptr %taddr14, 0
  %48 = insertvalue %any %47, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr15, align 8
  %49 = insertvalue %any undef, ptr %taddr15, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %48, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %50, ptr %ptradd17, align 16
  %51 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %51, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.97, i64 13, ptr @.func.80, i64 5, i32 52, ptr byval(%"any[]") align 8 %indirectarg19) #5, !dbg !1012
  unreachable, !dbg !1012

panic24:                                          ; preds = %checkok20
  store i64 %sub23, ptr %taddr25, align 8
  %52 = insertvalue %any undef, ptr %taddr25, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr26, align 8
  %54 = insertvalue %any undef, ptr %taddr26, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots27, align 16
  %ptradd28 = getelementptr inbounds i8, ptr %varargslots27, i64 16
  store %any %55, ptr %ptradd28, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp29" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp29", ptr %indirectarg30, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 60, ptr @.file.97, i64 13, ptr @.func.80, i64 5, i32 52, ptr byval(%"any[]") align 8 %indirectarg30) #5, !dbg !1012
  unreachable, !dbg !1012

panic34:                                          ; preds = %checkok31
  store i64 %34, ptr %taddr35, align 8
  %57 = insertvalue %any undef, ptr %taddr35, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr36, align 8
  %59 = insertvalue %any undef, ptr %taddr36, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %60, ptr %ptradd38, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.76, i64 38, ptr @.file.97, i64 13, ptr @.func.80, i64 5, i32 52, ptr byval(%"any[]") align 8 %indirectarg40) #5, !dbg !1012
  unreachable, !dbg !1012
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteBuffer.write_byte(ptr %0, i8 zeroext %1) #0 comdat !dbg !1018 {
entry:
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %cap = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1021
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1021
  br i1 %3, label %panic, label %checkok, !dbg !1021

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1022, !DIExpression(), !1023)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !1024, !DIExpression(), !1025)
    #dbg_declare(ptr %cap, !1026, !DIExpression(), !1027)
  %4 = load ptr, ptr %self, align 8, !dbg !1028
  %ptradd = getelementptr inbounds i8, ptr %4, i64 24, !dbg !1028
  %ptradd1 = getelementptr inbounds i8, ptr %ptradd, i64 8, !dbg !1028
  %5 = load i64, ptr %ptradd1, align 8, !dbg !1028
  %6 = load ptr, ptr %self, align 8, !dbg !1029
  %ptradd2 = getelementptr inbounds i8, ptr %6, i64 48, !dbg !1029
  %7 = load i64, ptr %ptradd2, align 8, !dbg !1029
  %sub = sub i64 %5, %7, !dbg !1028
  store i64 %sub, ptr %cap, align 8, !dbg !1028
  %8 = load i64, ptr %cap, align 8, !dbg !1030
  %eq = icmp eq i64 0, %8, !dbg !1030
  br i1 %eq, label %if.then, label %if.exit, !dbg !1030

if.then:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !1031
  call void @std.io.ByteBuffer.grow(ptr %9, i64 1), !dbg !1032
  br label %if.exit, !dbg !1032

if.exit:                                          ; preds = %if.then, %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !1033
  %ptradd3 = getelementptr inbounds i8, ptr %10, i64 24, !dbg !1033
  %ptradd4 = getelementptr inbounds i8, ptr %ptradd3, i64 8, !dbg !1033
  %11 = load i64, ptr %ptradd4, align 8, !dbg !1033
  %12 = load ptr, ptr %ptradd3, align 8, !dbg !1033
  %13 = load ptr, ptr %self, align 8, !dbg !1034
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 48, !dbg !1034
  %14 = load i64, ptr %ptradd5, align 8, !dbg !1034
  %ge = icmp uge i64 %14, %11, !dbg !1034
  %15 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1034
  br i1 %15, label %panic6, label %checkok9, !dbg !1034

checkok9:                                         ; preds = %if.exit
  %ptradd10 = getelementptr inbounds i8, ptr %12, i64 %14, !dbg !1034
  %16 = load i8, ptr %c, align 1, !dbg !1035
  store i8 %16, ptr %ptradd10, align 1, !dbg !1035
  %17 = load ptr, ptr %self, align 8, !dbg !1036
  %ptradd11 = getelementptr inbounds i8, ptr %17, i64 48, !dbg !1036
  %18 = load i64, ptr %ptradd11, align 8, !dbg !1036
  %add = add i64 %18, 1, !dbg !1036
  store i64 %add, ptr %ptradd11, align 8, !dbg !1036
  ret i64 0, !dbg !1036

panic:                                            ; preds = %entry
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1023
  call void %19(ptr @.panic_msg, i64 62, ptr @.file.97, i64 13, ptr @.func.81, i64 10, i32 57) #5, !dbg !1023
  unreachable, !dbg !1023

panic6:                                           ; preds = %if.exit
  store i64 %11, ptr %taddr, align 8
  %20 = insertvalue %any undef, ptr %taddr, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr7, align 8
  %22 = insertvalue %any undef, ptr %taddr7, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %21, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %23, ptr %ptradd8, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %24, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.97, i64 13, ptr @.func.81, i64 10, i32 61, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1034
  unreachable, !dbg !1034
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteBuffer.read(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !1037 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %readable = alloca i64, align 8
  %n = alloca i64, align 8
  %x = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %varargslots26 = alloca [2 x %any], align 16
  %indirectarg29 = alloca %"any[]", align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %taddr44 = alloca i64, align 8
  %taddr45 = alloca i64, align 8
  %varargslots46 = alloca [2 x %any], align 16
  %indirectarg49 = alloca %"any[]", align 8
  %self55 = alloca ptr, align 8
  %readable59 = alloca i64, align 8
  %taddr68 = alloca i64, align 8
  %taddr69 = alloca i64, align 8
  %varargslots70 = alloca [2 x %any], align 16
  %indirectarg73 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %varargslots77 = alloca [1 x %any], align 16
  %indirectarg79 = alloca %"any[]", align 8
  %taddr86 = alloca i64, align 8
  %taddr87 = alloca i64, align 8
  %varargslots88 = alloca [2 x %any], align 16
  %indirectarg91 = alloca %"any[]", align 8
  %taddr98 = alloca i64, align 8
  %taddr99 = alloca i64, align 8
  %varargslots100 = alloca [2 x %any], align 16
  %indirectarg103 = alloca %"any[]", align 8
  %taddr110 = alloca i64, align 8
  %taddr111 = alloca i64, align 8
  %varargslots112 = alloca [2 x %any], align 16
  %indirectarg115 = alloca %"any[]", align 8
  %taddr120 = alloca i64, align 8
  %taddr121 = alloca i64, align 8
  %varargslots122 = alloca [2 x %any], align 16
  %indirectarg125 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !1038
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !1038
  br i1 %5, label %panic, label %checkok, !dbg !1038

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1039, !DIExpression(), !1040)
  store ptr %2, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !1041, !DIExpression(), !1042)
    #dbg_declare(ptr %readable, !1043, !DIExpression(), !1044)
  %6 = load ptr, ptr %self, align 8, !dbg !1045
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 48, !dbg !1045
  %7 = load i64, ptr %ptradd1, align 8, !dbg !1045
  %8 = load ptr, ptr %self, align 8, !dbg !1046
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 40, !dbg !1046
  %9 = load i64, ptr %ptradd2, align 8, !dbg !1046
  %sub = sub i64 %7, %9, !dbg !1045
  store i64 %sub, ptr %readable, align 8, !dbg !1045
  %10 = load i64, ptr %readable, align 8, !dbg !1047
  %eq = icmp eq i64 0, %10, !dbg !1047
  br i1 %eq, label %if.then, label %if.exit, !dbg !1047

if.then:                                          ; preds = %checkok
  %11 = load ptr, ptr %self, align 8, !dbg !1048
  %ptradd3 = getelementptr inbounds i8, ptr %11, i64 56, !dbg !1048
  store i8 0, ptr %ptradd3, align 8, !dbg !1050
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !1051

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %n, !1052, !DIExpression(), !1053)
  %12 = load i64, ptr %readable, align 8
  store i64 %12, ptr %x, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1054
  %13 = load i64, ptr %ptradd4, align 8
  store i64 %13, ptr %.anon, align 8
  %14 = load i64, ptr %x, align 8
  store i64 %14, ptr %a, align 8
  %15 = load i64, ptr %.anon, align 8
  store i64 %15, ptr %b, align 8
  %16 = load i64, ptr %a, align 8, !dbg !1055
  %17 = load i64, ptr %b, align 8, !dbg !1060
  %lt = icmp ult i64 %16, %17, !dbg !1055
  br i1 %lt, label %cond.lhs, label %cond.rhs, !dbg !1055

cond.lhs:                                         ; preds = %if.exit
  %18 = load i64, ptr %x, align 8, !dbg !1061
  br label %cond.phi, !dbg !1061

cond.rhs:                                         ; preds = %if.exit
  %19 = load i64, ptr %.anon, align 8, !dbg !1062
  br label %cond.phi, !dbg !1062

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %18, %cond.lhs ], [ %19, %cond.rhs ], !dbg !1062
  store i64 %val, ptr %n, align 8, !dbg !1062
  %20 = load ptr, ptr %self, align 8, !dbg !1063
  %ptradd5 = getelementptr inbounds i8, ptr %20, i64 24, !dbg !1063
  %21 = load %"char[]", ptr %ptradd5, align 8, !dbg !1063
  %22 = extractvalue %"char[]" %21, 0, !dbg !1063
  %23 = load ptr, ptr %self, align 8, !dbg !1064
  %ptradd6 = getelementptr inbounds i8, ptr %23, i64 40, !dbg !1064
  %24 = load i64, ptr %ptradd6, align 8, !dbg !1064
  %25 = extractvalue %"char[]" %21, 1, !dbg !1064
  %gt = icmp ugt i64 %24, %25, !dbg !1064
  %26 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1064
  br i1 %26, label %panic7, label %checkok10, !dbg !1064

checkok10:                                        ; preds = %cond.phi
  %27 = load i64, ptr %n, align 8, !dbg !1065
  %add = add i64 %24, %27, !dbg !1065
  %lt11 = icmp ult i64 %25, %add, !dbg !1065
  %sub12 = sub i64 %add, 1, !dbg !1065
  %28 = call i1 @llvm.expect.i1(i1 %lt11, i1 false), !dbg !1065
  br i1 %28, label %panic13, label %checkok20, !dbg !1065

checkok20:                                        ; preds = %checkok10
  %size = sub i64 %add, %24, !dbg !1063
  %ptradd21 = getelementptr inbounds i8, ptr %22, i64 %24, !dbg !1063
  %29 = insertvalue %"char[]" undef, ptr %ptradd21, 0, !dbg !1063
  %30 = insertvalue %"char[]" %29, i64 %size, 1, !dbg !1063
  %31 = load %"char[]", ptr %bytes, align 8, !dbg !1066
  %32 = extractvalue %"char[]" %31, 0, !dbg !1066
  %33 = extractvalue %"char[]" %31, 1, !dbg !1067
  %gt22 = icmp ugt i64 0, %33, !dbg !1067
  %34 = call i1 @llvm.expect.i1(i1 %gt22, i1 false), !dbg !1067
  br i1 %34, label %panic23, label %checkok30, !dbg !1067

checkok30:                                        ; preds = %checkok20
  %35 = load i64, ptr %n, align 8, !dbg !1068
  %add31 = add i64 0, %35, !dbg !1068
  %lt32 = icmp ult i64 %33, %add31, !dbg !1068
  %sub33 = sub i64 %add31, 1, !dbg !1068
  %36 = call i1 @llvm.expect.i1(i1 %lt32, i1 false), !dbg !1068
  br i1 %36, label %panic34, label %checkok41, !dbg !1068

checkok41:                                        ; preds = %checkok30
  %size42 = sub i64 %add31, 0, !dbg !1066
  %37 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !1066
  %38 = insertvalue %"char[]" %37, i64 %size42, 1, !dbg !1066
  %39 = extractvalue %"char[]" %38, 0, !dbg !1066
  %40 = extractvalue %"char[]" %30, 0, !dbg !1066
  %41 = extractvalue %"char[]" %30, 1, !dbg !1066
  %42 = extractvalue %"char[]" %38, 1, !dbg !1066
  %neq = icmp ne i64 %42, %41, !dbg !1066
  %43 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1066
  br i1 %43, label %panic43, label %checkok50, !dbg !1066

checkok50:                                        ; preds = %checkok41
  %44 = mul i64 %41, 1, !dbg !1066
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %39, ptr align 1 %40, i64 %44, i1 false), !dbg !1066
  %45 = load ptr, ptr %self, align 8, !dbg !1069
  %ptradd51 = getelementptr inbounds i8, ptr %45, i64 40, !dbg !1069
  %46 = load i64, ptr %ptradd51, align 8, !dbg !1069
  %47 = load i64, ptr %n, align 8, !dbg !1070
  %add52 = add i64 %46, %47, !dbg !1069
  store i64 %add52, ptr %ptradd51, align 8, !dbg !1069
  %48 = load ptr, ptr %self, align 8, !dbg !1071
  %ptradd53 = getelementptr inbounds i8, ptr %48, i64 56, !dbg !1071
  %49 = load i64, ptr %n, align 8, !dbg !1072
  %lt54 = icmp ult i64 0, %49, !dbg !1072
  %50 = zext i1 %lt54 to i8, !dbg !1072
  store i8 %50, ptr %ptradd53, align 8, !dbg !1072
  %51 = load ptr, ptr %self, align 8
  store ptr %51, ptr %self55, align 8
  %52 = load ptr, ptr %self55, align 8, !dbg !1073
  %ptradd56 = getelementptr inbounds i8, ptr %52, i64 40, !dbg !1073
  %53 = load i64, ptr %ptradd56, align 8, !dbg !1073
  %54 = load ptr, ptr %self55, align 8, !dbg !1076
  %ptradd57 = getelementptr inbounds i8, ptr %54, i64 16, !dbg !1076
  %55 = load i64, ptr %ptradd57, align 8, !dbg !1076
  %ge = icmp uge i64 %53, %55, !dbg !1073
  br i1 %ge, label %if.then58, label %if.exit130, !dbg !1073

if.then58:                                        ; preds = %checkok50
    #dbg_declare(ptr %readable59, !1077, !DIExpression(), !1079)
  %56 = load ptr, ptr %self55, align 8, !dbg !1080
  %ptradd60 = getelementptr inbounds i8, ptr %56, i64 48, !dbg !1080
  %57 = load i64, ptr %ptradd60, align 8, !dbg !1080
  %58 = load ptr, ptr %self55, align 8, !dbg !1081
  %ptradd61 = getelementptr inbounds i8, ptr %58, i64 40, !dbg !1081
  %59 = load i64, ptr %ptradd61, align 8, !dbg !1081
  %sub62 = sub i64 %57, %59, !dbg !1080
  store i64 %sub62, ptr %readable59, align 8, !dbg !1080
  %60 = load ptr, ptr %self55, align 8, !dbg !1082
  %ptradd63 = getelementptr inbounds i8, ptr %60, i64 24, !dbg !1082
  %61 = load %"char[]", ptr %ptradd63, align 8, !dbg !1082
  %62 = extractvalue %"char[]" %61, 0, !dbg !1082
  %63 = load ptr, ptr %self55, align 8, !dbg !1083
  %ptradd64 = getelementptr inbounds i8, ptr %63, i64 40, !dbg !1083
  %64 = load i64, ptr %ptradd64, align 8, !dbg !1083
  %sub65 = sub i64 %64, 1, !dbg !1083
  %65 = extractvalue %"char[]" %61, 1, !dbg !1083
  %gt66 = icmp sgt i64 %sub65, %65, !dbg !1083
  %66 = call i1 @llvm.expect.i1(i1 %gt66, i1 false), !dbg !1083
  br i1 %66, label %panic67, label %checkok74, !dbg !1083

checkok74:                                        ; preds = %if.then58
  %underflow = icmp slt i64 %sub65, 0, !dbg !1082
  %67 = call i1 @llvm.expect.i1(i1 %underflow, i1 false), !dbg !1082
  br i1 %67, label %panic75, label %checkok80, !dbg !1082

checkok80:                                        ; preds = %checkok74
  %68 = load i64, ptr %readable59, align 8, !dbg !1084
  %add81 = add i64 1, %68, !dbg !1085
  %add82 = add i64 %sub65, %add81, !dbg !1085
  %lt83 = icmp slt i64 %65, %add82, !dbg !1085
  %sub84 = sub i64 %add82, 1, !dbg !1085
  %69 = call i1 @llvm.expect.i1(i1 %lt83, i1 false), !dbg !1085
  br i1 %69, label %panic85, label %checkok92, !dbg !1085

checkok92:                                        ; preds = %checkok80
  %size93 = sub i64 %add82, %sub65, !dbg !1082
  %ptradd94 = getelementptr inbounds i8, ptr %62, i64 %sub65, !dbg !1082
  %70 = insertvalue %"char[]" undef, ptr %ptradd94, 0, !dbg !1082
  %71 = insertvalue %"char[]" %70, i64 %size93, 1, !dbg !1082
  %72 = load ptr, ptr %self55, align 8, !dbg !1086
  %ptradd95 = getelementptr inbounds i8, ptr %72, i64 24, !dbg !1086
  %73 = load %"char[]", ptr %ptradd95, align 8, !dbg !1086
  %74 = extractvalue %"char[]" %73, 0, !dbg !1086
  %75 = extractvalue %"char[]" %73, 1, !dbg !1087
  %gt96 = icmp sgt i64 0, %75, !dbg !1087
  %76 = call i1 @llvm.expect.i1(i1 %gt96, i1 false), !dbg !1087
  br i1 %76, label %panic97, label %checkok104, !dbg !1087

checkok104:                                       ; preds = %checkok92
  %77 = load i64, ptr %readable59, align 8, !dbg !1088
  %add105 = add i64 1, %77, !dbg !1089
  %add106 = add i64 0, %add105, !dbg !1089
  %lt107 = icmp slt i64 %75, %add106, !dbg !1089
  %sub108 = sub i64 %add106, 1, !dbg !1089
  %78 = call i1 @llvm.expect.i1(i1 %lt107, i1 false), !dbg !1089
  br i1 %78, label %panic109, label %checkok116, !dbg !1089

checkok116:                                       ; preds = %checkok104
  %size117 = sub i64 %add106, 0, !dbg !1086
  %79 = insertvalue %"char[]" undef, ptr %74, 0, !dbg !1086
  %80 = insertvalue %"char[]" %79, i64 %size117, 1, !dbg !1086
  %81 = extractvalue %"char[]" %80, 0, !dbg !1086
  %82 = extractvalue %"char[]" %71, 0, !dbg !1086
  %83 = extractvalue %"char[]" %71, 1, !dbg !1086
  %84 = extractvalue %"char[]" %80, 1, !dbg !1086
  %neq118 = icmp ne i64 %84, %83, !dbg !1086
  %85 = call i1 @llvm.expect.i1(i1 %neq118, i1 false), !dbg !1086
  br i1 %85, label %panic119, label %checkok126, !dbg !1086

checkok126:                                       ; preds = %checkok116
  %86 = mul i64 %83, 1, !dbg !1086
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %81, ptr align 1 %82, i64 %86, i1 false), !dbg !1086
  %87 = load ptr, ptr %self55, align 8, !dbg !1090
  %ptradd127 = getelementptr inbounds i8, ptr %87, i64 48, !dbg !1090
  %88 = load i64, ptr %readable59, align 8, !dbg !1091
  %add128 = add i64 1, %88, !dbg !1092
  store i64 %add128, ptr %ptradd127, align 8, !dbg !1092
  %89 = load ptr, ptr %self55, align 8, !dbg !1093
  %ptradd129 = getelementptr inbounds i8, ptr %89, i64 40, !dbg !1093
  store i64 1, ptr %ptradd129, align 8, !dbg !1094
  br label %if.exit130, !dbg !1094

if.exit130:                                       ; preds = %checkok126, %checkok50
  %90 = load i64, ptr %n, align 8, !dbg !1095
  store i64 %90, ptr %0, align 8, !dbg !1095
  ret i64 0, !dbg !1095

panic:                                            ; preds = %entry
  %91 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1040
  call void %91(ptr @.panic_msg, i64 62, ptr @.file.97, i64 13, ptr @.func.58, i64 4, i32 65) #5, !dbg !1040
  unreachable, !dbg !1040

panic7:                                           ; preds = %cond.phi
  store i64 %25, ptr %taddr, align 8
  %92 = insertvalue %any undef, ptr %taddr, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr8, align 8
  %94 = insertvalue %any undef, ptr %taddr8, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %93, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %95, ptr %ptradd9, align 16
  %96 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %96, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.97, i64 13, ptr @.func.58, i64 4, i32 74, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1063
  unreachable, !dbg !1063

panic13:                                          ; preds = %checkok10
  store i64 %sub12, ptr %taddr14, align 8
  %97 = insertvalue %any undef, ptr %taddr14, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr15, align 8
  %99 = insertvalue %any undef, ptr %taddr15, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %98, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %100, ptr %ptradd17, align 16
  %101 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %101, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 60, ptr @.file.97, i64 13, ptr @.func.58, i64 4, i32 74, ptr byval(%"any[]") align 8 %indirectarg19) #5, !dbg !1063
  unreachable, !dbg !1063

panic23:                                          ; preds = %checkok20
  store i64 %33, ptr %taddr24, align 8
  %102 = insertvalue %any undef, ptr %taddr24, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr25, align 8
  %104 = insertvalue %any undef, ptr %taddr25, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %103, ptr %varargslots26, align 16
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %105, ptr %ptradd27, align 16
  %106 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %106, i64 2, 1
  store %"any[]" %"$$temp28", ptr %indirectarg29, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.97, i64 13, ptr @.func.58, i64 4, i32 74, ptr byval(%"any[]") align 8 %indirectarg29) #5, !dbg !1066
  unreachable, !dbg !1066

panic34:                                          ; preds = %checkok30
  store i64 %sub33, ptr %taddr35, align 8
  %107 = insertvalue %any undef, ptr %taddr35, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr36, align 8
  %109 = insertvalue %any undef, ptr %taddr36, 0
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %108, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %110, ptr %ptradd38, align 16
  %111 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %111, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 60, ptr @.file.97, i64 13, ptr @.func.58, i64 4, i32 74, ptr byval(%"any[]") align 8 %indirectarg40) #5, !dbg !1066
  unreachable, !dbg !1066

panic43:                                          ; preds = %checkok41
  store i64 %42, ptr %taddr44, align 8
  %112 = insertvalue %any undef, ptr %taddr44, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr45, align 8
  %114 = insertvalue %any undef, ptr %taddr45, 0
  %115 = insertvalue %any %114, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %113, ptr %varargslots46, align 16
  %ptradd47 = getelementptr inbounds i8, ptr %varargslots46, i64 16
  store %any %115, ptr %ptradd47, align 16
  %116 = insertvalue %"any[]" undef, ptr %varargslots46, 0
  %"$$temp48" = insertvalue %"any[]" %116, i64 2, 1
  store %"any[]" %"$$temp48", ptr %indirectarg49, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.76, i64 38, ptr @.file.97, i64 13, ptr @.func.58, i64 4, i32 74, ptr byval(%"any[]") align 8 %indirectarg49) #5, !dbg !1066
  unreachable, !dbg !1066

panic67:                                          ; preds = %if.then58
  store i64 %65, ptr %taddr68, align 8
  %117 = insertvalue %any undef, ptr %taddr68, 0
  %118 = insertvalue %any %117, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub65, ptr %taddr69, align 8
  %119 = insertvalue %any undef, ptr %taddr69, 0
  %120 = insertvalue %any %119, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %118, ptr %varargslots70, align 16
  %ptradd71 = getelementptr inbounds i8, ptr %varargslots70, i64 16
  store %any %120, ptr %ptradd71, align 16
  %121 = insertvalue %"any[]" undef, ptr %varargslots70, 0
  %"$$temp72" = insertvalue %"any[]" %121, i64 2, 1
  store %"any[]" %"$$temp72", ptr %indirectarg73, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.97, i64 13, ptr @.func.58, i64 4, i32 144, ptr byval(%"any[]") align 8 %indirectarg73) #5, !dbg !1082
  unreachable, !dbg !1082

panic75:                                          ; preds = %checkok74
  store i64 %sub65, ptr %taddr76, align 8
  %122 = insertvalue %any undef, ptr %taddr76, 0
  %123 = insertvalue %any %122, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %123, ptr %varargslots77, align 16
  %124 = insertvalue %"any[]" undef, ptr %varargslots77, 0
  %"$$temp78" = insertvalue %"any[]" %124, i64 1, 1
  store %"any[]" %"$$temp78", ptr %indirectarg79, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.101, i64 22, ptr @.file.97, i64 13, ptr @.func.58, i64 4, i32 144, ptr byval(%"any[]") align 8 %indirectarg79) #5, !dbg !1083
  unreachable, !dbg !1083

panic85:                                          ; preds = %checkok80
  store i64 %sub84, ptr %taddr86, align 8
  %125 = insertvalue %any undef, ptr %taddr86, 0
  %126 = insertvalue %any %125, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %65, ptr %taddr87, align 8
  %127 = insertvalue %any undef, ptr %taddr87, 0
  %128 = insertvalue %any %127, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %126, ptr %varargslots88, align 16
  %ptradd89 = getelementptr inbounds i8, ptr %varargslots88, i64 16
  store %any %128, ptr %ptradd89, align 16
  %129 = insertvalue %"any[]" undef, ptr %varargslots88, 0
  %"$$temp90" = insertvalue %"any[]" %129, i64 2, 1
  store %"any[]" %"$$temp90", ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 60, ptr @.file.97, i64 13, ptr @.func.58, i64 4, i32 144, ptr byval(%"any[]") align 8 %indirectarg91) #5, !dbg !1082
  unreachable, !dbg !1082

panic97:                                          ; preds = %checkok92
  store i64 %75, ptr %taddr98, align 8
  %130 = insertvalue %any undef, ptr %taddr98, 0
  %131 = insertvalue %any %130, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr99, align 8
  %132 = insertvalue %any undef, ptr %taddr99, 0
  %133 = insertvalue %any %132, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %131, ptr %varargslots100, align 16
  %ptradd101 = getelementptr inbounds i8, ptr %varargslots100, i64 16
  store %any %133, ptr %ptradd101, align 16
  %134 = insertvalue %"any[]" undef, ptr %varargslots100, 0
  %"$$temp102" = insertvalue %"any[]" %134, i64 2, 1
  store %"any[]" %"$$temp102", ptr %indirectarg103, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.97, i64 13, ptr @.func.58, i64 4, i32 144, ptr byval(%"any[]") align 8 %indirectarg103) #5, !dbg !1086
  unreachable, !dbg !1086

panic109:                                         ; preds = %checkok104
  store i64 %sub108, ptr %taddr110, align 8
  %135 = insertvalue %any undef, ptr %taddr110, 0
  %136 = insertvalue %any %135, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %75, ptr %taddr111, align 8
  %137 = insertvalue %any undef, ptr %taddr111, 0
  %138 = insertvalue %any %137, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %136, ptr %varargslots112, align 16
  %ptradd113 = getelementptr inbounds i8, ptr %varargslots112, i64 16
  store %any %138, ptr %ptradd113, align 16
  %139 = insertvalue %"any[]" undef, ptr %varargslots112, 0
  %"$$temp114" = insertvalue %"any[]" %139, i64 2, 1
  store %"any[]" %"$$temp114", ptr %indirectarg115, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 60, ptr @.file.97, i64 13, ptr @.func.58, i64 4, i32 144, ptr byval(%"any[]") align 8 %indirectarg115) #5, !dbg !1086
  unreachable, !dbg !1086

panic119:                                         ; preds = %checkok116
  store i64 %84, ptr %taddr120, align 8
  %140 = insertvalue %any undef, ptr %taddr120, 0
  %141 = insertvalue %any %140, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %83, ptr %taddr121, align 8
  %142 = insertvalue %any undef, ptr %taddr121, 0
  %143 = insertvalue %any %142, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %141, ptr %varargslots122, align 16
  %ptradd123 = getelementptr inbounds i8, ptr %varargslots122, i64 16
  store %any %143, ptr %ptradd123, align 16
  %144 = insertvalue %"any[]" undef, ptr %varargslots122, 0
  %"$$temp124" = insertvalue %"any[]" %144, i64 2, 1
  store %"any[]" %"$$temp124", ptr %indirectarg125, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.76, i64 38, ptr @.file.97, i64 13, ptr @.func.58, i64 4, i32 144, ptr byval(%"any[]") align 8 %indirectarg125) #5, !dbg !1086
  unreachable, !dbg !1086
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteBuffer.read_byte(ptr %0, ptr %1) #0 comdat !dbg !1096 {
entry:
  %self = alloca ptr, align 8
  %readable = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %self13 = alloca ptr, align 8
  %readable18 = alloca i64, align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr34 = alloca i64, align 8
  %varargslots35 = alloca [1 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr43 = alloca i64, align 8
  %taddr44 = alloca i64, align 8
  %varargslots45 = alloca [2 x %any], align 16
  %indirectarg48 = alloca %"any[]", align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca i64, align 8
  %varargslots56 = alloca [2 x %any], align 16
  %indirectarg59 = alloca %"any[]", align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %varargslots68 = alloca [2 x %any], align 16
  %indirectarg71 = alloca %"any[]", align 8
  %taddr75 = alloca i64, align 8
  %taddr76 = alloca i64, align 8
  %varargslots77 = alloca [2 x %any], align 16
  %indirectarg80 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !1099
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1099
  br i1 %3, label %panic, label %checkok, !dbg !1099

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1100, !DIExpression(), !1101)
    #dbg_declare(ptr %readable, !1102, !DIExpression(), !1103)
  %4 = load ptr, ptr %self, align 8, !dbg !1104
  %ptradd = getelementptr inbounds i8, ptr %4, i64 48, !dbg !1104
  %5 = load i64, ptr %ptradd, align 8, !dbg !1104
  %6 = load ptr, ptr %self, align 8, !dbg !1105
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 40, !dbg !1105
  %7 = load i64, ptr %ptradd1, align 8, !dbg !1105
  %sub = sub i64 %5, %7, !dbg !1104
  store i64 %sub, ptr %readable, align 8, !dbg !1104
  %8 = load i64, ptr %readable, align 8, !dbg !1106
  %eq = icmp eq i64 0, %8, !dbg !1106
  br i1 %eq, label %if.then, label %if.exit, !dbg !1106

if.then:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !1107
  %ptradd2 = getelementptr inbounds i8, ptr %9, i64 56, !dbg !1107
  store i8 0, ptr %ptradd2, align 8, !dbg !1109
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !1110

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %c, !1111, !DIExpression(), !1112)
  %10 = load ptr, ptr %self, align 8, !dbg !1113
  %ptradd3 = getelementptr inbounds i8, ptr %10, i64 24, !dbg !1113
  %ptradd4 = getelementptr inbounds i8, ptr %ptradd3, i64 8, !dbg !1113
  %11 = load i64, ptr %ptradd4, align 8, !dbg !1113
  %12 = load ptr, ptr %ptradd3, align 8, !dbg !1113
  %13 = load ptr, ptr %self, align 8, !dbg !1114
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 40, !dbg !1114
  %14 = load i64, ptr %ptradd5, align 8, !dbg !1114
  %ge = icmp uge i64 %14, %11, !dbg !1114
  %15 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1114
  br i1 %15, label %panic6, label %checkok9, !dbg !1114

checkok9:                                         ; preds = %if.exit
  %ptradd10 = getelementptr inbounds i8, ptr %12, i64 %14, !dbg !1114
  %16 = load i8, ptr %ptradd10, align 1, !dbg !1114
  store i8 %16, ptr %c, align 1, !dbg !1114
  %17 = load ptr, ptr %self, align 8, !dbg !1115
  %ptradd11 = getelementptr inbounds i8, ptr %17, i64 40, !dbg !1115
  %18 = load i64, ptr %ptradd11, align 8, !dbg !1115
  %add = add i64 %18, 1, !dbg !1115
  store i64 %add, ptr %ptradd11, align 8, !dbg !1115
  %19 = load ptr, ptr %self, align 8, !dbg !1116
  %ptradd12 = getelementptr inbounds i8, ptr %19, i64 56, !dbg !1116
  store i8 1, ptr %ptradd12, align 8, !dbg !1117
  %20 = load ptr, ptr %self, align 8
  store ptr %20, ptr %self13, align 8
  %21 = load ptr, ptr %self13, align 8, !dbg !1118
  %ptradd14 = getelementptr inbounds i8, ptr %21, i64 40, !dbg !1118
  %22 = load i64, ptr %ptradd14, align 8, !dbg !1118
  %23 = load ptr, ptr %self13, align 8, !dbg !1121
  %ptradd15 = getelementptr inbounds i8, ptr %23, i64 16, !dbg !1121
  %24 = load i64, ptr %ptradd15, align 8, !dbg !1121
  %ge16 = icmp uge i64 %22, %24, !dbg !1118
  br i1 %ge16, label %if.then17, label %if.exit85, !dbg !1118

if.then17:                                        ; preds = %checkok9
    #dbg_declare(ptr %readable18, !1122, !DIExpression(), !1124)
  %25 = load ptr, ptr %self13, align 8, !dbg !1125
  %ptradd19 = getelementptr inbounds i8, ptr %25, i64 48, !dbg !1125
  %26 = load i64, ptr %ptradd19, align 8, !dbg !1125
  %27 = load ptr, ptr %self13, align 8, !dbg !1126
  %ptradd20 = getelementptr inbounds i8, ptr %27, i64 40, !dbg !1126
  %28 = load i64, ptr %ptradd20, align 8, !dbg !1126
  %sub21 = sub i64 %26, %28, !dbg !1125
  store i64 %sub21, ptr %readable18, align 8, !dbg !1125
  %29 = load ptr, ptr %self13, align 8, !dbg !1127
  %ptradd22 = getelementptr inbounds i8, ptr %29, i64 24, !dbg !1127
  %30 = load %"char[]", ptr %ptradd22, align 8, !dbg !1127
  %31 = extractvalue %"char[]" %30, 0, !dbg !1127
  %32 = load ptr, ptr %self13, align 8, !dbg !1128
  %ptradd23 = getelementptr inbounds i8, ptr %32, i64 40, !dbg !1128
  %33 = load i64, ptr %ptradd23, align 8, !dbg !1128
  %sub24 = sub i64 %33, 1, !dbg !1128
  %34 = extractvalue %"char[]" %30, 1, !dbg !1128
  %gt = icmp sgt i64 %sub24, %34, !dbg !1128
  %35 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1128
  br i1 %35, label %panic25, label %checkok32, !dbg !1128

checkok32:                                        ; preds = %if.then17
  %underflow = icmp slt i64 %sub24, 0, !dbg !1127
  %36 = call i1 @llvm.expect.i1(i1 %underflow, i1 false), !dbg !1127
  br i1 %36, label %panic33, label %checkok38, !dbg !1127

checkok38:                                        ; preds = %checkok32
  %37 = load i64, ptr %readable18, align 8, !dbg !1129
  %add39 = add i64 1, %37, !dbg !1130
  %add40 = add i64 %sub24, %add39, !dbg !1130
  %lt = icmp slt i64 %34, %add40, !dbg !1130
  %sub41 = sub i64 %add40, 1, !dbg !1130
  %38 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !1130
  br i1 %38, label %panic42, label %checkok49, !dbg !1130

checkok49:                                        ; preds = %checkok38
  %size = sub i64 %add40, %sub24, !dbg !1127
  %ptradd50 = getelementptr inbounds i8, ptr %31, i64 %sub24, !dbg !1127
  %39 = insertvalue %"char[]" undef, ptr %ptradd50, 0, !dbg !1127
  %40 = insertvalue %"char[]" %39, i64 %size, 1, !dbg !1127
  %41 = load ptr, ptr %self13, align 8, !dbg !1131
  %ptradd51 = getelementptr inbounds i8, ptr %41, i64 24, !dbg !1131
  %42 = load %"char[]", ptr %ptradd51, align 8, !dbg !1131
  %43 = extractvalue %"char[]" %42, 0, !dbg !1131
  %44 = extractvalue %"char[]" %42, 1, !dbg !1132
  %gt52 = icmp sgt i64 0, %44, !dbg !1132
  %45 = call i1 @llvm.expect.i1(i1 %gt52, i1 false), !dbg !1132
  br i1 %45, label %panic53, label %checkok60, !dbg !1132

checkok60:                                        ; preds = %checkok49
  %46 = load i64, ptr %readable18, align 8, !dbg !1133
  %add61 = add i64 1, %46, !dbg !1134
  %add62 = add i64 0, %add61, !dbg !1134
  %lt63 = icmp slt i64 %44, %add62, !dbg !1134
  %sub64 = sub i64 %add62, 1, !dbg !1134
  %47 = call i1 @llvm.expect.i1(i1 %lt63, i1 false), !dbg !1134
  br i1 %47, label %panic65, label %checkok72, !dbg !1134

checkok72:                                        ; preds = %checkok60
  %size73 = sub i64 %add62, 0, !dbg !1131
  %48 = insertvalue %"char[]" undef, ptr %43, 0, !dbg !1131
  %49 = insertvalue %"char[]" %48, i64 %size73, 1, !dbg !1131
  %50 = extractvalue %"char[]" %49, 0, !dbg !1131
  %51 = extractvalue %"char[]" %40, 0, !dbg !1131
  %52 = extractvalue %"char[]" %40, 1, !dbg !1131
  %53 = extractvalue %"char[]" %49, 1, !dbg !1131
  %neq = icmp ne i64 %53, %52, !dbg !1131
  %54 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1131
  br i1 %54, label %panic74, label %checkok81, !dbg !1131

checkok81:                                        ; preds = %checkok72
  %55 = mul i64 %52, 1, !dbg !1131
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %50, ptr align 1 %51, i64 %55, i1 false), !dbg !1131
  %56 = load ptr, ptr %self13, align 8, !dbg !1135
  %ptradd82 = getelementptr inbounds i8, ptr %56, i64 48, !dbg !1135
  %57 = load i64, ptr %readable18, align 8, !dbg !1136
  %add83 = add i64 1, %57, !dbg !1137
  store i64 %add83, ptr %ptradd82, align 8, !dbg !1137
  %58 = load ptr, ptr %self13, align 8, !dbg !1138
  %ptradd84 = getelementptr inbounds i8, ptr %58, i64 40, !dbg !1138
  store i64 1, ptr %ptradd84, align 8, !dbg !1139
  br label %if.exit85, !dbg !1139

if.exit85:                                        ; preds = %checkok81, %checkok9
  %59 = load i8, ptr %c, align 1, !dbg !1140
  store i8 %59, ptr %0, align 1, !dbg !1140
  ret i64 0, !dbg !1140

panic:                                            ; preds = %entry
  %60 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1101
  call void %60(ptr @.panic_msg, i64 62, ptr @.file.97, i64 13, ptr @.func.62, i64 9, i32 81) #5, !dbg !1101
  unreachable, !dbg !1101

panic6:                                           ; preds = %if.exit
  store i64 %11, ptr %taddr, align 8
  %61 = insertvalue %any undef, ptr %taddr, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr7, align 8
  %63 = insertvalue %any undef, ptr %taddr7, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %62, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %64, ptr %ptradd8, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.97, i64 13, ptr @.func.62, i64 9, i32 89, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1114
  unreachable, !dbg !1114

panic25:                                          ; preds = %if.then17
  store i64 %34, ptr %taddr26, align 8
  %66 = insertvalue %any undef, ptr %taddr26, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub24, ptr %taddr27, align 8
  %68 = insertvalue %any undef, ptr %taddr27, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %67, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %69, ptr %ptradd29, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.97, i64 13, ptr @.func.62, i64 9, i32 144, ptr byval(%"any[]") align 8 %indirectarg31) #5, !dbg !1127
  unreachable, !dbg !1127

panic33:                                          ; preds = %checkok32
  store i64 %sub24, ptr %taddr34, align 8
  %71 = insertvalue %any undef, ptr %taddr34, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %72, ptr %varargslots35, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots35, 0
  %"$$temp36" = insertvalue %"any[]" %73, i64 1, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.101, i64 22, ptr @.file.97, i64 13, ptr @.func.62, i64 9, i32 144, ptr byval(%"any[]") align 8 %indirectarg37) #5, !dbg !1128
  unreachable, !dbg !1128

panic42:                                          ; preds = %checkok38
  store i64 %sub41, ptr %taddr43, align 8
  %74 = insertvalue %any undef, ptr %taddr43, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %34, ptr %taddr44, align 8
  %76 = insertvalue %any undef, ptr %taddr44, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %75, ptr %varargslots45, align 16
  %ptradd46 = getelementptr inbounds i8, ptr %varargslots45, i64 16
  store %any %77, ptr %ptradd46, align 16
  %78 = insertvalue %"any[]" undef, ptr %varargslots45, 0
  %"$$temp47" = insertvalue %"any[]" %78, i64 2, 1
  store %"any[]" %"$$temp47", ptr %indirectarg48, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 60, ptr @.file.97, i64 13, ptr @.func.62, i64 9, i32 144, ptr byval(%"any[]") align 8 %indirectarg48) #5, !dbg !1127
  unreachable, !dbg !1127

panic53:                                          ; preds = %checkok49
  store i64 %44, ptr %taddr54, align 8
  %79 = insertvalue %any undef, ptr %taddr54, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr55, align 8
  %81 = insertvalue %any undef, ptr %taddr55, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %80, ptr %varargslots56, align 16
  %ptradd57 = getelementptr inbounds i8, ptr %varargslots56, i64 16
  store %any %82, ptr %ptradd57, align 16
  %83 = insertvalue %"any[]" undef, ptr %varargslots56, 0
  %"$$temp58" = insertvalue %"any[]" %83, i64 2, 1
  store %"any[]" %"$$temp58", ptr %indirectarg59, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.97, i64 13, ptr @.func.62, i64 9, i32 144, ptr byval(%"any[]") align 8 %indirectarg59) #5, !dbg !1131
  unreachable, !dbg !1131

panic65:                                          ; preds = %checkok60
  store i64 %sub64, ptr %taddr66, align 8
  %84 = insertvalue %any undef, ptr %taddr66, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %44, ptr %taddr67, align 8
  %86 = insertvalue %any undef, ptr %taddr67, 0
  %87 = insertvalue %any %86, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %85, ptr %varargslots68, align 16
  %ptradd69 = getelementptr inbounds i8, ptr %varargslots68, i64 16
  store %any %87, ptr %ptradd69, align 16
  %88 = insertvalue %"any[]" undef, ptr %varargslots68, 0
  %"$$temp70" = insertvalue %"any[]" %88, i64 2, 1
  store %"any[]" %"$$temp70", ptr %indirectarg71, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 60, ptr @.file.97, i64 13, ptr @.func.62, i64 9, i32 144, ptr byval(%"any[]") align 8 %indirectarg71) #5, !dbg !1131
  unreachable, !dbg !1131

panic74:                                          ; preds = %checkok72
  store i64 %53, ptr %taddr75, align 8
  %89 = insertvalue %any undef, ptr %taddr75, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %52, ptr %taddr76, align 8
  %91 = insertvalue %any undef, ptr %taddr76, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %90, ptr %varargslots77, align 16
  %ptradd78 = getelementptr inbounds i8, ptr %varargslots77, i64 16
  store %any %92, ptr %ptradd78, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots77, 0
  %"$$temp79" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp79", ptr %indirectarg80, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.76, i64 38, ptr @.file.97, i64 13, ptr @.func.62, i64 9, i32 144, ptr byval(%"any[]") align 8 %indirectarg80) #5, !dbg !1131
  unreachable, !dbg !1131
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteBuffer.pushback_byte(ptr %0) #0 comdat !dbg !1141 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1144
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1144
  br i1 %2, label %panic, label %checkok, !dbg !1144

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1145, !DIExpression(), !1146)
  %3 = load ptr, ptr %self, align 8, !dbg !1147
  %ptradd = getelementptr inbounds i8, ptr %3, i64 56, !dbg !1147
  %4 = load i8, ptr %ptradd, align 8, !dbg !1147
  %5 = trunc i8 %4 to i1, !dbg !1147
  %not = xor i1 %5, true, !dbg !1147
  br i1 %not, label %if.then, label %if.exit, !dbg !1147

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !1148

if.exit:                                          ; preds = %checkok
  %6 = load ptr, ptr %self, align 8, !dbg !1149
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 40, !dbg !1149
  %7 = load i64, ptr %ptradd1, align 8, !dbg !1149
  %lt = icmp ult i64 0, %7, !dbg !1149
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1149

assert_fail:                                      ; preds = %if.exit
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1149
  call void %8(ptr @.panic_msg.67, i64 16, ptr @.file.97, i64 13, ptr @.func.63, i64 13, i32 102) #5, !dbg !1149
  unreachable, !dbg !1149

assert_ok:                                        ; preds = %if.exit
  %9 = load ptr, ptr %self, align 8, !dbg !1150
  %ptradd2 = getelementptr inbounds i8, ptr %9, i64 40, !dbg !1150
  %10 = load i64, ptr %ptradd2, align 8, !dbg !1150
  %sub = sub i64 %10, 1, !dbg !1150
  store i64 %sub, ptr %ptradd2, align 8, !dbg !1150
  %11 = load ptr, ptr %self, align 8, !dbg !1151
  %ptradd3 = getelementptr inbounds i8, ptr %11, i64 56, !dbg !1151
  store i8 0, ptr %ptradd3, align 8, !dbg !1152
  ret i64 0, !dbg !1152

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1146
  call void %12(ptr @.panic_msg, i64 62, ptr @.file.97, i64 13, ptr @.func.63, i64 13, i32 99) #5, !dbg !1146
  unreachable, !dbg !1146
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteBuffer.seek(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !1153 {
entry:
  %self = alloca ptr, align 8
  %offset = alloca i64, align 8
  %seek = alloca i32, align 4
  %switch = alloca i32, align 4
  %reterr = alloca i64, align 8
  %reterr38 = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !1156
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !1156
  br i1 %5, label %panic, label %checkok, !dbg !1156

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1157, !DIExpression(), !1158)
  store i64 %2, ptr %offset, align 8
    #dbg_declare(ptr %offset, !1159, !DIExpression(), !1160)
  store i32 %3, ptr %seek, align 4
    #dbg_declare(ptr %seek, !1161, !DIExpression(), !1162)
  %6 = load i32, ptr %seek, align 4
  store i32 %6, ptr %switch, align 4
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %7 = load i32, ptr %switch, align 4
  switch i32 %7, label %switch.exit [
    i32 0, label %switch.case
    i32 1, label %switch.case2
    i32 2, label %switch.case25
  ]

switch.case:                                      ; preds = %switch.entry
  %8 = load i64, ptr %offset, align 8, !dbg !1163
  %lt = icmp slt i64 %8, 0, !dbg !1163
  br i1 %lt, label %or.phi, label %or.rhs, !dbg !1163

or.rhs:                                           ; preds = %switch.case
  %9 = load i64, ptr %offset, align 8, !dbg !1166
  %10 = load ptr, ptr %self, align 8, !dbg !1167
  %ptradd = getelementptr inbounds i8, ptr %10, i64 48, !dbg !1167
  %11 = load i64, ptr %ptradd, align 8, !dbg !1167
  %gt = icmp sgt i64 %9, %11, !dbg !1166
  %check = icmp sge i64 %11, 0, !dbg !1166
  %siui-gt = and i1 %check, %gt, !dbg !1166
  br label %or.phi, !dbg !1166

or.phi:                                           ; preds = %or.rhs, %switch.case
  %val = phi i1 [ true, %switch.case ], [ %siui-gt, %or.rhs ], !dbg !1166
  br i1 %val, label %if.then, label %if.exit, !dbg !1166

if.then:                                          ; preds = %or.phi
  ret i64 ptrtoint (ptr @"std.io.IoError$INVALID_POSITION" to i64), !dbg !1168

if.exit:                                          ; preds = %or.phi
  %12 = load ptr, ptr %self, align 8, !dbg !1169
  %ptradd1 = getelementptr inbounds i8, ptr %12, i64 40, !dbg !1169
  %13 = load i64, ptr %offset, align 8, !dbg !1170
  store i64 %13, ptr %ptradd1, align 8, !dbg !1170
  %14 = load i64, ptr %offset, align 8, !dbg !1171
  store i64 %14, ptr %0, align 8, !dbg !1171
  ret i64 0, !dbg !1171

switch.case2:                                     ; preds = %switch.entry
  %15 = load i64, ptr %offset, align 8, !dbg !1172
  %lt3 = icmp slt i64 %15, 0, !dbg !1172
  br i1 %lt3, label %and.rhs, label %and.phi, !dbg !1172

and.rhs:                                          ; preds = %switch.case2
  %16 = load ptr, ptr %self, align 8, !dbg !1174
  %ptradd4 = getelementptr inbounds i8, ptr %16, i64 40, !dbg !1174
  %17 = load i64, ptr %ptradd4, align 8, !dbg !1174
  %18 = load i64, ptr %offset, align 8, !dbg !1175
  %neg = sub i64 0, %18, !dbg !1175
  %gt5 = icmp sgt i64 %neg, %17, !dbg !1174
  %check6 = icmp sge i64 %17, 0, !dbg !1174
  %siui-gt7 = and i1 %check6, %gt5, !dbg !1174
  br label %and.phi, !dbg !1174

and.phi:                                          ; preds = %and.rhs, %switch.case2
  %val8 = phi i1 [ false, %switch.case2 ], [ %siui-gt7, %and.rhs ], !dbg !1174
  br i1 %val8, label %or.phi19, label %or.rhs9, !dbg !1174

or.rhs9:                                          ; preds = %and.phi
  %19 = load i64, ptr %offset, align 8, !dbg !1176
  %gt10 = icmp sgt i64 %19, 0, !dbg !1176
  br i1 %gt10, label %and.rhs11, label %and.phi17, !dbg !1176

and.rhs11:                                        ; preds = %or.rhs9
  %20 = load ptr, ptr %self, align 8, !dbg !1177
  %ptradd12 = getelementptr inbounds i8, ptr %20, i64 40, !dbg !1177
  %21 = load i64, ptr %ptradd12, align 8, !dbg !1177
  %22 = load i64, ptr %offset, align 8, !dbg !1178
  %add = add i64 %21, %22, !dbg !1177
  %23 = load ptr, ptr %self, align 8, !dbg !1179
  %ptradd13 = getelementptr inbounds i8, ptr %23, i64 48, !dbg !1179
  %24 = load i64, ptr %ptradd13, align 8, !dbg !1179
  %gt14 = icmp sgt i64 %add, %24, !dbg !1177
  %check15 = icmp sge i64 %24, 0, !dbg !1177
  %siui-gt16 = and i1 %check15, %gt14, !dbg !1177
  br label %and.phi17, !dbg !1177

and.phi17:                                        ; preds = %and.rhs11, %or.rhs9
  %val18 = phi i1 [ false, %or.rhs9 ], [ %siui-gt16, %and.rhs11 ], !dbg !1177
  br label %or.phi19, !dbg !1177

or.phi19:                                         ; preds = %and.phi17, %and.phi
  %val20 = phi i1 [ true, %and.phi ], [ %val18, %and.phi17 ], !dbg !1177
  br i1 %val20, label %if.then21, label %if.exit22, !dbg !1177

if.then21:                                        ; preds = %or.phi19
  ret i64 ptrtoint (ptr @"std.io.IoError$INVALID_POSITION" to i64), !dbg !1180

if.exit22:                                        ; preds = %or.phi19
  %25 = load ptr, ptr %self, align 8, !dbg !1181
  %ptradd23 = getelementptr inbounds i8, ptr %25, i64 40, !dbg !1181
  %26 = load i64, ptr %ptradd23, align 8, !dbg !1181
  %27 = load i64, ptr %offset, align 8, !dbg !1182
  %add24 = add i64 %26, %27, !dbg !1181
  store i64 %add24, ptr %ptradd23, align 8, !dbg !1181
  br label %switch.exit, !dbg !1181

switch.case25:                                    ; preds = %switch.entry
  %28 = load i64, ptr %offset, align 8, !dbg !1183
  %lt26 = icmp slt i64 %28, 0, !dbg !1183
  br i1 %lt26, label %or.phi32, label %or.rhs27, !dbg !1183

or.rhs27:                                         ; preds = %switch.case25
  %29 = load i64, ptr %offset, align 8, !dbg !1185
  %30 = load ptr, ptr %self, align 8, !dbg !1186
  %ptradd28 = getelementptr inbounds i8, ptr %30, i64 48, !dbg !1186
  %31 = load i64, ptr %ptradd28, align 8, !dbg !1186
  %gt29 = icmp sgt i64 %29, %31, !dbg !1185
  %check30 = icmp sge i64 %31, 0, !dbg !1185
  %siui-gt31 = and i1 %check30, %gt29, !dbg !1185
  br label %or.phi32, !dbg !1185

or.phi32:                                         ; preds = %or.rhs27, %switch.case25
  %val33 = phi i1 [ true, %switch.case25 ], [ %siui-gt31, %or.rhs27 ], !dbg !1185
  br i1 %val33, label %if.then34, label %if.exit35, !dbg !1185

if.then34:                                        ; preds = %or.phi32
  ret i64 ptrtoint (ptr @"std.io.IoError$INVALID_POSITION" to i64), !dbg !1187

if.exit35:                                        ; preds = %or.phi32
  %32 = load ptr, ptr %self, align 8, !dbg !1188
  %ptradd36 = getelementptr inbounds i8, ptr %32, i64 40, !dbg !1188
  %33 = load ptr, ptr %self, align 8, !dbg !1189
  %ptradd37 = getelementptr inbounds i8, ptr %33, i64 48, !dbg !1189
  %34 = load i64, ptr %ptradd37, align 8, !dbg !1189
  %35 = load i64, ptr %offset, align 8, !dbg !1190
  %sub = sub i64 %34, %35, !dbg !1189
  store i64 %sub, ptr %ptradd36, align 8, !dbg !1189
  br label %switch.exit, !dbg !1189

switch.exit:                                      ; preds = %if.exit35, %if.exit22, %switch.entry
  %36 = load ptr, ptr %self, align 8, !dbg !1191
  %ptradd39 = getelementptr inbounds i8, ptr %36, i64 40, !dbg !1191
  %37 = load i64, ptr %ptradd39, align 8, !dbg !1191
  store i64 %37, ptr %0, align 8, !dbg !1191
  ret i64 0, !dbg !1191

panic:                                            ; preds = %entry
  %38 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1158
  call void %38(ptr @.panic_msg, i64 62, ptr @.file.97, i64 13, ptr @.func.64, i64 4, i32 107) #5, !dbg !1158
  unreachable, !dbg !1158
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteBuffer.available(ptr %0, ptr %1) #0 comdat !dbg !1192 {
entry:
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !1195
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1195
  br i1 %3, label %panic, label %checkok, !dbg !1195

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1196, !DIExpression(), !1197)
  %4 = load ptr, ptr %self, align 8, !dbg !1198
  %ptradd = getelementptr inbounds i8, ptr %4, i64 48, !dbg !1198
  %5 = load i64, ptr %ptradd, align 8, !dbg !1198
  %6 = load ptr, ptr %self, align 8, !dbg !1199
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 40, !dbg !1199
  %7 = load i64, ptr %ptradd1, align 8, !dbg !1199
  %sub = sub i64 %5, %7, !dbg !1198
  store i64 %sub, ptr %0, align 8, !dbg !1198
  ret i64 0, !dbg !1198

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1197
  call void %8(ptr @.panic_msg, i64 62, ptr @.file.97, i64 13, ptr @.func.68, i64 9, i32 126) #5, !dbg !1197
  unreachable, !dbg !1197
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.io.ByteBuffer.grow(ptr %0, i64 %1) #0 comdat !dbg !1200 {
entry:
  %self = alloca ptr, align 8
  %n = alloca i64, align 8
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %p = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %new_size = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator1 = alloca %any, align 8
  %ptr2 = alloca ptr, align 8
  %new_size3 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %allocator4 = alloca %any, align 8
  %ptr5 = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %.inlinecache14 = alloca ptr, align 8
  %.cachedtype15 = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %.inlinecache26 = alloca ptr, align 8
  %.cachedtype27 = alloca ptr, align 8
  %retparam36 = alloca ptr, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype27, align 8, !dbg !1203
  store ptr null, ptr %.cachedtype15, align 8, !dbg !1203
  store ptr null, ptr %.cachedtype, align 8, !dbg !1203
  %2 = icmp eq ptr %0, null, !dbg !1203
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1203
  br i1 %3, label %panic, label %checkok, !dbg !1203

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1204, !DIExpression(), !1205)
  store i64 %1, ptr %n, align 8
    #dbg_declare(ptr %n, !1206, !DIExpression(), !1207)
  %4 = load i64, ptr %n, align 8
  store i64 %4, ptr %x, align 8
    #dbg_declare(ptr %y, !1208, !DIExpression(), !1210)
  store i64 1, ptr %y, align 8, !dbg !1212
  br label %loop.cond, !dbg !1213

loop.cond:                                        ; preds = %loop.body, %checkok
  %5 = load i64, ptr %y, align 8, !dbg !1214
  %6 = load i64, ptr %x, align 8, !dbg !1216
  %lt = icmp ult i64 %5, %6, !dbg !1214
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1214

loop.body:                                        ; preds = %loop.cond
  %7 = load i64, ptr %y, align 8, !dbg !1217
  %8 = load i64, ptr %y, align 8, !dbg !1218
  %add = add i64 %7, %8, !dbg !1217
  store i64 %add, ptr %y, align 8, !dbg !1217
  br label %loop.cond, !dbg !1217

loop.exit:                                        ; preds = %loop.cond
  %9 = load i64, ptr %y, align 8, !dbg !1219
  store i64 %9, ptr %n, align 8, !dbg !1219
    #dbg_declare(ptr %p, !1220, !DIExpression(), !1221)
  %10 = load ptr, ptr %self, align 8, !dbg !1222
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %10, i32 16, i1 false)
  %11 = load ptr, ptr %self, align 8, !dbg !1223
  %ptradd = getelementptr inbounds i8, ptr %11, i64 24, !dbg !1223
  %12 = load ptr, ptr %ptradd, align 8
  store ptr %12, ptr %ptr, align 8
  %13 = load i64, ptr %n, align 8
  store i64 %13, ptr %new_size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator1, ptr align 8 %allocator, i32 16, i1 false)
  %14 = load ptr, ptr %ptr, align 8
  store ptr %14, ptr %ptr2, align 8
  %15 = load i64, ptr %new_size, align 8
  store i64 %15, ptr %new_size3, align 8
  %16 = load i64, ptr %new_size3, align 8, !dbg !1224
  %i2nb = icmp eq i64 %16, 0, !dbg !1224
  br i1 %i2nb, label %if.then, label %if.exit10, !dbg !1224

if.then:                                          ; preds = %loop.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator4, ptr align 8 %allocator1, i32 16, i1 false)
  %17 = load ptr, ptr %ptr2, align 8
  store ptr %17, ptr %ptr5, align 8
  %18 = load ptr, ptr %ptr5, align 8, !dbg !1229
  %i2nb6 = icmp eq ptr %18, null, !dbg !1229
  br i1 %i2nb6, label %if.then7, label %if.exit, !dbg !1229

if.then7:                                         ; preds = %if.then
  br label %expr_block.exit, !dbg !1233

if.exit:                                          ; preds = %if.then
  %ptradd8 = getelementptr inbounds i8, ptr %allocator4, i64 8, !dbg !1234
  %19 = load i64, ptr %ptradd8, align 8, !dbg !1234
  %20 = inttoptr i64 %19 to ptr, !dbg !1234
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1203
  %21 = icmp eq ptr %20, %type, !dbg !1203
  br i1 %21, label %cache_hit, label %cache_miss, !dbg !1203

cache_miss:                                       ; preds = %if.exit
  %ptradd9 = getelementptr inbounds i8, ptr %20, i64 16, !dbg !1203
  %22 = load ptr, ptr %ptradd9, align 8, !dbg !1203
  %23 = call ptr @.dyn_search(ptr %22, ptr @"$sel.release"), !dbg !1203
  store ptr %23, ptr %.inlinecache, align 8, !dbg !1203
  store ptr %20, ptr %.cachedtype, align 8, !dbg !1203
  br label %24, !dbg !1203

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1203
  br label %24, !dbg !1203

24:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %23, %cache_miss ], !dbg !1203
  %25 = icmp eq ptr %fn_phi, null, !dbg !1203
  br i1 %25, label %missing_function, label %match, !dbg !1203

missing_function:                                 ; preds = %24
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1235
  call void %26(ptr @.panic_msg.90, i64 44, ptr @.file.91, i64 16, ptr @.func.102, i64 4, i32 105) #5, !dbg !1235
  unreachable, !dbg !1235

match:                                            ; preds = %24
  %27 = load ptr, ptr %allocator4, align 8, !dbg !1235
  %28 = load ptr, ptr %ptr5, align 8, !dbg !1235
  call void %fn_phi(ptr %27, ptr %28, i8 zeroext 0), !dbg !1235
  br label %expr_block.exit, !dbg !1235

expr_block.exit:                                  ; preds = %match, %if.then7
  store ptr null, ptr %blockret, align 8, !dbg !1236
  br label %expr_block.exit40, !dbg !1236

if.exit10:                                        ; preds = %loop.exit
  %29 = load ptr, ptr %ptr2, align 8, !dbg !1237
  %i2nb11 = icmp eq ptr %29, null, !dbg !1237
  br i1 %i2nb11, label %if.then12, label %if.exit24, !dbg !1237

if.then12:                                        ; preds = %if.exit10
  %ptradd13 = getelementptr inbounds i8, ptr %allocator1, i64 8, !dbg !1238
  %30 = load i64, ptr %ptradd13, align 8, !dbg !1238
  %31 = inttoptr i64 %30 to ptr, !dbg !1238
  %type16 = load ptr, ptr %.cachedtype15, align 8, !dbg !1203
  %32 = icmp eq ptr %31, %type16, !dbg !1203
  br i1 %32, label %cache_hit19, label %cache_miss17, !dbg !1203

cache_miss17:                                     ; preds = %if.then12
  %ptradd18 = getelementptr inbounds i8, ptr %31, i64 16, !dbg !1203
  %33 = load ptr, ptr %ptradd18, align 8, !dbg !1203
  %34 = call ptr @.dyn_search(ptr %33, ptr @"$sel.acquire"), !dbg !1203
  store ptr %34, ptr %.inlinecache14, align 8, !dbg !1203
  store ptr %31, ptr %.cachedtype15, align 8, !dbg !1203
  br label %35, !dbg !1203

cache_hit19:                                      ; preds = %if.then12
  %cache_hit_fn20 = load ptr, ptr %.inlinecache14, align 8, !dbg !1203
  br label %35, !dbg !1203

35:                                               ; preds = %cache_hit19, %cache_miss17
  %fn_phi21 = phi ptr [ %cache_hit_fn20, %cache_hit19 ], [ %34, %cache_miss17 ], !dbg !1203
  %36 = icmp eq ptr %fn_phi21, null, !dbg !1203
  br i1 %36, label %missing_function22, label %match23, !dbg !1203

missing_function22:                               ; preds = %35
  %37 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1240
  call void %37(ptr @.panic_msg.93, i64 44, ptr @.file.91, i64 16, ptr @.func.102, i64 4, i32 95) #5, !dbg !1240
  unreachable, !dbg !1240

match23:                                          ; preds = %35
  %38 = load ptr, ptr %allocator1, align 8
  %39 = load i64, ptr %new_size3, align 8
  %40 = call i64 %fn_phi21(ptr %retparam, ptr %38, i64 %39, i32 0, i64 0), !dbg !1240
  %not_err = icmp eq i64 %40, 0, !dbg !1240
  %41 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1240
  br i1 %41, label %after_check, label %assign_optional, !dbg !1240

assign_optional:                                  ; preds = %match23
  store i64 %40, ptr %error_var, align 8, !dbg !1240
  br label %panic_block, !dbg !1240

after_check:                                      ; preds = %match23
  %42 = load ptr, ptr %retparam, align 8, !dbg !1240
  store ptr %42, ptr %blockret, align 8, !dbg !1240
  br label %expr_block.exit40, !dbg !1240

if.exit24:                                        ; preds = %if.exit10
  %ptradd25 = getelementptr inbounds i8, ptr %allocator1, i64 8, !dbg !1241
  %43 = load i64, ptr %ptradd25, align 8, !dbg !1241
  %44 = inttoptr i64 %43 to ptr, !dbg !1241
  %type28 = load ptr, ptr %.cachedtype27, align 8, !dbg !1203
  %45 = icmp eq ptr %44, %type28, !dbg !1203
  br i1 %45, label %cache_hit31, label %cache_miss29, !dbg !1203

cache_miss29:                                     ; preds = %if.exit24
  %ptradd30 = getelementptr inbounds i8, ptr %44, i64 16, !dbg !1203
  %46 = load ptr, ptr %ptradd30, align 8, !dbg !1203
  %47 = call ptr @.dyn_search(ptr %46, ptr @"$sel.resize"), !dbg !1203
  store ptr %47, ptr %.inlinecache26, align 8, !dbg !1203
  store ptr %44, ptr %.cachedtype27, align 8, !dbg !1203
  br label %48, !dbg !1203

cache_hit31:                                      ; preds = %if.exit24
  %cache_hit_fn32 = load ptr, ptr %.inlinecache26, align 8, !dbg !1203
  br label %48, !dbg !1203

48:                                               ; preds = %cache_hit31, %cache_miss29
  %fn_phi33 = phi ptr [ %cache_hit_fn32, %cache_hit31 ], [ %47, %cache_miss29 ], !dbg !1203
  %49 = icmp eq ptr %fn_phi33, null, !dbg !1203
  br i1 %49, label %missing_function34, label %match35, !dbg !1203

missing_function34:                               ; preds = %48
  %50 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1243
  call void %50(ptr @.panic_msg.94, i64 43, ptr @.file.91, i64 16, ptr @.func.102, i64 4, i32 96) #5, !dbg !1243
  unreachable, !dbg !1243

match35:                                          ; preds = %48
  %51 = load ptr, ptr %allocator1, align 8
  %52 = load ptr, ptr %ptr2, align 8
  %53 = load i64, ptr %new_size3, align 8
  %54 = call i64 %fn_phi33(ptr %retparam36, ptr %51, ptr %52, i64 %53, i64 0), !dbg !1243
  %not_err37 = icmp eq i64 %54, 0, !dbg !1243
  %55 = call i1 @llvm.expect.i1(i1 %not_err37, i1 true), !dbg !1243
  br i1 %55, label %after_check39, label %assign_optional38, !dbg !1243

assign_optional38:                                ; preds = %match35
  store i64 %54, ptr %error_var, align 8, !dbg !1243
  br label %panic_block, !dbg !1243

after_check39:                                    ; preds = %match35
  %56 = load ptr, ptr %retparam36, align 8, !dbg !1243
  store ptr %56, ptr %blockret, align 8, !dbg !1243
  br label %expr_block.exit40, !dbg !1243

expr_block.exit40:                                ; preds = %after_check39, %after_check, %expr_block.exit
  br label %noerr_block, !dbg !1243

panic_block:                                      ; preds = %assign_optional38, %assign_optional
  %57 = insertvalue %any undef, ptr %error_var, 0, !dbg !1243
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !1243
  store %any %58, ptr %varargslots, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %59, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.103, i64 36, ptr @.file.91, i64 16, ptr @.func.102, i64 4, i32 85, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1226
  unreachable, !dbg !1226

noerr_block:                                      ; preds = %expr_block.exit40
  %60 = load ptr, ptr %blockret, align 8, !dbg !1226
  store ptr %60, ptr %p, align 8, !dbg !1226
  %61 = load ptr, ptr %self, align 8, !dbg !1244
  %ptradd41 = getelementptr inbounds i8, ptr %61, i64 24, !dbg !1244
  %62 = load ptr, ptr %p, align 8, !dbg !1245
  %63 = load i64, ptr %n, align 8, !dbg !1246
  %add42 = add i64 0, %63, !dbg !1246
  %size = sub i64 %add42, 0, !dbg !1246
  %64 = insertvalue %"char[]" undef, ptr %62, 0, !dbg !1246
  %65 = insertvalue %"char[]" %64, i64 %size, 1, !dbg !1246
  store %"char[]" %65, ptr %ptradd41, align 8, !dbg !1246
  ret void, !dbg !1246

panic:                                            ; preds = %entry
  %66 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1205
  call void %66(ptr @.panic_msg, i64 62, ptr @.file.97, i64 13, ptr @.func.102, i64 4, i32 131) #5, !dbg !1205
  unreachable, !dbg !1205
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.TeeReader.init(ptr %0, i64 %1, ptr %2, i64 %3, ptr %4) #0 comdat !dbg !1247 {
entry:
  %self = alloca ptr, align 8
  %r = alloca %any, align 8
  %w = alloca %any, align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %r8 = alloca %any, align 8
  %w9 = alloca %any, align 8
  %literal = alloca %TeeReader, align 8
  %5 = icmp eq ptr %0, null, !dbg !1256
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1256
  br i1 %6, label %panic, label %checkok, !dbg !1256

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1257, !DIExpression(), !1258)
  store i64 %1, ptr %r, align 8
  %ptradd = getelementptr inbounds i8, ptr %r, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %r, !1259, !DIExpression(), !1260)
  store i64 %3, ptr %w, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %w, i64 8
  store ptr %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %w, !1261, !DIExpression(), !1262)
  %7 = load ptr, ptr %self, align 8, !dbg !1263
  %checknull = icmp eq ptr %7, null, !dbg !1263
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1263
  br i1 %8, label %panic2, label %checkok3, !dbg !1263

checkok3:                                         ; preds = %checkok
  %9 = ptrtoint ptr %7 to i64, !dbg !1263
  %10 = urem i64 %9, 8, !dbg !1263
  %11 = icmp ne i64 %10, 0, !dbg !1263
  %12 = call i1 @llvm.expect.i1(i1 %11, i1 false), !dbg !1263
  br i1 %12, label %panic4, label %checkok7, !dbg !1263

checkok7:                                         ; preds = %checkok3
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %r8, ptr align 8 %r, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %w9, ptr align 8 %w, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 %r8, i32 16, i1 false), !dbg !1264
  %ptradd10 = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !1264
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd10, ptr align 8 %w9, i32 16, i1 false), !dbg !1267
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %7, ptr align 8 %literal, i32 32, i1 false), !dbg !1267
  %13 = load ptr, ptr %self, align 8, !dbg !1268
  ret ptr %13, !dbg !1268

panic:                                            ; preds = %entry
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1258
  call void %14(ptr @.panic_msg, i64 62, ptr @.file.104, i64 12, ptr @.func, i64 4, i32 22) #5, !dbg !1258
  unreachable, !dbg !1258

panic2:                                           ; preds = %checkok
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1263
  call void %15(ptr @.panic_msg.36, i64 45, ptr @.file.104, i64 12, ptr @.func, i64 4, i32 24) #5, !dbg !1263
  unreachable, !dbg !1263

panic4:                                           ; preds = %checkok3
  store i64 8, ptr %taddr, align 8
  %16 = insertvalue %any undef, ptr %taddr, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr5, align 8
  %18 = insertvalue %any undef, ptr %taddr5, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %17, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd6, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.104, i64 12, ptr @.func, i64 4, i32 24, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1263
  unreachable, !dbg !1263
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.TeeReader.read(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !1269 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %nr = alloca i64, align 8
  %nw = alloca i64, align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %error_var4 = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %varargslots13 = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %.inlinecache19 = alloca ptr, align 8
  %.cachedtype20 = alloca ptr, align 8
  %retparam29 = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype20, align 8, !dbg !1272
  store ptr null, ptr %.cachedtype, align 8, !dbg !1272
  %4 = icmp eq ptr %1, null, !dbg !1272
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !1272
  br i1 %5, label %panic, label %checkok, !dbg !1272

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1273, !DIExpression(), !1274)
  store ptr %2, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !1275, !DIExpression(), !1276)
    #dbg_declare(ptr %nr, !1277, !DIExpression(), !1278)
  store i64 0, ptr %nr, align 8, !dbg !1278
    #dbg_declare(ptr %nw, !1279, !DIExpression(), !1280)
  store i64 0, ptr %nw, align 8, !dbg !1280
  %6 = load ptr, ptr %self, align 8, !dbg !1281
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !1282
  %7 = load i64, ptr %ptradd1, align 8, !dbg !1282
  %8 = inttoptr i64 %7 to ptr, !dbg !1282
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1272
  %9 = icmp eq ptr %8, %type, !dbg !1272
  br i1 %9, label %cache_hit, label %cache_miss, !dbg !1272

cache_miss:                                       ; preds = %checkok
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !1272
  %10 = load ptr, ptr %ptradd2, align 8, !dbg !1272
  %11 = call ptr @.dyn_search(ptr %10, ptr @"$sel.read"), !dbg !1272
  store ptr %11, ptr %.inlinecache, align 8, !dbg !1272
  store ptr %8, ptr %.cachedtype, align 8, !dbg !1272
  br label %12, !dbg !1272

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1272
  br label %12, !dbg !1272

12:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %11, %cache_miss ], !dbg !1272
  %13 = icmp eq ptr %fn_phi, null, !dbg !1272
  br i1 %13, label %missing_function, label %match, !dbg !1272

missing_function:                                 ; preds = %12
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1281
  call void %14(ptr @.panic_msg.75, i64 41, ptr @.file.104, i64 12, ptr @.func.58, i64 4, i32 31) #5, !dbg !1281
  unreachable, !dbg !1281

match:                                            ; preds = %12
  %15 = load ptr, ptr %6, align 8
  %lo = load ptr, ptr %bytes, align 8
  %ptradd3 = getelementptr inbounds i8, ptr %bytes, i64 8
  %hi = load i64, ptr %ptradd3, align 8
  %16 = call i64 %fn_phi(ptr %retparam, ptr %15, ptr %lo, i64 %hi), !dbg !1281
  %not_err = icmp eq i64 %16, 0, !dbg !1281
  %17 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1281
  br i1 %17, label %after_check, label %assign_optional, !dbg !1281

assign_optional:                                  ; preds = %match
  store i64 %16, ptr %error_var, align 8, !dbg !1281
  br label %guard_block, !dbg !1281

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !1281

guard_block:                                      ; preds = %assign_optional
  %18 = load i64, ptr %error_var, align 8, !dbg !1281
  ret i64 %18, !dbg !1281

noerr_block:                                      ; preds = %after_check
  %19 = load i64, ptr %retparam, align 8, !dbg !1281
  store i64 %19, ptr %nr, align 8, !dbg !1281
  %20 = load ptr, ptr %self, align 8, !dbg !1283
  %ptradd5 = getelementptr inbounds i8, ptr %20, i64 16, !dbg !1283
  %21 = load %"char[]", ptr %bytes, align 8, !dbg !1284
  %22 = extractvalue %"char[]" %21, 0, !dbg !1284
  %23 = extractvalue %"char[]" %21, 1, !dbg !1285
  %gt = icmp ugt i64 0, %23, !dbg !1285
  %24 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1285
  br i1 %24, label %panic6, label %checkok9, !dbg !1285

checkok9:                                         ; preds = %noerr_block
  %25 = load i64, ptr %nr, align 8, !dbg !1286
  %add = add i64 0, %25, !dbg !1286
  %lt = icmp ult i64 %23, %add, !dbg !1286
  %sub = sub i64 %add, 1, !dbg !1286
  %26 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !1286
  br i1 %26, label %panic10, label %checkok17, !dbg !1286

checkok17:                                        ; preds = %checkok9
  %size = sub i64 %add, 0, !dbg !1284
  %27 = insertvalue %"char[]" undef, ptr %22, 0, !dbg !1284
  %28 = insertvalue %"char[]" %27, i64 %size, 1, !dbg !1284
  %ptradd18 = getelementptr inbounds i8, ptr %ptradd5, i64 8, !dbg !1284
  %29 = load i64, ptr %ptradd18, align 8, !dbg !1284
  %30 = inttoptr i64 %29 to ptr, !dbg !1284
  %type21 = load ptr, ptr %.cachedtype20, align 8, !dbg !1272
  %31 = icmp eq ptr %30, %type21, !dbg !1272
  br i1 %31, label %cache_hit24, label %cache_miss22, !dbg !1272

cache_miss22:                                     ; preds = %checkok17
  %ptradd23 = getelementptr inbounds i8, ptr %30, i64 16, !dbg !1272
  %32 = load ptr, ptr %ptradd23, align 8, !dbg !1272
  %33 = call ptr @.dyn_search(ptr %32, ptr @"$sel.write"), !dbg !1272
  store ptr %33, ptr %.inlinecache19, align 8, !dbg !1272
  store ptr %30, ptr %.cachedtype20, align 8, !dbg !1272
  br label %34, !dbg !1272

cache_hit24:                                      ; preds = %checkok17
  %cache_hit_fn25 = load ptr, ptr %.inlinecache19, align 8, !dbg !1272
  br label %34, !dbg !1272

34:                                               ; preds = %cache_hit24, %cache_miss22
  %fn_phi26 = phi ptr [ %cache_hit_fn25, %cache_hit24 ], [ %33, %cache_miss22 ], !dbg !1272
  %35 = icmp eq ptr %fn_phi26, null, !dbg !1272
  br i1 %35, label %missing_function27, label %match28, !dbg !1272

missing_function27:                               ; preds = %34
  %36 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1283
  call void %36(ptr @.panic_msg.52, i64 42, ptr @.file.104, i64 12, ptr @.func.58, i64 4, i32 32) #5, !dbg !1283
  unreachable, !dbg !1283

match28:                                          ; preds = %34
  %37 = load ptr, ptr %ptradd5, align 8
  %38 = call i64 %fn_phi26(ptr %retparam29, ptr %37, ptr %22, i64 %size), !dbg !1283
  %not_err30 = icmp eq i64 %38, 0, !dbg !1283
  %39 = call i1 @llvm.expect.i1(i1 %not_err30, i1 true), !dbg !1283
  br i1 %39, label %after_check32, label %assign_optional31, !dbg !1283

assign_optional31:                                ; preds = %match28
  store i64 %38, ptr %error_var4, align 8, !dbg !1283
  br label %guard_block33, !dbg !1283

after_check32:                                    ; preds = %match28
  br label %noerr_block34, !dbg !1283

guard_block33:                                    ; preds = %assign_optional31
  %40 = load i64, ptr %error_var4, align 8, !dbg !1283
  ret i64 %40, !dbg !1283

noerr_block34:                                    ; preds = %after_check32
  %41 = load i64, ptr %retparam29, align 8, !dbg !1283
  store i64 %41, ptr %nw, align 8, !dbg !1283
  %42 = load i64, ptr %nr, align 8, !dbg !1287
  %43 = load i64, ptr %nw, align 8, !dbg !1288
  %neq = icmp ne i64 %42, %43, !dbg !1287
  br i1 %neq, label %if.then, label %if.exit, !dbg !1287

if.then:                                          ; preds = %noerr_block34
  ret i64 ptrtoint (ptr @"std.io.IoError$GENERAL_ERROR" to i64), !dbg !1289

if.exit:                                          ; preds = %noerr_block34
  %44 = load i64, ptr %nr, align 8, !dbg !1290
  store i64 %44, ptr %0, align 8, !dbg !1290
  ret i64 0, !dbg !1290

panic:                                            ; preds = %entry
  %45 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1274
  call void %45(ptr @.panic_msg, i64 62, ptr @.file.104, i64 12, ptr @.func.58, i64 4, i32 28) #5, !dbg !1274
  unreachable, !dbg !1274

panic6:                                           ; preds = %noerr_block
  store i64 %23, ptr %taddr, align 8
  %46 = insertvalue %any undef, ptr %taddr, 0
  %47 = insertvalue %any %46, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %48 = insertvalue %any undef, ptr %taddr7, 0
  %49 = insertvalue %any %48, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %47, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %49, ptr %ptradd8, align 16
  %50 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %50, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.104, i64 12, ptr @.func.58, i64 4, i32 32, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1284
  unreachable, !dbg !1284

panic10:                                          ; preds = %checkok9
  store i64 %sub, ptr %taddr11, align 8
  %51 = insertvalue %any undef, ptr %taddr11, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr12, align 8
  %53 = insertvalue %any undef, ptr %taddr12, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %52, ptr %varargslots13, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots13, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots13, 0
  %"$$temp15" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp15", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 60, ptr @.file.104, i64 12, ptr @.func.58, i64 4, i32 32, ptr byval(%"any[]") align 8 %indirectarg16) #5, !dbg !1284
  unreachable, !dbg !1284
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.TeeReader.read_byte(ptr %0, ptr %1) #0 comdat !dbg !1291 {
entry:
  %self = alloca ptr, align 8
  %data = alloca [1 x i8], align 1
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !1294
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1294
  br i1 %3, label %panic, label %checkok, !dbg !1294

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1295, !DIExpression(), !1296)
    #dbg_declare(ptr %data, !1297, !DIExpression(), !1301)
  store i8 0, ptr %data, align 1, !dbg !1301
  %4 = insertvalue %"char[]" undef, ptr %data, 0, !dbg !1302
  %5 = insertvalue %"char[]" %4, i64 1, 1, !dbg !1302
  %6 = load ptr, ptr %self, align 8
  %7 = call i64 @std.io.TeeReader.read(ptr %retparam, ptr %6, ptr %data, i64 1), !dbg !1303
  %not_err = icmp eq i64 %7, 0, !dbg !1303
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1303
  br i1 %8, label %after_check, label %assign_optional, !dbg !1303

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %error_var, align 8, !dbg !1303
  br label %guard_block, !dbg !1303

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !1303

guard_block:                                      ; preds = %assign_optional
  %9 = load i64, ptr %error_var, align 8, !dbg !1303
  ret i64 %9, !dbg !1303

noerr_block:                                      ; preds = %after_check
  %10 = load i8, ptr %data, align 1, !dbg !1304
  store i8 %10, ptr %0, align 1, !dbg !1304
  ret i64 0, !dbg !1304

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1296
  call void %11(ptr @.panic_msg, i64 62, ptr @.file.104, i64 12, ptr @.func.62, i64 9, i32 37) #5, !dbg !1296
  unreachable, !dbg !1296
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.MultiWriter.new_init(ptr %0, ptr %1, i64 %2, i64 %3, ptr %4) #0 comdat !dbg !1305 {
entry:
  %self = alloca ptr, align 8
  %writers = alloca %"any[]", align 8
  %allocator = alloca %any, align 8
  %copy = alloca %"any[]", align 8
  %allocator6 = alloca %any, align 8
  %elements = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator8 = alloca %any, align 8
  %elements9 = alloca i64, align 8
  %allocator10 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr15 = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %varargslots17 = alloca [2 x %any], align 16
  %indirectarg20 = alloca %"any[]", align 8
  %taddr25 = alloca i64, align 8
  %taddr26 = alloca i64, align 8
  %varargslots27 = alloca [2 x %any], align 16
  %indirectarg30 = alloca %"any[]", align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %varargslots36 = alloca [2 x %any], align 16
  %indirectarg39 = alloca %"any[]", align 8
  %taddr44 = alloca i64, align 8
  %taddr45 = alloca i64, align 8
  %varargslots46 = alloca [2 x %any], align 16
  %indirectarg49 = alloca %"any[]", align 8
  %.assign_list = alloca %MultiWriter, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1319
  %5 = icmp eq ptr %0, null, !dbg !1319
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1319
  br i1 %6, label %panic, label %checkok, !dbg !1319

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1320, !DIExpression(), !1321)
  store ptr %1, ptr %writers, align 8
  %ptradd = getelementptr inbounds i8, ptr %writers, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %writers, !1322, !DIExpression(), !1323)
  store i64 %3, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %allocator, !1324, !DIExpression(), !1325)
  %ptradd2 = getelementptr inbounds i8, ptr %writers, i64 8, !dbg !1326
  %7 = load i64, ptr %ptradd2, align 8, !dbg !1326
  %lt = icmp ult i64 0, %7, !dbg !1326
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1326

assert_fail:                                      ; preds = %checkok
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1326
  call void %8(ptr @.panic_msg.106, i64 36, ptr @.file.105, i64 14, ptr @.func.84, i64 8, i32 15) #5, !dbg !1326
  unreachable, !dbg !1326

assert_ok:                                        ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !1328
  %ptradd3 = getelementptr inbounds i8, ptr %9, i64 8, !dbg !1328
  %10 = load i64, ptr %ptradd3, align 8, !dbg !1328
  %eq = icmp eq i64 0, %10, !dbg !1328
  br i1 %eq, label %assert_ok5, label %assert_fail4, !dbg !1328

assert_fail4:                                     ; preds = %assert_ok
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1328
  call void %11(ptr @.panic_msg.107, i64 90, ptr @.file.105, i64 14, ptr @.func.84, i64 8, i32 16) #5, !dbg !1328
  unreachable, !dbg !1328

assert_ok5:                                       ; preds = %assert_ok
    #dbg_declare(ptr %copy, !1329, !DIExpression(), !1330)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator6, ptr align 8 %allocator, i32 16, i1 false)
  %ptradd7 = getelementptr inbounds i8, ptr %writers, i64 8, !dbg !1331
  %12 = load i64, ptr %ptradd7, align 8
  store i64 %12, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator8, ptr align 8 %allocator6, i32 16, i1 false)
  %13 = load i64, ptr %elements, align 8
  store i64 %13, ptr %elements9, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator10, ptr align 8 %allocator8, i32 16, i1 false)
  %14 = load i64, ptr %elements9, align 8, !dbg !1332
  %mul = mul i64 16, %14, !dbg !1337
  store i64 %mul, ptr %size, align 8
  %15 = load i64, ptr %size, align 8, !dbg !1338
  %i2nb = icmp eq i64 %15, 0, !dbg !1338
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1338

if.then:                                          ; preds = %assert_ok5
  store ptr null, ptr %blockret, align 8, !dbg !1341
  br label %expr_block.exit, !dbg !1341

if.exit:                                          ; preds = %assert_ok5
  %ptradd11 = getelementptr inbounds i8, ptr %allocator10, i64 8, !dbg !1342
  %16 = load i64, ptr %ptradd11, align 8, !dbg !1342
  %17 = inttoptr i64 %16 to ptr, !dbg !1342
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1319
  %18 = icmp eq ptr %17, %type, !dbg !1319
  br i1 %18, label %cache_hit, label %cache_miss, !dbg !1319

cache_miss:                                       ; preds = %if.exit
  %ptradd12 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !1319
  %19 = load ptr, ptr %ptradd12, align 8, !dbg !1319
  %20 = call ptr @.dyn_search(ptr %19, ptr @"$sel.acquire"), !dbg !1319
  store ptr %20, ptr %.inlinecache, align 8, !dbg !1319
  store ptr %17, ptr %.cachedtype, align 8, !dbg !1319
  br label %21, !dbg !1319

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1319
  br label %21, !dbg !1319

21:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %20, %cache_miss ], !dbg !1319
  %22 = icmp eq ptr %fn_phi, null, !dbg !1319
  br i1 %22, label %missing_function, label %match, !dbg !1319

missing_function:                                 ; preds = %21
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1344
  call void %23(ptr @.panic_msg.93, i64 44, ptr @.file.91, i64 16, ptr @.func.84, i64 8, i32 80) #5, !dbg !1344
  unreachable, !dbg !1344

match:                                            ; preds = %21
  %24 = load ptr, ptr %allocator10, align 8
  %25 = load i64, ptr %size, align 8
  %26 = call i64 %fn_phi(ptr %retparam, ptr %24, i64 %25, i32 1, i64 0), !dbg !1344
  %not_err = icmp eq i64 %26, 0, !dbg !1344
  %27 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1344
  br i1 %27, label %after_check, label %assign_optional, !dbg !1344

assign_optional:                                  ; preds = %match
  store i64 %26, ptr %error_var, align 8, !dbg !1344
  br label %panic_block, !dbg !1344

after_check:                                      ; preds = %match
  %28 = load ptr, ptr %retparam, align 8, !dbg !1344
  store ptr %28, ptr %blockret, align 8, !dbg !1344
  br label %expr_block.exit, !dbg !1344

expr_block.exit:                                  ; preds = %after_check, %if.then
  %29 = load ptr, ptr %blockret, align 8, !dbg !1344
  store ptr %29, ptr %taddr, align 8
  %30 = load ptr, ptr %taddr, align 8
  %31 = load i64, ptr %elements9, align 8, !dbg !1345
  %add = add i64 0, %31, !dbg !1345
  %size13 = sub i64 %add, 0, !dbg !1345
  %32 = insertvalue %"any[]" undef, ptr %30, 0, !dbg !1345
  %33 = insertvalue %"any[]" %32, i64 %size13, 1, !dbg !1345
  br label %noerr_block, !dbg !1345

panic_block:                                      ; preds = %assign_optional
  %34 = insertvalue %any undef, ptr %error_var, 0, !dbg !1345
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !1345
  store %any %35, ptr %varargslots, align 16
  %36 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %36, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.103, i64 36, ptr @.file.91, i64 16, ptr @.func.84, i64 8, i32 244, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1334
  unreachable, !dbg !1334

noerr_block:                                      ; preds = %expr_block.exit
  store %"any[]" %33, ptr %copy, align 8, !dbg !1334
  %37 = load %"any[]", ptr %writers, align 8, !dbg !1346
  %38 = extractvalue %"any[]" %37, 0, !dbg !1346
  %39 = extractvalue %"any[]" %37, 1, !dbg !1347
  %gt = icmp ugt i64 0, %39, !dbg !1347
  %40 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1347
  br i1 %40, label %panic14, label %checkok21, !dbg !1347

checkok21:                                        ; preds = %noerr_block
  %size22 = sub i64 %39, 0, !dbg !1346
  %41 = insertvalue %"any[]" undef, ptr %38, 0, !dbg !1346
  %42 = insertvalue %"any[]" %41, i64 %size22, 1, !dbg !1346
  %43 = load %"any[]", ptr %copy, align 8, !dbg !1348
  %44 = extractvalue %"any[]" %43, 0, !dbg !1348
  %45 = extractvalue %"any[]" %43, 1, !dbg !1349
  %gt23 = icmp ugt i64 0, %45, !dbg !1349
  %46 = call i1 @llvm.expect.i1(i1 %gt23, i1 false), !dbg !1349
  br i1 %46, label %panic24, label %checkok31, !dbg !1349

checkok31:                                        ; preds = %checkok21
  %size32 = sub i64 %45, 0, !dbg !1348
  %47 = insertvalue %"any[]" undef, ptr %44, 0, !dbg !1348
  %48 = insertvalue %"any[]" %47, i64 %size32, 1, !dbg !1348
  %49 = extractvalue %"any[]" %48, 0, !dbg !1348
  %50 = extractvalue %"any[]" %42, 0, !dbg !1348
  %51 = extractvalue %"any[]" %42, 1, !dbg !1348
  %52 = extractvalue %"any[]" %48, 1, !dbg !1348
  %neq = icmp ne i64 %52, %51, !dbg !1348
  %53 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1348
  br i1 %53, label %panic33, label %checkok40, !dbg !1348

checkok40:                                        ; preds = %checkok31
  %54 = mul i64 %51, 16, !dbg !1348
  call void @llvm.memmove.p0.p0.i64(ptr align 8 %49, ptr align 8 %50, i64 %54, i1 false), !dbg !1348
  %55 = load ptr, ptr %self, align 8, !dbg !1350
  %checknull = icmp eq ptr %55, null, !dbg !1350
  %56 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1350
  br i1 %56, label %panic41, label %checkok42, !dbg !1350

checkok42:                                        ; preds = %checkok40
  %57 = ptrtoint ptr %55 to i64, !dbg !1350
  %58 = urem i64 %57, 8, !dbg !1350
  %59 = icmp ne i64 %58, 0, !dbg !1350
  %60 = call i1 @llvm.expect.i1(i1 %59, i1 false), !dbg !1350
  br i1 %60, label %panic43, label %checkok50, !dbg !1350

checkok50:                                        ; preds = %checkok42
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 32, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %copy, i32 16, i1 false), !dbg !1351
  %ptradd51 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !1351
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd51, ptr align 8 %allocator, i32 16, i1 false), !dbg !1352
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %55, ptr align 8 %.assign_list, i32 32, i1 false), !dbg !1352
  %61 = load ptr, ptr %self, align 8, !dbg !1353
  ret ptr %61, !dbg !1353

panic:                                            ; preds = %entry
  %62 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1321
  call void %62(ptr @.panic_msg, i64 62, ptr @.file.105, i64 14, ptr @.func.84, i64 8, i32 18) #5, !dbg !1321
  unreachable, !dbg !1321

panic14:                                          ; preds = %noerr_block
  store i64 %39, ptr %taddr15, align 8
  %63 = insertvalue %any undef, ptr %taddr15, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr16, align 8
  %65 = insertvalue %any undef, ptr %taddr16, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %64, ptr %varargslots17, align 16
  %ptradd18 = getelementptr inbounds i8, ptr %varargslots17, i64 16
  store %any %66, ptr %ptradd18, align 16
  %67 = insertvalue %"any[]" undef, ptr %varargslots17, 0
  %"$$temp19" = insertvalue %"any[]" %67, i64 2, 1
  store %"any[]" %"$$temp19", ptr %indirectarg20, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.105, i64 14, ptr @.func.84, i64 8, i32 21, ptr byval(%"any[]") align 8 %indirectarg20) #5, !dbg !1346
  unreachable, !dbg !1346

panic24:                                          ; preds = %checkok21
  store i64 %45, ptr %taddr25, align 8
  %68 = insertvalue %any undef, ptr %taddr25, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr26, align 8
  %70 = insertvalue %any undef, ptr %taddr26, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %69, ptr %varargslots27, align 16
  %ptradd28 = getelementptr inbounds i8, ptr %varargslots27, i64 16
  store %any %71, ptr %ptradd28, align 16
  %72 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp29" = insertvalue %"any[]" %72, i64 2, 1
  store %"any[]" %"$$temp29", ptr %indirectarg30, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.105, i64 14, ptr @.func.84, i64 8, i32 21, ptr byval(%"any[]") align 8 %indirectarg30) #5, !dbg !1348
  unreachable, !dbg !1348

panic33:                                          ; preds = %checkok31
  store i64 %52, ptr %taddr34, align 8
  %73 = insertvalue %any undef, ptr %taddr34, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %51, ptr %taddr35, align 8
  %75 = insertvalue %any undef, ptr %taddr35, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %74, ptr %varargslots36, align 16
  %ptradd37 = getelementptr inbounds i8, ptr %varargslots36, i64 16
  store %any %76, ptr %ptradd37, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots36, 0
  %"$$temp38" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp38", ptr %indirectarg39, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.76, i64 38, ptr @.file.105, i64 14, ptr @.func.84, i64 8, i32 21, ptr byval(%"any[]") align 8 %indirectarg39) #5, !dbg !1348
  unreachable, !dbg !1348

panic41:                                          ; preds = %checkok40
  %78 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1350
  call void %78(ptr @.panic_msg.36, i64 45, ptr @.file.105, i64 14, ptr @.func.84, i64 8, i32 22) #5, !dbg !1350
  unreachable, !dbg !1350

panic43:                                          ; preds = %checkok42
  store i64 8, ptr %taddr44, align 8
  %79 = insertvalue %any undef, ptr %taddr44, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %58, ptr %taddr45, align 8
  %81 = insertvalue %any undef, ptr %taddr45, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %80, ptr %varargslots46, align 16
  %ptradd47 = getelementptr inbounds i8, ptr %varargslots46, i64 16
  store %any %82, ptr %ptradd47, align 16
  %83 = insertvalue %"any[]" undef, ptr %varargslots46, 0
  %"$$temp48" = insertvalue %"any[]" %83, i64 2, 1
  store %"any[]" %"$$temp48", ptr %indirectarg49, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.105, i64 14, ptr @.func.84, i64 8, i32 22, ptr byval(%"any[]") align 8 %indirectarg49) #5, !dbg !1350
  unreachable, !dbg !1350
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.MultiWriter.temp_init(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1354 {
entry:
  %self = alloca ptr, align 8
  %writers = alloca %"any[]", align 8
  %taddr = alloca %any, align 8
  %3 = icmp eq ptr %0, null, !dbg !1357
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1357
  br i1 %4, label %panic, label %checkok, !dbg !1357

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1358, !DIExpression(), !1359)
  store ptr %1, ptr %writers, align 8
  %ptradd = getelementptr inbounds i8, ptr %writers, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %writers, !1360, !DIExpression(), !1361)
  %ptradd1 = getelementptr inbounds i8, ptr %writers, i64 8, !dbg !1362
  %5 = load i64, ptr %ptradd1, align 8, !dbg !1362
  %lt = icmp ult i64 0, %5, !dbg !1362
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1362

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1362
  call void %6(ptr @.panic_msg.106, i64 36, ptr @.file.105, i64 14, ptr @.func.86, i64 9, i32 28) #5, !dbg !1362
  unreachable, !dbg !1362

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !1364
  %ptradd2 = getelementptr inbounds i8, ptr %7, i64 8, !dbg !1364
  %8 = load i64, ptr %ptradd2, align 8, !dbg !1364
  %eq = icmp eq i64 0, %8, !dbg !1364
  br i1 %eq, label %assert_ok4, label %assert_fail3, !dbg !1364

assert_fail3:                                     ; preds = %assert_ok
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1364
  call void %9(ptr @.panic_msg.107, i64 90, ptr @.file.105, i64 14, ptr @.func.86, i64 9, i32 29) #5, !dbg !1364
  unreachable, !dbg !1364

assert_ok4:                                       ; preds = %assert_ok
  %10 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !1365
  %i2nb = icmp eq ptr %10, null, !dbg !1365
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1365

if.then:                                          ; preds = %assert_ok4
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !1368
  br label %if.exit, !dbg !1368

if.exit:                                          ; preds = %if.then, %assert_ok4
  %11 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !1370
  %12 = insertvalue %any undef, ptr %11, 0, !dbg !1367
  %13 = insertvalue %any %12, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !1367
  %14 = load ptr, ptr %self, align 8, !dbg !1367
  %lo = load ptr, ptr %writers, align 8, !dbg !1367
  %ptradd5 = getelementptr inbounds i8, ptr %writers, i64 8, !dbg !1367
  %hi = load i64, ptr %ptradd5, align 8, !dbg !1367
  store %any %13, ptr %taddr, align 8
  %lo6 = load i64, ptr %taddr, align 8
  %ptradd7 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi8 = load ptr, ptr %ptradd7, align 8
  %15 = call ptr @std.io.MultiWriter.new_init(ptr %14, ptr %lo, i64 %hi, i64 %lo6, ptr %hi8), !dbg !1371
  ret ptr %15, !dbg !1371

panic:                                            ; preds = %entry
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1359
  call void %16(ptr @.panic_msg, i64 62, ptr @.file.105, i64 14, ptr @.func.86, i64 9, i32 31) #5, !dbg !1359
  unreachable, !dbg !1359
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.io.MultiWriter.free(ptr %0) #0 comdat !dbg !1372 {
entry:
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1375
  %1 = icmp eq ptr %0, null, !dbg !1375
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1375
  br i1 %2, label %panic, label %checkok, !dbg !1375

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1376, !DIExpression(), !1377)
  %3 = load ptr, ptr %self, align 8, !dbg !1378
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !1378
  %4 = load ptr, ptr %ptradd, align 8, !dbg !1378
  %i2nb = icmp eq ptr %4, null, !dbg !1378
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1378

if.then:                                          ; preds = %checkok
  ret void, !dbg !1379

if.exit:                                          ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !1380
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !1380
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %ptradd1, i32 16, i1 false)
  %6 = load ptr, ptr %self, align 8, !dbg !1381
  %7 = load ptr, ptr %6, align 8
  store ptr %7, ptr %ptr, align 8
  %8 = load ptr, ptr %ptr, align 8, !dbg !1382
  %i2nb2 = icmp eq ptr %8, null, !dbg !1382
  br i1 %i2nb2, label %if.then3, label %if.exit4, !dbg !1382

if.then3:                                         ; preds = %if.exit
  br label %expr_block.exit, !dbg !1385

if.exit4:                                         ; preds = %if.exit
  %ptradd5 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !1386
  %9 = load i64, ptr %ptradd5, align 8, !dbg !1386
  %10 = inttoptr i64 %9 to ptr, !dbg !1386
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1375
  %11 = icmp eq ptr %10, %type, !dbg !1375
  br i1 %11, label %cache_hit, label %cache_miss, !dbg !1375

cache_miss:                                       ; preds = %if.exit4
  %ptradd6 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !1375
  %12 = load ptr, ptr %ptradd6, align 8, !dbg !1375
  %13 = call ptr @.dyn_search(ptr %12, ptr @"$sel.release"), !dbg !1375
  store ptr %13, ptr %.inlinecache, align 8, !dbg !1375
  store ptr %10, ptr %.cachedtype, align 8, !dbg !1375
  br label %14, !dbg !1375

cache_hit:                                        ; preds = %if.exit4
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1375
  br label %14, !dbg !1375

14:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %13, %cache_miss ], !dbg !1375
  %15 = icmp eq ptr %fn_phi, null, !dbg !1375
  br i1 %15, label %missing_function, label %match, !dbg !1375

missing_function:                                 ; preds = %14
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1387
  call void %16(ptr @.panic_msg.90, i64 44, ptr @.file.91, i64 16, ptr @.func.100, i64 4, i32 105) #5, !dbg !1387
  unreachable, !dbg !1387

match:                                            ; preds = %14
  %17 = load ptr, ptr %allocator, align 8, !dbg !1387
  %18 = load ptr, ptr %ptr, align 8, !dbg !1387
  call void %fn_phi(ptr %17, ptr %18, i8 zeroext 0), !dbg !1387
  br label %expr_block.exit, !dbg !1387

expr_block.exit:                                  ; preds = %match, %if.then3
  %19 = load ptr, ptr %self, align 8, !dbg !1388
  %checknull = icmp eq ptr %19, null, !dbg !1388
  %20 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1388
  br i1 %20, label %panic7, label %checkok8, !dbg !1388

checkok8:                                         ; preds = %expr_block.exit
  %21 = ptrtoint ptr %19 to i64, !dbg !1388
  %22 = urem i64 %21, 8, !dbg !1388
  %23 = icmp ne i64 %22, 0, !dbg !1388
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false), !dbg !1388
  br i1 %24, label %panic9, label %checkok12, !dbg !1388

checkok12:                                        ; preds = %checkok8
  call void @llvm.memset.p0.i64(ptr align 8 %19, i8 0, i64 32, i1 false), !dbg !1388
  ret void, !dbg !1388

panic:                                            ; preds = %entry
  %25 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1377
  call void %25(ptr @.panic_msg, i64 62, ptr @.file.105, i64 14, ptr @.func.100, i64 4, i32 36) #5, !dbg !1377
  unreachable, !dbg !1377

panic7:                                           ; preds = %expr_block.exit
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1388
  call void %26(ptr @.panic_msg.36, i64 45, ptr @.file.105, i64 14, ptr @.func.100, i64 4, i32 40) #5, !dbg !1388
  unreachable, !dbg !1388

panic9:                                           ; preds = %checkok8
  store i64 8, ptr %taddr, align 8
  %27 = insertvalue %any undef, ptr %taddr, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr10, align 8
  %29 = insertvalue %any undef, ptr %taddr10, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %28, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %30, ptr %ptradd11, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.105, i64 14, ptr @.func.100, i64 4, i32 40, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1388
  unreachable, !dbg !1388
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.MultiWriter.write(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !1389 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %n = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.anon = alloca i64, align 8
  %w = alloca %any, align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1392
  %4 = icmp eq ptr %1, null, !dbg !1392
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !1392
  br i1 %5, label %panic, label %checkok, !dbg !1392

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1393, !DIExpression(), !1394)
  store ptr %2, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !1395, !DIExpression(), !1396)
    #dbg_declare(ptr %n, !1397, !DIExpression(), !1398)
  store i64 0, ptr %n, align 8, !dbg !1398
  %6 = load ptr, ptr %self, align 8, !dbg !1399
  %checknull = icmp eq ptr %6, null, !dbg !1399
  %7 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1399
  br i1 %7, label %panic1, label %checkok2, !dbg !1399

checkok2:                                         ; preds = %checkok
  %8 = ptrtoint ptr %6 to i64, !dbg !1399
  %9 = urem i64 %8, 8, !dbg !1399
  %10 = icmp ne i64 %9, 0, !dbg !1399
  %11 = call i1 @llvm.expect.i1(i1 %10, i1 false), !dbg !1399
  br i1 %11, label %panic3, label %checkok6, !dbg !1399

checkok6:                                         ; preds = %checkok2
  %ptradd7 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !1399
  %12 = load i64, ptr %ptradd7, align 8, !dbg !1399
    #dbg_declare(ptr %.anon, !1401, !DIExpression(), !1399)
  store i64 0, ptr %.anon, align 8, !dbg !1399
  br label %loop.cond, !dbg !1399

loop.cond:                                        ; preds = %if.exit, %checkok6
  %13 = load i64, ptr %.anon, align 8, !dbg !1399
  %lt = icmp ult i64 %13, %12, !dbg !1399
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1399

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %w, !1402, !DIExpression(), !1404)
  %checknull8 = icmp eq ptr %6, null, !dbg !1405
  %14 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !1405
  br i1 %14, label %panic9, label %checkok10, !dbg !1405

checkok10:                                        ; preds = %loop.body
  %15 = ptrtoint ptr %6 to i64, !dbg !1405
  %16 = urem i64 %15, 8, !dbg !1405
  %17 = icmp ne i64 %16, 0, !dbg !1405
  %18 = call i1 @llvm.expect.i1(i1 %17, i1 false), !dbg !1405
  br i1 %18, label %panic11, label %checkok18, !dbg !1405

checkok18:                                        ; preds = %checkok10
  %ptradd19 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !1405
  %19 = load i64, ptr %ptradd19, align 8, !dbg !1405
  %20 = load ptr, ptr %6, align 8, !dbg !1405
  %21 = load i64, ptr %.anon, align 8, !dbg !1405
  %ge = icmp uge i64 %21, %19, !dbg !1405
  %22 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1405
  br i1 %22, label %panic20, label %checkok27, !dbg !1405

checkok27:                                        ; preds = %checkok18
  %ptroffset = getelementptr inbounds [16 x i8], ptr %20, i64 %21, !dbg !1405
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %w, ptr align 8 %ptroffset, i32 16, i1 false), !dbg !1405
  %ptradd28 = getelementptr inbounds i8, ptr %w, i64 8, !dbg !1406
  %23 = load i64, ptr %ptradd28, align 8, !dbg !1406
  %24 = inttoptr i64 %23 to ptr, !dbg !1406
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1392
  %25 = icmp eq ptr %24, %type, !dbg !1392
  br i1 %25, label %cache_hit, label %cache_miss, !dbg !1392

cache_miss:                                       ; preds = %checkok27
  %ptradd29 = getelementptr inbounds i8, ptr %24, i64 16, !dbg !1392
  %26 = load ptr, ptr %ptradd29, align 8, !dbg !1392
  %27 = call ptr @.dyn_search(ptr %26, ptr @"$sel.write"), !dbg !1392
  store ptr %27, ptr %.inlinecache, align 8, !dbg !1392
  store ptr %24, ptr %.cachedtype, align 8, !dbg !1392
  br label %28, !dbg !1392

cache_hit:                                        ; preds = %checkok27
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1392
  br label %28, !dbg !1392

28:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %27, %cache_miss ], !dbg !1392
  %29 = icmp eq ptr %fn_phi, null, !dbg !1392
  br i1 %29, label %missing_function, label %match, !dbg !1392

missing_function:                                 ; preds = %28
  %30 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1408
  call void %30(ptr @.panic_msg.52, i64 42, ptr @.file.105, i64 14, ptr @.func.80, i64 5, i32 48) #5, !dbg !1408
  unreachable, !dbg !1408

match:                                            ; preds = %28
  %31 = load ptr, ptr %w, align 8
  %lo = load ptr, ptr %bytes, align 8
  %ptradd30 = getelementptr inbounds i8, ptr %bytes, i64 8
  %hi = load i64, ptr %ptradd30, align 8
  %32 = call i64 %fn_phi(ptr %retparam, ptr %31, ptr %lo, i64 %hi), !dbg !1408
  %not_err = icmp eq i64 %32, 0, !dbg !1408
  %33 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1408
  br i1 %33, label %after_check, label %assign_optional, !dbg !1408

assign_optional:                                  ; preds = %match
  store i64 %32, ptr %error_var, align 8, !dbg !1408
  br label %guard_block, !dbg !1408

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !1408

guard_block:                                      ; preds = %assign_optional
  %34 = load i64, ptr %error_var, align 8, !dbg !1408
  ret i64 %34, !dbg !1408

noerr_block:                                      ; preds = %after_check
  %35 = load i64, ptr %retparam, align 8, !dbg !1408
  store i64 %35, ptr %n, align 8, !dbg !1408
  %36 = load i64, ptr %n, align 8, !dbg !1409
  %ptradd31 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1410
  %37 = load i64, ptr %ptradd31, align 8, !dbg !1410
  %neq = icmp ne i64 %36, %37, !dbg !1409
  br i1 %neq, label %if.then, label %if.exit, !dbg !1409

if.then:                                          ; preds = %noerr_block
  ret i64 ptrtoint (ptr @"std.io.IoError$INCOMPLETE_WRITE" to i64), !dbg !1411

if.exit:                                          ; preds = %noerr_block
  %38 = load i64, ptr %.anon, align 8, !dbg !1399
  %addnuw = add nuw i64 %38, 1, !dbg !1399
  store i64 %addnuw, ptr %.anon, align 8, !dbg !1399
  br label %loop.cond, !dbg !1399

loop.exit:                                        ; preds = %loop.cond
  %ptradd32 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1412
  %39 = load i64, ptr %ptradd32, align 8, !dbg !1412
  store i64 %39, ptr %0, align 8, !dbg !1412
  ret i64 0, !dbg !1412

panic:                                            ; preds = %entry
  %40 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1394
  call void %40(ptr @.panic_msg, i64 62, ptr @.file.105, i64 14, ptr @.func.80, i64 5, i32 43) #5, !dbg !1394
  unreachable, !dbg !1394

panic1:                                           ; preds = %checkok
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1399
  call void %41(ptr @.panic_msg.108, i64 53, ptr @.file.105, i64 14, ptr @.func.80, i64 5, i32 46) #5, !dbg !1399
  unreachable, !dbg !1399

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %42 = insertvalue %any undef, ptr %taddr, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr4, align 8
  %44 = insertvalue %any undef, ptr %taddr4, 0
  %45 = insertvalue %any %44, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %43, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %45, ptr %ptradd5, align 16
  %46 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %46, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.105, i64 14, ptr @.func.80, i64 5, i32 46, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1399
  unreachable, !dbg !1399

panic9:                                           ; preds = %loop.body
  %47 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1405
  call void %47(ptr @.panic_msg.108, i64 53, ptr @.file.105, i64 14, ptr @.func.80, i64 5, i32 46) #5, !dbg !1405
  unreachable, !dbg !1405

panic11:                                          ; preds = %checkok10
  store i64 8, ptr %taddr12, align 8
  %48 = insertvalue %any undef, ptr %taddr12, 0
  %49 = insertvalue %any %48, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %16, ptr %taddr13, align 8
  %50 = insertvalue %any undef, ptr %taddr13, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %49, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %51, ptr %ptradd15, align 16
  %52 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %52, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.105, i64 14, ptr @.func.80, i64 5, i32 46, ptr byval(%"any[]") align 8 %indirectarg17) #5, !dbg !1405
  unreachable, !dbg !1405

panic20:                                          ; preds = %checkok18
  store i64 %19, ptr %taddr21, align 8
  %53 = insertvalue %any undef, ptr %taddr21, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr22, align 8
  %55 = insertvalue %any undef, ptr %taddr22, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %54, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %56, ptr %ptradd24, align 16
  %57 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %57, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.105, i64 14, ptr @.func.80, i64 5, i32 46, ptr byval(%"any[]") align 8 %indirectarg26) #5, !dbg !1405
  unreachable, !dbg !1405
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.MultiWriter.write_byte(ptr %0, i8 zeroext %1) #0 comdat !dbg !1413 {
entry:
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %data = alloca [1 x i8], align 1
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %2 = icmp eq ptr %0, null, !dbg !1416
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1416
  br i1 %3, label %panic, label %checkok, !dbg !1416

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1417, !DIExpression(), !1418)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !1419, !DIExpression(), !1420)
    #dbg_declare(ptr %data, !1421, !DIExpression(), !1422)
  store i8 0, ptr %data, align 1, !dbg !1422
  %4 = load i8, ptr %c, align 1, !dbg !1423
  store i8 %4, ptr %data, align 1, !dbg !1423
  %5 = insertvalue %"char[]" undef, ptr %data, 0, !dbg !1424
  %6 = insertvalue %"char[]" %5, i64 1, 1, !dbg !1424
  %7 = load ptr, ptr %self, align 8
  %8 = call i64 @std.io.MultiWriter.write(ptr %retparam, ptr %7, ptr %data, i64 1), !dbg !1425
  %not_err = icmp eq i64 %8, 0, !dbg !1425
  %9 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1425
  br i1 %9, label %after_check, label %assign_optional, !dbg !1425

assign_optional:                                  ; preds = %checkok
  store i64 %8, ptr %error_var, align 8, !dbg !1425
  br label %guard_block, !dbg !1425

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !1425

guard_block:                                      ; preds = %assign_optional
  %10 = load i64, ptr %error_var, align 8, !dbg !1425
  ret i64 %10, !dbg !1425

noerr_block:                                      ; preds = %after_check
  ret i64 0, !dbg !1425

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1418
  call void %11(ptr @.panic_msg, i64 62, ptr @.file.105, i64 14, ptr @.func.81, i64 10, i32 54) #5, !dbg !1418
  unreachable, !dbg !1418
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.io.Scanner.init(ptr %0, i64 %1, ptr %2, ptr %3, i64 %4) #0 comdat !dbg !1426 {
entry:
  %self = alloca ptr, align 8
  %stream = alloca %any, align 8
  %buffer = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.assign_list = alloca %Scanner, align 8
  %5 = icmp eq ptr %0, null, !dbg !1437
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1437
  br i1 %6, label %panic, label %checkok, !dbg !1437

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1438, !DIExpression(), !1439)
  store i64 %1, ptr %stream, align 8
  %ptradd = getelementptr inbounds i8, ptr %stream, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %stream, !1440, !DIExpression(), !1441)
  store ptr %3, ptr %buffer, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %buffer, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %buffer, !1442, !DIExpression(), !1443)
  %ptradd2 = getelementptr inbounds i8, ptr %buffer, i64 8, !dbg !1444
  %7 = load i64, ptr %ptradd2, align 8, !dbg !1444
  %lt = icmp ult i64 0, %7, !dbg !1444
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1444

assert_fail:                                      ; preds = %checkok
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1444
  call void %8(ptr @.panic_msg.110, i64 65, ptr @.file.109, i64 10, ptr @.func, i64 4, i32 17) #5, !dbg !1444
  unreachable, !dbg !1444

assert_ok:                                        ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !1446
  %checknull = icmp eq ptr %9, null, !dbg !1446
  %10 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1446
  br i1 %10, label %panic3, label %checkok4, !dbg !1446

checkok4:                                         ; preds = %assert_ok
  %11 = ptrtoint ptr %9 to i64, !dbg !1446
  %12 = urem i64 %11, 8, !dbg !1446
  %13 = icmp ne i64 %12, 0, !dbg !1446
  %14 = call i1 @llvm.expect.i1(i1 %13, i1 false), !dbg !1446
  br i1 %14, label %panic5, label %checkok8, !dbg !1446

checkok8:                                         ; preds = %checkok4
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 48, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %stream, i32 16, i1 false), !dbg !1447
  %ptradd9 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !1447
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd9, ptr align 8 %buffer, i32 16, i1 false), !dbg !1448
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %9, ptr align 8 %.assign_list, i32 48, i1 false), !dbg !1448
  ret void, !dbg !1448

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1439
  call void %15(ptr @.panic_msg, i64 62, ptr @.file.109, i64 10, ptr @.func, i64 4, i32 19) #5, !dbg !1439
  unreachable, !dbg !1439

panic3:                                           ; preds = %assert_ok
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1446
  call void %16(ptr @.panic_msg.36, i64 45, ptr @.file.109, i64 10, ptr @.func, i64 4, i32 21) #5, !dbg !1446
  unreachable, !dbg !1446

panic5:                                           ; preds = %checkok4
  store i64 8, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr6, align 8
  %19 = insertvalue %any undef, ptr %taddr6, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %18, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd7, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.109, i64 10, ptr @.func, i64 4, i32 21, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1446
  unreachable, !dbg !1446
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.io.Scanner.flush(ptr %0) #0 comdat !dbg !1449 {
entry:
  %self = alloca ptr, align 8
  %n = alloca i64, align 8
  %buf = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !1452
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1452
  br i1 %2, label %panic, label %checkok, !dbg !1452

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1453, !DIExpression(), !1454)
  %3 = load ptr, ptr %self, align 8, !dbg !1455
  %ptradd = getelementptr inbounds i8, ptr %3, i64 40, !dbg !1455
  %4 = load i64, ptr %ptradd, align 8, !dbg !1455
  %5 = load ptr, ptr %self, align 8, !dbg !1456
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 32, !dbg !1456
  %6 = load i64, ptr %ptradd1, align 8, !dbg !1456
  %ge = icmp uge i64 %4, %6, !dbg !1455
  br i1 %ge, label %assert_ok, label %assert_fail, !dbg !1455

assert_fail:                                      ; preds = %checkok
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1455
  call void %7(ptr @.panic_msg.67, i64 16, ptr @.file.109, i64 10, ptr @.func.44, i64 5, i32 30) #5, !dbg !1455
  unreachable, !dbg !1455

assert_ok:                                        ; preds = %checkok
    #dbg_declare(ptr %n, !1457, !DIExpression(), !1458)
  %8 = load ptr, ptr %self, align 8, !dbg !1459
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 40, !dbg !1459
  %9 = load i64, ptr %ptradd2, align 8, !dbg !1459
  %10 = load ptr, ptr %self, align 8, !dbg !1460
  %ptradd3 = getelementptr inbounds i8, ptr %10, i64 32, !dbg !1460
  %11 = load i64, ptr %ptradd3, align 8, !dbg !1460
  %sub = sub i64 %9, %11, !dbg !1459
  store i64 %sub, ptr %n, align 8, !dbg !1459
    #dbg_declare(ptr %buf, !1461, !DIExpression(), !1462)
  %12 = load ptr, ptr %self, align 8, !dbg !1463
  %ptradd4 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !1463
  %13 = load %"char[]", ptr %ptradd4, align 8, !dbg !1463
  %14 = extractvalue %"char[]" %13, 0, !dbg !1463
  %15 = load ptr, ptr %self, align 8, !dbg !1464
  %ptradd5 = getelementptr inbounds i8, ptr %15, i64 32, !dbg !1464
  %16 = load i64, ptr %ptradd5, align 8, !dbg !1464
  %17 = extractvalue %"char[]" %13, 1, !dbg !1464
  %gt = icmp ugt i64 %16, %17, !dbg !1464
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1464
  br i1 %18, label %panic6, label %checkok9, !dbg !1464

checkok9:                                         ; preds = %assert_ok
  %19 = load i64, ptr %n, align 8, !dbg !1465
  %add = add i64 %16, %19, !dbg !1465
  %lt = icmp ult i64 %17, %add, !dbg !1465
  %sub10 = sub i64 %add, 1, !dbg !1465
  %20 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !1465
  br i1 %20, label %panic11, label %checkok18, !dbg !1465

checkok18:                                        ; preds = %checkok9
  %size = sub i64 %add, %16, !dbg !1463
  %ptradd19 = getelementptr inbounds i8, ptr %14, i64 %16, !dbg !1463
  %21 = insertvalue %"char[]" undef, ptr %ptradd19, 0, !dbg !1463
  %22 = insertvalue %"char[]" %21, i64 %size, 1, !dbg !1463
  store %"char[]" %22, ptr %buf, align 8, !dbg !1463
  %23 = load ptr, ptr %self, align 8, !dbg !1466
  %ptradd20 = getelementptr inbounds i8, ptr %23, i64 32, !dbg !1466
  store i64 0, ptr %ptradd20, align 8, !dbg !1467
  %24 = load ptr, ptr %self, align 8, !dbg !1468
  %ptradd21 = getelementptr inbounds i8, ptr %24, i64 40, !dbg !1468
  store i64 0, ptr %ptradd21, align 8, !dbg !1469
  %25 = load { ptr, i64 }, ptr %buf, align 8, !dbg !1470
  ret { ptr, i64 } %25, !dbg !1470

panic:                                            ; preds = %entry
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1454
  call void %26(ptr @.panic_msg, i64 62, ptr @.file.109, i64 10, ptr @.func.44, i64 5, i32 28) #5, !dbg !1454
  unreachable, !dbg !1454

panic6:                                           ; preds = %assert_ok
  store i64 %17, ptr %taddr, align 8
  %27 = insertvalue %any undef, ptr %taddr, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %16, ptr %taddr7, align 8
  %29 = insertvalue %any undef, ptr %taddr7, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %28, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %30, ptr %ptradd8, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.109, i64 10, ptr @.func.44, i64 5, i32 32, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1463
  unreachable, !dbg !1463

panic11:                                          ; preds = %checkok9
  store i64 %sub10, ptr %taddr12, align 8
  %32 = insertvalue %any undef, ptr %taddr12, 0
  %33 = insertvalue %any %32, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %17, ptr %taddr13, align 8
  %34 = insertvalue %any undef, ptr %taddr13, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %33, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %35, ptr %ptradd15, align 16
  %36 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %36, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 60, ptr @.file.109, i64 10, ptr @.func.44, i64 5, i32 32, ptr byval(%"any[]") align 8 %indirectarg17) #5, !dbg !1463
  unreachable, !dbg !1463
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Scanner.close(ptr %0) #0 comdat !dbg !1471 {
entry:
  %self = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache3 = alloca ptr, align 8
  %.cachedtype4 = alloca ptr, align 8
  store ptr null, ptr %.cachedtype4, align 8, !dbg !1474
  store ptr null, ptr %.cachedtype, align 8, !dbg !1474
  %1 = icmp eq ptr %0, null, !dbg !1474
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1474
  br i1 %2, label %panic, label %checkok, !dbg !1474

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1475, !DIExpression(), !1476)
  %3 = load ptr, ptr %self, align 8, !dbg !1477
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !1477
  %4 = load i64, ptr %ptradd, align 8, !dbg !1477
  %5 = inttoptr i64 %4 to ptr, !dbg !1477
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1474
  %6 = icmp eq ptr %5, %type, !dbg !1474
  br i1 %6, label %cache_hit, label %cache_miss, !dbg !1474

cache_miss:                                       ; preds = %checkok
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !1474
  %7 = load ptr, ptr %ptradd1, align 8, !dbg !1474
  %8 = call ptr @.dyn_search(ptr %7, ptr @"$sel.close"), !dbg !1474
  store ptr %8, ptr %.inlinecache, align 8, !dbg !1474
  store ptr %5, ptr %.cachedtype, align 8, !dbg !1474
  br label %9, !dbg !1474

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1474
  br label %9, !dbg !1474

9:                                                ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %8, %cache_miss ], !dbg !1474
  %i2b = icmp ne ptr %fn_phi, null, !dbg !1474
  br i1 %i2b, label %if.then, label %if.exit, !dbg !1474

if.then:                                          ; preds = %9
  %10 = load ptr, ptr %self, align 8, !dbg !1478
  %ptradd2 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !1478
  %11 = load i64, ptr %ptradd2, align 8, !dbg !1478
  %12 = inttoptr i64 %11 to ptr, !dbg !1478
  %type5 = load ptr, ptr %.cachedtype4, align 8, !dbg !1474
  %13 = icmp eq ptr %12, %type5, !dbg !1474
  br i1 %13, label %cache_hit8, label %cache_miss6, !dbg !1474

cache_miss6:                                      ; preds = %if.then
  %ptradd7 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !1474
  %14 = load ptr, ptr %ptradd7, align 8, !dbg !1474
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.close"), !dbg !1474
  store ptr %15, ptr %.inlinecache3, align 8, !dbg !1474
  store ptr %12, ptr %.cachedtype4, align 8, !dbg !1474
  br label %16, !dbg !1474

cache_hit8:                                       ; preds = %if.then
  %cache_hit_fn9 = load ptr, ptr %.inlinecache3, align 8, !dbg !1474
  br label %16, !dbg !1474

16:                                               ; preds = %cache_hit8, %cache_miss6
  %fn_phi10 = phi ptr [ %cache_hit_fn9, %cache_hit8 ], [ %15, %cache_miss6 ], !dbg !1474
  %17 = icmp eq ptr %fn_phi10, null, !dbg !1474
  br i1 %17, label %missing_function, label %match, !dbg !1474

missing_function:                                 ; preds = %16
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1478
  call void %18(ptr @.panic_msg.74, i64 42, ptr @.file.109, i64 10, ptr @.func.73, i64 5, i32 40) #5, !dbg !1478
  unreachable, !dbg !1478

match:                                            ; preds = %16
  %19 = load ptr, ptr %10, align 8, !dbg !1478
  %20 = call i64 %fn_phi10(ptr %19), !dbg !1478
  %not_err = icmp eq i64 %20, 0, !dbg !1478
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1478
  br i1 %21, label %after_check, label %assign_optional, !dbg !1478

assign_optional:                                  ; preds = %match
  store i64 %20, ptr %reterr, align 8, !dbg !1478
  br label %err_retblock, !dbg !1478

after_check:                                      ; preds = %match
  ret i64 0, !dbg !1478

err_retblock:                                     ; preds = %assign_optional
  %22 = load i64, ptr %reterr, align 8, !dbg !1478
  ret i64 %22, !dbg !1478

if.exit:                                          ; preds = %9
  ret i64 0, !dbg !1478

panic:                                            ; preds = %entry
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1476
  call void %23(ptr @.panic_msg, i64 62, ptr @.file.109, i64 10, ptr @.func.73, i64 5, i32 38) #5, !dbg !1476
  unreachable, !dbg !1476
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Scanner.scan(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !1479 {
entry:
  %self = alloca ptr, align 8
  %pattern = alloca %"char[]", align 8
  %error_var = alloca i64, align 8
  %self9 = alloca ptr, align 8
  %buf = alloca %"char[]", align 8
  %n = alloca i64, align 8
  %n.f = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %err = alloca i64, align 8
  %switch = alloca i64, align 8
  %n25 = alloca i64, align 8
  %buf28 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr33 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr39 = alloca i64, align 8
  %taddr40 = alloca i64, align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %i = alloca i64, align 8
  %self47 = alloca ptr, align 8
  %buf48 = alloca %"char[]", align 8
  %pattern49 = alloca %"char[]", align 8
  %retparam50 = alloca i64, align 8
  %reterr = alloca i64, align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %varargslots68 = alloca [2 x %any], align 16
  %indirectarg71 = alloca %"any[]", align 8
  %taddr77 = alloca i64, align 8
  %taddr78 = alloca i64, align 8
  %varargslots79 = alloca [2 x %any], align 16
  %indirectarg82 = alloca %"any[]", align 8
  %taddr97 = alloca i64, align 8
  %taddr98 = alloca i64, align 8
  %varargslots99 = alloca [2 x %any], align 16
  %indirectarg102 = alloca %"any[]", align 8
  %taddr108 = alloca i64, align 8
  %taddr109 = alloca i64, align 8
  %varargslots110 = alloca [2 x %any], align 16
  %indirectarg113 = alloca %"any[]", align 8
  %taddr119 = alloca i64, align 8
  %taddr120 = alloca i64, align 8
  %varargslots121 = alloca [2 x %any], align 16
  %indirectarg124 = alloca %"any[]", align 8
  %taddr129 = alloca i64, align 8
  %taddr130 = alloca i64, align 8
  %varargslots131 = alloca [2 x %any], align 16
  %indirectarg134 = alloca %"any[]", align 8
  %taddr140 = alloca i64, align 8
  %taddr141 = alloca i64, align 8
  %varargslots142 = alloca [2 x %any], align 16
  %indirectarg145 = alloca %"any[]", align 8
  %p = alloca i64, align 8
  %error_var149 = alloca i64, align 8
  %self150 = alloca ptr, align 8
  %buf151 = alloca %"char[]", align 8
  %n152 = alloca i64, align 8
  %n.f153 = alloca i64, align 8
  %.inlinecache155 = alloca ptr, align 8
  %.cachedtype156 = alloca ptr, align 8
  %retparam165 = alloca i64, align 8
  %err173 = alloca i64, align 8
  %switch182 = alloca i64, align 8
  %taddr195 = alloca i64, align 8
  %taddr196 = alloca i64, align 8
  %varargslots197 = alloca [2 x %any], align 16
  %indirectarg200 = alloca %"any[]", align 8
  %taddr206 = alloca i64, align 8
  %taddr207 = alloca i64, align 8
  %varargslots208 = alloca [2 x %any], align 16
  %indirectarg211 = alloca %"any[]", align 8
  %i214 = alloca i64, align 8
  %error_var215 = alloca i64, align 8
  %self216 = alloca ptr, align 8
  %buf217 = alloca %"char[]", align 8
  %pattern218 = alloca %"char[]", align 8
  %retparam219 = alloca i64, align 8
  %reterr235 = alloca i64, align 8
  %taddr239 = alloca i64, align 8
  %taddr240 = alloca i64, align 8
  %varargslots241 = alloca [2 x %any], align 16
  %indirectarg244 = alloca %"any[]", align 8
  %taddr251 = alloca i64, align 8
  %taddr252 = alloca i64, align 8
  %varargslots253 = alloca [2 x %any], align 16
  %indirectarg256 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype156, align 8, !dbg !1483
  store ptr null, ptr %.cachedtype, align 8, !dbg !1483
  %4 = icmp eq ptr %1, null, !dbg !1483
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !1483
  br i1 %5, label %panic, label %checkok, !dbg !1483

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1484, !DIExpression(), !1485)
  store ptr %2, ptr %pattern, align 8
  %ptradd = getelementptr inbounds i8, ptr %pattern, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %pattern, !1486, !DIExpression(), !1487)
  %ptradd1 = getelementptr inbounds i8, ptr %pattern, i64 8, !dbg !1488
  %6 = load i64, ptr %ptradd1, align 8, !dbg !1488
  %lt = icmp ult i64 0, %6, !dbg !1488
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1488

assert_fail:                                      ; preds = %checkok
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1488
  call void %7(ptr @.panic_msg.112, i64 67, ptr @.file.109, i64 10, ptr @.func.111, i64 4, i32 45) #5, !dbg !1488
  unreachable, !dbg !1488

assert_ok:                                        ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !1490
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !1490
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd2, i64 8, !dbg !1490
  %9 = load i64, ptr %ptradd3, align 8, !dbg !1490
  %ptradd4 = getelementptr inbounds i8, ptr %pattern, i64 8, !dbg !1491
  %10 = load i64, ptr %ptradd4, align 8, !dbg !1491
  %gt = icmp ugt i64 %9, %10, !dbg !1490
  br i1 %gt, label %assert_ok6, label %assert_fail5, !dbg !1490

assert_fail5:                                     ; preds = %assert_ok
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1490
  call void %11(ptr @.panic_msg.113, i64 69, ptr @.file.109, i64 10, ptr @.func.111, i64 4, i32 46) #5, !dbg !1490
  unreachable, !dbg !1490

assert_ok6:                                       ; preds = %assert_ok
  %12 = load ptr, ptr %self, align 8, !dbg !1492
  %ptradd7 = getelementptr inbounds i8, ptr %12, i64 40, !dbg !1492
  %13 = load i64, ptr %ptradd7, align 8, !dbg !1492
  %eq = icmp eq i64 0, %13, !dbg !1492
  br i1 %eq, label %if.then, label %if.exit20, !dbg !1492

if.then:                                          ; preds = %assert_ok6
  %14 = load ptr, ptr %self, align 8, !dbg !1493
  %ptradd8 = getelementptr inbounds i8, ptr %14, i64 40, !dbg !1493
  %15 = load ptr, ptr %self, align 8
  store ptr %15, ptr %self9, align 8
  %16 = load ptr, ptr %self, align 8, !dbg !1495
  %ptradd10 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !1495
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %buf, ptr align 8 %ptradd10, i32 16, i1 false)
    #dbg_declare(ptr %n, !1496, !DIExpression(), !1498)
  %17 = load ptr, ptr %self9, align 8, !dbg !1500
  %ptradd11 = getelementptr inbounds i8, ptr %17, i64 8, !dbg !1501
  %18 = load i64, ptr %ptradd11, align 8, !dbg !1501
  %19 = inttoptr i64 %18 to ptr, !dbg !1501
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1483
  %20 = icmp eq ptr %19, %type, !dbg !1483
  br i1 %20, label %cache_hit, label %cache_miss, !dbg !1483

cache_miss:                                       ; preds = %if.then
  %ptradd12 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !1483
  %21 = load ptr, ptr %ptradd12, align 8, !dbg !1483
  %22 = call ptr @.dyn_search(ptr %21, ptr @"$sel.read"), !dbg !1483
  store ptr %22, ptr %.inlinecache, align 8, !dbg !1483
  store ptr %19, ptr %.cachedtype, align 8, !dbg !1483
  br label %23, !dbg !1483

cache_hit:                                        ; preds = %if.then
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1483
  br label %23, !dbg !1483

23:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %22, %cache_miss ], !dbg !1483
  %24 = icmp eq ptr %fn_phi, null, !dbg !1483
  br i1 %24, label %missing_function, label %match, !dbg !1483

missing_function:                                 ; preds = %23
  %25 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1500
  call void %25(ptr @.panic_msg.75, i64 41, ptr @.file.109, i64 10, ptr @.func.111, i64 4, i32 92) #5, !dbg !1500
  unreachable, !dbg !1500

match:                                            ; preds = %23
  %26 = load ptr, ptr %17, align 8
  %lo = load ptr, ptr %buf, align 8
  %ptradd13 = getelementptr inbounds i8, ptr %buf, i64 8
  %hi = load i64, ptr %ptradd13, align 8
  %27 = call i64 %fn_phi(ptr %retparam, ptr %26, ptr %lo, i64 %hi), !dbg !1500
  %not_err = icmp eq i64 %27, 0, !dbg !1500
  %28 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1500
  br i1 %28, label %after_check, label %assign_optional, !dbg !1500

assign_optional:                                  ; preds = %match
  store i64 %27, ptr %n.f, align 8, !dbg !1500
  br label %after_assign, !dbg !1500

after_check:                                      ; preds = %match
  %29 = load i64, ptr %retparam, align 8, !dbg !1500
  store i64 %29, ptr %n, align 8, !dbg !1500
  store i64 0, ptr %n.f, align 8, !dbg !1500
  br label %after_assign, !dbg !1500

after_assign:                                     ; preds = %after_check, %assign_optional
    #dbg_declare(ptr %err, !1502, !DIExpression(), !1503)
  br label %testblock, !dbg !1503

testblock:                                        ; preds = %after_assign
  %optval = load i64, ptr %n.f, align 8, !dbg !1504
  %not_err14 = icmp eq i64 %optval, 0, !dbg !1504
  %30 = call i1 @llvm.expect.i1(i1 %not_err14, i1 true), !dbg !1504
  br i1 %30, label %after_check16, label %assign_optional15, !dbg !1504

assign_optional15:                                ; preds = %testblock
  store i64 %optval, ptr %err, align 8, !dbg !1504
  br label %end_block, !dbg !1504

after_check16:                                    ; preds = %testblock
  store i64 0, ptr %err, align 8, !dbg !1504
  br label %end_block, !dbg !1504

end_block:                                        ; preds = %after_check16, %assign_optional15
  %31 = load i64, ptr %err, align 8, !dbg !1504
  %neq = icmp ne i64 %31, 0, !dbg !1504
  br i1 %neq, label %if.then17, label %if.exit, !dbg !1504

if.then17:                                        ; preds = %end_block
  store i64 %31, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %if.then17
  %32 = load i64, ptr %switch, align 8
  %eq18 = icmp eq i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), %32, !dbg !1505
  br i1 %eq18, label %switch.case, label %next_if, !dbg !1505

switch.case:                                      ; preds = %switch.entry
  store i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), ptr %error_var, align 8, !dbg !1506
  br label %guard_block, !dbg !1506

next_if:                                          ; preds = %switch.entry
  br label %switch.default, !dbg !1506

switch.default:                                   ; preds = %next_if
  %33 = load i64, ptr %err, align 8, !dbg !1508
  store i64 %33, ptr %error_var, align 8, !dbg !1508
  br label %guard_block, !dbg !1508

if.exit:                                          ; preds = %end_block
  br label %noerr_block, !dbg !1510

guard_block:                                      ; preds = %switch.default, %switch.case
  %34 = load i64, ptr %error_var, align 8, !dbg !1510
  ret i64 %34, !dbg !1510

noerr_block:                                      ; preds = %if.exit
  %35 = load i64, ptr %n, align 8, !dbg !1510
  store i64 %35, ptr %ptradd8, align 8, !dbg !1510
  %36 = load ptr, ptr %self, align 8, !dbg !1511
  %ptradd19 = getelementptr inbounds i8, ptr %36, i64 32, !dbg !1511
  store i64 0, ptr %ptradd19, align 8, !dbg !1512
  br label %if.exit20, !dbg !1512

if.exit20:                                        ; preds = %noerr_block, %assert_ok6
  %37 = load ptr, ptr %self, align 8, !dbg !1513
  %ptradd21 = getelementptr inbounds i8, ptr %37, i64 40, !dbg !1513
  %38 = load i64, ptr %ptradd21, align 8, !dbg !1513
  %39 = load ptr, ptr %self, align 8, !dbg !1514
  %ptradd22 = getelementptr inbounds i8, ptr %39, i64 32, !dbg !1514
  %40 = load i64, ptr %ptradd22, align 8, !dbg !1514
  %ge = icmp uge i64 %38, %40, !dbg !1513
  br i1 %ge, label %assert_ok24, label %assert_fail23, !dbg !1513

assert_fail23:                                    ; preds = %if.exit20
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1513
  call void %41(ptr @.panic_msg.67, i64 16, ptr @.file.109, i64 10, ptr @.func.111, i64 4, i32 56) #5, !dbg !1513
  unreachable, !dbg !1513

assert_ok24:                                      ; preds = %if.exit20
    #dbg_declare(ptr %n25, !1515, !DIExpression(), !1516)
  %42 = load ptr, ptr %self, align 8, !dbg !1517
  %ptradd26 = getelementptr inbounds i8, ptr %42, i64 40, !dbg !1517
  %43 = load i64, ptr %ptradd26, align 8, !dbg !1517
  %44 = load ptr, ptr %self, align 8, !dbg !1518
  %ptradd27 = getelementptr inbounds i8, ptr %44, i64 32, !dbg !1518
  %45 = load i64, ptr %ptradd27, align 8, !dbg !1518
  %sub = sub i64 %43, %45, !dbg !1517
  store i64 %sub, ptr %n25, align 8, !dbg !1517
    #dbg_declare(ptr %buf28, !1519, !DIExpression(), !1520)
  %46 = load ptr, ptr %self, align 8, !dbg !1521
  %ptradd29 = getelementptr inbounds i8, ptr %46, i64 16, !dbg !1521
  %47 = load %"char[]", ptr %ptradd29, align 8, !dbg !1521
  %48 = extractvalue %"char[]" %47, 0, !dbg !1521
  %49 = load ptr, ptr %self, align 8, !dbg !1522
  %ptradd30 = getelementptr inbounds i8, ptr %49, i64 32, !dbg !1522
  %50 = load i64, ptr %ptradd30, align 8, !dbg !1522
  %51 = extractvalue %"char[]" %47, 1, !dbg !1522
  %gt31 = icmp ugt i64 %50, %51, !dbg !1522
  %52 = call i1 @llvm.expect.i1(i1 %gt31, i1 false), !dbg !1522
  br i1 %52, label %panic32, label %checkok35, !dbg !1522

checkok35:                                        ; preds = %assert_ok24
  %53 = load i64, ptr %n25, align 8, !dbg !1523
  %add = add i64 %50, %53, !dbg !1523
  %lt36 = icmp ult i64 %51, %add, !dbg !1523
  %sub37 = sub i64 %add, 1, !dbg !1523
  %54 = call i1 @llvm.expect.i1(i1 %lt36, i1 false), !dbg !1523
  br i1 %54, label %panic38, label %checkok45, !dbg !1523

checkok45:                                        ; preds = %checkok35
  %size = sub i64 %add, %50, !dbg !1521
  %ptradd46 = getelementptr inbounds i8, ptr %48, i64 %50, !dbg !1521
  %55 = insertvalue %"char[]" undef, ptr %ptradd46, 0, !dbg !1521
  %56 = insertvalue %"char[]" %55, i64 %size, 1, !dbg !1521
  store %"char[]" %56, ptr %buf28, align 8, !dbg !1521
    #dbg_declare(ptr %i, !1524, !DIExpression(), !1525)
  store i64 0, ptr %i, align 8, !dbg !1525
  %57 = load ptr, ptr %self, align 8
  store ptr %57, ptr %self47, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %buf48, ptr align 8 %buf28, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %pattern49, ptr align 8 %pattern, i32 16, i1 false)
  %lo51 = load ptr, ptr %buf48, align 8
  %ptradd52 = getelementptr inbounds i8, ptr %buf48, i64 8
  %hi53 = load i64, ptr %ptradd52, align 8
  %lo54 = load ptr, ptr %pattern49, align 8
  %ptradd55 = getelementptr inbounds i8, ptr %pattern49, i64 8
  %hi56 = load i64, ptr %ptradd55, align 8
  %58 = call i64 @std.core.String.index_of(ptr %retparam50, ptr %lo51, i64 %hi53, ptr %lo54, i64 %hi56), !dbg !1526
  %not_err57 = icmp eq i64 %58, 0, !dbg !1526
  %59 = call i1 @llvm.expect.i1(i1 %not_err57, i1 true), !dbg !1526
  br i1 %59, label %after_check58, label %catch_landing, !dbg !1526

after_check58:                                    ; preds = %checkok45
  %60 = load i64, ptr %retparam50, align 8, !dbg !1526
  store i64 %60, ptr %i, align 8, !dbg !1526
  br label %phi_try_catch, !dbg !1526

catch_landing:                                    ; preds = %checkok45
  br label %phi_try_catch, !dbg !1526

phi_try_catch:                                    ; preds = %catch_landing, %after_check58
  %val = phi i1 [ true, %after_check58 ], [ false, %catch_landing ], !dbg !1526
  br i1 %val, label %if.then59, label %if.exit85, !dbg !1526

if.then59:                                        ; preds = %phi_try_catch
  %61 = load ptr, ptr %self, align 8, !dbg !1529
  %ptradd60 = getelementptr inbounds i8, ptr %61, i64 32, !dbg !1529
  %62 = load i64, ptr %ptradd60, align 8, !dbg !1529
  %63 = load i64, ptr %i, align 8, !dbg !1531
  %ptradd61 = getelementptr inbounds i8, ptr %pattern, i64 8, !dbg !1532
  %64 = load i64, ptr %ptradd61, align 8, !dbg !1532
  %add62 = add i64 %63, %64, !dbg !1531
  %add63 = add i64 %62, %add62, !dbg !1529
  store i64 %add63, ptr %ptradd60, align 8, !dbg !1529
  %65 = load %"char[]", ptr %buf28, align 8, !dbg !1533
  %66 = extractvalue %"char[]" %65, 0, !dbg !1533
  %67 = extractvalue %"char[]" %65, 1, !dbg !1534
  %gt64 = icmp ugt i64 0, %67, !dbg !1534
  %68 = call i1 @llvm.expect.i1(i1 %gt64, i1 false), !dbg !1534
  br i1 %68, label %panic65, label %checkok72, !dbg !1534

checkok72:                                        ; preds = %if.then59
  %69 = load i64, ptr %i, align 8, !dbg !1535
  %add73 = add i64 0, %69, !dbg !1535
  %lt74 = icmp ult i64 %67, %add73, !dbg !1535
  %sub75 = sub i64 %add73, 1, !dbg !1535
  %70 = call i1 @llvm.expect.i1(i1 %lt74, i1 false), !dbg !1535
  br i1 %70, label %panic76, label %checkok83, !dbg !1535

checkok83:                                        ; preds = %checkok72
  %size84 = sub i64 %add73, 0, !dbg !1533
  %71 = insertvalue %"char[]" undef, ptr %66, 0, !dbg !1533
  %72 = insertvalue %"char[]" %71, i64 %size84, 1, !dbg !1533
  store %"char[]" %72, ptr %0, align 8, !dbg !1533
  ret i64 0, !dbg !1533

if.exit85:                                        ; preds = %phi_try_catch
  %73 = load ptr, ptr %self, align 8, !dbg !1536
  %ptradd86 = getelementptr inbounds i8, ptr %73, i64 32, !dbg !1536
  %74 = load i64, ptr %ptradd86, align 8, !dbg !1536
  %eq87 = icmp eq i64 0, %74, !dbg !1536
  br i1 %eq87, label %or.phi, label %or.rhs, !dbg !1536

or.rhs:                                           ; preds = %if.exit85
  %75 = load ptr, ptr %self, align 8, !dbg !1537
  %ptradd88 = getelementptr inbounds i8, ptr %75, i64 40, !dbg !1537
  %76 = load i64, ptr %ptradd88, align 8, !dbg !1537
  %77 = load ptr, ptr %self, align 8, !dbg !1538
  %ptradd89 = getelementptr inbounds i8, ptr %77, i64 16, !dbg !1538
  %ptradd90 = getelementptr inbounds i8, ptr %ptradd89, i64 8, !dbg !1538
  %78 = load i64, ptr %ptradd90, align 8, !dbg !1538
  %lt91 = icmp ult i64 %76, %78, !dbg !1537
  br label %or.phi, !dbg !1537

or.phi:                                           ; preds = %or.rhs, %if.exit85
  %val92 = phi i1 [ true, %if.exit85 ], [ %lt91, %or.rhs ], !dbg !1537
  br i1 %val92, label %if.then93, label %if.exit94, !dbg !1537

if.then93:                                        ; preds = %or.phi
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !1539

if.exit94:                                        ; preds = %or.phi
  %79 = load %"char[]", ptr %buf28, align 8, !dbg !1541
  %80 = extractvalue %"char[]" %79, 0, !dbg !1541
  %81 = extractvalue %"char[]" %79, 1, !dbg !1542
  %gt95 = icmp ugt i64 0, %81, !dbg !1542
  %82 = call i1 @llvm.expect.i1(i1 %gt95, i1 false), !dbg !1542
  br i1 %82, label %panic96, label %checkok103, !dbg !1542

checkok103:                                       ; preds = %if.exit94
  %size104 = sub i64 %81, 0, !dbg !1541
  %83 = insertvalue %"char[]" undef, ptr %80, 0, !dbg !1541
  %84 = insertvalue %"char[]" %83, i64 %size104, 1, !dbg !1541
  %85 = load ptr, ptr %self, align 8, !dbg !1543
  %ptradd105 = getelementptr inbounds i8, ptr %85, i64 16, !dbg !1543
  %86 = load %"char[]", ptr %ptradd105, align 8, !dbg !1543
  %87 = extractvalue %"char[]" %86, 0, !dbg !1543
  %88 = extractvalue %"char[]" %86, 1, !dbg !1544
  %gt106 = icmp ugt i64 0, %88, !dbg !1544
  %89 = call i1 @llvm.expect.i1(i1 %gt106, i1 false), !dbg !1544
  br i1 %89, label %panic107, label %checkok114, !dbg !1544

checkok114:                                       ; preds = %checkok103
  %90 = load i64, ptr %n25, align 8, !dbg !1545
  %add115 = add i64 0, %90, !dbg !1545
  %lt116 = icmp ult i64 %88, %add115, !dbg !1545
  %sub117 = sub i64 %add115, 1, !dbg !1545
  %91 = call i1 @llvm.expect.i1(i1 %lt116, i1 false), !dbg !1545
  br i1 %91, label %panic118, label %checkok125, !dbg !1545

checkok125:                                       ; preds = %checkok114
  %size126 = sub i64 %add115, 0, !dbg !1543
  %92 = insertvalue %"char[]" undef, ptr %87, 0, !dbg !1543
  %93 = insertvalue %"char[]" %92, i64 %size126, 1, !dbg !1543
  %94 = extractvalue %"char[]" %93, 0, !dbg !1543
  %95 = extractvalue %"char[]" %84, 0, !dbg !1543
  %96 = extractvalue %"char[]" %84, 1, !dbg !1543
  %97 = extractvalue %"char[]" %93, 1, !dbg !1543
  %neq127 = icmp ne i64 %97, %96, !dbg !1543
  %98 = call i1 @llvm.expect.i1(i1 %neq127, i1 false), !dbg !1543
  br i1 %98, label %panic128, label %checkok135, !dbg !1543

checkok135:                                       ; preds = %checkok125
  %99 = mul i64 %96, 1, !dbg !1543
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %94, ptr align 1 %95, i64 %99, i1 false), !dbg !1543
  %100 = load ptr, ptr %self, align 8, !dbg !1546
  %ptradd136 = getelementptr inbounds i8, ptr %100, i64 32, !dbg !1546
  store i64 0, ptr %ptradd136, align 8, !dbg !1547
  %101 = load ptr, ptr %self, align 8, !dbg !1548
  %ptradd137 = getelementptr inbounds i8, ptr %101, i64 16, !dbg !1548
  %102 = load %"char[]", ptr %ptradd137, align 8, !dbg !1548
  %103 = extractvalue %"char[]" %102, 0, !dbg !1548
  %104 = load i64, ptr %n25, align 8, !dbg !1549
  %105 = extractvalue %"char[]" %102, 1, !dbg !1549
  %gt138 = icmp ugt i64 %104, %105, !dbg !1549
  %106 = call i1 @llvm.expect.i1(i1 %gt138, i1 false), !dbg !1549
  br i1 %106, label %panic139, label %checkok146, !dbg !1549

checkok146:                                       ; preds = %checkok135
  %size147 = sub i64 %105, %104, !dbg !1548
  %ptradd148 = getelementptr inbounds i8, ptr %103, i64 %104, !dbg !1548
  %107 = insertvalue %"char[]" undef, ptr %ptradd148, 0, !dbg !1548
  %108 = insertvalue %"char[]" %107, i64 %size147, 1, !dbg !1548
  store %"char[]" %108, ptr %buf28, align 8, !dbg !1548
    #dbg_declare(ptr %p, !1550, !DIExpression(), !1551)
  %109 = load ptr, ptr %self, align 8
  store ptr %109, ptr %self150, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %buf151, ptr align 8 %buf28, i32 16, i1 false)
    #dbg_declare(ptr %n152, !1552, !DIExpression(), !1554)
  %110 = load ptr, ptr %self150, align 8, !dbg !1556
  %ptradd154 = getelementptr inbounds i8, ptr %110, i64 8, !dbg !1557
  %111 = load i64, ptr %ptradd154, align 8, !dbg !1557
  %112 = inttoptr i64 %111 to ptr, !dbg !1557
  %type157 = load ptr, ptr %.cachedtype156, align 8, !dbg !1483
  %113 = icmp eq ptr %112, %type157, !dbg !1483
  br i1 %113, label %cache_hit160, label %cache_miss158, !dbg !1483

cache_miss158:                                    ; preds = %checkok146
  %ptradd159 = getelementptr inbounds i8, ptr %112, i64 16, !dbg !1483
  %114 = load ptr, ptr %ptradd159, align 8, !dbg !1483
  %115 = call ptr @.dyn_search(ptr %114, ptr @"$sel.read"), !dbg !1483
  store ptr %115, ptr %.inlinecache155, align 8, !dbg !1483
  store ptr %112, ptr %.cachedtype156, align 8, !dbg !1483
  br label %116, !dbg !1483

cache_hit160:                                     ; preds = %checkok146
  %cache_hit_fn161 = load ptr, ptr %.inlinecache155, align 8, !dbg !1483
  br label %116, !dbg !1483

116:                                              ; preds = %cache_hit160, %cache_miss158
  %fn_phi162 = phi ptr [ %cache_hit_fn161, %cache_hit160 ], [ %115, %cache_miss158 ], !dbg !1483
  %117 = icmp eq ptr %fn_phi162, null, !dbg !1483
  br i1 %117, label %missing_function163, label %match164, !dbg !1483

missing_function163:                              ; preds = %116
  %118 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1556
  call void %118(ptr @.panic_msg.75, i64 41, ptr @.file.109, i64 10, ptr @.func.111, i64 4, i32 92) #5, !dbg !1556
  unreachable, !dbg !1556

match164:                                         ; preds = %116
  %119 = load ptr, ptr %110, align 8
  %lo166 = load ptr, ptr %buf151, align 8
  %ptradd167 = getelementptr inbounds i8, ptr %buf151, i64 8
  %hi168 = load i64, ptr %ptradd167, align 8
  %120 = call i64 %fn_phi162(ptr %retparam165, ptr %119, ptr %lo166, i64 %hi168), !dbg !1556
  %not_err169 = icmp eq i64 %120, 0, !dbg !1556
  %121 = call i1 @llvm.expect.i1(i1 %not_err169, i1 true), !dbg !1556
  br i1 %121, label %after_check171, label %assign_optional170, !dbg !1556

assign_optional170:                               ; preds = %match164
  store i64 %120, ptr %n.f153, align 8, !dbg !1556
  br label %after_assign172, !dbg !1556

after_check171:                                   ; preds = %match164
  %122 = load i64, ptr %retparam165, align 8, !dbg !1556
  store i64 %122, ptr %n152, align 8, !dbg !1556
  store i64 0, ptr %n.f153, align 8, !dbg !1556
  br label %after_assign172, !dbg !1556

after_assign172:                                  ; preds = %after_check171, %assign_optional170
    #dbg_declare(ptr %err173, !1558, !DIExpression(), !1559)
  br label %testblock174, !dbg !1559

testblock174:                                     ; preds = %after_assign172
  %optval175 = load i64, ptr %n.f153, align 8, !dbg !1560
  %not_err176 = icmp eq i64 %optval175, 0, !dbg !1560
  %123 = call i1 @llvm.expect.i1(i1 %not_err176, i1 true), !dbg !1560
  br i1 %123, label %after_check178, label %assign_optional177, !dbg !1560

assign_optional177:                               ; preds = %testblock174
  store i64 %optval175, ptr %err173, align 8, !dbg !1560
  br label %end_block179, !dbg !1560

after_check178:                                   ; preds = %testblock174
  store i64 0, ptr %err173, align 8, !dbg !1560
  br label %end_block179, !dbg !1560

end_block179:                                     ; preds = %after_check178, %assign_optional177
  %124 = load i64, ptr %err173, align 8, !dbg !1560
  %neq180 = icmp ne i64 %124, 0, !dbg !1560
  br i1 %neq180, label %if.then181, label %if.exit188, !dbg !1560

if.then181:                                       ; preds = %end_block179
  store i64 %124, ptr %switch182, align 8
  br label %switch.entry183

switch.entry183:                                  ; preds = %if.then181
  %125 = load i64, ptr %switch182, align 8
  %eq184 = icmp eq i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), %125, !dbg !1561
  br i1 %eq184, label %switch.case185, label %next_if186, !dbg !1561

switch.case185:                                   ; preds = %switch.entry183
  store i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), ptr %error_var149, align 8, !dbg !1562
  br label %guard_block189, !dbg !1562

next_if186:                                       ; preds = %switch.entry183
  br label %switch.default187, !dbg !1562

switch.default187:                                ; preds = %next_if186
  %126 = load i64, ptr %err173, align 8, !dbg !1564
  store i64 %126, ptr %error_var149, align 8, !dbg !1564
  br label %guard_block189, !dbg !1564

if.exit188:                                       ; preds = %end_block179
  br label %noerr_block190, !dbg !1566

guard_block189:                                   ; preds = %switch.default187, %switch.case185
  %127 = load i64, ptr %error_var149, align 8, !dbg !1566
  ret i64 %127, !dbg !1566

noerr_block190:                                   ; preds = %if.exit188
  %128 = load i64, ptr %n152, align 8, !dbg !1566
  store i64 %128, ptr %p, align 8, !dbg !1566
  %129 = load ptr, ptr %self, align 8, !dbg !1567
  %ptradd191 = getelementptr inbounds i8, ptr %129, i64 40, !dbg !1567
  %130 = load i64, ptr %n25, align 8, !dbg !1568
  %131 = load i64, ptr %p, align 8, !dbg !1569
  %add192 = add i64 %130, %131, !dbg !1568
  store i64 %add192, ptr %ptradd191, align 8, !dbg !1568
  %132 = load %"char[]", ptr %buf28, align 8, !dbg !1570
  %133 = extractvalue %"char[]" %132, 0, !dbg !1570
  %134 = extractvalue %"char[]" %132, 1, !dbg !1571
  %gt193 = icmp ugt i64 0, %134, !dbg !1571
  %135 = call i1 @llvm.expect.i1(i1 %gt193, i1 false), !dbg !1571
  br i1 %135, label %panic194, label %checkok201, !dbg !1571

checkok201:                                       ; preds = %noerr_block190
  %136 = load i64, ptr %p, align 8, !dbg !1572
  %add202 = add i64 0, %136, !dbg !1572
  %lt203 = icmp ult i64 %134, %add202, !dbg !1572
  %sub204 = sub i64 %add202, 1, !dbg !1572
  %137 = call i1 @llvm.expect.i1(i1 %lt203, i1 false), !dbg !1572
  br i1 %137, label %panic205, label %checkok212, !dbg !1572

checkok212:                                       ; preds = %checkok201
  %size213 = sub i64 %add202, 0, !dbg !1570
  %138 = insertvalue %"char[]" undef, ptr %133, 0, !dbg !1570
  %139 = insertvalue %"char[]" %138, i64 %size213, 1, !dbg !1570
  store %"char[]" %139, ptr %buf28, align 8, !dbg !1570
    #dbg_declare(ptr %i214, !1573, !DIExpression(), !1574)
  %140 = load ptr, ptr %self, align 8
  store ptr %140, ptr %self216, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %buf217, ptr align 8 %buf28, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %pattern218, ptr align 8 %pattern, i32 16, i1 false)
  %lo220 = load ptr, ptr %buf217, align 8
  %ptradd221 = getelementptr inbounds i8, ptr %buf217, i64 8
  %hi222 = load i64, ptr %ptradd221, align 8
  %lo223 = load ptr, ptr %pattern218, align 8
  %ptradd224 = getelementptr inbounds i8, ptr %pattern218, i64 8
  %hi225 = load i64, ptr %ptradd224, align 8
  %141 = call i64 @std.core.String.index_of(ptr %retparam219, ptr %lo220, i64 %hi222, ptr %lo223, i64 %hi225), !dbg !1575
  %not_err226 = icmp eq i64 %141, 0, !dbg !1575
  %142 = call i1 @llvm.expect.i1(i1 %not_err226, i1 true), !dbg !1575
  br i1 %142, label %after_check228, label %assign_optional227, !dbg !1575

assign_optional227:                               ; preds = %checkok212
  store i64 %141, ptr %error_var215, align 8, !dbg !1575
  br label %guard_block229, !dbg !1575

after_check228:                                   ; preds = %checkok212
  br label %noerr_block230, !dbg !1575

guard_block229:                                   ; preds = %assign_optional227
  %143 = load i64, ptr %error_var215, align 8, !dbg !1575
  ret i64 %143, !dbg !1575

noerr_block230:                                   ; preds = %after_check228
  %144 = load i64, ptr %retparam219, align 8, !dbg !1575
  store i64 %144, ptr %i214, align 8, !dbg !1575
  %145 = load ptr, ptr %self, align 8, !dbg !1578
  %ptradd231 = getelementptr inbounds i8, ptr %145, i64 32, !dbg !1578
  %146 = load i64, ptr %n25, align 8, !dbg !1579
  %147 = load i64, ptr %i214, align 8, !dbg !1580
  %add232 = add i64 %146, %147, !dbg !1579
  %ptradd233 = getelementptr inbounds i8, ptr %pattern, i64 8, !dbg !1581
  %148 = load i64, ptr %ptradd233, align 8, !dbg !1581
  %add234 = add i64 %add232, %148, !dbg !1579
  store i64 %add234, ptr %ptradd231, align 8, !dbg !1579
  %149 = load ptr, ptr %self, align 8, !dbg !1582
  %ptradd236 = getelementptr inbounds i8, ptr %149, i64 16, !dbg !1582
  %150 = load %"char[]", ptr %ptradd236, align 8, !dbg !1582
  %151 = extractvalue %"char[]" %150, 0, !dbg !1582
  %152 = extractvalue %"char[]" %150, 1, !dbg !1583
  %gt237 = icmp ugt i64 0, %152, !dbg !1583
  %153 = call i1 @llvm.expect.i1(i1 %gt237, i1 false), !dbg !1583
  br i1 %153, label %panic238, label %checkok245, !dbg !1583

checkok245:                                       ; preds = %noerr_block230
  %154 = load i64, ptr %n25, align 8, !dbg !1584
  %155 = load i64, ptr %i214, align 8, !dbg !1585
  %add246 = add i64 %154, %155, !dbg !1584
  %add247 = add i64 0, %add246, !dbg !1584
  %lt248 = icmp ult i64 %152, %add247, !dbg !1584
  %sub249 = sub i64 %add247, 1, !dbg !1584
  %156 = call i1 @llvm.expect.i1(i1 %lt248, i1 false), !dbg !1584
  br i1 %156, label %panic250, label %checkok257, !dbg !1584

checkok257:                                       ; preds = %checkok245
  %size258 = sub i64 %add247, 0, !dbg !1582
  %157 = insertvalue %"char[]" undef, ptr %151, 0, !dbg !1582
  %158 = insertvalue %"char[]" %157, i64 %size258, 1, !dbg !1582
  store %"char[]" %158, ptr %0, align 8, !dbg !1582
  ret i64 0, !dbg !1582

panic:                                            ; preds = %entry
  %159 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1485
  call void %159(ptr @.panic_msg, i64 62, ptr @.file.109, i64 10, ptr @.func.111, i64 4, i32 48) #5, !dbg !1485
  unreachable, !dbg !1485

panic32:                                          ; preds = %assert_ok24
  store i64 %51, ptr %taddr, align 8
  %160 = insertvalue %any undef, ptr %taddr, 0
  %161 = insertvalue %any %160, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %50, ptr %taddr33, align 8
  %162 = insertvalue %any undef, ptr %taddr33, 0
  %163 = insertvalue %any %162, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %161, ptr %varargslots, align 16
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %163, ptr %ptradd34, align 16
  %164 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %164, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.109, i64 10, ptr @.func.111, i64 4, i32 58, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1521
  unreachable, !dbg !1521

panic38:                                          ; preds = %checkok35
  store i64 %sub37, ptr %taddr39, align 8
  %165 = insertvalue %any undef, ptr %taddr39, 0
  %166 = insertvalue %any %165, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %51, ptr %taddr40, align 8
  %167 = insertvalue %any undef, ptr %taddr40, 0
  %168 = insertvalue %any %167, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %166, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %168, ptr %ptradd42, align 16
  %169 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %169, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 60, ptr @.file.109, i64 10, ptr @.func.111, i64 4, i32 58, ptr byval(%"any[]") align 8 %indirectarg44) #5, !dbg !1521
  unreachable, !dbg !1521

panic65:                                          ; preds = %if.then59
  store i64 %67, ptr %taddr66, align 8
  %170 = insertvalue %any undef, ptr %taddr66, 0
  %171 = insertvalue %any %170, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr67, align 8
  %172 = insertvalue %any undef, ptr %taddr67, 0
  %173 = insertvalue %any %172, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %171, ptr %varargslots68, align 16
  %ptradd69 = getelementptr inbounds i8, ptr %varargslots68, i64 16
  store %any %173, ptr %ptradd69, align 16
  %174 = insertvalue %"any[]" undef, ptr %varargslots68, 0
  %"$$temp70" = insertvalue %"any[]" %174, i64 2, 1
  store %"any[]" %"$$temp70", ptr %indirectarg71, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.109, i64 10, ptr @.func.111, i64 4, i32 62, ptr byval(%"any[]") align 8 %indirectarg71) #5, !dbg !1533
  unreachable, !dbg !1533

panic76:                                          ; preds = %checkok72
  store i64 %sub75, ptr %taddr77, align 8
  %175 = insertvalue %any undef, ptr %taddr77, 0
  %176 = insertvalue %any %175, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %67, ptr %taddr78, align 8
  %177 = insertvalue %any undef, ptr %taddr78, 0
  %178 = insertvalue %any %177, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %176, ptr %varargslots79, align 16
  %ptradd80 = getelementptr inbounds i8, ptr %varargslots79, i64 16
  store %any %178, ptr %ptradd80, align 16
  %179 = insertvalue %"any[]" undef, ptr %varargslots79, 0
  %"$$temp81" = insertvalue %"any[]" %179, i64 2, 1
  store %"any[]" %"$$temp81", ptr %indirectarg82, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 60, ptr @.file.109, i64 10, ptr @.func.111, i64 4, i32 62, ptr byval(%"any[]") align 8 %indirectarg82) #5, !dbg !1533
  unreachable, !dbg !1533

panic96:                                          ; preds = %if.exit94
  store i64 %81, ptr %taddr97, align 8
  %180 = insertvalue %any undef, ptr %taddr97, 0
  %181 = insertvalue %any %180, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr98, align 8
  %182 = insertvalue %any undef, ptr %taddr98, 0
  %183 = insertvalue %any %182, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %181, ptr %varargslots99, align 16
  %ptradd100 = getelementptr inbounds i8, ptr %varargslots99, i64 16
  store %any %183, ptr %ptradd100, align 16
  %184 = insertvalue %"any[]" undef, ptr %varargslots99, 0
  %"$$temp101" = insertvalue %"any[]" %184, i64 2, 1
  store %"any[]" %"$$temp101", ptr %indirectarg102, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.109, i64 10, ptr @.func.111, i64 4, i32 71, ptr byval(%"any[]") align 8 %indirectarg102) #5, !dbg !1541
  unreachable, !dbg !1541

panic107:                                         ; preds = %checkok103
  store i64 %88, ptr %taddr108, align 8
  %185 = insertvalue %any undef, ptr %taddr108, 0
  %186 = insertvalue %any %185, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr109, align 8
  %187 = insertvalue %any undef, ptr %taddr109, 0
  %188 = insertvalue %any %187, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %186, ptr %varargslots110, align 16
  %ptradd111 = getelementptr inbounds i8, ptr %varargslots110, i64 16
  store %any %188, ptr %ptradd111, align 16
  %189 = insertvalue %"any[]" undef, ptr %varargslots110, 0
  %"$$temp112" = insertvalue %"any[]" %189, i64 2, 1
  store %"any[]" %"$$temp112", ptr %indirectarg113, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.109, i64 10, ptr @.func.111, i64 4, i32 71, ptr byval(%"any[]") align 8 %indirectarg113) #5, !dbg !1543
  unreachable, !dbg !1543

panic118:                                         ; preds = %checkok114
  store i64 %sub117, ptr %taddr119, align 8
  %190 = insertvalue %any undef, ptr %taddr119, 0
  %191 = insertvalue %any %190, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %88, ptr %taddr120, align 8
  %192 = insertvalue %any undef, ptr %taddr120, 0
  %193 = insertvalue %any %192, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %191, ptr %varargslots121, align 16
  %ptradd122 = getelementptr inbounds i8, ptr %varargslots121, i64 16
  store %any %193, ptr %ptradd122, align 16
  %194 = insertvalue %"any[]" undef, ptr %varargslots121, 0
  %"$$temp123" = insertvalue %"any[]" %194, i64 2, 1
  store %"any[]" %"$$temp123", ptr %indirectarg124, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 60, ptr @.file.109, i64 10, ptr @.func.111, i64 4, i32 71, ptr byval(%"any[]") align 8 %indirectarg124) #5, !dbg !1543
  unreachable, !dbg !1543

panic128:                                         ; preds = %checkok125
  store i64 %97, ptr %taddr129, align 8
  %195 = insertvalue %any undef, ptr %taddr129, 0
  %196 = insertvalue %any %195, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %96, ptr %taddr130, align 8
  %197 = insertvalue %any undef, ptr %taddr130, 0
  %198 = insertvalue %any %197, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %196, ptr %varargslots131, align 16
  %ptradd132 = getelementptr inbounds i8, ptr %varargslots131, i64 16
  store %any %198, ptr %ptradd132, align 16
  %199 = insertvalue %"any[]" undef, ptr %varargslots131, 0
  %"$$temp133" = insertvalue %"any[]" %199, i64 2, 1
  store %"any[]" %"$$temp133", ptr %indirectarg134, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.76, i64 38, ptr @.file.109, i64 10, ptr @.func.111, i64 4, i32 71, ptr byval(%"any[]") align 8 %indirectarg134) #5, !dbg !1543
  unreachable, !dbg !1543

panic139:                                         ; preds = %checkok135
  store i64 %105, ptr %taddr140, align 8
  %200 = insertvalue %any undef, ptr %taddr140, 0
  %201 = insertvalue %any %200, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %104, ptr %taddr141, align 8
  %202 = insertvalue %any undef, ptr %taddr141, 0
  %203 = insertvalue %any %202, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %201, ptr %varargslots142, align 16
  %ptradd143 = getelementptr inbounds i8, ptr %varargslots142, i64 16
  store %any %203, ptr %ptradd143, align 16
  %204 = insertvalue %"any[]" undef, ptr %varargslots142, 0
  %"$$temp144" = insertvalue %"any[]" %204, i64 2, 1
  store %"any[]" %"$$temp144", ptr %indirectarg145, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.109, i64 10, ptr @.func.111, i64 4, i32 74, ptr byval(%"any[]") align 8 %indirectarg145) #5, !dbg !1548
  unreachable, !dbg !1548

panic194:                                         ; preds = %noerr_block190
  store i64 %134, ptr %taddr195, align 8
  %205 = insertvalue %any undef, ptr %taddr195, 0
  %206 = insertvalue %any %205, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr196, align 8
  %207 = insertvalue %any undef, ptr %taddr196, 0
  %208 = insertvalue %any %207, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %206, ptr %varargslots197, align 16
  %ptradd198 = getelementptr inbounds i8, ptr %varargslots197, i64 16
  store %any %208, ptr %ptradd198, align 16
  %209 = insertvalue %"any[]" undef, ptr %varargslots197, 0
  %"$$temp199" = insertvalue %"any[]" %209, i64 2, 1
  store %"any[]" %"$$temp199", ptr %indirectarg200, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.109, i64 10, ptr @.func.111, i64 4, i32 78, ptr byval(%"any[]") align 8 %indirectarg200) #5, !dbg !1570
  unreachable, !dbg !1570

panic205:                                         ; preds = %checkok201
  store i64 %sub204, ptr %taddr206, align 8
  %210 = insertvalue %any undef, ptr %taddr206, 0
  %211 = insertvalue %any %210, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %134, ptr %taddr207, align 8
  %212 = insertvalue %any undef, ptr %taddr207, 0
  %213 = insertvalue %any %212, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %211, ptr %varargslots208, align 16
  %ptradd209 = getelementptr inbounds i8, ptr %varargslots208, i64 16
  store %any %213, ptr %ptradd209, align 16
  %214 = insertvalue %"any[]" undef, ptr %varargslots208, 0
  %"$$temp210" = insertvalue %"any[]" %214, i64 2, 1
  store %"any[]" %"$$temp210", ptr %indirectarg211, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 60, ptr @.file.109, i64 10, ptr @.func.111, i64 4, i32 78, ptr byval(%"any[]") align 8 %indirectarg211) #5, !dbg !1570
  unreachable, !dbg !1570

panic238:                                         ; preds = %noerr_block230
  store i64 %152, ptr %taddr239, align 8
  %215 = insertvalue %any undef, ptr %taddr239, 0
  %216 = insertvalue %any %215, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr240, align 8
  %217 = insertvalue %any undef, ptr %taddr240, 0
  %218 = insertvalue %any %217, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %216, ptr %varargslots241, align 16
  %ptradd242 = getelementptr inbounds i8, ptr %varargslots241, i64 16
  store %any %218, ptr %ptradd242, align 16
  %219 = insertvalue %"any[]" undef, ptr %varargslots241, 0
  %"$$temp243" = insertvalue %"any[]" %219, i64 2, 1
  store %"any[]" %"$$temp243", ptr %indirectarg244, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.109, i64 10, ptr @.func.111, i64 4, i32 82, ptr byval(%"any[]") align 8 %indirectarg244) #5, !dbg !1582
  unreachable, !dbg !1582

panic250:                                         ; preds = %checkok245
  store i64 %sub249, ptr %taddr251, align 8
  %220 = insertvalue %any undef, ptr %taddr251, 0
  %221 = insertvalue %any %220, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %152, ptr %taddr252, align 8
  %222 = insertvalue %any undef, ptr %taddr252, 0
  %223 = insertvalue %any %222, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %221, ptr %varargslots253, align 16
  %ptradd254 = getelementptr inbounds i8, ptr %varargslots253, i64 16
  store %any %223, ptr %ptradd254, align 16
  %224 = insertvalue %"any[]" undef, ptr %varargslots253, 0
  %"$$temp255" = insertvalue %"any[]" %224, i64 2, 1
  store %"any[]" %"$$temp255", ptr %indirectarg256, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 60, ptr @.file.109, i64 10, ptr @.func.111, i64 4, i32 82, ptr byval(%"any[]") align 8 %indirectarg256) #5, !dbg !1582
  unreachable, !dbg !1582
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Scanner.read(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !1586 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %n = alloca i64, align 8
  %x = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %varargslots18 = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr37 = alloca i64, align 8
  %taddr38 = alloca i64, align 8
  %varargslots39 = alloca [2 x %any], align 16
  %indirectarg42 = alloca %"any[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %varargslots48 = alloca [2 x %any], align 16
  %indirectarg51 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1589
  %4 = icmp eq ptr %1, null, !dbg !1589
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !1589
  br i1 %5, label %panic, label %checkok, !dbg !1589

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1590, !DIExpression(), !1591)
  store ptr %2, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !1592, !DIExpression(), !1593)
    #dbg_declare(ptr %n, !1594, !DIExpression(), !1595)
  store i64 0, ptr %n, align 8, !dbg !1595
  %6 = load ptr, ptr %self, align 8, !dbg !1596
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 32, !dbg !1596
  %7 = load i64, ptr %ptradd1, align 8, !dbg !1596
  %8 = load ptr, ptr %self, align 8, !dbg !1597
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 40, !dbg !1597
  %9 = load i64, ptr %ptradd2, align 8, !dbg !1597
  %lt = icmp ult i64 %7, %9, !dbg !1596
  br i1 %lt, label %if.then, label %if.exit, !dbg !1596

if.then:                                          ; preds = %checkok
  %ptradd3 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1598
  %10 = load i64, ptr %ptradd3, align 8
  store i64 %10, ptr %x, align 8
  %11 = load ptr, ptr %self, align 8, !dbg !1600
  %ptradd4 = getelementptr inbounds i8, ptr %11, i64 40, !dbg !1600
  %12 = load i64, ptr %ptradd4, align 8, !dbg !1600
  %13 = load ptr, ptr %self, align 8, !dbg !1601
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 32, !dbg !1601
  %14 = load i64, ptr %ptradd5, align 8, !dbg !1601
  %sub = sub i64 %12, %14, !dbg !1600
  store i64 %sub, ptr %.anon, align 8
  %15 = load i64, ptr %x, align 8
  store i64 %15, ptr %a, align 8
  %16 = load i64, ptr %.anon, align 8
  store i64 %16, ptr %b, align 8
  %17 = load i64, ptr %a, align 8, !dbg !1602
  %18 = load i64, ptr %b, align 8, !dbg !1607
  %lt6 = icmp ult i64 %17, %18, !dbg !1602
  br i1 %lt6, label %cond.lhs, label %cond.rhs, !dbg !1602

cond.lhs:                                         ; preds = %if.then
  %19 = load i64, ptr %x, align 8, !dbg !1608
  br label %cond.phi, !dbg !1608

cond.rhs:                                         ; preds = %if.then
  %20 = load i64, ptr %.anon, align 8, !dbg !1609
  br label %cond.phi, !dbg !1609

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %19, %cond.lhs ], [ %20, %cond.rhs ], !dbg !1609
  store i64 %val, ptr %n, align 8, !dbg !1609
  %21 = load ptr, ptr %self, align 8, !dbg !1610
  %ptradd7 = getelementptr inbounds i8, ptr %21, i64 16, !dbg !1610
  %22 = load %"char[]", ptr %ptradd7, align 8, !dbg !1610
  %23 = extractvalue %"char[]" %22, 0, !dbg !1610
  %24 = load ptr, ptr %self, align 8, !dbg !1611
  %ptradd8 = getelementptr inbounds i8, ptr %24, i64 32, !dbg !1611
  %25 = load i64, ptr %ptradd8, align 8, !dbg !1611
  %26 = extractvalue %"char[]" %22, 1, !dbg !1611
  %gt = icmp ugt i64 %25, %26, !dbg !1611
  %27 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1611
  br i1 %27, label %panic9, label %checkok12, !dbg !1611

checkok12:                                        ; preds = %cond.phi
  %28 = load i64, ptr %n, align 8, !dbg !1612
  %add = add i64 %25, %28, !dbg !1612
  %lt13 = icmp ult i64 %26, %add, !dbg !1612
  %sub14 = sub i64 %add, 1, !dbg !1612
  %29 = call i1 @llvm.expect.i1(i1 %lt13, i1 false), !dbg !1612
  br i1 %29, label %panic15, label %checkok22, !dbg !1612

checkok22:                                        ; preds = %checkok12
  %size = sub i64 %add, %25, !dbg !1610
  %ptradd23 = getelementptr inbounds i8, ptr %23, i64 %25, !dbg !1610
  %30 = insertvalue %"char[]" undef, ptr %ptradd23, 0, !dbg !1610
  %31 = insertvalue %"char[]" %30, i64 %size, 1, !dbg !1610
  %32 = load %"char[]", ptr %bytes, align 8, !dbg !1613
  %33 = extractvalue %"char[]" %32, 0, !dbg !1613
  %34 = extractvalue %"char[]" %32, 1, !dbg !1614
  %gt24 = icmp ugt i64 0, %34, !dbg !1614
  %35 = call i1 @llvm.expect.i1(i1 %gt24, i1 false), !dbg !1614
  br i1 %35, label %panic25, label %checkok32, !dbg !1614

checkok32:                                        ; preds = %checkok22
  %36 = load i64, ptr %n, align 8, !dbg !1615
  %add33 = add i64 0, %36, !dbg !1615
  %lt34 = icmp ult i64 %34, %add33, !dbg !1615
  %sub35 = sub i64 %add33, 1, !dbg !1615
  %37 = call i1 @llvm.expect.i1(i1 %lt34, i1 false), !dbg !1615
  br i1 %37, label %panic36, label %checkok43, !dbg !1615

checkok43:                                        ; preds = %checkok32
  %size44 = sub i64 %add33, 0, !dbg !1613
  %38 = insertvalue %"char[]" undef, ptr %33, 0, !dbg !1613
  %39 = insertvalue %"char[]" %38, i64 %size44, 1, !dbg !1613
  %40 = extractvalue %"char[]" %39, 0, !dbg !1613
  %41 = extractvalue %"char[]" %31, 0, !dbg !1613
  %42 = extractvalue %"char[]" %31, 1, !dbg !1613
  %43 = extractvalue %"char[]" %39, 1, !dbg !1613
  %neq = icmp ne i64 %43, %42, !dbg !1613
  %44 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1613
  br i1 %44, label %panic45, label %checkok52, !dbg !1613

checkok52:                                        ; preds = %checkok43
  %45 = mul i64 %42, 1, !dbg !1613
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %40, ptr align 1 %41, i64 %45, i1 false), !dbg !1613
  %46 = load ptr, ptr %self, align 8, !dbg !1616
  %ptradd53 = getelementptr inbounds i8, ptr %46, i64 32, !dbg !1616
  %47 = load i64, ptr %ptradd53, align 8, !dbg !1616
  %48 = load i64, ptr %n, align 8, !dbg !1617
  %add54 = add i64 %47, %48, !dbg !1616
  store i64 %add54, ptr %ptradd53, align 8, !dbg !1616
  %49 = load %"char[]", ptr %bytes, align 8, !dbg !1618
  %50 = extractvalue %"char[]" %49, 0, !dbg !1618
  %51 = load i64, ptr %n, align 8, !dbg !1619
  %52 = extractvalue %"char[]" %49, 1, !dbg !1619
  %gt55 = icmp ugt i64 %51, %52, !dbg !1619
  %53 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !1619
  br i1 %53, label %panic56, label %checkok63, !dbg !1619

checkok63:                                        ; preds = %checkok52
  %size64 = sub i64 %52, %51, !dbg !1618
  %ptradd65 = getelementptr inbounds i8, ptr %50, i64 %51, !dbg !1618
  %54 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !1618
  %55 = insertvalue %"char[]" %54, i64 %size64, 1, !dbg !1618
  store %"char[]" %55, ptr %bytes, align 8, !dbg !1618
  br label %if.exit, !dbg !1618

if.exit:                                          ; preds = %checkok63, %checkok
  %56 = load i64, ptr %n, align 8, !dbg !1620
  %57 = load ptr, ptr %self, align 8, !dbg !1621
  %ptradd66 = getelementptr inbounds i8, ptr %57, i64 8, !dbg !1622
  %58 = load i64, ptr %ptradd66, align 8, !dbg !1622
  %59 = inttoptr i64 %58 to ptr, !dbg !1622
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1589
  %60 = icmp eq ptr %59, %type, !dbg !1589
  br i1 %60, label %cache_hit, label %cache_miss, !dbg !1589

cache_miss:                                       ; preds = %if.exit
  %ptradd67 = getelementptr inbounds i8, ptr %59, i64 16, !dbg !1589
  %61 = load ptr, ptr %ptradd67, align 8, !dbg !1589
  %62 = call ptr @.dyn_search(ptr %61, ptr @"$sel.read"), !dbg !1589
  store ptr %62, ptr %.inlinecache, align 8, !dbg !1589
  store ptr %59, ptr %.cachedtype, align 8, !dbg !1589
  br label %63, !dbg !1589

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1589
  br label %63, !dbg !1589

63:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %62, %cache_miss ], !dbg !1589
  %64 = icmp eq ptr %fn_phi, null, !dbg !1589
  br i1 %64, label %missing_function, label %match, !dbg !1589

missing_function:                                 ; preds = %63
  %65 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1621
  call void %65(ptr @.panic_msg.75, i64 41, ptr @.file.109, i64 10, ptr @.func.58, i64 4, i32 113) #5, !dbg !1621
  unreachable, !dbg !1621

match:                                            ; preds = %63
  %66 = load ptr, ptr %57, align 8
  %lo = load ptr, ptr %bytes, align 8
  %ptradd68 = getelementptr inbounds i8, ptr %bytes, i64 8
  %hi = load i64, ptr %ptradd68, align 8
  %67 = call i64 %fn_phi(ptr %retparam, ptr %66, ptr %lo, i64 %hi), !dbg !1621
  %not_err = icmp eq i64 %67, 0, !dbg !1621
  %68 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1621
  br i1 %68, label %after_check, label %assign_optional, !dbg !1621

assign_optional:                                  ; preds = %match
  store i64 %67, ptr %error_var, align 8, !dbg !1621
  br label %guard_block, !dbg !1621

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !1621

guard_block:                                      ; preds = %assign_optional
  %69 = load i64, ptr %error_var, align 8, !dbg !1621
  ret i64 %69, !dbg !1621

noerr_block:                                      ; preds = %after_check
  %70 = load i64, ptr %retparam, align 8, !dbg !1621
  %add69 = add i64 %56, %70, !dbg !1620
  store i64 %add69, ptr %n, align 8, !dbg !1620
  %71 = load i64, ptr %n, align 8, !dbg !1623
  store i64 %71, ptr %0, align 8, !dbg !1623
  ret i64 0, !dbg !1623

panic:                                            ; preds = %entry
  %72 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1591
  call void %72(ptr @.panic_msg, i64 62, ptr @.file.109, i64 10, ptr @.func.58, i64 4, i32 103) #5, !dbg !1591
  unreachable, !dbg !1591

panic9:                                           ; preds = %cond.phi
  store i64 %26, ptr %taddr, align 8
  %73 = insertvalue %any undef, ptr %taddr, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr10, align 8
  %75 = insertvalue %any undef, ptr %taddr10, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %74, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %76, ptr %ptradd11, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.109, i64 10, ptr @.func.58, i64 4, i32 109, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1610
  unreachable, !dbg !1610

panic15:                                          ; preds = %checkok12
  store i64 %sub14, ptr %taddr16, align 8
  %78 = insertvalue %any undef, ptr %taddr16, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr17, align 8
  %80 = insertvalue %any undef, ptr %taddr17, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %79, ptr %varargslots18, align 16
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots18, i64 16
  store %any %81, ptr %ptradd19, align 16
  %82 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp20" = insertvalue %"any[]" %82, i64 2, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 60, ptr @.file.109, i64 10, ptr @.func.58, i64 4, i32 109, ptr byval(%"any[]") align 8 %indirectarg21) #5, !dbg !1610
  unreachable, !dbg !1610

panic25:                                          ; preds = %checkok22
  store i64 %34, ptr %taddr26, align 8
  %83 = insertvalue %any undef, ptr %taddr26, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr27, align 8
  %85 = insertvalue %any undef, ptr %taddr27, 0
  %86 = insertvalue %any %85, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %84, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %86, ptr %ptradd29, align 16
  %87 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %87, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.109, i64 10, ptr @.func.58, i64 4, i32 109, ptr byval(%"any[]") align 8 %indirectarg31) #5, !dbg !1613
  unreachable, !dbg !1613

panic36:                                          ; preds = %checkok32
  store i64 %sub35, ptr %taddr37, align 8
  %88 = insertvalue %any undef, ptr %taddr37, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %34, ptr %taddr38, align 8
  %90 = insertvalue %any undef, ptr %taddr38, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %89, ptr %varargslots39, align 16
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %91, ptr %ptradd40, align 16
  %92 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %92, i64 2, 1
  store %"any[]" %"$$temp41", ptr %indirectarg42, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 60, ptr @.file.109, i64 10, ptr @.func.58, i64 4, i32 109, ptr byval(%"any[]") align 8 %indirectarg42) #5, !dbg !1613
  unreachable, !dbg !1613

panic45:                                          ; preds = %checkok43
  store i64 %43, ptr %taddr46, align 8
  %93 = insertvalue %any undef, ptr %taddr46, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr47, align 8
  %95 = insertvalue %any undef, ptr %taddr47, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %94, ptr %varargslots48, align 16
  %ptradd49 = getelementptr inbounds i8, ptr %varargslots48, i64 16
  store %any %96, ptr %ptradd49, align 16
  %97 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp50" = insertvalue %"any[]" %97, i64 2, 1
  store %"any[]" %"$$temp50", ptr %indirectarg51, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.76, i64 38, ptr @.file.109, i64 10, ptr @.func.58, i64 4, i32 109, ptr byval(%"any[]") align 8 %indirectarg51) #5, !dbg !1613
  unreachable, !dbg !1613

panic56:                                          ; preds = %checkok52
  store i64 %52, ptr %taddr57, align 8
  %98 = insertvalue %any undef, ptr %taddr57, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %51, ptr %taddr58, align 8
  %100 = insertvalue %any undef, ptr %taddr58, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %99, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %101, ptr %ptradd60, align 16
  %102 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %102, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.109, i64 10, ptr @.func.58, i64 4, i32 111, ptr byval(%"any[]") align 8 %indirectarg62) #5, !dbg !1618
  unreachable, !dbg !1618
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Scanner.read_byte(ptr %0, ptr %1) #0 comdat !dbg !1624 {
entry:
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %reterr10 = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i8, align 1
  store ptr null, ptr %.cachedtype, align 8, !dbg !1627
  %2 = icmp eq ptr %1, null, !dbg !1627
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1627
  br i1 %3, label %panic, label %checkok, !dbg !1627

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1628, !DIExpression(), !1629)
  %4 = load ptr, ptr %self, align 8, !dbg !1630
  %ptradd = getelementptr inbounds i8, ptr %4, i64 32, !dbg !1630
  %5 = load i64, ptr %ptradd, align 8, !dbg !1630
  %6 = load ptr, ptr %self, align 8, !dbg !1631
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 40, !dbg !1631
  %7 = load i64, ptr %ptradd1, align 8, !dbg !1631
  %lt = icmp ult i64 %5, %7, !dbg !1630
  br i1 %lt, label %if.then, label %if.exit, !dbg !1630

if.then:                                          ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !1632
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !1632
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd2, i64 8, !dbg !1632
  %9 = load i64, ptr %ptradd3, align 8, !dbg !1632
  %10 = load ptr, ptr %ptradd2, align 8, !dbg !1632
  %11 = load ptr, ptr %self, align 8, !dbg !1634
  %ptradd4 = getelementptr inbounds i8, ptr %11, i64 32, !dbg !1634
  %12 = load i64, ptr %ptradd4, align 8, !dbg !1634
  %add = add i64 %12, 1, !dbg !1634
  store i64 %add, ptr %ptradd4, align 8, !dbg !1634
  %ge = icmp uge i64 %12, %9, !dbg !1634
  %13 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1634
  br i1 %13, label %panic5, label %checkok8, !dbg !1634

checkok8:                                         ; preds = %if.then
  %ptradd9 = getelementptr inbounds i8, ptr %10, i64 %12, !dbg !1634
  %14 = load i8, ptr %ptradd9, align 1, !dbg !1634
  store i8 %14, ptr %0, align 1, !dbg !1634
  ret i64 0, !dbg !1634

if.exit:                                          ; preds = %checkok
  %15 = load ptr, ptr %self, align 8, !dbg !1635
  %ptradd11 = getelementptr inbounds i8, ptr %15, i64 8, !dbg !1635
  %16 = load i64, ptr %ptradd11, align 8, !dbg !1635
  %17 = inttoptr i64 %16 to ptr, !dbg !1635
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1627
  %18 = icmp eq ptr %17, %type, !dbg !1627
  br i1 %18, label %cache_hit, label %cache_miss, !dbg !1627

cache_miss:                                       ; preds = %if.exit
  %ptradd12 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !1627
  %19 = load ptr, ptr %ptradd12, align 8, !dbg !1627
  %20 = call ptr @.dyn_search(ptr %19, ptr @"$sel.read_byte"), !dbg !1627
  store ptr %20, ptr %.inlinecache, align 8, !dbg !1627
  store ptr %17, ptr %.cachedtype, align 8, !dbg !1627
  br label %21, !dbg !1627

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1627
  br label %21, !dbg !1627

21:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %20, %cache_miss ], !dbg !1627
  %22 = icmp eq ptr %fn_phi, null, !dbg !1627
  br i1 %22, label %missing_function, label %match, !dbg !1627

missing_function:                                 ; preds = %21
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1635
  call void %23(ptr @.panic_msg.42, i64 46, ptr @.file.109, i64 10, ptr @.func.62, i64 9, i32 123) #5, !dbg !1635
  unreachable, !dbg !1635

match:                                            ; preds = %21
  %24 = load ptr, ptr %15, align 8
  %25 = call i64 %fn_phi(ptr %retparam, ptr %24), !dbg !1635
  %not_err = icmp eq i64 %25, 0, !dbg !1635
  %26 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1635
  br i1 %26, label %after_check, label %assign_optional, !dbg !1635

assign_optional:                                  ; preds = %match
  store i64 %25, ptr %reterr10, align 8, !dbg !1635
  br label %err_retblock, !dbg !1635

after_check:                                      ; preds = %match
  %27 = load i8, ptr %retparam, align 1, !dbg !1635
  store i8 %27, ptr %0, align 1, !dbg !1635
  ret i64 0, !dbg !1635

err_retblock:                                     ; preds = %assign_optional
  %28 = load i64, ptr %reterr10, align 8, !dbg !1635
  ret i64 %28, !dbg !1635

panic:                                            ; preds = %entry
  %29 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1629
  call void %29(ptr @.panic_msg, i64 62, ptr @.file.109, i64 10, ptr @.func.62, i64 9, i32 117) #5, !dbg !1629
  unreachable, !dbg !1629

panic5:                                           ; preds = %if.then
  store i64 %9, ptr %taddr, align 8
  %30 = insertvalue %any undef, ptr %taddr, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr6, align 8
  %32 = insertvalue %any undef, ptr %taddr6, 0
  %33 = insertvalue %any %32, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %31, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %33, ptr %ptradd7, align 16
  %34 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %34, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.109, i64 10, ptr @.func.62, i64 9, i32 121, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1634
  unreachable, !dbg !1634
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.MultiReader.new_init(ptr %0, ptr %1, i64 %2, i64 %3, ptr %4) #0 comdat !dbg !1636 {
entry:
  %self = alloca ptr, align 8
  %readers = alloca %"any[]", align 8
  %allocator = alloca %any, align 8
  %copy = alloca %"any[]", align 8
  %allocator3 = alloca %any, align 8
  %elements = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator5 = alloca %any, align 8
  %elements6 = alloca i64, align 8
  %allocator7 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %varargslots33 = alloca [2 x %any], align 16
  %indirectarg36 = alloca %"any[]", align 8
  %taddr41 = alloca i64, align 8
  %taddr42 = alloca i64, align 8
  %varargslots43 = alloca [2 x %any], align 16
  %indirectarg46 = alloca %"any[]", align 8
  %.assign_list = alloca %MultiReader, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1651
  %5 = icmp eq ptr %0, null, !dbg !1651
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1651
  br i1 %6, label %panic, label %checkok, !dbg !1651

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1652, !DIExpression(), !1653)
  store ptr %1, ptr %readers, align 8
  %ptradd = getelementptr inbounds i8, ptr %readers, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %readers, !1654, !DIExpression(), !1655)
  store i64 %3, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %allocator, !1656, !DIExpression(), !1657)
  %7 = load ptr, ptr %self, align 8, !dbg !1658
  %ptradd2 = getelementptr inbounds i8, ptr %7, i64 8, !dbg !1658
  %8 = load i64, ptr %ptradd2, align 8, !dbg !1658
  %eq = icmp eq i64 0, %8, !dbg !1658
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !1658

assert_fail:                                      ; preds = %checkok
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1658
  call void %9(ptr @.panic_msg.116, i64 90, ptr @.file.115, i64 14, ptr @.func.84, i64 8, i32 18) #5, !dbg !1658
  unreachable, !dbg !1658

assert_ok:                                        ; preds = %checkok
    #dbg_declare(ptr %copy, !1660, !DIExpression(), !1661)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %ptradd4 = getelementptr inbounds i8, ptr %readers, i64 8, !dbg !1662
  %10 = load i64, ptr %ptradd4, align 8
  store i64 %10, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator5, ptr align 8 %allocator3, i32 16, i1 false)
  %11 = load i64, ptr %elements, align 8
  store i64 %11, ptr %elements6, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator7, ptr align 8 %allocator5, i32 16, i1 false)
  %12 = load i64, ptr %elements6, align 8, !dbg !1663
  %mul = mul i64 16, %12, !dbg !1668
  store i64 %mul, ptr %size, align 8
  %13 = load i64, ptr %size, align 8, !dbg !1669
  %i2nb = icmp eq i64 %13, 0, !dbg !1669
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1669

if.then:                                          ; preds = %assert_ok
  store ptr null, ptr %blockret, align 8, !dbg !1672
  br label %expr_block.exit, !dbg !1672

if.exit:                                          ; preds = %assert_ok
  %ptradd8 = getelementptr inbounds i8, ptr %allocator7, i64 8, !dbg !1673
  %14 = load i64, ptr %ptradd8, align 8, !dbg !1673
  %15 = inttoptr i64 %14 to ptr, !dbg !1673
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1651
  %16 = icmp eq ptr %15, %type, !dbg !1651
  br i1 %16, label %cache_hit, label %cache_miss, !dbg !1651

cache_miss:                                       ; preds = %if.exit
  %ptradd9 = getelementptr inbounds i8, ptr %15, i64 16, !dbg !1651
  %17 = load ptr, ptr %ptradd9, align 8, !dbg !1651
  %18 = call ptr @.dyn_search(ptr %17, ptr @"$sel.acquire"), !dbg !1651
  store ptr %18, ptr %.inlinecache, align 8, !dbg !1651
  store ptr %15, ptr %.cachedtype, align 8, !dbg !1651
  br label %19, !dbg !1651

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1651
  br label %19, !dbg !1651

19:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %18, %cache_miss ], !dbg !1651
  %20 = icmp eq ptr %fn_phi, null, !dbg !1651
  br i1 %20, label %missing_function, label %match, !dbg !1651

missing_function:                                 ; preds = %19
  %21 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1675
  call void %21(ptr @.panic_msg.93, i64 44, ptr @.file.91, i64 16, ptr @.func.84, i64 8, i32 80) #5, !dbg !1675
  unreachable, !dbg !1675

match:                                            ; preds = %19
  %22 = load ptr, ptr %allocator7, align 8
  %23 = load i64, ptr %size, align 8
  %24 = call i64 %fn_phi(ptr %retparam, ptr %22, i64 %23, i32 1, i64 0), !dbg !1675
  %not_err = icmp eq i64 %24, 0, !dbg !1675
  %25 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1675
  br i1 %25, label %after_check, label %assign_optional, !dbg !1675

assign_optional:                                  ; preds = %match
  store i64 %24, ptr %error_var, align 8, !dbg !1675
  br label %panic_block, !dbg !1675

after_check:                                      ; preds = %match
  %26 = load ptr, ptr %retparam, align 8, !dbg !1675
  store ptr %26, ptr %blockret, align 8, !dbg !1675
  br label %expr_block.exit, !dbg !1675

expr_block.exit:                                  ; preds = %after_check, %if.then
  %27 = load ptr, ptr %blockret, align 8, !dbg !1675
  store ptr %27, ptr %taddr, align 8
  %28 = load ptr, ptr %taddr, align 8
  %29 = load i64, ptr %elements6, align 8, !dbg !1676
  %add = add i64 0, %29, !dbg !1676
  %size10 = sub i64 %add, 0, !dbg !1676
  %30 = insertvalue %"any[]" undef, ptr %28, 0, !dbg !1676
  %31 = insertvalue %"any[]" %30, i64 %size10, 1, !dbg !1676
  br label %noerr_block, !dbg !1676

panic_block:                                      ; preds = %assign_optional
  %32 = insertvalue %any undef, ptr %error_var, 0, !dbg !1676
  %33 = insertvalue %any %32, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !1676
  store %any %33, ptr %varargslots, align 16
  %34 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %34, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.103, i64 36, ptr @.file.91, i64 16, ptr @.func.84, i64 8, i32 244, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1665
  unreachable, !dbg !1665

noerr_block:                                      ; preds = %expr_block.exit
  store %"any[]" %31, ptr %copy, align 8, !dbg !1665
  %35 = load %"any[]", ptr %readers, align 8, !dbg !1677
  %36 = extractvalue %"any[]" %35, 0, !dbg !1677
  %37 = extractvalue %"any[]" %35, 1, !dbg !1678
  %gt = icmp ugt i64 0, %37, !dbg !1678
  %38 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1678
  br i1 %38, label %panic11, label %checkok18, !dbg !1678

checkok18:                                        ; preds = %noerr_block
  %size19 = sub i64 %37, 0, !dbg !1677
  %39 = insertvalue %"any[]" undef, ptr %36, 0, !dbg !1677
  %40 = insertvalue %"any[]" %39, i64 %size19, 1, !dbg !1677
  %41 = load %"any[]", ptr %copy, align 8, !dbg !1679
  %42 = extractvalue %"any[]" %41, 0, !dbg !1679
  %43 = extractvalue %"any[]" %41, 1, !dbg !1680
  %gt20 = icmp ugt i64 0, %43, !dbg !1680
  %44 = call i1 @llvm.expect.i1(i1 %gt20, i1 false), !dbg !1680
  br i1 %44, label %panic21, label %checkok28, !dbg !1680

checkok28:                                        ; preds = %checkok18
  %size29 = sub i64 %43, 0, !dbg !1679
  %45 = insertvalue %"any[]" undef, ptr %42, 0, !dbg !1679
  %46 = insertvalue %"any[]" %45, i64 %size29, 1, !dbg !1679
  %47 = extractvalue %"any[]" %46, 0, !dbg !1679
  %48 = extractvalue %"any[]" %40, 0, !dbg !1679
  %49 = extractvalue %"any[]" %40, 1, !dbg !1679
  %50 = extractvalue %"any[]" %46, 1, !dbg !1679
  %neq = icmp ne i64 %50, %49, !dbg !1679
  %51 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1679
  br i1 %51, label %panic30, label %checkok37, !dbg !1679

checkok37:                                        ; preds = %checkok28
  %52 = mul i64 %49, 16, !dbg !1679
  call void @llvm.memmove.p0.p0.i64(ptr align 8 %47, ptr align 8 %48, i64 %52, i1 false), !dbg !1679
  %53 = load ptr, ptr %self, align 8, !dbg !1681
  %checknull = icmp eq ptr %53, null, !dbg !1681
  %54 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1681
  br i1 %54, label %panic38, label %checkok39, !dbg !1681

checkok39:                                        ; preds = %checkok37
  %55 = ptrtoint ptr %53 to i64, !dbg !1681
  %56 = urem i64 %55, 8, !dbg !1681
  %57 = icmp ne i64 %56, 0, !dbg !1681
  %58 = call i1 @llvm.expect.i1(i1 %57, i1 false), !dbg !1681
  br i1 %58, label %panic40, label %checkok47, !dbg !1681

checkok47:                                        ; preds = %checkok39
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 40, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %copy, i32 16, i1 false), !dbg !1682
  %ptradd48 = getelementptr inbounds i8, ptr %.assign_list, i64 24, !dbg !1682
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd48, ptr align 8 %allocator, i32 16, i1 false), !dbg !1683
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %53, ptr align 8 %.assign_list, i32 40, i1 false), !dbg !1683
  %59 = load ptr, ptr %self, align 8, !dbg !1684
  %60 = load ptr, ptr %self, align 8, !dbg !1685
  %ptradd49 = getelementptr inbounds i8, ptr %60, i64 16, !dbg !1685
  %61 = load i64, ptr %ptradd49, align 8, !dbg !1685
  %eq50 = icmp eq i64 0, %61, !dbg !1685
  br i1 %eq50, label %assert_ok52, label %assert_fail51, !dbg !1685

assert_fail51:                                    ; preds = %checkok47
  %62 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1685
  call void %62(ptr @.panic_msg.87, i64 35, ptr @.file.115, i64 14, ptr @.func.84, i64 8, i32 19) #5, !dbg !1685
  unreachable, !dbg !1685

assert_ok52:                                      ; preds = %checkok47
  ret ptr %59, !dbg !1685

panic:                                            ; preds = %entry
  %63 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1653
  call void %63(ptr @.panic_msg, i64 62, ptr @.file.115, i64 14, ptr @.func.84, i64 8, i32 21) #5, !dbg !1653
  unreachable, !dbg !1653

panic11:                                          ; preds = %noerr_block
  store i64 %37, ptr %taddr12, align 8
  %64 = insertvalue %any undef, ptr %taddr12, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr13, align 8
  %66 = insertvalue %any undef, ptr %taddr13, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %65, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %67, ptr %ptradd15, align 16
  %68 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.115, i64 14, ptr @.func.84, i64 8, i32 24, ptr byval(%"any[]") align 8 %indirectarg17) #5, !dbg !1677
  unreachable, !dbg !1677

panic21:                                          ; preds = %checkok18
  store i64 %43, ptr %taddr22, align 8
  %69 = insertvalue %any undef, ptr %taddr22, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr23, align 8
  %71 = insertvalue %any undef, ptr %taddr23, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %70, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %72, ptr %ptradd25, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %73, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.115, i64 14, ptr @.func.84, i64 8, i32 24, ptr byval(%"any[]") align 8 %indirectarg27) #5, !dbg !1679
  unreachable, !dbg !1679

panic30:                                          ; preds = %checkok28
  store i64 %50, ptr %taddr31, align 8
  %74 = insertvalue %any undef, ptr %taddr31, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %49, ptr %taddr32, align 8
  %76 = insertvalue %any undef, ptr %taddr32, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %75, ptr %varargslots33, align 16
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots33, i64 16
  store %any %77, ptr %ptradd34, align 16
  %78 = insertvalue %"any[]" undef, ptr %varargslots33, 0
  %"$$temp35" = insertvalue %"any[]" %78, i64 2, 1
  store %"any[]" %"$$temp35", ptr %indirectarg36, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.76, i64 38, ptr @.file.115, i64 14, ptr @.func.84, i64 8, i32 24, ptr byval(%"any[]") align 8 %indirectarg36) #5, !dbg !1679
  unreachable, !dbg !1679

panic38:                                          ; preds = %checkok37
  %79 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1681
  call void %79(ptr @.panic_msg.36, i64 45, ptr @.file.115, i64 14, ptr @.func.84, i64 8, i32 25) #5, !dbg !1681
  unreachable, !dbg !1681

panic40:                                          ; preds = %checkok39
  store i64 8, ptr %taddr41, align 8
  %80 = insertvalue %any undef, ptr %taddr41, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %56, ptr %taddr42, align 8
  %82 = insertvalue %any undef, ptr %taddr42, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %81, ptr %varargslots43, align 16
  %ptradd44 = getelementptr inbounds i8, ptr %varargslots43, i64 16
  store %any %83, ptr %ptradd44, align 16
  %84 = insertvalue %"any[]" undef, ptr %varargslots43, 0
  %"$$temp45" = insertvalue %"any[]" %84, i64 2, 1
  store %"any[]" %"$$temp45", ptr %indirectarg46, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.115, i64 14, ptr @.func.84, i64 8, i32 25, ptr byval(%"any[]") align 8 %indirectarg46) #5, !dbg !1681
  unreachable, !dbg !1681
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.MultiReader.temp_init(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1686 {
entry:
  %self = alloca ptr, align 8
  %readers = alloca %"any[]", align 8
  %taddr = alloca %any, align 8
  %3 = icmp eq ptr %0, null, !dbg !1689
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1689
  br i1 %4, label %panic, label %checkok, !dbg !1689

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1690, !DIExpression(), !1691)
  store ptr %1, ptr %readers, align 8
  %ptradd = getelementptr inbounds i8, ptr %readers, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %readers, !1692, !DIExpression(), !1693)
  %5 = load ptr, ptr %self, align 8, !dbg !1694
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !1694
  %6 = load i64, ptr %ptradd1, align 8, !dbg !1694
  %eq = icmp eq i64 0, %6, !dbg !1694
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !1694

assert_fail:                                      ; preds = %checkok
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1694
  call void %7(ptr @.panic_msg.116, i64 90, ptr @.file.115, i64 14, ptr @.func.86, i64 9, i32 31) #5, !dbg !1694
  unreachable, !dbg !1694

assert_ok:                                        ; preds = %checkok
  %8 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !1696
  %i2nb = icmp eq ptr %8, null, !dbg !1696
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1696

if.then:                                          ; preds = %assert_ok
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !1699
  br label %if.exit, !dbg !1699

if.exit:                                          ; preds = %if.then, %assert_ok
  %9 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !1701
  %10 = insertvalue %any undef, ptr %9, 0, !dbg !1698
  %11 = insertvalue %any %10, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !1698
  %12 = load ptr, ptr %self, align 8, !dbg !1698
  %lo = load ptr, ptr %readers, align 8, !dbg !1698
  %ptradd2 = getelementptr inbounds i8, ptr %readers, i64 8, !dbg !1698
  %hi = load i64, ptr %ptradd2, align 8, !dbg !1698
  store %any %11, ptr %taddr, align 8
  %lo3 = load i64, ptr %taddr, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi5 = load ptr, ptr %ptradd4, align 8
  %13 = call ptr @std.io.MultiReader.new_init(ptr %12, ptr %lo, i64 %hi, i64 %lo3, ptr %hi5), !dbg !1702
  %14 = load ptr, ptr %self, align 8, !dbg !1703
  %ptradd6 = getelementptr inbounds i8, ptr %14, i64 16, !dbg !1703
  %15 = load i64, ptr %ptradd6, align 8, !dbg !1703
  %eq7 = icmp eq i64 0, %15, !dbg !1703
  br i1 %eq7, label %assert_ok9, label %assert_fail8, !dbg !1703

assert_fail8:                                     ; preds = %if.exit
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1703
  call void %16(ptr @.panic_msg.87, i64 35, ptr @.file.115, i64 14, ptr @.func.86, i64 9, i32 32) #5, !dbg !1703
  unreachable, !dbg !1703

assert_ok9:                                       ; preds = %if.exit
  ret ptr %13, !dbg !1703

panic:                                            ; preds = %entry
  %17 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1691
  call void %17(ptr @.panic_msg, i64 62, ptr @.file.115, i64 14, ptr @.func.86, i64 9, i32 34) #5, !dbg !1691
  unreachable, !dbg !1691
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.io.MultiReader.free(ptr %0) #0 comdat !dbg !1704 {
entry:
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1707
  %1 = icmp eq ptr %0, null, !dbg !1707
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1707
  br i1 %2, label %panic, label %checkok, !dbg !1707

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1708, !DIExpression(), !1709)
  %3 = load ptr, ptr %self, align 8, !dbg !1710
  %ptradd = getelementptr inbounds i8, ptr %3, i64 24, !dbg !1710
  %4 = load ptr, ptr %ptradd, align 8, !dbg !1710
  %i2nb = icmp eq ptr %4, null, !dbg !1710
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1710

if.then:                                          ; preds = %checkok
  ret void, !dbg !1711

if.exit:                                          ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !1712
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 24, !dbg !1712
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %ptradd1, i32 16, i1 false)
  %6 = load ptr, ptr %self, align 8, !dbg !1713
  %7 = load ptr, ptr %6, align 8
  store ptr %7, ptr %ptr, align 8
  %8 = load ptr, ptr %ptr, align 8, !dbg !1714
  %i2nb2 = icmp eq ptr %8, null, !dbg !1714
  br i1 %i2nb2, label %if.then3, label %if.exit4, !dbg !1714

if.then3:                                         ; preds = %if.exit
  br label %expr_block.exit, !dbg !1717

if.exit4:                                         ; preds = %if.exit
  %ptradd5 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !1718
  %9 = load i64, ptr %ptradd5, align 8, !dbg !1718
  %10 = inttoptr i64 %9 to ptr, !dbg !1718
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1707
  %11 = icmp eq ptr %10, %type, !dbg !1707
  br i1 %11, label %cache_hit, label %cache_miss, !dbg !1707

cache_miss:                                       ; preds = %if.exit4
  %ptradd6 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !1707
  %12 = load ptr, ptr %ptradd6, align 8, !dbg !1707
  %13 = call ptr @.dyn_search(ptr %12, ptr @"$sel.release"), !dbg !1707
  store ptr %13, ptr %.inlinecache, align 8, !dbg !1707
  store ptr %10, ptr %.cachedtype, align 8, !dbg !1707
  br label %14, !dbg !1707

cache_hit:                                        ; preds = %if.exit4
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1707
  br label %14, !dbg !1707

14:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %13, %cache_miss ], !dbg !1707
  %15 = icmp eq ptr %fn_phi, null, !dbg !1707
  br i1 %15, label %missing_function, label %match, !dbg !1707

missing_function:                                 ; preds = %14
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1719
  call void %16(ptr @.panic_msg.90, i64 44, ptr @.file.91, i64 16, ptr @.func.100, i64 4, i32 105) #5, !dbg !1719
  unreachable, !dbg !1719

match:                                            ; preds = %14
  %17 = load ptr, ptr %allocator, align 8, !dbg !1719
  %18 = load ptr, ptr %ptr, align 8, !dbg !1719
  call void %fn_phi(ptr %17, ptr %18, i8 zeroext 0), !dbg !1719
  br label %expr_block.exit, !dbg !1719

expr_block.exit:                                  ; preds = %match, %if.then3
  %19 = load ptr, ptr %self, align 8, !dbg !1720
  %checknull = icmp eq ptr %19, null, !dbg !1720
  %20 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1720
  br i1 %20, label %panic7, label %checkok8, !dbg !1720

checkok8:                                         ; preds = %expr_block.exit
  %21 = ptrtoint ptr %19 to i64, !dbg !1720
  %22 = urem i64 %21, 8, !dbg !1720
  %23 = icmp ne i64 %22, 0, !dbg !1720
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false), !dbg !1720
  br i1 %24, label %panic9, label %checkok12, !dbg !1720

checkok12:                                        ; preds = %checkok8
  call void @llvm.memset.p0.i64(ptr align 8 %19, i8 0, i64 40, i1 false), !dbg !1720
  ret void, !dbg !1720

panic:                                            ; preds = %entry
  %25 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1709
  call void %25(ptr @.panic_msg, i64 62, ptr @.file.115, i64 14, ptr @.func.100, i64 4, i32 39) #5, !dbg !1709
  unreachable, !dbg !1709

panic7:                                           ; preds = %expr_block.exit
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1720
  call void %26(ptr @.panic_msg.36, i64 45, ptr @.file.115, i64 14, ptr @.func.100, i64 4, i32 43) #5, !dbg !1720
  unreachable, !dbg !1720

panic9:                                           ; preds = %checkok8
  store i64 8, ptr %taddr, align 8
  %27 = insertvalue %any undef, ptr %taddr, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr10, align 8
  %29 = insertvalue %any undef, ptr %taddr10, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %28, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %30, ptr %ptradd11, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.115, i64 14, ptr @.func.100, i64 4, i32 43, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1720
  unreachable, !dbg !1720
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.MultiReader.read(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !1721 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %r = alloca %any, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %n = alloca i64, align 8
  %n.f = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %err = alloca i64, align 8
  %switch = alloca i64, align 8
  %reterr = alloca i64, align 8
  %retparam18 = alloca i64, align 8
  %reterr26 = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1724
  %4 = icmp eq ptr %1, null, !dbg !1724
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !1724
  br i1 %5, label %panic, label %checkok, !dbg !1724

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1725, !DIExpression(), !1726)
  store ptr %2, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !1727, !DIExpression(), !1728)
    #dbg_declare(ptr %r, !1729, !DIExpression(), !1730)
  %6 = load ptr, ptr %self, align 8, !dbg !1731
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !1731
  %7 = load i64, ptr %ptradd1, align 8, !dbg !1731
  %8 = load ptr, ptr %6, align 8, !dbg !1731
  %9 = load ptr, ptr %self, align 8, !dbg !1732
  %ptradd2 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !1732
  %10 = load i64, ptr %ptradd2, align 8, !dbg !1732
  %ge = icmp uge i64 %10, %7, !dbg !1732
  %11 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1732
  br i1 %11, label %panic3, label %checkok6, !dbg !1732

checkok6:                                         ; preds = %checkok
  %ptroffset = getelementptr inbounds [16 x i8], ptr %8, i64 %10, !dbg !1732
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %r, ptr align 8 %ptroffset, i32 16, i1 false), !dbg !1732
    #dbg_declare(ptr %n, !1733, !DIExpression(), !1734)
  %ptradd7 = getelementptr inbounds i8, ptr %r, i64 8, !dbg !1735
  %12 = load i64, ptr %ptradd7, align 8, !dbg !1735
  %13 = inttoptr i64 %12 to ptr, !dbg !1735
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1724
  %14 = icmp eq ptr %13, %type, !dbg !1724
  br i1 %14, label %cache_hit, label %cache_miss, !dbg !1724

cache_miss:                                       ; preds = %checkok6
  %ptradd8 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !1724
  %15 = load ptr, ptr %ptradd8, align 8, !dbg !1724
  %16 = call ptr @.dyn_search(ptr %15, ptr @"$sel.read"), !dbg !1724
  store ptr %16, ptr %.inlinecache, align 8, !dbg !1724
  store ptr %13, ptr %.cachedtype, align 8, !dbg !1724
  br label %17, !dbg !1724

cache_hit:                                        ; preds = %checkok6
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1724
  br label %17, !dbg !1724

17:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %16, %cache_miss ], !dbg !1724
  %18 = icmp eq ptr %fn_phi, null, !dbg !1724
  br i1 %18, label %missing_function, label %match, !dbg !1724

missing_function:                                 ; preds = %17
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1736
  call void %19(ptr @.panic_msg.75, i64 41, ptr @.file.115, i64 14, ptr @.func.58, i64 4, i32 49) #5, !dbg !1736
  unreachable, !dbg !1736

match:                                            ; preds = %17
  %20 = load ptr, ptr %r, align 8
  %lo = load ptr, ptr %bytes, align 8
  %ptradd9 = getelementptr inbounds i8, ptr %bytes, i64 8
  %hi = load i64, ptr %ptradd9, align 8
  %21 = call i64 %fn_phi(ptr %retparam, ptr %20, ptr %lo, i64 %hi), !dbg !1736
  %not_err = icmp eq i64 %21, 0, !dbg !1736
  %22 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1736
  br i1 %22, label %after_check, label %assign_optional, !dbg !1736

assign_optional:                                  ; preds = %match
  store i64 %21, ptr %n.f, align 8, !dbg !1736
  br label %after_assign, !dbg !1736

after_check:                                      ; preds = %match
  %23 = load i64, ptr %retparam, align 8, !dbg !1736
  store i64 %23, ptr %n, align 8, !dbg !1736
  store i64 0, ptr %n.f, align 8, !dbg !1736
  br label %after_assign, !dbg !1736

after_assign:                                     ; preds = %after_check, %assign_optional
    #dbg_declare(ptr %err, !1737, !DIExpression(), !1738)
  br label %testblock, !dbg !1738

testblock:                                        ; preds = %after_assign
  %optval = load i64, ptr %n.f, align 8, !dbg !1739
  %not_err10 = icmp eq i64 %optval, 0, !dbg !1739
  %24 = call i1 @llvm.expect.i1(i1 %not_err10, i1 true), !dbg !1739
  br i1 %24, label %after_check12, label %assign_optional11, !dbg !1739

assign_optional11:                                ; preds = %testblock
  store i64 %optval, ptr %err, align 8, !dbg !1739
  br label %end_block, !dbg !1739

after_check12:                                    ; preds = %testblock
  store i64 0, ptr %err, align 8, !dbg !1739
  br label %end_block, !dbg !1739

end_block:                                        ; preds = %after_check12, %assign_optional11
  %25 = load i64, ptr %err, align 8, !dbg !1739
  %neq = icmp ne i64 %25, 0, !dbg !1739
  br i1 %neq, label %if.then, label %if.exit25, !dbg !1739

if.then:                                          ; preds = %end_block
  store i64 %25, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %if.then
  %26 = load i64, ptr %switch, align 8
  %eq = icmp eq i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), %26, !dbg !1740
  br i1 %eq, label %switch.case, label %next_if, !dbg !1740

switch.case:                                      ; preds = %switch.entry
  %27 = load ptr, ptr %self, align 8, !dbg !1741
  %ptradd13 = getelementptr inbounds i8, ptr %27, i64 16, !dbg !1741
  %28 = load i64, ptr %ptradd13, align 8, !dbg !1741
  %add = add i64 %28, 1, !dbg !1741
  store i64 %add, ptr %ptradd13, align 8, !dbg !1741
  %29 = load ptr, ptr %self, align 8, !dbg !1743
  %ptradd14 = getelementptr inbounds i8, ptr %29, i64 16, !dbg !1743
  %30 = load i64, ptr %ptradd14, align 8, !dbg !1743
  %31 = load ptr, ptr %self, align 8, !dbg !1744
  %ptradd15 = getelementptr inbounds i8, ptr %31, i64 8, !dbg !1744
  %32 = load i64, ptr %ptradd15, align 8, !dbg !1744
  %ge16 = icmp uge i64 %30, %32, !dbg !1743
  br i1 %ge16, label %if.then17, label %if.exit, !dbg !1743

if.then17:                                        ; preds = %switch.case
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !1745

if.exit:                                          ; preds = %switch.case
  %33 = load ptr, ptr %self, align 8
  %lo19 = load ptr, ptr %bytes, align 8
  %ptradd20 = getelementptr inbounds i8, ptr %bytes, i64 8
  %hi21 = load i64, ptr %ptradd20, align 8
  %34 = call i64 @std.io.MultiReader.read(ptr %retparam18, ptr %33, ptr %lo19, i64 %hi21), !dbg !1747
  %not_err22 = icmp eq i64 %34, 0, !dbg !1747
  %35 = call i1 @llvm.expect.i1(i1 %not_err22, i1 true), !dbg !1747
  br i1 %35, label %after_check24, label %assign_optional23, !dbg !1747

assign_optional23:                                ; preds = %if.exit
  store i64 %34, ptr %reterr, align 8, !dbg !1747
  br label %err_retblock, !dbg !1747

after_check24:                                    ; preds = %if.exit
  %36 = load i64, ptr %retparam18, align 8, !dbg !1747
  store i64 %36, ptr %0, align 8, !dbg !1747
  ret i64 0, !dbg !1747

err_retblock:                                     ; preds = %assign_optional23
  %37 = load i64, ptr %reterr, align 8, !dbg !1747
  ret i64 %37, !dbg !1747

next_if:                                          ; preds = %switch.entry
  br label %switch.default, !dbg !1747

switch.default:                                   ; preds = %next_if
  %38 = load i64, ptr %err, align 8, !dbg !1748
  ret i64 %38, !dbg !1748

if.exit25:                                        ; preds = %end_block
  %39 = load i64, ptr %n, align 8, !dbg !1750
  store i64 %39, ptr %0, align 8, !dbg !1750
  ret i64 0, !dbg !1750

panic:                                            ; preds = %entry
  %40 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1726
  call void %40(ptr @.panic_msg, i64 62, ptr @.file.115, i64 14, ptr @.func.58, i64 4, i32 46) #5, !dbg !1726
  unreachable, !dbg !1726

panic3:                                           ; preds = %checkok
  store i64 %7, ptr %taddr, align 8
  %41 = insertvalue %any undef, ptr %taddr, 0
  %42 = insertvalue %any %41, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr4, align 8
  %43 = insertvalue %any undef, ptr %taddr4, 0
  %44 = insertvalue %any %43, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %42, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %44, ptr %ptradd5, align 16
  %45 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %45, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.115, i64 14, ptr @.func.58, i64 4, i32 48, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1732
  unreachable, !dbg !1732
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.MultiReader.read_byte(ptr %0, ptr %1) #0 comdat !dbg !1751 {
entry:
  %self = alloca ptr, align 8
  %data = alloca [1 x i8], align 1
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !1754
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1754
  br i1 %3, label %panic, label %checkok, !dbg !1754

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1755, !DIExpression(), !1756)
    #dbg_declare(ptr %data, !1757, !DIExpression(), !1758)
  store i8 0, ptr %data, align 1, !dbg !1758
  %4 = insertvalue %"char[]" undef, ptr %data, 0, !dbg !1759
  %5 = insertvalue %"char[]" %4, i64 1, 1, !dbg !1759
  %6 = load ptr, ptr %self, align 8
  %7 = call i64 @std.io.MultiReader.read(ptr %retparam, ptr %6, ptr %data, i64 1), !dbg !1760
  %not_err = icmp eq i64 %7, 0, !dbg !1760
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1760
  br i1 %8, label %after_check, label %assign_optional, !dbg !1760

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %error_var, align 8, !dbg !1760
  br label %guard_block, !dbg !1760

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !1760

guard_block:                                      ; preds = %assign_optional
  %9 = load i64, ptr %error_var, align 8, !dbg !1760
  ret i64 %9, !dbg !1760

noerr_block:                                      ; preds = %after_check
  %10 = load i8, ptr %data, align 1, !dbg !1761
  store i8 %10, ptr %0, align 1, !dbg !1761
  ret i64 0, !dbg !1761

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1756
  call void %11(ptr @.panic_msg, i64 62, ptr @.file.115, i64 14, ptr @.func.62, i64 9, i32 65) #5, !dbg !1756
  unreachable, !dbg !1756
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.LimitReader.init(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !1762 {
entry:
  %self = alloca ptr, align 8
  %wrapped_stream = alloca %any, align 8
  %limit = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.assign_list = alloca %LimitReader, align 8
  %4 = icmp eq ptr %0, null, !dbg !1771
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !1771
  br i1 %5, label %panic, label %checkok, !dbg !1771

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1772, !DIExpression(), !1773)
  store i64 %1, ptr %wrapped_stream, align 8
  %ptradd = getelementptr inbounds i8, ptr %wrapped_stream, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %wrapped_stream, !1774, !DIExpression(), !1775)
  store i64 %3, ptr %limit, align 8
    #dbg_declare(ptr %limit, !1776, !DIExpression(), !1777)
  %6 = load ptr, ptr %self, align 8, !dbg !1778
  %checknull = icmp eq ptr %6, null, !dbg !1778
  %7 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1778
  br i1 %7, label %panic1, label %checkok2, !dbg !1778

checkok2:                                         ; preds = %checkok
  %8 = ptrtoint ptr %6 to i64, !dbg !1778
  %9 = urem i64 %8, 8, !dbg !1778
  %10 = icmp ne i64 %9, 0, !dbg !1778
  %11 = call i1 @llvm.expect.i1(i1 %10, i1 false), !dbg !1778
  br i1 %11, label %panic3, label %checkok6, !dbg !1778

checkok6:                                         ; preds = %checkok2
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 24, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %wrapped_stream, i32 16, i1 false), !dbg !1779
  %ptradd7 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !1779
  %12 = load i64, ptr %limit, align 8, !dbg !1780
  store i64 %12, ptr %ptradd7, align 8, !dbg !1780
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %6, ptr align 8 %.assign_list, i32 24, i1 false), !dbg !1780
  %13 = load ptr, ptr %self, align 8, !dbg !1781
  ret ptr %13, !dbg !1781

panic:                                            ; preds = %entry
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1773
  call void %14(ptr @.panic_msg, i64 62, ptr @.file.117, i64 14, ptr @.func, i64 4, i32 13) #5, !dbg !1773
  unreachable, !dbg !1773

panic1:                                           ; preds = %checkok
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1778
  call void %15(ptr @.panic_msg.36, i64 45, ptr @.file.117, i64 14, ptr @.func, i64 4, i32 15) #5, !dbg !1778
  unreachable, !dbg !1778

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %16 = insertvalue %any undef, ptr %taddr, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr4, align 8
  %18 = insertvalue %any undef, ptr %taddr4, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %17, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd5, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.117, i64 14, ptr @.func, i64 4, i32 15, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1778
  unreachable, !dbg !1778
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.LimitReader.close(ptr %0) #0 comdat !dbg !1782 {
entry:
  %self = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache3 = alloca ptr, align 8
  %.cachedtype4 = alloca ptr, align 8
  store ptr null, ptr %.cachedtype4, align 8, !dbg !1785
  store ptr null, ptr %.cachedtype, align 8, !dbg !1785
  %1 = icmp eq ptr %0, null, !dbg !1785
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1785
  br i1 %2, label %panic, label %checkok, !dbg !1785

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1786, !DIExpression(), !1787)
  %3 = load ptr, ptr %self, align 8, !dbg !1788
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !1788
  %4 = load i64, ptr %ptradd, align 8, !dbg !1788
  %5 = inttoptr i64 %4 to ptr, !dbg !1788
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1785
  %6 = icmp eq ptr %5, %type, !dbg !1785
  br i1 %6, label %cache_hit, label %cache_miss, !dbg !1785

cache_miss:                                       ; preds = %checkok
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !1785
  %7 = load ptr, ptr %ptradd1, align 8, !dbg !1785
  %8 = call ptr @.dyn_search(ptr %7, ptr @"$sel.close"), !dbg !1785
  store ptr %8, ptr %.inlinecache, align 8, !dbg !1785
  store ptr %5, ptr %.cachedtype, align 8, !dbg !1785
  br label %9, !dbg !1785

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1785
  br label %9, !dbg !1785

9:                                                ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %8, %cache_miss ], !dbg !1785
  %i2b = icmp ne ptr %fn_phi, null, !dbg !1785
  br i1 %i2b, label %if.then, label %if.exit, !dbg !1785

if.then:                                          ; preds = %9
  %10 = load ptr, ptr %self, align 8, !dbg !1789
  %ptradd2 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !1789
  %11 = load i64, ptr %ptradd2, align 8, !dbg !1789
  %12 = inttoptr i64 %11 to ptr, !dbg !1789
  %type5 = load ptr, ptr %.cachedtype4, align 8, !dbg !1785
  %13 = icmp eq ptr %12, %type5, !dbg !1785
  br i1 %13, label %cache_hit8, label %cache_miss6, !dbg !1785

cache_miss6:                                      ; preds = %if.then
  %ptradd7 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !1785
  %14 = load ptr, ptr %ptradd7, align 8, !dbg !1785
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.close"), !dbg !1785
  store ptr %15, ptr %.inlinecache3, align 8, !dbg !1785
  store ptr %12, ptr %.cachedtype4, align 8, !dbg !1785
  br label %16, !dbg !1785

cache_hit8:                                       ; preds = %if.then
  %cache_hit_fn9 = load ptr, ptr %.inlinecache3, align 8, !dbg !1785
  br label %16, !dbg !1785

16:                                               ; preds = %cache_hit8, %cache_miss6
  %fn_phi10 = phi ptr [ %cache_hit_fn9, %cache_hit8 ], [ %15, %cache_miss6 ], !dbg !1785
  %17 = icmp eq ptr %fn_phi10, null, !dbg !1785
  br i1 %17, label %missing_function, label %match, !dbg !1785

missing_function:                                 ; preds = %16
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1789
  call void %18(ptr @.panic_msg.74, i64 42, ptr @.file.117, i64 14, ptr @.func.73, i64 5, i32 21) #5, !dbg !1789
  unreachable, !dbg !1789

match:                                            ; preds = %16
  %19 = load ptr, ptr %10, align 8, !dbg !1789
  %20 = call i64 %fn_phi10(ptr %19), !dbg !1789
  %not_err = icmp eq i64 %20, 0, !dbg !1789
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1789
  br i1 %21, label %after_check, label %assign_optional, !dbg !1789

assign_optional:                                  ; preds = %match
  store i64 %20, ptr %reterr, align 8, !dbg !1789
  br label %err_retblock, !dbg !1789

after_check:                                      ; preds = %match
  ret i64 0, !dbg !1789

err_retblock:                                     ; preds = %assign_optional
  %22 = load i64, ptr %reterr, align 8, !dbg !1789
  ret i64 %22, !dbg !1789

if.exit:                                          ; preds = %9
  ret i64 0, !dbg !1789

panic:                                            ; preds = %entry
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1787
  call void %23(ptr @.panic_msg, i64 62, ptr @.file.117, i64 14, ptr @.func.73, i64 5, i32 19) #5, !dbg !1787
  unreachable, !dbg !1787
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.LimitReader.read(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !1790 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %m = alloca i64, align 8
  %x = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %n = alloca i64, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1793
  %4 = icmp eq ptr %1, null, !dbg !1793
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !1793
  br i1 %5, label %panic, label %checkok, !dbg !1793

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1794, !DIExpression(), !1795)
  store ptr %2, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !1796, !DIExpression(), !1797)
  %6 = load ptr, ptr %self, align 8, !dbg !1798
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !1798
  %7 = load i64, ptr %ptradd1, align 8, !dbg !1798
  %eq = icmp eq i64 0, %7, !dbg !1798
  br i1 %eq, label %if.then, label %if.exit, !dbg !1798

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !1799

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %m, !1800, !DIExpression(), !1801)
  %ptradd2 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1802
  %8 = load i64, ptr %ptradd2, align 8
  store i64 %8, ptr %x, align 8
  %9 = load ptr, ptr %self, align 8, !dbg !1803
  %ptradd3 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !1803
  %10 = load i64, ptr %ptradd3, align 8
  store i64 %10, ptr %.anon, align 8
  %11 = load i64, ptr %x, align 8
  store i64 %11, ptr %a, align 8
  %12 = load i64, ptr %.anon, align 8
  store i64 %12, ptr %b, align 8
  %13 = load i64, ptr %a, align 8, !dbg !1804
  %14 = load i64, ptr %b, align 8, !dbg !1809
  %lt = icmp ult i64 %13, %14, !dbg !1804
  br i1 %lt, label %cond.lhs, label %cond.rhs, !dbg !1804

cond.lhs:                                         ; preds = %if.exit
  %15 = load i64, ptr %x, align 8, !dbg !1810
  br label %cond.phi, !dbg !1810

cond.rhs:                                         ; preds = %if.exit
  %16 = load i64, ptr %.anon, align 8, !dbg !1811
  br label %cond.phi, !dbg !1811

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %15, %cond.lhs ], [ %16, %cond.rhs ], !dbg !1811
  store i64 %val, ptr %m, align 8, !dbg !1811
    #dbg_declare(ptr %n, !1812, !DIExpression(), !1813)
  %17 = load ptr, ptr %self, align 8, !dbg !1814
  %18 = load %"char[]", ptr %bytes, align 8, !dbg !1815
  %19 = extractvalue %"char[]" %18, 0, !dbg !1815
  %20 = extractvalue %"char[]" %18, 1, !dbg !1816
  %gt = icmp ugt i64 0, %20, !dbg !1816
  %21 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1816
  br i1 %21, label %panic4, label %checkok7, !dbg !1816

checkok7:                                         ; preds = %cond.phi
  %22 = load i64, ptr %m, align 8, !dbg !1817
  %add = add i64 0, %22, !dbg !1817
  %lt8 = icmp ult i64 %20, %add, !dbg !1817
  %sub = sub i64 %add, 1, !dbg !1817
  %23 = call i1 @llvm.expect.i1(i1 %lt8, i1 false), !dbg !1817
  br i1 %23, label %panic9, label %checkok16, !dbg !1817

checkok16:                                        ; preds = %checkok7
  %size = sub i64 %add, 0, !dbg !1815
  %24 = insertvalue %"char[]" undef, ptr %19, 0, !dbg !1815
  %25 = insertvalue %"char[]" %24, i64 %size, 1, !dbg !1815
  %ptradd17 = getelementptr inbounds i8, ptr %17, i64 8, !dbg !1815
  %26 = load i64, ptr %ptradd17, align 8, !dbg !1815
  %27 = inttoptr i64 %26 to ptr, !dbg !1815
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1793
  %28 = icmp eq ptr %27, %type, !dbg !1793
  br i1 %28, label %cache_hit, label %cache_miss, !dbg !1793

cache_miss:                                       ; preds = %checkok16
  %ptradd18 = getelementptr inbounds i8, ptr %27, i64 16, !dbg !1793
  %29 = load ptr, ptr %ptradd18, align 8, !dbg !1793
  %30 = call ptr @.dyn_search(ptr %29, ptr @"$sel.read"), !dbg !1793
  store ptr %30, ptr %.inlinecache, align 8, !dbg !1793
  store ptr %27, ptr %.cachedtype, align 8, !dbg !1793
  br label %31, !dbg !1793

cache_hit:                                        ; preds = %checkok16
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1793
  br label %31, !dbg !1793

31:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %30, %cache_miss ], !dbg !1793
  %32 = icmp eq ptr %fn_phi, null, !dbg !1793
  br i1 %32, label %missing_function, label %match, !dbg !1793

missing_function:                                 ; preds = %31
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1814
  call void %33(ptr @.panic_msg.75, i64 41, ptr @.file.117, i64 14, ptr @.func.58, i64 4, i32 29) #5, !dbg !1814
  unreachable, !dbg !1814

match:                                            ; preds = %31
  %34 = load ptr, ptr %17, align 8
  %35 = call i64 %fn_phi(ptr %retparam, ptr %34, ptr %19, i64 %size), !dbg !1814
  %not_err = icmp eq i64 %35, 0, !dbg !1814
  %36 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1814
  br i1 %36, label %after_check, label %assign_optional, !dbg !1814

assign_optional:                                  ; preds = %match
  store i64 %35, ptr %error_var, align 8, !dbg !1814
  br label %guard_block, !dbg !1814

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !1814

guard_block:                                      ; preds = %assign_optional
  %37 = load i64, ptr %error_var, align 8, !dbg !1814
  ret i64 %37, !dbg !1814

noerr_block:                                      ; preds = %after_check
  %38 = load i64, ptr %retparam, align 8, !dbg !1814
  store i64 %38, ptr %n, align 8, !dbg !1814
  %39 = load ptr, ptr %self, align 8, !dbg !1818
  %ptradd19 = getelementptr inbounds i8, ptr %39, i64 16, !dbg !1818
  %40 = load i64, ptr %ptradd19, align 8, !dbg !1818
  %41 = load i64, ptr %n, align 8, !dbg !1819
  %sub20 = sub i64 %40, %41, !dbg !1818
  store i64 %sub20, ptr %ptradd19, align 8, !dbg !1818
  %42 = load i64, ptr %n, align 8, !dbg !1820
  store i64 %42, ptr %0, align 8, !dbg !1820
  ret i64 0, !dbg !1820

panic:                                            ; preds = %entry
  %43 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1795
  call void %43(ptr @.panic_msg, i64 62, ptr @.file.117, i64 14, ptr @.func.58, i64 4, i32 25) #5, !dbg !1795
  unreachable, !dbg !1795

panic4:                                           ; preds = %cond.phi
  store i64 %20, ptr %taddr, align 8
  %44 = insertvalue %any undef, ptr %taddr, 0
  %45 = insertvalue %any %44, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %46 = insertvalue %any undef, ptr %taddr5, 0
  %47 = insertvalue %any %46, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %45, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %47, ptr %ptradd6, align 16
  %48 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %48, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.117, i64 14, ptr @.func.58, i64 4, i32 29, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1815
  unreachable, !dbg !1815

panic9:                                           ; preds = %checkok7
  store i64 %sub, ptr %taddr10, align 8
  %49 = insertvalue %any undef, ptr %taddr10, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %20, ptr %taddr11, align 8
  %51 = insertvalue %any undef, ptr %taddr11, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %50, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %52, ptr %ptradd13, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %53, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 60, ptr @.file.117, i64 14, ptr @.func.58, i64 4, i32 29, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !1815
  unreachable, !dbg !1815
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.LimitReader.read_byte(ptr %0, ptr %1) #0 comdat !dbg !1821 {
entry:
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i8, align 1
  store ptr null, ptr %.cachedtype, align 8, !dbg !1824
  %2 = icmp eq ptr %1, null, !dbg !1824
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1824
  br i1 %3, label %panic, label %checkok, !dbg !1824

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1825, !DIExpression(), !1826)
  %4 = load ptr, ptr %self, align 8, !dbg !1827
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !1827
  %5 = load i64, ptr %ptradd, align 8, !dbg !1827
  %eq = icmp eq i64 0, %5, !dbg !1827
  br i1 %eq, label %if.then, label %if.exit, !dbg !1827

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !1828

if.exit:                                          ; preds = %checkok
  %6 = load ptr, ptr %self, align 8, !dbg !1829
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !1829
  %7 = load i64, ptr %ptradd1, align 8, !dbg !1829
  %8 = inttoptr i64 %7 to ptr, !dbg !1829
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1824
  %9 = icmp eq ptr %8, %type, !dbg !1824
  br i1 %9, label %cache_hit, label %cache_miss, !dbg !1824

cache_miss:                                       ; preds = %if.exit
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !1824
  %10 = load ptr, ptr %ptradd2, align 8, !dbg !1824
  %11 = call ptr @.dyn_search(ptr %10, ptr @"$sel.read_byte"), !dbg !1824
  store ptr %11, ptr %.inlinecache, align 8, !dbg !1824
  store ptr %8, ptr %.cachedtype, align 8, !dbg !1824
  br label %12, !dbg !1824

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1824
  br label %12, !dbg !1824

12:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %11, %cache_miss ], !dbg !1824
  %13 = icmp eq ptr %fn_phi, null, !dbg !1824
  br i1 %13, label %missing_function, label %match, !dbg !1824

missing_function:                                 ; preds = %12
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1829
  call void %14(ptr @.panic_msg.42, i64 46, ptr @.file.117, i64 14, ptr @.func.62, i64 9, i32 38) #5, !dbg !1829
  unreachable, !dbg !1829

match:                                            ; preds = %12
  %15 = load ptr, ptr %6, align 8
  %16 = call i64 %fn_phi(ptr %retparam, ptr %15), !dbg !1829
  %not_err = icmp eq i64 %16, 0, !dbg !1829
  %17 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1829
  br i1 %17, label %after_check, label %assign_optional, !dbg !1829

assign_optional:                                  ; preds = %match
  store i64 %16, ptr %reterr, align 8, !dbg !1829
  br label %err_retblock, !dbg !1829

after_check:                                      ; preds = %match
  %18 = load i8, ptr %retparam, align 1, !dbg !1829
  %19 = load ptr, ptr %self, align 8, !dbg !1830
  %ptradd3 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !1830
  %20 = load i64, ptr %ptradd3, align 8, !dbg !1830
  %sub = sub i64 %20, 1, !dbg !1830
  store i64 %sub, ptr %ptradd3, align 8, !dbg !1830
  store i8 %18, ptr %0, align 1, !dbg !1830
  ret i64 0, !dbg !1830

err_retblock:                                     ; preds = %assign_optional
  %21 = load i64, ptr %reterr, align 8, !dbg !1830
  ret i64 %21, !dbg !1830

panic:                                            ; preds = %entry
  %22 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1826
  call void %22(ptr @.panic_msg, i64 62, ptr @.file.117, i64 14, ptr @.func.62, i64 9, i32 34) #5, !dbg !1826
  unreachable, !dbg !1826
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.LimitReader.available(ptr %0, ptr %1) #0 comdat !dbg !1832 {
entry:
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !1835
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1835
  br i1 %3, label %panic, label %checkok, !dbg !1835

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1836, !DIExpression(), !1837)
  %4 = load ptr, ptr %self, align 8, !dbg !1838
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !1838
  %5 = load i64, ptr %ptradd, align 8, !dbg !1838
  store i64 %5, ptr %0, align 8, !dbg !1838
  ret i64 0, !dbg !1838

panic:                                            ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1837
  call void %6(ptr @.panic_msg, i64 62, ptr @.file.117, i64 14, ptr @.func.68, i64 9, i32 41) #5, !dbg !1837
  unreachable, !dbg !1837
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.ReflectedParam.to_format(ptr %0, ptr %1, ptr %2) #0 comdat !dbg !1839 {
entry:
  %self = alloca ptr, align 8
  %f = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1864
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1864
  br i1 %4, label %panic, label %checkok, !dbg !1864

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1865, !DIExpression(), !1866)
  store ptr %2, ptr %f, align 8
    #dbg_declare(ptr %f, !1867, !DIExpression(), !1868)
  %5 = load ptr, ptr %self, align 8, !dbg !1869
  %6 = insertvalue %any undef, ptr %5, 0, !dbg !1869
  %7 = insertvalue %any %6, i64 ptrtoint (ptr @"$ct.String" to i64), 1, !dbg !1869
  store %any %7, ptr %varargslots, align 16, !dbg !1869
  %8 = load ptr, ptr %f, align 8
  %9 = call i64 @std.io.Formatter.printf(ptr %retparam, ptr %8, ptr @.str, i64 16, ptr %varargslots, i64 1), !dbg !1870
  %not_err = icmp eq i64 %9, 0, !dbg !1870
  %10 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1870
  br i1 %10, label %after_check, label %assign_optional, !dbg !1870

assign_optional:                                  ; preds = %checkok
  store i64 %9, ptr %reterr, align 8, !dbg !1870
  br label %err_retblock, !dbg !1870

after_check:                                      ; preds = %checkok
  %11 = load i64, ptr %retparam, align 8, !dbg !1870
  store i64 %11, ptr %0, align 8, !dbg !1870
  ret i64 0, !dbg !1870

err_retblock:                                     ; preds = %assign_optional
  %12 = load i64, ptr %reterr, align 8, !dbg !1870
  ret i64 %12, !dbg !1870

panic:                                            ; preds = %entry
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1866
  call void %13(ptr @.panic_msg, i64 62, ptr @.file.118, i64 12, ptr @.func.119, i64 9, i32 61) #5, !dbg !1866
  unreachable, !dbg !1866
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Formatter.printf(ptr %0, ptr %1, ptr %2, i64 %3, ptr %4, i64 %5) #0 comdat !dbg !1871 {
entry:
  %self = alloca ptr, align 8
  %format = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %6 = icmp eq ptr %1, null, !dbg !1883
  %7 = call i1 @llvm.expect.i1(i1 %6, i1 false), !dbg !1883
  br i1 %7, label %panic, label %checkok, !dbg !1883

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1884, !DIExpression(), !1885)
  store ptr %2, ptr %format, align 8
  %ptradd = getelementptr inbounds i8, ptr %format, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %format, !1886, !DIExpression(), !1887)
  store ptr %4, ptr %args, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %args, i64 8
  store i64 %5, ptr %ptradd1, align 8
    #dbg_declare(ptr %args, !1888, !DIExpression(), !1889)
  %8 = load ptr, ptr %self, align 8
  %lo = load ptr, ptr %format, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %format, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load ptr, ptr %args, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %args, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  %9 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %8, ptr %lo, i64 %hi, ptr %lo3, i64 %hi5) #6, !dbg !1890
  %not_err = icmp eq i64 %9, 0, !dbg !1890
  %10 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1890
  br i1 %10, label %after_check, label %assign_optional, !dbg !1890

assign_optional:                                  ; preds = %checkok
  store i64 %9, ptr %reterr, align 8, !dbg !1890
  br label %err_retblock, !dbg !1890

after_check:                                      ; preds = %checkok
  %11 = load i64, ptr %retparam, align 8, !dbg !1890
  store i64 %11, ptr %0, align 8, !dbg !1890
  ret i64 0, !dbg !1890

err_retblock:                                     ; preds = %assign_optional
  %12 = load i64, ptr %reterr, align 8, !dbg !1890
  ret i64 %12, !dbg !1890

panic:                                            ; preds = %entry
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1885
  call void %13(ptr @.panic_msg, i64 62, ptr @.file.118, i64 12, ptr @.func.120, i64 6, i32 66) #5, !dbg !1885
  unreachable, !dbg !1885
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.io.Formatter.init(ptr %0, ptr %1, ptr %2) #0 comdat !dbg !1891 {
entry:
  %self = alloca ptr, align 8
  %out_fn = alloca ptr, align 8
  %data = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.assign_list = alloca %Formatter, align 8
  %3 = icmp eq ptr %0, null, !dbg !1894
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1894
  br i1 %4, label %panic, label %checkok, !dbg !1894

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1895, !DIExpression(), !1896)
  store ptr %1, ptr %out_fn, align 8
    #dbg_declare(ptr %out_fn, !1897, !DIExpression(), !1898)
  store ptr %2, ptr %data, align 8
    #dbg_declare(ptr %data, !1899, !DIExpression(), !1900)
  %5 = load ptr, ptr %self, align 8, !dbg !1901
  %checknull = icmp eq ptr %5, null, !dbg !1901
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1901
  br i1 %6, label %panic1, label %checkok2, !dbg !1901

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !1901
  %8 = urem i64 %7, 8, !dbg !1901
  %9 = icmp ne i64 %8, 0, !dbg !1901
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !1901
  br i1 %10, label %panic3, label %checkok5, !dbg !1901

checkok5:                                         ; preds = %checkok2
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 48, i1 false)
  %11 = load ptr, ptr %data, align 8, !dbg !1902
  store ptr %11, ptr %.assign_list, align 8, !dbg !1902
  %ptradd6 = getelementptr inbounds i8, ptr %.assign_list, i64 8, !dbg !1902
  %12 = load ptr, ptr %out_fn, align 8, !dbg !1903
  store ptr %12, ptr %ptradd6, align 8, !dbg !1903
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 8 %.assign_list, i32 48, i1 false), !dbg !1903
  ret void, !dbg !1903

panic:                                            ; preds = %entry
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1896
  call void %13(ptr @.panic_msg, i64 62, ptr @.file.118, i64 12, ptr @.func, i64 4, i32 96) #5, !dbg !1896
  unreachable, !dbg !1896

panic1:                                           ; preds = %checkok
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1901
  call void %14(ptr @.panic_msg.36, i64 45, ptr @.file.118, i64 12, ptr @.func, i64 4, i32 98) #5, !dbg !1901
  unreachable, !dbg !1901

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %15 = insertvalue %any undef, ptr %taddr, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %17 = insertvalue %any undef, ptr %taddr4, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %16, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %18, ptr %ptradd, align 16
  %19 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %19, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.118, i64 12, ptr @.func, i64 4, i32 98, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1901
  unreachable, !dbg !1901
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.out(ptr %0, ptr %1, i8 zeroext %2) #0 !dbg !1904 {
entry:
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %err = alloca i64, align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1907
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1907
  br i1 %4, label %panic, label %checkok, !dbg !1907

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1908, !DIExpression(), !1909)
  store i8 %2, ptr %c, align 1
    #dbg_declare(ptr %c, !1910, !DIExpression(), !1911)
    #dbg_declare(ptr %err, !1912, !DIExpression(), !1913)
  br label %testblock, !dbg !1913

testblock:                                        ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !1914
  %ptradd = getelementptr inbounds i8, ptr %5, i64 8, !dbg !1914
  %6 = load ptr, ptr %ptradd, align 8, !dbg !1914
  %checknull = icmp eq ptr %6, null, !dbg !1914
  %7 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1914
  br i1 %7, label %panic1, label %checkok2, !dbg !1914

checkok2:                                         ; preds = %testblock
  %8 = load ptr, ptr %self, align 8, !dbg !1915
  %9 = load ptr, ptr %8, align 8, !dbg !1916
  %10 = load i8, ptr %c, align 1, !dbg !1916
  %11 = call i64 %6(ptr %9, i8 zeroext %10), !dbg !1914
  %not_err = icmp eq i64 %11, 0, !dbg !1914
  %12 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1914
  br i1 %12, label %after_check, label %assign_optional, !dbg !1914

assign_optional:                                  ; preds = %checkok2
  store i64 %11, ptr %err, align 8, !dbg !1914
  br label %end_block, !dbg !1914

after_check:                                      ; preds = %checkok2
  store i64 0, ptr %err, align 8, !dbg !1914
  br label %end_block, !dbg !1914

end_block:                                        ; preds = %after_check, %assign_optional
  %13 = load i64, ptr %err, align 8, !dbg !1914
  %i2b = icmp ne i64 %13, 0, !dbg !1914
  br i1 %i2b, label %if.then, label %if.exit11, !dbg !1914

if.then:                                          ; preds = %end_block
  %14 = load ptr, ptr %self, align 8, !dbg !1917
  %ptradd3 = getelementptr inbounds i8, ptr %14, i64 16, !dbg !1917
  %ptradd4 = getelementptr inbounds i8, ptr %ptradd3, i64 24, !dbg !1917
  %15 = load i64, ptr %ptradd4, align 8, !dbg !1917
  %i2b5 = icmp ne i64 %15, 0, !dbg !1917
  br i1 %i2b5, label %if.then6, label %if.exit, !dbg !1917

if.then6:                                         ; preds = %if.then
  %16 = load ptr, ptr %self, align 8, !dbg !1919
  %ptradd7 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !1919
  %ptradd8 = getelementptr inbounds i8, ptr %ptradd7, i64 24, !dbg !1919
  %17 = load i64, ptr %ptradd8, align 8, !dbg !1919
  ret i64 %17, !dbg !1919

if.exit:                                          ; preds = %if.then
  %18 = load ptr, ptr %self, align 8, !dbg !1920
  %ptradd9 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !1920
  %ptradd10 = getelementptr inbounds i8, ptr %ptradd9, i64 24, !dbg !1920
  %19 = load i64, ptr %err, align 8, !dbg !1921
  store i64 %19, ptr %ptradd10, align 8, !dbg !1921
  %20 = load i64, ptr %err, align 8, !dbg !1922
  ret i64 %20, !dbg !1922

if.exit11:                                        ; preds = %end_block
  store i64 1, ptr %0, align 8, !dbg !1923
  ret i64 0, !dbg !1923

panic:                                            ; preds = %entry
  %21 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1909
  call void %21(ptr @.panic_msg, i64 62, ptr @.file.118, i64 12, ptr @.func.121, i64 3, i32 101) #5, !dbg !1909
  unreachable, !dbg !1909

panic1:                                           ; preds = %testblock
  %22 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1914
  call void %22(ptr @.panic_msg.122, i64 54, ptr @.file.118, i64 12, ptr @.func.121, i64 3, i32 103) #5, !dbg !1914
  unreachable, !dbg !1914
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Formatter.print_with_function(ptr %0, ptr %1, i64 %2, ptr %3) #0 comdat !dbg !1924 {
entry:
  %self = alloca ptr, align 8
  %arg = alloca %any, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %old = alloca i32, align 4
  %old_width = alloca i32, align 4
  %old_prec = alloca i32, align 4
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr19 = alloca i64, align 8
  %.inlinecache21 = alloca ptr, align 8
  %.cachedtype22 = alloca ptr, align 8
  %retparam29 = alloca i64, align 8
  %.inlinecache46 = alloca ptr, align 8
  %.cachedtype47 = alloca ptr, align 8
  %old56 = alloca i32, align 4
  %old_width58 = alloca i32, align 4
  %old_prec61 = alloca i32, align 4
  %reterr66 = alloca i64, align 8
  %retparam67 = alloca i64, align 8
  %buffer = alloca [1024 x i8], align 16
  %allocator = alloca %OnStackAllocator, align 8
  %mem = alloca %any, align 8
  %reterr83 = alloca i64, align 8
  %.inlinecache85 = alloca ptr, align 8
  %.cachedtype86 = alloca ptr, align 8
  %result = alloca %"char[]", align 8
  %retparam98 = alloca i64, align 8
  store ptr null, ptr %.cachedtype86, align 8, !dbg !1931
  store ptr null, ptr %.cachedtype47, align 8, !dbg !1931
  store ptr null, ptr %.cachedtype22, align 8, !dbg !1931
  store ptr null, ptr %.cachedtype, align 8, !dbg !1931
  %4 = icmp eq ptr %1, null, !dbg !1931
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !1931
  br i1 %5, label %panic, label %checkok, !dbg !1931

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1932, !DIExpression(), !1933)
  store i64 %2, ptr %arg, align 8
  %ptradd = getelementptr inbounds i8, ptr %arg, i64 8
  store ptr %3, ptr %ptradd, align 8
    #dbg_declare(ptr %arg, !1934, !DIExpression(), !1935)
  %ptradd1 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !1936
  %6 = load i64, ptr %ptradd1, align 8, !dbg !1936
  %7 = inttoptr i64 %6 to ptr, !dbg !1936
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1931
  %8 = icmp eq ptr %7, %type, !dbg !1931
  br i1 %8, label %cache_hit, label %cache_miss, !dbg !1931

cache_miss:                                       ; preds = %checkok
  %ptradd2 = getelementptr inbounds i8, ptr %7, i64 16, !dbg !1931
  %9 = load ptr, ptr %ptradd2, align 8, !dbg !1931
  %10 = call ptr @.dyn_search(ptr %9, ptr @"$sel.to_format"), !dbg !1931
  store ptr %10, ptr %.inlinecache, align 8, !dbg !1931
  store ptr %7, ptr %.cachedtype, align 8, !dbg !1931
  br label %11, !dbg !1931

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1931
  br label %11, !dbg !1931

11:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %10, %cache_miss ], !dbg !1931
  %i2b = icmp ne ptr %fn_phi, null, !dbg !1931
  br i1 %i2b, label %if.then, label %if.exit44, !dbg !1931

if.then:                                          ; preds = %11
    #dbg_declare(ptr %old, !1937, !DIExpression(), !1939)
  %12 = load ptr, ptr %self, align 8, !dbg !1940
  %ptradd3 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !1940
  %13 = load i32, ptr %ptradd3, align 8, !dbg !1940
  store i32 %13, ptr %old, align 4, !dbg !1940
    #dbg_declare(ptr %old_width, !1941, !DIExpression(), !1942)
  %14 = load ptr, ptr %self, align 8, !dbg !1943
  %ptradd4 = getelementptr inbounds i8, ptr %14, i64 16, !dbg !1943
  %ptradd5 = getelementptr inbounds i8, ptr %ptradd4, i64 4, !dbg !1943
  %15 = load i32, ptr %ptradd5, align 4, !dbg !1943
  store i32 %15, ptr %old_width, align 4, !dbg !1943
    #dbg_declare(ptr %old_prec, !1944, !DIExpression(), !1945)
  %16 = load ptr, ptr %self, align 8, !dbg !1946
  %ptradd6 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !1946
  %ptradd7 = getelementptr inbounds i8, ptr %ptradd6, i64 8, !dbg !1946
  %17 = load i32, ptr %ptradd7, align 8, !dbg !1946
  store i32 %17, ptr %old_prec, align 4, !dbg !1946
  %18 = load ptr, ptr %arg, align 8, !dbg !1947
  %i2nb = icmp eq ptr %18, null, !dbg !1947
  br i1 %i2nb, label %if.then8, label %if.exit, !dbg !1947

if.then8:                                         ; preds = %if.then
  %19 = load ptr, ptr %self, align 8
  %20 = call i64 @std.io.Formatter.out_substr(ptr %retparam, ptr %19, ptr @.str.124, i64 6), !dbg !1948
  %not_err = icmp eq i64 %20, 0, !dbg !1948
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1948
  br i1 %21, label %after_check, label %assign_optional, !dbg !1948

assign_optional:                                  ; preds = %if.then8
  store i64 %20, ptr %reterr, align 8, !dbg !1948
  br label %err_retblock, !dbg !1948

after_check:                                      ; preds = %if.then8
  %22 = load i64, ptr %retparam, align 8, !dbg !1948
  %23 = load ptr, ptr %self, align 8, !dbg !1949
  %ptradd9 = getelementptr inbounds i8, ptr %23, i64 16, !dbg !1949
  %24 = load i32, ptr %old, align 4, !dbg !1951
  store i32 %24, ptr %ptradd9, align 8, !dbg !1951
  %25 = load ptr, ptr %self, align 8, !dbg !1952
  %ptradd10 = getelementptr inbounds i8, ptr %25, i64 16, !dbg !1952
  %ptradd11 = getelementptr inbounds i8, ptr %ptradd10, i64 4, !dbg !1952
  %26 = load i32, ptr %old_width, align 4, !dbg !1953
  store i32 %26, ptr %ptradd11, align 4, !dbg !1953
  %27 = load ptr, ptr %self, align 8, !dbg !1954
  %ptradd12 = getelementptr inbounds i8, ptr %27, i64 16, !dbg !1954
  %ptradd13 = getelementptr inbounds i8, ptr %ptradd12, i64 8, !dbg !1954
  %28 = load i32, ptr %old_prec, align 4, !dbg !1955
  store i32 %28, ptr %ptradd13, align 8, !dbg !1955
  store i64 %22, ptr %0, align 8, !dbg !1955
  ret i64 0, !dbg !1955

err_retblock:                                     ; preds = %assign_optional
  %29 = load ptr, ptr %self, align 8, !dbg !1956
  %ptradd14 = getelementptr inbounds i8, ptr %29, i64 16, !dbg !1956
  %30 = load i32, ptr %old, align 4, !dbg !1958
  store i32 %30, ptr %ptradd14, align 8, !dbg !1958
  %31 = load ptr, ptr %self, align 8, !dbg !1959
  %ptradd15 = getelementptr inbounds i8, ptr %31, i64 16, !dbg !1959
  %ptradd16 = getelementptr inbounds i8, ptr %ptradd15, i64 4, !dbg !1959
  %32 = load i32, ptr %old_width, align 4, !dbg !1960
  store i32 %32, ptr %ptradd16, align 4, !dbg !1960
  %33 = load ptr, ptr %self, align 8, !dbg !1961
  %ptradd17 = getelementptr inbounds i8, ptr %33, i64 16, !dbg !1961
  %ptradd18 = getelementptr inbounds i8, ptr %ptradd17, i64 8, !dbg !1961
  %34 = load i32, ptr %old_prec, align 4, !dbg !1962
  store i32 %34, ptr %ptradd18, align 8, !dbg !1962
  %35 = load i64, ptr %reterr, align 8, !dbg !1962
  ret i64 %35, !dbg !1962

if.exit:                                          ; preds = %if.then
  %ptradd20 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !1963
  %36 = load i64, ptr %ptradd20, align 8, !dbg !1963
  %37 = inttoptr i64 %36 to ptr, !dbg !1963
  %type23 = load ptr, ptr %.cachedtype22, align 8, !dbg !1931
  %38 = icmp eq ptr %37, %type23, !dbg !1931
  br i1 %38, label %cache_hit26, label %cache_miss24, !dbg !1931

cache_miss24:                                     ; preds = %if.exit
  %ptradd25 = getelementptr inbounds i8, ptr %37, i64 16, !dbg !1931
  %39 = load ptr, ptr %ptradd25, align 8, !dbg !1931
  %40 = call ptr @.dyn_search(ptr %39, ptr @"$sel.to_format"), !dbg !1931
  store ptr %40, ptr %.inlinecache21, align 8, !dbg !1931
  store ptr %37, ptr %.cachedtype22, align 8, !dbg !1931
  br label %41, !dbg !1931

cache_hit26:                                      ; preds = %if.exit
  %cache_hit_fn27 = load ptr, ptr %.inlinecache21, align 8, !dbg !1931
  br label %41, !dbg !1931

41:                                               ; preds = %cache_hit26, %cache_miss24
  %fn_phi28 = phi ptr [ %cache_hit_fn27, %cache_hit26 ], [ %40, %cache_miss24 ], !dbg !1931
  %42 = icmp eq ptr %fn_phi28, null, !dbg !1931
  br i1 %42, label %missing_function, label %match, !dbg !1931

missing_function:                                 ; preds = %41
  %43 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1964
  call void %43(ptr @.panic_msg.125, i64 46, ptr @.file.118, i64 12, ptr @.func.123, i64 19, i32 126) #5, !dbg !1964
  unreachable, !dbg !1964

match:                                            ; preds = %41
  %44 = load ptr, ptr %arg, align 8
  %45 = load ptr, ptr %self, align 8
  %46 = call i64 %fn_phi28(ptr %retparam29, ptr %44, ptr %45), !dbg !1964
  %not_err30 = icmp eq i64 %46, 0, !dbg !1964
  %47 = call i1 @llvm.expect.i1(i1 %not_err30, i1 true), !dbg !1964
  br i1 %47, label %after_check32, label %assign_optional31, !dbg !1964

assign_optional31:                                ; preds = %match
  store i64 %46, ptr %reterr19, align 8, !dbg !1964
  br label %err_retblock38, !dbg !1964

after_check32:                                    ; preds = %match
  %48 = load i64, ptr %retparam29, align 8, !dbg !1964
  %49 = load ptr, ptr %self, align 8, !dbg !1965
  %ptradd33 = getelementptr inbounds i8, ptr %49, i64 16, !dbg !1965
  %50 = load i32, ptr %old, align 4, !dbg !1967
  store i32 %50, ptr %ptradd33, align 8, !dbg !1967
  %51 = load ptr, ptr %self, align 8, !dbg !1968
  %ptradd34 = getelementptr inbounds i8, ptr %51, i64 16, !dbg !1968
  %ptradd35 = getelementptr inbounds i8, ptr %ptradd34, i64 4, !dbg !1968
  %52 = load i32, ptr %old_width, align 4, !dbg !1969
  store i32 %52, ptr %ptradd35, align 4, !dbg !1969
  %53 = load ptr, ptr %self, align 8, !dbg !1970
  %ptradd36 = getelementptr inbounds i8, ptr %53, i64 16, !dbg !1970
  %ptradd37 = getelementptr inbounds i8, ptr %ptradd36, i64 8, !dbg !1970
  %54 = load i32, ptr %old_prec, align 4, !dbg !1971
  store i32 %54, ptr %ptradd37, align 8, !dbg !1971
  store i64 %48, ptr %0, align 8, !dbg !1971
  ret i64 0, !dbg !1971

err_retblock38:                                   ; preds = %assign_optional31
  %55 = load ptr, ptr %self, align 8, !dbg !1972
  %ptradd39 = getelementptr inbounds i8, ptr %55, i64 16, !dbg !1972
  %56 = load i32, ptr %old, align 4, !dbg !1974
  store i32 %56, ptr %ptradd39, align 8, !dbg !1974
  %57 = load ptr, ptr %self, align 8, !dbg !1975
  %ptradd40 = getelementptr inbounds i8, ptr %57, i64 16, !dbg !1975
  %ptradd41 = getelementptr inbounds i8, ptr %ptradd40, i64 4, !dbg !1975
  %58 = load i32, ptr %old_width, align 4, !dbg !1976
  store i32 %58, ptr %ptradd41, align 4, !dbg !1976
  %59 = load ptr, ptr %self, align 8, !dbg !1977
  %ptradd42 = getelementptr inbounds i8, ptr %59, i64 16, !dbg !1977
  %ptradd43 = getelementptr inbounds i8, ptr %ptradd42, i64 8, !dbg !1977
  %60 = load i32, ptr %old_prec, align 4, !dbg !1978
  store i32 %60, ptr %ptradd43, align 8, !dbg !1978
  %61 = load i64, ptr %reterr19, align 8, !dbg !1978
  ret i64 %61, !dbg !1978

if.exit44:                                        ; preds = %11
  %ptradd45 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !1979
  %62 = load i64, ptr %ptradd45, align 8, !dbg !1979
  %63 = inttoptr i64 %62 to ptr, !dbg !1979
  %type48 = load ptr, ptr %.cachedtype47, align 8, !dbg !1931
  %64 = icmp eq ptr %63, %type48, !dbg !1931
  br i1 %64, label %cache_hit51, label %cache_miss49, !dbg !1931

cache_miss49:                                     ; preds = %if.exit44
  %ptradd50 = getelementptr inbounds i8, ptr %63, i64 16, !dbg !1931
  %65 = load ptr, ptr %ptradd50, align 8, !dbg !1931
  %66 = call ptr @.dyn_search(ptr %65, ptr @"$sel.to_string"), !dbg !1931
  store ptr %66, ptr %.inlinecache46, align 8, !dbg !1931
  store ptr %63, ptr %.cachedtype47, align 8, !dbg !1931
  br label %67, !dbg !1931

cache_hit51:                                      ; preds = %if.exit44
  %cache_hit_fn52 = load ptr, ptr %.inlinecache46, align 8, !dbg !1931
  br label %67, !dbg !1931

67:                                               ; preds = %cache_hit51, %cache_miss49
  %fn_phi53 = phi ptr [ %cache_hit_fn52, %cache_hit51 ], [ %66, %cache_miss49 ], !dbg !1931
  %i2b54 = icmp ne ptr %fn_phi53, null, !dbg !1931
  br i1 %i2b54, label %if.then55, label %if.exit116, !dbg !1931

if.then55:                                        ; preds = %67
    #dbg_declare(ptr %old56, !1980, !DIExpression(), !1982)
  %68 = load ptr, ptr %self, align 8, !dbg !1983
  %ptradd57 = getelementptr inbounds i8, ptr %68, i64 16, !dbg !1983
  %69 = load i32, ptr %ptradd57, align 8, !dbg !1983
  store i32 %69, ptr %old56, align 4, !dbg !1983
    #dbg_declare(ptr %old_width58, !1984, !DIExpression(), !1985)
  %70 = load ptr, ptr %self, align 8, !dbg !1986
  %ptradd59 = getelementptr inbounds i8, ptr %70, i64 16, !dbg !1986
  %ptradd60 = getelementptr inbounds i8, ptr %ptradd59, i64 4, !dbg !1986
  %71 = load i32, ptr %ptradd60, align 4, !dbg !1986
  store i32 %71, ptr %old_width58, align 4, !dbg !1986
    #dbg_declare(ptr %old_prec61, !1987, !DIExpression(), !1988)
  %72 = load ptr, ptr %self, align 8, !dbg !1989
  %ptradd62 = getelementptr inbounds i8, ptr %72, i64 16, !dbg !1989
  %ptradd63 = getelementptr inbounds i8, ptr %ptradd62, i64 8, !dbg !1989
  %73 = load i32, ptr %ptradd63, align 8, !dbg !1989
  store i32 %73, ptr %old_prec61, align 4, !dbg !1989
  %74 = load ptr, ptr %arg, align 8, !dbg !1990
  %i2nb64 = icmp eq ptr %74, null, !dbg !1990
  br i1 %i2nb64, label %if.then65, label %if.exit82, !dbg !1990

if.then65:                                        ; preds = %if.then55
  %75 = load ptr, ptr %self, align 8
  %76 = call i64 @std.io.Formatter.out_substr(ptr %retparam67, ptr %75, ptr @.str.126, i64 6), !dbg !1991
  %not_err68 = icmp eq i64 %76, 0, !dbg !1991
  %77 = call i1 @llvm.expect.i1(i1 %not_err68, i1 true), !dbg !1991
  br i1 %77, label %after_check70, label %assign_optional69, !dbg !1991

assign_optional69:                                ; preds = %if.then65
  store i64 %76, ptr %reterr66, align 8, !dbg !1991
  br label %err_retblock76, !dbg !1991

after_check70:                                    ; preds = %if.then65
  %78 = load i64, ptr %retparam67, align 8, !dbg !1991
  %79 = load ptr, ptr %self, align 8, !dbg !1992
  %ptradd71 = getelementptr inbounds i8, ptr %79, i64 16, !dbg !1992
  %80 = load i32, ptr %old56, align 4, !dbg !1994
  store i32 %80, ptr %ptradd71, align 8, !dbg !1994
  %81 = load ptr, ptr %self, align 8, !dbg !1995
  %ptradd72 = getelementptr inbounds i8, ptr %81, i64 16, !dbg !1995
  %ptradd73 = getelementptr inbounds i8, ptr %ptradd72, i64 4, !dbg !1995
  %82 = load i32, ptr %old_width58, align 4, !dbg !1996
  store i32 %82, ptr %ptradd73, align 4, !dbg !1996
  %83 = load ptr, ptr %self, align 8, !dbg !1997
  %ptradd74 = getelementptr inbounds i8, ptr %83, i64 16, !dbg !1997
  %ptradd75 = getelementptr inbounds i8, ptr %ptradd74, i64 8, !dbg !1997
  %84 = load i32, ptr %old_prec61, align 4, !dbg !1998
  store i32 %84, ptr %ptradd75, align 8, !dbg !1998
  store i64 %78, ptr %0, align 8, !dbg !1998
  ret i64 0, !dbg !1998

err_retblock76:                                   ; preds = %assign_optional69
  %85 = load ptr, ptr %self, align 8, !dbg !1999
  %ptradd77 = getelementptr inbounds i8, ptr %85, i64 16, !dbg !1999
  %86 = load i32, ptr %old56, align 4, !dbg !2001
  store i32 %86, ptr %ptradd77, align 8, !dbg !2001
  %87 = load ptr, ptr %self, align 8, !dbg !2002
  %ptradd78 = getelementptr inbounds i8, ptr %87, i64 16, !dbg !2002
  %ptradd79 = getelementptr inbounds i8, ptr %ptradd78, i64 4, !dbg !2002
  %88 = load i32, ptr %old_width58, align 4, !dbg !2003
  store i32 %88, ptr %ptradd79, align 4, !dbg !2003
  %89 = load ptr, ptr %self, align 8, !dbg !2004
  %ptradd80 = getelementptr inbounds i8, ptr %89, i64 16, !dbg !2004
  %ptradd81 = getelementptr inbounds i8, ptr %ptradd80, i64 8, !dbg !2004
  %90 = load i32, ptr %old_prec61, align 4, !dbg !2005
  store i32 %90, ptr %ptradd81, align 8, !dbg !2005
  %91 = load i64, ptr %reterr66, align 8, !dbg !2005
  ret i64 %91, !dbg !2005

if.exit82:                                        ; preds = %if.then55
    #dbg_declare(ptr %buffer, !2006, !DIExpression(), !2011)
  call void @llvm.memset.p0.i64(ptr align 16 %buffer, i8 0, i64 1024, i1 false), !dbg !2011
    #dbg_declare(ptr %allocator, !2013, !DIExpression(), !2026)
  call void @llvm.memset.p0.i64(ptr align 8 %allocator, i8 0, i64 48, i1 false), !dbg !2026
  %92 = insertvalue %"char[]" undef, ptr %buffer, 0, !dbg !2027
  %93 = insertvalue %"char[]" %92, i64 1024, 1, !dbg !2027
  %lo = load i64, ptr @std.core.mem.allocator.thread_allocator, align 8, !dbg !2028
  %hi = load ptr, ptr getelementptr inbounds (i8, ptr @std.core.mem.allocator.thread_allocator, i64 8), align 8, !dbg !2028
  call void @std.core.mem.allocator.OnStackAllocator.init(ptr %allocator, ptr %buffer, i64 1024, i64 %lo, ptr %hi), !dbg !2031
    #dbg_declare(ptr %mem, !2032, !DIExpression(), !2033)
  %94 = insertvalue %any undef, ptr %allocator, 0, !dbg !2034
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.OnStackAllocator" to i64), 1, !dbg !2034
  store %any %95, ptr %mem, align 8, !dbg !2034
  %ptradd84 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !2036
  %96 = load i64, ptr %ptradd84, align 8, !dbg !2036
  %97 = inttoptr i64 %96 to ptr, !dbg !2036
  %type87 = load ptr, ptr %.cachedtype86, align 8, !dbg !1931
  %98 = icmp eq ptr %97, %type87, !dbg !1931
  br i1 %98, label %cache_hit90, label %cache_miss88, !dbg !1931

cache_miss88:                                     ; preds = %if.exit82
  %ptradd89 = getelementptr inbounds i8, ptr %97, i64 16, !dbg !1931
  %99 = load ptr, ptr %ptradd89, align 8, !dbg !1931
  %100 = call ptr @.dyn_search(ptr %99, ptr @"$sel.to_string"), !dbg !1931
  store ptr %100, ptr %.inlinecache85, align 8, !dbg !1931
  store ptr %97, ptr %.cachedtype86, align 8, !dbg !1931
  br label %101, !dbg !1931

cache_hit90:                                      ; preds = %if.exit82
  %cache_hit_fn91 = load ptr, ptr %.inlinecache85, align 8, !dbg !1931
  br label %101, !dbg !1931

101:                                              ; preds = %cache_hit90, %cache_miss88
  %fn_phi92 = phi ptr [ %cache_hit_fn91, %cache_hit90 ], [ %100, %cache_miss88 ], !dbg !1931
  %102 = icmp eq ptr %fn_phi92, null, !dbg !1931
  br i1 %102, label %missing_function93, label %match94, !dbg !1931

missing_function93:                               ; preds = %101
  %103 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2038
  call void %103(ptr @.panic_msg.127, i64 46, ptr @.file.118, i64 12, ptr @.func.123, i64 19, i32 142) #5, !dbg !2038
  unreachable, !dbg !2038

match94:                                          ; preds = %101
  %104 = load ptr, ptr %arg, align 8, !dbg !2038
  %lo95 = load i64, ptr %mem, align 8, !dbg !2038
  %ptradd96 = getelementptr inbounds i8, ptr %mem, i64 8, !dbg !2038
  %hi97 = load ptr, ptr %ptradd96, align 8, !dbg !2038
  %105 = call { ptr, i64 } %fn_phi92(ptr %104, i64 %lo95, ptr %hi97), !dbg !2038
  store { ptr, i64 } %105, ptr %result, align 8
  %106 = load ptr, ptr %self, align 8
  %lo99 = load ptr, ptr %result, align 8
  %ptradd100 = getelementptr inbounds i8, ptr %result, i64 8
  %hi101 = load i64, ptr %ptradd100, align 8
  %107 = call i64 @std.io.Formatter.out_substr(ptr %retparam98, ptr %106, ptr %lo99, i64 %hi101), !dbg !2039
  %not_err102 = icmp eq i64 %107, 0, !dbg !2039
  %108 = call i1 @llvm.expect.i1(i1 %not_err102, i1 true), !dbg !2039
  br i1 %108, label %after_check104, label %assign_optional103, !dbg !2039

assign_optional103:                               ; preds = %match94
  store i64 %107, ptr %reterr83, align 8, !dbg !2039
  br label %err_retblock110, !dbg !2039

after_check104:                                   ; preds = %match94
  %109 = load i64, ptr %retparam98, align 8, !dbg !2039
  call void @std.core.mem.allocator.OnStackAllocator.free(ptr %allocator), !dbg !2040
  %110 = load ptr, ptr %self, align 8, !dbg !2042
  %ptradd105 = getelementptr inbounds i8, ptr %110, i64 16, !dbg !2042
  %111 = load i32, ptr %old56, align 4, !dbg !2044
  store i32 %111, ptr %ptradd105, align 8, !dbg !2044
  %112 = load ptr, ptr %self, align 8, !dbg !2045
  %ptradd106 = getelementptr inbounds i8, ptr %112, i64 16, !dbg !2045
  %ptradd107 = getelementptr inbounds i8, ptr %ptradd106, i64 4, !dbg !2045
  %113 = load i32, ptr %old_width58, align 4, !dbg !2046
  store i32 %113, ptr %ptradd107, align 4, !dbg !2046
  %114 = load ptr, ptr %self, align 8, !dbg !2047
  %ptradd108 = getelementptr inbounds i8, ptr %114, i64 16, !dbg !2047
  %ptradd109 = getelementptr inbounds i8, ptr %ptradd108, i64 8, !dbg !2047
  %115 = load i32, ptr %old_prec61, align 4, !dbg !2048
  store i32 %115, ptr %ptradd109, align 8, !dbg !2048
  store i64 %109, ptr %0, align 8, !dbg !2048
  ret i64 0, !dbg !2048

err_retblock110:                                  ; preds = %assign_optional103
  call void @std.core.mem.allocator.OnStackAllocator.free(ptr %allocator), !dbg !2049
  %116 = load ptr, ptr %self, align 8, !dbg !2051
  %ptradd111 = getelementptr inbounds i8, ptr %116, i64 16, !dbg !2051
  %117 = load i32, ptr %old56, align 4, !dbg !2053
  store i32 %117, ptr %ptradd111, align 8, !dbg !2053
  %118 = load ptr, ptr %self, align 8, !dbg !2054
  %ptradd112 = getelementptr inbounds i8, ptr %118, i64 16, !dbg !2054
  %ptradd113 = getelementptr inbounds i8, ptr %ptradd112, i64 4, !dbg !2054
  %119 = load i32, ptr %old_width58, align 4, !dbg !2055
  store i32 %119, ptr %ptradd113, align 4, !dbg !2055
  %120 = load ptr, ptr %self, align 8, !dbg !2056
  %ptradd114 = getelementptr inbounds i8, ptr %120, i64 16, !dbg !2056
  %ptradd115 = getelementptr inbounds i8, ptr %ptradd114, i64 8, !dbg !2056
  %121 = load i32, ptr %old_prec61, align 4, !dbg !2057
  store i32 %121, ptr %ptradd115, align 8, !dbg !2057
  %122 = load i64, ptr %reterr83, align 8, !dbg !2057
  ret i64 %122, !dbg !2057

if.exit116:                                       ; preds = %67
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !2058

panic:                                            ; preds = %entry
  %123 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1933
  call void %123(ptr @.panic_msg, i64 62, ptr @.file.118, i64 12, ptr @.func.123, i64 19, i32 112) #5, !dbg !1933
  unreachable, !dbg !1933
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.out_str(ptr %0, ptr %1, i64 %2, ptr %3) #0 !dbg !2059 {
entry:
  %self = alloca ptr, align 8
  %arg = alloca %any, align 8
  %switch = alloca i8, align 1
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr3 = alloca i64, align 8
  %retparam4 = alloca i64, align 8
  %reterr10 = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr14 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %faultname_zero = alloca %"char[]", align 8
  %retparam17 = alloca i64, align 8
  %reterr24 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %retparam36 = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %indirectarg48 = alloca %"any[]", align 8
  %flags = alloca i32, align 4
  %width = alloca i32, align 4
  %reterr56 = alloca i64, align 8
  %retparam57 = alloca i64, align 8
  %retparam63 = alloca i64, align 8
  %flags75 = alloca i32, align 4
  %width77 = alloca i32, align 4
  %reterr83 = alloca i64, align 8
  %retparam84 = alloca double, align 8
  %retparam90 = alloca i64, align 8
  %retparam94 = alloca i64, align 8
  %reterr108 = alloca i64, align 8
  %retparam112 = alloca i64, align 8
  %n = alloca i64, align 8
  %n.f = alloca i64, align 8
  %retparam117 = alloca i64, align 8
  %taddr118 = alloca %any, align 8
  %reterr125 = alloca i64, align 8
  %blockret = alloca i64, align 8
  %f = alloca i64, align 8
  %error_var = alloca i64, align 8
  %switch140 = alloca i8, align 1
  %i = alloca i64, align 8
  %error_var143 = alloca i64, align 8
  %v = alloca %any, align 8
  %self151 = alloca ptr, align 8
  %taddr156 = alloca i64, align 8
  %taddr157 = alloca i64, align 8
  %varargslots158 = alloca [2 x %any], align 16
  %indirectarg161 = alloca %"any[]", align 8
  %taddr167 = alloca i64, align 8
  %taddr168 = alloca i64, align 8
  %varargslots169 = alloca [2 x %any], align 16
  %indirectarg172 = alloca %"any[]", align 8
  %v193 = alloca %any, align 8
  %blockret194 = alloca i64, align 8
  %any_type = alloca i64, align 8
  %kind = alloca i8, align 1
  %is_mixed_signed = alloca i8, align 1
  %max = alloca i64, align 8
  %min = alloca i64, align 8
  %switch208 = alloca i64, align 8
  %c = alloca i8, align 1
  %s = alloca i16, align 2
  %taddr231 = alloca i64, align 8
  %taddr232 = alloca i64, align 8
  %varargslots233 = alloca [2 x %any], align 16
  %indirectarg236 = alloca %"any[]", align 8
  %i261 = alloca i32, align 4
  %taddr266 = alloca i64, align 8
  %taddr267 = alloca i64, align 8
  %varargslots268 = alloca [2 x %any], align 16
  %indirectarg271 = alloca %"any[]", align 8
  %l = alloca i64, align 8
  %taddr305 = alloca i64, align 8
  %taddr306 = alloca i64, align 8
  %varargslots307 = alloca [2 x %any], align 16
  %indirectarg310 = alloca %"any[]", align 8
  %i337 = alloca i128, align 16
  %taddr342 = alloca i64, align 8
  %taddr343 = alloca i64, align 8
  %varargslots344 = alloca [2 x %any], align 16
  %indirectarg347 = alloca %"any[]", align 8
  %c375 = alloca i8, align 1
  %s392 = alloca i16, align 2
  %taddr397 = alloca i64, align 8
  %taddr398 = alloca i64, align 8
  %varargslots399 = alloca [2 x %any], align 16
  %indirectarg402 = alloca %"any[]", align 8
  %i422 = alloca i32, align 4
  %taddr427 = alloca i64, align 8
  %taddr428 = alloca i64, align 8
  %varargslots429 = alloca [2 x %any], align 16
  %indirectarg432 = alloca %"any[]", align 8
  %l452 = alloca i64, align 8
  %taddr457 = alloca i64, align 8
  %taddr458 = alloca i64, align 8
  %varargslots459 = alloca [2 x %any], align 16
  %indirectarg462 = alloca %"any[]", align 8
  %i479 = alloca i128, align 16
  %taddr484 = alloca i64, align 8
  %taddr485 = alloca i64, align 8
  %varargslots486 = alloca [2 x %any], align 16
  %indirectarg489 = alloca %"any[]", align 8
  %string502 = alloca %"char[]", align 8
  %indirectarg506 = alloca %"any[]", align 8
  %varargslots509 = alloca [1 x %any], align 16
  %indirectarg511 = alloca %"any[]", align 8
  %varargslots523 = alloca [1 x %any], align 16
  %indirectarg525 = alloca %"any[]", align 8
  %reterr527 = alloca i64, align 8
  %taddr538 = alloca i64, align 8
  %taddr539 = alloca i64, align 8
  %varargslots540 = alloca [2 x %any], align 16
  %indirectarg543 = alloca %"any[]", align 8
  %retparam545 = alloca i64, align 8
  %reterr554 = alloca i64, align 8
  %retparam555 = alloca i64, align 8
  %reterr561 = alloca i64, align 8
  %retparam562 = alloca i64, align 8
  %reterr568 = alloca i64, align 8
  %retparam569 = alloca i64, align 8
  %reterr575 = alloca i64, align 8
  %retparam576 = alloca i64, align 8
  %reterr585 = alloca i64, align 8
  %taddr590 = alloca i64, align 8
  %taddr591 = alloca i64, align 8
  %varargslots592 = alloca [2 x %any], align 16
  %indirectarg595 = alloca %"any[]", align 8
  %retparam597 = alloca i64, align 8
  %reterr609 = alloca i64, align 8
  %taddr614 = alloca i64, align 8
  %taddr615 = alloca i64, align 8
  %varargslots616 = alloca [2 x %any], align 16
  %indirectarg619 = alloca %"any[]", align 8
  %taddr626 = alloca i64, align 8
  %taddr627 = alloca i64, align 8
  %varargslots628 = alloca [2 x %any], align 16
  %indirectarg631 = alloca %"any[]", align 8
  %result633 = alloca %"char[]", align 8
  %retparam635 = alloca i64, align 8
  %reterr644 = alloca i64, align 8
  %taddr649 = alloca i64, align 8
  %taddr650 = alloca i64, align 8
  %varargslots651 = alloca [2 x %any], align 16
  %indirectarg654 = alloca %"any[]", align 8
  %taddr662 = alloca i64, align 8
  %taddr663 = alloca i64, align 8
  %varargslots664 = alloca [2 x %any], align 16
  %indirectarg667 = alloca %"any[]", align 8
  %result669 = alloca %"char[]", align 8
  %retparam673 = alloca i64, align 8
  %reterr679 = alloca i64, align 8
  %self680 = alloca ptr, align 8
  %taddr685 = alloca i64, align 8
  %taddr686 = alloca i64, align 8
  %varargslots687 = alloca [2 x %any], align 16
  %indirectarg690 = alloca %"any[]", align 8
  %taddr696 = alloca i64, align 8
  %taddr697 = alloca i64, align 8
  %varargslots698 = alloca [2 x %any], align 16
  %indirectarg701 = alloca %"any[]", align 8
  %retparam725 = alloca i64, align 8
  %taddr726 = alloca %any, align 8
  %inner = alloca i64, align 8
  %pointer = alloca ptr, align 8
  %deref = alloca %any, align 8
  %taddr785 = alloca i64, align 8
  %taddr786 = alloca i64, align 8
  %varargslots787 = alloca [2 x %any], align 16
  %indirectarg790 = alloca %"any[]", align 8
  %ptr = alloca ptr, align 8
  %type = alloca i64, align 8
  %retparam792 = alloca i64, align 8
  %taddr793 = alloca %any, align 8
  %reterr804 = alloca i64, align 8
  %blockret806 = alloca i64, align 8
  %f807 = alloca i64, align 8
  %error_var820 = alloca i64, align 8
  %flags829 = alloca i32, align 4
  %width831 = alloca i32, align 4
  %reterr836 = alloca i64, align 8
  %error_var837 = alloca i64, align 8
  %retparam838 = alloca i64, align 8
  %retparam847 = alloca i64, align 8
  %flags862 = alloca i32, align 4
  %width864 = alloca i32, align 4
  %inner870 = alloca i64, align 8
  %size = alloca i64, align 8
  %alen = alloca i64, align 8
  %ptr909 = alloca ptr, align 8
  %len = alloca i64, align 8
  %error_var910 = alloca i64, align 8
  %retparam911 = alloca i64, align 8
  %i920 = alloca i64, align 8
  %error_var924 = alloca i64, align 8
  %retparam925 = alloca i64, align 8
  %error_var936 = alloca i64, align 8
  %ptr937 = alloca ptr, align 8
  %type938 = alloca i64, align 8
  %retparam939 = alloca i64, align 8
  %taddr940 = alloca %any, align 8
  %error_var954 = alloca i64, align 8
  %retparam955 = alloca i64, align 8
  %reterr965 = alloca i64, align 8
  %flags970 = alloca i32, align 4
  %width972 = alloca i32, align 4
  %inner978 = alloca i64, align 8
  %size1001 = alloca i64, align 8
  %vlen = alloca i64, align 8
  %ptr1020 = alloca ptr, align 8
  %len1021 = alloca i64, align 8
  %error_var1022 = alloca i64, align 8
  %retparam1023 = alloca i64, align 8
  %i1032 = alloca i64, align 8
  %error_var1038 = alloca i64, align 8
  %retparam1039 = alloca i64, align 8
  %error_var1050 = alloca i64, align 8
  %ptr1051 = alloca ptr, align 8
  %type1052 = alloca i64, align 8
  %retparam1053 = alloca i64, align 8
  %taddr1054 = alloca %any, align 8
  %error_var1070 = alloca i64, align 8
  %retparam1071 = alloca i64, align 8
  %reterr1081 = alloca i64, align 8
  %inner1086 = alloca i64, align 8
  %flags1112 = alloca i32, align 4
  %width1114 = alloca i32, align 4
  %size1120 = alloca i64, align 8
  %temp = alloca ptr, align 8
  %ptr1125 = alloca ptr, align 8
  %taddr1130 = alloca i64, align 8
  %taddr1131 = alloca i64, align 8
  %varargslots1132 = alloca [2 x %any], align 16
  %indirectarg1135 = alloca %"any[]", align 8
  %slen = alloca i64, align 8
  %taddr1141 = alloca i64, align 8
  %taddr1142 = alloca i64, align 8
  %varargslots1143 = alloca [2 x %any], align 16
  %indirectarg1146 = alloca %"any[]", align 8
  %len1149 = alloca i64, align 8
  %error_var1150 = alloca i64, align 8
  %retparam1151 = alloca i64, align 8
  %i1160 = alloca i64, align 8
  %error_var1166 = alloca i64, align 8
  %retparam1167 = alloca i64, align 8
  %error_var1178 = alloca i64, align 8
  %ptr1179 = alloca ptr, align 8
  %type1180 = alloca i64, align 8
  %retparam1181 = alloca i64, align 8
  %taddr1182 = alloca %any, align 8
  %error_var1198 = alloca i64, align 8
  %retparam1199 = alloca i64, align 8
  %reterr1209 = alloca i64, align 8
  %string1214 = alloca %"char[]", align 8
  %indirectarg1218 = alloca %"any[]", align 8
  %reterr1220 = alloca i64, align 8
  %retparam1221 = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !2062
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !2062
  br i1 %5, label %panic, label %checkok, !dbg !2062

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2063, !DIExpression(), !2064)
  store i64 %2, ptr %arg, align 8
  %ptradd = getelementptr inbounds i8, ptr %arg, i64 8
  store ptr %3, ptr %ptradd, align 8
    #dbg_declare(ptr %arg, !2065, !DIExpression(), !2066)
  %ptradd1 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !2067
  %6 = load i64, ptr %ptradd1, align 8, !dbg !2067
  %"introspect*" = inttoptr i64 %6 to ptr, !dbg !2067
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !2067
  store i8 %typeid.kind, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %7 = load i8, ptr %switch, align 1
  switch i8 %7, label %switch.exit [
    i8 5, label %switch.case
    i8 0, label %switch.case2
    i8 6, label %switch.case9
    i8 9, label %switch.case9
    i8 20, label %switch.case23
    i8 7, label %switch.case23
    i8 14, label %switch.case44
    i8 2, label %switch.case49
    i8 3, label %switch.case49
    i8 4, label %switch.case74
    i8 1, label %switch.case107
  ]

switch.case:                                      ; preds = %switch.entry
  %8 = load ptr, ptr %self, align 8
  %9 = call i64 @std.io.Formatter.out_substr(ptr %retparam, ptr %8, ptr @.str.129, i64 6), !dbg !2069
  %not_err = icmp eq i64 %9, 0, !dbg !2069
  %10 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2069
  br i1 %10, label %after_check, label %assign_optional, !dbg !2069

assign_optional:                                  ; preds = %switch.case
  store i64 %9, ptr %reterr, align 8, !dbg !2069
  br label %err_retblock, !dbg !2069

after_check:                                      ; preds = %switch.case
  %11 = load i64, ptr %retparam, align 8, !dbg !2069
  store i64 %11, ptr %0, align 8, !dbg !2069
  ret i64 0, !dbg !2069

err_retblock:                                     ; preds = %assign_optional
  %12 = load i64, ptr %reterr, align 8, !dbg !2069
  ret i64 %12, !dbg !2069

switch.case2:                                     ; preds = %switch.entry
  %13 = load ptr, ptr %self, align 8
  %14 = call i64 @std.io.Formatter.out_substr(ptr %retparam4, ptr %13, ptr @.str.130, i64 4), !dbg !2071
  %not_err5 = icmp eq i64 %14, 0, !dbg !2071
  %15 = call i1 @llvm.expect.i1(i1 %not_err5, i1 true), !dbg !2071
  br i1 %15, label %after_check7, label %assign_optional6, !dbg !2071

assign_optional6:                                 ; preds = %switch.case2
  store i64 %14, ptr %reterr3, align 8, !dbg !2071
  br label %err_retblock8, !dbg !2071

after_check7:                                     ; preds = %switch.case2
  %16 = load i64, ptr %retparam4, align 8, !dbg !2071
  store i64 %16, ptr %0, align 8, !dbg !2071
  ret i64 0, !dbg !2071

err_retblock8:                                    ; preds = %assign_optional6
  %17 = load i64, ptr %reterr3, align 8, !dbg !2071
  ret i64 %17, !dbg !2071

switch.case9:                                     ; preds = %switch.entry, %switch.entry
  %18 = load ptr, ptr %arg, align 8, !dbg !2073
  %checknull = icmp eq ptr %18, null, !dbg !2073
  %19 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2073
  br i1 %19, label %panic11, label %checkok12, !dbg !2073

checkok12:                                        ; preds = %switch.case9
  %20 = ptrtoint ptr %18 to i64, !dbg !2075
  %21 = urem i64 %20, 8, !dbg !2075
  %22 = icmp ne i64 %21, 0, !dbg !2075
  %23 = call i1 @llvm.expect.i1(i1 %22, i1 false), !dbg !2075
  br i1 %23, label %panic13, label %checkok16, !dbg !2075

checkok16:                                        ; preds = %checkok12
  %24 = load i64, ptr %18, align 8, !dbg !2075
  %eq = icmp eq i64 %24, 0
  br i1 %eq, label %faultname_no, label %faultname_ok

faultname_no:                                     ; preds = %checkok16
  call void @llvm.memset.p0.i64(ptr align 8 %faultname_zero, i8 0, i64 16, i1 false)
  br label %faultname_exit

faultname_ok:                                     ; preds = %checkok16
  %25 = inttoptr i64 %24 to ptr
  %26 = getelementptr inbounds %.fault, ptr %25, i32 0, i32 1
  br label %faultname_exit

faultname_exit:                                   ; preds = %faultname_ok, %faultname_no
  %faultname = phi ptr [ %faultname_zero, %faultname_no ], [ %26, %faultname_ok ]
  %27 = load ptr, ptr %self, align 8
  %lo = load ptr, ptr %faultname, align 8
  %ptradd18 = getelementptr inbounds i8, ptr %faultname, i64 8
  %hi = load i64, ptr %ptradd18, align 8
  %28 = call i64 @std.io.Formatter.out_substr(ptr %retparam17, ptr %27, ptr %lo, i64 %hi), !dbg !2076
  %not_err19 = icmp eq i64 %28, 0, !dbg !2076
  %29 = call i1 @llvm.expect.i1(i1 %not_err19, i1 true), !dbg !2076
  br i1 %29, label %after_check21, label %assign_optional20, !dbg !2076

assign_optional20:                                ; preds = %faultname_exit
  store i64 %28, ptr %reterr10, align 8, !dbg !2076
  br label %err_retblock22, !dbg !2076

after_check21:                                    ; preds = %faultname_exit
  %30 = load i64, ptr %retparam17, align 8, !dbg !2076
  store i64 %30, ptr %0, align 8, !dbg !2076
  ret i64 0, !dbg !2076

err_retblock22:                                   ; preds = %assign_optional20
  %31 = load i64, ptr %reterr10, align 8, !dbg !2076
  ret i64 %31, !dbg !2076

switch.case23:                                    ; preds = %switch.entry, %switch.entry
  %32 = load ptr, ptr %arg, align 8, !dbg !2077
  %checknull25 = icmp eq ptr %32, null, !dbg !2077
  %33 = call i1 @llvm.expect.i1(i1 %checknull25, i1 false), !dbg !2077
  br i1 %33, label %panic26, label %checkok27, !dbg !2077

checkok27:                                        ; preds = %switch.case23
  %34 = ptrtoint ptr %32 to i64, !dbg !2077
  %35 = urem i64 %34, 8, !dbg !2077
  %36 = icmp ne i64 %35, 0, !dbg !2077
  %37 = call i1 @llvm.expect.i1(i1 %36, i1 false), !dbg !2077
  br i1 %37, label %panic28, label %checkok35, !dbg !2077

checkok35:                                        ; preds = %checkok27
  %38 = load ptr, ptr %self, align 8
  %lo37 = load i64, ptr %32, align 8
  %ptradd38 = getelementptr inbounds i8, ptr %32, i64 8
  %hi39 = load ptr, ptr %ptradd38, align 8
  %39 = call i64 @std.io.Formatter.out_str(ptr %retparam36, ptr %38, i64 %lo37, ptr %hi39), !dbg !2079
  %not_err40 = icmp eq i64 %39, 0, !dbg !2079
  %40 = call i1 @llvm.expect.i1(i1 %not_err40, i1 true), !dbg !2079
  br i1 %40, label %after_check42, label %assign_optional41, !dbg !2079

assign_optional41:                                ; preds = %checkok35
  store i64 %39, ptr %reterr24, align 8, !dbg !2079
  br label %err_retblock43, !dbg !2079

after_check42:                                    ; preds = %checkok35
  %41 = load i64, ptr %retparam36, align 8, !dbg !2079
  store i64 %41, ptr %0, align 8, !dbg !2079
  ret i64 0, !dbg !2079

err_retblock43:                                   ; preds = %assign_optional41
  %42 = load i64, ptr %reterr24, align 8, !dbg !2079
  ret i64 %42, !dbg !2079

switch.case44:                                    ; preds = %switch.entry
  store %"char[]" { ptr @.str.133, i64 30 }, ptr %string, align 8
  %lo45 = load ptr, ptr %string, align 8, !dbg !2080
  %ptradd46 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2080
  %hi47 = load i64, ptr %ptradd46, align 8, !dbg !2080
  store %"any[]" zeroinitializer, ptr %indirectarg48, align 8
  call void @std.core.builtin.panicf(ptr %lo45, i64 %hi47, ptr @.str.134, i64 12, ptr @.str.135, i64 17, i32 164, ptr byval(%"any[]") align 8 %indirectarg48), !dbg !2084
  unreachable, !dbg !2085

switch.case49:                                    ; preds = %switch.entry, %switch.entry
    #dbg_declare(ptr %flags, !2086, !DIExpression(), !2088)
  %43 = load ptr, ptr %self, align 8, !dbg !2089
  %ptradd50 = getelementptr inbounds i8, ptr %43, i64 16, !dbg !2089
  %44 = load i32, ptr %ptradd50, align 8, !dbg !2089
  store i32 %44, ptr %flags, align 4, !dbg !2089
    #dbg_declare(ptr %width, !2090, !DIExpression(), !2091)
  %45 = load ptr, ptr %self, align 8, !dbg !2092
  %ptradd51 = getelementptr inbounds i8, ptr %45, i64 16, !dbg !2092
  %ptradd52 = getelementptr inbounds i8, ptr %ptradd51, i64 4, !dbg !2092
  %46 = load i32, ptr %ptradd52, align 4, !dbg !2092
  store i32 %46, ptr %width, align 4, !dbg !2092
  %47 = load ptr, ptr %self, align 8, !dbg !2093
  %ptradd53 = getelementptr inbounds i8, ptr %47, i64 16, !dbg !2093
  store i32 0, ptr %ptradd53, align 8, !dbg !2093
  %48 = load ptr, ptr %self, align 8, !dbg !2094
  %ptradd54 = getelementptr inbounds i8, ptr %48, i64 16, !dbg !2094
  %ptradd55 = getelementptr inbounds i8, ptr %ptradd54, i64 4, !dbg !2094
  store i32 0, ptr %ptradd55, align 4, !dbg !2095
  %49 = load ptr, ptr %self, align 8
  %lo58 = load i64, ptr %arg, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %arg, i64 8
  %hi60 = load ptr, ptr %ptradd59, align 8
  %50 = call i64 @std.io.Formatter.ntoa_any(ptr %retparam57, ptr %49, i64 %lo58, ptr %hi60, i32 10), !dbg !2096
  %not_err61 = icmp eq i64 %50, 0, !dbg !2096
  %51 = call i1 @llvm.expect.i1(i1 %not_err61, i1 true), !dbg !2096
  br i1 %51, label %after_check62, label %else_block, !dbg !2096

after_check62:                                    ; preds = %switch.case49
  %52 = load i64, ptr %retparam57, align 8, !dbg !2096
  br label %phi_block, !dbg !2096

else_block:                                       ; preds = %switch.case49
  %53 = load ptr, ptr %self, align 8
  %54 = call i64 @std.io.Formatter.out_substr(ptr %retparam63, ptr %53, ptr @.str.136, i64 9), !dbg !2097
  %not_err64 = icmp eq i64 %54, 0, !dbg !2097
  %55 = call i1 @llvm.expect.i1(i1 %not_err64, i1 true), !dbg !2097
  br i1 %55, label %after_check66, label %assign_optional65, !dbg !2097

assign_optional65:                                ; preds = %else_block
  store i64 %54, ptr %reterr56, align 8, !dbg !2097
  br label %err_retblock70, !dbg !2097

after_check66:                                    ; preds = %else_block
  %56 = load i64, ptr %retparam63, align 8, !dbg !2097
  br label %phi_block, !dbg !2097

phi_block:                                        ; preds = %after_check66, %after_check62
  %val = phi i64 [ %52, %after_check62 ], [ %56, %after_check66 ], !dbg !2097
  %57 = load ptr, ptr %self, align 8, !dbg !2098
  %ptradd67 = getelementptr inbounds i8, ptr %57, i64 16, !dbg !2098
  %58 = load i32, ptr %flags, align 4, !dbg !2100
  store i32 %58, ptr %ptradd67, align 8, !dbg !2100
  %59 = load ptr, ptr %self, align 8, !dbg !2101
  %ptradd68 = getelementptr inbounds i8, ptr %59, i64 16, !dbg !2101
  %ptradd69 = getelementptr inbounds i8, ptr %ptradd68, i64 4, !dbg !2101
  %60 = load i32, ptr %width, align 4, !dbg !2102
  store i32 %60, ptr %ptradd69, align 4, !dbg !2102
  store i64 %val, ptr %0, align 8, !dbg !2102
  ret i64 0, !dbg !2102

err_retblock70:                                   ; preds = %assign_optional65
  %61 = load ptr, ptr %self, align 8, !dbg !2103
  %ptradd71 = getelementptr inbounds i8, ptr %61, i64 16, !dbg !2103
  %62 = load i32, ptr %flags, align 4, !dbg !2105
  store i32 %62, ptr %ptradd71, align 8, !dbg !2105
  %63 = load ptr, ptr %self, align 8, !dbg !2106
  %ptradd72 = getelementptr inbounds i8, ptr %63, i64 16, !dbg !2106
  %ptradd73 = getelementptr inbounds i8, ptr %ptradd72, i64 4, !dbg !2106
  %64 = load i32, ptr %width, align 4, !dbg !2107
  store i32 %64, ptr %ptradd73, align 4, !dbg !2107
  %65 = load i64, ptr %reterr56, align 8, !dbg !2107
  ret i64 %65, !dbg !2107

switch.case74:                                    ; preds = %switch.entry
    #dbg_declare(ptr %flags75, !2108, !DIExpression(), !2110)
  %66 = load ptr, ptr %self, align 8, !dbg !2111
  %ptradd76 = getelementptr inbounds i8, ptr %66, i64 16, !dbg !2111
  %67 = load i32, ptr %ptradd76, align 8, !dbg !2111
  store i32 %67, ptr %flags75, align 4, !dbg !2111
    #dbg_declare(ptr %width77, !2112, !DIExpression(), !2113)
  %68 = load ptr, ptr %self, align 8, !dbg !2114
  %ptradd78 = getelementptr inbounds i8, ptr %68, i64 16, !dbg !2114
  %ptradd79 = getelementptr inbounds i8, ptr %ptradd78, i64 4, !dbg !2114
  %69 = load i32, ptr %ptradd79, align 4, !dbg !2114
  store i32 %69, ptr %width77, align 4, !dbg !2114
  %70 = load ptr, ptr %self, align 8, !dbg !2115
  %ptradd80 = getelementptr inbounds i8, ptr %70, i64 16, !dbg !2115
  store i32 0, ptr %ptradd80, align 8, !dbg !2115
  %71 = load ptr, ptr %self, align 8, !dbg !2116
  %ptradd81 = getelementptr inbounds i8, ptr %71, i64 16, !dbg !2116
  %ptradd82 = getelementptr inbounds i8, ptr %ptradd81, i64 4, !dbg !2116
  store i32 0, ptr %ptradd82, align 4, !dbg !2117
  %lo85 = load i64, ptr %arg, align 8
  %ptradd86 = getelementptr inbounds i8, ptr %arg, i64 8
  %hi87 = load ptr, ptr %ptradd86, align 8
  %72 = call i64 @std.io.float_from_any(ptr %retparam84, i64 %lo85, ptr %hi87), !dbg !2118
  %not_err88 = icmp eq i64 %72, 0, !dbg !2118
  %73 = call i1 @llvm.expect.i1(i1 %not_err88, i1 true), !dbg !2118
  br i1 %73, label %after_check89, label %else_block93, !dbg !2118

after_check89:                                    ; preds = %switch.case74
  %74 = load ptr, ptr %self, align 8
  %75 = load double, ptr %retparam84, align 8
  %76 = call i64 @std.io.Formatter.ftoa(ptr %retparam90, ptr %74, double %75), !dbg !2119
  %not_err91 = icmp eq i64 %76, 0, !dbg !2119
  %77 = call i1 @llvm.expect.i1(i1 %not_err91, i1 true), !dbg !2119
  br i1 %77, label %after_check92, label %else_block93, !dbg !2119

after_check92:                                    ; preds = %after_check89
  %78 = load i64, ptr %retparam90, align 8, !dbg !2119
  br label %phi_block98, !dbg !2119

else_block93:                                     ; preds = %after_check89, %switch.case74
  %79 = load ptr, ptr %self, align 8
  %80 = call i64 @std.io.Formatter.out_substr(ptr %retparam94, ptr %79, ptr @.str.137, i64 3), !dbg !2120
  %not_err95 = icmp eq i64 %80, 0, !dbg !2120
  %81 = call i1 @llvm.expect.i1(i1 %not_err95, i1 true), !dbg !2120
  br i1 %81, label %after_check97, label %assign_optional96, !dbg !2120

assign_optional96:                                ; preds = %else_block93
  store i64 %80, ptr %reterr83, align 8, !dbg !2120
  br label %err_retblock103, !dbg !2120

after_check97:                                    ; preds = %else_block93
  %82 = load i64, ptr %retparam94, align 8, !dbg !2120
  br label %phi_block98, !dbg !2120

phi_block98:                                      ; preds = %after_check97, %after_check92
  %val99 = phi i64 [ %78, %after_check92 ], [ %82, %after_check97 ], !dbg !2120
  %83 = load ptr, ptr %self, align 8, !dbg !2121
  %ptradd100 = getelementptr inbounds i8, ptr %83, i64 16, !dbg !2121
  %84 = load i32, ptr %flags75, align 4, !dbg !2123
  store i32 %84, ptr %ptradd100, align 8, !dbg !2123
  %85 = load ptr, ptr %self, align 8, !dbg !2124
  %ptradd101 = getelementptr inbounds i8, ptr %85, i64 16, !dbg !2124
  %ptradd102 = getelementptr inbounds i8, ptr %ptradd101, i64 4, !dbg !2124
  %86 = load i32, ptr %width77, align 4, !dbg !2125
  store i32 %86, ptr %ptradd102, align 4, !dbg !2125
  store i64 %val99, ptr %0, align 8, !dbg !2125
  ret i64 0, !dbg !2125

err_retblock103:                                  ; preds = %assign_optional96
  %87 = load ptr, ptr %self, align 8, !dbg !2126
  %ptradd104 = getelementptr inbounds i8, ptr %87, i64 16, !dbg !2126
  %88 = load i32, ptr %flags75, align 4, !dbg !2128
  store i32 %88, ptr %ptradd104, align 8, !dbg !2128
  %89 = load ptr, ptr %self, align 8, !dbg !2129
  %ptradd105 = getelementptr inbounds i8, ptr %89, i64 16, !dbg !2129
  %ptradd106 = getelementptr inbounds i8, ptr %ptradd105, i64 4, !dbg !2129
  %90 = load i32, ptr %width77, align 4, !dbg !2130
  store i32 %90, ptr %ptradd106, align 4, !dbg !2130
  %91 = load i64, ptr %reterr83, align 8, !dbg !2130
  ret i64 %91, !dbg !2130

switch.case107:                                   ; preds = %switch.entry
  %92 = load ptr, ptr %arg, align 8, !dbg !2131
  %checknull109 = icmp eq ptr %92, null, !dbg !2131
  %93 = call i1 @llvm.expect.i1(i1 %checknull109, i1 false), !dbg !2131
  br i1 %93, label %panic110, label %checkok111, !dbg !2131

checkok111:                                       ; preds = %switch.case107
  %94 = load i8, ptr %92, align 1, !dbg !2133
  %95 = trunc i8 %94 to i1, !dbg !2133
  %ternary = select i1 %95, %"char[]" { ptr @.str.139, i64 4 }, %"char[]" { ptr @.str.140, i64 5 }, !dbg !2134
  %96 = load ptr, ptr %self, align 8
  %97 = extractvalue %"char[]" %ternary, 0
  %98 = extractvalue %"char[]" %ternary, 1
  %99 = call i64 @std.io.Formatter.out_substr(ptr %retparam112, ptr %96, ptr %97, i64 %98), !dbg !2135
  %not_err113 = icmp eq i64 %99, 0, !dbg !2135
  %100 = call i1 @llvm.expect.i1(i1 %not_err113, i1 true), !dbg !2135
  br i1 %100, label %after_check115, label %assign_optional114, !dbg !2135

assign_optional114:                               ; preds = %checkok111
  store i64 %99, ptr %reterr108, align 8, !dbg !2135
  br label %err_retblock116, !dbg !2135

after_check115:                                   ; preds = %checkok111
  %101 = load i64, ptr %retparam112, align 8, !dbg !2135
  store i64 %101, ptr %0, align 8, !dbg !2135
  ret i64 0, !dbg !2135

err_retblock116:                                  ; preds = %assign_optional114
  %102 = load i64, ptr %reterr108, align 8, !dbg !2135
  ret i64 %102, !dbg !2135

switch.exit:                                      ; preds = %switch.entry
    #dbg_declare(ptr %n, !2136, !DIExpression(), !2137)
  %103 = load %any, ptr %arg, align 8, !dbg !2138
  %104 = load ptr, ptr %self, align 8
  store %any %103, ptr %taddr118, align 8
  %lo119 = load i64, ptr %taddr118, align 8
  %ptradd120 = getelementptr inbounds i8, ptr %taddr118, i64 8
  %hi121 = load ptr, ptr %ptradd120, align 8
  %105 = call i64 @std.io.Formatter.print_with_function(ptr %retparam117, ptr %104, i64 %lo119, ptr %hi121), !dbg !2139
  %not_err122 = icmp eq i64 %105, 0, !dbg !2139
  %106 = call i1 @llvm.expect.i1(i1 %not_err122, i1 true), !dbg !2139
  br i1 %106, label %after_check124, label %assign_optional123, !dbg !2139

assign_optional123:                               ; preds = %switch.exit
  store i64 %105, ptr %n.f, align 8, !dbg !2139
  br label %after_assign, !dbg !2139

after_check124:                                   ; preds = %switch.exit
  %107 = load i64, ptr %retparam117, align 8, !dbg !2139
  store i64 %107, ptr %n, align 8, !dbg !2139
  store i64 0, ptr %n.f, align 8, !dbg !2139
  br label %after_assign, !dbg !2139

after_assign:                                     ; preds = %after_check124, %assign_optional123
  %load.err = load i64, ptr %n.f, align 8, !dbg !2140
  %result = icmp eq i64 %load.err, 0, !dbg !2140
  br i1 %result, label %if.then, label %if.exit, !dbg !2140

if.then:                                          ; preds = %after_assign
  %108 = load i64, ptr %n, align 8, !dbg !2141
  store i64 %108, ptr %0, align 8, !dbg !2141
  ret i64 0, !dbg !2141

if.exit:                                          ; preds = %after_assign
    #dbg_declare(ptr %f, !2142, !DIExpression(), !2144)
  br label %testblock, !dbg !2144

testblock:                                        ; preds = %if.exit
  %optval = load i64, ptr %n.f, align 8, !dbg !2146
  %not_err126 = icmp eq i64 %optval, 0, !dbg !2146
  %109 = call i1 @llvm.expect.i1(i1 %not_err126, i1 true), !dbg !2146
  br i1 %109, label %after_check128, label %assign_optional127, !dbg !2146

assign_optional127:                               ; preds = %testblock
  store i64 %optval, ptr %f, align 8, !dbg !2146
  br label %end_block, !dbg !2146

after_check128:                                   ; preds = %testblock
  store i64 0, ptr %f, align 8, !dbg !2146
  br label %end_block, !dbg !2146

end_block:                                        ; preds = %after_check128, %assign_optional127
  %110 = load i64, ptr %f, align 8, !dbg !2146
  %i2b = icmp ne i64 %110, 0, !dbg !2146
  br i1 %i2b, label %if.then129, label %if.exit130, !dbg !2146

if.then129:                                       ; preds = %end_block
  %111 = load i64, ptr %f, align 8, !dbg !2147
  store i64 %111, ptr %blockret, align 8, !dbg !2147
  br label %expr_block.exit, !dbg !2147

if.exit130:                                       ; preds = %end_block
  store i64 0, ptr %blockret, align 8, !dbg !2148
  br label %expr_block.exit, !dbg !2148

expr_block.exit:                                  ; preds = %if.exit130, %if.then129
  %112 = load i64, ptr %blockret, align 8, !dbg !2148
  %neq = icmp ne i64 %112, ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !2145
  br i1 %neq, label %if.then131, label %if.exit136, !dbg !2145

if.then131:                                       ; preds = %expr_block.exit
  %optval132 = load i64, ptr %n.f, align 8, !dbg !2149
  %not_err133 = icmp eq i64 %optval132, 0, !dbg !2149
  %113 = call i1 @llvm.expect.i1(i1 %not_err133, i1 true), !dbg !2149
  br i1 %113, label %after_check135, label %assign_optional134, !dbg !2149

assign_optional134:                               ; preds = %if.then131
  store i64 %optval132, ptr %error_var, align 8, !dbg !2149
  br label %guard_block, !dbg !2149

after_check135:                                   ; preds = %if.then131
  br label %noerr_block, !dbg !2149

guard_block:                                      ; preds = %assign_optional134
  %114 = load i64, ptr %error_var, align 8, !dbg !2149
  ret i64 %114, !dbg !2149

noerr_block:                                      ; preds = %after_check135
  br label %if.exit136, !dbg !2149

if.exit136:                                       ; preds = %noerr_block, %expr_block.exit
  %ptradd137 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !2150
  %115 = load i64, ptr %ptradd137, align 8, !dbg !2150
  %"introspect*138" = inttoptr i64 %115 to ptr, !dbg !2150
  %typeid.kind139 = load i8, ptr %"introspect*138", align 8, !dbg !2150
  store i8 %typeid.kind139, ptr %switch140, align 1
  br label %switch.entry141

switch.entry141:                                  ; preds = %if.exit136
  %116 = load i8, ptr %switch140, align 1
  switch i8 %116, label %switch.exit1219 [
    i8 8, label %switch.case142
    i8 10, label %switch.case553
    i8 11, label %switch.case560
    i8 12, label %switch.case567
    i8 13, label %switch.case574
    i8 18, label %switch.case581
    i8 19, label %switch.case734
    i8 15, label %switch.case861
    i8 17, label %switch.case969
    i8 16, label %switch.case1085
    i8 7, label %switch.case1213
    i8 20, label %switch.case1213
  ]

switch.case142:                                   ; preds = %switch.entry141
    #dbg_declare(ptr %i, !2152, !DIExpression(), !2154)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %v, ptr align 8 %arg, i32 16, i1 false)
  %117 = call i8 @std.core.types.TypeKind.is_int(i8 zeroext 3) #6, !dbg !2155
  %118 = trunc i8 %117 to i1, !dbg !2155
  br i1 %118, label %assert_ok, label %assert_fail, !dbg !2155

assert_fail:                                      ; preds = %switch.case142
  %119 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2155
  call void %119(ptr @.panic_msg.141, i64 69, ptr @.file.142, i64 8, ptr @.func.128, i64 7, i32 13) #5, !dbg !2155
  unreachable, !dbg !2155

assert_ok:                                        ; preds = %switch.case142
  %ptradd145 = getelementptr inbounds i8, ptr %v, i64 8, !dbg !2160
  %120 = load i64, ptr %ptradd145, align 8, !dbg !2160
  %"introspect*146" = inttoptr i64 %120 to ptr, !dbg !2160
  %typeid.kind147 = load i8, ptr %"introspect*146", align 8, !dbg !2160
  %eq148 = icmp eq i8 %typeid.kind147, 8, !dbg !2160
  br i1 %eq148, label %assert_ok150, label %assert_fail149, !dbg !2160

assert_fail149:                                   ; preds = %assert_ok
  %121 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2160
  call void %121(ptr @.panic_msg.143, i64 67, ptr @.file.142, i64 8, ptr @.func.128, i64 7, i32 14) #5, !dbg !2160
  unreachable, !dbg !2160

assert_ok150:                                     ; preds = %assert_ok
  store ptr %v, ptr %self151, align 8
  %122 = load ptr, ptr %self151, align 8, !dbg !2161
  %checknull152 = icmp eq ptr %122, null, !dbg !2161
  %123 = call i1 @llvm.expect.i1(i1 %checknull152, i1 false), !dbg !2161
  br i1 %123, label %panic153, label %checkok154, !dbg !2161

checkok154:                                       ; preds = %assert_ok150
  %124 = ptrtoint ptr %122 to i64, !dbg !2161
  %125 = urem i64 %124, 8, !dbg !2161
  %126 = icmp ne i64 %125, 0, !dbg !2161
  %127 = call i1 @llvm.expect.i1(i1 %126, i1 false), !dbg !2161
  br i1 %127, label %panic155, label %checkok162, !dbg !2161

checkok162:                                       ; preds = %checkok154
  %128 = load ptr, ptr %122, align 8, !dbg !2161
  %129 = load ptr, ptr %self151, align 8, !dbg !2164
  %checknull163 = icmp eq ptr %129, null, !dbg !2164
  %130 = call i1 @llvm.expect.i1(i1 %checknull163, i1 false), !dbg !2164
  br i1 %130, label %panic164, label %checkok165, !dbg !2164

checkok165:                                       ; preds = %checkok162
  %131 = ptrtoint ptr %129 to i64, !dbg !2164
  %132 = urem i64 %131, 8, !dbg !2164
  %133 = icmp ne i64 %132, 0, !dbg !2164
  %134 = call i1 @llvm.expect.i1(i1 %133, i1 false), !dbg !2164
  br i1 %134, label %panic166, label %checkok173, !dbg !2164

checkok173:                                       ; preds = %checkok165
  %ptradd174 = getelementptr inbounds i8, ptr %129, i64 8, !dbg !2164
  %135 = load i64, ptr %ptradd174, align 8, !dbg !2164
  %"introspect*175" = inttoptr i64 %135 to ptr, !dbg !2164
  %typeid.kind176 = load i8, ptr %"introspect*175", align 8, !dbg !2164
  %eq177 = icmp eq i8 %typeid.kind176, 15, !dbg !2164
  br i1 %eq177, label %check_type_ok, label %check_next, !dbg !2164

check_next:                                       ; preds = %checkok173
  %eq178 = icmp eq i8 %typeid.kind176, 19, !dbg !2164
  br i1 %eq178, label %check_type_ok, label %check_next179, !dbg !2164

check_next179:                                    ; preds = %check_next
  %eq180 = icmp eq i8 %typeid.kind176, 17, !dbg !2164
  br i1 %eq180, label %check_type_ok, label %check_next181, !dbg !2164

check_next181:                                    ; preds = %check_next179
  %eq182 = icmp eq i8 %typeid.kind176, 8, !dbg !2164
  br i1 %eq182, label %check_type_ok, label %check_next183, !dbg !2164

check_next183:                                    ; preds = %check_next181
  %eq184 = icmp eq i8 %typeid.kind176, 16, !dbg !2164
  br i1 %eq184, label %check_type_ok, label %check_next185, !dbg !2164

check_next185:                                    ; preds = %check_next183
  %eq186 = icmp eq i8 %typeid.kind176, 18, !dbg !2164
  br i1 %eq186, label %check_type_ok, label %check_next187, !dbg !2164

check_next187:                                    ; preds = %check_next185
  %eq188 = icmp eq i8 %typeid.kind176, 14, !dbg !2164
  br i1 %eq188, label %check_type_ok, label %check_next189, !dbg !2164

check_next189:                                    ; preds = %check_next187
  %eq190 = icmp eq i8 %typeid.kind176, 12, !dbg !2164
  br i1 %eq190, label %check_type_ok, label %check_next191, !dbg !2164

check_next191:                                    ; preds = %check_next189
  %136 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2164
  call void %136(ptr @.panic_msg.144, i64 49, ptr @.file.50, i64 10, ptr @.func.128, i64 7, i32 199) #5, !dbg !2164
  unreachable, !dbg !2164

check_type_ok:                                    ; preds = %check_next189, %check_next187, %check_next185, %check_next183, %check_next181, %check_next179, %check_next, %checkok173
  %ptradd192 = getelementptr inbounds i8, ptr %"introspect*175", i64 32, !dbg !2164
  %typeid.inner = load i64, ptr %ptradd192, align 8, !dbg !2164
  %137 = insertvalue %any undef, ptr %128, 0, !dbg !2164
  %138 = insertvalue %any %137, i64 %typeid.inner, 1, !dbg !2164
  store %any %138, ptr %v193, align 8
  %139 = call i8 @std.core.types.TypeKind.is_int(i8 zeroext 3) #6, !dbg !2165
  %140 = trunc i8 %139 to i1, !dbg !2165
  br i1 %140, label %assert_ok196, label %assert_fail195, !dbg !2165

assert_fail195:                                   ; preds = %check_type_ok
  %141 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2165
  call void %141(ptr @.panic_msg.141, i64 69, ptr @.file.142, i64 8, ptr @.func.128, i64 7, i32 22) #5, !dbg !2165
  unreachable, !dbg !2165

assert_ok196:                                     ; preds = %check_type_ok
  %ptradd197 = getelementptr inbounds i8, ptr %v193, i64 8, !dbg !2169
  %142 = load i64, ptr %ptradd197, align 8, !dbg !2169
  %"introspect*198" = inttoptr i64 %142 to ptr, !dbg !2169
  %typeid.kind199 = load i8, ptr %"introspect*198", align 8, !dbg !2169
  %143 = call i8 @std.core.types.TypeKind.is_int(i8 zeroext %typeid.kind199) #6, !dbg !2169
  %144 = trunc i8 %143 to i1, !dbg !2169
  br i1 %144, label %assert_ok201, label %assert_fail200, !dbg !2169

assert_fail200:                                   ; preds = %assert_ok196
  %145 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2169
  call void %145(ptr @.panic_msg.145, i64 71, ptr @.file.142, i64 8, ptr @.func.128, i64 7, i32 23) #5, !dbg !2169
  unreachable, !dbg !2169

assert_ok201:                                     ; preds = %assert_ok196
    #dbg_declare(ptr %any_type, !2170, !DIExpression(), !2171)
  %ptradd202 = getelementptr inbounds i8, ptr %v193, i64 8, !dbg !2172
  %146 = load i64, ptr %ptradd202, align 8, !dbg !2172
  store i64 %146, ptr %any_type, align 8, !dbg !2172
    #dbg_declare(ptr %kind, !2173, !DIExpression(), !2174)
  %147 = load i64, ptr %any_type, align 8, !dbg !2175
  %"introspect*203" = inttoptr i64 %147 to ptr, !dbg !2175
  %typeid.kind204 = load i8, ptr %"introspect*203", align 8, !dbg !2175
  store i8 %typeid.kind204, ptr %kind, align 1, !dbg !2175
    #dbg_declare(ptr %is_mixed_signed, !2176, !DIExpression(), !2177)
  %148 = load i64, ptr %any_type, align 8, !dbg !2178
  %"introspect*205" = inttoptr i64 %148 to ptr, !dbg !2178
  %typeid.kind206 = load i8, ptr %"introspect*205", align 8, !dbg !2178
  %neq207 = icmp ne i8 3, %typeid.kind206, !dbg !2179
  %149 = zext i1 %neq207 to i8, !dbg !2179
  store i8 %149, ptr %is_mixed_signed, align 1, !dbg !2179
    #dbg_declare(ptr %max, !2180, !DIExpression(), !2181)
  store i64 -1, ptr %max, align 8, !dbg !2182
    #dbg_declare(ptr %min, !2183, !DIExpression(), !2184)
  store i64 0, ptr %min, align 8, !dbg !2185
  %150 = load i64, ptr %any_type, align 8
  store i64 %150, ptr %switch208, align 8
  br label %switch.entry209

switch.entry209:                                  ; preds = %assert_ok201
  %151 = load i64, ptr %switch208, align 8
  br label %check_subtype, !dbg !2186

check_subtype:                                    ; preds = %parent_type_block, %switch.entry209
  %152 = phi i64 [ %151, %switch.entry209 ], [ %typeid.parent, %parent_type_block ], !dbg !2186
  %eq210 = icmp eq i64 ptrtoint (ptr @"$ct.ichar" to i64), %152, !dbg !2186
  br i1 %eq210, label %result_block, label %parent_type_block, !dbg !2186

parent_type_block:                                ; preds = %check_subtype
  %153 = inttoptr i64 %152 to ptr, !dbg !2186
  %ptradd211 = getelementptr inbounds i8, ptr %153, i64 8, !dbg !2186
  %typeid.parent = load i64, ptr %ptradd211, align 8, !dbg !2186
  %154 = icmp eq i64 %typeid.parent, 0, !dbg !2186
  br i1 %154, label %result_block, label %check_subtype, !dbg !2186

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %155 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !2186
  br i1 %155, label %switch.case212, label %next_if, !dbg !2186

switch.case212:                                   ; preds = %result_block
    #dbg_declare(ptr %c, !2188, !DIExpression(), !2191)
  %156 = load ptr, ptr %v193, align 8, !dbg !2192
  %checknull213 = icmp eq ptr %156, null, !dbg !2192
  %157 = call i1 @llvm.expect.i1(i1 %checknull213, i1 false), !dbg !2192
  br i1 %157, label %panic214, label %checkok215, !dbg !2192

checkok215:                                       ; preds = %switch.case212
  %158 = load i8, ptr %156, align 1, !dbg !2193
  store i8 %158, ptr %c, align 1, !dbg !2193
  %159 = load i8, ptr %is_mixed_signed, align 1, !dbg !2194
  %160 = trunc i8 %159 to i1, !dbg !2194
  br i1 %160, label %and.rhs, label %and.phi, !dbg !2194

and.rhs:                                          ; preds = %checkok215
  %161 = load i8, ptr %c, align 1, !dbg !2195
  %sext = sext i8 %161 to i32, !dbg !2195
  %lt = icmp slt i32 %sext, 0, !dbg !2195
  br label %and.phi, !dbg !2195

and.phi:                                          ; preds = %and.rhs, %checkok215
  %val216 = phi i1 [ false, %checkok215 ], [ %lt, %and.rhs ], !dbg !2195
  br i1 %val216, label %if.then217, label %if.exit218, !dbg !2195

if.then217:                                       ; preds = %and.phi
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %error_var143, align 8, !dbg !2196
  br label %panic_block, !dbg !2196

if.exit218:                                       ; preds = %and.phi
  %162 = load i8, ptr %c, align 1, !dbg !2197
  %sext219 = sext i8 %162 to i64, !dbg !2197
  store i64 %sext219, ptr %blockret194, align 8, !dbg !2197
  br label %expr_block.exit508, !dbg !2197

next_if:                                          ; preds = %result_block
  br label %check_subtype220, !dbg !2198

check_subtype220:                                 ; preds = %parent_type_block222, %next_if
  %163 = phi i64 [ %151, %next_if ], [ %typeid.parent224, %parent_type_block222 ], !dbg !2198
  %eq221 = icmp eq i64 ptrtoint (ptr @"$ct.short" to i64), %163, !dbg !2198
  br i1 %eq221, label %result_block225, label %parent_type_block222, !dbg !2198

parent_type_block222:                             ; preds = %check_subtype220
  %164 = inttoptr i64 %163 to ptr, !dbg !2198
  %ptradd223 = getelementptr inbounds i8, ptr %164, i64 8, !dbg !2198
  %typeid.parent224 = load i64, ptr %ptradd223, align 8, !dbg !2198
  %165 = icmp eq i64 %typeid.parent224, 0, !dbg !2198
  br i1 %165, label %result_block225, label %check_subtype220, !dbg !2198

result_block225:                                  ; preds = %parent_type_block222, %check_subtype220
  %166 = phi i1 [ false, %parent_type_block222 ], [ true, %check_subtype220 ], !dbg !2198
  br i1 %166, label %switch.case226, label %next_if253, !dbg !2198

switch.case226:                                   ; preds = %result_block225
    #dbg_declare(ptr %s, !2199, !DIExpression(), !2202)
  %167 = load ptr, ptr %v193, align 8, !dbg !2203
  %checknull227 = icmp eq ptr %167, null, !dbg !2203
  %168 = call i1 @llvm.expect.i1(i1 %checknull227, i1 false), !dbg !2203
  br i1 %168, label %panic228, label %checkok229, !dbg !2203

checkok229:                                       ; preds = %switch.case226
  %169 = ptrtoint ptr %167 to i64, !dbg !2204
  %170 = urem i64 %169, 2, !dbg !2204
  %171 = icmp ne i64 %170, 0, !dbg !2204
  %172 = call i1 @llvm.expect.i1(i1 %171, i1 false), !dbg !2204
  br i1 %172, label %panic230, label %checkok237, !dbg !2204

checkok237:                                       ; preds = %checkok229
  %173 = load i16, ptr %167, align 2, !dbg !2204
  store i16 %173, ptr %s, align 2, !dbg !2204
  %174 = load i8, ptr %is_mixed_signed, align 1, !dbg !2205
  %175 = trunc i8 %174 to i1, !dbg !2205
  br i1 %175, label %and.rhs238, label %and.phi241, !dbg !2205

and.rhs238:                                       ; preds = %checkok237
  %176 = load i16, ptr %s, align 2, !dbg !2206
  %sext239 = sext i16 %176 to i32, !dbg !2206
  %lt240 = icmp slt i32 %sext239, 0, !dbg !2206
  br label %and.phi241, !dbg !2206

and.phi241:                                       ; preds = %and.rhs238, %checkok237
  %val242 = phi i1 [ false, %checkok237 ], [ %lt240, %and.rhs238 ], !dbg !2206
  br i1 %val242, label %if.then243, label %if.exit244, !dbg !2206

if.then243:                                       ; preds = %and.phi241
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %error_var143, align 8, !dbg !2207
  br label %panic_block, !dbg !2207

if.exit244:                                       ; preds = %and.phi241
  %177 = load i16, ptr %s, align 2, !dbg !2208
  %sext245 = sext i16 %177 to i64, !dbg !2208
  %178 = load i64, ptr %max, align 8, !dbg !2209
  %gt = icmp sgt i64 %sext245, %178, !dbg !2208
  %check = icmp sge i64 %178, 0, !dbg !2208
  %siui-gt = and i1 %check, %gt, !dbg !2208
  br i1 %siui-gt, label %or.phi, label %or.rhs, !dbg !2208

or.rhs:                                           ; preds = %if.exit244
  %179 = load i16, ptr %s, align 2, !dbg !2210
  %sext246 = sext i16 %179 to i64, !dbg !2210
  %180 = load i64, ptr %min, align 8, !dbg !2211
  %lt247 = icmp slt i64 %sext246, %180, !dbg !2210
  %check248 = icmp slt i64 %180, 0, !dbg !2210
  %siui-lt = or i1 %check248, %lt247, !dbg !2210
  br label %or.phi, !dbg !2210

or.phi:                                           ; preds = %or.rhs, %if.exit244
  %val249 = phi i1 [ true, %if.exit244 ], [ %siui-lt, %or.rhs ], !dbg !2210
  br i1 %val249, label %if.then250, label %if.exit251, !dbg !2210

if.then250:                                       ; preds = %or.phi
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var143, align 8, !dbg !2212
  br label %panic_block, !dbg !2212

if.exit251:                                       ; preds = %or.phi
  %181 = load i16, ptr %s, align 2, !dbg !2213
  %sext252 = sext i16 %181 to i64, !dbg !2213
  store i64 %sext252, ptr %blockret194, align 8, !dbg !2213
  br label %expr_block.exit508, !dbg !2213

next_if253:                                       ; preds = %result_block225
  br label %check_subtype254, !dbg !2214

check_subtype254:                                 ; preds = %parent_type_block256, %next_if253
  %182 = phi i64 [ %151, %next_if253 ], [ %typeid.parent258, %parent_type_block256 ], !dbg !2214
  %eq255 = icmp eq i64 ptrtoint (ptr @"$ct.int" to i64), %182, !dbg !2214
  br i1 %eq255, label %result_block259, label %parent_type_block256, !dbg !2214

parent_type_block256:                             ; preds = %check_subtype254
  %183 = inttoptr i64 %182 to ptr, !dbg !2214
  %ptradd257 = getelementptr inbounds i8, ptr %183, i64 8, !dbg !2214
  %typeid.parent258 = load i64, ptr %ptradd257, align 8, !dbg !2214
  %184 = icmp eq i64 %typeid.parent258, 0, !dbg !2214
  br i1 %184, label %result_block259, label %check_subtype254, !dbg !2214

result_block259:                                  ; preds = %parent_type_block256, %check_subtype254
  %185 = phi i1 [ false, %parent_type_block256 ], [ true, %check_subtype254 ], !dbg !2214
  br i1 %185, label %switch.case260, label %next_if293, !dbg !2214

switch.case260:                                   ; preds = %result_block259
    #dbg_declare(ptr %i261, !2215, !DIExpression(), !2217)
  %186 = load ptr, ptr %v193, align 8, !dbg !2218
  %checknull262 = icmp eq ptr %186, null, !dbg !2218
  %187 = call i1 @llvm.expect.i1(i1 %checknull262, i1 false), !dbg !2218
  br i1 %187, label %panic263, label %checkok264, !dbg !2218

checkok264:                                       ; preds = %switch.case260
  %188 = ptrtoint ptr %186 to i64, !dbg !2219
  %189 = urem i64 %188, 4, !dbg !2219
  %190 = icmp ne i64 %189, 0, !dbg !2219
  %191 = call i1 @llvm.expect.i1(i1 %190, i1 false), !dbg !2219
  br i1 %191, label %panic265, label %checkok272, !dbg !2219

checkok272:                                       ; preds = %checkok264
  %192 = load i32, ptr %186, align 4, !dbg !2219
  store i32 %192, ptr %i261, align 4, !dbg !2219
  %193 = load i8, ptr %is_mixed_signed, align 1, !dbg !2220
  %194 = trunc i8 %193 to i1, !dbg !2220
  br i1 %194, label %and.rhs273, label %and.phi275, !dbg !2220

and.rhs273:                                       ; preds = %checkok272
  %195 = load i32, ptr %i261, align 4, !dbg !2221
  %lt274 = icmp slt i32 %195, 0, !dbg !2221
  br label %and.phi275, !dbg !2221

and.phi275:                                       ; preds = %and.rhs273, %checkok272
  %val276 = phi i1 [ false, %checkok272 ], [ %lt274, %and.rhs273 ], !dbg !2221
  br i1 %val276, label %if.then277, label %if.exit278, !dbg !2221

if.then277:                                       ; preds = %and.phi275
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %error_var143, align 8, !dbg !2222
  br label %panic_block, !dbg !2222

if.exit278:                                       ; preds = %and.phi275
  %196 = load i32, ptr %i261, align 4, !dbg !2223
  %sext279 = sext i32 %196 to i64, !dbg !2223
  %197 = load i64, ptr %max, align 8, !dbg !2224
  %gt280 = icmp sgt i64 %sext279, %197, !dbg !2223
  %check281 = icmp sge i64 %197, 0, !dbg !2223
  %siui-gt282 = and i1 %check281, %gt280, !dbg !2223
  br i1 %siui-gt282, label %or.phi288, label %or.rhs283, !dbg !2223

or.rhs283:                                        ; preds = %if.exit278
  %198 = load i32, ptr %i261, align 4, !dbg !2225
  %sext284 = sext i32 %198 to i64, !dbg !2225
  %199 = load i64, ptr %min, align 8, !dbg !2226
  %lt285 = icmp slt i64 %sext284, %199, !dbg !2225
  %check286 = icmp slt i64 %199, 0, !dbg !2225
  %siui-lt287 = or i1 %check286, %lt285, !dbg !2225
  br label %or.phi288, !dbg !2225

or.phi288:                                        ; preds = %or.rhs283, %if.exit278
  %val289 = phi i1 [ true, %if.exit278 ], [ %siui-lt287, %or.rhs283 ], !dbg !2225
  br i1 %val289, label %if.then290, label %if.exit291, !dbg !2225

if.then290:                                       ; preds = %or.phi288
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var143, align 8, !dbg !2227
  br label %panic_block, !dbg !2227

if.exit291:                                       ; preds = %or.phi288
  %200 = load i32, ptr %i261, align 4, !dbg !2228
  %sext292 = sext i32 %200 to i64, !dbg !2228
  store i64 %sext292, ptr %blockret194, align 8, !dbg !2228
  br label %expr_block.exit508, !dbg !2228

next_if293:                                       ; preds = %result_block259
  br label %check_subtype294, !dbg !2229

check_subtype294:                                 ; preds = %parent_type_block296, %next_if293
  %201 = phi i64 [ %151, %next_if293 ], [ %typeid.parent298, %parent_type_block296 ], !dbg !2229
  %eq295 = icmp eq i64 ptrtoint (ptr @"$ct.long" to i64), %201, !dbg !2229
  br i1 %eq295, label %result_block299, label %parent_type_block296, !dbg !2229

parent_type_block296:                             ; preds = %check_subtype294
  %202 = inttoptr i64 %201 to ptr, !dbg !2229
  %ptradd297 = getelementptr inbounds i8, ptr %202, i64 8, !dbg !2229
  %typeid.parent298 = load i64, ptr %ptradd297, align 8, !dbg !2229
  %203 = icmp eq i64 %typeid.parent298, 0, !dbg !2229
  br i1 %203, label %result_block299, label %check_subtype294, !dbg !2229

result_block299:                                  ; preds = %parent_type_block296, %check_subtype294
  %204 = phi i1 [ false, %parent_type_block296 ], [ true, %check_subtype294 ], !dbg !2229
  br i1 %204, label %switch.case300, label %next_if329, !dbg !2229

switch.case300:                                   ; preds = %result_block299
    #dbg_declare(ptr %l, !2230, !DIExpression(), !2232)
  %205 = load ptr, ptr %v193, align 8, !dbg !2233
  %checknull301 = icmp eq ptr %205, null, !dbg !2233
  %206 = call i1 @llvm.expect.i1(i1 %checknull301, i1 false), !dbg !2233
  br i1 %206, label %panic302, label %checkok303, !dbg !2233

checkok303:                                       ; preds = %switch.case300
  %207 = ptrtoint ptr %205 to i64, !dbg !2234
  %208 = urem i64 %207, 8, !dbg !2234
  %209 = icmp ne i64 %208, 0, !dbg !2234
  %210 = call i1 @llvm.expect.i1(i1 %209, i1 false), !dbg !2234
  br i1 %210, label %panic304, label %checkok311, !dbg !2234

checkok311:                                       ; preds = %checkok303
  %211 = load i64, ptr %205, align 8, !dbg !2234
  store i64 %211, ptr %l, align 8, !dbg !2234
  %212 = load i8, ptr %is_mixed_signed, align 1, !dbg !2235
  %213 = trunc i8 %212 to i1, !dbg !2235
  br i1 %213, label %and.rhs312, label %and.phi314, !dbg !2235

and.rhs312:                                       ; preds = %checkok311
  %214 = load i64, ptr %l, align 8, !dbg !2236
  %lt313 = icmp slt i64 %214, 0, !dbg !2236
  br label %and.phi314, !dbg !2236

and.phi314:                                       ; preds = %and.rhs312, %checkok311
  %val315 = phi i1 [ false, %checkok311 ], [ %lt313, %and.rhs312 ], !dbg !2236
  br i1 %val315, label %if.then316, label %if.exit317, !dbg !2236

if.then316:                                       ; preds = %and.phi314
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %error_var143, align 8, !dbg !2237
  br label %panic_block, !dbg !2237

if.exit317:                                       ; preds = %and.phi314
  %215 = load i64, ptr %l, align 8, !dbg !2238
  %216 = load i64, ptr %max, align 8, !dbg !2239
  %gt318 = icmp sgt i64 %215, %216, !dbg !2238
  %check319 = icmp sge i64 %216, 0, !dbg !2238
  %siui-gt320 = and i1 %check319, %gt318, !dbg !2238
  br i1 %siui-gt320, label %or.phi325, label %or.rhs321, !dbg !2238

or.rhs321:                                        ; preds = %if.exit317
  %217 = load i64, ptr %l, align 8, !dbg !2240
  %218 = load i64, ptr %min, align 8, !dbg !2241
  %lt322 = icmp slt i64 %217, %218, !dbg !2240
  %check323 = icmp slt i64 %218, 0, !dbg !2240
  %siui-lt324 = or i1 %check323, %lt322, !dbg !2240
  br label %or.phi325, !dbg !2240

or.phi325:                                        ; preds = %or.rhs321, %if.exit317
  %val326 = phi i1 [ true, %if.exit317 ], [ %siui-lt324, %or.rhs321 ], !dbg !2240
  br i1 %val326, label %if.then327, label %if.exit328, !dbg !2240

if.then327:                                       ; preds = %or.phi325
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var143, align 8, !dbg !2242
  br label %panic_block, !dbg !2242

if.exit328:                                       ; preds = %or.phi325
  %219 = load i64, ptr %l, align 8, !dbg !2243
  store i64 %219, ptr %blockret194, align 8, !dbg !2243
  br label %expr_block.exit508, !dbg !2243

next_if329:                                       ; preds = %result_block299
  br label %check_subtype330, !dbg !2244

check_subtype330:                                 ; preds = %parent_type_block332, %next_if329
  %220 = phi i64 [ %151, %next_if329 ], [ %typeid.parent334, %parent_type_block332 ], !dbg !2244
  %eq331 = icmp eq i64 ptrtoint (ptr @"$ct.int128" to i64), %220, !dbg !2244
  br i1 %eq331, label %result_block335, label %parent_type_block332, !dbg !2244

parent_type_block332:                             ; preds = %check_subtype330
  %221 = inttoptr i64 %220 to ptr, !dbg !2244
  %ptradd333 = getelementptr inbounds i8, ptr %221, i64 8, !dbg !2244
  %typeid.parent334 = load i64, ptr %ptradd333, align 8, !dbg !2244
  %222 = icmp eq i64 %typeid.parent334, 0, !dbg !2244
  br i1 %222, label %result_block335, label %check_subtype330, !dbg !2244

result_block335:                                  ; preds = %parent_type_block332, %check_subtype330
  %223 = phi i1 [ false, %parent_type_block332 ], [ true, %check_subtype330 ], !dbg !2244
  br i1 %223, label %switch.case336, label %next_if367, !dbg !2244

switch.case336:                                   ; preds = %result_block335
    #dbg_declare(ptr %i337, !2245, !DIExpression(), !2248)
  %224 = load ptr, ptr %v193, align 8, !dbg !2249
  %checknull338 = icmp eq ptr %224, null, !dbg !2249
  %225 = call i1 @llvm.expect.i1(i1 %checknull338, i1 false), !dbg !2249
  br i1 %225, label %panic339, label %checkok340, !dbg !2249

checkok340:                                       ; preds = %switch.case336
  %226 = ptrtoint ptr %224 to i64, !dbg !2250
  %227 = urem i64 %226, 16, !dbg !2250
  %228 = icmp ne i64 %227, 0, !dbg !2250
  %229 = call i1 @llvm.expect.i1(i1 %228, i1 false), !dbg !2250
  br i1 %229, label %panic341, label %checkok348, !dbg !2250

checkok348:                                       ; preds = %checkok340
  %230 = load i128, ptr %224, align 16, !dbg !2250
  store i128 %230, ptr %i337, align 16, !dbg !2250
  %231 = load i8, ptr %is_mixed_signed, align 1, !dbg !2251
  %232 = trunc i8 %231 to i1, !dbg !2251
  br i1 %232, label %and.rhs349, label %and.phi351, !dbg !2251

and.rhs349:                                       ; preds = %checkok348
  %233 = load i128, ptr %i337, align 16, !dbg !2252
  %lt350 = icmp slt i128 %233, 0, !dbg !2252
  br label %and.phi351, !dbg !2252

and.phi351:                                       ; preds = %and.rhs349, %checkok348
  %val352 = phi i1 [ false, %checkok348 ], [ %lt350, %and.rhs349 ], !dbg !2252
  br i1 %val352, label %if.then353, label %if.exit354, !dbg !2252

if.then353:                                       ; preds = %and.phi351
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %error_var143, align 8, !dbg !2253
  br label %panic_block, !dbg !2253

if.exit354:                                       ; preds = %and.phi351
  %234 = load i128, ptr %i337, align 16, !dbg !2254
  %235 = load i64, ptr %max, align 8, !dbg !2255
  %zext = zext i64 %235 to i128, !dbg !2255
  %gt355 = icmp sgt i128 %234, %zext, !dbg !2254
  %check356 = icmp sge i128 %zext, 0, !dbg !2254
  %siui-gt357 = and i1 %check356, %gt355, !dbg !2254
  br i1 %siui-gt357, label %or.phi363, label %or.rhs358, !dbg !2254

or.rhs358:                                        ; preds = %if.exit354
  %236 = load i128, ptr %i337, align 16, !dbg !2256
  %237 = load i64, ptr %min, align 8, !dbg !2257
  %zext359 = zext i64 %237 to i128, !dbg !2257
  %lt360 = icmp slt i128 %236, %zext359, !dbg !2256
  %check361 = icmp slt i128 %zext359, 0, !dbg !2256
  %siui-lt362 = or i1 %check361, %lt360, !dbg !2256
  br label %or.phi363, !dbg !2256

or.phi363:                                        ; preds = %or.rhs358, %if.exit354
  %val364 = phi i1 [ true, %if.exit354 ], [ %siui-lt362, %or.rhs358 ], !dbg !2256
  br i1 %val364, label %if.then365, label %if.exit366, !dbg !2256

if.then365:                                       ; preds = %or.phi363
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var143, align 8, !dbg !2258
  br label %panic_block, !dbg !2258

if.exit366:                                       ; preds = %or.phi363
  %238 = load i128, ptr %i337, align 16, !dbg !2259
  %trunc = trunc i128 %238 to i64, !dbg !2259
  store i64 %trunc, ptr %blockret194, align 8, !dbg !2259
  br label %expr_block.exit508, !dbg !2259

next_if367:                                       ; preds = %result_block335
  br label %check_subtype368, !dbg !2260

check_subtype368:                                 ; preds = %parent_type_block370, %next_if367
  %239 = phi i64 [ %151, %next_if367 ], [ %typeid.parent372, %parent_type_block370 ], !dbg !2260
  %eq369 = icmp eq i64 ptrtoint (ptr @"$ct.char" to i64), %239, !dbg !2260
  br i1 %eq369, label %result_block373, label %parent_type_block370, !dbg !2260

parent_type_block370:                             ; preds = %check_subtype368
  %240 = inttoptr i64 %239 to ptr, !dbg !2260
  %ptradd371 = getelementptr inbounds i8, ptr %240, i64 8, !dbg !2260
  %typeid.parent372 = load i64, ptr %ptradd371, align 8, !dbg !2260
  %241 = icmp eq i64 %typeid.parent372, 0, !dbg !2260
  br i1 %241, label %result_block373, label %check_subtype368, !dbg !2260

result_block373:                                  ; preds = %parent_type_block370, %check_subtype368
  %242 = phi i1 [ false, %parent_type_block370 ], [ true, %check_subtype368 ], !dbg !2260
  br i1 %242, label %switch.case374, label %next_if384, !dbg !2260

switch.case374:                                   ; preds = %result_block373
    #dbg_declare(ptr %c375, !2261, !DIExpression(), !2263)
  %243 = load ptr, ptr %v193, align 8, !dbg !2264
  %checknull376 = icmp eq ptr %243, null, !dbg !2264
  %244 = call i1 @llvm.expect.i1(i1 %checknull376, i1 false), !dbg !2264
  br i1 %244, label %panic377, label %checkok378, !dbg !2264

checkok378:                                       ; preds = %switch.case374
  %245 = load i8, ptr %243, align 1, !dbg !2265
  store i8 %245, ptr %c375, align 1, !dbg !2265
  %246 = load i8, ptr %c375, align 1, !dbg !2266
  %zext379 = zext i8 %246 to i64, !dbg !2266
  %247 = load i64, ptr %max, align 8, !dbg !2267
  %gt380 = icmp ugt i64 %zext379, %247, !dbg !2266
  br i1 %gt380, label %if.then381, label %if.exit382, !dbg !2266

if.then381:                                       ; preds = %checkok378
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var143, align 8, !dbg !2268
  br label %panic_block, !dbg !2268

if.exit382:                                       ; preds = %checkok378
  %248 = load i8, ptr %c375, align 1, !dbg !2269
  %zext383 = zext i8 %248 to i64, !dbg !2269
  store i64 %zext383, ptr %blockret194, align 8, !dbg !2269
  br label %expr_block.exit508, !dbg !2269

next_if384:                                       ; preds = %result_block373
  br label %check_subtype385, !dbg !2270

check_subtype385:                                 ; preds = %parent_type_block387, %next_if384
  %249 = phi i64 [ %151, %next_if384 ], [ %typeid.parent389, %parent_type_block387 ], !dbg !2270
  %eq386 = icmp eq i64 ptrtoint (ptr @"$ct.ushort" to i64), %249, !dbg !2270
  br i1 %eq386, label %result_block390, label %parent_type_block387, !dbg !2270

parent_type_block387:                             ; preds = %check_subtype385
  %250 = inttoptr i64 %249 to ptr, !dbg !2270
  %ptradd388 = getelementptr inbounds i8, ptr %250, i64 8, !dbg !2270
  %typeid.parent389 = load i64, ptr %ptradd388, align 8, !dbg !2270
  %251 = icmp eq i64 %typeid.parent389, 0, !dbg !2270
  br i1 %251, label %result_block390, label %check_subtype385, !dbg !2270

result_block390:                                  ; preds = %parent_type_block387, %check_subtype385
  %252 = phi i1 [ false, %parent_type_block387 ], [ true, %check_subtype385 ], !dbg !2270
  br i1 %252, label %switch.case391, label %next_if414, !dbg !2270

switch.case391:                                   ; preds = %result_block390
    #dbg_declare(ptr %s392, !2271, !DIExpression(), !2274)
  %253 = load ptr, ptr %v193, align 8, !dbg !2275
  %checknull393 = icmp eq ptr %253, null, !dbg !2275
  %254 = call i1 @llvm.expect.i1(i1 %checknull393, i1 false), !dbg !2275
  br i1 %254, label %panic394, label %checkok395, !dbg !2275

checkok395:                                       ; preds = %switch.case391
  %255 = ptrtoint ptr %253 to i64, !dbg !2276
  %256 = urem i64 %255, 2, !dbg !2276
  %257 = icmp ne i64 %256, 0, !dbg !2276
  %258 = call i1 @llvm.expect.i1(i1 %257, i1 false), !dbg !2276
  br i1 %258, label %panic396, label %checkok403, !dbg !2276

checkok403:                                       ; preds = %checkok395
  %259 = load i16, ptr %253, align 2, !dbg !2276
  store i16 %259, ptr %s392, align 2, !dbg !2276
  %260 = load i16, ptr %s392, align 2, !dbg !2277
  %zext404 = zext i16 %260 to i64, !dbg !2277
  %261 = load i64, ptr %max, align 8, !dbg !2278
  %gt405 = icmp ugt i64 %zext404, %261, !dbg !2277
  br i1 %gt405, label %or.phi409, label %or.rhs406, !dbg !2277

or.rhs406:                                        ; preds = %checkok403
  %262 = load i16, ptr %s392, align 2, !dbg !2279
  %zext407 = zext i16 %262 to i64, !dbg !2279
  %263 = load i64, ptr %min, align 8, !dbg !2280
  %lt408 = icmp ult i64 %zext407, %263, !dbg !2279
  br label %or.phi409, !dbg !2279

or.phi409:                                        ; preds = %or.rhs406, %checkok403
  %val410 = phi i1 [ true, %checkok403 ], [ %lt408, %or.rhs406 ], !dbg !2279
  br i1 %val410, label %if.then411, label %if.exit412, !dbg !2279

if.then411:                                       ; preds = %or.phi409
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var143, align 8, !dbg !2281
  br label %panic_block, !dbg !2281

if.exit412:                                       ; preds = %or.phi409
  %264 = load i16, ptr %s392, align 2, !dbg !2282
  %zext413 = zext i16 %264 to i64, !dbg !2282
  store i64 %zext413, ptr %blockret194, align 8, !dbg !2282
  br label %expr_block.exit508, !dbg !2282

next_if414:                                       ; preds = %result_block390
  br label %check_subtype415, !dbg !2283

check_subtype415:                                 ; preds = %parent_type_block417, %next_if414
  %265 = phi i64 [ %151, %next_if414 ], [ %typeid.parent419, %parent_type_block417 ], !dbg !2283
  %eq416 = icmp eq i64 ptrtoint (ptr @"$ct.uint" to i64), %265, !dbg !2283
  br i1 %eq416, label %result_block420, label %parent_type_block417, !dbg !2283

parent_type_block417:                             ; preds = %check_subtype415
  %266 = inttoptr i64 %265 to ptr, !dbg !2283
  %ptradd418 = getelementptr inbounds i8, ptr %266, i64 8, !dbg !2283
  %typeid.parent419 = load i64, ptr %ptradd418, align 8, !dbg !2283
  %267 = icmp eq i64 %typeid.parent419, 0, !dbg !2283
  br i1 %267, label %result_block420, label %check_subtype415, !dbg !2283

result_block420:                                  ; preds = %parent_type_block417, %check_subtype415
  %268 = phi i1 [ false, %parent_type_block417 ], [ true, %check_subtype415 ], !dbg !2283
  br i1 %268, label %switch.case421, label %next_if444, !dbg !2283

switch.case421:                                   ; preds = %result_block420
    #dbg_declare(ptr %i422, !2284, !DIExpression(), !2286)
  %269 = load ptr, ptr %v193, align 8, !dbg !2287
  %checknull423 = icmp eq ptr %269, null, !dbg !2287
  %270 = call i1 @llvm.expect.i1(i1 %checknull423, i1 false), !dbg !2287
  br i1 %270, label %panic424, label %checkok425, !dbg !2287

checkok425:                                       ; preds = %switch.case421
  %271 = ptrtoint ptr %269 to i64, !dbg !2288
  %272 = urem i64 %271, 4, !dbg !2288
  %273 = icmp ne i64 %272, 0, !dbg !2288
  %274 = call i1 @llvm.expect.i1(i1 %273, i1 false), !dbg !2288
  br i1 %274, label %panic426, label %checkok433, !dbg !2288

checkok433:                                       ; preds = %checkok425
  %275 = load i32, ptr %269, align 4, !dbg !2288
  store i32 %275, ptr %i422, align 4, !dbg !2288
  %276 = load i32, ptr %i422, align 4, !dbg !2289
  %zext434 = zext i32 %276 to i64, !dbg !2289
  %277 = load i64, ptr %max, align 8, !dbg !2290
  %gt435 = icmp ugt i64 %zext434, %277, !dbg !2289
  br i1 %gt435, label %or.phi439, label %or.rhs436, !dbg !2289

or.rhs436:                                        ; preds = %checkok433
  %278 = load i32, ptr %i422, align 4, !dbg !2291
  %zext437 = zext i32 %278 to i64, !dbg !2291
  %279 = load i64, ptr %min, align 8, !dbg !2292
  %lt438 = icmp ult i64 %zext437, %279, !dbg !2291
  br label %or.phi439, !dbg !2291

or.phi439:                                        ; preds = %or.rhs436, %checkok433
  %val440 = phi i1 [ true, %checkok433 ], [ %lt438, %or.rhs436 ], !dbg !2291
  br i1 %val440, label %if.then441, label %if.exit442, !dbg !2291

if.then441:                                       ; preds = %or.phi439
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var143, align 8, !dbg !2293
  br label %panic_block, !dbg !2293

if.exit442:                                       ; preds = %or.phi439
  %280 = load i32, ptr %i422, align 4, !dbg !2294
  %zext443 = zext i32 %280 to i64, !dbg !2294
  store i64 %zext443, ptr %blockret194, align 8, !dbg !2294
  br label %expr_block.exit508, !dbg !2294

next_if444:                                       ; preds = %result_block420
  br label %check_subtype445, !dbg !2295

check_subtype445:                                 ; preds = %parent_type_block447, %next_if444
  %281 = phi i64 [ %151, %next_if444 ], [ %typeid.parent449, %parent_type_block447 ], !dbg !2295
  %eq446 = icmp eq i64 ptrtoint (ptr @"$ct.ulong" to i64), %281, !dbg !2295
  br i1 %eq446, label %result_block450, label %parent_type_block447, !dbg !2295

parent_type_block447:                             ; preds = %check_subtype445
  %282 = inttoptr i64 %281 to ptr, !dbg !2295
  %ptradd448 = getelementptr inbounds i8, ptr %282, i64 8, !dbg !2295
  %typeid.parent449 = load i64, ptr %ptradd448, align 8, !dbg !2295
  %283 = icmp eq i64 %typeid.parent449, 0, !dbg !2295
  br i1 %283, label %result_block450, label %check_subtype445, !dbg !2295

result_block450:                                  ; preds = %parent_type_block447, %check_subtype445
  %284 = phi i1 [ false, %parent_type_block447 ], [ true, %check_subtype445 ], !dbg !2295
  br i1 %284, label %switch.case451, label %next_if471, !dbg !2295

switch.case451:                                   ; preds = %result_block450
    #dbg_declare(ptr %l452, !2296, !DIExpression(), !2298)
  %285 = load ptr, ptr %v193, align 8, !dbg !2299
  %checknull453 = icmp eq ptr %285, null, !dbg !2299
  %286 = call i1 @llvm.expect.i1(i1 %checknull453, i1 false), !dbg !2299
  br i1 %286, label %panic454, label %checkok455, !dbg !2299

checkok455:                                       ; preds = %switch.case451
  %287 = ptrtoint ptr %285 to i64, !dbg !2300
  %288 = urem i64 %287, 8, !dbg !2300
  %289 = icmp ne i64 %288, 0, !dbg !2300
  %290 = call i1 @llvm.expect.i1(i1 %289, i1 false), !dbg !2300
  br i1 %290, label %panic456, label %checkok463, !dbg !2300

checkok463:                                       ; preds = %checkok455
  %291 = load i64, ptr %285, align 8, !dbg !2300
  store i64 %291, ptr %l452, align 8, !dbg !2300
  %292 = load i64, ptr %l452, align 8, !dbg !2301
  %293 = load i64, ptr %max, align 8, !dbg !2302
  %gt464 = icmp ugt i64 %292, %293, !dbg !2301
  br i1 %gt464, label %or.phi467, label %or.rhs465, !dbg !2301

or.rhs465:                                        ; preds = %checkok463
  %294 = load i64, ptr %l452, align 8, !dbg !2303
  %295 = load i64, ptr %min, align 8, !dbg !2304
  %lt466 = icmp ult i64 %294, %295, !dbg !2303
  br label %or.phi467, !dbg !2303

or.phi467:                                        ; preds = %or.rhs465, %checkok463
  %val468 = phi i1 [ true, %checkok463 ], [ %lt466, %or.rhs465 ], !dbg !2303
  br i1 %val468, label %if.then469, label %if.exit470, !dbg !2303

if.then469:                                       ; preds = %or.phi467
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var143, align 8, !dbg !2305
  br label %panic_block, !dbg !2305

if.exit470:                                       ; preds = %or.phi467
  %296 = load i64, ptr %l452, align 8, !dbg !2306
  store i64 %296, ptr %blockret194, align 8, !dbg !2306
  br label %expr_block.exit508, !dbg !2306

next_if471:                                       ; preds = %result_block450
  br label %check_subtype472, !dbg !2307

check_subtype472:                                 ; preds = %parent_type_block474, %next_if471
  %297 = phi i64 [ %151, %next_if471 ], [ %typeid.parent476, %parent_type_block474 ], !dbg !2307
  %eq473 = icmp eq i64 ptrtoint (ptr @"$ct.uint128" to i64), %297, !dbg !2307
  br i1 %eq473, label %result_block477, label %parent_type_block474, !dbg !2307

parent_type_block474:                             ; preds = %check_subtype472
  %298 = inttoptr i64 %297 to ptr, !dbg !2307
  %ptradd475 = getelementptr inbounds i8, ptr %298, i64 8, !dbg !2307
  %typeid.parent476 = load i64, ptr %ptradd475, align 8, !dbg !2307
  %299 = icmp eq i64 %typeid.parent476, 0, !dbg !2307
  br i1 %299, label %result_block477, label %check_subtype472, !dbg !2307

result_block477:                                  ; preds = %parent_type_block474, %check_subtype472
  %300 = phi i1 [ false, %parent_type_block474 ], [ true, %check_subtype472 ], !dbg !2307
  br i1 %300, label %switch.case478, label %next_if501, !dbg !2307

switch.case478:                                   ; preds = %result_block477
    #dbg_declare(ptr %i479, !2308, !DIExpression(), !2311)
  %301 = load ptr, ptr %v193, align 8, !dbg !2312
  %checknull480 = icmp eq ptr %301, null, !dbg !2312
  %302 = call i1 @llvm.expect.i1(i1 %checknull480, i1 false), !dbg !2312
  br i1 %302, label %panic481, label %checkok482, !dbg !2312

checkok482:                                       ; preds = %switch.case478
  %303 = ptrtoint ptr %301 to i64, !dbg !2313
  %304 = urem i64 %303, 16, !dbg !2313
  %305 = icmp ne i64 %304, 0, !dbg !2313
  %306 = call i1 @llvm.expect.i1(i1 %305, i1 false), !dbg !2313
  br i1 %306, label %panic483, label %checkok490, !dbg !2313

checkok490:                                       ; preds = %checkok482
  %307 = load i128, ptr %301, align 16, !dbg !2313
  store i128 %307, ptr %i479, align 16, !dbg !2313
  %308 = load i128, ptr %i479, align 16, !dbg !2314
  %309 = load i64, ptr %max, align 8, !dbg !2315
  %zext491 = zext i64 %309 to i128, !dbg !2315
  %gt492 = icmp ugt i128 %308, %zext491, !dbg !2314
  br i1 %gt492, label %or.phi496, label %or.rhs493, !dbg !2314

or.rhs493:                                        ; preds = %checkok490
  %310 = load i128, ptr %i479, align 16, !dbg !2316
  %311 = load i64, ptr %min, align 8, !dbg !2317
  %zext494 = zext i64 %311 to i128, !dbg !2317
  %lt495 = icmp ult i128 %310, %zext494, !dbg !2316
  br label %or.phi496, !dbg !2316

or.phi496:                                        ; preds = %or.rhs493, %checkok490
  %val497 = phi i1 [ true, %checkok490 ], [ %lt495, %or.rhs493 ], !dbg !2316
  br i1 %val497, label %if.then498, label %if.exit499, !dbg !2316

if.then498:                                       ; preds = %or.phi496
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var143, align 8, !dbg !2318
  br label %panic_block, !dbg !2318

if.exit499:                                       ; preds = %or.phi496
  %312 = load i128, ptr %i479, align 16, !dbg !2319
  %trunc500 = trunc i128 %312 to i64, !dbg !2319
  store i64 %trunc500, ptr %blockret194, align 8, !dbg !2319
  br label %expr_block.exit508, !dbg !2319

next_if501:                                       ; preds = %result_block477
  br label %switch.default, !dbg !2319

switch.default:                                   ; preds = %next_if501
  store %"char[]" { ptr @.str.157, i64 30 }, ptr %string502, align 8
  %lo503 = load ptr, ptr %string502, align 8, !dbg !2320
  %ptradd504 = getelementptr inbounds i8, ptr %string502, i64 8, !dbg !2320
  %hi505 = load i64, ptr %ptradd504, align 8, !dbg !2320
  store %"any[]" zeroinitializer, ptr %indirectarg506, align 8
  call void @std.core.builtin.panicf(ptr %lo503, i64 %hi505, ptr @.str.158, i64 12, ptr @.str.159, i64 17, i32 198, ptr byval(%"any[]") align 8 %indirectarg506), !dbg !2324
  unreachable, !dbg !2325

expr_block.exit508:                               ; preds = %if.exit499, %if.exit470, %if.exit442, %if.exit412, %if.exit382, %if.exit366, %if.exit328, %if.exit291, %if.exit251, %if.exit218
  br label %noerr_block512, !dbg !2325

panic_block:                                      ; preds = %if.then498, %if.then469, %if.then441, %if.then411, %if.then381, %if.then365, %if.then353, %if.then327, %if.then316, %if.then290, %if.then277, %if.then250, %if.then243, %if.then217
  %313 = insertvalue %any undef, ptr %error_var143, 0, !dbg !2325
  %314 = insertvalue %any %313, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !2325
  store %any %314, ptr %varargslots509, align 16
  %315 = insertvalue %"any[]" undef, ptr %varargslots509, 0
  %"$$temp510" = insertvalue %"any[]" %315, i64 1, 1
  store %"any[]" %"$$temp510", ptr %indirectarg511, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.103, i64 36, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 198, ptr byval(%"any[]") align 8 %indirectarg511) #5, !dbg !2159
  unreachable, !dbg !2159

noerr_block512:                                   ; preds = %expr_block.exit508
  %316 = load i64, ptr %blockret194, align 8, !dbg !2159
  store i64 %316, ptr %i, align 8, !dbg !2159
  %317 = load i64, ptr %i, align 8, !dbg !2326
  %ptradd513 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !2327
  %318 = load i64, ptr %ptradd513, align 8, !dbg !2327
  %"introspect*514" = inttoptr i64 %318 to ptr, !dbg !2327
  %typeid.kind515 = load i8, ptr %"introspect*514", align 8, !dbg !2327
  %eq516 = icmp eq i8 %typeid.kind515, 8, !dbg !2327
  br i1 %eq516, label %check_type_ok518, label %check_next517, !dbg !2327

check_next517:                                    ; preds = %noerr_block512
  %319 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2327
  call void %319(ptr @.panic_msg.160, i64 51, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 199) #5, !dbg !2327
  unreachable, !dbg !2327

check_type_ok518:                                 ; preds = %noerr_block512
  %ptradd519 = getelementptr inbounds i8, ptr %"introspect*514", i64 40, !dbg !2327
  %namelen = load i64, ptr %ptradd519, align 8, !dbg !2327
  %ptradd520 = getelementptr inbounds i8, ptr %"introspect*514", i64 48, !dbg !2327
  %320 = insertvalue %"char[][]" undef, ptr %ptradd520, 0, !dbg !2327
  %321 = insertvalue %"char[][]" %320, i64 %namelen, 1, !dbg !2327
  %322 = extractvalue %"char[][]" %321, 1, !dbg !2327
  %lt521 = icmp ult i64 %317, %322, !dbg !2326
  br i1 %lt521, label %assert_ok526, label %assert_fail522, !dbg !2326

assert_fail522:                                   ; preds = %check_type_ok518
  %323 = insertvalue %any undef, ptr %i, 0, !dbg !2328
  %324 = insertvalue %any %323, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1, !dbg !2328
  store %any %324, ptr %varargslots523, align 16
  %325 = insertvalue %"any[]" undef, ptr %varargslots523, 0
  %"$$temp524" = insertvalue %"any[]" %325, i64 1, 1
  store %"any[]" %"$$temp524", ptr %indirectarg525, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.161, i64 49, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 199, ptr byval(%"any[]") align 8 %indirectarg525) #5, !dbg !2326
  unreachable, !dbg !2326

assert_ok526:                                     ; preds = %check_type_ok518
  %ptradd528 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !2329
  %326 = load i64, ptr %ptradd528, align 8, !dbg !2329
  %"introspect*529" = inttoptr i64 %326 to ptr, !dbg !2329
  %typeid.kind530 = load i8, ptr %"introspect*529", align 8, !dbg !2329
  %eq531 = icmp eq i8 %typeid.kind530, 8, !dbg !2329
  br i1 %eq531, label %check_type_ok533, label %check_next532, !dbg !2329

check_next532:                                    ; preds = %assert_ok526
  %327 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2329
  call void %327(ptr @.panic_msg.160, i64 51, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 200) #5, !dbg !2329
  unreachable, !dbg !2329

check_type_ok533:                                 ; preds = %assert_ok526
  %ptradd534 = getelementptr inbounds i8, ptr %"introspect*529", i64 40, !dbg !2329
  %namelen535 = load i64, ptr %ptradd534, align 8, !dbg !2329
  %ptradd536 = getelementptr inbounds i8, ptr %"introspect*529", i64 48, !dbg !2329
  %328 = insertvalue %"char[][]" undef, ptr %ptradd536, 0, !dbg !2329
  %329 = insertvalue %"char[][]" %328, i64 %namelen535, 1, !dbg !2329
  %330 = extractvalue %"char[][]" %329, 1, !dbg !2329
  %331 = extractvalue %"char[][]" %329, 0, !dbg !2329
  %332 = load i64, ptr %i, align 8, !dbg !2330
  %ge = icmp uge i64 %332, %330, !dbg !2330
  %333 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2330
  br i1 %333, label %panic537, label %checkok544, !dbg !2330

checkok544:                                       ; preds = %check_type_ok533
  %ptroffset = getelementptr inbounds [16 x i8], ptr %331, i64 %332, !dbg !2330
  %334 = load ptr, ptr %self, align 8
  %lo546 = load ptr, ptr %ptroffset, align 8
  %ptradd547 = getelementptr inbounds i8, ptr %ptroffset, i64 8
  %hi548 = load i64, ptr %ptradd547, align 8
  %335 = call i64 @std.io.Formatter.out_substr(ptr %retparam545, ptr %334, ptr %lo546, i64 %hi548), !dbg !2331
  %not_err549 = icmp eq i64 %335, 0, !dbg !2331
  %336 = call i1 @llvm.expect.i1(i1 %not_err549, i1 true), !dbg !2331
  br i1 %336, label %after_check551, label %assign_optional550, !dbg !2331

assign_optional550:                               ; preds = %checkok544
  store i64 %335, ptr %reterr527, align 8, !dbg !2331
  br label %err_retblock552, !dbg !2331

after_check551:                                   ; preds = %checkok544
  %337 = load i64, ptr %retparam545, align 8, !dbg !2331
  store i64 %337, ptr %0, align 8, !dbg !2331
  ret i64 0, !dbg !2331

err_retblock552:                                  ; preds = %assign_optional550
  %338 = load i64, ptr %reterr527, align 8, !dbg !2331
  ret i64 %338, !dbg !2331

switch.case553:                                   ; preds = %switch.entry141
  %339 = load ptr, ptr %self, align 8
  %340 = call i64 @std.io.Formatter.out_substr(ptr %retparam555, ptr %339, ptr @.str.162, i64 8), !dbg !2332
  %not_err556 = icmp eq i64 %340, 0, !dbg !2332
  %341 = call i1 @llvm.expect.i1(i1 %not_err556, i1 true), !dbg !2332
  br i1 %341, label %after_check558, label %assign_optional557, !dbg !2332

assign_optional557:                               ; preds = %switch.case553
  store i64 %340, ptr %reterr554, align 8, !dbg !2332
  br label %err_retblock559, !dbg !2332

after_check558:                                   ; preds = %switch.case553
  %342 = load i64, ptr %retparam555, align 8, !dbg !2332
  store i64 %342, ptr %0, align 8, !dbg !2332
  ret i64 0, !dbg !2332

err_retblock559:                                  ; preds = %assign_optional557
  %343 = load i64, ptr %reterr554, align 8, !dbg !2332
  ret i64 %343, !dbg !2332

switch.case560:                                   ; preds = %switch.entry141
  %344 = load ptr, ptr %self, align 8
  %345 = call i64 @std.io.Formatter.out_substr(ptr %retparam562, ptr %344, ptr @.str.163, i64 7), !dbg !2334
  %not_err563 = icmp eq i64 %345, 0, !dbg !2334
  %346 = call i1 @llvm.expect.i1(i1 %not_err563, i1 true), !dbg !2334
  br i1 %346, label %after_check565, label %assign_optional564, !dbg !2334

assign_optional564:                               ; preds = %switch.case560
  store i64 %345, ptr %reterr561, align 8, !dbg !2334
  br label %err_retblock566, !dbg !2334

after_check565:                                   ; preds = %switch.case560
  %347 = load i64, ptr %retparam562, align 8, !dbg !2334
  store i64 %347, ptr %0, align 8, !dbg !2334
  ret i64 0, !dbg !2334

err_retblock566:                                  ; preds = %assign_optional564
  %348 = load i64, ptr %reterr561, align 8, !dbg !2334
  ret i64 %348, !dbg !2334

switch.case567:                                   ; preds = %switch.entry141
  %349 = load ptr, ptr %self, align 8
  %350 = call i64 @std.io.Formatter.out_substr(ptr %retparam569, ptr %349, ptr @.str.164, i64 11), !dbg !2336
  %not_err570 = icmp eq i64 %350, 0, !dbg !2336
  %351 = call i1 @llvm.expect.i1(i1 %not_err570, i1 true), !dbg !2336
  br i1 %351, label %after_check572, label %assign_optional571, !dbg !2336

assign_optional571:                               ; preds = %switch.case567
  store i64 %350, ptr %reterr568, align 8, !dbg !2336
  br label %err_retblock573, !dbg !2336

after_check572:                                   ; preds = %switch.case567
  %352 = load i64, ptr %retparam569, align 8, !dbg !2336
  store i64 %352, ptr %0, align 8, !dbg !2336
  ret i64 0, !dbg !2336

err_retblock573:                                  ; preds = %assign_optional571
  %353 = load i64, ptr %reterr568, align 8, !dbg !2336
  ret i64 %353, !dbg !2336

switch.case574:                                   ; preds = %switch.entry141
  %354 = load ptr, ptr %self, align 8
  %355 = call i64 @std.io.Formatter.out_substr(ptr %retparam576, ptr %354, ptr @.str.165, i64 10), !dbg !2338
  %not_err577 = icmp eq i64 %355, 0, !dbg !2338
  %356 = call i1 @llvm.expect.i1(i1 %not_err577, i1 true), !dbg !2338
  br i1 %356, label %after_check579, label %assign_optional578, !dbg !2338

assign_optional578:                               ; preds = %switch.case574
  store i64 %355, ptr %reterr575, align 8, !dbg !2338
  br label %err_retblock580, !dbg !2338

after_check579:                                   ; preds = %switch.case574
  %357 = load i64, ptr %retparam576, align 8, !dbg !2338
  store i64 %357, ptr %0, align 8, !dbg !2338
  ret i64 0, !dbg !2338

err_retblock580:                                  ; preds = %assign_optional578
  %358 = load i64, ptr %reterr575, align 8, !dbg !2338
  ret i64 %358, !dbg !2338

switch.case581:                                   ; preds = %switch.entry141
  %ptradd582 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !2340
  %359 = load i64, ptr %ptradd582, align 8, !dbg !2340
  %eq583 = icmp eq i64 %359, ptrtoint (ptr @"$ct.String" to i64), !dbg !2340
  br i1 %eq583, label %if.then584, label %if.exit605, !dbg !2340

if.then584:                                       ; preds = %switch.case581
  %360 = load ptr, ptr %arg, align 8, !dbg !2342
  %checknull586 = icmp eq ptr %360, null, !dbg !2342
  %361 = call i1 @llvm.expect.i1(i1 %checknull586, i1 false), !dbg !2342
  br i1 %361, label %panic587, label %checkok588, !dbg !2342

checkok588:                                       ; preds = %if.then584
  %362 = ptrtoint ptr %360 to i64, !dbg !2342
  %363 = urem i64 %362, 8, !dbg !2342
  %364 = icmp ne i64 %363, 0, !dbg !2342
  %365 = call i1 @llvm.expect.i1(i1 %364, i1 false), !dbg !2342
  br i1 %365, label %panic589, label %checkok596, !dbg !2342

checkok596:                                       ; preds = %checkok588
  %366 = load ptr, ptr %self, align 8
  %lo598 = load ptr, ptr %360, align 8
  %ptradd599 = getelementptr inbounds i8, ptr %360, i64 8
  %hi600 = load i64, ptr %ptradd599, align 8
  %367 = call i64 @std.io.Formatter.out_substr(ptr %retparam597, ptr %366, ptr %lo598, i64 %hi600), !dbg !2344
  %not_err601 = icmp eq i64 %367, 0, !dbg !2344
  %368 = call i1 @llvm.expect.i1(i1 %not_err601, i1 true), !dbg !2344
  br i1 %368, label %after_check603, label %assign_optional602, !dbg !2344

assign_optional602:                               ; preds = %checkok596
  store i64 %367, ptr %reterr585, align 8, !dbg !2344
  br label %err_retblock604, !dbg !2344

after_check603:                                   ; preds = %checkok596
  %369 = load i64, ptr %retparam597, align 8, !dbg !2344
  store i64 %369, ptr %0, align 8, !dbg !2344
  ret i64 0, !dbg !2344

err_retblock604:                                  ; preds = %assign_optional602
  %370 = load i64, ptr %reterr585, align 8, !dbg !2344
  ret i64 %370, !dbg !2344

if.exit605:                                       ; preds = %switch.case581
  %ptradd606 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !2345
  %371 = load i64, ptr %ptradd606, align 8, !dbg !2345
  %eq607 = icmp eq i64 %371, ptrtoint (ptr @"$ct.std.core.string.ZString" to i64), !dbg !2345
  br i1 %eq607, label %if.then608, label %if.exit640, !dbg !2345

if.then608:                                       ; preds = %if.exit605
  %372 = load ptr, ptr %arg, align 8, !dbg !2346
  %checknull610 = icmp eq ptr %372, null, !dbg !2346
  %373 = call i1 @llvm.expect.i1(i1 %checknull610, i1 false), !dbg !2346
  br i1 %373, label %panic611, label %checkok612, !dbg !2346

checkok612:                                       ; preds = %if.then608
  %374 = ptrtoint ptr %372 to i64, !dbg !2346
  %375 = urem i64 %374, 8, !dbg !2346
  %376 = icmp ne i64 %375, 0, !dbg !2346
  %377 = call i1 @llvm.expect.i1(i1 %376, i1 false), !dbg !2346
  br i1 %377, label %panic613, label %checkok620, !dbg !2346

checkok620:                                       ; preds = %checkok612
  %378 = load ptr, ptr %372, align 8, !dbg !2346
  %i2b621 = icmp ne ptr %378, null, !dbg !2346
  br i1 %i2b621, label %cond.lhs, label %cond.rhs, !dbg !2346

cond.lhs:                                         ; preds = %checkok620
  %379 = load ptr, ptr %arg, align 8, !dbg !2348
  %checknull622 = icmp eq ptr %379, null, !dbg !2348
  %380 = call i1 @llvm.expect.i1(i1 %checknull622, i1 false), !dbg !2348
  br i1 %380, label %panic623, label %checkok624, !dbg !2348

checkok624:                                       ; preds = %cond.lhs
  %381 = ptrtoint ptr %379 to i64, !dbg !2348
  %382 = urem i64 %381, 8, !dbg !2348
  %383 = icmp ne i64 %382, 0, !dbg !2348
  %384 = call i1 @llvm.expect.i1(i1 %383, i1 false), !dbg !2348
  br i1 %384, label %panic625, label %checkok632, !dbg !2348

checkok632:                                       ; preds = %checkok624
  %385 = load ptr, ptr %379, align 8, !dbg !2348
  %386 = call { ptr, i64 } @std.core.string.ZString.str_view(ptr %385), !dbg !2348
  store { ptr, i64 } %386, ptr %result633, align 8
  %387 = load %"char[]", ptr %result633, align 8
  br label %cond.phi

cond.rhs:                                         ; preds = %checkok620
  br label %cond.phi, !dbg !2349

cond.phi:                                         ; preds = %cond.rhs, %checkok632
  %val634 = phi %"char[]" [ %387, %checkok632 ], [ { ptr @.str.169, i64 6 }, %cond.rhs ], !dbg !2349
  %388 = load ptr, ptr %self, align 8
  %389 = extractvalue %"char[]" %val634, 0
  %390 = extractvalue %"char[]" %val634, 1
  %391 = call i64 @std.io.Formatter.out_substr(ptr %retparam635, ptr %388, ptr %389, i64 %390), !dbg !2350
  %not_err636 = icmp eq i64 %391, 0, !dbg !2350
  %392 = call i1 @llvm.expect.i1(i1 %not_err636, i1 true), !dbg !2350
  br i1 %392, label %after_check638, label %assign_optional637, !dbg !2350

assign_optional637:                               ; preds = %cond.phi
  store i64 %391, ptr %reterr609, align 8, !dbg !2350
  br label %err_retblock639, !dbg !2350

after_check638:                                   ; preds = %cond.phi
  %393 = load i64, ptr %retparam635, align 8, !dbg !2350
  store i64 %393, ptr %0, align 8, !dbg !2350
  ret i64 0, !dbg !2350

err_retblock639:                                  ; preds = %assign_optional637
  %394 = load i64, ptr %reterr609, align 8, !dbg !2350
  ret i64 %394, !dbg !2350

if.exit640:                                       ; preds = %if.exit605
  %ptradd641 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !2351
  %395 = load i64, ptr %ptradd641, align 8, !dbg !2351
  %eq642 = icmp eq i64 %395, ptrtoint (ptr @"$ct.std.core.dstring.DString" to i64), !dbg !2351
  br i1 %eq642, label %if.then643, label %if.exit678, !dbg !2351

if.then643:                                       ; preds = %if.exit640
  %396 = load ptr, ptr %arg, align 8, !dbg !2352
  %checknull645 = icmp eq ptr %396, null, !dbg !2352
  %397 = call i1 @llvm.expect.i1(i1 %checknull645, i1 false), !dbg !2352
  br i1 %397, label %panic646, label %checkok647, !dbg !2352

checkok647:                                       ; preds = %if.then643
  %398 = ptrtoint ptr %396 to i64, !dbg !2352
  %399 = urem i64 %398, 8, !dbg !2352
  %400 = icmp ne i64 %399, 0, !dbg !2352
  %401 = call i1 @llvm.expect.i1(i1 %400, i1 false), !dbg !2352
  br i1 %401, label %panic648, label %checkok655, !dbg !2352

checkok655:                                       ; preds = %checkok647
  %402 = load ptr, ptr %396, align 8, !dbg !2352
  %i2b656 = icmp ne ptr %402, null, !dbg !2352
  br i1 %i2b656, label %cond.lhs657, label %cond.rhs670, !dbg !2352

cond.lhs657:                                      ; preds = %checkok655
  %403 = load ptr, ptr %arg, align 8, !dbg !2354
  %checknull658 = icmp eq ptr %403, null, !dbg !2354
  %404 = call i1 @llvm.expect.i1(i1 %checknull658, i1 false), !dbg !2354
  br i1 %404, label %panic659, label %checkok660, !dbg !2354

checkok660:                                       ; preds = %cond.lhs657
  %405 = ptrtoint ptr %403 to i64, !dbg !2354
  %406 = urem i64 %405, 8, !dbg !2354
  %407 = icmp ne i64 %406, 0, !dbg !2354
  %408 = call i1 @llvm.expect.i1(i1 %407, i1 false), !dbg !2354
  br i1 %408, label %panic661, label %checkok668, !dbg !2354

checkok668:                                       ; preds = %checkok660
  %409 = load ptr, ptr %403, align 8, !dbg !2354
  %410 = call { ptr, i64 } @std.core.dstring.DString.str_view(ptr %409), !dbg !2354
  store { ptr, i64 } %410, ptr %result669, align 8
  %411 = load %"char[]", ptr %result669, align 8
  br label %cond.phi671

cond.rhs670:                                      ; preds = %checkok655
  br label %cond.phi671, !dbg !2355

cond.phi671:                                      ; preds = %cond.rhs670, %checkok668
  %val672 = phi %"char[]" [ %411, %checkok668 ], [ { ptr @.str.172, i64 6 }, %cond.rhs670 ], !dbg !2355
  %412 = load ptr, ptr %self, align 8
  %413 = extractvalue %"char[]" %val672, 0
  %414 = extractvalue %"char[]" %val672, 1
  %415 = call i64 @std.io.Formatter.out_substr(ptr %retparam673, ptr %412, ptr %413, i64 %414), !dbg !2356
  %not_err674 = icmp eq i64 %415, 0, !dbg !2356
  %416 = call i1 @llvm.expect.i1(i1 %not_err674, i1 true), !dbg !2356
  br i1 %416, label %after_check676, label %assign_optional675, !dbg !2356

assign_optional675:                               ; preds = %cond.phi671
  store i64 %415, ptr %reterr644, align 8, !dbg !2356
  br label %err_retblock677, !dbg !2356

after_check676:                                   ; preds = %cond.phi671
  %417 = load i64, ptr %retparam673, align 8, !dbg !2356
  store i64 %417, ptr %0, align 8, !dbg !2356
  ret i64 0, !dbg !2356

err_retblock677:                                  ; preds = %assign_optional675
  %418 = load i64, ptr %reterr644, align 8, !dbg !2356
  ret i64 %418, !dbg !2356

if.exit678:                                       ; preds = %if.exit640
  store ptr %arg, ptr %self680, align 8
  %419 = load ptr, ptr %self680, align 8, !dbg !2357
  %checknull681 = icmp eq ptr %419, null, !dbg !2357
  %420 = call i1 @llvm.expect.i1(i1 %checknull681, i1 false), !dbg !2357
  br i1 %420, label %panic682, label %checkok683, !dbg !2357

checkok683:                                       ; preds = %if.exit678
  %421 = ptrtoint ptr %419 to i64, !dbg !2357
  %422 = urem i64 %421, 8, !dbg !2357
  %423 = icmp ne i64 %422, 0, !dbg !2357
  %424 = call i1 @llvm.expect.i1(i1 %423, i1 false), !dbg !2357
  br i1 %424, label %panic684, label %checkok691, !dbg !2357

checkok691:                                       ; preds = %checkok683
  %425 = load ptr, ptr %419, align 8, !dbg !2357
  %426 = load ptr, ptr %self680, align 8, !dbg !2360
  %checknull692 = icmp eq ptr %426, null, !dbg !2360
  %427 = call i1 @llvm.expect.i1(i1 %checknull692, i1 false), !dbg !2360
  br i1 %427, label %panic693, label %checkok694, !dbg !2360

checkok694:                                       ; preds = %checkok691
  %428 = ptrtoint ptr %426 to i64, !dbg !2360
  %429 = urem i64 %428, 8, !dbg !2360
  %430 = icmp ne i64 %429, 0, !dbg !2360
  %431 = call i1 @llvm.expect.i1(i1 %430, i1 false), !dbg !2360
  br i1 %431, label %panic695, label %checkok702, !dbg !2360

checkok702:                                       ; preds = %checkok694
  %ptradd703 = getelementptr inbounds i8, ptr %426, i64 8, !dbg !2360
  %432 = load i64, ptr %ptradd703, align 8, !dbg !2360
  %"introspect*704" = inttoptr i64 %432 to ptr, !dbg !2360
  %typeid.kind705 = load i8, ptr %"introspect*704", align 8, !dbg !2360
  %eq706 = icmp eq i8 %typeid.kind705, 15, !dbg !2360
  br i1 %eq706, label %check_type_ok722, label %check_next707, !dbg !2360

check_next707:                                    ; preds = %checkok702
  %eq708 = icmp eq i8 %typeid.kind705, 19, !dbg !2360
  br i1 %eq708, label %check_type_ok722, label %check_next709, !dbg !2360

check_next709:                                    ; preds = %check_next707
  %eq710 = icmp eq i8 %typeid.kind705, 17, !dbg !2360
  br i1 %eq710, label %check_type_ok722, label %check_next711, !dbg !2360

check_next711:                                    ; preds = %check_next709
  %eq712 = icmp eq i8 %typeid.kind705, 8, !dbg !2360
  br i1 %eq712, label %check_type_ok722, label %check_next713, !dbg !2360

check_next713:                                    ; preds = %check_next711
  %eq714 = icmp eq i8 %typeid.kind705, 16, !dbg !2360
  br i1 %eq714, label %check_type_ok722, label %check_next715, !dbg !2360

check_next715:                                    ; preds = %check_next713
  %eq716 = icmp eq i8 %typeid.kind705, 18, !dbg !2360
  br i1 %eq716, label %check_type_ok722, label %check_next717, !dbg !2360

check_next717:                                    ; preds = %check_next715
  %eq718 = icmp eq i8 %typeid.kind705, 14, !dbg !2360
  br i1 %eq718, label %check_type_ok722, label %check_next719, !dbg !2360

check_next719:                                    ; preds = %check_next717
  %eq720 = icmp eq i8 %typeid.kind705, 12, !dbg !2360
  br i1 %eq720, label %check_type_ok722, label %check_next721, !dbg !2360

check_next721:                                    ; preds = %check_next719
  %433 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2360
  call void %433(ptr @.panic_msg.144, i64 49, ptr @.file.50, i64 10, ptr @.func.128, i64 7, i32 199) #5, !dbg !2360
  unreachable, !dbg !2360

check_type_ok722:                                 ; preds = %check_next719, %check_next717, %check_next715, %check_next713, %check_next711, %check_next709, %check_next707, %checkok702
  %ptradd723 = getelementptr inbounds i8, ptr %"introspect*704", i64 32, !dbg !2360
  %typeid.inner724 = load i64, ptr %ptradd723, align 8, !dbg !2360
  %434 = insertvalue %any undef, ptr %425, 0, !dbg !2360
  %435 = insertvalue %any %434, i64 %typeid.inner724, 1, !dbg !2360
  %436 = load ptr, ptr %self, align 8
  store %any %435, ptr %taddr726, align 8
  %lo727 = load i64, ptr %taddr726, align 8
  %ptradd728 = getelementptr inbounds i8, ptr %taddr726, i64 8
  %hi729 = load ptr, ptr %ptradd728, align 8
  %437 = call i64 @std.io.Formatter.out_str(ptr %retparam725, ptr %436, i64 %lo727, ptr %hi729), !dbg !2361
  %not_err730 = icmp eq i64 %437, 0, !dbg !2361
  %438 = call i1 @llvm.expect.i1(i1 %not_err730, i1 true), !dbg !2361
  br i1 %438, label %after_check732, label %assign_optional731, !dbg !2361

assign_optional731:                               ; preds = %check_type_ok722
  store i64 %437, ptr %reterr679, align 8, !dbg !2361
  br label %err_retblock733, !dbg !2361

after_check732:                                   ; preds = %check_type_ok722
  %439 = load i64, ptr %retparam725, align 8, !dbg !2361
  store i64 %439, ptr %0, align 8, !dbg !2361
  ret i64 0, !dbg !2361

err_retblock733:                                  ; preds = %assign_optional731
  %440 = load i64, ptr %reterr679, align 8, !dbg !2361
  ret i64 %440, !dbg !2361

switch.case734:                                   ; preds = %switch.entry141
    #dbg_declare(ptr %inner, !2362, !DIExpression(), !2364)
  %ptradd735 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !2365
  %441 = load i64, ptr %ptradd735, align 8, !dbg !2365
  %"introspect*736" = inttoptr i64 %441 to ptr, !dbg !2365
  %typeid.kind737 = load i8, ptr %"introspect*736", align 8, !dbg !2365
  %eq738 = icmp eq i8 %typeid.kind737, 15, !dbg !2365
  br i1 %eq738, label %check_type_ok754, label %check_next739, !dbg !2365

check_next739:                                    ; preds = %switch.case734
  %eq740 = icmp eq i8 %typeid.kind737, 19, !dbg !2365
  br i1 %eq740, label %check_type_ok754, label %check_next741, !dbg !2365

check_next741:                                    ; preds = %check_next739
  %eq742 = icmp eq i8 %typeid.kind737, 17, !dbg !2365
  br i1 %eq742, label %check_type_ok754, label %check_next743, !dbg !2365

check_next743:                                    ; preds = %check_next741
  %eq744 = icmp eq i8 %typeid.kind737, 8, !dbg !2365
  br i1 %eq744, label %check_type_ok754, label %check_next745, !dbg !2365

check_next745:                                    ; preds = %check_next743
  %eq746 = icmp eq i8 %typeid.kind737, 16, !dbg !2365
  br i1 %eq746, label %check_type_ok754, label %check_next747, !dbg !2365

check_next747:                                    ; preds = %check_next745
  %eq748 = icmp eq i8 %typeid.kind737, 18, !dbg !2365
  br i1 %eq748, label %check_type_ok754, label %check_next749, !dbg !2365

check_next749:                                    ; preds = %check_next747
  %eq750 = icmp eq i8 %typeid.kind737, 14, !dbg !2365
  br i1 %eq750, label %check_type_ok754, label %check_next751, !dbg !2365

check_next751:                                    ; preds = %check_next749
  %eq752 = icmp eq i8 %typeid.kind737, 12, !dbg !2365
  br i1 %eq752, label %check_type_ok754, label %check_next753, !dbg !2365

check_next753:                                    ; preds = %check_next751
  %442 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2365
  call void %442(ptr @.panic_msg.144, i64 49, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 224) #5, !dbg !2365
  unreachable, !dbg !2365

check_type_ok754:                                 ; preds = %check_next751, %check_next749, %check_next747, %check_next745, %check_next743, %check_next741, %check_next739, %switch.case734
  %ptradd755 = getelementptr inbounds i8, ptr %"introspect*736", i64 32, !dbg !2365
  %typeid.inner756 = load i64, ptr %ptradd755, align 8, !dbg !2365
  store i64 %typeid.inner756, ptr %inner, align 8, !dbg !2365
    #dbg_declare(ptr %pointer, !2366, !DIExpression(), !2368)
  %443 = load ptr, ptr %arg, align 8, !dbg !2369
  store ptr %443, ptr %pointer, align 8, !dbg !2369
  %ptradd757 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !2370
  %444 = load i64, ptr %ptradd757, align 8, !dbg !2370
  %"introspect*758" = inttoptr i64 %444 to ptr, !dbg !2370
  %typeid.kind759 = load i8, ptr %"introspect*758", align 8, !dbg !2370
  %eq760 = icmp eq i8 %typeid.kind759, 15, !dbg !2370
  br i1 %eq760, label %check_type_ok776, label %check_next761, !dbg !2370

check_next761:                                    ; preds = %check_type_ok754
  %eq762 = icmp eq i8 %typeid.kind759, 19, !dbg !2370
  br i1 %eq762, label %check_type_ok776, label %check_next763, !dbg !2370

check_next763:                                    ; preds = %check_next761
  %eq764 = icmp eq i8 %typeid.kind759, 17, !dbg !2370
  br i1 %eq764, label %check_type_ok776, label %check_next765, !dbg !2370

check_next765:                                    ; preds = %check_next763
  %eq766 = icmp eq i8 %typeid.kind759, 8, !dbg !2370
  br i1 %eq766, label %check_type_ok776, label %check_next767, !dbg !2370

check_next767:                                    ; preds = %check_next765
  %eq768 = icmp eq i8 %typeid.kind759, 16, !dbg !2370
  br i1 %eq768, label %check_type_ok776, label %check_next769, !dbg !2370

check_next769:                                    ; preds = %check_next767
  %eq770 = icmp eq i8 %typeid.kind759, 18, !dbg !2370
  br i1 %eq770, label %check_type_ok776, label %check_next771, !dbg !2370

check_next771:                                    ; preds = %check_next769
  %eq772 = icmp eq i8 %typeid.kind759, 14, !dbg !2370
  br i1 %eq772, label %check_type_ok776, label %check_next773, !dbg !2370

check_next773:                                    ; preds = %check_next771
  %eq774 = icmp eq i8 %typeid.kind759, 12, !dbg !2370
  br i1 %eq774, label %check_type_ok776, label %check_next775, !dbg !2370

check_next775:                                    ; preds = %check_next773
  %445 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2370
  call void %445(ptr @.panic_msg.144, i64 49, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 226) #5, !dbg !2370
  unreachable, !dbg !2370

check_type_ok776:                                 ; preds = %check_next773, %check_next771, %check_next769, %check_next767, %check_next765, %check_next763, %check_next761, %check_type_ok754
  %ptradd777 = getelementptr inbounds i8, ptr %"introspect*758", i64 32, !dbg !2370
  %typeid.inner778 = load i64, ptr %ptradd777, align 8, !dbg !2370
  %neq779 = icmp ne i64 %typeid.inner778, ptrtoint (ptr @"$ct.void" to i64), !dbg !2370
  br i1 %neq779, label %if.then780, label %if.exit828, !dbg !2370

if.then780:                                       ; preds = %check_type_ok776
    #dbg_declare(ptr %deref, !2371, !DIExpression(), !2373)
  %446 = load ptr, ptr %pointer, align 8, !dbg !2374
  %checknull781 = icmp eq ptr %446, null, !dbg !2374
  %447 = call i1 @llvm.expect.i1(i1 %checknull781, i1 false), !dbg !2374
  br i1 %447, label %panic782, label %checkok783, !dbg !2374

checkok783:                                       ; preds = %if.then780
  %448 = ptrtoint ptr %446 to i64, !dbg !2374
  %449 = urem i64 %448, 8, !dbg !2374
  %450 = icmp ne i64 %449, 0, !dbg !2374
  %451 = call i1 @llvm.expect.i1(i1 %450, i1 false), !dbg !2374
  br i1 %451, label %panic784, label %checkok791, !dbg !2374

checkok791:                                       ; preds = %checkok783
  %452 = load ptr, ptr %446, align 8
  store ptr %452, ptr %ptr, align 8
  %453 = load i64, ptr %inner, align 8
  store i64 %453, ptr %type, align 8
  %454 = load ptr, ptr %ptr, align 8, !dbg !2375
  %455 = load i64, ptr %type, align 8, !dbg !2378
  %456 = insertvalue %any undef, ptr %454, 0, !dbg !2378
  %457 = insertvalue %any %456, i64 %455, 1, !dbg !2378
  store %any %457, ptr %deref, align 8, !dbg !2378
  %458 = load %any, ptr %deref, align 8, !dbg !2379
  %459 = load ptr, ptr %self, align 8
  store %any %458, ptr %taddr793, align 8
  %lo794 = load i64, ptr %taddr793, align 8
  %ptradd795 = getelementptr inbounds i8, ptr %taddr793, i64 8
  %hi796 = load ptr, ptr %ptradd795, align 8
  %460 = call i64 @std.io.Formatter.print_with_function(ptr %retparam792, ptr %459, i64 %lo794, ptr %hi796), !dbg !2380
  %not_err797 = icmp eq i64 %460, 0, !dbg !2380
  %461 = call i1 @llvm.expect.i1(i1 %not_err797, i1 true), !dbg !2380
  br i1 %461, label %after_check799, label %assign_optional798, !dbg !2380

assign_optional798:                               ; preds = %checkok791
  store i64 %460, ptr %n.f, align 8, !dbg !2380
  br label %after_assign800, !dbg !2380

after_check799:                                   ; preds = %checkok791
  %462 = load i64, ptr %retparam792, align 8, !dbg !2380
  store i64 %462, ptr %n, align 8, !dbg !2380
  store i64 0, ptr %n.f, align 8, !dbg !2380
  br label %after_assign800, !dbg !2380

after_assign800:                                  ; preds = %after_check799, %assign_optional798
  %load.err801 = load i64, ptr %n.f, align 8, !dbg !2381
  %result802 = icmp eq i64 %load.err801, 0, !dbg !2381
  br i1 %result802, label %if.then803, label %if.exit805, !dbg !2381

if.then803:                                       ; preds = %after_assign800
  %463 = load i64, ptr %n, align 8, !dbg !2382
  store i64 %463, ptr %0, align 8, !dbg !2382
  ret i64 0, !dbg !2382

if.exit805:                                       ; preds = %after_assign800
    #dbg_declare(ptr %f807, !2383, !DIExpression(), !2385)
  br label %testblock808, !dbg !2385

testblock808:                                     ; preds = %if.exit805
  %optval809 = load i64, ptr %n.f, align 8, !dbg !2387
  %not_err810 = icmp eq i64 %optval809, 0, !dbg !2387
  %464 = call i1 @llvm.expect.i1(i1 %not_err810, i1 true), !dbg !2387
  br i1 %464, label %after_check812, label %assign_optional811, !dbg !2387

assign_optional811:                               ; preds = %testblock808
  store i64 %optval809, ptr %f807, align 8, !dbg !2387
  br label %end_block813, !dbg !2387

after_check812:                                   ; preds = %testblock808
  store i64 0, ptr %f807, align 8, !dbg !2387
  br label %end_block813, !dbg !2387

end_block813:                                     ; preds = %after_check812, %assign_optional811
  %465 = load i64, ptr %f807, align 8, !dbg !2387
  %i2b814 = icmp ne i64 %465, 0, !dbg !2387
  br i1 %i2b814, label %if.then815, label %if.exit816, !dbg !2387

if.then815:                                       ; preds = %end_block813
  %466 = load i64, ptr %f807, align 8, !dbg !2388
  store i64 %466, ptr %blockret806, align 8, !dbg !2388
  br label %expr_block.exit817, !dbg !2388

if.exit816:                                       ; preds = %end_block813
  store i64 0, ptr %blockret806, align 8, !dbg !2389
  br label %expr_block.exit817, !dbg !2389

expr_block.exit817:                               ; preds = %if.exit816, %if.then815
  %467 = load i64, ptr %blockret806, align 8, !dbg !2389
  %neq818 = icmp ne i64 %467, ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !2386
  br i1 %neq818, label %if.then819, label %if.exit827, !dbg !2386

if.then819:                                       ; preds = %expr_block.exit817
  %optval821 = load i64, ptr %n.f, align 8, !dbg !2390
  %not_err822 = icmp eq i64 %optval821, 0, !dbg !2390
  %468 = call i1 @llvm.expect.i1(i1 %not_err822, i1 true), !dbg !2390
  br i1 %468, label %after_check824, label %assign_optional823, !dbg !2390

assign_optional823:                               ; preds = %if.then819
  store i64 %optval821, ptr %error_var820, align 8, !dbg !2390
  br label %guard_block825, !dbg !2390

after_check824:                                   ; preds = %if.then819
  br label %noerr_block826, !dbg !2390

guard_block825:                                   ; preds = %assign_optional823
  %469 = load i64, ptr %error_var820, align 8, !dbg !2390
  ret i64 %469, !dbg !2390

noerr_block826:                                   ; preds = %after_check824
  br label %if.exit827, !dbg !2390

if.exit827:                                       ; preds = %noerr_block826, %expr_block.exit817
  br label %if.exit828, !dbg !2390

if.exit828:                                       ; preds = %if.exit827, %check_type_ok776
    #dbg_declare(ptr %flags829, !2391, !DIExpression(), !2392)
  %470 = load ptr, ptr %self, align 8, !dbg !2393
  %ptradd830 = getelementptr inbounds i8, ptr %470, i64 16, !dbg !2393
  %471 = load i32, ptr %ptradd830, align 8, !dbg !2393
  store i32 %471, ptr %flags829, align 4, !dbg !2393
    #dbg_declare(ptr %width831, !2394, !DIExpression(), !2395)
  %472 = load ptr, ptr %self, align 8, !dbg !2396
  %ptradd832 = getelementptr inbounds i8, ptr %472, i64 16, !dbg !2396
  %ptradd833 = getelementptr inbounds i8, ptr %ptradd832, i64 4, !dbg !2396
  %473 = load i32, ptr %ptradd833, align 4, !dbg !2396
  store i32 %473, ptr %width831, align 4, !dbg !2396
  %474 = load ptr, ptr %self, align 8, !dbg !2397
  %ptradd834 = getelementptr inbounds i8, ptr %474, i64 16, !dbg !2397
  %ptradd835 = getelementptr inbounds i8, ptr %ptradd834, i64 4, !dbg !2397
  store i32 0, ptr %ptradd835, align 4, !dbg !2398
  %475 = load ptr, ptr %self, align 8
  %476 = call i64 @std.io.Formatter.out_substr(ptr %retparam838, ptr %475, ptr @.str.174, i64 2), !dbg !2399
  %not_err839 = icmp eq i64 %476, 0, !dbg !2399
  %477 = call i1 @llvm.expect.i1(i1 %not_err839, i1 true), !dbg !2399
  br i1 %477, label %after_check841, label %assign_optional840, !dbg !2399

assign_optional840:                               ; preds = %if.exit828
  store i64 %476, ptr %error_var837, align 8, !dbg !2399
  br label %guard_block842, !dbg !2399

after_check841:                                   ; preds = %if.exit828
  br label %noerr_block846, !dbg !2399

guard_block842:                                   ; preds = %assign_optional840
  %478 = load ptr, ptr %self, align 8, !dbg !2400
  %ptradd843 = getelementptr inbounds i8, ptr %478, i64 16, !dbg !2400
  %479 = load i32, ptr %flags829, align 4, !dbg !2402
  store i32 %479, ptr %ptradd843, align 8, !dbg !2402
  %480 = load ptr, ptr %self, align 8, !dbg !2403
  %ptradd844 = getelementptr inbounds i8, ptr %480, i64 16, !dbg !2403
  %ptradd845 = getelementptr inbounds i8, ptr %ptradd844, i64 4, !dbg !2403
  %481 = load i32, ptr %width831, align 4, !dbg !2404
  store i32 %481, ptr %ptradd845, align 4, !dbg !2404
  %482 = load i64, ptr %error_var837, align 8, !dbg !2404
  ret i64 %482, !dbg !2404

noerr_block846:                                   ; preds = %after_check841
  %483 = load i64, ptr %retparam838, align 8, !dbg !2404
  %484 = load ptr, ptr %self, align 8
  %lo848 = load i64, ptr %arg, align 8
  %ptradd849 = getelementptr inbounds i8, ptr %arg, i64 8
  %hi850 = load ptr, ptr %ptradd849, align 8
  %485 = call i64 @std.io.Formatter.ntoa_any(ptr %retparam847, ptr %484, i64 %lo848, ptr %hi850, i32 16), !dbg !2405
  %not_err851 = icmp eq i64 %485, 0, !dbg !2405
  %486 = call i1 @llvm.expect.i1(i1 %not_err851, i1 true), !dbg !2405
  br i1 %486, label %after_check853, label %assign_optional852, !dbg !2405

assign_optional852:                               ; preds = %noerr_block846
  store i64 %485, ptr %reterr836, align 8, !dbg !2405
  br label %err_retblock857, !dbg !2405

after_check853:                                   ; preds = %noerr_block846
  %487 = load i64, ptr %retparam847, align 8, !dbg !2405
  %add = add i64 %483, %487, !dbg !2399
  %488 = load ptr, ptr %self, align 8, !dbg !2406
  %ptradd854 = getelementptr inbounds i8, ptr %488, i64 16, !dbg !2406
  %489 = load i32, ptr %flags829, align 4, !dbg !2408
  store i32 %489, ptr %ptradd854, align 8, !dbg !2408
  %490 = load ptr, ptr %self, align 8, !dbg !2409
  %ptradd855 = getelementptr inbounds i8, ptr %490, i64 16, !dbg !2409
  %ptradd856 = getelementptr inbounds i8, ptr %ptradd855, i64 4, !dbg !2409
  %491 = load i32, ptr %width831, align 4, !dbg !2410
  store i32 %491, ptr %ptradd856, align 4, !dbg !2410
  store i64 %add, ptr %0, align 8, !dbg !2410
  ret i64 0, !dbg !2410

err_retblock857:                                  ; preds = %assign_optional852
  %492 = load ptr, ptr %self, align 8, !dbg !2411
  %ptradd858 = getelementptr inbounds i8, ptr %492, i64 16, !dbg !2411
  %493 = load i32, ptr %flags829, align 4, !dbg !2413
  store i32 %493, ptr %ptradd858, align 8, !dbg !2413
  %494 = load ptr, ptr %self, align 8, !dbg !2414
  %ptradd859 = getelementptr inbounds i8, ptr %494, i64 16, !dbg !2414
  %ptradd860 = getelementptr inbounds i8, ptr %ptradd859, i64 4, !dbg !2414
  %495 = load i32, ptr %width831, align 4, !dbg !2415
  store i32 %495, ptr %ptradd860, align 4, !dbg !2415
  %496 = load i64, ptr %reterr836, align 8, !dbg !2415
  ret i64 %496, !dbg !2415

switch.case861:                                   ; preds = %switch.entry141
    #dbg_declare(ptr %flags862, !2416, !DIExpression(), !2418)
  %497 = load ptr, ptr %self, align 8, !dbg !2419
  %ptradd863 = getelementptr inbounds i8, ptr %497, i64 16, !dbg !2419
  %498 = load i32, ptr %ptradd863, align 8, !dbg !2419
  store i32 %498, ptr %flags862, align 4, !dbg !2419
    #dbg_declare(ptr %width864, !2420, !DIExpression(), !2421)
  %499 = load ptr, ptr %self, align 8, !dbg !2422
  %ptradd865 = getelementptr inbounds i8, ptr %499, i64 16, !dbg !2422
  %ptradd866 = getelementptr inbounds i8, ptr %ptradd865, i64 4, !dbg !2422
  %500 = load i32, ptr %ptradd866, align 4, !dbg !2422
  store i32 %500, ptr %width864, align 4, !dbg !2422
  %501 = load ptr, ptr %self, align 8, !dbg !2423
  %ptradd867 = getelementptr inbounds i8, ptr %501, i64 16, !dbg !2423
  store i32 0, ptr %ptradd867, align 8, !dbg !2423
  %502 = load ptr, ptr %self, align 8, !dbg !2424
  %ptradd868 = getelementptr inbounds i8, ptr %502, i64 16, !dbg !2424
  %ptradd869 = getelementptr inbounds i8, ptr %ptradd868, i64 4, !dbg !2424
  store i32 0, ptr %ptradd869, align 4, !dbg !2425
    #dbg_declare(ptr %inner870, !2426, !DIExpression(), !2427)
  %ptradd871 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !2428
  %503 = load i64, ptr %ptradd871, align 8, !dbg !2428
  %"introspect*872" = inttoptr i64 %503 to ptr, !dbg !2428
  %typeid.kind873 = load i8, ptr %"introspect*872", align 8, !dbg !2428
  %eq874 = icmp eq i8 %typeid.kind873, 15, !dbg !2428
  br i1 %eq874, label %check_type_ok890, label %check_next875, !dbg !2428

check_next875:                                    ; preds = %switch.case861
  %eq876 = icmp eq i8 %typeid.kind873, 19, !dbg !2428
  br i1 %eq876, label %check_type_ok890, label %check_next877, !dbg !2428

check_next877:                                    ; preds = %check_next875
  %eq878 = icmp eq i8 %typeid.kind873, 17, !dbg !2428
  br i1 %eq878, label %check_type_ok890, label %check_next879, !dbg !2428

check_next879:                                    ; preds = %check_next877
  %eq880 = icmp eq i8 %typeid.kind873, 8, !dbg !2428
  br i1 %eq880, label %check_type_ok890, label %check_next881, !dbg !2428

check_next881:                                    ; preds = %check_next879
  %eq882 = icmp eq i8 %typeid.kind873, 16, !dbg !2428
  br i1 %eq882, label %check_type_ok890, label %check_next883, !dbg !2428

check_next883:                                    ; preds = %check_next881
  %eq884 = icmp eq i8 %typeid.kind873, 18, !dbg !2428
  br i1 %eq884, label %check_type_ok890, label %check_next885, !dbg !2428

check_next885:                                    ; preds = %check_next883
  %eq886 = icmp eq i8 %typeid.kind873, 14, !dbg !2428
  br i1 %eq886, label %check_type_ok890, label %check_next887, !dbg !2428

check_next887:                                    ; preds = %check_next885
  %eq888 = icmp eq i8 %typeid.kind873, 12, !dbg !2428
  br i1 %eq888, label %check_type_ok890, label %check_next889, !dbg !2428

check_next889:                                    ; preds = %check_next887
  %504 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2428
  call void %504(ptr @.panic_msg.144, i64 49, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 253) #5, !dbg !2428
  unreachable, !dbg !2428

check_type_ok890:                                 ; preds = %check_next887, %check_next885, %check_next883, %check_next881, %check_next879, %check_next877, %check_next875, %switch.case861
  %ptradd891 = getelementptr inbounds i8, ptr %"introspect*872", i64 32, !dbg !2428
  %typeid.inner892 = load i64, ptr %ptradd891, align 8, !dbg !2428
  store i64 %typeid.inner892, ptr %inner870, align 8, !dbg !2428
    #dbg_declare(ptr %size, !2429, !DIExpression(), !2430)
  %505 = load i64, ptr %inner870, align 8, !dbg !2431
  %"introspect*893" = inttoptr i64 %505 to ptr, !dbg !2431
  %typeid.kind894 = load i8, ptr %"introspect*893", align 8, !dbg !2431
  %ptradd895 = getelementptr inbounds i8, ptr %"introspect*893", i64 24, !dbg !2431
  %typeid.size = load i64, ptr %ptradd895, align 8, !dbg !2431
  store i64 %typeid.size, ptr %size, align 8, !dbg !2431
    #dbg_declare(ptr %alen, !2432, !DIExpression(), !2433)
  %ptradd896 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !2434
  %506 = load i64, ptr %ptradd896, align 8, !dbg !2434
  %"introspect*897" = inttoptr i64 %506 to ptr, !dbg !2434
  %typeid.kind898 = load i8, ptr %"introspect*897", align 8, !dbg !2434
  %eq899 = icmp eq i8 %typeid.kind898, 15, !dbg !2434
  br i1 %eq899, label %check_type_ok907, label %check_next900, !dbg !2434

check_next900:                                    ; preds = %check_type_ok890
  %eq901 = icmp eq i8 %typeid.kind898, 17, !dbg !2434
  br i1 %eq901, label %check_type_ok907, label %check_next902, !dbg !2434

check_next902:                                    ; preds = %check_next900
  %eq903 = icmp eq i8 %typeid.kind898, 8, !dbg !2434
  br i1 %eq903, label %check_type_ok907, label %check_next904, !dbg !2434

check_next904:                                    ; preds = %check_next902
  %eq905 = icmp eq i8 %typeid.kind898, 16, !dbg !2434
  br i1 %eq905, label %check_type_ok907, label %check_next906, !dbg !2434

check_next906:                                    ; preds = %check_next904
  %507 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2434
  call void %507(ptr @.panic_msg.175, i64 43, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 255) #5, !dbg !2434
  unreachable, !dbg !2434

check_type_ok907:                                 ; preds = %check_next904, %check_next902, %check_next900, %check_type_ok890
  %ptradd908 = getelementptr inbounds i8, ptr %"introspect*897", i64 40, !dbg !2434
  %typeid.len = load i64, ptr %ptradd908, align 8, !dbg !2434
  store i64 %typeid.len, ptr %alen, align 8, !dbg !2434
    #dbg_declare(ptr %ptr909, !2435, !DIExpression(), !2436)
  %508 = load ptr, ptr %arg, align 8, !dbg !2437
  store ptr %508, ptr %ptr909, align 8, !dbg !2437
    #dbg_declare(ptr %len, !2438, !DIExpression(), !2439)
  %509 = load ptr, ptr %self, align 8
  %510 = call i64 @std.io.Formatter.out(ptr %retparam911, ptr %509, i8 zeroext 91), !dbg !2440
  %not_err912 = icmp eq i64 %510, 0, !dbg !2440
  %511 = call i1 @llvm.expect.i1(i1 %not_err912, i1 true), !dbg !2440
  br i1 %511, label %after_check914, label %assign_optional913, !dbg !2440

assign_optional913:                               ; preds = %check_type_ok907
  store i64 %510, ptr %error_var910, align 8, !dbg !2440
  br label %guard_block915, !dbg !2440

after_check914:                                   ; preds = %check_type_ok907
  br label %noerr_block919, !dbg !2440

guard_block915:                                   ; preds = %assign_optional913
  %512 = load ptr, ptr %self, align 8, !dbg !2441
  %ptradd916 = getelementptr inbounds i8, ptr %512, i64 16, !dbg !2441
  %513 = load i32, ptr %flags862, align 4, !dbg !2443
  store i32 %513, ptr %ptradd916, align 8, !dbg !2443
  %514 = load ptr, ptr %self, align 8, !dbg !2444
  %ptradd917 = getelementptr inbounds i8, ptr %514, i64 16, !dbg !2444
  %ptradd918 = getelementptr inbounds i8, ptr %ptradd917, i64 4, !dbg !2444
  %515 = load i32, ptr %width864, align 4, !dbg !2445
  store i32 %515, ptr %ptradd918, align 4, !dbg !2445
  %516 = load i64, ptr %error_var910, align 8, !dbg !2445
  ret i64 %516, !dbg !2445

noerr_block919:                                   ; preds = %after_check914
  %517 = load i64, ptr %retparam911, align 8, !dbg !2445
  store i64 %517, ptr %len, align 8, !dbg !2445
    #dbg_declare(ptr %i920, !2446, !DIExpression(), !2448)
  store i64 0, ptr %i920, align 8, !dbg !2449
  br label %loop.cond, !dbg !2449

loop.cond:                                        ; preds = %noerr_block951, %noerr_block919
  %518 = load i64, ptr %i920, align 8, !dbg !2450
  %519 = load i64, ptr %alen, align 8, !dbg !2451
  %lt921 = icmp ult i64 %518, %519, !dbg !2450
  br i1 %lt921, label %loop.body, label %loop.exit, !dbg !2450

loop.body:                                        ; preds = %loop.cond
  %520 = load i64, ptr %i920, align 8, !dbg !2452
  %neq922 = icmp ne i64 0, %520, !dbg !2452
  br i1 %neq922, label %if.then923, label %if.exit935, !dbg !2452

if.then923:                                       ; preds = %loop.body
  %521 = load i64, ptr %len, align 8, !dbg !2454
  %522 = load ptr, ptr %self, align 8
  %523 = call i64 @std.io.Formatter.out_substr(ptr %retparam925, ptr %522, ptr @.str.176, i64 2), !dbg !2455
  %not_err926 = icmp eq i64 %523, 0, !dbg !2455
  %524 = call i1 @llvm.expect.i1(i1 %not_err926, i1 true), !dbg !2455
  br i1 %524, label %after_check928, label %assign_optional927, !dbg !2455

assign_optional927:                               ; preds = %if.then923
  store i64 %523, ptr %error_var924, align 8, !dbg !2455
  br label %guard_block929, !dbg !2455

after_check928:                                   ; preds = %if.then923
  br label %noerr_block933, !dbg !2455

guard_block929:                                   ; preds = %assign_optional927
  %525 = load ptr, ptr %self, align 8, !dbg !2456
  %ptradd930 = getelementptr inbounds i8, ptr %525, i64 16, !dbg !2456
  %526 = load i32, ptr %flags862, align 4, !dbg !2458
  store i32 %526, ptr %ptradd930, align 8, !dbg !2458
  %527 = load ptr, ptr %self, align 8, !dbg !2459
  %ptradd931 = getelementptr inbounds i8, ptr %527, i64 16, !dbg !2459
  %ptradd932 = getelementptr inbounds i8, ptr %ptradd931, i64 4, !dbg !2459
  %528 = load i32, ptr %width864, align 4, !dbg !2460
  store i32 %528, ptr %ptradd932, align 4, !dbg !2460
  %529 = load i64, ptr %error_var924, align 8, !dbg !2460
  ret i64 %529, !dbg !2460

noerr_block933:                                   ; preds = %after_check928
  %530 = load i64, ptr %retparam925, align 8, !dbg !2460
  %add934 = add i64 %521, %530, !dbg !2454
  store i64 %add934, ptr %len, align 8, !dbg !2454
  br label %if.exit935, !dbg !2454

if.exit935:                                       ; preds = %noerr_block933, %loop.body
  %531 = load i64, ptr %len, align 8, !dbg !2461
  %532 = load ptr, ptr %ptr909, align 8
  store ptr %532, ptr %ptr937, align 8
  %533 = load i64, ptr %inner870, align 8
  store i64 %533, ptr %type938, align 8
  %534 = load ptr, ptr %ptr937, align 8, !dbg !2462
  %535 = load i64, ptr %type938, align 8, !dbg !2465
  %536 = insertvalue %any undef, ptr %534, 0, !dbg !2465
  %537 = insertvalue %any %536, i64 %535, 1, !dbg !2465
  %538 = load ptr, ptr %self, align 8
  store %any %537, ptr %taddr940, align 8
  %lo941 = load i64, ptr %taddr940, align 8
  %ptradd942 = getelementptr inbounds i8, ptr %taddr940, i64 8
  %hi943 = load ptr, ptr %ptradd942, align 8
  %539 = call i64 @std.io.Formatter.out_str(ptr %retparam939, ptr %538, i64 %lo941, ptr %hi943), !dbg !2466
  %not_err944 = icmp eq i64 %539, 0, !dbg !2466
  %540 = call i1 @llvm.expect.i1(i1 %not_err944, i1 true), !dbg !2466
  br i1 %540, label %after_check946, label %assign_optional945, !dbg !2466

assign_optional945:                               ; preds = %if.exit935
  store i64 %539, ptr %error_var936, align 8, !dbg !2466
  br label %guard_block947, !dbg !2466

after_check946:                                   ; preds = %if.exit935
  br label %noerr_block951, !dbg !2466

guard_block947:                                   ; preds = %assign_optional945
  %541 = load ptr, ptr %self, align 8, !dbg !2467
  %ptradd948 = getelementptr inbounds i8, ptr %541, i64 16, !dbg !2467
  %542 = load i32, ptr %flags862, align 4, !dbg !2469
  store i32 %542, ptr %ptradd948, align 8, !dbg !2469
  %543 = load ptr, ptr %self, align 8, !dbg !2470
  %ptradd949 = getelementptr inbounds i8, ptr %543, i64 16, !dbg !2470
  %ptradd950 = getelementptr inbounds i8, ptr %ptradd949, i64 4, !dbg !2470
  %544 = load i32, ptr %width864, align 4, !dbg !2471
  store i32 %544, ptr %ptradd950, align 4, !dbg !2471
  %545 = load i64, ptr %error_var936, align 8, !dbg !2471
  ret i64 %545, !dbg !2471

noerr_block951:                                   ; preds = %after_check946
  %546 = load i64, ptr %retparam939, align 8, !dbg !2471
  %add952 = add i64 %531, %546, !dbg !2461
  store i64 %add952, ptr %len, align 8, !dbg !2461
  %547 = load ptr, ptr %ptr909, align 8, !dbg !2472
  %548 = load i64, ptr %size, align 8, !dbg !2473
  %ptradd_any = getelementptr i8, ptr %547, i64 %548, !dbg !2472
  store ptr %ptradd_any, ptr %ptr909, align 8, !dbg !2472
  %549 = load i64, ptr %i920, align 8, !dbg !2474
  %add953 = add i64 %549, 1, !dbg !2474
  store i64 %add953, ptr %i920, align 8, !dbg !2474
  br label %loop.cond, !dbg !2474

loop.exit:                                        ; preds = %loop.cond
  %550 = load i64, ptr %len, align 8, !dbg !2475
  %551 = load ptr, ptr %self, align 8
  %552 = call i64 @std.io.Formatter.out(ptr %retparam955, ptr %551, i8 zeroext 93), !dbg !2476
  %not_err956 = icmp eq i64 %552, 0, !dbg !2476
  %553 = call i1 @llvm.expect.i1(i1 %not_err956, i1 true), !dbg !2476
  br i1 %553, label %after_check958, label %assign_optional957, !dbg !2476

assign_optional957:                               ; preds = %loop.exit
  store i64 %552, ptr %error_var954, align 8, !dbg !2476
  br label %guard_block959, !dbg !2476

after_check958:                                   ; preds = %loop.exit
  br label %noerr_block963, !dbg !2476

guard_block959:                                   ; preds = %assign_optional957
  %554 = load ptr, ptr %self, align 8, !dbg !2477
  %ptradd960 = getelementptr inbounds i8, ptr %554, i64 16, !dbg !2477
  %555 = load i32, ptr %flags862, align 4, !dbg !2479
  store i32 %555, ptr %ptradd960, align 8, !dbg !2479
  %556 = load ptr, ptr %self, align 8, !dbg !2480
  %ptradd961 = getelementptr inbounds i8, ptr %556, i64 16, !dbg !2480
  %ptradd962 = getelementptr inbounds i8, ptr %ptradd961, i64 4, !dbg !2480
  %557 = load i32, ptr %width864, align 4, !dbg !2481
  store i32 %557, ptr %ptradd962, align 4, !dbg !2481
  %558 = load i64, ptr %error_var954, align 8, !dbg !2481
  ret i64 %558, !dbg !2481

noerr_block963:                                   ; preds = %after_check958
  %559 = load i64, ptr %retparam955, align 8, !dbg !2481
  %add964 = add i64 %550, %559, !dbg !2475
  store i64 %add964, ptr %len, align 8, !dbg !2475
  %560 = load i64, ptr %len, align 8, !dbg !2482
  %561 = load ptr, ptr %self, align 8, !dbg !2483
  %ptradd966 = getelementptr inbounds i8, ptr %561, i64 16, !dbg !2483
  %562 = load i32, ptr %flags862, align 4, !dbg !2485
  store i32 %562, ptr %ptradd966, align 8, !dbg !2485
  %563 = load ptr, ptr %self, align 8, !dbg !2486
  %ptradd967 = getelementptr inbounds i8, ptr %563, i64 16, !dbg !2486
  %ptradd968 = getelementptr inbounds i8, ptr %ptradd967, i64 4, !dbg !2486
  %564 = load i32, ptr %width864, align 4, !dbg !2487
  store i32 %564, ptr %ptradd968, align 4, !dbg !2487
  store i64 %560, ptr %0, align 8, !dbg !2487
  ret i64 0, !dbg !2487

switch.case969:                                   ; preds = %switch.entry141
    #dbg_declare(ptr %flags970, !2488, !DIExpression(), !2490)
  %565 = load ptr, ptr %self, align 8, !dbg !2491
  %ptradd971 = getelementptr inbounds i8, ptr %565, i64 16, !dbg !2491
  %566 = load i32, ptr %ptradd971, align 8, !dbg !2491
  store i32 %566, ptr %flags970, align 4, !dbg !2491
    #dbg_declare(ptr %width972, !2492, !DIExpression(), !2493)
  %567 = load ptr, ptr %self, align 8, !dbg !2494
  %ptradd973 = getelementptr inbounds i8, ptr %567, i64 16, !dbg !2494
  %ptradd974 = getelementptr inbounds i8, ptr %ptradd973, i64 4, !dbg !2494
  %568 = load i32, ptr %ptradd974, align 4, !dbg !2494
  store i32 %568, ptr %width972, align 4, !dbg !2494
  %569 = load ptr, ptr %self, align 8, !dbg !2495
  %ptradd975 = getelementptr inbounds i8, ptr %569, i64 16, !dbg !2495
  store i32 0, ptr %ptradd975, align 8, !dbg !2495
  %570 = load ptr, ptr %self, align 8, !dbg !2496
  %ptradd976 = getelementptr inbounds i8, ptr %570, i64 16, !dbg !2496
  %ptradd977 = getelementptr inbounds i8, ptr %ptradd976, i64 4, !dbg !2496
  store i32 0, ptr %ptradd977, align 4, !dbg !2497
    #dbg_declare(ptr %inner978, !2498, !DIExpression(), !2499)
  %ptradd979 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !2500
  %571 = load i64, ptr %ptradd979, align 8, !dbg !2500
  %"introspect*980" = inttoptr i64 %571 to ptr, !dbg !2500
  %typeid.kind981 = load i8, ptr %"introspect*980", align 8, !dbg !2500
  %eq982 = icmp eq i8 %typeid.kind981, 15, !dbg !2500
  br i1 %eq982, label %check_type_ok998, label %check_next983, !dbg !2500

check_next983:                                    ; preds = %switch.case969
  %eq984 = icmp eq i8 %typeid.kind981, 19, !dbg !2500
  br i1 %eq984, label %check_type_ok998, label %check_next985, !dbg !2500

check_next985:                                    ; preds = %check_next983
  %eq986 = icmp eq i8 %typeid.kind981, 17, !dbg !2500
  br i1 %eq986, label %check_type_ok998, label %check_next987, !dbg !2500

check_next987:                                    ; preds = %check_next985
  %eq988 = icmp eq i8 %typeid.kind981, 8, !dbg !2500
  br i1 %eq988, label %check_type_ok998, label %check_next989, !dbg !2500

check_next989:                                    ; preds = %check_next987
  %eq990 = icmp eq i8 %typeid.kind981, 16, !dbg !2500
  br i1 %eq990, label %check_type_ok998, label %check_next991, !dbg !2500

check_next991:                                    ; preds = %check_next989
  %eq992 = icmp eq i8 %typeid.kind981, 18, !dbg !2500
  br i1 %eq992, label %check_type_ok998, label %check_next993, !dbg !2500

check_next993:                                    ; preds = %check_next991
  %eq994 = icmp eq i8 %typeid.kind981, 14, !dbg !2500
  br i1 %eq994, label %check_type_ok998, label %check_next995, !dbg !2500

check_next995:                                    ; preds = %check_next993
  %eq996 = icmp eq i8 %typeid.kind981, 12, !dbg !2500
  br i1 %eq996, label %check_type_ok998, label %check_next997, !dbg !2500

check_next997:                                    ; preds = %check_next995
  %572 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2500
  call void %572(ptr @.panic_msg.144, i64 49, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 278) #5, !dbg !2500
  unreachable, !dbg !2500

check_type_ok998:                                 ; preds = %check_next995, %check_next993, %check_next991, %check_next989, %check_next987, %check_next985, %check_next983, %switch.case969
  %ptradd999 = getelementptr inbounds i8, ptr %"introspect*980", i64 32, !dbg !2500
  %typeid.inner1000 = load i64, ptr %ptradd999, align 8, !dbg !2500
  store i64 %typeid.inner1000, ptr %inner978, align 8, !dbg !2500
    #dbg_declare(ptr %size1001, !2501, !DIExpression(), !2502)
  %573 = load i64, ptr %inner978, align 8, !dbg !2503
  %"introspect*1002" = inttoptr i64 %573 to ptr, !dbg !2503
  %typeid.kind1003 = load i8, ptr %"introspect*1002", align 8, !dbg !2503
  %ptradd1004 = getelementptr inbounds i8, ptr %"introspect*1002", i64 24, !dbg !2503
  %typeid.size1005 = load i64, ptr %ptradd1004, align 8, !dbg !2503
  store i64 %typeid.size1005, ptr %size1001, align 8, !dbg !2503
    #dbg_declare(ptr %vlen, !2504, !DIExpression(), !2505)
  %ptradd1006 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !2506
  %574 = load i64, ptr %ptradd1006, align 8, !dbg !2506
  %"introspect*1007" = inttoptr i64 %574 to ptr, !dbg !2506
  %typeid.kind1008 = load i8, ptr %"introspect*1007", align 8, !dbg !2506
  %eq1009 = icmp eq i8 %typeid.kind1008, 15, !dbg !2506
  br i1 %eq1009, label %check_type_ok1017, label %check_next1010, !dbg !2506

check_next1010:                                   ; preds = %check_type_ok998
  %eq1011 = icmp eq i8 %typeid.kind1008, 17, !dbg !2506
  br i1 %eq1011, label %check_type_ok1017, label %check_next1012, !dbg !2506

check_next1012:                                   ; preds = %check_next1010
  %eq1013 = icmp eq i8 %typeid.kind1008, 8, !dbg !2506
  br i1 %eq1013, label %check_type_ok1017, label %check_next1014, !dbg !2506

check_next1014:                                   ; preds = %check_next1012
  %eq1015 = icmp eq i8 %typeid.kind1008, 16, !dbg !2506
  br i1 %eq1015, label %check_type_ok1017, label %check_next1016, !dbg !2506

check_next1016:                                   ; preds = %check_next1014
  %575 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2506
  call void %575(ptr @.panic_msg.175, i64 43, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 280) #5, !dbg !2506
  unreachable, !dbg !2506

check_type_ok1017:                                ; preds = %check_next1014, %check_next1012, %check_next1010, %check_type_ok998
  %ptradd1018 = getelementptr inbounds i8, ptr %"introspect*1007", i64 40, !dbg !2506
  %typeid.len1019 = load i64, ptr %ptradd1018, align 8, !dbg !2506
  store i64 %typeid.len1019, ptr %vlen, align 8, !dbg !2506
    #dbg_declare(ptr %ptr1020, !2507, !DIExpression(), !2508)
  %576 = load ptr, ptr %arg, align 8, !dbg !2509
  store ptr %576, ptr %ptr1020, align 8, !dbg !2509
    #dbg_declare(ptr %len1021, !2510, !DIExpression(), !2511)
  %577 = load ptr, ptr %self, align 8
  %578 = call i64 @std.io.Formatter.out_substr(ptr %retparam1023, ptr %577, ptr @.str.177, i64 2), !dbg !2512
  %not_err1024 = icmp eq i64 %578, 0, !dbg !2512
  %579 = call i1 @llvm.expect.i1(i1 %not_err1024, i1 true), !dbg !2512
  br i1 %579, label %after_check1026, label %assign_optional1025, !dbg !2512

assign_optional1025:                              ; preds = %check_type_ok1017
  store i64 %578, ptr %error_var1022, align 8, !dbg !2512
  br label %guard_block1027, !dbg !2512

after_check1026:                                  ; preds = %check_type_ok1017
  br label %noerr_block1031, !dbg !2512

guard_block1027:                                  ; preds = %assign_optional1025
  %580 = load ptr, ptr %self, align 8, !dbg !2513
  %ptradd1028 = getelementptr inbounds i8, ptr %580, i64 16, !dbg !2513
  %581 = load i32, ptr %flags970, align 4, !dbg !2515
  store i32 %581, ptr %ptradd1028, align 8, !dbg !2515
  %582 = load ptr, ptr %self, align 8, !dbg !2516
  %ptradd1029 = getelementptr inbounds i8, ptr %582, i64 16, !dbg !2516
  %ptradd1030 = getelementptr inbounds i8, ptr %ptradd1029, i64 4, !dbg !2516
  %583 = load i32, ptr %width972, align 4, !dbg !2517
  store i32 %583, ptr %ptradd1030, align 4, !dbg !2517
  %584 = load i64, ptr %error_var1022, align 8, !dbg !2517
  ret i64 %584, !dbg !2517

noerr_block1031:                                  ; preds = %after_check1026
  %585 = load i64, ptr %retparam1023, align 8, !dbg !2517
  store i64 %585, ptr %len1021, align 8, !dbg !2517
    #dbg_declare(ptr %i1032, !2518, !DIExpression(), !2520)
  store i64 0, ptr %i1032, align 8, !dbg !2521
  br label %loop.cond1033, !dbg !2521

loop.cond1033:                                    ; preds = %noerr_block1065, %noerr_block1031
  %586 = load i64, ptr %i1032, align 8, !dbg !2522
  %587 = load i64, ptr %vlen, align 8, !dbg !2523
  %lt1034 = icmp ult i64 %586, %587, !dbg !2522
  br i1 %lt1034, label %loop.body1035, label %loop.exit1069, !dbg !2522

loop.body1035:                                    ; preds = %loop.cond1033
  %588 = load i64, ptr %i1032, align 8, !dbg !2524
  %neq1036 = icmp ne i64 0, %588, !dbg !2524
  br i1 %neq1036, label %if.then1037, label %if.exit1049, !dbg !2524

if.then1037:                                      ; preds = %loop.body1035
  %589 = load i64, ptr %len1021, align 8, !dbg !2526
  %590 = load ptr, ptr %self, align 8
  %591 = call i64 @std.io.Formatter.out_substr(ptr %retparam1039, ptr %590, ptr @.str.178, i64 2), !dbg !2527
  %not_err1040 = icmp eq i64 %591, 0, !dbg !2527
  %592 = call i1 @llvm.expect.i1(i1 %not_err1040, i1 true), !dbg !2527
  br i1 %592, label %after_check1042, label %assign_optional1041, !dbg !2527

assign_optional1041:                              ; preds = %if.then1037
  store i64 %591, ptr %error_var1038, align 8, !dbg !2527
  br label %guard_block1043, !dbg !2527

after_check1042:                                  ; preds = %if.then1037
  br label %noerr_block1047, !dbg !2527

guard_block1043:                                  ; preds = %assign_optional1041
  %593 = load ptr, ptr %self, align 8, !dbg !2528
  %ptradd1044 = getelementptr inbounds i8, ptr %593, i64 16, !dbg !2528
  %594 = load i32, ptr %flags970, align 4, !dbg !2530
  store i32 %594, ptr %ptradd1044, align 8, !dbg !2530
  %595 = load ptr, ptr %self, align 8, !dbg !2531
  %ptradd1045 = getelementptr inbounds i8, ptr %595, i64 16, !dbg !2531
  %ptradd1046 = getelementptr inbounds i8, ptr %ptradd1045, i64 4, !dbg !2531
  %596 = load i32, ptr %width972, align 4, !dbg !2532
  store i32 %596, ptr %ptradd1046, align 4, !dbg !2532
  %597 = load i64, ptr %error_var1038, align 8, !dbg !2532
  ret i64 %597, !dbg !2532

noerr_block1047:                                  ; preds = %after_check1042
  %598 = load i64, ptr %retparam1039, align 8, !dbg !2532
  %add1048 = add i64 %589, %598, !dbg !2526
  store i64 %add1048, ptr %len1021, align 8, !dbg !2526
  br label %if.exit1049, !dbg !2526

if.exit1049:                                      ; preds = %noerr_block1047, %loop.body1035
  %599 = load i64, ptr %len1021, align 8, !dbg !2533
  %600 = load ptr, ptr %ptr1020, align 8
  store ptr %600, ptr %ptr1051, align 8
  %601 = load i64, ptr %inner978, align 8
  store i64 %601, ptr %type1052, align 8
  %602 = load ptr, ptr %ptr1051, align 8, !dbg !2534
  %603 = load i64, ptr %type1052, align 8, !dbg !2537
  %604 = insertvalue %any undef, ptr %602, 0, !dbg !2537
  %605 = insertvalue %any %604, i64 %603, 1, !dbg !2537
  %606 = load ptr, ptr %self, align 8
  store %any %605, ptr %taddr1054, align 8
  %lo1055 = load i64, ptr %taddr1054, align 8
  %ptradd1056 = getelementptr inbounds i8, ptr %taddr1054, i64 8
  %hi1057 = load ptr, ptr %ptradd1056, align 8
  %607 = call i64 @std.io.Formatter.out_str(ptr %retparam1053, ptr %606, i64 %lo1055, ptr %hi1057), !dbg !2538
  %not_err1058 = icmp eq i64 %607, 0, !dbg !2538
  %608 = call i1 @llvm.expect.i1(i1 %not_err1058, i1 true), !dbg !2538
  br i1 %608, label %after_check1060, label %assign_optional1059, !dbg !2538

assign_optional1059:                              ; preds = %if.exit1049
  store i64 %607, ptr %error_var1050, align 8, !dbg !2538
  br label %guard_block1061, !dbg !2538

after_check1060:                                  ; preds = %if.exit1049
  br label %noerr_block1065, !dbg !2538

guard_block1061:                                  ; preds = %assign_optional1059
  %609 = load ptr, ptr %self, align 8, !dbg !2539
  %ptradd1062 = getelementptr inbounds i8, ptr %609, i64 16, !dbg !2539
  %610 = load i32, ptr %flags970, align 4, !dbg !2541
  store i32 %610, ptr %ptradd1062, align 8, !dbg !2541
  %611 = load ptr, ptr %self, align 8, !dbg !2542
  %ptradd1063 = getelementptr inbounds i8, ptr %611, i64 16, !dbg !2542
  %ptradd1064 = getelementptr inbounds i8, ptr %ptradd1063, i64 4, !dbg !2542
  %612 = load i32, ptr %width972, align 4, !dbg !2543
  store i32 %612, ptr %ptradd1064, align 4, !dbg !2543
  %613 = load i64, ptr %error_var1050, align 8, !dbg !2543
  ret i64 %613, !dbg !2543

noerr_block1065:                                  ; preds = %after_check1060
  %614 = load i64, ptr %retparam1053, align 8, !dbg !2543
  %add1066 = add i64 %599, %614, !dbg !2533
  store i64 %add1066, ptr %len1021, align 8, !dbg !2533
  %615 = load ptr, ptr %ptr1020, align 8, !dbg !2544
  %616 = load i64, ptr %size1001, align 8, !dbg !2545
  %ptradd_any1067 = getelementptr i8, ptr %615, i64 %616, !dbg !2544
  store ptr %ptradd_any1067, ptr %ptr1020, align 8, !dbg !2544
  %617 = load i64, ptr %i1032, align 8, !dbg !2546
  %add1068 = add i64 %617, 1, !dbg !2546
  store i64 %add1068, ptr %i1032, align 8, !dbg !2546
  br label %loop.cond1033, !dbg !2546

loop.exit1069:                                    ; preds = %loop.cond1033
  %618 = load i64, ptr %len1021, align 8, !dbg !2547
  %619 = load ptr, ptr %self, align 8
  %620 = call i64 @std.io.Formatter.out_substr(ptr %retparam1071, ptr %619, ptr @.str.179, i64 2), !dbg !2548
  %not_err1072 = icmp eq i64 %620, 0, !dbg !2548
  %621 = call i1 @llvm.expect.i1(i1 %not_err1072, i1 true), !dbg !2548
  br i1 %621, label %after_check1074, label %assign_optional1073, !dbg !2548

assign_optional1073:                              ; preds = %loop.exit1069
  store i64 %620, ptr %error_var1070, align 8, !dbg !2548
  br label %guard_block1075, !dbg !2548

after_check1074:                                  ; preds = %loop.exit1069
  br label %noerr_block1079, !dbg !2548

guard_block1075:                                  ; preds = %assign_optional1073
  %622 = load ptr, ptr %self, align 8, !dbg !2549
  %ptradd1076 = getelementptr inbounds i8, ptr %622, i64 16, !dbg !2549
  %623 = load i32, ptr %flags970, align 4, !dbg !2551
  store i32 %623, ptr %ptradd1076, align 8, !dbg !2551
  %624 = load ptr, ptr %self, align 8, !dbg !2552
  %ptradd1077 = getelementptr inbounds i8, ptr %624, i64 16, !dbg !2552
  %ptradd1078 = getelementptr inbounds i8, ptr %ptradd1077, i64 4, !dbg !2552
  %625 = load i32, ptr %width972, align 4, !dbg !2553
  store i32 %625, ptr %ptradd1078, align 4, !dbg !2553
  %626 = load i64, ptr %error_var1070, align 8, !dbg !2553
  ret i64 %626, !dbg !2553

noerr_block1079:                                  ; preds = %after_check1074
  %627 = load i64, ptr %retparam1071, align 8, !dbg !2553
  %add1080 = add i64 %618, %627, !dbg !2547
  store i64 %add1080, ptr %len1021, align 8, !dbg !2547
  %628 = load i64, ptr %len1021, align 8, !dbg !2554
  %629 = load ptr, ptr %self, align 8, !dbg !2555
  %ptradd1082 = getelementptr inbounds i8, ptr %629, i64 16, !dbg !2555
  %630 = load i32, ptr %flags970, align 4, !dbg !2557
  store i32 %630, ptr %ptradd1082, align 8, !dbg !2557
  %631 = load ptr, ptr %self, align 8, !dbg !2558
  %ptradd1083 = getelementptr inbounds i8, ptr %631, i64 16, !dbg !2558
  %ptradd1084 = getelementptr inbounds i8, ptr %ptradd1083, i64 4, !dbg !2558
  %632 = load i32, ptr %width972, align 4, !dbg !2559
  store i32 %632, ptr %ptradd1084, align 4, !dbg !2559
  store i64 %628, ptr %0, align 8, !dbg !2559
  ret i64 0, !dbg !2559

switch.case1085:                                  ; preds = %switch.entry141
    #dbg_declare(ptr %inner1086, !2560, !DIExpression(), !2562)
  %ptradd1087 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !2563
  %633 = load i64, ptr %ptradd1087, align 8, !dbg !2563
  %"introspect*1088" = inttoptr i64 %633 to ptr, !dbg !2563
  %typeid.kind1089 = load i8, ptr %"introspect*1088", align 8, !dbg !2563
  %eq1090 = icmp eq i8 %typeid.kind1089, 15, !dbg !2563
  br i1 %eq1090, label %check_type_ok1106, label %check_next1091, !dbg !2563

check_next1091:                                   ; preds = %switch.case1085
  %eq1092 = icmp eq i8 %typeid.kind1089, 19, !dbg !2563
  br i1 %eq1092, label %check_type_ok1106, label %check_next1093, !dbg !2563

check_next1093:                                   ; preds = %check_next1091
  %eq1094 = icmp eq i8 %typeid.kind1089, 17, !dbg !2563
  br i1 %eq1094, label %check_type_ok1106, label %check_next1095, !dbg !2563

check_next1095:                                   ; preds = %check_next1093
  %eq1096 = icmp eq i8 %typeid.kind1089, 8, !dbg !2563
  br i1 %eq1096, label %check_type_ok1106, label %check_next1097, !dbg !2563

check_next1097:                                   ; preds = %check_next1095
  %eq1098 = icmp eq i8 %typeid.kind1089, 16, !dbg !2563
  br i1 %eq1098, label %check_type_ok1106, label %check_next1099, !dbg !2563

check_next1099:                                   ; preds = %check_next1097
  %eq1100 = icmp eq i8 %typeid.kind1089, 18, !dbg !2563
  br i1 %eq1100, label %check_type_ok1106, label %check_next1101, !dbg !2563

check_next1101:                                   ; preds = %check_next1099
  %eq1102 = icmp eq i8 %typeid.kind1089, 14, !dbg !2563
  br i1 %eq1102, label %check_type_ok1106, label %check_next1103, !dbg !2563

check_next1103:                                   ; preds = %check_next1101
  %eq1104 = icmp eq i8 %typeid.kind1089, 12, !dbg !2563
  br i1 %eq1104, label %check_type_ok1106, label %check_next1105, !dbg !2563

check_next1105:                                   ; preds = %check_next1103
  %634 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2563
  call void %634(ptr @.panic_msg.144, i64 49, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 294) #5, !dbg !2563
  unreachable, !dbg !2563

check_type_ok1106:                                ; preds = %check_next1103, %check_next1101, %check_next1099, %check_next1097, %check_next1095, %check_next1093, %check_next1091, %switch.case1085
  %ptradd1107 = getelementptr inbounds i8, ptr %"introspect*1088", i64 32, !dbg !2563
  %typeid.inner1108 = load i64, ptr %ptradd1107, align 8, !dbg !2563
  store i64 %typeid.inner1108, ptr %inner1086, align 8, !dbg !2563
  %635 = load i64, ptr %inner1086, align 8, !dbg !2564
  %eq1109 = icmp eq i64 %635, ptrtoint (ptr @"$ct.void" to i64), !dbg !2564
  br i1 %eq1109, label %if.then1110, label %if.exit1111, !dbg !2564

if.then1110:                                      ; preds = %check_type_ok1106
  store i64 ptrtoint (ptr @"$ct.char" to i64), ptr %inner1086, align 8, !dbg !2565
  br label %if.exit1111, !dbg !2565

if.exit1111:                                      ; preds = %if.then1110, %check_type_ok1106
    #dbg_declare(ptr %flags1112, !2566, !DIExpression(), !2567)
  %636 = load ptr, ptr %self, align 8, !dbg !2568
  %ptradd1113 = getelementptr inbounds i8, ptr %636, i64 16, !dbg !2568
  %637 = load i32, ptr %ptradd1113, align 8, !dbg !2568
  store i32 %637, ptr %flags1112, align 4, !dbg !2568
    #dbg_declare(ptr %width1114, !2569, !DIExpression(), !2570)
  %638 = load ptr, ptr %self, align 8, !dbg !2571
  %ptradd1115 = getelementptr inbounds i8, ptr %638, i64 16, !dbg !2571
  %ptradd1116 = getelementptr inbounds i8, ptr %ptradd1115, i64 4, !dbg !2571
  %639 = load i32, ptr %ptradd1116, align 4, !dbg !2571
  store i32 %639, ptr %width1114, align 4, !dbg !2571
  %640 = load ptr, ptr %self, align 8, !dbg !2572
  %ptradd1117 = getelementptr inbounds i8, ptr %640, i64 16, !dbg !2572
  store i32 0, ptr %ptradd1117, align 8, !dbg !2572
  %641 = load ptr, ptr %self, align 8, !dbg !2573
  %ptradd1118 = getelementptr inbounds i8, ptr %641, i64 16, !dbg !2573
  %ptradd1119 = getelementptr inbounds i8, ptr %ptradd1118, i64 4, !dbg !2573
  store i32 0, ptr %ptradd1119, align 4, !dbg !2574
    #dbg_declare(ptr %size1120, !2575, !DIExpression(), !2576)
  %642 = load i64, ptr %inner1086, align 8, !dbg !2577
  %"introspect*1121" = inttoptr i64 %642 to ptr, !dbg !2577
  %typeid.kind1122 = load i8, ptr %"introspect*1121", align 8, !dbg !2577
  %ptradd1123 = getelementptr inbounds i8, ptr %"introspect*1121", i64 24, !dbg !2577
  %typeid.size1124 = load i64, ptr %ptradd1123, align 8, !dbg !2577
  store i64 %typeid.size1124, ptr %size1120, align 8, !dbg !2577
    #dbg_declare(ptr %temp, !2578, !DIExpression(), !2580)
  %643 = load ptr, ptr %arg, align 8, !dbg !2581
  store ptr %643, ptr %temp, align 8, !dbg !2581
    #dbg_declare(ptr %ptr1125, !2582, !DIExpression(), !2583)
  %644 = load ptr, ptr %temp, align 8, !dbg !2584
  %checknull1126 = icmp eq ptr %644, null, !dbg !2584
  %645 = call i1 @llvm.expect.i1(i1 %checknull1126, i1 false), !dbg !2584
  br i1 %645, label %panic1127, label %checkok1128, !dbg !2584

checkok1128:                                      ; preds = %if.exit1111
  %646 = ptrtoint ptr %644 to i64, !dbg !2584
  %647 = urem i64 %646, 8, !dbg !2584
  %648 = icmp ne i64 %647, 0, !dbg !2584
  %649 = call i1 @llvm.expect.i1(i1 %648, i1 false), !dbg !2584
  br i1 %649, label %panic1129, label %checkok1136, !dbg !2584

checkok1136:                                      ; preds = %checkok1128
  %650 = load ptr, ptr %644, align 8, !dbg !2584
  store ptr %650, ptr %ptr1125, align 8, !dbg !2584
    #dbg_declare(ptr %slen, !2585, !DIExpression(), !2586)
  %651 = load ptr, ptr %temp, align 8, !dbg !2587
  %checknull1137 = icmp eq ptr %651, null, !dbg !2587
  %652 = call i1 @llvm.expect.i1(i1 %checknull1137, i1 false), !dbg !2587
  br i1 %652, label %panic1138, label %checkok1139, !dbg !2587

checkok1139:                                      ; preds = %checkok1136
  %653 = ptrtoint ptr %651 to i64, !dbg !2587
  %654 = urem i64 %653, 8, !dbg !2587
  %655 = icmp ne i64 %654, 0, !dbg !2587
  %656 = call i1 @llvm.expect.i1(i1 %655, i1 false), !dbg !2587
  br i1 %656, label %panic1140, label %checkok1147, !dbg !2587

checkok1147:                                      ; preds = %checkok1139
  %ptradd1148 = getelementptr inbounds i8, ptr %651, i64 8, !dbg !2587
  %657 = load i64, ptr %ptradd1148, align 8, !dbg !2587
  store i64 %657, ptr %slen, align 8, !dbg !2587
    #dbg_declare(ptr %len1149, !2588, !DIExpression(), !2589)
  %658 = load ptr, ptr %self, align 8
  %659 = call i64 @std.io.Formatter.out(ptr %retparam1151, ptr %658, i8 zeroext 91), !dbg !2590
  %not_err1152 = icmp eq i64 %659, 0, !dbg !2590
  %660 = call i1 @llvm.expect.i1(i1 %not_err1152, i1 true), !dbg !2590
  br i1 %660, label %after_check1154, label %assign_optional1153, !dbg !2590

assign_optional1153:                              ; preds = %checkok1147
  store i64 %659, ptr %error_var1150, align 8, !dbg !2590
  br label %guard_block1155, !dbg !2590

after_check1154:                                  ; preds = %checkok1147
  br label %noerr_block1159, !dbg !2590

guard_block1155:                                  ; preds = %assign_optional1153
  %661 = load ptr, ptr %self, align 8, !dbg !2591
  %ptradd1156 = getelementptr inbounds i8, ptr %661, i64 16, !dbg !2591
  %662 = load i32, ptr %flags1112, align 4, !dbg !2593
  store i32 %662, ptr %ptradd1156, align 8, !dbg !2593
  %663 = load ptr, ptr %self, align 8, !dbg !2594
  %ptradd1157 = getelementptr inbounds i8, ptr %663, i64 16, !dbg !2594
  %ptradd1158 = getelementptr inbounds i8, ptr %ptradd1157, i64 4, !dbg !2594
  %664 = load i32, ptr %width1114, align 4, !dbg !2595
  store i32 %664, ptr %ptradd1158, align 4, !dbg !2595
  %665 = load i64, ptr %error_var1150, align 8, !dbg !2595
  ret i64 %665, !dbg !2595

noerr_block1159:                                  ; preds = %after_check1154
  %666 = load i64, ptr %retparam1151, align 8, !dbg !2595
  store i64 %666, ptr %len1149, align 8, !dbg !2595
    #dbg_declare(ptr %i1160, !2596, !DIExpression(), !2598)
  store i64 0, ptr %i1160, align 8, !dbg !2599
  br label %loop.cond1161, !dbg !2599

loop.cond1161:                                    ; preds = %noerr_block1193, %noerr_block1159
  %667 = load i64, ptr %i1160, align 8, !dbg !2600
  %668 = load i64, ptr %slen, align 8, !dbg !2601
  %lt1162 = icmp ult i64 %667, %668, !dbg !2600
  br i1 %lt1162, label %loop.body1163, label %loop.exit1197, !dbg !2600

loop.body1163:                                    ; preds = %loop.cond1161
  %669 = load i64, ptr %i1160, align 8, !dbg !2602
  %neq1164 = icmp ne i64 0, %669, !dbg !2602
  br i1 %neq1164, label %if.then1165, label %if.exit1177, !dbg !2602

if.then1165:                                      ; preds = %loop.body1163
  %670 = load i64, ptr %len1149, align 8, !dbg !2604
  %671 = load ptr, ptr %self, align 8
  %672 = call i64 @std.io.Formatter.out_substr(ptr %retparam1167, ptr %671, ptr @.str.181, i64 2), !dbg !2605
  %not_err1168 = icmp eq i64 %672, 0, !dbg !2605
  %673 = call i1 @llvm.expect.i1(i1 %not_err1168, i1 true), !dbg !2605
  br i1 %673, label %after_check1170, label %assign_optional1169, !dbg !2605

assign_optional1169:                              ; preds = %if.then1165
  store i64 %672, ptr %error_var1166, align 8, !dbg !2605
  br label %guard_block1171, !dbg !2605

after_check1170:                                  ; preds = %if.then1165
  br label %noerr_block1175, !dbg !2605

guard_block1171:                                  ; preds = %assign_optional1169
  %674 = load ptr, ptr %self, align 8, !dbg !2606
  %ptradd1172 = getelementptr inbounds i8, ptr %674, i64 16, !dbg !2606
  %675 = load i32, ptr %flags1112, align 4, !dbg !2608
  store i32 %675, ptr %ptradd1172, align 8, !dbg !2608
  %676 = load ptr, ptr %self, align 8, !dbg !2609
  %ptradd1173 = getelementptr inbounds i8, ptr %676, i64 16, !dbg !2609
  %ptradd1174 = getelementptr inbounds i8, ptr %ptradd1173, i64 4, !dbg !2609
  %677 = load i32, ptr %width1114, align 4, !dbg !2610
  store i32 %677, ptr %ptradd1174, align 4, !dbg !2610
  %678 = load i64, ptr %error_var1166, align 8, !dbg !2610
  ret i64 %678, !dbg !2610

noerr_block1175:                                  ; preds = %after_check1170
  %679 = load i64, ptr %retparam1167, align 8, !dbg !2610
  %add1176 = add i64 %670, %679, !dbg !2604
  store i64 %add1176, ptr %len1149, align 8, !dbg !2604
  br label %if.exit1177, !dbg !2604

if.exit1177:                                      ; preds = %noerr_block1175, %loop.body1163
  %680 = load i64, ptr %len1149, align 8, !dbg !2611
  %681 = load ptr, ptr %ptr1125, align 8
  store ptr %681, ptr %ptr1179, align 8
  %682 = load i64, ptr %inner1086, align 8
  store i64 %682, ptr %type1180, align 8
  %683 = load ptr, ptr %ptr1179, align 8, !dbg !2612
  %684 = load i64, ptr %type1180, align 8, !dbg !2615
  %685 = insertvalue %any undef, ptr %683, 0, !dbg !2615
  %686 = insertvalue %any %685, i64 %684, 1, !dbg !2615
  %687 = load ptr, ptr %self, align 8
  store %any %686, ptr %taddr1182, align 8
  %lo1183 = load i64, ptr %taddr1182, align 8
  %ptradd1184 = getelementptr inbounds i8, ptr %taddr1182, i64 8
  %hi1185 = load ptr, ptr %ptradd1184, align 8
  %688 = call i64 @std.io.Formatter.out_str(ptr %retparam1181, ptr %687, i64 %lo1183, ptr %hi1185), !dbg !2616
  %not_err1186 = icmp eq i64 %688, 0, !dbg !2616
  %689 = call i1 @llvm.expect.i1(i1 %not_err1186, i1 true), !dbg !2616
  br i1 %689, label %after_check1188, label %assign_optional1187, !dbg !2616

assign_optional1187:                              ; preds = %if.exit1177
  store i64 %688, ptr %error_var1178, align 8, !dbg !2616
  br label %guard_block1189, !dbg !2616

after_check1188:                                  ; preds = %if.exit1177
  br label %noerr_block1193, !dbg !2616

guard_block1189:                                  ; preds = %assign_optional1187
  %690 = load ptr, ptr %self, align 8, !dbg !2617
  %ptradd1190 = getelementptr inbounds i8, ptr %690, i64 16, !dbg !2617
  %691 = load i32, ptr %flags1112, align 4, !dbg !2619
  store i32 %691, ptr %ptradd1190, align 8, !dbg !2619
  %692 = load ptr, ptr %self, align 8, !dbg !2620
  %ptradd1191 = getelementptr inbounds i8, ptr %692, i64 16, !dbg !2620
  %ptradd1192 = getelementptr inbounds i8, ptr %ptradd1191, i64 4, !dbg !2620
  %693 = load i32, ptr %width1114, align 4, !dbg !2621
  store i32 %693, ptr %ptradd1192, align 4, !dbg !2621
  %694 = load i64, ptr %error_var1178, align 8, !dbg !2621
  ret i64 %694, !dbg !2621

noerr_block1193:                                  ; preds = %after_check1188
  %695 = load i64, ptr %retparam1181, align 8, !dbg !2621
  %add1194 = add i64 %680, %695, !dbg !2611
  store i64 %add1194, ptr %len1149, align 8, !dbg !2611
  %696 = load ptr, ptr %ptr1125, align 8, !dbg !2622
  %697 = load i64, ptr %size1120, align 8, !dbg !2623
  %ptradd_any1195 = getelementptr i8, ptr %696, i64 %697, !dbg !2622
  store ptr %ptradd_any1195, ptr %ptr1125, align 8, !dbg !2622
  %698 = load i64, ptr %i1160, align 8, !dbg !2624
  %add1196 = add i64 %698, 1, !dbg !2624
  store i64 %add1196, ptr %i1160, align 8, !dbg !2624
  br label %loop.cond1161, !dbg !2624

loop.exit1197:                                    ; preds = %loop.cond1161
  %699 = load i64, ptr %len1149, align 8, !dbg !2625
  %700 = load ptr, ptr %self, align 8
  %701 = call i64 @std.io.Formatter.out(ptr %retparam1199, ptr %700, i8 zeroext 93), !dbg !2626
  %not_err1200 = icmp eq i64 %701, 0, !dbg !2626
  %702 = call i1 @llvm.expect.i1(i1 %not_err1200, i1 true), !dbg !2626
  br i1 %702, label %after_check1202, label %assign_optional1201, !dbg !2626

assign_optional1201:                              ; preds = %loop.exit1197
  store i64 %701, ptr %error_var1198, align 8, !dbg !2626
  br label %guard_block1203, !dbg !2626

after_check1202:                                  ; preds = %loop.exit1197
  br label %noerr_block1207, !dbg !2626

guard_block1203:                                  ; preds = %assign_optional1201
  %703 = load ptr, ptr %self, align 8, !dbg !2627
  %ptradd1204 = getelementptr inbounds i8, ptr %703, i64 16, !dbg !2627
  %704 = load i32, ptr %flags1112, align 4, !dbg !2629
  store i32 %704, ptr %ptradd1204, align 8, !dbg !2629
  %705 = load ptr, ptr %self, align 8, !dbg !2630
  %ptradd1205 = getelementptr inbounds i8, ptr %705, i64 16, !dbg !2630
  %ptradd1206 = getelementptr inbounds i8, ptr %ptradd1205, i64 4, !dbg !2630
  %706 = load i32, ptr %width1114, align 4, !dbg !2631
  store i32 %706, ptr %ptradd1206, align 4, !dbg !2631
  %707 = load i64, ptr %error_var1198, align 8, !dbg !2631
  ret i64 %707, !dbg !2631

noerr_block1207:                                  ; preds = %after_check1202
  %708 = load i64, ptr %retparam1199, align 8, !dbg !2631
  %add1208 = add i64 %699, %708, !dbg !2625
  store i64 %add1208, ptr %len1149, align 8, !dbg !2625
  %709 = load i64, ptr %len1149, align 8, !dbg !2632
  %710 = load ptr, ptr %self, align 8, !dbg !2633
  %ptradd1210 = getelementptr inbounds i8, ptr %710, i64 16, !dbg !2633
  %711 = load i32, ptr %flags1112, align 4, !dbg !2635
  store i32 %711, ptr %ptradd1210, align 8, !dbg !2635
  %712 = load ptr, ptr %self, align 8, !dbg !2636
  %ptradd1211 = getelementptr inbounds i8, ptr %712, i64 16, !dbg !2636
  %ptradd1212 = getelementptr inbounds i8, ptr %ptradd1211, i64 4, !dbg !2636
  %713 = load i32, ptr %width1114, align 4, !dbg !2637
  store i32 %713, ptr %ptradd1212, align 4, !dbg !2637
  store i64 %709, ptr %0, align 8, !dbg !2637
  ret i64 0, !dbg !2637

switch.case1213:                                  ; preds = %switch.entry141, %switch.entry141
  store %"char[]" { ptr @.str.182, i64 15 }, ptr %string1214, align 8
  %lo1215 = load ptr, ptr %string1214, align 8, !dbg !2638
  %ptradd1216 = getelementptr inbounds i8, ptr %string1214, i64 8, !dbg !2638
  %hi1217 = load i64, ptr %ptradd1216, align 8, !dbg !2638
  store %"any[]" zeroinitializer, ptr %indirectarg1218, align 8
  call void @std.core.builtin.panicf(ptr %lo1215, i64 %hi1217, ptr @.str.183, i64 12, ptr @.str.184, i64 17, i32 321, ptr byval(%"any[]") align 8 %indirectarg1218), !dbg !2642
  unreachable, !dbg !2643

switch.exit1219:                                  ; preds = %switch.entry141
  %714 = load ptr, ptr %self, align 8
  %715 = call i64 @std.io.Formatter.out_substr(ptr %retparam1221, ptr %714, ptr @.str.185, i64 12), !dbg !2644
  %not_err1222 = icmp eq i64 %715, 0, !dbg !2644
  %716 = call i1 @llvm.expect.i1(i1 %not_err1222, i1 true), !dbg !2644
  br i1 %716, label %after_check1224, label %assign_optional1223, !dbg !2644

assign_optional1223:                              ; preds = %switch.exit1219
  store i64 %715, ptr %reterr1220, align 8, !dbg !2644
  br label %err_retblock1225, !dbg !2644

after_check1224:                                  ; preds = %switch.exit1219
  %717 = load i64, ptr %retparam1221, align 8, !dbg !2644
  store i64 %717, ptr %0, align 8, !dbg !2644
  ret i64 0, !dbg !2644

err_retblock1225:                                 ; preds = %assign_optional1223
  %718 = load i64, ptr %reterr1220, align 8, !dbg !2644
  ret i64 %718, !dbg !2644

panic:                                            ; preds = %entry
  %719 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2064
  call void %719(ptr @.panic_msg, i64 62, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 149) #5, !dbg !2064
  unreachable, !dbg !2064

panic11:                                          ; preds = %switch.case9
  %720 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2075
  call void %720(ptr @.panic_msg.131, i64 58, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 159) #5, !dbg !2075
  unreachable, !dbg !2075

panic13:                                          ; preds = %checkok12
  store i64 8, ptr %taddr, align 8
  %721 = insertvalue %any undef, ptr %taddr, 0
  %722 = insertvalue %any %721, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr14, align 8
  %723 = insertvalue %any undef, ptr %taddr14, 0
  %724 = insertvalue %any %723, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %722, ptr %varargslots, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %724, ptr %ptradd15, align 16
  %725 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %725, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 159, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2075
  unreachable, !dbg !2075

panic26:                                          ; preds = %switch.case23
  %726 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2077
  call void %726(ptr @.panic_msg.132, i64 49, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 162) #5, !dbg !2077
  unreachable, !dbg !2077

panic28:                                          ; preds = %checkok27
  store i64 8, ptr %taddr29, align 8
  %727 = insertvalue %any undef, ptr %taddr29, 0
  %728 = insertvalue %any %727, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %35, ptr %taddr30, align 8
  %729 = insertvalue %any undef, ptr %taddr30, 0
  %730 = insertvalue %any %729, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %728, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %730, ptr %ptradd32, align 16
  %731 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %731, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 162, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !2077
  unreachable, !dbg !2077

panic110:                                         ; preds = %switch.case107
  %732 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2133
  call void %732(ptr @.panic_msg.138, i64 54, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 189) #5, !dbg !2133
  unreachable, !dbg !2133

panic153:                                         ; preds = %assert_ok150
  %733 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2161
  call void %733(ptr @.panic_msg.36, i64 45, ptr @.file.50, i64 10, ptr @.func.128, i64 7, i32 199) #5, !dbg !2161
  unreachable, !dbg !2161

panic155:                                         ; preds = %checkok154
  store i64 8, ptr %taddr156, align 8
  %734 = insertvalue %any undef, ptr %taddr156, 0
  %735 = insertvalue %any %734, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %125, ptr %taddr157, align 8
  %736 = insertvalue %any undef, ptr %taddr157, 0
  %737 = insertvalue %any %736, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %735, ptr %varargslots158, align 16
  %ptradd159 = getelementptr inbounds i8, ptr %varargslots158, i64 16
  store %any %737, ptr %ptradd159, align 16
  %738 = insertvalue %"any[]" undef, ptr %varargslots158, 0
  %"$$temp160" = insertvalue %"any[]" %738, i64 2, 1
  store %"any[]" %"$$temp160", ptr %indirectarg161, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.50, i64 10, ptr @.func.128, i64 7, i32 199, ptr byval(%"any[]") align 8 %indirectarg161) #5, !dbg !2161
  unreachable, !dbg !2161

panic164:                                         ; preds = %checkok162
  %739 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2164
  call void %739(ptr @.panic_msg.36, i64 45, ptr @.file.50, i64 10, ptr @.func.128, i64 7, i32 199) #5, !dbg !2164
  unreachable, !dbg !2164

panic166:                                         ; preds = %checkok165
  store i64 8, ptr %taddr167, align 8
  %740 = insertvalue %any undef, ptr %taddr167, 0
  %741 = insertvalue %any %740, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %132, ptr %taddr168, align 8
  %742 = insertvalue %any undef, ptr %taddr168, 0
  %743 = insertvalue %any %742, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %741, ptr %varargslots169, align 16
  %ptradd170 = getelementptr inbounds i8, ptr %varargslots169, i64 16
  store %any %743, ptr %ptradd170, align 16
  %744 = insertvalue %"any[]" undef, ptr %varargslots169, 0
  %"$$temp171" = insertvalue %"any[]" %744, i64 2, 1
  store %"any[]" %"$$temp171", ptr %indirectarg172, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.50, i64 10, ptr @.func.128, i64 7, i32 199, ptr byval(%"any[]") align 8 %indirectarg172) #5, !dbg !2164
  unreachable, !dbg !2164

panic214:                                         ; preds = %switch.case212
  %745 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2193
  call void %745(ptr @.panic_msg.146, i64 52, ptr @.file.142, i64 8, ptr @.func.128, i64 7, i32 35) #5, !dbg !2193
  unreachable, !dbg !2193

panic228:                                         ; preds = %switch.case226
  %746 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2204
  call void %746(ptr @.panic_msg.149, i64 53, ptr @.file.142, i64 8, ptr @.func.128, i64 7, i32 39) #5, !dbg !2204
  unreachable, !dbg !2204

panic230:                                         ; preds = %checkok229
  store i64 2, ptr %taddr231, align 8
  %747 = insertvalue %any undef, ptr %taddr231, 0
  %748 = insertvalue %any %747, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %170, ptr %taddr232, align 8
  %749 = insertvalue %any undef, ptr %taddr232, 0
  %750 = insertvalue %any %749, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %748, ptr %varargslots233, align 16
  %ptradd234 = getelementptr inbounds i8, ptr %varargslots233, i64 16
  store %any %750, ptr %ptradd234, align 16
  %751 = insertvalue %"any[]" undef, ptr %varargslots233, 0
  %"$$temp235" = insertvalue %"any[]" %751, i64 2, 1
  store %"any[]" %"$$temp235", ptr %indirectarg236, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.142, i64 8, ptr @.func.128, i64 7, i32 39, ptr byval(%"any[]") align 8 %indirectarg236) #5, !dbg !2204
  unreachable, !dbg !2204

panic263:                                         ; preds = %switch.case260
  %752 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2219
  call void %752(ptr @.panic_msg.150, i64 51, ptr @.file.142, i64 8, ptr @.func.128, i64 7, i32 44) #5, !dbg !2219
  unreachable, !dbg !2219

panic265:                                         ; preds = %checkok264
  store i64 4, ptr %taddr266, align 8
  %753 = insertvalue %any undef, ptr %taddr266, 0
  %754 = insertvalue %any %753, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %189, ptr %taddr267, align 8
  %755 = insertvalue %any undef, ptr %taddr267, 0
  %756 = insertvalue %any %755, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %754, ptr %varargslots268, align 16
  %ptradd269 = getelementptr inbounds i8, ptr %varargslots268, i64 16
  store %any %756, ptr %ptradd269, align 16
  %757 = insertvalue %"any[]" undef, ptr %varargslots268, 0
  %"$$temp270" = insertvalue %"any[]" %757, i64 2, 1
  store %"any[]" %"$$temp270", ptr %indirectarg271, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.142, i64 8, ptr @.func.128, i64 7, i32 44, ptr byval(%"any[]") align 8 %indirectarg271) #5, !dbg !2219
  unreachable, !dbg !2219

panic302:                                         ; preds = %switch.case300
  %758 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2234
  call void %758(ptr @.panic_msg.151, i64 52, ptr @.file.142, i64 8, ptr @.func.128, i64 7, i32 49) #5, !dbg !2234
  unreachable, !dbg !2234

panic304:                                         ; preds = %checkok303
  store i64 8, ptr %taddr305, align 8
  %759 = insertvalue %any undef, ptr %taddr305, 0
  %760 = insertvalue %any %759, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %208, ptr %taddr306, align 8
  %761 = insertvalue %any undef, ptr %taddr306, 0
  %762 = insertvalue %any %761, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %760, ptr %varargslots307, align 16
  %ptradd308 = getelementptr inbounds i8, ptr %varargslots307, i64 16
  store %any %762, ptr %ptradd308, align 16
  %763 = insertvalue %"any[]" undef, ptr %varargslots307, 0
  %"$$temp309" = insertvalue %"any[]" %763, i64 2, 1
  store %"any[]" %"$$temp309", ptr %indirectarg310, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.142, i64 8, ptr @.func.128, i64 7, i32 49, ptr byval(%"any[]") align 8 %indirectarg310) #5, !dbg !2234
  unreachable, !dbg !2234

panic339:                                         ; preds = %switch.case336
  %764 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2250
  call void %764(ptr @.panic_msg.152, i64 54, ptr @.file.142, i64 8, ptr @.func.128, i64 7, i32 54) #5, !dbg !2250
  unreachable, !dbg !2250

panic341:                                         ; preds = %checkok340
  store i64 16, ptr %taddr342, align 8
  %765 = insertvalue %any undef, ptr %taddr342, 0
  %766 = insertvalue %any %765, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %227, ptr %taddr343, align 8
  %767 = insertvalue %any undef, ptr %taddr343, 0
  %768 = insertvalue %any %767, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %766, ptr %varargslots344, align 16
  %ptradd345 = getelementptr inbounds i8, ptr %varargslots344, i64 16
  store %any %768, ptr %ptradd345, align 16
  %769 = insertvalue %"any[]" undef, ptr %varargslots344, 0
  %"$$temp346" = insertvalue %"any[]" %769, i64 2, 1
  store %"any[]" %"$$temp346", ptr %indirectarg347, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.142, i64 8, ptr @.func.128, i64 7, i32 54, ptr byval(%"any[]") align 8 %indirectarg347) #5, !dbg !2250
  unreachable, !dbg !2250

panic377:                                         ; preds = %switch.case374
  %770 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2265
  call void %770(ptr @.panic_msg.146, i64 52, ptr @.file.142, i64 8, ptr @.func.128, i64 7, i32 59) #5, !dbg !2265
  unreachable, !dbg !2265

panic394:                                         ; preds = %switch.case391
  %771 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2276
  call void %771(ptr @.panic_msg.153, i64 54, ptr @.file.142, i64 8, ptr @.func.128, i64 7, i32 63) #5, !dbg !2276
  unreachable, !dbg !2276

panic396:                                         ; preds = %checkok395
  store i64 2, ptr %taddr397, align 8
  %772 = insertvalue %any undef, ptr %taddr397, 0
  %773 = insertvalue %any %772, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %256, ptr %taddr398, align 8
  %774 = insertvalue %any undef, ptr %taddr398, 0
  %775 = insertvalue %any %774, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %773, ptr %varargslots399, align 16
  %ptradd400 = getelementptr inbounds i8, ptr %varargslots399, i64 16
  store %any %775, ptr %ptradd400, align 16
  %776 = insertvalue %"any[]" undef, ptr %varargslots399, 0
  %"$$temp401" = insertvalue %"any[]" %776, i64 2, 1
  store %"any[]" %"$$temp401", ptr %indirectarg402, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.142, i64 8, ptr @.func.128, i64 7, i32 63, ptr byval(%"any[]") align 8 %indirectarg402) #5, !dbg !2276
  unreachable, !dbg !2276

panic424:                                         ; preds = %switch.case421
  %777 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2288
  call void %777(ptr @.panic_msg.154, i64 52, ptr @.file.142, i64 8, ptr @.func.128, i64 7, i32 67) #5, !dbg !2288
  unreachable, !dbg !2288

panic426:                                         ; preds = %checkok425
  store i64 4, ptr %taddr427, align 8
  %778 = insertvalue %any undef, ptr %taddr427, 0
  %779 = insertvalue %any %778, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %272, ptr %taddr428, align 8
  %780 = insertvalue %any undef, ptr %taddr428, 0
  %781 = insertvalue %any %780, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %779, ptr %varargslots429, align 16
  %ptradd430 = getelementptr inbounds i8, ptr %varargslots429, i64 16
  store %any %781, ptr %ptradd430, align 16
  %782 = insertvalue %"any[]" undef, ptr %varargslots429, 0
  %"$$temp431" = insertvalue %"any[]" %782, i64 2, 1
  store %"any[]" %"$$temp431", ptr %indirectarg432, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.142, i64 8, ptr @.func.128, i64 7, i32 67, ptr byval(%"any[]") align 8 %indirectarg432) #5, !dbg !2288
  unreachable, !dbg !2288

panic454:                                         ; preds = %switch.case451
  %783 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2300
  call void %783(ptr @.panic_msg.155, i64 53, ptr @.file.142, i64 8, ptr @.func.128, i64 7, i32 71) #5, !dbg !2300
  unreachable, !dbg !2300

panic456:                                         ; preds = %checkok455
  store i64 8, ptr %taddr457, align 8
  %784 = insertvalue %any undef, ptr %taddr457, 0
  %785 = insertvalue %any %784, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %288, ptr %taddr458, align 8
  %786 = insertvalue %any undef, ptr %taddr458, 0
  %787 = insertvalue %any %786, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %785, ptr %varargslots459, align 16
  %ptradd460 = getelementptr inbounds i8, ptr %varargslots459, i64 16
  store %any %787, ptr %ptradd460, align 16
  %788 = insertvalue %"any[]" undef, ptr %varargslots459, 0
  %"$$temp461" = insertvalue %"any[]" %788, i64 2, 1
  store %"any[]" %"$$temp461", ptr %indirectarg462, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.142, i64 8, ptr @.func.128, i64 7, i32 71, ptr byval(%"any[]") align 8 %indirectarg462) #5, !dbg !2300
  unreachable, !dbg !2300

panic481:                                         ; preds = %switch.case478
  %789 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2313
  call void %789(ptr @.panic_msg.156, i64 55, ptr @.file.142, i64 8, ptr @.func.128, i64 7, i32 75) #5, !dbg !2313
  unreachable, !dbg !2313

panic483:                                         ; preds = %checkok482
  store i64 16, ptr %taddr484, align 8
  %790 = insertvalue %any undef, ptr %taddr484, 0
  %791 = insertvalue %any %790, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %304, ptr %taddr485, align 8
  %792 = insertvalue %any undef, ptr %taddr485, 0
  %793 = insertvalue %any %792, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %791, ptr %varargslots486, align 16
  %ptradd487 = getelementptr inbounds i8, ptr %varargslots486, i64 16
  store %any %793, ptr %ptradd487, align 16
  %794 = insertvalue %"any[]" undef, ptr %varargslots486, 0
  %"$$temp488" = insertvalue %"any[]" %794, i64 2, 1
  store %"any[]" %"$$temp488", ptr %indirectarg489, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.142, i64 8, ptr @.func.128, i64 7, i32 75, ptr byval(%"any[]") align 8 %indirectarg489) #5, !dbg !2313
  unreachable, !dbg !2313

panic537:                                         ; preds = %check_type_ok533
  store i64 %330, ptr %taddr538, align 8
  %795 = insertvalue %any undef, ptr %taddr538, 0
  %796 = insertvalue %any %795, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %332, ptr %taddr539, align 8
  %797 = insertvalue %any undef, ptr %taddr539, 0
  %798 = insertvalue %any %797, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %796, ptr %varargslots540, align 16
  %ptradd541 = getelementptr inbounds i8, ptr %varargslots540, i64 16
  store %any %798, ptr %ptradd541, align 16
  %799 = insertvalue %"any[]" undef, ptr %varargslots540, 0
  %"$$temp542" = insertvalue %"any[]" %799, i64 2, 1
  store %"any[]" %"$$temp542", ptr %indirectarg543, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 200, ptr byval(%"any[]") align 8 %indirectarg543) #5, !dbg !2330
  unreachable, !dbg !2330

panic587:                                         ; preds = %if.then584
  %800 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2342
  call void %800(ptr @.panic_msg.166, i64 52, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 212) #5, !dbg !2342
  unreachable, !dbg !2342

panic589:                                         ; preds = %checkok588
  store i64 8, ptr %taddr590, align 8
  %801 = insertvalue %any undef, ptr %taddr590, 0
  %802 = insertvalue %any %801, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %363, ptr %taddr591, align 8
  %803 = insertvalue %any undef, ptr %taddr591, 0
  %804 = insertvalue %any %803, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %802, ptr %varargslots592, align 16
  %ptradd593 = getelementptr inbounds i8, ptr %varargslots592, i64 16
  store %any %804, ptr %ptradd593, align 16
  %805 = insertvalue %"any[]" undef, ptr %varargslots592, 0
  %"$$temp594" = insertvalue %"any[]" %805, i64 2, 1
  store %"any[]" %"$$temp594", ptr %indirectarg595, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 212, ptr byval(%"any[]") align 8 %indirectarg595) #5, !dbg !2342
  unreachable, !dbg !2342

panic611:                                         ; preds = %if.then608
  %806 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2346
  call void %806(ptr @.panic_msg.167, i64 53, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 216) #5, !dbg !2346
  unreachable, !dbg !2346

panic613:                                         ; preds = %checkok612
  store i64 8, ptr %taddr614, align 8
  %807 = insertvalue %any undef, ptr %taddr614, 0
  %808 = insertvalue %any %807, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %375, ptr %taddr615, align 8
  %809 = insertvalue %any undef, ptr %taddr615, 0
  %810 = insertvalue %any %809, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %808, ptr %varargslots616, align 16
  %ptradd617 = getelementptr inbounds i8, ptr %varargslots616, i64 16
  store %any %810, ptr %ptradd617, align 16
  %811 = insertvalue %"any[]" undef, ptr %varargslots616, 0
  %"$$temp618" = insertvalue %"any[]" %811, i64 2, 1
  store %"any[]" %"$$temp618", ptr %indirectarg619, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 216, ptr byval(%"any[]") align 8 %indirectarg619) #5, !dbg !2346
  unreachable, !dbg !2346

panic623:                                         ; preds = %cond.lhs
  %812 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2348
  call void %812(ptr @.panic_msg.168, i64 54, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 216) #5, !dbg !2348
  unreachable, !dbg !2348

panic625:                                         ; preds = %checkok624
  store i64 8, ptr %taddr626, align 8
  %813 = insertvalue %any undef, ptr %taddr626, 0
  %814 = insertvalue %any %813, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %382, ptr %taddr627, align 8
  %815 = insertvalue %any undef, ptr %taddr627, 0
  %816 = insertvalue %any %815, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %814, ptr %varargslots628, align 16
  %ptradd629 = getelementptr inbounds i8, ptr %varargslots628, i64 16
  store %any %816, ptr %ptradd629, align 16
  %817 = insertvalue %"any[]" undef, ptr %varargslots628, 0
  %"$$temp630" = insertvalue %"any[]" %817, i64 2, 1
  store %"any[]" %"$$temp630", ptr %indirectarg631, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 216, ptr byval(%"any[]") align 8 %indirectarg631) #5, !dbg !2348
  unreachable, !dbg !2348

panic646:                                         ; preds = %if.then643
  %818 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2352
  call void %818(ptr @.panic_msg.170, i64 53, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 220) #5, !dbg !2352
  unreachable, !dbg !2352

panic648:                                         ; preds = %checkok647
  store i64 8, ptr %taddr649, align 8
  %819 = insertvalue %any undef, ptr %taddr649, 0
  %820 = insertvalue %any %819, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %399, ptr %taddr650, align 8
  %821 = insertvalue %any undef, ptr %taddr650, 0
  %822 = insertvalue %any %821, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %820, ptr %varargslots651, align 16
  %ptradd652 = getelementptr inbounds i8, ptr %varargslots651, i64 16
  store %any %822, ptr %ptradd652, align 16
  %823 = insertvalue %"any[]" undef, ptr %varargslots651, 0
  %"$$temp653" = insertvalue %"any[]" %823, i64 2, 1
  store %"any[]" %"$$temp653", ptr %indirectarg654, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 220, ptr byval(%"any[]") align 8 %indirectarg654) #5, !dbg !2352
  unreachable, !dbg !2352

panic659:                                         ; preds = %cond.lhs657
  %824 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2354
  call void %824(ptr @.panic_msg.171, i64 54, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 220) #5, !dbg !2354
  unreachable, !dbg !2354

panic661:                                         ; preds = %checkok660
  store i64 8, ptr %taddr662, align 8
  %825 = insertvalue %any undef, ptr %taddr662, 0
  %826 = insertvalue %any %825, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %406, ptr %taddr663, align 8
  %827 = insertvalue %any undef, ptr %taddr663, 0
  %828 = insertvalue %any %827, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %826, ptr %varargslots664, align 16
  %ptradd665 = getelementptr inbounds i8, ptr %varargslots664, i64 16
  store %any %828, ptr %ptradd665, align 16
  %829 = insertvalue %"any[]" undef, ptr %varargslots664, 0
  %"$$temp666" = insertvalue %"any[]" %829, i64 2, 1
  store %"any[]" %"$$temp666", ptr %indirectarg667, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 220, ptr byval(%"any[]") align 8 %indirectarg667) #5, !dbg !2354
  unreachable, !dbg !2354

panic682:                                         ; preds = %if.exit678
  %830 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2357
  call void %830(ptr @.panic_msg.36, i64 45, ptr @.file.50, i64 10, ptr @.func.128, i64 7, i32 199) #5, !dbg !2357
  unreachable, !dbg !2357

panic684:                                         ; preds = %checkok683
  store i64 8, ptr %taddr685, align 8
  %831 = insertvalue %any undef, ptr %taddr685, 0
  %832 = insertvalue %any %831, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %422, ptr %taddr686, align 8
  %833 = insertvalue %any undef, ptr %taddr686, 0
  %834 = insertvalue %any %833, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %832, ptr %varargslots687, align 16
  %ptradd688 = getelementptr inbounds i8, ptr %varargslots687, i64 16
  store %any %834, ptr %ptradd688, align 16
  %835 = insertvalue %"any[]" undef, ptr %varargslots687, 0
  %"$$temp689" = insertvalue %"any[]" %835, i64 2, 1
  store %"any[]" %"$$temp689", ptr %indirectarg690, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.50, i64 10, ptr @.func.128, i64 7, i32 199, ptr byval(%"any[]") align 8 %indirectarg690) #5, !dbg !2357
  unreachable, !dbg !2357

panic693:                                         ; preds = %checkok691
  %836 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2360
  call void %836(ptr @.panic_msg.36, i64 45, ptr @.file.50, i64 10, ptr @.func.128, i64 7, i32 199) #5, !dbg !2360
  unreachable, !dbg !2360

panic695:                                         ; preds = %checkok694
  store i64 8, ptr %taddr696, align 8
  %837 = insertvalue %any undef, ptr %taddr696, 0
  %838 = insertvalue %any %837, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %429, ptr %taddr697, align 8
  %839 = insertvalue %any undef, ptr %taddr697, 0
  %840 = insertvalue %any %839, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %838, ptr %varargslots698, align 16
  %ptradd699 = getelementptr inbounds i8, ptr %varargslots698, i64 16
  store %any %840, ptr %ptradd699, align 16
  %841 = insertvalue %"any[]" undef, ptr %varargslots698, 0
  %"$$temp700" = insertvalue %"any[]" %841, i64 2, 1
  store %"any[]" %"$$temp700", ptr %indirectarg701, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.50, i64 10, ptr @.func.128, i64 7, i32 199, ptr byval(%"any[]") align 8 %indirectarg701) #5, !dbg !2360
  unreachable, !dbg !2360

panic782:                                         ; preds = %if.then780
  %842 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2374
  call void %842(ptr @.panic_msg.173, i64 48, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 228) #5, !dbg !2374
  unreachable, !dbg !2374

panic784:                                         ; preds = %checkok783
  store i64 8, ptr %taddr785, align 8
  %843 = insertvalue %any undef, ptr %taddr785, 0
  %844 = insertvalue %any %843, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %449, ptr %taddr786, align 8
  %845 = insertvalue %any undef, ptr %taddr786, 0
  %846 = insertvalue %any %845, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %844, ptr %varargslots787, align 16
  %ptradd788 = getelementptr inbounds i8, ptr %varargslots787, i64 16
  store %any %846, ptr %ptradd788, align 16
  %847 = insertvalue %"any[]" undef, ptr %varargslots787, 0
  %"$$temp789" = insertvalue %"any[]" %847, i64 2, 1
  store %"any[]" %"$$temp789", ptr %indirectarg790, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 228, ptr byval(%"any[]") align 8 %indirectarg790) #5, !dbg !2374
  unreachable, !dbg !2374

panic1127:                                        ; preds = %if.exit1111
  %848 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2584
  call void %848(ptr @.panic_msg.180, i64 45, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 308) #5, !dbg !2584
  unreachable, !dbg !2584

panic1129:                                        ; preds = %checkok1128
  store i64 8, ptr %taddr1130, align 8
  %849 = insertvalue %any undef, ptr %taddr1130, 0
  %850 = insertvalue %any %849, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %647, ptr %taddr1131, align 8
  %851 = insertvalue %any undef, ptr %taddr1131, 0
  %852 = insertvalue %any %851, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %850, ptr %varargslots1132, align 16
  %ptradd1133 = getelementptr inbounds i8, ptr %varargslots1132, i64 16
  store %any %852, ptr %ptradd1133, align 16
  %853 = insertvalue %"any[]" undef, ptr %varargslots1132, 0
  %"$$temp1134" = insertvalue %"any[]" %853, i64 2, 1
  store %"any[]" %"$$temp1134", ptr %indirectarg1135, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 308, ptr byval(%"any[]") align 8 %indirectarg1135) #5, !dbg !2584
  unreachable, !dbg !2584

panic1138:                                        ; preds = %checkok1136
  %854 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2587
  call void %854(ptr @.panic_msg.180, i64 45, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 309) #5, !dbg !2587
  unreachable, !dbg !2587

panic1140:                                        ; preds = %checkok1139
  store i64 8, ptr %taddr1141, align 8
  %855 = insertvalue %any undef, ptr %taddr1141, 0
  %856 = insertvalue %any %855, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %654, ptr %taddr1142, align 8
  %857 = insertvalue %any undef, ptr %taddr1142, 0
  %858 = insertvalue %any %857, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %856, ptr %varargslots1143, align 16
  %ptradd1144 = getelementptr inbounds i8, ptr %varargslots1143, i64 16
  store %any %858, ptr %ptradd1144, align 16
  %859 = insertvalue %"any[]" undef, ptr %varargslots1143, 0
  %"$$temp1145" = insertvalue %"any[]" %859, i64 2, 1
  store %"any[]" %"$$temp1145", ptr %indirectarg1146, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.118, i64 12, ptr @.func.128, i64 7, i32 309, ptr byval(%"any[]") align 8 %indirectarg1146) #5, !dbg !2587
  unreachable, !dbg !2587
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Formatter.vprintf(ptr %0, ptr %1, ptr %2, i64 %3, ptr %4, i64 %5) #0 comdat !dbg !2645 {
entry:
  %self = alloca ptr, align 8
  %format = alloca %"char[]", align 8
  %anys = alloca %"any[]", align 8
  %total_len = alloca i64, align 8
  %format_len = alloca i64, align 8
  %variant_index = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %f = alloca ptr, align 8
  %retparam18 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %taddr26 = alloca i64, align 8
  %varargslots27 = alloca [2 x %any], align 16
  %indirectarg30 = alloca %"any[]", align 8
  %error_var34 = alloca i64, align 8
  %retparam35 = alloca i64, align 8
  %switch = alloca i8, align 1
  %reterr57 = alloca i64, align 8
  %f58 = alloca ptr, align 8
  %retparam59 = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %taddr68 = alloca i64, align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %w = alloca i32, align 4
  %w.f = alloca i64, align 8
  %retparam77 = alloca i32, align 4
  %temp_err = alloca i64, align 8
  %reterr85 = alloca i64, align 8
  %f86 = alloca ptr, align 8
  %retparam87 = alloca i64, align 8
  %taddr95 = alloca i64, align 8
  %taddr96 = alloca i64, align 8
  %varargslots97 = alloca [2 x %any], align 16
  %indirectarg100 = alloca %"any[]", align 8
  %reterr117 = alloca i64, align 8
  %f118 = alloca ptr, align 8
  %retparam119 = alloca i64, align 8
  %prec = alloca i32, align 4
  %prec.f = alloca i64, align 8
  %retparam126 = alloca i32, align 4
  %temp_err131 = alloca i64, align 8
  %reterr140 = alloca i64, align 8
  %f141 = alloca ptr, align 8
  %retparam142 = alloca i64, align 8
  %taddr153 = alloca i64, align 8
  %taddr154 = alloca i64, align 8
  %varargslots155 = alloca [2 x %any], align 16
  %indirectarg158 = alloca %"any[]", align 8
  %base = alloca i32, align 4
  %self165 = alloca ptr, align 8
  %f166 = alloca i64, align 8
  %blockret = alloca i64, align 8
  %error_var176 = alloca i64, align 8
  %retparam177 = alloca i64, align 8
  %current = alloca %any, align 8
  %taddr189 = alloca i64, align 8
  %taddr190 = alloca i64, align 8
  %varargslots191 = alloca [2 x %any], align 16
  %indirectarg194 = alloca %"any[]", align 8
  %switch196 = alloca i8, align 1
  %error_var212 = alloca i64, align 8
  %f213 = alloca ptr, align 8
  %len = alloca i64, align 8
  %len.f = alloca i64, align 8
  %retparam215 = alloca double, align 8
  %retparam220 = alloca i64, align 8
  %err = alloca i64, align 8
  %switch233 = alloca i64, align 8
  %self238 = alloca ptr, align 8
  %f239 = alloca i64, align 8
  %blockret240 = alloca i64, align 8
  %self253 = alloca ptr, align 8
  %f254 = alloca i64, align 8
  %blockret255 = alloca i64, align 8
  %error_var266 = alloca i64, align 8
  %retparam267 = alloca i64, align 8
  %error_var281 = alloca i64, align 8
  %f282 = alloca ptr, align 8
  %len284 = alloca i64, align 8
  %len.f285 = alloca i64, align 8
  %retparam286 = alloca double, align 8
  %retparam293 = alloca i64, align 8
  %err298 = alloca i64, align 8
  %switch307 = alloca i64, align 8
  %self313 = alloca ptr, align 8
  %f314 = alloca i64, align 8
  %blockret315 = alloca i64, align 8
  %self328 = alloca ptr, align 8
  %f329 = alloca i64, align 8
  %blockret330 = alloca i64, align 8
  %error_var341 = alloca i64, align 8
  %retparam342 = alloca i64, align 8
  %error_var356 = alloca i64, align 8
  %f357 = alloca ptr, align 8
  %len359 = alloca i64, align 8
  %len.f360 = alloca i64, align 8
  %retparam361 = alloca double, align 8
  %retparam368 = alloca i64, align 8
  %err373 = alloca i64, align 8
  %switch382 = alloca i64, align 8
  %self388 = alloca ptr, align 8
  %f389 = alloca i64, align 8
  %blockret390 = alloca i64, align 8
  %self403 = alloca ptr, align 8
  %f404 = alloca i64, align 8
  %blockret405 = alloca i64, align 8
  %error_var416 = alloca i64, align 8
  %retparam417 = alloca i64, align 8
  %error_var431 = alloca i64, align 8
  %f432 = alloca ptr, align 8
  %len434 = alloca i64, align 8
  %len.f435 = alloca i64, align 8
  %retparam436 = alloca double, align 8
  %retparam443 = alloca i64, align 8
  %err448 = alloca i64, align 8
  %switch457 = alloca i64, align 8
  %self463 = alloca ptr, align 8
  %f464 = alloca i64, align 8
  %blockret465 = alloca i64, align 8
  %self478 = alloca ptr, align 8
  %f479 = alloca i64, align 8
  %blockret480 = alloca i64, align 8
  %error_var491 = alloca i64, align 8
  %retparam492 = alloca i64, align 8
  %error_var504 = alloca i64, align 8
  %retparam505 = alloca i64, align 8
  %out = alloca %"char[]", align 8
  %switch519 = alloca i64, align 8
  %current524 = alloca ptr, align 8
  %taddr528 = alloca i64, align 8
  %taddr529 = alloca i64, align 8
  %varargslots530 = alloca [2 x %any], align 16
  %indirectarg533 = alloca %"any[]", align 8
  %current543 = alloca ptr, align 8
  %taddr548 = alloca i64, align 8
  %taddr549 = alloca i64, align 8
  %varargslots550 = alloca [2 x %any], align 16
  %indirectarg553 = alloca %"any[]", align 8
  %taddr605 = alloca ptr, align 8
  %error_var612 = alloca i64, align 8
  %retparam613 = alloca i64, align 8
  %len623 = alloca i64, align 8
  %error_var624 = alloca i64, align 8
  %retparam628 = alloca i64, align 8
  %error_var638 = alloca i64, align 8
  %retparam641 = alloca i64, align 8
  %error_var653 = alloca i64, align 8
  %retparam658 = alloca i64, align 8
  %error_var666 = alloca i64, align 8
  %retparam670 = alloca i64, align 8
  %len685 = alloca i64, align 8
  %error_var686 = alloca i64, align 8
  %retparam687 = alloca i64, align 8
  %error_var697 = alloca i64, align 8
  %retparam701 = alloca i64, align 8
  %out_fn = alloca ptr, align 8
  %len715 = alloca i64, align 8
  %error_var716 = alloca i64, align 8
  %retparam717 = alloca i64, align 8
  %error_var727 = alloca i64, align 8
  %retparam731 = alloca i64, align 8
  %error_var739 = alloca i64, align 8
  %retparam740 = alloca i64, align 8
  %self754 = alloca ptr, align 8
  %f755 = alloca i64, align 8
  %blockret756 = alloca i64, align 8
  %error_var767 = alloca i64, align 8
  %retparam768 = alloca i64, align 8
  %is_neg = alloca i8, align 1
  %error_var787 = alloca i64, align 8
  %f788 = alloca ptr, align 8
  %len790 = alloca i64, align 8
  %len.f791 = alloca i64, align 8
  %retparam792 = alloca i128, align 16
  %retparam799 = alloca i64, align 8
  %err807 = alloca i64, align 8
  %switch816 = alloca i64, align 8
  %self822 = alloca ptr, align 8
  %f823 = alloca i64, align 8
  %blockret824 = alloca i64, align 8
  %self837 = alloca ptr, align 8
  %f838 = alloca i64, align 8
  %blockret839 = alloca i64, align 8
  %error_var850 = alloca i64, align 8
  %retparam851 = alloca i64, align 8
  %reterr871 = alloca i64, align 8
  %6 = icmp eq ptr %1, null, !dbg !2646
  %7 = call i1 @llvm.expect.i1(i1 %6, i1 false), !dbg !2646
  br i1 %7, label %panic, label %checkok, !dbg !2646

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2647, !DIExpression(), !2648)
  store ptr %2, ptr %format, align 8
  %ptradd = getelementptr inbounds i8, ptr %format, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %format, !2649, !DIExpression(), !2650)
  store ptr %4, ptr %anys, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %anys, i64 8
  store i64 %5, ptr %ptradd1, align 8
    #dbg_declare(ptr %anys, !2651, !DIExpression(), !2652)
  %8 = load ptr, ptr %self, align 8, !dbg !2653
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !2653
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd2, i64 24, !dbg !2653
  store i64 0, ptr %ptradd3, align 8, !dbg !2654
  %9 = load ptr, ptr %self, align 8, !dbg !2655
  %ptradd4 = getelementptr inbounds i8, ptr %9, i64 8, !dbg !2655
  %10 = load ptr, ptr %ptradd4, align 8, !dbg !2655
  %i2nb = icmp eq ptr %10, null, !dbg !2655
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2655

if.then:                                          ; preds = %checkok
  %11 = load ptr, ptr %self, align 8, !dbg !2656
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 8, !dbg !2656
  store ptr @std.io.out_null_fn, ptr %ptradd5, align 8, !dbg !2658
  br label %if.exit, !dbg !2658

if.exit:                                          ; preds = %if.then, %checkok
    #dbg_declare(ptr %total_len, !2659, !DIExpression(), !2660)
  store i64 0, ptr %total_len, align 8, !dbg !2660
    #dbg_declare(ptr %format_len, !2661, !DIExpression(), !2662)
  %ptradd6 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !2663
  %12 = load i64, ptr %ptradd6, align 8, !dbg !2663
  store i64 %12, ptr %format_len, align 8, !dbg !2663
    #dbg_declare(ptr %variant_index, !2664, !DIExpression(), !2665)
  store i64 0, ptr %variant_index, align 8, !dbg !2666
    #dbg_declare(ptr %i, !2667, !DIExpression(), !2669)
  store i64 0, ptr %i, align 8, !dbg !2670
  br label %loop.cond, !dbg !2670

loop.cond:                                        ; preds = %loop.inc, %if.exit
  %13 = load i64, ptr %i, align 8, !dbg !2671
  %14 = load i64, ptr %format_len, align 8, !dbg !2672
  %lt = icmp ult i64 %13, %14, !dbg !2671
  br i1 %lt, label %loop.body, label %loop.exit863, !dbg !2671

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !2673, !DIExpression(), !2675)
  %ptradd7 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !2676
  %15 = load i64, ptr %ptradd7, align 8, !dbg !2676
  %16 = load ptr, ptr %format, align 8, !dbg !2676
  %17 = load i64, ptr %i, align 8, !dbg !2677
  %ge = icmp uge i64 %17, %15, !dbg !2677
  %18 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2677
  br i1 %18, label %panic8, label %checkok11, !dbg !2677

checkok11:                                        ; preds = %loop.body
  %ptradd12 = getelementptr inbounds i8, ptr %16, i64 %17, !dbg !2677
  %19 = load i8, ptr %ptradd12, align 1, !dbg !2677
  store i8 %19, ptr %c, align 1, !dbg !2677
  %20 = load i8, ptr %c, align 1, !dbg !2678
  %neq = icmp ne i8 %20, 37, !dbg !2678
  br i1 %neq, label %if.then13, label %if.exit14, !dbg !2678

if.then13:                                        ; preds = %checkok11
  %21 = load i64, ptr %total_len, align 8, !dbg !2679
  %22 = load ptr, ptr %self, align 8
  %23 = load i8, ptr %c, align 1
  %24 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %22, i8 zeroext %23), !dbg !2681
  %not_err = icmp eq i64 %24, 0, !dbg !2681
  %25 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2681
  br i1 %25, label %after_check, label %assign_optional, !dbg !2681

assign_optional:                                  ; preds = %if.then13
  store i64 %24, ptr %error_var, align 8, !dbg !2681
  br label %guard_block, !dbg !2681

after_check:                                      ; preds = %if.then13
  br label %noerr_block, !dbg !2681

guard_block:                                      ; preds = %assign_optional
  %26 = load i64, ptr %error_var, align 8, !dbg !2681
  ret i64 %26, !dbg !2681

noerr_block:                                      ; preds = %after_check
  %27 = load i64, ptr %retparam, align 8, !dbg !2681
  %add = add i64 %21, %27, !dbg !2679
  store i64 %add, ptr %total_len, align 8, !dbg !2679
  br label %loop.inc, !dbg !2682

if.exit14:                                        ; preds = %checkok11
  %28 = load i64, ptr %i, align 8, !dbg !2683
  %add15 = add i64 %28, 1, !dbg !2683
  store i64 %add15, ptr %i, align 8, !dbg !2683
  %29 = load i64, ptr %i, align 8, !dbg !2684
  %30 = load i64, ptr %format_len, align 8, !dbg !2685
  %ge16 = icmp uge i64 %29, %30, !dbg !2684
  br i1 %ge16, label %if.then17, label %if.exit21, !dbg !2684

if.then17:                                        ; preds = %if.exit14
  %31 = load ptr, ptr %self, align 8
  store ptr %31, ptr %f, align 8
  %32 = load ptr, ptr %f, align 8
  %33 = call i64 @std.io.Formatter.out_substr(ptr %retparam18, ptr %32, ptr @.str.187, i64 4), !dbg !2686
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_FORMAT" to i64), ptr %reterr, align 8, !dbg !2689
  br label %err_retblock, !dbg !2689

err_retblock:                                     ; preds = %if.then17
  %34 = load i64, ptr %reterr, align 8, !dbg !2689
  ret i64 %34, !dbg !2689

if.exit21:                                        ; preds = %if.exit14
  %ptradd22 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !2690
  %35 = load i64, ptr %ptradd22, align 8, !dbg !2690
  %36 = load ptr, ptr %format, align 8, !dbg !2690
  %37 = load i64, ptr %i, align 8, !dbg !2691
  %ge23 = icmp uge i64 %37, %35, !dbg !2691
  %38 = call i1 @llvm.expect.i1(i1 %ge23, i1 false), !dbg !2691
  br i1 %38, label %panic24, label %checkok31, !dbg !2691

checkok31:                                        ; preds = %if.exit21
  %ptradd32 = getelementptr inbounds i8, ptr %36, i64 %37, !dbg !2691
  %39 = load i8, ptr %ptradd32, align 1, !dbg !2691
  store i8 %39, ptr %c, align 1, !dbg !2691
  %40 = load i8, ptr %c, align 1, !dbg !2692
  %eq = icmp eq i8 %40, 37, !dbg !2692
  br i1 %eq, label %if.then33, label %if.exit42, !dbg !2692

if.then33:                                        ; preds = %checkok31
  %41 = load i64, ptr %total_len, align 8, !dbg !2693
  %42 = load ptr, ptr %self, align 8
  %43 = load i8, ptr %c, align 1
  %44 = call i64 @std.io.Formatter.out(ptr %retparam35, ptr %42, i8 zeroext %43), !dbg !2695
  %not_err36 = icmp eq i64 %44, 0, !dbg !2695
  %45 = call i1 @llvm.expect.i1(i1 %not_err36, i1 true), !dbg !2695
  br i1 %45, label %after_check38, label %assign_optional37, !dbg !2695

assign_optional37:                                ; preds = %if.then33
  store i64 %44, ptr %error_var34, align 8, !dbg !2695
  br label %guard_block39, !dbg !2695

after_check38:                                    ; preds = %if.then33
  br label %noerr_block40, !dbg !2695

guard_block39:                                    ; preds = %assign_optional37
  %46 = load i64, ptr %error_var34, align 8, !dbg !2695
  ret i64 %46, !dbg !2695

noerr_block40:                                    ; preds = %after_check38
  %47 = load i64, ptr %retparam35, align 8, !dbg !2695
  %add41 = add i64 %41, %47, !dbg !2693
  store i64 %add41, ptr %total_len, align 8, !dbg !2693
  br label %loop.inc, !dbg !2696

if.exit42:                                        ; preds = %checkok31
  %48 = load ptr, ptr %self, align 8, !dbg !2697
  %ptradd43 = getelementptr inbounds i8, ptr %48, i64 16, !dbg !2697
  store i32 0, ptr %ptradd43, align 8, !dbg !2697
  br label %loop.body44, !dbg !2698

loop.body44:                                      ; preds = %checkok73, %if.exit42
  %49 = load i8, ptr %c, align 1
  store i8 %49, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %loop.body44
  %50 = load i8, ptr %switch, align 1
  switch i8 %50, label %switch.default [
    i8 48, label %switch.case
    i8 45, label %switch.case46
    i8 43, label %switch.case48
    i8 32, label %switch.case50
    i8 35, label %switch.case52
  ]

switch.case:                                      ; preds = %switch.entry
  %51 = load ptr, ptr %self, align 8, !dbg !2699
  %ptradd45 = getelementptr inbounds i8, ptr %51, i64 16, !dbg !2699
  %52 = load i32, ptr %ptradd45, align 8, !dbg !2704
  %53 = and i32 %52, -2, !dbg !2704
  %54 = or i32 %53, 1, !dbg !2704
  store i32 %54, ptr %ptradd45, align 8, !dbg !2704
  br label %switch.exit, !dbg !2704

switch.case46:                                    ; preds = %switch.entry
  %55 = load ptr, ptr %self, align 8, !dbg !2705
  %ptradd47 = getelementptr inbounds i8, ptr %55, i64 16, !dbg !2705
  %56 = load i32, ptr %ptradd47, align 8, !dbg !2707
  %57 = and i32 %56, -3, !dbg !2707
  %58 = or i32 %57, 2, !dbg !2707
  store i32 %58, ptr %ptradd47, align 8, !dbg !2707
  br label %switch.exit, !dbg !2707

switch.case48:                                    ; preds = %switch.entry
  %59 = load ptr, ptr %self, align 8, !dbg !2708
  %ptradd49 = getelementptr inbounds i8, ptr %59, i64 16, !dbg !2708
  %60 = load i32, ptr %ptradd49, align 8, !dbg !2710
  %61 = and i32 %60, -5, !dbg !2710
  %62 = or i32 %61, 4, !dbg !2710
  store i32 %62, ptr %ptradd49, align 8, !dbg !2710
  br label %switch.exit, !dbg !2710

switch.case50:                                    ; preds = %switch.entry
  %63 = load ptr, ptr %self, align 8, !dbg !2711
  %ptradd51 = getelementptr inbounds i8, ptr %63, i64 16, !dbg !2711
  %64 = load i32, ptr %ptradd51, align 8, !dbg !2713
  %65 = and i32 %64, -9, !dbg !2713
  %66 = or i32 %65, 8, !dbg !2713
  store i32 %66, ptr %ptradd51, align 8, !dbg !2713
  br label %switch.exit, !dbg !2713

switch.case52:                                    ; preds = %switch.entry
  %67 = load ptr, ptr %self, align 8, !dbg !2714
  %ptradd53 = getelementptr inbounds i8, ptr %67, i64 16, !dbg !2714
  %68 = load i32, ptr %ptradd53, align 8, !dbg !2716
  %69 = and i32 %68, -17, !dbg !2716
  %70 = or i32 %69, 16, !dbg !2716
  store i32 %70, ptr %ptradd53, align 8, !dbg !2716
  br label %switch.exit, !dbg !2716

switch.default:                                   ; preds = %switch.entry
  br label %loop.exit, !dbg !2717

switch.exit:                                      ; preds = %switch.case52, %switch.case50, %switch.case48, %switch.case46, %switch.case
  %71 = load i64, ptr %i, align 8, !dbg !2719
  %add54 = add i64 %71, 1, !dbg !2719
  store i64 %add54, ptr %i, align 8, !dbg !2719
  %72 = load i64, ptr %format_len, align 8, !dbg !2720
  %ge55 = icmp uge i64 %add54, %72, !dbg !2721
  br i1 %ge55, label %if.then56, label %if.exit63, !dbg !2721

if.then56:                                        ; preds = %switch.exit
  %73 = load ptr, ptr %self, align 8
  store ptr %73, ptr %f58, align 8
  %74 = load ptr, ptr %f58, align 8
  %75 = call i64 @std.io.Formatter.out_substr(ptr %retparam59, ptr %74, ptr @.str.188, i64 4), !dbg !2722
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_FORMAT" to i64), ptr %reterr57, align 8, !dbg !2725
  br label %err_retblock62, !dbg !2725

err_retblock62:                                   ; preds = %if.then56
  %76 = load i64, ptr %reterr57, align 8, !dbg !2725
  ret i64 %76, !dbg !2725

if.exit63:                                        ; preds = %switch.exit
  %ptradd64 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !2726
  %77 = load i64, ptr %ptradd64, align 8, !dbg !2726
  %78 = load ptr, ptr %format, align 8, !dbg !2726
  %79 = load i64, ptr %i, align 8, !dbg !2727
  %ge65 = icmp uge i64 %79, %77, !dbg !2727
  %80 = call i1 @llvm.expect.i1(i1 %ge65, i1 false), !dbg !2727
  br i1 %80, label %panic66, label %checkok73, !dbg !2727

checkok73:                                        ; preds = %if.exit63
  %ptradd74 = getelementptr inbounds i8, ptr %78, i64 %79, !dbg !2727
  %81 = load i8, ptr %ptradd74, align 1, !dbg !2727
  store i8 %81, ptr %c, align 1, !dbg !2727
  br label %loop.body44, !dbg !2727

loop.exit:                                        ; preds = %switch.default
    #dbg_declare(ptr %w, !2728, !DIExpression(), !2729)
  %ptradd75 = getelementptr inbounds i8, ptr %anys, i64 8, !dbg !2730
  %ptradd76 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !2731
  %82 = load ptr, ptr %anys, align 8
  %83 = load i64, ptr %ptradd75, align 8
  %84 = load ptr, ptr %format, align 8
  %85 = load i64, ptr %ptradd76, align 8
  %86 = call i64 @std.io.printf_parse_format_field(ptr %retparam77, ptr %82, i64 %83, ptr %variant_index, ptr %84, i64 %85, ptr %i) #6, !dbg !2732
  %not_err78 = icmp eq i64 %86, 0, !dbg !2732
  %87 = call i1 @llvm.expect.i1(i1 %not_err78, i1 true), !dbg !2732
  br i1 %87, label %after_check80, label %assign_optional79, !dbg !2732

assign_optional79:                                ; preds = %loop.exit
  store i64 %86, ptr %w.f, align 8, !dbg !2732
  br label %after_assign, !dbg !2732

after_check80:                                    ; preds = %loop.exit
  %88 = load i32, ptr %retparam77, align 4, !dbg !2732
  store i32 %88, ptr %w, align 4, !dbg !2732
  store i64 0, ptr %w.f, align 8, !dbg !2732
  br label %after_assign, !dbg !2732

after_assign:                                     ; preds = %after_check80, %assign_optional79
  br label %testblock

testblock:                                        ; preds = %after_assign
  %optval = load i64, ptr %w.f, align 8, !dbg !2733
  %not_err81 = icmp eq i64 %optval, 0, !dbg !2733
  %89 = call i1 @llvm.expect.i1(i1 %not_err81, i1 true), !dbg !2733
  br i1 %89, label %after_check83, label %assign_optional82, !dbg !2733

assign_optional82:                                ; preds = %testblock
  store i64 %optval, ptr %temp_err, align 8, !dbg !2733
  br label %end_block, !dbg !2733

after_check83:                                    ; preds = %testblock
  store i64 0, ptr %temp_err, align 8, !dbg !2733
  br label %end_block, !dbg !2733

end_block:                                        ; preds = %after_check83, %assign_optional82
  %90 = load i64, ptr %temp_err, align 8, !dbg !2733
  %i2b = icmp ne i64 %90, 0, !dbg !2733
  br i1 %i2b, label %if.then84, label %if.exit91, !dbg !2733

if.then84:                                        ; preds = %end_block
  %91 = load ptr, ptr %self, align 8
  store ptr %91, ptr %f86, align 8
  %92 = load ptr, ptr %f86, align 8
  %93 = call i64 @std.io.Formatter.out_substr(ptr %retparam87, ptr %92, ptr @.str.189, i64 4), !dbg !2734
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_FORMAT" to i64), ptr %reterr85, align 8, !dbg !2737
  br label %err_retblock90, !dbg !2737

err_retblock90:                                   ; preds = %if.then84
  %94 = load i64, ptr %reterr85, align 8, !dbg !2737
  ret i64 %94, !dbg !2737

if.exit91:                                        ; preds = %end_block
  %ptradd92 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !2738
  %95 = load i64, ptr %ptradd92, align 8, !dbg !2738
  %96 = load ptr, ptr %format, align 8, !dbg !2738
  %97 = load i64, ptr %i, align 8, !dbg !2739
  %ge93 = icmp uge i64 %97, %95, !dbg !2739
  %98 = call i1 @llvm.expect.i1(i1 %ge93, i1 false), !dbg !2739
  br i1 %98, label %panic94, label %checkok101, !dbg !2739

checkok101:                                       ; preds = %if.exit91
  %ptradd102 = getelementptr inbounds i8, ptr %96, i64 %97, !dbg !2739
  %99 = load i8, ptr %ptradd102, align 1, !dbg !2739
  store i8 %99, ptr %c, align 1, !dbg !2739
  %100 = load i32, ptr %w, align 4, !dbg !2740
  %lt103 = icmp slt i32 %100, 0, !dbg !2740
  br i1 %lt103, label %if.then104, label %if.exit106, !dbg !2740

if.then104:                                       ; preds = %checkok101
  %101 = load ptr, ptr %self, align 8, !dbg !2741
  %ptradd105 = getelementptr inbounds i8, ptr %101, i64 16, !dbg !2741
  %102 = load i32, ptr %ptradd105, align 8, !dbg !2743
  %103 = and i32 %102, -3, !dbg !2743
  %104 = or i32 %103, 2, !dbg !2743
  store i32 %104, ptr %ptradd105, align 8, !dbg !2743
  %105 = load i32, ptr %w, align 4, !dbg !2744
  %neg = sub i32 0, %105, !dbg !2744
  store i32 %neg, ptr %w, align 4, !dbg !2744
  store i64 0, ptr %w.f, align 8, !dbg !2744
  br label %if.exit106, !dbg !2744

if.exit106:                                       ; preds = %if.then104, %checkok101
  %106 = load ptr, ptr %self, align 8, !dbg !2745
  %ptradd107 = getelementptr inbounds i8, ptr %106, i64 16, !dbg !2745
  %ptradd108 = getelementptr inbounds i8, ptr %ptradd107, i64 4, !dbg !2745
  %107 = load i32, ptr %w, align 4, !dbg !2746
  store i32 %107, ptr %ptradd108, align 4, !dbg !2746
  %108 = load ptr, ptr %self, align 8, !dbg !2747
  %ptradd109 = getelementptr inbounds i8, ptr %108, i64 16, !dbg !2747
  %ptradd110 = getelementptr inbounds i8, ptr %ptradd109, i64 8, !dbg !2747
  store i32 0, ptr %ptradd110, align 8, !dbg !2748
  %109 = load i8, ptr %c, align 1, !dbg !2749
  %eq111 = icmp eq i8 %109, 46, !dbg !2749
  br i1 %eq111, label %if.then112, label %if.exit161, !dbg !2749

if.then112:                                       ; preds = %if.exit106
  %110 = load ptr, ptr %self, align 8, !dbg !2750
  %ptradd113 = getelementptr inbounds i8, ptr %110, i64 16, !dbg !2750
  %111 = load i32, ptr %ptradd113, align 8, !dbg !2752
  %112 = and i32 %111, -65, !dbg !2752
  %113 = or i32 %112, 64, !dbg !2752
  store i32 %113, ptr %ptradd113, align 8, !dbg !2752
  %114 = load i64, ptr %i, align 8, !dbg !2753
  %add114 = add i64 %114, 1, !dbg !2753
  store i64 %add114, ptr %i, align 8, !dbg !2753
  %115 = load i64, ptr %format_len, align 8, !dbg !2754
  %ge115 = icmp uge i64 %add114, %115, !dbg !2755
  br i1 %ge115, label %if.then116, label %if.exit123, !dbg !2755

if.then116:                                       ; preds = %if.then112
  %116 = load ptr, ptr %self, align 8
  store ptr %116, ptr %f118, align 8
  %117 = load ptr, ptr %f118, align 8
  %118 = call i64 @std.io.Formatter.out_substr(ptr %retparam119, ptr %117, ptr @.str.190, i64 12), !dbg !2756
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_FORMAT" to i64), ptr %reterr117, align 8, !dbg !2759
  br label %err_retblock122, !dbg !2759

err_retblock122:                                  ; preds = %if.then116
  %119 = load i64, ptr %reterr117, align 8, !dbg !2759
  ret i64 %119, !dbg !2759

if.exit123:                                       ; preds = %if.then112
    #dbg_declare(ptr %prec, !2760, !DIExpression(), !2761)
  %ptradd124 = getelementptr inbounds i8, ptr %anys, i64 8, !dbg !2762
  %ptradd125 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !2763
  %120 = load ptr, ptr %anys, align 8
  %121 = load i64, ptr %ptradd124, align 8
  %122 = load ptr, ptr %format, align 8
  %123 = load i64, ptr %ptradd125, align 8
  %124 = call i64 @std.io.printf_parse_format_field(ptr %retparam126, ptr %120, i64 %121, ptr %variant_index, ptr %122, i64 %123, ptr %i) #6, !dbg !2764
  %not_err127 = icmp eq i64 %124, 0, !dbg !2764
  %125 = call i1 @llvm.expect.i1(i1 %not_err127, i1 true), !dbg !2764
  br i1 %125, label %after_check129, label %assign_optional128, !dbg !2764

assign_optional128:                               ; preds = %if.exit123
  store i64 %124, ptr %prec.f, align 8, !dbg !2764
  br label %after_assign130, !dbg !2764

after_check129:                                   ; preds = %if.exit123
  %126 = load i32, ptr %retparam126, align 4, !dbg !2764
  store i32 %126, ptr %prec, align 4, !dbg !2764
  store i64 0, ptr %prec.f, align 8, !dbg !2764
  br label %after_assign130, !dbg !2764

after_assign130:                                  ; preds = %after_check129, %assign_optional128
  br label %testblock132

testblock132:                                     ; preds = %after_assign130
  %optval133 = load i64, ptr %prec.f, align 8, !dbg !2765
  %not_err134 = icmp eq i64 %optval133, 0, !dbg !2765
  %127 = call i1 @llvm.expect.i1(i1 %not_err134, i1 true), !dbg !2765
  br i1 %127, label %after_check136, label %assign_optional135, !dbg !2765

assign_optional135:                               ; preds = %testblock132
  store i64 %optval133, ptr %temp_err131, align 8, !dbg !2765
  br label %end_block137, !dbg !2765

after_check136:                                   ; preds = %testblock132
  store i64 0, ptr %temp_err131, align 8, !dbg !2765
  br label %end_block137, !dbg !2765

end_block137:                                     ; preds = %after_check136, %assign_optional135
  %128 = load i64, ptr %temp_err131, align 8, !dbg !2765
  %i2b138 = icmp ne i64 %128, 0, !dbg !2765
  br i1 %i2b138, label %if.then139, label %if.exit146, !dbg !2765

if.then139:                                       ; preds = %end_block137
  %129 = load ptr, ptr %self, align 8
  store ptr %129, ptr %f141, align 8
  %130 = load ptr, ptr %f141, align 8
  %131 = call i64 @std.io.Formatter.out_substr(ptr %retparam142, ptr %130, ptr @.str.191, i64 12), !dbg !2766
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_FORMAT" to i64), ptr %reterr140, align 8, !dbg !2769
  br label %err_retblock145, !dbg !2769

err_retblock145:                                  ; preds = %if.then139
  %132 = load i64, ptr %reterr140, align 8, !dbg !2769
  ret i64 %132, !dbg !2769

if.exit146:                                       ; preds = %end_block137
  %133 = load ptr, ptr %self, align 8, !dbg !2770
  %ptradd147 = getelementptr inbounds i8, ptr %133, i64 16, !dbg !2770
  %ptradd148 = getelementptr inbounds i8, ptr %ptradd147, i64 8, !dbg !2770
  %134 = load i32, ptr %prec, align 4, !dbg !2771
  %lt149 = icmp slt i32 %134, 0, !dbg !2771
  br i1 %lt149, label %cond.lhs, label %cond.rhs, !dbg !2771

cond.lhs:                                         ; preds = %if.exit146
  br label %cond.phi, !dbg !2772

cond.rhs:                                         ; preds = %if.exit146
  %135 = load i32, ptr %prec, align 4, !dbg !2773
  br label %cond.phi, !dbg !2773

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i32 [ 0, %cond.lhs ], [ %135, %cond.rhs ], !dbg !2773
  store i32 %val, ptr %ptradd148, align 8, !dbg !2773
  %ptradd150 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !2774
  %136 = load i64, ptr %ptradd150, align 8, !dbg !2774
  %137 = load ptr, ptr %format, align 8, !dbg !2774
  %138 = load i64, ptr %i, align 8, !dbg !2775
  %ge151 = icmp uge i64 %138, %136, !dbg !2775
  %139 = call i1 @llvm.expect.i1(i1 %ge151, i1 false), !dbg !2775
  br i1 %139, label %panic152, label %checkok159, !dbg !2775

checkok159:                                       ; preds = %cond.phi
  %ptradd160 = getelementptr inbounds i8, ptr %137, i64 %138, !dbg !2775
  %140 = load i8, ptr %ptradd160, align 1, !dbg !2775
  store i8 %140, ptr %c, align 1, !dbg !2775
  br label %if.exit161, !dbg !2775

if.exit161:                                       ; preds = %checkok159, %if.exit106
    #dbg_declare(ptr %base, !2776, !DIExpression(), !2777)
  store i32 0, ptr %base, align 4, !dbg !2778
  %141 = load i64, ptr %variant_index, align 8, !dbg !2779
  %ptradd162 = getelementptr inbounds i8, ptr %anys, i64 8, !dbg !2780
  %142 = load i64, ptr %ptradd162, align 8, !dbg !2780
  %ge163 = icmp uge i64 %141, %142, !dbg !2779
  br i1 %ge163, label %if.then164, label %if.exit184, !dbg !2779

if.then164:                                       ; preds = %if.exit161
  %143 = load ptr, ptr %self, align 8
  store ptr %143, ptr %self165, align 8
  store i64 ptrtoint (ptr @"std.io.PrintFault$NOT_ENOUGH_ARGUMENTS" to i64), ptr %f166, align 8
  %144 = load ptr, ptr %self165, align 8, !dbg !2781
  %ptradd167 = getelementptr inbounds i8, ptr %144, i64 16, !dbg !2781
  %ptradd168 = getelementptr inbounds i8, ptr %ptradd167, i64 24, !dbg !2781
  %145 = load i64, ptr %ptradd168, align 8, !dbg !2781
  %i2b169 = icmp ne i64 %145, 0, !dbg !2781
  br i1 %i2b169, label %if.then170, label %if.exit173, !dbg !2781

if.then170:                                       ; preds = %if.then164
  %146 = load ptr, ptr %self165, align 8, !dbg !2785
  %ptradd171 = getelementptr inbounds i8, ptr %146, i64 16, !dbg !2785
  %ptradd172 = getelementptr inbounds i8, ptr %ptradd171, i64 24, !dbg !2785
  %147 = load i64, ptr %ptradd172, align 8, !dbg !2785
  store i64 %147, ptr %blockret, align 8, !dbg !2785
  br label %expr_block.exit, !dbg !2785

if.exit173:                                       ; preds = %if.then164
  %148 = load ptr, ptr %self165, align 8, !dbg !2786
  %ptradd174 = getelementptr inbounds i8, ptr %148, i64 16, !dbg !2786
  %ptradd175 = getelementptr inbounds i8, ptr %ptradd174, i64 24, !dbg !2786
  %149 = load i64, ptr %f166, align 8, !dbg !2787
  store i64 %149, ptr %ptradd175, align 8, !dbg !2787
  %150 = load i64, ptr %f166, align 8, !dbg !2788
  store i64 %150, ptr %blockret, align 8, !dbg !2788
  br label %expr_block.exit, !dbg !2788

expr_block.exit:                                  ; preds = %if.exit173, %if.then170
  %151 = load i64, ptr %total_len, align 8, !dbg !2789
  %152 = load ptr, ptr %self, align 8
  %153 = call i64 @std.io.Formatter.out_substr(ptr %retparam177, ptr %152, ptr @.str.192, i64 9), !dbg !2790
  %not_err178 = icmp eq i64 %153, 0, !dbg !2790
  %154 = call i1 @llvm.expect.i1(i1 %not_err178, i1 true), !dbg !2790
  br i1 %154, label %after_check180, label %assign_optional179, !dbg !2790

assign_optional179:                               ; preds = %expr_block.exit
  store i64 %153, ptr %error_var176, align 8, !dbg !2790
  br label %guard_block181, !dbg !2790

after_check180:                                   ; preds = %expr_block.exit
  br label %noerr_block182, !dbg !2790

guard_block181:                                   ; preds = %assign_optional179
  %155 = load i64, ptr %error_var176, align 8, !dbg !2790
  ret i64 %155, !dbg !2790

noerr_block182:                                   ; preds = %after_check180
  %156 = load i64, ptr %retparam177, align 8, !dbg !2790
  %add183 = add i64 %151, %156, !dbg !2789
  store i64 %add183, ptr %total_len, align 8, !dbg !2789
  br label %loop.inc, !dbg !2791

if.exit184:                                       ; preds = %if.exit161
    #dbg_declare(ptr %current, !2792, !DIExpression(), !2793)
  %ptradd185 = getelementptr inbounds i8, ptr %anys, i64 8, !dbg !2794
  %157 = load i64, ptr %ptradd185, align 8, !dbg !2794
  %158 = load ptr, ptr %anys, align 8, !dbg !2794
  %159 = load i64, ptr %variant_index, align 8, !dbg !2795
  %add186 = add i64 %159, 1, !dbg !2795
  store i64 %add186, ptr %variant_index, align 8, !dbg !2795
  %ge187 = icmp uge i64 %159, %157, !dbg !2795
  %160 = call i1 @llvm.expect.i1(i1 %ge187, i1 false), !dbg !2795
  br i1 %160, label %panic188, label %checkok195, !dbg !2795

checkok195:                                       ; preds = %if.exit184
  %ptroffset = getelementptr inbounds [16 x i8], ptr %158, i64 %159, !dbg !2795
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %current, ptr align 8 %ptroffset, i32 16, i1 false), !dbg !2795
  %161 = load i8, ptr %c, align 1
  store i8 %161, ptr %switch196, align 1
  br label %switch.entry197

switch.entry197:                                  ; preds = %checkok195
  %162 = load i8, ptr %switch196, align 1
  switch i8 %162, label %switch.default753 [
    i8 100, label %switch.case198
    i8 88, label %switch.case200
    i8 120, label %switch.case202
    i8 79, label %switch.case203
    i8 111, label %switch.case205
    i8 66, label %switch.case206
    i8 98, label %switch.case208
    i8 65, label %switch.case209
    i8 97, label %switch.case211
    i8 70, label %switch.case278
    i8 102, label %switch.case280
    i8 69, label %switch.case353
    i8 101, label %switch.case355
    i8 71, label %switch.case428
    i8 103, label %switch.case430
    i8 99, label %switch.case503
    i8 72, label %switch.case515
    i8 104, label %switch.case517
    i8 115, label %switch.case680
    i8 112, label %switch.case750
  ]

switch.case198:                                   ; preds = %switch.entry197
  store i32 10, ptr %base, align 4, !dbg !2796
  %163 = load ptr, ptr %self, align 8, !dbg !2799
  %ptradd199 = getelementptr inbounds i8, ptr %163, i64 16, !dbg !2799
  %164 = load i32, ptr %ptradd199, align 8, !dbg !2800
  %165 = and i32 %164, -17, !dbg !2800
  store i32 %165, ptr %ptradd199, align 8, !dbg !2800
  br label %switch.exit775, !dbg !2800

switch.case200:                                   ; preds = %switch.entry197
  %166 = load ptr, ptr %self, align 8, !dbg !2801
  %ptradd201 = getelementptr inbounds i8, ptr %166, i64 16, !dbg !2801
  %167 = load i32, ptr %ptradd201, align 8, !dbg !2803
  %168 = and i32 %167, -33, !dbg !2803
  %169 = or i32 %168, 32, !dbg !2803
  store i32 %169, ptr %ptradd201, align 8, !dbg !2803
  br label %switch.case202, !dbg !2804

switch.case202:                                   ; preds = %switch.entry197, %switch.case200
  store i32 16, ptr %base, align 4, !dbg !2805
  br label %switch.exit775, !dbg !2805

switch.case203:                                   ; preds = %switch.entry197
  %170 = load ptr, ptr %self, align 8, !dbg !2807
  %ptradd204 = getelementptr inbounds i8, ptr %170, i64 16, !dbg !2807
  %171 = load i32, ptr %ptradd204, align 8, !dbg !2809
  %172 = and i32 %171, -33, !dbg !2809
  %173 = or i32 %172, 32, !dbg !2809
  store i32 %173, ptr %ptradd204, align 8, !dbg !2809
  br label %switch.case205, !dbg !2810

switch.case205:                                   ; preds = %switch.entry197, %switch.case203
  store i32 8, ptr %base, align 4, !dbg !2811
  br label %switch.exit775, !dbg !2811

switch.case206:                                   ; preds = %switch.entry197
  %174 = load ptr, ptr %self, align 8, !dbg !2813
  %ptradd207 = getelementptr inbounds i8, ptr %174, i64 16, !dbg !2813
  %175 = load i32, ptr %ptradd207, align 8, !dbg !2815
  %176 = and i32 %175, -33, !dbg !2815
  %177 = or i32 %176, 32, !dbg !2815
  store i32 %177, ptr %ptradd207, align 8, !dbg !2815
  br label %switch.case208, !dbg !2816

switch.case208:                                   ; preds = %switch.entry197, %switch.case206
  store i32 2, ptr %base, align 4, !dbg !2817
  br label %switch.exit775, !dbg !2817

switch.case209:                                   ; preds = %switch.entry197
  %178 = load ptr, ptr %self, align 8, !dbg !2819
  %ptradd210 = getelementptr inbounds i8, ptr %178, i64 16, !dbg !2819
  %179 = load i32, ptr %ptradd210, align 8, !dbg !2821
  %180 = and i32 %179, -33, !dbg !2821
  %181 = or i32 %180, 32, !dbg !2821
  store i32 %181, ptr %ptradd210, align 8, !dbg !2821
  br label %switch.case211, !dbg !2822

switch.case211:                                   ; preds = %switch.entry197, %switch.case209
  %182 = load i64, ptr %total_len, align 8, !dbg !2823
  %183 = load ptr, ptr %self, align 8
  store ptr %183, ptr %f213, align 8
    #dbg_declare(ptr %len, !2825, !DIExpression(), !2827)
  %lo = load i64, ptr %current, align 8
  %ptradd216 = getelementptr inbounds i8, ptr %current, i64 8
  %hi = load ptr, ptr %ptradd216, align 8
  %184 = call i64 @std.io.float_from_any(ptr %retparam215, i64 %lo, ptr %hi), !dbg !2829
  %not_err217 = icmp eq i64 %184, 0, !dbg !2829
  %185 = call i1 @llvm.expect.i1(i1 %not_err217, i1 true), !dbg !2829
  br i1 %185, label %after_check219, label %assign_optional218, !dbg !2829

assign_optional218:                               ; preds = %switch.case211
  store i64 %184, ptr %len.f, align 8, !dbg !2829
  br label %after_assign224, !dbg !2829

after_check219:                                   ; preds = %switch.case211
  %186 = load ptr, ptr %self, align 8
  %187 = load double, ptr %retparam215, align 8
  %188 = call i64 @std.io.Formatter.atoa(ptr %retparam220, ptr %186, double %187), !dbg !2830
  %not_err221 = icmp eq i64 %188, 0, !dbg !2830
  %189 = call i1 @llvm.expect.i1(i1 %not_err221, i1 true), !dbg !2830
  br i1 %189, label %after_check223, label %assign_optional222, !dbg !2830

assign_optional222:                               ; preds = %after_check219
  store i64 %188, ptr %len.f, align 8, !dbg !2830
  br label %after_assign224, !dbg !2830

after_check223:                                   ; preds = %after_check219
  %190 = load i64, ptr %retparam220, align 8, !dbg !2830
  store i64 %190, ptr %len, align 8, !dbg !2830
  store i64 0, ptr %len.f, align 8, !dbg !2830
  br label %after_assign224, !dbg !2830

after_assign224:                                  ; preds = %after_check223, %assign_optional222, %assign_optional218
    #dbg_declare(ptr %err, !2831, !DIExpression(), !2832)
  br label %testblock225, !dbg !2832

testblock225:                                     ; preds = %after_assign224
  %optval226 = load i64, ptr %len.f, align 8, !dbg !2833
  %not_err227 = icmp eq i64 %optval226, 0, !dbg !2833
  %191 = call i1 @llvm.expect.i1(i1 %not_err227, i1 true), !dbg !2833
  br i1 %191, label %after_check229, label %assign_optional228, !dbg !2833

assign_optional228:                               ; preds = %testblock225
  store i64 %optval226, ptr %err, align 8, !dbg !2833
  br label %end_block230, !dbg !2833

after_check229:                                   ; preds = %testblock225
  store i64 0, ptr %err, align 8, !dbg !2833
  br label %end_block230, !dbg !2833

end_block230:                                     ; preds = %after_check229, %assign_optional228
  %192 = load i64, ptr %err, align 8, !dbg !2833
  %neq231 = icmp ne i64 %192, 0, !dbg !2833
  br i1 %neq231, label %if.then232, label %if.exit274, !dbg !2833

if.then232:                                       ; preds = %end_block230
  store i64 %192, ptr %switch233, align 8
  br label %switch.entry234

switch.entry234:                                  ; preds = %if.then232
  %193 = load i64, ptr %switch233, align 8
  %eq235 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$BUFFER_EXCEEDED" to i64), %193, !dbg !2834
  br i1 %eq235, label %switch.case237, label %next_if, !dbg !2834

next_if:                                          ; preds = %switch.entry234
  %eq236 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), %193, !dbg !2835
  br i1 %eq236, label %switch.case237, label %next_if251, !dbg !2835

switch.case237:                                   ; preds = %next_if, %switch.entry234
  %194 = load ptr, ptr %f213, align 8
  store ptr %194, ptr %self238, align 8
  %195 = load i64, ptr %err, align 8
  store i64 %195, ptr %f239, align 8
  %196 = load ptr, ptr %self238, align 8, !dbg !2836
  %ptradd241 = getelementptr inbounds i8, ptr %196, i64 16, !dbg !2836
  %ptradd242 = getelementptr inbounds i8, ptr %ptradd241, i64 24, !dbg !2836
  %197 = load i64, ptr %ptradd242, align 8, !dbg !2836
  %i2b243 = icmp ne i64 %197, 0, !dbg !2836
  br i1 %i2b243, label %if.then244, label %if.exit247, !dbg !2836

if.then244:                                       ; preds = %switch.case237
  %198 = load ptr, ptr %self238, align 8, !dbg !2840
  %ptradd245 = getelementptr inbounds i8, ptr %198, i64 16, !dbg !2840
  %ptradd246 = getelementptr inbounds i8, ptr %ptradd245, i64 24, !dbg !2840
  %199 = load i64, ptr %ptradd246, align 8, !dbg !2840
  store i64 %199, ptr %blockret240, align 8, !dbg !2840
  br label %expr_block.exit250, !dbg !2840

if.exit247:                                       ; preds = %switch.case237
  %200 = load ptr, ptr %self238, align 8, !dbg !2841
  %ptradd248 = getelementptr inbounds i8, ptr %200, i64 16, !dbg !2841
  %ptradd249 = getelementptr inbounds i8, ptr %ptradd248, i64 24, !dbg !2841
  %201 = load i64, ptr %f239, align 8, !dbg !2842
  store i64 %201, ptr %ptradd249, align 8, !dbg !2842
  %202 = load i64, ptr %f239, align 8, !dbg !2843
  store i64 %202, ptr %blockret240, align 8, !dbg !2843
  br label %expr_block.exit250, !dbg !2843

expr_block.exit250:                               ; preds = %if.exit247, %if.then244
  %203 = load i64, ptr %blockret240, align 8, !dbg !2843
  store i64 %203, ptr %error_var212, align 8, !dbg !2843
  br label %guard_block275, !dbg !2843

next_if251:                                       ; preds = %next_if
  br label %switch.default252, !dbg !2843

switch.default252:                                ; preds = %next_if251
  %204 = load ptr, ptr %f213, align 8
  store ptr %204, ptr %self253, align 8
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_ARGUMENT" to i64), ptr %f254, align 8
  %205 = load ptr, ptr %self253, align 8, !dbg !2844
  %ptradd256 = getelementptr inbounds i8, ptr %205, i64 16, !dbg !2844
  %ptradd257 = getelementptr inbounds i8, ptr %ptradd256, i64 24, !dbg !2844
  %206 = load i64, ptr %ptradd257, align 8, !dbg !2844
  %i2b258 = icmp ne i64 %206, 0, !dbg !2844
  br i1 %i2b258, label %if.then259, label %if.exit262, !dbg !2844

if.then259:                                       ; preds = %switch.default252
  %207 = load ptr, ptr %self253, align 8, !dbg !2848
  %ptradd260 = getelementptr inbounds i8, ptr %207, i64 16, !dbg !2848
  %ptradd261 = getelementptr inbounds i8, ptr %ptradd260, i64 24, !dbg !2848
  %208 = load i64, ptr %ptradd261, align 8, !dbg !2848
  store i64 %208, ptr %blockret255, align 8, !dbg !2848
  br label %expr_block.exit265, !dbg !2848

if.exit262:                                       ; preds = %switch.default252
  %209 = load ptr, ptr %self253, align 8, !dbg !2849
  %ptradd263 = getelementptr inbounds i8, ptr %209, i64 16, !dbg !2849
  %ptradd264 = getelementptr inbounds i8, ptr %ptradd263, i64 24, !dbg !2849
  %210 = load i64, ptr %f254, align 8, !dbg !2850
  store i64 %210, ptr %ptradd264, align 8, !dbg !2850
  %211 = load i64, ptr %f254, align 8, !dbg !2851
  store i64 %211, ptr %blockret255, align 8, !dbg !2851
  br label %expr_block.exit265, !dbg !2851

expr_block.exit265:                               ; preds = %if.exit262, %if.then259
  %212 = load i64, ptr %blockret255, align 8, !dbg !2851
  store i64 %212, ptr %err, align 8, !dbg !2851
  %213 = load ptr, ptr %f213, align 8
  %214 = call i64 @std.io.Formatter.out_substr(ptr %retparam267, ptr %213, ptr @.str.193, i64 9), !dbg !2852
  %not_err268 = icmp eq i64 %214, 0, !dbg !2852
  %215 = call i1 @llvm.expect.i1(i1 %not_err268, i1 true), !dbg !2852
  br i1 %215, label %after_check270, label %assign_optional269, !dbg !2852

assign_optional269:                               ; preds = %expr_block.exit265
  store i64 %214, ptr %error_var266, align 8, !dbg !2852
  br label %guard_block271, !dbg !2852

after_check270:                                   ; preds = %expr_block.exit265
  br label %noerr_block272, !dbg !2852

guard_block271:                                   ; preds = %assign_optional269
  %216 = load i64, ptr %error_var266, align 8, !dbg !2852
  store i64 %216, ptr %error_var212, align 8, !dbg !2852
  br label %guard_block275, !dbg !2852

noerr_block272:                                   ; preds = %after_check270
  %217 = load i64, ptr %err, align 8, !dbg !2853
  store i64 %217, ptr %error_var212, align 8, !dbg !2853
  br label %guard_block275, !dbg !2853

if.exit274:                                       ; preds = %end_block230
  br label %noerr_block276, !dbg !2854

guard_block275:                                   ; preds = %noerr_block272, %guard_block271, %expr_block.exit250
  %218 = load i64, ptr %error_var212, align 8, !dbg !2854
  ret i64 %218, !dbg !2854

noerr_block276:                                   ; preds = %if.exit274
  %219 = load i64, ptr %len, align 8, !dbg !2854
  %add277 = add i64 %182, %219, !dbg !2823
  store i64 %add277, ptr %total_len, align 8, !dbg !2823
  br label %loop.inc, !dbg !2855

switch.case278:                                   ; preds = %switch.entry197
  %220 = load ptr, ptr %self, align 8, !dbg !2856
  %ptradd279 = getelementptr inbounds i8, ptr %220, i64 16, !dbg !2856
  %221 = load i32, ptr %ptradd279, align 8, !dbg !2858
  %222 = and i32 %221, -33, !dbg !2858
  %223 = or i32 %222, 32, !dbg !2858
  store i32 %223, ptr %ptradd279, align 8, !dbg !2858
  br label %switch.case280, !dbg !2859

switch.case280:                                   ; preds = %switch.entry197, %switch.case278
  %224 = load i64, ptr %total_len, align 8, !dbg !2860
  %225 = load ptr, ptr %self, align 8
  store ptr %225, ptr %f282, align 8
    #dbg_declare(ptr %len284, !2862, !DIExpression(), !2864)
  %lo287 = load i64, ptr %current, align 8
  %ptradd288 = getelementptr inbounds i8, ptr %current, i64 8
  %hi289 = load ptr, ptr %ptradd288, align 8
  %226 = call i64 @std.io.float_from_any(ptr %retparam286, i64 %lo287, ptr %hi289), !dbg !2866
  %not_err290 = icmp eq i64 %226, 0, !dbg !2866
  %227 = call i1 @llvm.expect.i1(i1 %not_err290, i1 true), !dbg !2866
  br i1 %227, label %after_check292, label %assign_optional291, !dbg !2866

assign_optional291:                               ; preds = %switch.case280
  store i64 %226, ptr %len.f285, align 8, !dbg !2866
  br label %after_assign297, !dbg !2866

after_check292:                                   ; preds = %switch.case280
  %228 = load ptr, ptr %self, align 8
  %229 = load double, ptr %retparam286, align 8
  %230 = call i64 @std.io.Formatter.ftoa(ptr %retparam293, ptr %228, double %229), !dbg !2867
  %not_err294 = icmp eq i64 %230, 0, !dbg !2867
  %231 = call i1 @llvm.expect.i1(i1 %not_err294, i1 true), !dbg !2867
  br i1 %231, label %after_check296, label %assign_optional295, !dbg !2867

assign_optional295:                               ; preds = %after_check292
  store i64 %230, ptr %len.f285, align 8, !dbg !2867
  br label %after_assign297, !dbg !2867

after_check296:                                   ; preds = %after_check292
  %232 = load i64, ptr %retparam293, align 8, !dbg !2867
  store i64 %232, ptr %len284, align 8, !dbg !2867
  store i64 0, ptr %len.f285, align 8, !dbg !2867
  br label %after_assign297, !dbg !2867

after_assign297:                                  ; preds = %after_check296, %assign_optional295, %assign_optional291
    #dbg_declare(ptr %err298, !2868, !DIExpression(), !2869)
  br label %testblock299, !dbg !2869

testblock299:                                     ; preds = %after_assign297
  %optval300 = load i64, ptr %len.f285, align 8, !dbg !2870
  %not_err301 = icmp eq i64 %optval300, 0, !dbg !2870
  %233 = call i1 @llvm.expect.i1(i1 %not_err301, i1 true), !dbg !2870
  br i1 %233, label %after_check303, label %assign_optional302, !dbg !2870

assign_optional302:                               ; preds = %testblock299
  store i64 %optval300, ptr %err298, align 8, !dbg !2870
  br label %end_block304, !dbg !2870

after_check303:                                   ; preds = %testblock299
  store i64 0, ptr %err298, align 8, !dbg !2870
  br label %end_block304, !dbg !2870

end_block304:                                     ; preds = %after_check303, %assign_optional302
  %234 = load i64, ptr %err298, align 8, !dbg !2870
  %neq305 = icmp ne i64 %234, 0, !dbg !2870
  br i1 %neq305, label %if.then306, label %if.exit349, !dbg !2870

if.then306:                                       ; preds = %end_block304
  store i64 %234, ptr %switch307, align 8
  br label %switch.entry308

switch.entry308:                                  ; preds = %if.then306
  %235 = load i64, ptr %switch307, align 8
  %eq309 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$BUFFER_EXCEEDED" to i64), %235, !dbg !2871
  br i1 %eq309, label %switch.case312, label %next_if310, !dbg !2871

next_if310:                                       ; preds = %switch.entry308
  %eq311 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), %235, !dbg !2872
  br i1 %eq311, label %switch.case312, label %next_if326, !dbg !2872

switch.case312:                                   ; preds = %next_if310, %switch.entry308
  %236 = load ptr, ptr %f282, align 8
  store ptr %236, ptr %self313, align 8
  %237 = load i64, ptr %err298, align 8
  store i64 %237, ptr %f314, align 8
  %238 = load ptr, ptr %self313, align 8, !dbg !2873
  %ptradd316 = getelementptr inbounds i8, ptr %238, i64 16, !dbg !2873
  %ptradd317 = getelementptr inbounds i8, ptr %ptradd316, i64 24, !dbg !2873
  %239 = load i64, ptr %ptradd317, align 8, !dbg !2873
  %i2b318 = icmp ne i64 %239, 0, !dbg !2873
  br i1 %i2b318, label %if.then319, label %if.exit322, !dbg !2873

if.then319:                                       ; preds = %switch.case312
  %240 = load ptr, ptr %self313, align 8, !dbg !2877
  %ptradd320 = getelementptr inbounds i8, ptr %240, i64 16, !dbg !2877
  %ptradd321 = getelementptr inbounds i8, ptr %ptradd320, i64 24, !dbg !2877
  %241 = load i64, ptr %ptradd321, align 8, !dbg !2877
  store i64 %241, ptr %blockret315, align 8, !dbg !2877
  br label %expr_block.exit325, !dbg !2877

if.exit322:                                       ; preds = %switch.case312
  %242 = load ptr, ptr %self313, align 8, !dbg !2878
  %ptradd323 = getelementptr inbounds i8, ptr %242, i64 16, !dbg !2878
  %ptradd324 = getelementptr inbounds i8, ptr %ptradd323, i64 24, !dbg !2878
  %243 = load i64, ptr %f314, align 8, !dbg !2879
  store i64 %243, ptr %ptradd324, align 8, !dbg !2879
  %244 = load i64, ptr %f314, align 8, !dbg !2880
  store i64 %244, ptr %blockret315, align 8, !dbg !2880
  br label %expr_block.exit325, !dbg !2880

expr_block.exit325:                               ; preds = %if.exit322, %if.then319
  %245 = load i64, ptr %blockret315, align 8, !dbg !2880
  store i64 %245, ptr %error_var281, align 8, !dbg !2880
  br label %guard_block350, !dbg !2880

next_if326:                                       ; preds = %next_if310
  br label %switch.default327, !dbg !2880

switch.default327:                                ; preds = %next_if326
  %246 = load ptr, ptr %f282, align 8
  store ptr %246, ptr %self328, align 8
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_ARGUMENT" to i64), ptr %f329, align 8
  %247 = load ptr, ptr %self328, align 8, !dbg !2881
  %ptradd331 = getelementptr inbounds i8, ptr %247, i64 16, !dbg !2881
  %ptradd332 = getelementptr inbounds i8, ptr %ptradd331, i64 24, !dbg !2881
  %248 = load i64, ptr %ptradd332, align 8, !dbg !2881
  %i2b333 = icmp ne i64 %248, 0, !dbg !2881
  br i1 %i2b333, label %if.then334, label %if.exit337, !dbg !2881

if.then334:                                       ; preds = %switch.default327
  %249 = load ptr, ptr %self328, align 8, !dbg !2885
  %ptradd335 = getelementptr inbounds i8, ptr %249, i64 16, !dbg !2885
  %ptradd336 = getelementptr inbounds i8, ptr %ptradd335, i64 24, !dbg !2885
  %250 = load i64, ptr %ptradd336, align 8, !dbg !2885
  store i64 %250, ptr %blockret330, align 8, !dbg !2885
  br label %expr_block.exit340, !dbg !2885

if.exit337:                                       ; preds = %switch.default327
  %251 = load ptr, ptr %self328, align 8, !dbg !2886
  %ptradd338 = getelementptr inbounds i8, ptr %251, i64 16, !dbg !2886
  %ptradd339 = getelementptr inbounds i8, ptr %ptradd338, i64 24, !dbg !2886
  %252 = load i64, ptr %f329, align 8, !dbg !2887
  store i64 %252, ptr %ptradd339, align 8, !dbg !2887
  %253 = load i64, ptr %f329, align 8, !dbg !2888
  store i64 %253, ptr %blockret330, align 8, !dbg !2888
  br label %expr_block.exit340, !dbg !2888

expr_block.exit340:                               ; preds = %if.exit337, %if.then334
  %254 = load i64, ptr %blockret330, align 8, !dbg !2888
  store i64 %254, ptr %err298, align 8, !dbg !2888
  %255 = load ptr, ptr %f282, align 8
  %256 = call i64 @std.io.Formatter.out_substr(ptr %retparam342, ptr %255, ptr @.str.194, i64 9), !dbg !2889
  %not_err343 = icmp eq i64 %256, 0, !dbg !2889
  %257 = call i1 @llvm.expect.i1(i1 %not_err343, i1 true), !dbg !2889
  br i1 %257, label %after_check345, label %assign_optional344, !dbg !2889

assign_optional344:                               ; preds = %expr_block.exit340
  store i64 %256, ptr %error_var341, align 8, !dbg !2889
  br label %guard_block346, !dbg !2889

after_check345:                                   ; preds = %expr_block.exit340
  br label %noerr_block347, !dbg !2889

guard_block346:                                   ; preds = %assign_optional344
  %258 = load i64, ptr %error_var341, align 8, !dbg !2889
  store i64 %258, ptr %error_var281, align 8, !dbg !2889
  br label %guard_block350, !dbg !2889

noerr_block347:                                   ; preds = %after_check345
  %259 = load i64, ptr %err298, align 8, !dbg !2890
  store i64 %259, ptr %error_var281, align 8, !dbg !2890
  br label %guard_block350, !dbg !2890

if.exit349:                                       ; preds = %end_block304
  br label %noerr_block351, !dbg !2891

guard_block350:                                   ; preds = %noerr_block347, %guard_block346, %expr_block.exit325
  %260 = load i64, ptr %error_var281, align 8, !dbg !2891
  ret i64 %260, !dbg !2891

noerr_block351:                                   ; preds = %if.exit349
  %261 = load i64, ptr %len284, align 8, !dbg !2891
  %add352 = add i64 %224, %261, !dbg !2860
  store i64 %add352, ptr %total_len, align 8, !dbg !2860
  br label %loop.inc, !dbg !2892

switch.case353:                                   ; preds = %switch.entry197
  %262 = load ptr, ptr %self, align 8, !dbg !2893
  %ptradd354 = getelementptr inbounds i8, ptr %262, i64 16, !dbg !2893
  %263 = load i32, ptr %ptradd354, align 8, !dbg !2895
  %264 = and i32 %263, -33, !dbg !2895
  %265 = or i32 %264, 32, !dbg !2895
  store i32 %265, ptr %ptradd354, align 8, !dbg !2895
  br label %switch.case355, !dbg !2896

switch.case355:                                   ; preds = %switch.entry197, %switch.case353
  %266 = load i64, ptr %total_len, align 8, !dbg !2897
  %267 = load ptr, ptr %self, align 8
  store ptr %267, ptr %f357, align 8
    #dbg_declare(ptr %len359, !2899, !DIExpression(), !2901)
  %lo362 = load i64, ptr %current, align 8
  %ptradd363 = getelementptr inbounds i8, ptr %current, i64 8
  %hi364 = load ptr, ptr %ptradd363, align 8
  %268 = call i64 @std.io.float_from_any(ptr %retparam361, i64 %lo362, ptr %hi364), !dbg !2903
  %not_err365 = icmp eq i64 %268, 0, !dbg !2903
  %269 = call i1 @llvm.expect.i1(i1 %not_err365, i1 true), !dbg !2903
  br i1 %269, label %after_check367, label %assign_optional366, !dbg !2903

assign_optional366:                               ; preds = %switch.case355
  store i64 %268, ptr %len.f360, align 8, !dbg !2903
  br label %after_assign372, !dbg !2903

after_check367:                                   ; preds = %switch.case355
  %270 = load ptr, ptr %self, align 8
  %271 = load double, ptr %retparam361, align 8
  %272 = call i64 @std.io.Formatter.etoa(ptr %retparam368, ptr %270, double %271), !dbg !2904
  %not_err369 = icmp eq i64 %272, 0, !dbg !2904
  %273 = call i1 @llvm.expect.i1(i1 %not_err369, i1 true), !dbg !2904
  br i1 %273, label %after_check371, label %assign_optional370, !dbg !2904

assign_optional370:                               ; preds = %after_check367
  store i64 %272, ptr %len.f360, align 8, !dbg !2904
  br label %after_assign372, !dbg !2904

after_check371:                                   ; preds = %after_check367
  %274 = load i64, ptr %retparam368, align 8, !dbg !2904
  store i64 %274, ptr %len359, align 8, !dbg !2904
  store i64 0, ptr %len.f360, align 8, !dbg !2904
  br label %after_assign372, !dbg !2904

after_assign372:                                  ; preds = %after_check371, %assign_optional370, %assign_optional366
    #dbg_declare(ptr %err373, !2905, !DIExpression(), !2906)
  br label %testblock374, !dbg !2906

testblock374:                                     ; preds = %after_assign372
  %optval375 = load i64, ptr %len.f360, align 8, !dbg !2907
  %not_err376 = icmp eq i64 %optval375, 0, !dbg !2907
  %275 = call i1 @llvm.expect.i1(i1 %not_err376, i1 true), !dbg !2907
  br i1 %275, label %after_check378, label %assign_optional377, !dbg !2907

assign_optional377:                               ; preds = %testblock374
  store i64 %optval375, ptr %err373, align 8, !dbg !2907
  br label %end_block379, !dbg !2907

after_check378:                                   ; preds = %testblock374
  store i64 0, ptr %err373, align 8, !dbg !2907
  br label %end_block379, !dbg !2907

end_block379:                                     ; preds = %after_check378, %assign_optional377
  %276 = load i64, ptr %err373, align 8, !dbg !2907
  %neq380 = icmp ne i64 %276, 0, !dbg !2907
  br i1 %neq380, label %if.then381, label %if.exit424, !dbg !2907

if.then381:                                       ; preds = %end_block379
  store i64 %276, ptr %switch382, align 8
  br label %switch.entry383

switch.entry383:                                  ; preds = %if.then381
  %277 = load i64, ptr %switch382, align 8
  %eq384 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$BUFFER_EXCEEDED" to i64), %277, !dbg !2908
  br i1 %eq384, label %switch.case387, label %next_if385, !dbg !2908

next_if385:                                       ; preds = %switch.entry383
  %eq386 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), %277, !dbg !2909
  br i1 %eq386, label %switch.case387, label %next_if401, !dbg !2909

switch.case387:                                   ; preds = %next_if385, %switch.entry383
  %278 = load ptr, ptr %f357, align 8
  store ptr %278, ptr %self388, align 8
  %279 = load i64, ptr %err373, align 8
  store i64 %279, ptr %f389, align 8
  %280 = load ptr, ptr %self388, align 8, !dbg !2910
  %ptradd391 = getelementptr inbounds i8, ptr %280, i64 16, !dbg !2910
  %ptradd392 = getelementptr inbounds i8, ptr %ptradd391, i64 24, !dbg !2910
  %281 = load i64, ptr %ptradd392, align 8, !dbg !2910
  %i2b393 = icmp ne i64 %281, 0, !dbg !2910
  br i1 %i2b393, label %if.then394, label %if.exit397, !dbg !2910

if.then394:                                       ; preds = %switch.case387
  %282 = load ptr, ptr %self388, align 8, !dbg !2914
  %ptradd395 = getelementptr inbounds i8, ptr %282, i64 16, !dbg !2914
  %ptradd396 = getelementptr inbounds i8, ptr %ptradd395, i64 24, !dbg !2914
  %283 = load i64, ptr %ptradd396, align 8, !dbg !2914
  store i64 %283, ptr %blockret390, align 8, !dbg !2914
  br label %expr_block.exit400, !dbg !2914

if.exit397:                                       ; preds = %switch.case387
  %284 = load ptr, ptr %self388, align 8, !dbg !2915
  %ptradd398 = getelementptr inbounds i8, ptr %284, i64 16, !dbg !2915
  %ptradd399 = getelementptr inbounds i8, ptr %ptradd398, i64 24, !dbg !2915
  %285 = load i64, ptr %f389, align 8, !dbg !2916
  store i64 %285, ptr %ptradd399, align 8, !dbg !2916
  %286 = load i64, ptr %f389, align 8, !dbg !2917
  store i64 %286, ptr %blockret390, align 8, !dbg !2917
  br label %expr_block.exit400, !dbg !2917

expr_block.exit400:                               ; preds = %if.exit397, %if.then394
  %287 = load i64, ptr %blockret390, align 8, !dbg !2917
  store i64 %287, ptr %error_var356, align 8, !dbg !2917
  br label %guard_block425, !dbg !2917

next_if401:                                       ; preds = %next_if385
  br label %switch.default402, !dbg !2917

switch.default402:                                ; preds = %next_if401
  %288 = load ptr, ptr %f357, align 8
  store ptr %288, ptr %self403, align 8
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_ARGUMENT" to i64), ptr %f404, align 8
  %289 = load ptr, ptr %self403, align 8, !dbg !2918
  %ptradd406 = getelementptr inbounds i8, ptr %289, i64 16, !dbg !2918
  %ptradd407 = getelementptr inbounds i8, ptr %ptradd406, i64 24, !dbg !2918
  %290 = load i64, ptr %ptradd407, align 8, !dbg !2918
  %i2b408 = icmp ne i64 %290, 0, !dbg !2918
  br i1 %i2b408, label %if.then409, label %if.exit412, !dbg !2918

if.then409:                                       ; preds = %switch.default402
  %291 = load ptr, ptr %self403, align 8, !dbg !2922
  %ptradd410 = getelementptr inbounds i8, ptr %291, i64 16, !dbg !2922
  %ptradd411 = getelementptr inbounds i8, ptr %ptradd410, i64 24, !dbg !2922
  %292 = load i64, ptr %ptradd411, align 8, !dbg !2922
  store i64 %292, ptr %blockret405, align 8, !dbg !2922
  br label %expr_block.exit415, !dbg !2922

if.exit412:                                       ; preds = %switch.default402
  %293 = load ptr, ptr %self403, align 8, !dbg !2923
  %ptradd413 = getelementptr inbounds i8, ptr %293, i64 16, !dbg !2923
  %ptradd414 = getelementptr inbounds i8, ptr %ptradd413, i64 24, !dbg !2923
  %294 = load i64, ptr %f404, align 8, !dbg !2924
  store i64 %294, ptr %ptradd414, align 8, !dbg !2924
  %295 = load i64, ptr %f404, align 8, !dbg !2925
  store i64 %295, ptr %blockret405, align 8, !dbg !2925
  br label %expr_block.exit415, !dbg !2925

expr_block.exit415:                               ; preds = %if.exit412, %if.then409
  %296 = load i64, ptr %blockret405, align 8, !dbg !2925
  store i64 %296, ptr %err373, align 8, !dbg !2925
  %297 = load ptr, ptr %f357, align 8
  %298 = call i64 @std.io.Formatter.out_substr(ptr %retparam417, ptr %297, ptr @.str.195, i64 9), !dbg !2926
  %not_err418 = icmp eq i64 %298, 0, !dbg !2926
  %299 = call i1 @llvm.expect.i1(i1 %not_err418, i1 true), !dbg !2926
  br i1 %299, label %after_check420, label %assign_optional419, !dbg !2926

assign_optional419:                               ; preds = %expr_block.exit415
  store i64 %298, ptr %error_var416, align 8, !dbg !2926
  br label %guard_block421, !dbg !2926

after_check420:                                   ; preds = %expr_block.exit415
  br label %noerr_block422, !dbg !2926

guard_block421:                                   ; preds = %assign_optional419
  %300 = load i64, ptr %error_var416, align 8, !dbg !2926
  store i64 %300, ptr %error_var356, align 8, !dbg !2926
  br label %guard_block425, !dbg !2926

noerr_block422:                                   ; preds = %after_check420
  %301 = load i64, ptr %err373, align 8, !dbg !2927
  store i64 %301, ptr %error_var356, align 8, !dbg !2927
  br label %guard_block425, !dbg !2927

if.exit424:                                       ; preds = %end_block379
  br label %noerr_block426, !dbg !2928

guard_block425:                                   ; preds = %noerr_block422, %guard_block421, %expr_block.exit400
  %302 = load i64, ptr %error_var356, align 8, !dbg !2928
  ret i64 %302, !dbg !2928

noerr_block426:                                   ; preds = %if.exit424
  %303 = load i64, ptr %len359, align 8, !dbg !2928
  %add427 = add i64 %266, %303, !dbg !2897
  store i64 %add427, ptr %total_len, align 8, !dbg !2897
  br label %loop.inc, !dbg !2929

switch.case428:                                   ; preds = %switch.entry197
  %304 = load ptr, ptr %self, align 8, !dbg !2930
  %ptradd429 = getelementptr inbounds i8, ptr %304, i64 16, !dbg !2930
  %305 = load i32, ptr %ptradd429, align 8, !dbg !2932
  %306 = and i32 %305, -33, !dbg !2932
  %307 = or i32 %306, 32, !dbg !2932
  store i32 %307, ptr %ptradd429, align 8, !dbg !2932
  br label %switch.case430, !dbg !2933

switch.case430:                                   ; preds = %switch.entry197, %switch.case428
  %308 = load i64, ptr %total_len, align 8, !dbg !2934
  %309 = load ptr, ptr %self, align 8
  store ptr %309, ptr %f432, align 8
    #dbg_declare(ptr %len434, !2936, !DIExpression(), !2938)
  %lo437 = load i64, ptr %current, align 8
  %ptradd438 = getelementptr inbounds i8, ptr %current, i64 8
  %hi439 = load ptr, ptr %ptradd438, align 8
  %310 = call i64 @std.io.float_from_any(ptr %retparam436, i64 %lo437, ptr %hi439), !dbg !2940
  %not_err440 = icmp eq i64 %310, 0, !dbg !2940
  %311 = call i1 @llvm.expect.i1(i1 %not_err440, i1 true), !dbg !2940
  br i1 %311, label %after_check442, label %assign_optional441, !dbg !2940

assign_optional441:                               ; preds = %switch.case430
  store i64 %310, ptr %len.f435, align 8, !dbg !2940
  br label %after_assign447, !dbg !2940

after_check442:                                   ; preds = %switch.case430
  %312 = load ptr, ptr %self, align 8
  %313 = load double, ptr %retparam436, align 8
  %314 = call i64 @std.io.Formatter.gtoa(ptr %retparam443, ptr %312, double %313), !dbg !2941
  %not_err444 = icmp eq i64 %314, 0, !dbg !2941
  %315 = call i1 @llvm.expect.i1(i1 %not_err444, i1 true), !dbg !2941
  br i1 %315, label %after_check446, label %assign_optional445, !dbg !2941

assign_optional445:                               ; preds = %after_check442
  store i64 %314, ptr %len.f435, align 8, !dbg !2941
  br label %after_assign447, !dbg !2941

after_check446:                                   ; preds = %after_check442
  %316 = load i64, ptr %retparam443, align 8, !dbg !2941
  store i64 %316, ptr %len434, align 8, !dbg !2941
  store i64 0, ptr %len.f435, align 8, !dbg !2941
  br label %after_assign447, !dbg !2941

after_assign447:                                  ; preds = %after_check446, %assign_optional445, %assign_optional441
    #dbg_declare(ptr %err448, !2942, !DIExpression(), !2943)
  br label %testblock449, !dbg !2943

testblock449:                                     ; preds = %after_assign447
  %optval450 = load i64, ptr %len.f435, align 8, !dbg !2944
  %not_err451 = icmp eq i64 %optval450, 0, !dbg !2944
  %317 = call i1 @llvm.expect.i1(i1 %not_err451, i1 true), !dbg !2944
  br i1 %317, label %after_check453, label %assign_optional452, !dbg !2944

assign_optional452:                               ; preds = %testblock449
  store i64 %optval450, ptr %err448, align 8, !dbg !2944
  br label %end_block454, !dbg !2944

after_check453:                                   ; preds = %testblock449
  store i64 0, ptr %err448, align 8, !dbg !2944
  br label %end_block454, !dbg !2944

end_block454:                                     ; preds = %after_check453, %assign_optional452
  %318 = load i64, ptr %err448, align 8, !dbg !2944
  %neq455 = icmp ne i64 %318, 0, !dbg !2944
  br i1 %neq455, label %if.then456, label %if.exit499, !dbg !2944

if.then456:                                       ; preds = %end_block454
  store i64 %318, ptr %switch457, align 8
  br label %switch.entry458

switch.entry458:                                  ; preds = %if.then456
  %319 = load i64, ptr %switch457, align 8
  %eq459 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$BUFFER_EXCEEDED" to i64), %319, !dbg !2945
  br i1 %eq459, label %switch.case462, label %next_if460, !dbg !2945

next_if460:                                       ; preds = %switch.entry458
  %eq461 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), %319, !dbg !2946
  br i1 %eq461, label %switch.case462, label %next_if476, !dbg !2946

switch.case462:                                   ; preds = %next_if460, %switch.entry458
  %320 = load ptr, ptr %f432, align 8
  store ptr %320, ptr %self463, align 8
  %321 = load i64, ptr %err448, align 8
  store i64 %321, ptr %f464, align 8
  %322 = load ptr, ptr %self463, align 8, !dbg !2947
  %ptradd466 = getelementptr inbounds i8, ptr %322, i64 16, !dbg !2947
  %ptradd467 = getelementptr inbounds i8, ptr %ptradd466, i64 24, !dbg !2947
  %323 = load i64, ptr %ptradd467, align 8, !dbg !2947
  %i2b468 = icmp ne i64 %323, 0, !dbg !2947
  br i1 %i2b468, label %if.then469, label %if.exit472, !dbg !2947

if.then469:                                       ; preds = %switch.case462
  %324 = load ptr, ptr %self463, align 8, !dbg !2951
  %ptradd470 = getelementptr inbounds i8, ptr %324, i64 16, !dbg !2951
  %ptradd471 = getelementptr inbounds i8, ptr %ptradd470, i64 24, !dbg !2951
  %325 = load i64, ptr %ptradd471, align 8, !dbg !2951
  store i64 %325, ptr %blockret465, align 8, !dbg !2951
  br label %expr_block.exit475, !dbg !2951

if.exit472:                                       ; preds = %switch.case462
  %326 = load ptr, ptr %self463, align 8, !dbg !2952
  %ptradd473 = getelementptr inbounds i8, ptr %326, i64 16, !dbg !2952
  %ptradd474 = getelementptr inbounds i8, ptr %ptradd473, i64 24, !dbg !2952
  %327 = load i64, ptr %f464, align 8, !dbg !2953
  store i64 %327, ptr %ptradd474, align 8, !dbg !2953
  %328 = load i64, ptr %f464, align 8, !dbg !2954
  store i64 %328, ptr %blockret465, align 8, !dbg !2954
  br label %expr_block.exit475, !dbg !2954

expr_block.exit475:                               ; preds = %if.exit472, %if.then469
  %329 = load i64, ptr %blockret465, align 8, !dbg !2954
  store i64 %329, ptr %error_var431, align 8, !dbg !2954
  br label %guard_block500, !dbg !2954

next_if476:                                       ; preds = %next_if460
  br label %switch.default477, !dbg !2954

switch.default477:                                ; preds = %next_if476
  %330 = load ptr, ptr %f432, align 8
  store ptr %330, ptr %self478, align 8
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_ARGUMENT" to i64), ptr %f479, align 8
  %331 = load ptr, ptr %self478, align 8, !dbg !2955
  %ptradd481 = getelementptr inbounds i8, ptr %331, i64 16, !dbg !2955
  %ptradd482 = getelementptr inbounds i8, ptr %ptradd481, i64 24, !dbg !2955
  %332 = load i64, ptr %ptradd482, align 8, !dbg !2955
  %i2b483 = icmp ne i64 %332, 0, !dbg !2955
  br i1 %i2b483, label %if.then484, label %if.exit487, !dbg !2955

if.then484:                                       ; preds = %switch.default477
  %333 = load ptr, ptr %self478, align 8, !dbg !2959
  %ptradd485 = getelementptr inbounds i8, ptr %333, i64 16, !dbg !2959
  %ptradd486 = getelementptr inbounds i8, ptr %ptradd485, i64 24, !dbg !2959
  %334 = load i64, ptr %ptradd486, align 8, !dbg !2959
  store i64 %334, ptr %blockret480, align 8, !dbg !2959
  br label %expr_block.exit490, !dbg !2959

if.exit487:                                       ; preds = %switch.default477
  %335 = load ptr, ptr %self478, align 8, !dbg !2960
  %ptradd488 = getelementptr inbounds i8, ptr %335, i64 16, !dbg !2960
  %ptradd489 = getelementptr inbounds i8, ptr %ptradd488, i64 24, !dbg !2960
  %336 = load i64, ptr %f479, align 8, !dbg !2961
  store i64 %336, ptr %ptradd489, align 8, !dbg !2961
  %337 = load i64, ptr %f479, align 8, !dbg !2962
  store i64 %337, ptr %blockret480, align 8, !dbg !2962
  br label %expr_block.exit490, !dbg !2962

expr_block.exit490:                               ; preds = %if.exit487, %if.then484
  %338 = load i64, ptr %blockret480, align 8, !dbg !2962
  store i64 %338, ptr %err448, align 8, !dbg !2962
  %339 = load ptr, ptr %f432, align 8
  %340 = call i64 @std.io.Formatter.out_substr(ptr %retparam492, ptr %339, ptr @.str.196, i64 9), !dbg !2963
  %not_err493 = icmp eq i64 %340, 0, !dbg !2963
  %341 = call i1 @llvm.expect.i1(i1 %not_err493, i1 true), !dbg !2963
  br i1 %341, label %after_check495, label %assign_optional494, !dbg !2963

assign_optional494:                               ; preds = %expr_block.exit490
  store i64 %340, ptr %error_var491, align 8, !dbg !2963
  br label %guard_block496, !dbg !2963

after_check495:                                   ; preds = %expr_block.exit490
  br label %noerr_block497, !dbg !2963

guard_block496:                                   ; preds = %assign_optional494
  %342 = load i64, ptr %error_var491, align 8, !dbg !2963
  store i64 %342, ptr %error_var431, align 8, !dbg !2963
  br label %guard_block500, !dbg !2963

noerr_block497:                                   ; preds = %after_check495
  %343 = load i64, ptr %err448, align 8, !dbg !2964
  store i64 %343, ptr %error_var431, align 8, !dbg !2964
  br label %guard_block500, !dbg !2964

if.exit499:                                       ; preds = %end_block454
  br label %noerr_block501, !dbg !2965

guard_block500:                                   ; preds = %noerr_block497, %guard_block496, %expr_block.exit475
  %344 = load i64, ptr %error_var431, align 8, !dbg !2965
  ret i64 %344, !dbg !2965

noerr_block501:                                   ; preds = %if.exit499
  %345 = load i64, ptr %len434, align 8, !dbg !2965
  %add502 = add i64 %308, %345, !dbg !2934
  store i64 %add502, ptr %total_len, align 8, !dbg !2934
  br label %loop.inc, !dbg !2966

switch.case503:                                   ; preds = %switch.entry197
  %346 = load i64, ptr %total_len, align 8, !dbg !2967
  %347 = load ptr, ptr %self, align 8
  %lo506 = load i64, ptr %current, align 8
  %ptradd507 = getelementptr inbounds i8, ptr %current, i64 8
  %hi508 = load ptr, ptr %ptradd507, align 8
  %348 = call i64 @std.io.Formatter.out_char(ptr %retparam505, ptr %347, i64 %lo506, ptr %hi508), !dbg !2969
  %not_err509 = icmp eq i64 %348, 0, !dbg !2969
  %349 = call i1 @llvm.expect.i1(i1 %not_err509, i1 true), !dbg !2969
  br i1 %349, label %after_check511, label %assign_optional510, !dbg !2969

assign_optional510:                               ; preds = %switch.case503
  store i64 %348, ptr %error_var504, align 8, !dbg !2969
  br label %guard_block512, !dbg !2969

after_check511:                                   ; preds = %switch.case503
  br label %noerr_block513, !dbg !2969

guard_block512:                                   ; preds = %assign_optional510
  %350 = load i64, ptr %error_var504, align 8, !dbg !2969
  ret i64 %350, !dbg !2969

noerr_block513:                                   ; preds = %after_check511
  %351 = load i64, ptr %retparam505, align 8, !dbg !2969
  %add514 = add i64 %346, %351, !dbg !2967
  store i64 %add514, ptr %total_len, align 8, !dbg !2967
  br label %loop.inc, !dbg !2970

switch.case515:                                   ; preds = %switch.entry197
  %352 = load ptr, ptr %self, align 8, !dbg !2971
  %ptradd516 = getelementptr inbounds i8, ptr %352, i64 16, !dbg !2971
  %353 = load i32, ptr %ptradd516, align 8, !dbg !2973
  %354 = and i32 %353, -33, !dbg !2973
  %355 = or i32 %354, 32, !dbg !2973
  store i32 %355, ptr %ptradd516, align 8, !dbg !2973
  br label %switch.case517, !dbg !2974

switch.case517:                                   ; preds = %switch.entry197, %switch.case515
    #dbg_declare(ptr %out, !2975, !DIExpression(), !2977)
  %ptradd518 = getelementptr inbounds i8, ptr %current, i64 8, !dbg !2978
  %356 = load i64, ptr %ptradd518, align 8
  store i64 %356, ptr %switch519, align 8
  br label %switch.entry520

switch.entry520:                                  ; preds = %switch.case517
  %357 = load i64, ptr %switch519, align 8
  br label %check_subtype, !dbg !2980

check_subtype:                                    ; preds = %parent_type_block, %switch.entry520
  %358 = phi i64 [ %357, %switch.entry520 ], [ %typeid.parent, %parent_type_block ], !dbg !2980
  %eq521 = icmp eq i64 ptrtoint (ptr @"$ct.sa$char" to i64), %358, !dbg !2980
  br i1 %eq521, label %result_block, label %parent_type_block, !dbg !2980

parent_type_block:                                ; preds = %check_subtype
  %359 = inttoptr i64 %358 to ptr, !dbg !2980
  %ptradd522 = getelementptr inbounds i8, ptr %359, i64 8, !dbg !2980
  %typeid.parent = load i64, ptr %ptradd522, align 8, !dbg !2980
  %360 = icmp eq i64 %typeid.parent, 0, !dbg !2980
  br i1 %360, label %result_block, label %check_subtype, !dbg !2980

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %361 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !2980
  br i1 %361, label %switch.case523, label %next_if535, !dbg !2980

switch.case523:                                   ; preds = %result_block
    #dbg_declare(ptr %current524, !2981, !DIExpression(), !2983)
  %362 = load ptr, ptr %current, align 8, !dbg !2983
  store ptr %362, ptr %current524, align 8, !dbg !2983
  %363 = load ptr, ptr %current524, align 8, !dbg !2984
  %checknull = icmp eq ptr %363, null, !dbg !2984
  %364 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2984
  br i1 %364, label %panic525, label %checkok526, !dbg !2984

checkok526:                                       ; preds = %switch.case523
  %365 = ptrtoint ptr %363 to i64, !dbg !2984
  %366 = urem i64 %365, 8, !dbg !2984
  %367 = icmp ne i64 %366, 0, !dbg !2984
  %368 = call i1 @llvm.expect.i1(i1 %367, i1 false), !dbg !2984
  br i1 %368, label %panic527, label %checkok534, !dbg !2984

checkok534:                                       ; preds = %checkok526
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out, ptr align 8 %363, i32 16, i1 false), !dbg !2984
  br label %switch.exit620, !dbg !2984

next_if535:                                       ; preds = %result_block
  br label %check_subtype536, !dbg !2985

check_subtype536:                                 ; preds = %parent_type_block538, %next_if535
  %369 = phi i64 [ %357, %next_if535 ], [ %typeid.parent540, %parent_type_block538 ], !dbg !2985
  %eq537 = icmp eq i64 ptrtoint (ptr @"$ct.sa$ichar" to i64), %369, !dbg !2985
  br i1 %eq537, label %result_block541, label %parent_type_block538, !dbg !2985

parent_type_block538:                             ; preds = %check_subtype536
  %370 = inttoptr i64 %369 to ptr, !dbg !2985
  %ptradd539 = getelementptr inbounds i8, ptr %370, i64 8, !dbg !2985
  %typeid.parent540 = load i64, ptr %ptradd539, align 8, !dbg !2985
  %371 = icmp eq i64 %typeid.parent540, 0, !dbg !2985
  br i1 %371, label %result_block541, label %check_subtype536, !dbg !2985

result_block541:                                  ; preds = %parent_type_block538, %check_subtype536
  %372 = phi i1 [ false, %parent_type_block538 ], [ true, %check_subtype536 ], !dbg !2985
  br i1 %372, label %switch.case542, label %next_if555, !dbg !2985

switch.case542:                                   ; preds = %result_block541
    #dbg_declare(ptr %current543, !2986, !DIExpression(), !2994)
  %373 = load ptr, ptr %current, align 8, !dbg !2994
  store ptr %373, ptr %current543, align 8, !dbg !2994
  %374 = load ptr, ptr %current543, align 8, !dbg !2995
  %checknull544 = icmp eq ptr %374, null, !dbg !2995
  %375 = call i1 @llvm.expect.i1(i1 %checknull544, i1 false), !dbg !2995
  br i1 %375, label %panic545, label %checkok546, !dbg !2995

checkok546:                                       ; preds = %switch.case542
  %376 = ptrtoint ptr %374 to i64, !dbg !2996
  %377 = urem i64 %376, 8, !dbg !2996
  %378 = icmp ne i64 %377, 0, !dbg !2996
  %379 = call i1 @llvm.expect.i1(i1 %378, i1 false), !dbg !2996
  br i1 %379, label %panic547, label %checkok554, !dbg !2996

checkok554:                                       ; preds = %checkok546
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out, ptr align 8 %374, i32 16, i1 false), !dbg !2996
  br label %switch.exit620, !dbg !2996

next_if555:                                       ; preds = %result_block541
  br label %switch.default556, !dbg !2996

switch.default556:                                ; preds = %next_if555
  %ptradd557 = getelementptr inbounds i8, ptr %current, i64 8, !dbg !2997
  %380 = load i64, ptr %ptradd557, align 8, !dbg !2997
  %"introspect*" = inttoptr i64 %380 to ptr, !dbg !2997
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !2997
  %eq558 = icmp eq i8 %typeid.kind, 15, !dbg !2997
  br i1 %eq558, label %and.rhs, label %and.phi, !dbg !2997

and.rhs:                                          ; preds = %switch.default556
  %ptradd559 = getelementptr inbounds i8, ptr %current, i64 8, !dbg !2999
  %381 = load i64, ptr %ptradd559, align 8, !dbg !2999
  %"introspect*560" = inttoptr i64 %381 to ptr, !dbg !2999
  %typeid.kind561 = load i8, ptr %"introspect*560", align 8, !dbg !2999
  %eq562 = icmp eq i8 %typeid.kind561, 15, !dbg !2999
  br i1 %eq562, label %check_type_ok, label %check_next, !dbg !2999

check_next:                                       ; preds = %and.rhs
  %eq563 = icmp eq i8 %typeid.kind561, 19, !dbg !2999
  br i1 %eq563, label %check_type_ok, label %check_next564, !dbg !2999

check_next564:                                    ; preds = %check_next
  %eq565 = icmp eq i8 %typeid.kind561, 17, !dbg !2999
  br i1 %eq565, label %check_type_ok, label %check_next566, !dbg !2999

check_next566:                                    ; preds = %check_next564
  %eq567 = icmp eq i8 %typeid.kind561, 8, !dbg !2999
  br i1 %eq567, label %check_type_ok, label %check_next568, !dbg !2999

check_next568:                                    ; preds = %check_next566
  %eq569 = icmp eq i8 %typeid.kind561, 16, !dbg !2999
  br i1 %eq569, label %check_type_ok, label %check_next570, !dbg !2999

check_next570:                                    ; preds = %check_next568
  %eq571 = icmp eq i8 %typeid.kind561, 18, !dbg !2999
  br i1 %eq571, label %check_type_ok, label %check_next572, !dbg !2999

check_next572:                                    ; preds = %check_next570
  %eq573 = icmp eq i8 %typeid.kind561, 14, !dbg !2999
  br i1 %eq573, label %check_type_ok, label %check_next574, !dbg !2999

check_next574:                                    ; preds = %check_next572
  %eq575 = icmp eq i8 %typeid.kind561, 12, !dbg !2999
  br i1 %eq575, label %check_type_ok, label %check_next576, !dbg !2999

check_next576:                                    ; preds = %check_next574
  %382 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2999
  call void %382(ptr @.panic_msg.144, i64 49, ptr @.file.118, i64 12, ptr @.func.186, i64 7, i32 491) #5, !dbg !2999
  unreachable, !dbg !2999

check_type_ok:                                    ; preds = %check_next574, %check_next572, %check_next570, %check_next568, %check_next566, %check_next564, %check_next, %and.rhs
  %ptradd577 = getelementptr inbounds i8, ptr %"introspect*560", i64 32, !dbg !2999
  %typeid.inner = load i64, ptr %ptradd577, align 8, !dbg !2999
  %eq578 = icmp eq i64 %typeid.inner, ptrtoint (ptr @"$ct.char" to i64), !dbg !2999
  br i1 %eq578, label %or.phi, label %or.rhs, !dbg !2999

or.rhs:                                           ; preds = %check_type_ok
  %ptradd579 = getelementptr inbounds i8, ptr %current, i64 8, !dbg !3000
  %383 = load i64, ptr %ptradd579, align 8, !dbg !3000
  %"introspect*580" = inttoptr i64 %383 to ptr, !dbg !3000
  %typeid.kind581 = load i8, ptr %"introspect*580", align 8, !dbg !3000
  %eq582 = icmp eq i8 %typeid.kind581, 15, !dbg !3000
  br i1 %eq582, label %check_type_ok598, label %check_next583, !dbg !3000

check_next583:                                    ; preds = %or.rhs
  %eq584 = icmp eq i8 %typeid.kind581, 19, !dbg !3000
  br i1 %eq584, label %check_type_ok598, label %check_next585, !dbg !3000

check_next585:                                    ; preds = %check_next583
  %eq586 = icmp eq i8 %typeid.kind581, 17, !dbg !3000
  br i1 %eq586, label %check_type_ok598, label %check_next587, !dbg !3000

check_next587:                                    ; preds = %check_next585
  %eq588 = icmp eq i8 %typeid.kind581, 8, !dbg !3000
  br i1 %eq588, label %check_type_ok598, label %check_next589, !dbg !3000

check_next589:                                    ; preds = %check_next587
  %eq590 = icmp eq i8 %typeid.kind581, 16, !dbg !3000
  br i1 %eq590, label %check_type_ok598, label %check_next591, !dbg !3000

check_next591:                                    ; preds = %check_next589
  %eq592 = icmp eq i8 %typeid.kind581, 18, !dbg !3000
  br i1 %eq592, label %check_type_ok598, label %check_next593, !dbg !3000

check_next593:                                    ; preds = %check_next591
  %eq594 = icmp eq i8 %typeid.kind581, 14, !dbg !3000
  br i1 %eq594, label %check_type_ok598, label %check_next595, !dbg !3000

check_next595:                                    ; preds = %check_next593
  %eq596 = icmp eq i8 %typeid.kind581, 12, !dbg !3000
  br i1 %eq596, label %check_type_ok598, label %check_next597, !dbg !3000

check_next597:                                    ; preds = %check_next595
  %384 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3000
  call void %384(ptr @.panic_msg.144, i64 49, ptr @.file.118, i64 12, ptr @.func.186, i64 7, i32 491) #5, !dbg !3000
  unreachable, !dbg !3000

check_type_ok598:                                 ; preds = %check_next595, %check_next593, %check_next591, %check_next589, %check_next587, %check_next585, %check_next583, %or.rhs
  %ptradd599 = getelementptr inbounds i8, ptr %"introspect*580", i64 32, !dbg !3000
  %typeid.inner600 = load i64, ptr %ptradd599, align 8, !dbg !3000
  %eq601 = icmp eq i64 %typeid.inner600, ptrtoint (ptr @"$ct.ichar" to i64), !dbg !3000
  br label %or.phi, !dbg !3000

or.phi:                                           ; preds = %check_type_ok598, %check_type_ok
  %val602 = phi i1 [ true, %check_type_ok ], [ %eq601, %check_type_ok598 ], !dbg !3000
  br label %and.phi, !dbg !3000

and.phi:                                          ; preds = %or.phi, %switch.default556
  %val603 = phi i1 [ false, %switch.default556 ], [ %val602, %or.phi ], !dbg !3000
  br i1 %val603, label %if.then604, label %if.exit611, !dbg !3000

if.then604:                                       ; preds = %and.phi
  %385 = load ptr, ptr %current, align 8, !dbg !3001
  store ptr %385, ptr %taddr605, align 8
  %386 = load ptr, ptr %taddr605, align 8
  %ptradd606 = getelementptr inbounds i8, ptr %current, i64 8, !dbg !3003
  %387 = load i64, ptr %ptradd606, align 8, !dbg !3003
  %"introspect*607" = inttoptr i64 %387 to ptr, !dbg !3003
  %typeid.kind608 = load i8, ptr %"introspect*607", align 8, !dbg !3003
  %ptradd609 = getelementptr inbounds i8, ptr %"introspect*607", i64 24, !dbg !3003
  %typeid.size = load i64, ptr %ptradd609, align 8, !dbg !3003
  %add610 = add i64 0, %typeid.size, !dbg !3003
  %size = sub i64 %add610, 0, !dbg !3003
  %388 = insertvalue %"char[]" undef, ptr %386, 0, !dbg !3003
  %389 = insertvalue %"char[]" %388, i64 %size, 1, !dbg !3003
  store %"char[]" %389, ptr %out, align 8, !dbg !3003
  br label %switch.exit620, !dbg !3004

if.exit611:                                       ; preds = %and.phi
  %390 = load i64, ptr %total_len, align 8, !dbg !3005
  %391 = load ptr, ptr %self, align 8
  %392 = call i64 @std.io.Formatter.out_substr(ptr %retparam613, ptr %391, ptr @.str.199, i64 9), !dbg !3006
  %not_err614 = icmp eq i64 %392, 0, !dbg !3006
  %393 = call i1 @llvm.expect.i1(i1 %not_err614, i1 true), !dbg !3006
  br i1 %393, label %after_check616, label %assign_optional615, !dbg !3006

assign_optional615:                               ; preds = %if.exit611
  store i64 %392, ptr %error_var612, align 8, !dbg !3006
  br label %guard_block617, !dbg !3006

after_check616:                                   ; preds = %if.exit611
  br label %noerr_block618, !dbg !3006

guard_block617:                                   ; preds = %assign_optional615
  %394 = load i64, ptr %error_var612, align 8, !dbg !3006
  ret i64 %394, !dbg !3006

noerr_block618:                                   ; preds = %after_check616
  %395 = load i64, ptr %retparam613, align 8, !dbg !3006
  %add619 = add i64 %390, %395, !dbg !3005
  store i64 %add619, ptr %total_len, align 8, !dbg !3005
  br label %loop.inc, !dbg !3007

switch.exit620:                                   ; preds = %if.then604, %checkok554, %checkok534
  %396 = load ptr, ptr %self, align 8, !dbg !3008
  %ptradd621 = getelementptr inbounds i8, ptr %396, i64 16, !dbg !3008
  %397 = load i32, ptr %ptradd621, align 8, !dbg !3008
  %lshrl = lshr i32 %397, 1, !dbg !3008
  %398 = and i32 1, %lshrl, !dbg !3008
  %trunc = trunc i32 %398 to i8, !dbg !3008
  %399 = trunc i8 %trunc to i1, !dbg !3008
  br i1 %399, label %if.then622, label %if.exit648, !dbg !3008

if.then622:                                       ; preds = %switch.exit620
    #dbg_declare(ptr %len623, !3009, !DIExpression(), !3011)
  %400 = load ptr, ptr %self, align 8, !dbg !3012
  %ptradd625 = getelementptr inbounds i8, ptr %400, i64 16, !dbg !3012
  %401 = load i32, ptr %ptradd625, align 8, !dbg !3012
  %lshrl626 = lshr i32 %401, 5, !dbg !3012
  %402 = and i32 1, %lshrl626, !dbg !3012
  %trunc627 = trunc i32 %402 to i8, !dbg !3012
  %403 = load ptr, ptr %self, align 8
  %lo629 = load ptr, ptr %out, align 8
  %ptradd630 = getelementptr inbounds i8, ptr %out, i64 8
  %hi631 = load i64, ptr %ptradd630, align 8
  %404 = call i64 @std.io.print_hex_chars(ptr %retparam628, ptr %403, ptr %lo629, i64 %hi631, i8 zeroext %trunc627) #6, !dbg !3013
  %not_err632 = icmp eq i64 %404, 0, !dbg !3013
  %405 = call i1 @llvm.expect.i1(i1 %not_err632, i1 true), !dbg !3013
  br i1 %405, label %after_check634, label %assign_optional633, !dbg !3013

assign_optional633:                               ; preds = %if.then622
  store i64 %404, ptr %error_var624, align 8, !dbg !3013
  br label %guard_block635, !dbg !3013

after_check634:                                   ; preds = %if.then622
  br label %noerr_block636, !dbg !3013

guard_block635:                                   ; preds = %assign_optional633
  %406 = load i64, ptr %error_var624, align 8, !dbg !3013
  ret i64 %406, !dbg !3013

noerr_block636:                                   ; preds = %after_check634
  %407 = load i64, ptr %retparam628, align 8, !dbg !3013
  store i64 %407, ptr %len623, align 8, !dbg !3013
  %408 = load i64, ptr %total_len, align 8, !dbg !3014
  %409 = load i64, ptr %len623, align 8, !dbg !3015
  %add637 = add i64 %408, %409, !dbg !3014
  store i64 %add637, ptr %total_len, align 8, !dbg !3014
  %410 = load i64, ptr %total_len, align 8, !dbg !3016
  %411 = load ptr, ptr %self, align 8, !dbg !3017
  %ptradd639 = getelementptr inbounds i8, ptr %411, i64 16, !dbg !3017
  %ptradd640 = getelementptr inbounds i8, ptr %ptradd639, i64 4, !dbg !3017
  %412 = load i32, ptr %ptradd640, align 4, !dbg !3017
  %zext = zext i32 %412 to i64, !dbg !3017
  %413 = load i64, ptr %len623, align 8, !dbg !3018
  %414 = load ptr, ptr %self, align 8
  %415 = call i64 @std.io.Formatter.pad(ptr %retparam641, ptr %414, i8 zeroext 32, i64 %zext, i64 %413) #6, !dbg !3019
  %not_err642 = icmp eq i64 %415, 0, !dbg !3019
  %416 = call i1 @llvm.expect.i1(i1 %not_err642, i1 true), !dbg !3019
  br i1 %416, label %after_check644, label %assign_optional643, !dbg !3019

assign_optional643:                               ; preds = %noerr_block636
  store i64 %415, ptr %error_var638, align 8, !dbg !3019
  br label %guard_block645, !dbg !3019

after_check644:                                   ; preds = %noerr_block636
  br label %noerr_block646, !dbg !3019

guard_block645:                                   ; preds = %assign_optional643
  %417 = load i64, ptr %error_var638, align 8, !dbg !3019
  ret i64 %417, !dbg !3019

noerr_block646:                                   ; preds = %after_check644
  %418 = load i64, ptr %retparam641, align 8, !dbg !3019
  %add647 = add i64 %410, %418, !dbg !3016
  store i64 %add647, ptr %total_len, align 8, !dbg !3016
  br label %loop.inc, !dbg !3020

if.exit648:                                       ; preds = %switch.exit620
  %419 = load ptr, ptr %self, align 8, !dbg !3021
  %ptradd649 = getelementptr inbounds i8, ptr %419, i64 16, !dbg !3021
  %ptradd650 = getelementptr inbounds i8, ptr %ptradd649, i64 4, !dbg !3021
  %420 = load i32, ptr %ptradd650, align 4, !dbg !3021
  %i2b651 = icmp ne i32 %420, 0, !dbg !3021
  br i1 %i2b651, label %if.then652, label %if.exit665, !dbg !3021

if.then652:                                       ; preds = %if.exit648
  %421 = load i64, ptr %total_len, align 8, !dbg !3022
  %422 = load ptr, ptr %self, align 8, !dbg !3024
  %ptradd654 = getelementptr inbounds i8, ptr %422, i64 16, !dbg !3024
  %ptradd655 = getelementptr inbounds i8, ptr %ptradd654, i64 4, !dbg !3024
  %423 = load i32, ptr %ptradd655, align 4, !dbg !3024
  %zext656 = zext i32 %423 to i64, !dbg !3024
  %ptradd657 = getelementptr inbounds i8, ptr %out, i64 8, !dbg !3025
  %424 = load i64, ptr %ptradd657, align 8, !dbg !3025
  %mul = mul i64 %424, 2, !dbg !3025
  %425 = load ptr, ptr %self, align 8
  %426 = call i64 @std.io.Formatter.pad(ptr %retparam658, ptr %425, i8 zeroext 32, i64 %zext656, i64 %mul) #6, !dbg !3026
  %not_err659 = icmp eq i64 %426, 0, !dbg !3026
  %427 = call i1 @llvm.expect.i1(i1 %not_err659, i1 true), !dbg !3026
  br i1 %427, label %after_check661, label %assign_optional660, !dbg !3026

assign_optional660:                               ; preds = %if.then652
  store i64 %426, ptr %error_var653, align 8, !dbg !3026
  br label %guard_block662, !dbg !3026

after_check661:                                   ; preds = %if.then652
  br label %noerr_block663, !dbg !3026

guard_block662:                                   ; preds = %assign_optional660
  %428 = load i64, ptr %error_var653, align 8, !dbg !3026
  ret i64 %428, !dbg !3026

noerr_block663:                                   ; preds = %after_check661
  %429 = load i64, ptr %retparam658, align 8, !dbg !3026
  %add664 = add i64 %421, %429, !dbg !3022
  store i64 %add664, ptr %total_len, align 8, !dbg !3022
  br label %if.exit665, !dbg !3022

if.exit665:                                       ; preds = %noerr_block663, %if.exit648
  %430 = load i64, ptr %total_len, align 8, !dbg !3027
  %431 = load ptr, ptr %self, align 8, !dbg !3028
  %ptradd667 = getelementptr inbounds i8, ptr %431, i64 16, !dbg !3028
  %432 = load i32, ptr %ptradd667, align 8, !dbg !3028
  %lshrl668 = lshr i32 %432, 5, !dbg !3028
  %433 = and i32 1, %lshrl668, !dbg !3028
  %trunc669 = trunc i32 %433 to i8, !dbg !3028
  %434 = load ptr, ptr %self, align 8
  %lo671 = load ptr, ptr %out, align 8
  %ptradd672 = getelementptr inbounds i8, ptr %out, i64 8
  %hi673 = load i64, ptr %ptradd672, align 8
  %435 = call i64 @std.io.print_hex_chars(ptr %retparam670, ptr %434, ptr %lo671, i64 %hi673, i8 zeroext %trunc669) #6, !dbg !3029
  %not_err674 = icmp eq i64 %435, 0, !dbg !3029
  %436 = call i1 @llvm.expect.i1(i1 %not_err674, i1 true), !dbg !3029
  br i1 %436, label %after_check676, label %assign_optional675, !dbg !3029

assign_optional675:                               ; preds = %if.exit665
  store i64 %435, ptr %error_var666, align 8, !dbg !3029
  br label %guard_block677, !dbg !3029

after_check676:                                   ; preds = %if.exit665
  br label %noerr_block678, !dbg !3029

guard_block677:                                   ; preds = %assign_optional675
  %437 = load i64, ptr %error_var666, align 8, !dbg !3029
  ret i64 %437, !dbg !3029

noerr_block678:                                   ; preds = %after_check676
  %438 = load i64, ptr %retparam670, align 8, !dbg !3029
  %add679 = add i64 %430, %438, !dbg !3027
  store i64 %add679, ptr %total_len, align 8, !dbg !3027
  br label %loop.inc, !dbg !3030

switch.case680:                                   ; preds = %switch.entry197
  %439 = load ptr, ptr %self, align 8, !dbg !3031
  %ptradd681 = getelementptr inbounds i8, ptr %439, i64 16, !dbg !3031
  %440 = load i32, ptr %ptradd681, align 8, !dbg !3031
  %lshrl682 = lshr i32 %440, 1, !dbg !3031
  %441 = and i32 1, %lshrl682, !dbg !3031
  %trunc683 = trunc i32 %441 to i8, !dbg !3031
  %442 = trunc i8 %trunc683 to i1, !dbg !3031
  br i1 %442, label %if.then684, label %if.exit708, !dbg !3031

if.then684:                                       ; preds = %switch.case680
    #dbg_declare(ptr %len685, !3033, !DIExpression(), !3035)
  %443 = load ptr, ptr %self, align 8
  %lo688 = load i64, ptr %current, align 8
  %ptradd689 = getelementptr inbounds i8, ptr %current, i64 8
  %hi690 = load ptr, ptr %ptradd689, align 8
  %444 = call i64 @std.io.Formatter.out_str(ptr %retparam687, ptr %443, i64 %lo688, ptr %hi690), !dbg !3036
  %not_err691 = icmp eq i64 %444, 0, !dbg !3036
  %445 = call i1 @llvm.expect.i1(i1 %not_err691, i1 true), !dbg !3036
  br i1 %445, label %after_check693, label %assign_optional692, !dbg !3036

assign_optional692:                               ; preds = %if.then684
  store i64 %444, ptr %error_var686, align 8, !dbg !3036
  br label %guard_block694, !dbg !3036

after_check693:                                   ; preds = %if.then684
  br label %noerr_block695, !dbg !3036

guard_block694:                                   ; preds = %assign_optional692
  %446 = load i64, ptr %error_var686, align 8, !dbg !3036
  ret i64 %446, !dbg !3036

noerr_block695:                                   ; preds = %after_check693
  %447 = load i64, ptr %retparam687, align 8, !dbg !3036
  store i64 %447, ptr %len685, align 8, !dbg !3036
  %448 = load i64, ptr %total_len, align 8, !dbg !3037
  %449 = load i64, ptr %len685, align 8, !dbg !3038
  %add696 = add i64 %448, %449, !dbg !3037
  store i64 %add696, ptr %total_len, align 8, !dbg !3037
  %450 = load i64, ptr %total_len, align 8, !dbg !3039
  %451 = load ptr, ptr %self, align 8, !dbg !3040
  %ptradd698 = getelementptr inbounds i8, ptr %451, i64 16, !dbg !3040
  %ptradd699 = getelementptr inbounds i8, ptr %ptradd698, i64 4, !dbg !3040
  %452 = load i32, ptr %ptradd699, align 4, !dbg !3040
  %zext700 = zext i32 %452 to i64, !dbg !3040
  %453 = load i64, ptr %len685, align 8, !dbg !3041
  %454 = load ptr, ptr %self, align 8
  %455 = call i64 @std.io.Formatter.pad(ptr %retparam701, ptr %454, i8 zeroext 32, i64 %zext700, i64 %453) #6, !dbg !3042
  %not_err702 = icmp eq i64 %455, 0, !dbg !3042
  %456 = call i1 @llvm.expect.i1(i1 %not_err702, i1 true), !dbg !3042
  br i1 %456, label %after_check704, label %assign_optional703, !dbg !3042

assign_optional703:                               ; preds = %noerr_block695
  store i64 %455, ptr %error_var697, align 8, !dbg !3042
  br label %guard_block705, !dbg !3042

after_check704:                                   ; preds = %noerr_block695
  br label %noerr_block706, !dbg !3042

guard_block705:                                   ; preds = %assign_optional703
  %457 = load i64, ptr %error_var697, align 8, !dbg !3042
  ret i64 %457, !dbg !3042

noerr_block706:                                   ; preds = %after_check704
  %458 = load i64, ptr %retparam701, align 8, !dbg !3042
  %add707 = add i64 %450, %458, !dbg !3039
  store i64 %add707, ptr %total_len, align 8, !dbg !3039
  br label %loop.inc, !dbg !3043

if.exit708:                                       ; preds = %switch.case680
  %459 = load ptr, ptr %self, align 8, !dbg !3044
  %ptradd709 = getelementptr inbounds i8, ptr %459, i64 16, !dbg !3044
  %ptradd710 = getelementptr inbounds i8, ptr %ptradd709, i64 4, !dbg !3044
  %460 = load i32, ptr %ptradd710, align 4, !dbg !3044
  %i2b711 = icmp ne i32 %460, 0, !dbg !3044
  br i1 %i2b711, label %if.then712, label %if.exit738, !dbg !3044

if.then712:                                       ; preds = %if.exit708
    #dbg_declare(ptr %out_fn, !3045, !DIExpression(), !3047)
  %461 = load ptr, ptr %self, align 8, !dbg !3048
  %ptradd713 = getelementptr inbounds i8, ptr %461, i64 8, !dbg !3048
  %462 = load ptr, ptr %ptradd713, align 8, !dbg !3048
  store ptr %462, ptr %out_fn, align 8, !dbg !3048
  %463 = load ptr, ptr %self, align 8, !dbg !3049
  %ptradd714 = getelementptr inbounds i8, ptr %463, i64 8, !dbg !3049
  store ptr @std.io.out_null_fn, ptr %ptradd714, align 8, !dbg !3050
    #dbg_declare(ptr %len715, !3051, !DIExpression(), !3052)
  %464 = load ptr, ptr %self, align 8
  %lo718 = load i64, ptr %current, align 8
  %ptradd719 = getelementptr inbounds i8, ptr %current, i64 8
  %hi720 = load ptr, ptr %ptradd719, align 8
  %465 = call i64 @std.io.Formatter.out_str(ptr %retparam717, ptr %464, i64 %lo718, ptr %hi720), !dbg !3053
  %not_err721 = icmp eq i64 %465, 0, !dbg !3053
  %466 = call i1 @llvm.expect.i1(i1 %not_err721, i1 true), !dbg !3053
  br i1 %466, label %after_check723, label %assign_optional722, !dbg !3053

assign_optional722:                               ; preds = %if.then712
  store i64 %465, ptr %error_var716, align 8, !dbg !3053
  br label %guard_block724, !dbg !3053

after_check723:                                   ; preds = %if.then712
  br label %noerr_block725, !dbg !3053

guard_block724:                                   ; preds = %assign_optional722
  %467 = load i64, ptr %error_var716, align 8, !dbg !3053
  ret i64 %467, !dbg !3053

noerr_block725:                                   ; preds = %after_check723
  %468 = load i64, ptr %retparam717, align 8, !dbg !3053
  store i64 %468, ptr %len715, align 8, !dbg !3053
  %469 = load ptr, ptr %self, align 8, !dbg !3054
  %ptradd726 = getelementptr inbounds i8, ptr %469, i64 8, !dbg !3054
  %470 = load ptr, ptr %out_fn, align 8, !dbg !3055
  store ptr %470, ptr %ptradd726, align 8, !dbg !3055
  %471 = load i64, ptr %total_len, align 8, !dbg !3056
  %472 = load ptr, ptr %self, align 8, !dbg !3057
  %ptradd728 = getelementptr inbounds i8, ptr %472, i64 16, !dbg !3057
  %ptradd729 = getelementptr inbounds i8, ptr %ptradd728, i64 4, !dbg !3057
  %473 = load i32, ptr %ptradd729, align 4, !dbg !3057
  %zext730 = zext i32 %473 to i64, !dbg !3057
  %474 = load i64, ptr %len715, align 8, !dbg !3058
  %475 = load ptr, ptr %self, align 8
  %476 = call i64 @std.io.Formatter.pad(ptr %retparam731, ptr %475, i8 zeroext 32, i64 %zext730, i64 %474) #6, !dbg !3059
  %not_err732 = icmp eq i64 %476, 0, !dbg !3059
  %477 = call i1 @llvm.expect.i1(i1 %not_err732, i1 true), !dbg !3059
  br i1 %477, label %after_check734, label %assign_optional733, !dbg !3059

assign_optional733:                               ; preds = %noerr_block725
  store i64 %476, ptr %error_var727, align 8, !dbg !3059
  br label %guard_block735, !dbg !3059

after_check734:                                   ; preds = %noerr_block725
  br label %noerr_block736, !dbg !3059

guard_block735:                                   ; preds = %assign_optional733
  %478 = load i64, ptr %error_var727, align 8, !dbg !3059
  ret i64 %478, !dbg !3059

noerr_block736:                                   ; preds = %after_check734
  %479 = load i64, ptr %retparam731, align 8, !dbg !3059
  %add737 = add i64 %471, %479, !dbg !3056
  store i64 %add737, ptr %total_len, align 8, !dbg !3056
  br label %if.exit738, !dbg !3056

if.exit738:                                       ; preds = %noerr_block736, %if.exit708
  %480 = load i64, ptr %total_len, align 8, !dbg !3060
  %481 = load ptr, ptr %self, align 8
  %lo741 = load i64, ptr %current, align 8
  %ptradd742 = getelementptr inbounds i8, ptr %current, i64 8
  %hi743 = load ptr, ptr %ptradd742, align 8
  %482 = call i64 @std.io.Formatter.out_str(ptr %retparam740, ptr %481, i64 %lo741, ptr %hi743), !dbg !3061
  %not_err744 = icmp eq i64 %482, 0, !dbg !3061
  %483 = call i1 @llvm.expect.i1(i1 %not_err744, i1 true), !dbg !3061
  br i1 %483, label %after_check746, label %assign_optional745, !dbg !3061

assign_optional745:                               ; preds = %if.exit738
  store i64 %482, ptr %error_var739, align 8, !dbg !3061
  br label %guard_block747, !dbg !3061

after_check746:                                   ; preds = %if.exit738
  br label %noerr_block748, !dbg !3061

guard_block747:                                   ; preds = %assign_optional745
  %484 = load i64, ptr %error_var739, align 8, !dbg !3061
  ret i64 %484, !dbg !3061

noerr_block748:                                   ; preds = %after_check746
  %485 = load i64, ptr %retparam740, align 8, !dbg !3061
  %add749 = add i64 %480, %485, !dbg !3060
  store i64 %add749, ptr %total_len, align 8, !dbg !3060
  br label %loop.inc, !dbg !3062

switch.case750:                                   ; preds = %switch.entry197
  %486 = load ptr, ptr %self, align 8, !dbg !3063
  %ptradd751 = getelementptr inbounds i8, ptr %486, i64 16, !dbg !3063
  %487 = load i32, ptr %ptradd751, align 8, !dbg !3065
  %488 = and i32 %487, -2, !dbg !3065
  %489 = or i32 %488, 1, !dbg !3065
  store i32 %489, ptr %ptradd751, align 8, !dbg !3065
  %490 = load ptr, ptr %self, align 8, !dbg !3066
  %ptradd752 = getelementptr inbounds i8, ptr %490, i64 16, !dbg !3066
  %491 = load i32, ptr %ptradd752, align 8, !dbg !3067
  %492 = and i32 %491, -17, !dbg !3067
  %493 = or i32 %492, 16, !dbg !3067
  store i32 %493, ptr %ptradd752, align 8, !dbg !3067
  store i32 16, ptr %base, align 4, !dbg !3068
  br label %switch.exit775, !dbg !3068

switch.default753:                                ; preds = %switch.entry197
  %494 = load ptr, ptr %self, align 8
  store ptr %494, ptr %self754, align 8
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_FORMAT" to i64), ptr %f755, align 8
  %495 = load ptr, ptr %self754, align 8, !dbg !3069
  %ptradd757 = getelementptr inbounds i8, ptr %495, i64 16, !dbg !3069
  %ptradd758 = getelementptr inbounds i8, ptr %ptradd757, i64 24, !dbg !3069
  %496 = load i64, ptr %ptradd758, align 8, !dbg !3069
  %i2b759 = icmp ne i64 %496, 0, !dbg !3069
  br i1 %i2b759, label %if.then760, label %if.exit763, !dbg !3069

if.then760:                                       ; preds = %switch.default753
  %497 = load ptr, ptr %self754, align 8, !dbg !3073
  %ptradd761 = getelementptr inbounds i8, ptr %497, i64 16, !dbg !3073
  %ptradd762 = getelementptr inbounds i8, ptr %ptradd761, i64 24, !dbg !3073
  %498 = load i64, ptr %ptradd762, align 8, !dbg !3073
  store i64 %498, ptr %blockret756, align 8, !dbg !3073
  br label %expr_block.exit766, !dbg !3073

if.exit763:                                       ; preds = %switch.default753
  %499 = load ptr, ptr %self754, align 8, !dbg !3074
  %ptradd764 = getelementptr inbounds i8, ptr %499, i64 16, !dbg !3074
  %ptradd765 = getelementptr inbounds i8, ptr %ptradd764, i64 24, !dbg !3074
  %500 = load i64, ptr %f755, align 8, !dbg !3075
  store i64 %500, ptr %ptradd765, align 8, !dbg !3075
  %501 = load i64, ptr %f755, align 8, !dbg !3076
  store i64 %501, ptr %blockret756, align 8, !dbg !3076
  br label %expr_block.exit766, !dbg !3076

expr_block.exit766:                               ; preds = %if.exit763, %if.then760
  %502 = load i64, ptr %total_len, align 8, !dbg !3077
  %503 = load ptr, ptr %self, align 8
  %504 = call i64 @std.io.Formatter.out_substr(ptr %retparam768, ptr %503, ptr @.str.200, i64 12), !dbg !3078
  %not_err769 = icmp eq i64 %504, 0, !dbg !3078
  %505 = call i1 @llvm.expect.i1(i1 %not_err769, i1 true), !dbg !3078
  br i1 %505, label %after_check771, label %assign_optional770, !dbg !3078

assign_optional770:                               ; preds = %expr_block.exit766
  store i64 %504, ptr %error_var767, align 8, !dbg !3078
  br label %guard_block772, !dbg !3078

after_check771:                                   ; preds = %expr_block.exit766
  br label %noerr_block773, !dbg !3078

guard_block772:                                   ; preds = %assign_optional770
  %506 = load i64, ptr %error_var767, align 8, !dbg !3078
  ret i64 %506, !dbg !3078

noerr_block773:                                   ; preds = %after_check771
  %507 = load i64, ptr %retparam768, align 8, !dbg !3078
  %add774 = add i64 %502, %507, !dbg !3077
  store i64 %add774, ptr %total_len, align 8, !dbg !3077
  br label %loop.inc, !dbg !3079

switch.exit775:                                   ; preds = %switch.case750, %switch.case208, %switch.case205, %switch.case202, %switch.case198
  %508 = load i32, ptr %base, align 4, !dbg !3080
  %neq776 = icmp ne i32 10, %508, !dbg !3080
  br i1 %neq776, label %if.then777, label %if.exit780, !dbg !3080

if.then777:                                       ; preds = %switch.exit775
  %509 = load ptr, ptr %self, align 8, !dbg !3081
  %ptradd778 = getelementptr inbounds i8, ptr %509, i64 16, !dbg !3081
  %510 = load i32, ptr %ptradd778, align 8, !dbg !3083
  %511 = and i32 %510, -5, !dbg !3083
  store i32 %511, ptr %ptradd778, align 8, !dbg !3083
  %512 = load ptr, ptr %self, align 8, !dbg !3084
  %ptradd779 = getelementptr inbounds i8, ptr %512, i64 16, !dbg !3084
  %513 = load i32, ptr %ptradd779, align 8, !dbg !3085
  %514 = and i32 %513, -9, !dbg !3085
  store i32 %514, ptr %ptradd779, align 8, !dbg !3085
  br label %if.exit780, !dbg !3085

if.exit780:                                       ; preds = %if.then777, %switch.exit775
  %515 = load ptr, ptr %self, align 8, !dbg !3086
  %ptradd781 = getelementptr inbounds i8, ptr %515, i64 16, !dbg !3086
  %516 = load i32, ptr %ptradd781, align 8, !dbg !3086
  %lshrl782 = lshr i32 %516, 6, !dbg !3086
  %517 = and i32 1, %lshrl782, !dbg !3086
  %trunc783 = trunc i32 %517 to i8, !dbg !3086
  %518 = trunc i8 %trunc783 to i1, !dbg !3086
  br i1 %518, label %if.then784, label %if.exit786, !dbg !3086

if.then784:                                       ; preds = %if.exit780
  %519 = load ptr, ptr %self, align 8, !dbg !3087
  %ptradd785 = getelementptr inbounds i8, ptr %519, i64 16, !dbg !3087
  %520 = load i32, ptr %ptradd785, align 8, !dbg !3088
  %521 = and i32 %520, -2, !dbg !3088
  store i32 %521, ptr %ptradd785, align 8, !dbg !3088
  br label %if.exit786, !dbg !3088

if.exit786:                                       ; preds = %if.then784, %if.exit780
    #dbg_declare(ptr %is_neg, !3089, !DIExpression(), !3090)
  store i8 0, ptr %is_neg, align 1, !dbg !3090
  %522 = load i64, ptr %total_len, align 8, !dbg !3091
  %523 = load ptr, ptr %self, align 8
  store ptr %523, ptr %f788, align 8
    #dbg_declare(ptr %len790, !3092, !DIExpression(), !3094)
  %lo793 = load i64, ptr %current, align 8
  %ptradd794 = getelementptr inbounds i8, ptr %current, i64 8
  %hi795 = load ptr, ptr %ptradd794, align 8
  %524 = call i64 @std.io.int_from_any(ptr %retparam792, i64 %lo793, ptr %hi795, ptr %is_neg), !dbg !3096
  %not_err796 = icmp eq i64 %524, 0, !dbg !3096
  %525 = call i1 @llvm.expect.i1(i1 %not_err796, i1 true), !dbg !3096
  br i1 %525, label %after_check798, label %assign_optional797, !dbg !3096

assign_optional797:                               ; preds = %if.exit786
  store i64 %524, ptr %len.f791, align 8, !dbg !3096
  br label %after_assign806, !dbg !3096

after_check798:                                   ; preds = %if.exit786
  %526 = load ptr, ptr %self, align 8
  %lo800 = load i64, ptr %retparam792, align 16
  %ptradd801 = getelementptr inbounds i8, ptr %retparam792, i64 8
  %hi802 = load i64, ptr %ptradd801, align 8
  %527 = load i8, ptr %is_neg, align 1
  %528 = load i32, ptr %base, align 4
  %529 = call i64 @std.io.Formatter.ntoa(ptr %retparam799, ptr %526, i64 %lo800, i64 %hi802, i8 zeroext %527, i32 %528), !dbg !3097
  %not_err803 = icmp eq i64 %529, 0, !dbg !3097
  %530 = call i1 @llvm.expect.i1(i1 %not_err803, i1 true), !dbg !3097
  br i1 %530, label %after_check805, label %assign_optional804, !dbg !3097

assign_optional804:                               ; preds = %after_check798
  store i64 %529, ptr %len.f791, align 8, !dbg !3097
  br label %after_assign806, !dbg !3097

after_check805:                                   ; preds = %after_check798
  %531 = load i64, ptr %retparam799, align 8, !dbg !3097
  store i64 %531, ptr %len790, align 8, !dbg !3097
  store i64 0, ptr %len.f791, align 8, !dbg !3097
  br label %after_assign806, !dbg !3097

after_assign806:                                  ; preds = %after_check805, %assign_optional804, %assign_optional797
    #dbg_declare(ptr %err807, !3098, !DIExpression(), !3099)
  br label %testblock808, !dbg !3099

testblock808:                                     ; preds = %after_assign806
  %optval809 = load i64, ptr %len.f791, align 8, !dbg !3100
  %not_err810 = icmp eq i64 %optval809, 0, !dbg !3100
  %532 = call i1 @llvm.expect.i1(i1 %not_err810, i1 true), !dbg !3100
  br i1 %532, label %after_check812, label %assign_optional811, !dbg !3100

assign_optional811:                               ; preds = %testblock808
  store i64 %optval809, ptr %err807, align 8, !dbg !3100
  br label %end_block813, !dbg !3100

after_check812:                                   ; preds = %testblock808
  store i64 0, ptr %err807, align 8, !dbg !3100
  br label %end_block813, !dbg !3100

end_block813:                                     ; preds = %after_check812, %assign_optional811
  %533 = load i64, ptr %err807, align 8, !dbg !3100
  %neq814 = icmp ne i64 %533, 0, !dbg !3100
  br i1 %neq814, label %if.then815, label %if.exit858, !dbg !3100

if.then815:                                       ; preds = %end_block813
  store i64 %533, ptr %switch816, align 8
  br label %switch.entry817

switch.entry817:                                  ; preds = %if.then815
  %534 = load i64, ptr %switch816, align 8
  %eq818 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$BUFFER_EXCEEDED" to i64), %534, !dbg !3101
  br i1 %eq818, label %switch.case821, label %next_if819, !dbg !3101

next_if819:                                       ; preds = %switch.entry817
  %eq820 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), %534, !dbg !3102
  br i1 %eq820, label %switch.case821, label %next_if835, !dbg !3102

switch.case821:                                   ; preds = %next_if819, %switch.entry817
  %535 = load ptr, ptr %f788, align 8
  store ptr %535, ptr %self822, align 8
  %536 = load i64, ptr %err807, align 8
  store i64 %536, ptr %f823, align 8
  %537 = load ptr, ptr %self822, align 8, !dbg !3103
  %ptradd825 = getelementptr inbounds i8, ptr %537, i64 16, !dbg !3103
  %ptradd826 = getelementptr inbounds i8, ptr %ptradd825, i64 24, !dbg !3103
  %538 = load i64, ptr %ptradd826, align 8, !dbg !3103
  %i2b827 = icmp ne i64 %538, 0, !dbg !3103
  br i1 %i2b827, label %if.then828, label %if.exit831, !dbg !3103

if.then828:                                       ; preds = %switch.case821
  %539 = load ptr, ptr %self822, align 8, !dbg !3107
  %ptradd829 = getelementptr inbounds i8, ptr %539, i64 16, !dbg !3107
  %ptradd830 = getelementptr inbounds i8, ptr %ptradd829, i64 24, !dbg !3107
  %540 = load i64, ptr %ptradd830, align 8, !dbg !3107
  store i64 %540, ptr %blockret824, align 8, !dbg !3107
  br label %expr_block.exit834, !dbg !3107

if.exit831:                                       ; preds = %switch.case821
  %541 = load ptr, ptr %self822, align 8, !dbg !3108
  %ptradd832 = getelementptr inbounds i8, ptr %541, i64 16, !dbg !3108
  %ptradd833 = getelementptr inbounds i8, ptr %ptradd832, i64 24, !dbg !3108
  %542 = load i64, ptr %f823, align 8, !dbg !3109
  store i64 %542, ptr %ptradd833, align 8, !dbg !3109
  %543 = load i64, ptr %f823, align 8, !dbg !3110
  store i64 %543, ptr %blockret824, align 8, !dbg !3110
  br label %expr_block.exit834, !dbg !3110

expr_block.exit834:                               ; preds = %if.exit831, %if.then828
  %544 = load i64, ptr %blockret824, align 8, !dbg !3110
  store i64 %544, ptr %error_var787, align 8, !dbg !3110
  br label %guard_block859, !dbg !3110

next_if835:                                       ; preds = %next_if819
  br label %switch.default836, !dbg !3110

switch.default836:                                ; preds = %next_if835
  %545 = load ptr, ptr %f788, align 8
  store ptr %545, ptr %self837, align 8
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_ARGUMENT" to i64), ptr %f838, align 8
  %546 = load ptr, ptr %self837, align 8, !dbg !3111
  %ptradd840 = getelementptr inbounds i8, ptr %546, i64 16, !dbg !3111
  %ptradd841 = getelementptr inbounds i8, ptr %ptradd840, i64 24, !dbg !3111
  %547 = load i64, ptr %ptradd841, align 8, !dbg !3111
  %i2b842 = icmp ne i64 %547, 0, !dbg !3111
  br i1 %i2b842, label %if.then843, label %if.exit846, !dbg !3111

if.then843:                                       ; preds = %switch.default836
  %548 = load ptr, ptr %self837, align 8, !dbg !3115
  %ptradd844 = getelementptr inbounds i8, ptr %548, i64 16, !dbg !3115
  %ptradd845 = getelementptr inbounds i8, ptr %ptradd844, i64 24, !dbg !3115
  %549 = load i64, ptr %ptradd845, align 8, !dbg !3115
  store i64 %549, ptr %blockret839, align 8, !dbg !3115
  br label %expr_block.exit849, !dbg !3115

if.exit846:                                       ; preds = %switch.default836
  %550 = load ptr, ptr %self837, align 8, !dbg !3116
  %ptradd847 = getelementptr inbounds i8, ptr %550, i64 16, !dbg !3116
  %ptradd848 = getelementptr inbounds i8, ptr %ptradd847, i64 24, !dbg !3116
  %551 = load i64, ptr %f838, align 8, !dbg !3117
  store i64 %551, ptr %ptradd848, align 8, !dbg !3117
  %552 = load i64, ptr %f838, align 8, !dbg !3118
  store i64 %552, ptr %blockret839, align 8, !dbg !3118
  br label %expr_block.exit849, !dbg !3118

expr_block.exit849:                               ; preds = %if.exit846, %if.then843
  %553 = load i64, ptr %blockret839, align 8, !dbg !3118
  store i64 %553, ptr %err807, align 8, !dbg !3118
  %554 = load ptr, ptr %f788, align 8
  %555 = call i64 @std.io.Formatter.out_substr(ptr %retparam851, ptr %554, ptr @.str.201, i64 9), !dbg !3119
  %not_err852 = icmp eq i64 %555, 0, !dbg !3119
  %556 = call i1 @llvm.expect.i1(i1 %not_err852, i1 true), !dbg !3119
  br i1 %556, label %after_check854, label %assign_optional853, !dbg !3119

assign_optional853:                               ; preds = %expr_block.exit849
  store i64 %555, ptr %error_var850, align 8, !dbg !3119
  br label %guard_block855, !dbg !3119

after_check854:                                   ; preds = %expr_block.exit849
  br label %noerr_block856, !dbg !3119

guard_block855:                                   ; preds = %assign_optional853
  %557 = load i64, ptr %error_var850, align 8, !dbg !3119
  store i64 %557, ptr %error_var787, align 8, !dbg !3119
  br label %guard_block859, !dbg !3119

noerr_block856:                                   ; preds = %after_check854
  %558 = load i64, ptr %err807, align 8, !dbg !3120
  store i64 %558, ptr %error_var787, align 8, !dbg !3120
  br label %guard_block859, !dbg !3120

if.exit858:                                       ; preds = %end_block813
  br label %noerr_block860, !dbg !3121

guard_block859:                                   ; preds = %noerr_block856, %guard_block855, %expr_block.exit834
  %559 = load i64, ptr %error_var787, align 8, !dbg !3121
  ret i64 %559, !dbg !3121

noerr_block860:                                   ; preds = %if.exit858
  %560 = load i64, ptr %len790, align 8, !dbg !3121
  %add861 = add i64 %522, %560, !dbg !3091
  store i64 %add861, ptr %total_len, align 8, !dbg !3091
  br label %loop.inc, !dbg !3091

loop.inc:                                         ; preds = %noerr_block860, %noerr_block773, %noerr_block748, %noerr_block706, %noerr_block678, %noerr_block646, %noerr_block618, %noerr_block513, %noerr_block501, %noerr_block426, %noerr_block351, %noerr_block276, %noerr_block182, %noerr_block40, %noerr_block
  %561 = load i64, ptr %i, align 8, !dbg !3122
  %add862 = add i64 %561, 1, !dbg !3122
  store i64 %add862, ptr %i, align 8, !dbg !3122
  br label %loop.cond, !dbg !3122

loop.exit863:                                     ; preds = %loop.cond
  %562 = load ptr, ptr %self, align 8, !dbg !3123
  %ptradd864 = getelementptr inbounds i8, ptr %562, i64 16, !dbg !3123
  %ptradd865 = getelementptr inbounds i8, ptr %ptradd864, i64 24, !dbg !3123
  %563 = load i64, ptr %ptradd865, align 8, !dbg !3123
  %i2b866 = icmp ne i64 %563, 0, !dbg !3123
  br i1 %i2b866, label %if.then867, label %if.exit870, !dbg !3123

if.then867:                                       ; preds = %loop.exit863
  %564 = load ptr, ptr %self, align 8, !dbg !3124
  %ptradd868 = getelementptr inbounds i8, ptr %564, i64 16, !dbg !3124
  %ptradd869 = getelementptr inbounds i8, ptr %ptradd868, i64 24, !dbg !3124
  %565 = load i64, ptr %ptradd869, align 8, !dbg !3124
  ret i64 %565, !dbg !3124

if.exit870:                                       ; preds = %loop.exit863
  %566 = load i64, ptr %total_len, align 8, !dbg !3125
  store i64 %566, ptr %0, align 8, !dbg !3125
  ret i64 0, !dbg !3125

panic:                                            ; preds = %entry
  %567 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2648
  call void %567(ptr @.panic_msg, i64 62, ptr @.file.118, i64 12, ptr @.func.186, i64 7, i32 356) #5, !dbg !2648
  unreachable, !dbg !2648

panic8:                                           ; preds = %loop.body
  store i64 %15, ptr %taddr, align 8
  %568 = insertvalue %any undef, ptr %taddr, 0
  %569 = insertvalue %any %568, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %17, ptr %taddr9, align 8
  %570 = insertvalue %any undef, ptr %taddr9, 0
  %571 = insertvalue %any %570, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %569, ptr %varargslots, align 16
  %ptradd10 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %571, ptr %ptradd10, align 16
  %572 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %572, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.118, i64 12, ptr @.func.186, i64 7, i32 370, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2677
  unreachable, !dbg !2677

panic24:                                          ; preds = %if.exit21
  store i64 %35, ptr %taddr25, align 8
  %573 = insertvalue %any undef, ptr %taddr25, 0
  %574 = insertvalue %any %573, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr26, align 8
  %575 = insertvalue %any undef, ptr %taddr26, 0
  %576 = insertvalue %any %575, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %574, ptr %varargslots27, align 16
  %ptradd28 = getelementptr inbounds i8, ptr %varargslots27, i64 16
  store %any %576, ptr %ptradd28, align 16
  %577 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp29" = insertvalue %"any[]" %577, i64 2, 1
  store %"any[]" %"$$temp29", ptr %indirectarg30, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.118, i64 12, ptr @.func.186, i64 7, i32 379, ptr byval(%"any[]") align 8 %indirectarg30) #5, !dbg !2691
  unreachable, !dbg !2691

panic66:                                          ; preds = %if.exit63
  store i64 %77, ptr %taddr67, align 8
  %578 = insertvalue %any undef, ptr %taddr67, 0
  %579 = insertvalue %any %578, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %79, ptr %taddr68, align 8
  %580 = insertvalue %any undef, ptr %taddr68, 0
  %581 = insertvalue %any %580, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %579, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %581, ptr %ptradd70, align 16
  %582 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %582, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.118, i64 12, ptr @.func.186, i64 7, i32 399, ptr byval(%"any[]") align 8 %indirectarg72) #5, !dbg !2727
  unreachable, !dbg !2727

panic94:                                          ; preds = %if.exit91
  store i64 %95, ptr %taddr95, align 8
  %583 = insertvalue %any undef, ptr %taddr95, 0
  %584 = insertvalue %any %583, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %97, ptr %taddr96, align 8
  %585 = insertvalue %any undef, ptr %taddr96, 0
  %586 = insertvalue %any %585, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %584, ptr %varargslots97, align 16
  %ptradd98 = getelementptr inbounds i8, ptr %varargslots97, i64 16
  store %any %586, ptr %ptradd98, align 16
  %587 = insertvalue %"any[]" undef, ptr %varargslots97, 0
  %"$$temp99" = insertvalue %"any[]" %587, i64 2, 1
  store %"any[]" %"$$temp99", ptr %indirectarg100, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.118, i64 12, ptr @.func.186, i64 7, i32 404, ptr byval(%"any[]") align 8 %indirectarg100) #5, !dbg !2739
  unreachable, !dbg !2739

panic152:                                         ; preds = %cond.phi
  store i64 %136, ptr %taddr153, align 8
  %588 = insertvalue %any undef, ptr %taddr153, 0
  %589 = insertvalue %any %588, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %138, ptr %taddr154, align 8
  %590 = insertvalue %any undef, ptr %taddr154, 0
  %591 = insertvalue %any %590, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %589, ptr %varargslots155, align 16
  %ptradd156 = getelementptr inbounds i8, ptr %varargslots155, i64 16
  store %any %591, ptr %ptradd156, align 16
  %592 = insertvalue %"any[]" undef, ptr %varargslots155, 0
  %"$$temp157" = insertvalue %"any[]" %592, i64 2, 1
  store %"any[]" %"$$temp157", ptr %indirectarg158, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.118, i64 12, ptr @.func.186, i64 7, i32 420, ptr byval(%"any[]") align 8 %indirectarg158) #5, !dbg !2775
  unreachable, !dbg !2775

panic188:                                         ; preds = %if.exit184
  store i64 %157, ptr %taddr189, align 8
  %593 = insertvalue %any undef, ptr %taddr189, 0
  %594 = insertvalue %any %593, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %159, ptr %taddr190, align 8
  %595 = insertvalue %any undef, ptr %taddr190, 0
  %596 = insertvalue %any %595, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %594, ptr %varargslots191, align 16
  %ptradd192 = getelementptr inbounds i8, ptr %varargslots191, i64 16
  store %any %596, ptr %ptradd192, align 16
  %597 = insertvalue %"any[]" undef, ptr %varargslots191, 0
  %"$$temp193" = insertvalue %"any[]" %597, i64 2, 1
  store %"any[]" %"$$temp193", ptr %indirectarg194, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.118, i64 12, ptr @.func.186, i64 7, i32 431, ptr byval(%"any[]") align 8 %indirectarg194) #5, !dbg !2795
  unreachable, !dbg !2795

panic525:                                         ; preds = %switch.case523
  %598 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2984
  call void %598(ptr @.panic_msg.197, i64 48, ptr @.file.118, i64 12, ptr @.func.186, i64 7, i32 487) #5, !dbg !2984
  unreachable, !dbg !2984

panic527:                                         ; preds = %checkok526
  store i64 8, ptr %taddr528, align 8
  %599 = insertvalue %any undef, ptr %taddr528, 0
  %600 = insertvalue %any %599, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %366, ptr %taddr529, align 8
  %601 = insertvalue %any undef, ptr %taddr529, 0
  %602 = insertvalue %any %601, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %600, ptr %varargslots530, align 16
  %ptradd531 = getelementptr inbounds i8, ptr %varargslots530, i64 16
  store %any %602, ptr %ptradd531, align 16
  %603 = insertvalue %"any[]" undef, ptr %varargslots530, 0
  %"$$temp532" = insertvalue %"any[]" %603, i64 2, 1
  store %"any[]" %"$$temp532", ptr %indirectarg533, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.118, i64 12, ptr @.func.186, i64 7, i32 487, ptr byval(%"any[]") align 8 %indirectarg533) #5, !dbg !2984
  unreachable, !dbg !2984

panic545:                                         ; preds = %switch.case542
  %604 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2996
  call void %604(ptr @.panic_msg.198, i64 56, ptr @.file.118, i64 12, ptr @.func.186, i64 7, i32 489) #5, !dbg !2996
  unreachable, !dbg !2996

panic547:                                         ; preds = %checkok546
  store i64 8, ptr %taddr548, align 8
  %605 = insertvalue %any undef, ptr %taddr548, 0
  %606 = insertvalue %any %605, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %377, ptr %taddr549, align 8
  %607 = insertvalue %any undef, ptr %taddr549, 0
  %608 = insertvalue %any %607, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %606, ptr %varargslots550, align 16
  %ptradd551 = getelementptr inbounds i8, ptr %varargslots550, i64 16
  store %any %608, ptr %ptradd551, align 16
  %609 = insertvalue %"any[]" undef, ptr %varargslots550, 0
  %"$$temp552" = insertvalue %"any[]" %609, i64 2, 1
  store %"any[]" %"$$temp552", ptr %indirectarg553, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.118, i64 12, ptr @.func.186, i64 7, i32 489, ptr byval(%"any[]") align 8 %indirectarg553) #5, !dbg !2996
  unreachable, !dbg !2996
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Formatter.print(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !3126 {
entry:
  %self = alloca ptr, align 8
  %str = alloca %"char[]", align 8
  %.anon = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !3129
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !3129
  br i1 %5, label %panic, label %checkok, !dbg !3129

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3130, !DIExpression(), !3131)
  store ptr %2, ptr %str, align 8
  %ptradd = getelementptr inbounds i8, ptr %str, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %str, !3132, !DIExpression(), !3133)
  %6 = load ptr, ptr %self, align 8, !dbg !3134
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !3134
  %7 = load ptr, ptr %ptradd1, align 8, !dbg !3134
  %i2nb = icmp eq ptr %7, null, !dbg !3134
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !3134

if.then:                                          ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !3135
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 8, !dbg !3135
  store ptr @std.io.out_null_fn, ptr %ptradd2, align 8, !dbg !3137
  br label %if.exit, !dbg !3137

if.exit:                                          ; preds = %if.then, %checkok
  %ptradd3 = getelementptr inbounds i8, ptr %str, i64 8, !dbg !3138
  %9 = load i64, ptr %ptradd3, align 8, !dbg !3138
    #dbg_declare(ptr %.anon, !3140, !DIExpression(), !3138)
  store i64 0, ptr %.anon, align 8, !dbg !3138
  br label %loop.cond, !dbg !3138

loop.cond:                                        ; preds = %noerr_block, %if.exit
  %10 = load i64, ptr %.anon, align 8, !dbg !3138
  %lt = icmp ult i64 %10, %9, !dbg !3138
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !3138

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !3141, !DIExpression(), !3143)
  %ptradd4 = getelementptr inbounds i8, ptr %str, i64 8, !dbg !3144
  %11 = load i64, ptr %ptradd4, align 8, !dbg !3144
  %12 = load ptr, ptr %str, align 8, !dbg !3144
  %13 = load i64, ptr %.anon, align 8, !dbg !3144
  %ge = icmp uge i64 %13, %11, !dbg !3144
  %14 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !3144
  br i1 %14, label %panic5, label %checkok8, !dbg !3144

checkok8:                                         ; preds = %loop.body
  %ptradd9 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !3144
  %15 = load i8, ptr %ptradd9, align 1, !dbg !3144
  store i8 %15, ptr %c, align 1, !dbg !3144
  %16 = load ptr, ptr %self, align 8
  %17 = load i8, ptr %c, align 1
  %18 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %16, i8 zeroext %17), !dbg !3145
  %not_err = icmp eq i64 %18, 0, !dbg !3145
  %19 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3145
  br i1 %19, label %after_check, label %assign_optional, !dbg !3145

assign_optional:                                  ; preds = %checkok8
  store i64 %18, ptr %error_var, align 8, !dbg !3145
  br label %guard_block, !dbg !3145

after_check:                                      ; preds = %checkok8
  br label %noerr_block, !dbg !3145

guard_block:                                      ; preds = %assign_optional
  %20 = load i64, ptr %error_var, align 8, !dbg !3145
  ret i64 %20, !dbg !3145

noerr_block:                                      ; preds = %after_check
  %21 = load i64, ptr %.anon, align 8, !dbg !3138
  %addnuw = add nuw i64 %21, 1, !dbg !3138
  store i64 %addnuw, ptr %.anon, align 8, !dbg !3138
  br label %loop.cond, !dbg !3138

loop.exit:                                        ; preds = %loop.cond
  %22 = load ptr, ptr %self, align 8, !dbg !3146
  %ptradd10 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !3146
  %ptradd11 = getelementptr inbounds i8, ptr %ptradd10, i64 16, !dbg !3146
  %23 = load i64, ptr %ptradd11, align 8, !dbg !3146
  store i64 %23, ptr %0, align 8, !dbg !3146
  ret i64 0, !dbg !3146

panic:                                            ; preds = %entry
  %24 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3131
  call void %24(ptr @.panic_msg, i64 62, ptr @.file.118, i64 12, ptr @.func.202, i64 5, i32 559) #5, !dbg !3131
  unreachable, !dbg !3131

panic5:                                           ; preds = %loop.body
  store i64 %11, ptr %taddr, align 8
  %25 = insertvalue %any undef, ptr %taddr, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr6, align 8
  %27 = insertvalue %any undef, ptr %taddr6, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %26, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %28, ptr %ptradd7, align 16
  %29 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %29, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.118, i64 12, ptr @.func.202, i64 5, i32 566, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3144
  unreachable, !dbg !3144
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.out_null_fn(ptr %0, i8 zeroext %1) #0 !dbg !3147 {
entry:
  %data = alloca ptr, align 8
  %c = alloca i8, align 1
  store ptr %0, ptr %data, align 8
    #dbg_declare(ptr %data, !3148, !DIExpression(), !3149)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !3150, !DIExpression(), !3151)
  ret i64 0
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.available(ptr %0, i64 %1, ptr %2) #0 comdat !dbg !3152 {
entry:
  %s = alloca %any, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache4 = alloca ptr, align 8
  %.cachedtype5 = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %.inlinecache13 = alloca ptr, align 8
  %.cachedtype14 = alloca ptr, align 8
  %curr = alloca i64, align 8
  %error_var = alloca i64, align 8
  %.inlinecache24 = alloca ptr, align 8
  %.cachedtype25 = alloca ptr, align 8
  %retparam34 = alloca i64, align 8
  %len = alloca i64, align 8
  %error_var38 = alloca i64, align 8
  %.inlinecache40 = alloca ptr, align 8
  %.cachedtype41 = alloca ptr, align 8
  %retparam50 = alloca i64, align 8
  %error_var56 = alloca i64, align 8
  %.inlinecache58 = alloca ptr, align 8
  %.cachedtype59 = alloca ptr, align 8
  %retparam68 = alloca i64, align 8
  %reterr74 = alloca i64, align 8
  %reterr76 = alloca i64, align 8
  store ptr null, ptr %.cachedtype59, align 8
  store ptr null, ptr %.cachedtype41, align 8
  store ptr null, ptr %.cachedtype25, align 8
  store ptr null, ptr %.cachedtype14, align 8
  store ptr null, ptr %.cachedtype5, align 8
  store ptr null, ptr %.cachedtype, align 8
  store i64 %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !3155, !DIExpression(), !3156)
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !3157
  %3 = load i64, ptr %ptradd1, align 8, !dbg !3157
  %4 = inttoptr i64 %3 to ptr, !dbg !3157
  %type = load ptr, ptr %.cachedtype, align 8
  %5 = icmp eq ptr %4, %type
  br i1 %5, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %entry
  %ptradd2 = getelementptr inbounds i8, ptr %4, i64 16
  %6 = load ptr, ptr %ptradd2, align 8
  %7 = call ptr @.dyn_search(ptr %6, ptr @"$sel.available")
  store ptr %7, ptr %.inlinecache, align 8
  store ptr %4, ptr %.cachedtype, align 8
  br label %8

cache_hit:                                        ; preds = %entry
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %8

8:                                                ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %7, %cache_miss ]
  %i2b = icmp ne ptr %fn_phi, null
  br i1 %i2b, label %if.then, label %if.exit

if.then:                                          ; preds = %8
  %ptradd3 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !3158
  %9 = load i64, ptr %ptradd3, align 8, !dbg !3158
  %10 = inttoptr i64 %9 to ptr, !dbg !3158
  %type6 = load ptr, ptr %.cachedtype5, align 8
  %11 = icmp eq ptr %10, %type6
  br i1 %11, label %cache_hit9, label %cache_miss7

cache_miss7:                                      ; preds = %if.then
  %ptradd8 = getelementptr inbounds i8, ptr %10, i64 16
  %12 = load ptr, ptr %ptradd8, align 8
  %13 = call ptr @.dyn_search(ptr %12, ptr @"$sel.available")
  store ptr %13, ptr %.inlinecache4, align 8
  store ptr %10, ptr %.cachedtype5, align 8
  br label %14

cache_hit9:                                       ; preds = %if.then
  %cache_hit_fn10 = load ptr, ptr %.inlinecache4, align 8
  br label %14

14:                                               ; preds = %cache_hit9, %cache_miss7
  %fn_phi11 = phi ptr [ %cache_hit_fn10, %cache_hit9 ], [ %13, %cache_miss7 ]
  %15 = icmp eq ptr %fn_phi11, null
  br i1 %15, label %missing_function, label %match

missing_function:                                 ; preds = %14
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3158
  call void %16(ptr @.panic_msg.96, i64 46, ptr @.file.53, i64 9, ptr @.func.68, i64 9, i32 29) #5, !dbg !3158
  unreachable, !dbg !3158

match:                                            ; preds = %14
  %17 = load ptr, ptr %s, align 8
  %18 = call i64 %fn_phi11(ptr %retparam, ptr %17), !dbg !3158
  %not_err = icmp eq i64 %18, 0, !dbg !3158
  %19 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3158
  br i1 %19, label %after_check, label %assign_optional, !dbg !3158

assign_optional:                                  ; preds = %match
  store i64 %18, ptr %reterr, align 8, !dbg !3158
  br label %err_retblock, !dbg !3158

after_check:                                      ; preds = %match
  %20 = load i64, ptr %retparam, align 8, !dbg !3158
  store i64 %20, ptr %0, align 8, !dbg !3158
  ret i64 0, !dbg !3158

err_retblock:                                     ; preds = %assign_optional
  %21 = load i64, ptr %reterr, align 8, !dbg !3158
  ret i64 %21, !dbg !3158

if.exit:                                          ; preds = %8
  %ptradd12 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !3159
  %22 = load i64, ptr %ptradd12, align 8, !dbg !3159
  %23 = inttoptr i64 %22 to ptr, !dbg !3159
  %type15 = load ptr, ptr %.cachedtype14, align 8
  %24 = icmp eq ptr %23, %type15
  br i1 %24, label %cache_hit18, label %cache_miss16

cache_miss16:                                     ; preds = %if.exit
  %ptradd17 = getelementptr inbounds i8, ptr %23, i64 16
  %25 = load ptr, ptr %ptradd17, align 8
  %26 = call ptr @.dyn_search(ptr %25, ptr @"$sel.seek")
  store ptr %26, ptr %.inlinecache13, align 8
  store ptr %23, ptr %.cachedtype14, align 8
  br label %27

cache_hit18:                                      ; preds = %if.exit
  %cache_hit_fn19 = load ptr, ptr %.inlinecache13, align 8
  br label %27

27:                                               ; preds = %cache_hit18, %cache_miss16
  %fn_phi20 = phi ptr [ %cache_hit_fn19, %cache_hit18 ], [ %26, %cache_miss16 ]
  %i2b21 = icmp ne ptr %fn_phi20, null
  br i1 %i2b21, label %if.then22, label %if.exit75

if.then22:                                        ; preds = %27
    #dbg_declare(ptr %curr, !3160, !DIExpression(), !3162)
  %ptradd23 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !3163
  %28 = load i64, ptr %ptradd23, align 8, !dbg !3163
  %29 = inttoptr i64 %28 to ptr, !dbg !3163
  %type26 = load ptr, ptr %.cachedtype25, align 8
  %30 = icmp eq ptr %29, %type26
  br i1 %30, label %cache_hit29, label %cache_miss27

cache_miss27:                                     ; preds = %if.then22
  %ptradd28 = getelementptr inbounds i8, ptr %29, i64 16
  %31 = load ptr, ptr %ptradd28, align 8
  %32 = call ptr @.dyn_search(ptr %31, ptr @"$sel.seek")
  store ptr %32, ptr %.inlinecache24, align 8
  store ptr %29, ptr %.cachedtype25, align 8
  br label %33

cache_hit29:                                      ; preds = %if.then22
  %cache_hit_fn30 = load ptr, ptr %.inlinecache24, align 8
  br label %33

33:                                               ; preds = %cache_hit29, %cache_miss27
  %fn_phi31 = phi ptr [ %cache_hit_fn30, %cache_hit29 ], [ %32, %cache_miss27 ]
  %34 = icmp eq ptr %fn_phi31, null
  br i1 %34, label %missing_function32, label %match33

missing_function32:                               ; preds = %33
  %35 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3164
  call void %35(ptr @.panic_msg.203, i64 41, ptr @.file.53, i64 9, ptr @.func.68, i64 9, i32 32) #5, !dbg !3164
  unreachable, !dbg !3164

match33:                                          ; preds = %33
  %36 = load ptr, ptr %s, align 8
  %37 = call i64 %fn_phi31(ptr %retparam34, ptr %36, i64 0, i32 1), !dbg !3164
  %not_err35 = icmp eq i64 %37, 0, !dbg !3164
  %38 = call i1 @llvm.expect.i1(i1 %not_err35, i1 true), !dbg !3164
  br i1 %38, label %after_check37, label %assign_optional36, !dbg !3164

assign_optional36:                                ; preds = %match33
  store i64 %37, ptr %error_var, align 8, !dbg !3164
  br label %guard_block, !dbg !3164

after_check37:                                    ; preds = %match33
  br label %noerr_block, !dbg !3164

guard_block:                                      ; preds = %assign_optional36
  %39 = load i64, ptr %error_var, align 8, !dbg !3164
  ret i64 %39, !dbg !3164

noerr_block:                                      ; preds = %after_check37
  %40 = load i64, ptr %retparam34, align 8, !dbg !3164
  store i64 %40, ptr %curr, align 8, !dbg !3164
    #dbg_declare(ptr %len, !3165, !DIExpression(), !3166)
  %ptradd39 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !3167
  %41 = load i64, ptr %ptradd39, align 8, !dbg !3167
  %42 = inttoptr i64 %41 to ptr, !dbg !3167
  %type42 = load ptr, ptr %.cachedtype41, align 8
  %43 = icmp eq ptr %42, %type42
  br i1 %43, label %cache_hit45, label %cache_miss43

cache_miss43:                                     ; preds = %noerr_block
  %ptradd44 = getelementptr inbounds i8, ptr %42, i64 16
  %44 = load ptr, ptr %ptradd44, align 8
  %45 = call ptr @.dyn_search(ptr %44, ptr @"$sel.seek")
  store ptr %45, ptr %.inlinecache40, align 8
  store ptr %42, ptr %.cachedtype41, align 8
  br label %46

cache_hit45:                                      ; preds = %noerr_block
  %cache_hit_fn46 = load ptr, ptr %.inlinecache40, align 8
  br label %46

46:                                               ; preds = %cache_hit45, %cache_miss43
  %fn_phi47 = phi ptr [ %cache_hit_fn46, %cache_hit45 ], [ %45, %cache_miss43 ]
  %47 = icmp eq ptr %fn_phi47, null
  br i1 %47, label %missing_function48, label %match49

missing_function48:                               ; preds = %46
  %48 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3168
  call void %48(ptr @.panic_msg.203, i64 41, ptr @.file.53, i64 9, ptr @.func.68, i64 9, i32 33) #5, !dbg !3168
  unreachable, !dbg !3168

match49:                                          ; preds = %46
  %49 = load ptr, ptr %s, align 8
  %50 = call i64 %fn_phi47(ptr %retparam50, ptr %49, i64 0, i32 2), !dbg !3168
  %not_err51 = icmp eq i64 %50, 0, !dbg !3168
  %51 = call i1 @llvm.expect.i1(i1 %not_err51, i1 true), !dbg !3168
  br i1 %51, label %after_check53, label %assign_optional52, !dbg !3168

assign_optional52:                                ; preds = %match49
  store i64 %50, ptr %error_var38, align 8, !dbg !3168
  br label %guard_block54, !dbg !3168

after_check53:                                    ; preds = %match49
  br label %noerr_block55, !dbg !3168

guard_block54:                                    ; preds = %assign_optional52
  %52 = load i64, ptr %error_var38, align 8, !dbg !3168
  ret i64 %52, !dbg !3168

noerr_block55:                                    ; preds = %after_check53
  %53 = load i64, ptr %retparam50, align 8, !dbg !3168
  store i64 %53, ptr %len, align 8, !dbg !3168
  %54 = load i64, ptr %curr, align 8, !dbg !3169
  %ptradd57 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !3170
  %55 = load i64, ptr %ptradd57, align 8, !dbg !3170
  %56 = inttoptr i64 %55 to ptr, !dbg !3170
  %type60 = load ptr, ptr %.cachedtype59, align 8
  %57 = icmp eq ptr %56, %type60
  br i1 %57, label %cache_hit63, label %cache_miss61

cache_miss61:                                     ; preds = %noerr_block55
  %ptradd62 = getelementptr inbounds i8, ptr %56, i64 16
  %58 = load ptr, ptr %ptradd62, align 8
  %59 = call ptr @.dyn_search(ptr %58, ptr @"$sel.seek")
  store ptr %59, ptr %.inlinecache58, align 8
  store ptr %56, ptr %.cachedtype59, align 8
  br label %60

cache_hit63:                                      ; preds = %noerr_block55
  %cache_hit_fn64 = load ptr, ptr %.inlinecache58, align 8
  br label %60

60:                                               ; preds = %cache_hit63, %cache_miss61
  %fn_phi65 = phi ptr [ %cache_hit_fn64, %cache_hit63 ], [ %59, %cache_miss61 ]
  %61 = icmp eq ptr %fn_phi65, null
  br i1 %61, label %missing_function66, label %match67

missing_function66:                               ; preds = %60
  %62 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3171
  call void %62(ptr @.panic_msg.203, i64 41, ptr @.file.53, i64 9, ptr @.func.68, i64 9, i32 34) #5, !dbg !3171
  unreachable, !dbg !3171

match67:                                          ; preds = %60
  %63 = load ptr, ptr %s, align 8
  %64 = call i64 %fn_phi65(ptr %retparam68, ptr %63, i64 %54, i32 0), !dbg !3171
  %not_err69 = icmp eq i64 %64, 0, !dbg !3171
  %65 = call i1 @llvm.expect.i1(i1 %not_err69, i1 true), !dbg !3171
  br i1 %65, label %after_check71, label %assign_optional70, !dbg !3171

assign_optional70:                                ; preds = %match67
  store i64 %64, ptr %error_var56, align 8, !dbg !3171
  br label %guard_block72, !dbg !3171

after_check71:                                    ; preds = %match67
  br label %noerr_block73, !dbg !3171

guard_block72:                                    ; preds = %assign_optional70
  %66 = load i64, ptr %error_var56, align 8, !dbg !3171
  ret i64 %66, !dbg !3171

noerr_block73:                                    ; preds = %after_check71
  %67 = load i64, ptr %len, align 8, !dbg !3172
  %68 = load i64, ptr %curr, align 8, !dbg !3173
  %sub = sub i64 %67, %68, !dbg !3172
  store i64 %sub, ptr %0, align 8, !dbg !3172
  ret i64 0, !dbg !3172

if.exit75:                                        ; preds = %27
  store i64 0, ptr %0, align 8, !dbg !3174
  ret i64 0, !dbg !3174
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.copy_to(ptr %0, i64 %1, ptr %2, i64 %3, ptr %4, ptr byval(%"char[]") align 8 %5) #0 comdat !dbg !3175 {
entry:
  %in = alloca %any, align 8
  %dst = alloca %any, align 8
  %reterr = alloca i64, align 8
  %in3 = alloca %any, align 8
  %dst4 = alloca %any, align 8
  %buffer = alloca %"char[]", align 8
  %blockret = alloca i64, align 8
  %total_copied = alloca i64, align 8
  %len = alloca i64, align 8
  %len.f = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %err = alloca i64, align 8
  %switch = alloca i64, align 8
  %written = alloca i64, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr14 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %varargslots19 = alloca [2 x %any], align 16
  %indirectarg22 = alloca %"any[]", align 8
  %.inlinecache25 = alloca ptr, align 8
  %.cachedtype26 = alloca ptr, align 8
  %retparam35 = alloca i64, align 8
  %.inlinecache45 = alloca ptr, align 8
  %.cachedtype46 = alloca ptr, align 8
  %reterr55 = alloca i64, align 8
  %.inlinecache57 = alloca ptr, align 8
  %.cachedtype58 = alloca ptr, align 8
  %retparam67 = alloca i64, align 8
  %.inlinecache77 = alloca ptr, align 8
  %.cachedtype78 = alloca ptr, align 8
  %reterr87 = alloca i64, align 8
  %.inlinecache89 = alloca ptr, align 8
  %.cachedtype90 = alloca ptr, align 8
  %retparam99 = alloca i64, align 8
  %reterr108 = alloca i64, align 8
  %in109 = alloca %any, align 8
  %dst110 = alloca %any, align 8
  %literal = alloca [4096 x i8], align 16
  %buffer111 = alloca %"char[]", align 8
  %blockret112 = alloca i64, align 8
  %total_copied113 = alloca i64, align 8
  %len115 = alloca i64, align 8
  %len.f116 = alloca i64, align 8
  %.inlinecache118 = alloca ptr, align 8
  %.cachedtype119 = alloca ptr, align 8
  %retparam128 = alloca i64, align 8
  %err136 = alloca i64, align 8
  %switch145 = alloca i64, align 8
  %written155 = alloca i64, align 8
  %error_var156 = alloca i64, align 8
  %taddr159 = alloca i64, align 8
  %taddr160 = alloca i64, align 8
  %varargslots161 = alloca [2 x %any], align 16
  %indirectarg164 = alloca %"any[]", align 8
  %taddr170 = alloca i64, align 8
  %taddr171 = alloca i64, align 8
  %varargslots172 = alloca [2 x %any], align 16
  %indirectarg175 = alloca %"any[]", align 8
  %.inlinecache179 = alloca ptr, align 8
  %.cachedtype180 = alloca ptr, align 8
  %retparam189 = alloca i64, align 8
  store ptr null, ptr %.cachedtype180, align 8
  store ptr null, ptr %.cachedtype119, align 8
  store ptr null, ptr %.cachedtype90, align 8
  store ptr null, ptr %.cachedtype78, align 8
  store ptr null, ptr %.cachedtype58, align 8
  store ptr null, ptr %.cachedtype46, align 8
  store ptr null, ptr %.cachedtype26, align 8
  store ptr null, ptr %.cachedtype, align 8
  store i64 %1, ptr %in, align 8
  %ptradd = getelementptr inbounds i8, ptr %in, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %in, !3178, !DIExpression(), !3179)
  store i64 %3, ptr %dst, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %dst, i64 8
  store ptr %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %dst, !3180, !DIExpression(), !3181)
    #dbg_declare(ptr %5, !3182, !DIExpression(), !3183)
  %ptradd2 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !3184
  %6 = load i64, ptr %ptradd2, align 8, !dbg !3184
  %i2b = icmp ne i64 %6, 0, !dbg !3184
  br i1 %i2b, label %if.then, label %if.exit43, !dbg !3184

if.then:                                          ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %in3, ptr align 8 %in, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %dst4, ptr align 8 %dst, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %buffer, ptr align 8 %5, i32 16, i1 false)
    #dbg_declare(ptr %total_copied, !3185, !DIExpression(), !3187)
  store i64 0, ptr %total_copied, align 8, !dbg !3187
  br label %loop.body, !dbg !3189

loop.body:                                        ; preds = %if.exit42, %if.then
    #dbg_declare(ptr %len, !3190, !DIExpression(), !3193)
  %ptradd5 = getelementptr inbounds i8, ptr %in3, i64 8, !dbg !3194
  %7 = load i64, ptr %ptradd5, align 8, !dbg !3194
  %8 = inttoptr i64 %7 to ptr, !dbg !3194
  %type = load ptr, ptr %.cachedtype, align 8
  %9 = icmp eq ptr %8, %type
  br i1 %9, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %loop.body
  %ptradd6 = getelementptr inbounds i8, ptr %8, i64 16
  %10 = load ptr, ptr %ptradd6, align 8
  %11 = call ptr @.dyn_search(ptr %10, ptr @"$sel.read")
  store ptr %11, ptr %.inlinecache, align 8
  store ptr %8, ptr %.cachedtype, align 8
  br label %12

cache_hit:                                        ; preds = %loop.body
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %12

12:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %11, %cache_miss ]
  %13 = icmp eq ptr %fn_phi, null
  br i1 %13, label %missing_function, label %match

missing_function:                                 ; preds = %12
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3195
  call void %14(ptr @.panic_msg.75, i64 41, ptr @.file.53, i64 9, ptr @.func.204, i64 7, i32 198) #5, !dbg !3195
  unreachable, !dbg !3195

match:                                            ; preds = %12
  %15 = load ptr, ptr %in3, align 8
  %lo = load ptr, ptr %buffer, align 8
  %ptradd7 = getelementptr inbounds i8, ptr %buffer, i64 8
  %hi = load i64, ptr %ptradd7, align 8
  %16 = call i64 %fn_phi(ptr %retparam, ptr %15, ptr %lo, i64 %hi), !dbg !3195
  %not_err = icmp eq i64 %16, 0, !dbg !3195
  %17 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3195
  br i1 %17, label %after_check, label %assign_optional, !dbg !3195

assign_optional:                                  ; preds = %match
  store i64 %16, ptr %len.f, align 8, !dbg !3195
  br label %after_assign, !dbg !3195

after_check:                                      ; preds = %match
  %18 = load i64, ptr %retparam, align 8, !dbg !3195
  store i64 %18, ptr %len, align 8, !dbg !3195
  store i64 0, ptr %len.f, align 8, !dbg !3195
  br label %after_assign, !dbg !3195

after_assign:                                     ; preds = %after_check, %assign_optional
    #dbg_declare(ptr %err, !3196, !DIExpression(), !3197)
  br label %testblock, !dbg !3197

testblock:                                        ; preds = %after_assign
  %optval = load i64, ptr %len.f, align 8, !dbg !3198
  %not_err8 = icmp eq i64 %optval, 0, !dbg !3198
  %19 = call i1 @llvm.expect.i1(i1 %not_err8, i1 true), !dbg !3198
  br i1 %19, label %after_check10, label %assign_optional9, !dbg !3198

assign_optional9:                                 ; preds = %testblock
  store i64 %optval, ptr %err, align 8, !dbg !3198
  br label %end_block, !dbg !3198

after_check10:                                    ; preds = %testblock
  store i64 0, ptr %err, align 8, !dbg !3198
  br label %end_block, !dbg !3198

end_block:                                        ; preds = %after_check10, %assign_optional9
  %20 = load i64, ptr %err, align 8, !dbg !3198
  %neq = icmp ne i64 %20, 0, !dbg !3198
  br i1 %neq, label %if.then11, label %if.exit, !dbg !3198

if.then11:                                        ; preds = %end_block
  store i64 %20, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %if.then11
  %21 = load i64, ptr %switch, align 8
  %eq = icmp eq i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), %21, !dbg !3199
  br i1 %eq, label %switch.case, label %next_if, !dbg !3199

switch.case:                                      ; preds = %switch.entry
  %22 = load i64, ptr %total_copied, align 8, !dbg !3200
  store i64 %22, ptr %blockret, align 8, !dbg !3200
  br label %expr_block.exit, !dbg !3200

next_if:                                          ; preds = %switch.entry
  br label %switch.default, !dbg !3200

switch.default:                                   ; preds = %next_if
  %23 = load i64, ptr %err, align 8, !dbg !3202
  store i64 %23, ptr %reterr, align 8, !dbg !3202
  br label %err_retblock, !dbg !3202

if.exit:                                          ; preds = %end_block
  %24 = load i64, ptr %len, align 8, !dbg !3204
  %i2nb = icmp eq i64 %24, 0, !dbg !3204
  br i1 %i2nb, label %if.then12, label %if.exit13, !dbg !3204

if.then12:                                        ; preds = %if.exit
  %25 = load i64, ptr %total_copied, align 8, !dbg !3205
  store i64 %25, ptr %blockret, align 8, !dbg !3205
  br label %expr_block.exit, !dbg !3205

if.exit13:                                        ; preds = %if.exit
    #dbg_declare(ptr %written, !3206, !DIExpression(), !3207)
  %26 = load %"char[]", ptr %buffer, align 8, !dbg !3208
  %27 = extractvalue %"char[]" %26, 0, !dbg !3208
  %28 = extractvalue %"char[]" %26, 1, !dbg !3209
  %gt = icmp ugt i64 0, %28, !dbg !3209
  %29 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3209
  br i1 %29, label %panic, label %checkok, !dbg !3209

checkok:                                          ; preds = %if.exit13
  %30 = load i64, ptr %len, align 8, !dbg !3210
  %add = add i64 0, %30, !dbg !3210
  %lt = icmp ult i64 %28, %add, !dbg !3210
  %sub = sub i64 %add, 1, !dbg !3210
  %31 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !3210
  br i1 %31, label %panic16, label %checkok23, !dbg !3210

checkok23:                                        ; preds = %checkok
  %size = sub i64 %add, 0, !dbg !3208
  %32 = insertvalue %"char[]" undef, ptr %27, 0, !dbg !3208
  %33 = insertvalue %"char[]" %32, i64 %size, 1, !dbg !3208
  %ptradd24 = getelementptr inbounds i8, ptr %dst4, i64 8, !dbg !3208
  %34 = load i64, ptr %ptradd24, align 8, !dbg !3208
  %35 = inttoptr i64 %34 to ptr, !dbg !3208
  %type27 = load ptr, ptr %.cachedtype26, align 8
  %36 = icmp eq ptr %35, %type27
  br i1 %36, label %cache_hit30, label %cache_miss28

cache_miss28:                                     ; preds = %checkok23
  %ptradd29 = getelementptr inbounds i8, ptr %35, i64 16
  %37 = load ptr, ptr %ptradd29, align 8
  %38 = call ptr @.dyn_search(ptr %37, ptr @"$sel.write")
  store ptr %38, ptr %.inlinecache25, align 8
  store ptr %35, ptr %.cachedtype26, align 8
  br label %39

cache_hit30:                                      ; preds = %checkok23
  %cache_hit_fn31 = load ptr, ptr %.inlinecache25, align 8
  br label %39

39:                                               ; preds = %cache_hit30, %cache_miss28
  %fn_phi32 = phi ptr [ %cache_hit_fn31, %cache_hit30 ], [ %38, %cache_miss28 ]
  %40 = icmp eq ptr %fn_phi32, null
  br i1 %40, label %missing_function33, label %match34

missing_function33:                               ; preds = %39
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3211
  call void %41(ptr @.panic_msg.52, i64 42, ptr @.file.53, i64 9, ptr @.func.204, i64 7, i32 205) #5, !dbg !3211
  unreachable, !dbg !3211

match34:                                          ; preds = %39
  %42 = load ptr, ptr %dst4, align 8
  %43 = call i64 %fn_phi32(ptr %retparam35, ptr %42, ptr %27, i64 %size), !dbg !3211
  %not_err36 = icmp eq i64 %43, 0, !dbg !3211
  %44 = call i1 @llvm.expect.i1(i1 %not_err36, i1 true), !dbg !3211
  br i1 %44, label %after_check38, label %assign_optional37, !dbg !3211

assign_optional37:                                ; preds = %match34
  store i64 %43, ptr %error_var, align 8, !dbg !3211
  br label %guard_block, !dbg !3211

after_check38:                                    ; preds = %match34
  br label %noerr_block, !dbg !3211

guard_block:                                      ; preds = %assign_optional37
  %45 = load i64, ptr %error_var, align 8, !dbg !3211
  store i64 %45, ptr %reterr, align 8, !dbg !3211
  br label %err_retblock, !dbg !3211

noerr_block:                                      ; preds = %after_check38
  %46 = load i64, ptr %retparam35, align 8, !dbg !3211
  store i64 %46, ptr %written, align 8, !dbg !3211
  %47 = load i64, ptr %total_copied, align 8, !dbg !3212
  %48 = load i64, ptr %len, align 8, !dbg !3213
  %add39 = add i64 %47, %48, !dbg !3212
  store i64 %add39, ptr %total_copied, align 8, !dbg !3212
  %49 = load i64, ptr %written, align 8, !dbg !3214
  %50 = load i64, ptr %len, align 8, !dbg !3215
  %neq40 = icmp ne i64 %49, %50, !dbg !3214
  br i1 %neq40, label %if.then41, label %if.exit42, !dbg !3214

if.then41:                                        ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.io.IoError$INCOMPLETE_WRITE" to i64), ptr %reterr, align 8, !dbg !3216
  br label %err_retblock, !dbg !3216

if.exit42:                                        ; preds = %noerr_block
  br label %loop.body, !dbg !3216

expr_block.exit:                                  ; preds = %if.then12, %switch.case
  %51 = load i64, ptr %blockret, align 8, !dbg !3216
  store i64 %51, ptr %0, align 8, !dbg !3216
  ret i64 0, !dbg !3216

err_retblock:                                     ; preds = %if.then41, %guard_block, %switch.default
  %52 = load i64, ptr %reterr, align 8, !dbg !3216
  ret i64 %52, !dbg !3216

if.exit43:                                        ; preds = %entry
  %ptradd44 = getelementptr inbounds i8, ptr %in, i64 8, !dbg !3217
  %53 = load i64, ptr %ptradd44, align 8, !dbg !3217
  %54 = inttoptr i64 %53 to ptr, !dbg !3217
  %type47 = load ptr, ptr %.cachedtype46, align 8
  %55 = icmp eq ptr %54, %type47
  br i1 %55, label %cache_hit50, label %cache_miss48

cache_miss48:                                     ; preds = %if.exit43
  %ptradd49 = getelementptr inbounds i8, ptr %54, i64 16
  %56 = load ptr, ptr %ptradd49, align 8
  %57 = call ptr @.dyn_search(ptr %56, ptr @"$sel.write_to")
  store ptr %57, ptr %.inlinecache45, align 8
  store ptr %54, ptr %.cachedtype46, align 8
  br label %58

cache_hit50:                                      ; preds = %if.exit43
  %cache_hit_fn51 = load ptr, ptr %.inlinecache45, align 8
  br label %58

58:                                               ; preds = %cache_hit50, %cache_miss48
  %fn_phi52 = phi ptr [ %cache_hit_fn51, %cache_hit50 ], [ %57, %cache_miss48 ]
  %i2b53 = icmp ne ptr %fn_phi52, null
  br i1 %i2b53, label %if.then54, label %if.exit75

if.then54:                                        ; preds = %58
  %ptradd56 = getelementptr inbounds i8, ptr %in, i64 8, !dbg !3218
  %59 = load i64, ptr %ptradd56, align 8, !dbg !3218
  %60 = inttoptr i64 %59 to ptr, !dbg !3218
  %type59 = load ptr, ptr %.cachedtype58, align 8
  %61 = icmp eq ptr %60, %type59
  br i1 %61, label %cache_hit62, label %cache_miss60

cache_miss60:                                     ; preds = %if.then54
  %ptradd61 = getelementptr inbounds i8, ptr %60, i64 16
  %62 = load ptr, ptr %ptradd61, align 8
  %63 = call ptr @.dyn_search(ptr %62, ptr @"$sel.write_to")
  store ptr %63, ptr %.inlinecache57, align 8
  store ptr %60, ptr %.cachedtype58, align 8
  br label %64

cache_hit62:                                      ; preds = %if.then54
  %cache_hit_fn63 = load ptr, ptr %.inlinecache57, align 8
  br label %64

64:                                               ; preds = %cache_hit62, %cache_miss60
  %fn_phi64 = phi ptr [ %cache_hit_fn63, %cache_hit62 ], [ %63, %cache_miss60 ]
  %65 = icmp eq ptr %fn_phi64, null
  br i1 %65, label %missing_function65, label %match66

missing_function65:                               ; preds = %64
  %66 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3219
  call void %66(ptr @.panic_msg.205, i64 45, ptr @.file.53, i64 9, ptr @.func.204, i64 7, i32 180) #5, !dbg !3219
  unreachable, !dbg !3219

match66:                                          ; preds = %64
  %67 = load ptr, ptr %in, align 8
  %lo68 = load i64, ptr %dst, align 8
  %ptradd69 = getelementptr inbounds i8, ptr %dst, i64 8
  %hi70 = load ptr, ptr %ptradd69, align 8
  %68 = call i64 %fn_phi64(ptr %retparam67, ptr %67, i64 %lo68, ptr %hi70), !dbg !3219
  %not_err71 = icmp eq i64 %68, 0, !dbg !3219
  %69 = call i1 @llvm.expect.i1(i1 %not_err71, i1 true), !dbg !3219
  br i1 %69, label %after_check73, label %assign_optional72, !dbg !3219

assign_optional72:                                ; preds = %match66
  store i64 %68, ptr %reterr55, align 8, !dbg !3219
  br label %err_retblock74, !dbg !3219

after_check73:                                    ; preds = %match66
  %70 = load i64, ptr %retparam67, align 8, !dbg !3219
  store i64 %70, ptr %0, align 8, !dbg !3219
  ret i64 0, !dbg !3219

err_retblock74:                                   ; preds = %assign_optional72
  %71 = load i64, ptr %reterr55, align 8, !dbg !3219
  ret i64 %71, !dbg !3219

if.exit75:                                        ; preds = %58
  %ptradd76 = getelementptr inbounds i8, ptr %dst, i64 8, !dbg !3220
  %72 = load i64, ptr %ptradd76, align 8, !dbg !3220
  %73 = inttoptr i64 %72 to ptr, !dbg !3220
  %type79 = load ptr, ptr %.cachedtype78, align 8
  %74 = icmp eq ptr %73, %type79
  br i1 %74, label %cache_hit82, label %cache_miss80

cache_miss80:                                     ; preds = %if.exit75
  %ptradd81 = getelementptr inbounds i8, ptr %73, i64 16
  %75 = load ptr, ptr %ptradd81, align 8
  %76 = call ptr @.dyn_search(ptr %75, ptr @"$sel.read_to")
  store ptr %76, ptr %.inlinecache77, align 8
  store ptr %73, ptr %.cachedtype78, align 8
  br label %77

cache_hit82:                                      ; preds = %if.exit75
  %cache_hit_fn83 = load ptr, ptr %.inlinecache77, align 8
  br label %77

77:                                               ; preds = %cache_hit82, %cache_miss80
  %fn_phi84 = phi ptr [ %cache_hit_fn83, %cache_hit82 ], [ %76, %cache_miss80 ]
  %i2b85 = icmp ne ptr %fn_phi84, null
  br i1 %i2b85, label %if.then86, label %if.exit107

if.then86:                                        ; preds = %77
  %ptradd88 = getelementptr inbounds i8, ptr %dst, i64 8, !dbg !3221
  %78 = load i64, ptr %ptradd88, align 8, !dbg !3221
  %79 = inttoptr i64 %78 to ptr, !dbg !3221
  %type91 = load ptr, ptr %.cachedtype90, align 8
  %80 = icmp eq ptr %79, %type91
  br i1 %80, label %cache_hit94, label %cache_miss92

cache_miss92:                                     ; preds = %if.then86
  %ptradd93 = getelementptr inbounds i8, ptr %79, i64 16
  %81 = load ptr, ptr %ptradd93, align 8
  %82 = call ptr @.dyn_search(ptr %81, ptr @"$sel.read_to")
  store ptr %82, ptr %.inlinecache89, align 8
  store ptr %79, ptr %.cachedtype90, align 8
  br label %83

cache_hit94:                                      ; preds = %if.then86
  %cache_hit_fn95 = load ptr, ptr %.inlinecache89, align 8
  br label %83

83:                                               ; preds = %cache_hit94, %cache_miss92
  %fn_phi96 = phi ptr [ %cache_hit_fn95, %cache_hit94 ], [ %82, %cache_miss92 ]
  %84 = icmp eq ptr %fn_phi96, null
  br i1 %84, label %missing_function97, label %match98

missing_function97:                               ; preds = %83
  %85 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3222
  call void %85(ptr @.panic_msg.206, i64 44, ptr @.file.53, i64 9, ptr @.func.204, i64 7, i32 181) #5, !dbg !3222
  unreachable, !dbg !3222

match98:                                          ; preds = %83
  %86 = load ptr, ptr %dst, align 8
  %lo100 = load i64, ptr %in, align 8
  %ptradd101 = getelementptr inbounds i8, ptr %in, i64 8
  %hi102 = load ptr, ptr %ptradd101, align 8
  %87 = call i64 %fn_phi96(ptr %retparam99, ptr %86, i64 %lo100, ptr %hi102), !dbg !3222
  %not_err103 = icmp eq i64 %87, 0, !dbg !3222
  %88 = call i1 @llvm.expect.i1(i1 %not_err103, i1 true), !dbg !3222
  br i1 %88, label %after_check105, label %assign_optional104, !dbg !3222

assign_optional104:                               ; preds = %match98
  store i64 %87, ptr %reterr87, align 8, !dbg !3222
  br label %err_retblock106, !dbg !3222

after_check105:                                   ; preds = %match98
  %89 = load i64, ptr %retparam99, align 8, !dbg !3222
  store i64 %89, ptr %0, align 8, !dbg !3222
  ret i64 0, !dbg !3222

err_retblock106:                                  ; preds = %assign_optional104
  %90 = load i64, ptr %reterr87, align 8, !dbg !3222
  ret i64 %90, !dbg !3222

if.exit107:                                       ; preds = %77
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %in109, ptr align 8 %in, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %dst110, ptr align 8 %dst, i32 16, i1 false)
  call void @llvm.memset.p0.i64(ptr align 1 %literal, i8 0, i64 4096, i1 false)
  %91 = insertvalue %"char[]" undef, ptr %literal, 0
  %92 = insertvalue %"char[]" %91, i64 4096, 1
  store %"char[]" %92, ptr %buffer111, align 8
    #dbg_declare(ptr %total_copied113, !3223, !DIExpression(), !3225)
  store i64 0, ptr %total_copied113, align 8, !dbg !3225
  br label %loop.body114, !dbg !3227

loop.body114:                                     ; preds = %if.exit198, %if.exit107
    #dbg_declare(ptr %len115, !3228, !DIExpression(), !3231)
  %ptradd117 = getelementptr inbounds i8, ptr %in109, i64 8, !dbg !3232
  %93 = load i64, ptr %ptradd117, align 8, !dbg !3232
  %94 = inttoptr i64 %93 to ptr, !dbg !3232
  %type120 = load ptr, ptr %.cachedtype119, align 8
  %95 = icmp eq ptr %94, %type120
  br i1 %95, label %cache_hit123, label %cache_miss121

cache_miss121:                                    ; preds = %loop.body114
  %ptradd122 = getelementptr inbounds i8, ptr %94, i64 16
  %96 = load ptr, ptr %ptradd122, align 8
  %97 = call ptr @.dyn_search(ptr %96, ptr @"$sel.read")
  store ptr %97, ptr %.inlinecache118, align 8
  store ptr %94, ptr %.cachedtype119, align 8
  br label %98

cache_hit123:                                     ; preds = %loop.body114
  %cache_hit_fn124 = load ptr, ptr %.inlinecache118, align 8
  br label %98

98:                                               ; preds = %cache_hit123, %cache_miss121
  %fn_phi125 = phi ptr [ %cache_hit_fn124, %cache_hit123 ], [ %97, %cache_miss121 ]
  %99 = icmp eq ptr %fn_phi125, null
  br i1 %99, label %missing_function126, label %match127

missing_function126:                              ; preds = %98
  %100 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3233
  call void %100(ptr @.panic_msg.75, i64 41, ptr @.file.53, i64 9, ptr @.func.204, i64 7, i32 198) #5, !dbg !3233
  unreachable, !dbg !3233

match127:                                         ; preds = %98
  %101 = load ptr, ptr %in109, align 8
  %lo129 = load ptr, ptr %buffer111, align 8
  %ptradd130 = getelementptr inbounds i8, ptr %buffer111, i64 8
  %hi131 = load i64, ptr %ptradd130, align 8
  %102 = call i64 %fn_phi125(ptr %retparam128, ptr %101, ptr %lo129, i64 %hi131), !dbg !3233
  %not_err132 = icmp eq i64 %102, 0, !dbg !3233
  %103 = call i1 @llvm.expect.i1(i1 %not_err132, i1 true), !dbg !3233
  br i1 %103, label %after_check134, label %assign_optional133, !dbg !3233

assign_optional133:                               ; preds = %match127
  store i64 %102, ptr %len.f116, align 8, !dbg !3233
  br label %after_assign135, !dbg !3233

after_check134:                                   ; preds = %match127
  %104 = load i64, ptr %retparam128, align 8, !dbg !3233
  store i64 %104, ptr %len115, align 8, !dbg !3233
  store i64 0, ptr %len.f116, align 8, !dbg !3233
  br label %after_assign135, !dbg !3233

after_assign135:                                  ; preds = %after_check134, %assign_optional133
    #dbg_declare(ptr %err136, !3234, !DIExpression(), !3235)
  br label %testblock137, !dbg !3235

testblock137:                                     ; preds = %after_assign135
  %optval138 = load i64, ptr %len.f116, align 8, !dbg !3236
  %not_err139 = icmp eq i64 %optval138, 0, !dbg !3236
  %105 = call i1 @llvm.expect.i1(i1 %not_err139, i1 true), !dbg !3236
  br i1 %105, label %after_check141, label %assign_optional140, !dbg !3236

assign_optional140:                               ; preds = %testblock137
  store i64 %optval138, ptr %err136, align 8, !dbg !3236
  br label %end_block142, !dbg !3236

after_check141:                                   ; preds = %testblock137
  store i64 0, ptr %err136, align 8, !dbg !3236
  br label %end_block142, !dbg !3236

end_block142:                                     ; preds = %after_check141, %assign_optional140
  %106 = load i64, ptr %err136, align 8, !dbg !3236
  %neq143 = icmp ne i64 %106, 0, !dbg !3236
  br i1 %neq143, label %if.then144, label %if.exit151, !dbg !3236

if.then144:                                       ; preds = %end_block142
  store i64 %106, ptr %switch145, align 8
  br label %switch.entry146

switch.entry146:                                  ; preds = %if.then144
  %107 = load i64, ptr %switch145, align 8
  %eq147 = icmp eq i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), %107, !dbg !3237
  br i1 %eq147, label %switch.case148, label %next_if149, !dbg !3237

switch.case148:                                   ; preds = %switch.entry146
  %108 = load i64, ptr %total_copied113, align 8, !dbg !3238
  store i64 %108, ptr %blockret112, align 8, !dbg !3238
  br label %expr_block.exit199, !dbg !3238

next_if149:                                       ; preds = %switch.entry146
  br label %switch.default150, !dbg !3238

switch.default150:                                ; preds = %next_if149
  %109 = load i64, ptr %err136, align 8, !dbg !3240
  store i64 %109, ptr %reterr108, align 8, !dbg !3240
  br label %err_retblock200, !dbg !3240

if.exit151:                                       ; preds = %end_block142
  %110 = load i64, ptr %len115, align 8, !dbg !3242
  %i2nb152 = icmp eq i64 %110, 0, !dbg !3242
  br i1 %i2nb152, label %if.then153, label %if.exit154, !dbg !3242

if.then153:                                       ; preds = %if.exit151
  %111 = load i64, ptr %total_copied113, align 8, !dbg !3243
  store i64 %111, ptr %blockret112, align 8, !dbg !3243
  br label %expr_block.exit199, !dbg !3243

if.exit154:                                       ; preds = %if.exit151
    #dbg_declare(ptr %written155, !3244, !DIExpression(), !3245)
  %112 = load %"char[]", ptr %buffer111, align 8, !dbg !3246
  %113 = extractvalue %"char[]" %112, 0, !dbg !3246
  %114 = extractvalue %"char[]" %112, 1, !dbg !3247
  %gt157 = icmp ugt i64 0, %114, !dbg !3247
  %115 = call i1 @llvm.expect.i1(i1 %gt157, i1 false), !dbg !3247
  br i1 %115, label %panic158, label %checkok165, !dbg !3247

checkok165:                                       ; preds = %if.exit154
  %116 = load i64, ptr %len115, align 8, !dbg !3248
  %add166 = add i64 0, %116, !dbg !3248
  %lt167 = icmp ult i64 %114, %add166, !dbg !3248
  %sub168 = sub i64 %add166, 1, !dbg !3248
  %117 = call i1 @llvm.expect.i1(i1 %lt167, i1 false), !dbg !3248
  br i1 %117, label %panic169, label %checkok176, !dbg !3248

checkok176:                                       ; preds = %checkok165
  %size177 = sub i64 %add166, 0, !dbg !3246
  %118 = insertvalue %"char[]" undef, ptr %113, 0, !dbg !3246
  %119 = insertvalue %"char[]" %118, i64 %size177, 1, !dbg !3246
  %ptradd178 = getelementptr inbounds i8, ptr %dst110, i64 8, !dbg !3246
  %120 = load i64, ptr %ptradd178, align 8, !dbg !3246
  %121 = inttoptr i64 %120 to ptr, !dbg !3246
  %type181 = load ptr, ptr %.cachedtype180, align 8
  %122 = icmp eq ptr %121, %type181
  br i1 %122, label %cache_hit184, label %cache_miss182

cache_miss182:                                    ; preds = %checkok176
  %ptradd183 = getelementptr inbounds i8, ptr %121, i64 16
  %123 = load ptr, ptr %ptradd183, align 8
  %124 = call ptr @.dyn_search(ptr %123, ptr @"$sel.write")
  store ptr %124, ptr %.inlinecache179, align 8
  store ptr %121, ptr %.cachedtype180, align 8
  br label %125

cache_hit184:                                     ; preds = %checkok176
  %cache_hit_fn185 = load ptr, ptr %.inlinecache179, align 8
  br label %125

125:                                              ; preds = %cache_hit184, %cache_miss182
  %fn_phi186 = phi ptr [ %cache_hit_fn185, %cache_hit184 ], [ %124, %cache_miss182 ]
  %126 = icmp eq ptr %fn_phi186, null
  br i1 %126, label %missing_function187, label %match188

missing_function187:                              ; preds = %125
  %127 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3249
  call void %127(ptr @.panic_msg.52, i64 42, ptr @.file.53, i64 9, ptr @.func.204, i64 7, i32 205) #5, !dbg !3249
  unreachable, !dbg !3249

match188:                                         ; preds = %125
  %128 = load ptr, ptr %dst110, align 8
  %129 = call i64 %fn_phi186(ptr %retparam189, ptr %128, ptr %113, i64 %size177), !dbg !3249
  %not_err190 = icmp eq i64 %129, 0, !dbg !3249
  %130 = call i1 @llvm.expect.i1(i1 %not_err190, i1 true), !dbg !3249
  br i1 %130, label %after_check192, label %assign_optional191, !dbg !3249

assign_optional191:                               ; preds = %match188
  store i64 %129, ptr %error_var156, align 8, !dbg !3249
  br label %guard_block193, !dbg !3249

after_check192:                                   ; preds = %match188
  br label %noerr_block194, !dbg !3249

guard_block193:                                   ; preds = %assign_optional191
  %131 = load i64, ptr %error_var156, align 8, !dbg !3249
  store i64 %131, ptr %reterr108, align 8, !dbg !3249
  br label %err_retblock200, !dbg !3249

noerr_block194:                                   ; preds = %after_check192
  %132 = load i64, ptr %retparam189, align 8, !dbg !3249
  store i64 %132, ptr %written155, align 8, !dbg !3249
  %133 = load i64, ptr %total_copied113, align 8, !dbg !3250
  %134 = load i64, ptr %len115, align 8, !dbg !3251
  %add195 = add i64 %133, %134, !dbg !3250
  store i64 %add195, ptr %total_copied113, align 8, !dbg !3250
  %135 = load i64, ptr %written155, align 8, !dbg !3252
  %136 = load i64, ptr %len115, align 8, !dbg !3253
  %neq196 = icmp ne i64 %135, %136, !dbg !3252
  br i1 %neq196, label %if.then197, label %if.exit198, !dbg !3252

if.then197:                                       ; preds = %noerr_block194
  store i64 ptrtoint (ptr @"std.io.IoError$INCOMPLETE_WRITE" to i64), ptr %reterr108, align 8, !dbg !3254
  br label %err_retblock200, !dbg !3254

if.exit198:                                       ; preds = %noerr_block194
  br label %loop.body114, !dbg !3254

expr_block.exit199:                               ; preds = %if.then153, %switch.case148
  %137 = load i64, ptr %blockret112, align 8, !dbg !3254
  store i64 %137, ptr %0, align 8, !dbg !3254
  ret i64 0, !dbg !3254

err_retblock200:                                  ; preds = %if.then197, %guard_block193, %switch.default150
  %138 = load i64, ptr %reterr108, align 8, !dbg !3254
  ret i64 %138, !dbg !3254

panic:                                            ; preds = %if.exit13
  store i64 %28, ptr %taddr, align 8
  %139 = insertvalue %any undef, ptr %taddr, 0
  %140 = insertvalue %any %139, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr14, align 8
  %141 = insertvalue %any undef, ptr %taddr14, 0
  %142 = insertvalue %any %141, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %140, ptr %varargslots, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %142, ptr %ptradd15, align 16
  %143 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %143, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.53, i64 9, ptr @.func.204, i64 7, i32 205, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3208
  unreachable, !dbg !3208

panic16:                                          ; preds = %checkok
  store i64 %sub, ptr %taddr17, align 8
  %144 = insertvalue %any undef, ptr %taddr17, 0
  %145 = insertvalue %any %144, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %28, ptr %taddr18, align 8
  %146 = insertvalue %any undef, ptr %taddr18, 0
  %147 = insertvalue %any %146, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %145, ptr %varargslots19, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots19, i64 16
  store %any %147, ptr %ptradd20, align 16
  %148 = insertvalue %"any[]" undef, ptr %varargslots19, 0
  %"$$temp21" = insertvalue %"any[]" %148, i64 2, 1
  store %"any[]" %"$$temp21", ptr %indirectarg22, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 60, ptr @.file.53, i64 9, ptr @.func.204, i64 7, i32 205, ptr byval(%"any[]") align 8 %indirectarg22) #5, !dbg !3208
  unreachable, !dbg !3208

panic158:                                         ; preds = %if.exit154
  store i64 %114, ptr %taddr159, align 8
  %149 = insertvalue %any undef, ptr %taddr159, 0
  %150 = insertvalue %any %149, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr160, align 8
  %151 = insertvalue %any undef, ptr %taddr160, 0
  %152 = insertvalue %any %151, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %150, ptr %varargslots161, align 16
  %ptradd162 = getelementptr inbounds i8, ptr %varargslots161, i64 16
  store %any %152, ptr %ptradd162, align 16
  %153 = insertvalue %"any[]" undef, ptr %varargslots161, 0
  %"$$temp163" = insertvalue %"any[]" %153, i64 2, 1
  store %"any[]" %"$$temp163", ptr %indirectarg164, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.53, i64 9, ptr @.func.204, i64 7, i32 205, ptr byval(%"any[]") align 8 %indirectarg164) #5, !dbg !3246
  unreachable, !dbg !3246

panic169:                                         ; preds = %checkok165
  store i64 %sub168, ptr %taddr170, align 8
  %154 = insertvalue %any undef, ptr %taddr170, 0
  %155 = insertvalue %any %154, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %114, ptr %taddr171, align 8
  %156 = insertvalue %any undef, ptr %taddr171, 0
  %157 = insertvalue %any %156, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %155, ptr %varargslots172, align 16
  %ptradd173 = getelementptr inbounds i8, ptr %varargslots172, i64 16
  store %any %157, ptr %ptradd173, align 16
  %158 = insertvalue %"any[]" undef, ptr %varargslots172, 0
  %"$$temp174" = insertvalue %"any[]" %158, i64 2, 1
  store %"any[]" %"$$temp174", ptr %indirectarg175, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 60, ptr @.file.53, i64 9, ptr @.func.204, i64 7, i32 205, ptr byval(%"any[]") align 8 %indirectarg175) #5, !dbg !3246
  unreachable, !dbg !3246
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.io.wrap_bytes(ptr noalias sret(%ByteReader) align 8 %0, ptr %1, i64 %2) #0 comdat !dbg !3255 {
entry:
  %bytes = alloca %"char[]", align 8
  %literal = alloca %ByteReader, align 8
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !3258, !DIExpression(), !3259)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 %bytes, i32 16, i1 false), !dbg !3260
  %ptradd1 = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !3260
  store i64 0, ptr %ptradd1, align 8, !dbg !3261
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 24, i1 false), !dbg !3261
  ret void, !dbg !3261
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.fprintf(ptr %0, i64 %1, ptr %2, ptr %3, i64 %4, ptr byval(%"any[]") align 8 %5) #0 comdat !dbg !3262 {
entry:
  %out = alloca %any, align 8
  %format = alloca %"char[]", align 8
  %formatter = alloca %Formatter, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  store i64 %1, ptr %out, align 8
  %ptradd = getelementptr inbounds i8, ptr %out, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %out, !3265, !DIExpression(), !3266)
  store ptr %3, ptr %format, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %format, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %format, !3267, !DIExpression(), !3268)
    #dbg_declare(ptr %5, !3269, !DIExpression(), !3270)
    #dbg_declare(ptr %formatter, !3271, !DIExpression(), !3272)
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !3272
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putstream_fn, ptr %out), !dbg !3273
  %lo = load ptr, ptr %format, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %format, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load ptr, ptr %5, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %5, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  %6 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr %lo, i64 %hi, ptr %lo3, i64 %hi5), !dbg !3274
  %not_err = icmp eq i64 %6, 0, !dbg !3274
  %7 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3274
  br i1 %7, label %after_check, label %assign_optional, !dbg !3274

assign_optional:                                  ; preds = %entry
  store i64 %6, ptr %reterr, align 8, !dbg !3274
  br label %err_retblock, !dbg !3274

after_check:                                      ; preds = %entry
  %8 = load i64, ptr %retparam, align 8, !dbg !3274
  store i64 %8, ptr %0, align 8, !dbg !3274
  ret i64 0, !dbg !3274

err_retblock:                                     ; preds = %assign_optional
  %9 = load i64, ptr %reterr, align 8, !dbg !3274
  ret i64 %9, !dbg !3274
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.fprintfn(ptr %0, i64 %1, ptr %2, ptr %3, i64 %4, ptr byval(%"any[]") align 8 %5) #0 comdat !dbg !3275 {
entry:
  %out = alloca %any, align 8
  %format = alloca %"char[]", align 8
  %formatter = alloca %Formatter, align 8
  %len = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %error_var6 = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %.inlinecache15 = alloca ptr, align 8
  %.cachedtype16 = alloca ptr, align 8
  %error_var23 = alloca i64, align 8
  %.inlinecache25 = alloca ptr, align 8
  %.cachedtype26 = alloca ptr, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype26, align 8
  store ptr null, ptr %.cachedtype16, align 8
  store ptr null, ptr %.cachedtype, align 8
  store i64 %1, ptr %out, align 8
  %ptradd = getelementptr inbounds i8, ptr %out, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %out, !3276, !DIExpression(), !3277)
  store ptr %3, ptr %format, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %format, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %format, !3278, !DIExpression(), !3279)
    #dbg_declare(ptr %5, !3280, !DIExpression(), !3281)
    #dbg_declare(ptr %formatter, !3282, !DIExpression(), !3283)
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !3283
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putstream_fn, ptr %out), !dbg !3284
    #dbg_declare(ptr %len, !3285, !DIExpression(), !3286)
  %lo = load ptr, ptr %format, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %format, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load ptr, ptr %5, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %5, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  %6 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr %lo, i64 %hi, ptr %lo3, i64 %hi5), !dbg !3287
  %not_err = icmp eq i64 %6, 0, !dbg !3287
  %7 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3287
  br i1 %7, label %after_check, label %assign_optional, !dbg !3287

assign_optional:                                  ; preds = %entry
  store i64 %6, ptr %error_var, align 8, !dbg !3287
  br label %guard_block, !dbg !3287

after_check:                                      ; preds = %entry
  br label %noerr_block, !dbg !3287

guard_block:                                      ; preds = %assign_optional
  %8 = load i64, ptr %error_var, align 8, !dbg !3287
  ret i64 %8, !dbg !3287

noerr_block:                                      ; preds = %after_check
  %9 = load i64, ptr %retparam, align 8, !dbg !3287
  store i64 %9, ptr %len, align 8, !dbg !3287
  %ptradd7 = getelementptr inbounds i8, ptr %out, i64 8, !dbg !3288
  %10 = load i64, ptr %ptradd7, align 8, !dbg !3288
  %11 = inttoptr i64 %10 to ptr, !dbg !3288
  %type = load ptr, ptr %.cachedtype, align 8
  %12 = icmp eq ptr %11, %type
  br i1 %12, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %noerr_block
  %ptradd8 = getelementptr inbounds i8, ptr %11, i64 16
  %13 = load ptr, ptr %ptradd8, align 8
  %14 = call ptr @.dyn_search(ptr %13, ptr @"$sel.write_byte")
  store ptr %14, ptr %.inlinecache, align 8
  store ptr %11, ptr %.cachedtype, align 8
  br label %15

cache_hit:                                        ; preds = %noerr_block
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %15

15:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %14, %cache_miss ]
  %16 = icmp eq ptr %fn_phi, null
  br i1 %16, label %missing_function, label %match

missing_function:                                 ; preds = %15
  %17 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3289
  call void %17(ptr @.panic_msg.207, i64 47, ptr @.file.208, i64 5, ptr @.func.209, i64 8, i32 164) #5, !dbg !3289
  unreachable, !dbg !3289

match:                                            ; preds = %15
  %18 = load ptr, ptr %out, align 8, !dbg !3289
  %19 = call i64 %fn_phi(ptr %18, i8 zeroext 10), !dbg !3289
  %not_err9 = icmp eq i64 %19, 0, !dbg !3289
  %20 = call i1 @llvm.expect.i1(i1 %not_err9, i1 true), !dbg !3289
  br i1 %20, label %after_check11, label %assign_optional10, !dbg !3289

assign_optional10:                                ; preds = %match
  store i64 %19, ptr %error_var6, align 8, !dbg !3289
  br label %guard_block12, !dbg !3289

after_check11:                                    ; preds = %match
  br label %noerr_block13, !dbg !3289

guard_block12:                                    ; preds = %assign_optional10
  %21 = load i64, ptr %error_var6, align 8, !dbg !3289
  ret i64 %21, !dbg !3289

noerr_block13:                                    ; preds = %after_check11
  %ptradd14 = getelementptr inbounds i8, ptr %out, i64 8, !dbg !3290
  %22 = load i64, ptr %ptradd14, align 8, !dbg !3290
  %23 = inttoptr i64 %22 to ptr, !dbg !3290
  %type17 = load ptr, ptr %.cachedtype16, align 8
  %24 = icmp eq ptr %23, %type17
  br i1 %24, label %cache_hit20, label %cache_miss18

cache_miss18:                                     ; preds = %noerr_block13
  %ptradd19 = getelementptr inbounds i8, ptr %23, i64 16
  %25 = load ptr, ptr %ptradd19, align 8
  %26 = call ptr @.dyn_search(ptr %25, ptr @"$sel.flush")
  store ptr %26, ptr %.inlinecache15, align 8
  store ptr %23, ptr %.cachedtype16, align 8
  br label %27

cache_hit20:                                      ; preds = %noerr_block13
  %cache_hit_fn21 = load ptr, ptr %.inlinecache15, align 8
  br label %27

27:                                               ; preds = %cache_hit20, %cache_miss18
  %fn_phi22 = phi ptr [ %cache_hit_fn21, %cache_hit20 ], [ %26, %cache_miss18 ]
  %i2b = icmp ne ptr %fn_phi22, null
  br i1 %i2b, label %if.then, label %if.exit

if.then:                                          ; preds = %27
  %ptradd24 = getelementptr inbounds i8, ptr %out, i64 8, !dbg !3291
  %28 = load i64, ptr %ptradd24, align 8, !dbg !3291
  %29 = inttoptr i64 %28 to ptr, !dbg !3291
  %type27 = load ptr, ptr %.cachedtype26, align 8
  %30 = icmp eq ptr %29, %type27
  br i1 %30, label %cache_hit30, label %cache_miss28

cache_miss28:                                     ; preds = %if.then
  %ptradd29 = getelementptr inbounds i8, ptr %29, i64 16
  %31 = load ptr, ptr %ptradd29, align 8
  %32 = call ptr @.dyn_search(ptr %31, ptr @"$sel.flush")
  store ptr %32, ptr %.inlinecache25, align 8
  store ptr %29, ptr %.cachedtype26, align 8
  br label %33

cache_hit30:                                      ; preds = %if.then
  %cache_hit_fn31 = load ptr, ptr %.inlinecache25, align 8
  br label %33

33:                                               ; preds = %cache_hit30, %cache_miss28
  %fn_phi32 = phi ptr [ %cache_hit_fn31, %cache_hit30 ], [ %32, %cache_miss28 ]
  %34 = icmp eq ptr %fn_phi32, null
  br i1 %34, label %missing_function33, label %match34

missing_function33:                               ; preds = %33
  %35 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3291
  call void %35(ptr @.panic_msg.79, i64 42, ptr @.file.208, i64 5, ptr @.func.209, i64 8, i32 165) #5, !dbg !3291
  unreachable, !dbg !3291

match34:                                          ; preds = %33
  %36 = load ptr, ptr %out, align 8, !dbg !3291
  %37 = call i64 %fn_phi32(ptr %36), !dbg !3291
  %not_err35 = icmp eq i64 %37, 0, !dbg !3291
  %38 = call i1 @llvm.expect.i1(i1 %not_err35, i1 true), !dbg !3291
  br i1 %38, label %after_check37, label %assign_optional36, !dbg !3291

assign_optional36:                                ; preds = %match34
  store i64 %37, ptr %error_var23, align 8, !dbg !3291
  br label %guard_block38, !dbg !3291

after_check37:                                    ; preds = %match34
  br label %noerr_block39, !dbg !3291

guard_block38:                                    ; preds = %assign_optional36
  %39 = load i64, ptr %error_var23, align 8, !dbg !3291
  ret i64 %39, !dbg !3291

noerr_block39:                                    ; preds = %after_check37
  br label %if.exit, !dbg !3291

if.exit:                                          ; preds = %noerr_block39, %27
  %40 = load i64, ptr %len, align 8, !dbg !3292
  %add = add i64 %40, 1, !dbg !3292
  store i64 %add, ptr %0, align 8, !dbg !3292
  ret i64 0, !dbg !3292
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.out_putstream_fn(ptr %0, i8 zeroext %1) #0 !dbg !3293 {
entry:
  %data = alloca ptr, align 8
  %c = alloca i8, align 1
  %stream = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %0, ptr %data, align 8
    #dbg_declare(ptr %data, !3294, !DIExpression(), !3295)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !3296, !DIExpression(), !3297)
    #dbg_declare(ptr %stream, !3298, !DIExpression(), !3299)
  %2 = load ptr, ptr %data, align 8, !dbg !3300
  store ptr %2, ptr %stream, align 8, !dbg !3300
  %3 = load ptr, ptr %stream, align 8, !dbg !3301
  %checknull = icmp eq ptr %3, null, !dbg !3301
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3301
  br i1 %4, label %panic, label %checkok, !dbg !3301

checkok:                                          ; preds = %entry
  %5 = ptrtoint ptr %3 to i64, !dbg !3301
  %6 = urem i64 %5, 8, !dbg !3301
  %7 = icmp ne i64 %6, 0, !dbg !3301
  %8 = call i1 @llvm.expect.i1(i1 %7, i1 false), !dbg !3301
  br i1 %8, label %panic1, label %checkok3, !dbg !3301

checkok3:                                         ; preds = %checkok
  %ptradd4 = getelementptr inbounds i8, ptr %3, i64 8, !dbg !3302
  %9 = load i64, ptr %ptradd4, align 8, !dbg !3302
  %10 = inttoptr i64 %9 to ptr, !dbg !3302
  %type = load ptr, ptr %.cachedtype, align 8
  %11 = icmp eq ptr %10, %type
  br i1 %11, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %checkok3
  %ptradd5 = getelementptr inbounds i8, ptr %10, i64 16
  %12 = load ptr, ptr %ptradd5, align 8
  %13 = call ptr @.dyn_search(ptr %12, ptr @"$sel.write_byte")
  store ptr %13, ptr %.inlinecache, align 8
  store ptr %10, ptr %.cachedtype, align 8
  br label %14

cache_hit:                                        ; preds = %checkok3
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %14

14:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %13, %cache_miss ]
  %15 = icmp eq ptr %fn_phi, null
  br i1 %15, label %missing_function, label %match

missing_function:                                 ; preds = %14
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3303
  call void %16(ptr @.panic_msg.207, i64 47, ptr @.file.208, i64 5, ptr @.func.211, i64 16, i32 225) #5, !dbg !3303
  unreachable, !dbg !3303

match:                                            ; preds = %14
  %17 = load ptr, ptr %3, align 8, !dbg !3303
  %18 = load i8, ptr %c, align 1, !dbg !3303
  %19 = call i64 %fn_phi(ptr %17, i8 zeroext %18), !dbg !3303
  %not_err = icmp eq i64 %19, 0, !dbg !3303
  %20 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3303
  br i1 %20, label %after_check, label %assign_optional, !dbg !3303

assign_optional:                                  ; preds = %match
  store i64 %19, ptr %reterr, align 8, !dbg !3303
  br label %err_retblock, !dbg !3303

after_check:                                      ; preds = %match
  ret i64 0, !dbg !3303

err_retblock:                                     ; preds = %assign_optional
  %21 = load i64, ptr %reterr, align 8, !dbg !3303
  ret i64 %21, !dbg !3303

panic:                                            ; preds = %entry
  %22 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3301
  call void %22(ptr @.panic_msg.210, i64 47, ptr @.file.208, i64 5, ptr @.func.211, i64 16, i32 225) #5, !dbg !3301
  unreachable, !dbg !3301

panic1:                                           ; preds = %checkok
  store i64 8, ptr %taddr, align 8
  %23 = insertvalue %any undef, ptr %taddr, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr2, align 8
  %25 = insertvalue %any undef, ptr %taddr2, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %24, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %26, ptr %ptradd, align 16
  %27 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %27, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.208, i64 5, ptr @.func.211, i64 16, i32 225, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3301
  unreachable, !dbg !3301
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.out_putchar_fn(ptr %0, i8 zeroext %1) #0 !dbg !3304 {
entry:
  %data = alloca ptr, align 8
  %c = alloca i8, align 1
  store ptr %0, ptr %data, align 8
    #dbg_declare(ptr %data, !3305, !DIExpression(), !3306)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !3307, !DIExpression(), !3308)
  %2 = load i8, ptr %c, align 1, !dbg !3309
  %zext = zext i8 %2 to i32, !dbg !3309
  %3 = call i32 @putchar(i32 %zext), !dbg !3310
  ret i64 0, !dbg !3310
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.printf(ptr %0, ptr %1, i64 %2, ptr %3, i64 %4) #0 comdat !dbg !3311 {
entry:
  %format = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %formatter = alloca %Formatter, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  store ptr %1, ptr %format, align 8
  %ptradd = getelementptr inbounds i8, ptr %format, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %format, !3314, !DIExpression(), !3315)
  store ptr %3, ptr %args, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %args, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %args, !3316, !DIExpression(), !3317)
    #dbg_declare(ptr %formatter, !3318, !DIExpression(), !3319)
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !3319
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putchar_fn, ptr null), !dbg !3320
  %lo = load ptr, ptr %format, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %format, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load ptr, ptr %args, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %args, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  %5 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr %lo, i64 %hi, ptr %lo3, i64 %hi5), !dbg !3321
  %not_err = icmp eq i64 %5, 0, !dbg !3321
  %6 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3321
  br i1 %6, label %after_check, label %assign_optional, !dbg !3321

assign_optional:                                  ; preds = %entry
  store i64 %5, ptr %reterr, align 8, !dbg !3321
  br label %err_retblock, !dbg !3321

after_check:                                      ; preds = %entry
  %7 = load i64, ptr %retparam, align 8, !dbg !3321
  store i64 %7, ptr %0, align 8, !dbg !3321
  ret i64 0, !dbg !3321

err_retblock:                                     ; preds = %assign_optional
  %8 = load i64, ptr %reterr, align 8, !dbg !3321
  ret i64 %8, !dbg !3321
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.printfn(ptr %0, ptr %1, i64 %2, ptr %3, i64 %4) #0 comdat !dbg !3322 {
entry:
  %format = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %formatter = alloca %Formatter, align 8
  %len = alloca i64, align 8
  %len.f = alloca i64, align 8
  %retparam = alloca i64, align 8
  %error_var = alloca i64, align 8
  %error_var9 = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %format, align 8
  %ptradd = getelementptr inbounds i8, ptr %format, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %format, !3323, !DIExpression(), !3324)
  store ptr %3, ptr %args, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %args, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %args, !3325, !DIExpression(), !3326)
    #dbg_declare(ptr %formatter, !3327, !DIExpression(), !3328)
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !3328
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putchar_fn, ptr null), !dbg !3329
    #dbg_declare(ptr %len, !3330, !DIExpression(), !3331)
  %lo = load ptr, ptr %format, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %format, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load ptr, ptr %args, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %args, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  %5 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr %lo, i64 %hi, ptr %lo3, i64 %hi5), !dbg !3332
  %not_err = icmp eq i64 %5, 0, !dbg !3332
  %6 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3332
  br i1 %6, label %after_check, label %assign_optional, !dbg !3332

assign_optional:                                  ; preds = %entry
  store i64 %5, ptr %len.f, align 8, !dbg !3332
  br label %after_assign, !dbg !3332

after_check:                                      ; preds = %entry
  %7 = load i64, ptr %retparam, align 8, !dbg !3332
  store i64 %7, ptr %len, align 8, !dbg !3332
  store i64 0, ptr %len.f, align 8, !dbg !3332
  br label %after_assign, !dbg !3332

after_assign:                                     ; preds = %after_check, %assign_optional
  %8 = call i64 @std.io.out_putchar_fn(ptr null, i8 zeroext 10), !dbg !3333
  %not_err6 = icmp eq i64 %8, 0, !dbg !3333
  %9 = call i1 @llvm.expect.i1(i1 %not_err6, i1 true), !dbg !3333
  br i1 %9, label %after_check8, label %assign_optional7, !dbg !3333

assign_optional7:                                 ; preds = %after_assign
  store i64 %8, ptr %error_var, align 8, !dbg !3333
  br label %guard_block, !dbg !3333

after_check8:                                     ; preds = %after_assign
  br label %noerr_block, !dbg !3333

guard_block:                                      ; preds = %assign_optional7
  %10 = load i64, ptr %error_var, align 8, !dbg !3333
  ret i64 %10, !dbg !3333

noerr_block:                                      ; preds = %after_check8
  %11 = call ptr @std.io.stdout(), !dbg !3334
  %12 = call i64 @std.io.File.flush(ptr %11), !dbg !3334
  %not_err10 = icmp eq i64 %12, 0, !dbg !3334
  %13 = call i1 @llvm.expect.i1(i1 %not_err10, i1 true), !dbg !3334
  br i1 %13, label %after_check12, label %assign_optional11, !dbg !3334

assign_optional11:                                ; preds = %noerr_block
  store i64 %12, ptr %error_var9, align 8, !dbg !3334
  br label %guard_block13, !dbg !3334

after_check12:                                    ; preds = %noerr_block
  br label %noerr_block14, !dbg !3334

guard_block13:                                    ; preds = %assign_optional11
  %14 = load i64, ptr %error_var9, align 8, !dbg !3334
  ret i64 %14, !dbg !3334

noerr_block14:                                    ; preds = %after_check12
  %optval = load i64, ptr %len.f, align 8, !dbg !3335
  %not_err15 = icmp eq i64 %optval, 0, !dbg !3335
  %15 = call i1 @llvm.expect.i1(i1 %not_err15, i1 true), !dbg !3335
  br i1 %15, label %after_check17, label %assign_optional16, !dbg !3335

assign_optional16:                                ; preds = %noerr_block14
  store i64 %optval, ptr %reterr, align 8, !dbg !3335
  br label %err_retblock, !dbg !3335

after_check17:                                    ; preds = %noerr_block14
  %16 = load i64, ptr %len, align 8, !dbg !3335
  %add = add i64 %16, 1, !dbg !3335
  store i64 %add, ptr %0, align 8, !dbg !3335
  ret i64 0, !dbg !3335

err_retblock:                                     ; preds = %assign_optional16
  %17 = load i64, ptr %reterr, align 8, !dbg !3335
  ret i64 %17, !dbg !3335
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.eprintf(ptr %0, ptr %1, i64 %2, ptr %3, i64 %4) #0 comdat !dbg !3336 {
entry:
  %format = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %formatter = alloca %Formatter, align 8
  %stream = alloca %any, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  store ptr %1, ptr %format, align 8
  %ptradd = getelementptr inbounds i8, ptr %format, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %format, !3337, !DIExpression(), !3338)
  store ptr %3, ptr %args, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %args, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %args, !3339, !DIExpression(), !3340)
    #dbg_declare(ptr %formatter, !3341, !DIExpression(), !3342)
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !3342
    #dbg_declare(ptr %stream, !3343, !DIExpression(), !3344)
  %5 = call ptr @std.io.stderr(), !dbg !3345
  %6 = insertvalue %any undef, ptr %5, 0, !dbg !3345
  %7 = insertvalue %any %6, i64 ptrtoint (ptr @"$ct.std.io.File" to i64), 1, !dbg !3345
  store %any %7, ptr %stream, align 8, !dbg !3345
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putstream_fn, ptr %stream), !dbg !3346
  %lo = load ptr, ptr %format, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %format, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load ptr, ptr %args, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %args, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  %8 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr %lo, i64 %hi, ptr %lo3, i64 %hi5), !dbg !3347
  %not_err = icmp eq i64 %8, 0, !dbg !3347
  %9 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3347
  br i1 %9, label %after_check, label %assign_optional, !dbg !3347

assign_optional:                                  ; preds = %entry
  store i64 %8, ptr %reterr, align 8, !dbg !3347
  br label %err_retblock, !dbg !3347

after_check:                                      ; preds = %entry
  %10 = load i64, ptr %retparam, align 8, !dbg !3347
  store i64 %10, ptr %0, align 8, !dbg !3347
  ret i64 0, !dbg !3347

err_retblock:                                     ; preds = %assign_optional
  %11 = load i64, ptr %reterr, align 8, !dbg !3347
  ret i64 %11, !dbg !3347
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.eprintfn(ptr %0, ptr %1, i64 %2, ptr %3, i64 %4) #0 comdat !dbg !3348 {
entry:
  %format = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %formatter = alloca %Formatter, align 8
  %stream = alloca %any, align 8
  %len = alloca i64, align 8
  %len.f = alloca i64, align 8
  %retparam = alloca i64, align 8
  %error_var = alloca i64, align 8
  %error_var9 = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %format, align 8
  %ptradd = getelementptr inbounds i8, ptr %format, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %format, !3349, !DIExpression(), !3350)
  store ptr %3, ptr %args, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %args, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %args, !3351, !DIExpression(), !3352)
    #dbg_declare(ptr %formatter, !3353, !DIExpression(), !3354)
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !3354
    #dbg_declare(ptr %stream, !3355, !DIExpression(), !3356)
  %5 = call ptr @std.io.stderr(), !dbg !3357
  %6 = insertvalue %any undef, ptr %5, 0, !dbg !3357
  %7 = insertvalue %any %6, i64 ptrtoint (ptr @"$ct.std.io.File" to i64), 1, !dbg !3357
  store %any %7, ptr %stream, align 8, !dbg !3357
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putstream_fn, ptr %stream), !dbg !3358
    #dbg_declare(ptr %len, !3359, !DIExpression(), !3360)
  %lo = load ptr, ptr %format, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %format, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load ptr, ptr %args, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %args, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  %8 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr %lo, i64 %hi, ptr %lo3, i64 %hi5), !dbg !3361
  %not_err = icmp eq i64 %8, 0, !dbg !3361
  %9 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3361
  br i1 %9, label %after_check, label %assign_optional, !dbg !3361

assign_optional:                                  ; preds = %entry
  store i64 %8, ptr %len.f, align 8, !dbg !3361
  br label %after_assign, !dbg !3361

after_check:                                      ; preds = %entry
  %10 = load i64, ptr %retparam, align 8, !dbg !3361
  store i64 %10, ptr %len, align 8, !dbg !3361
  store i64 0, ptr %len.f, align 8, !dbg !3361
  br label %after_assign, !dbg !3361

after_assign:                                     ; preds = %after_check, %assign_optional
  %11 = call ptr @std.io.stderr(), !dbg !3362
  %12 = call i64 @std.io.File.write_byte(ptr %11, i8 zeroext 10), !dbg !3362
  %not_err6 = icmp eq i64 %12, 0, !dbg !3362
  %13 = call i1 @llvm.expect.i1(i1 %not_err6, i1 true), !dbg !3362
  br i1 %13, label %after_check8, label %assign_optional7, !dbg !3362

assign_optional7:                                 ; preds = %after_assign
  store i64 %12, ptr %error_var, align 8, !dbg !3362
  br label %guard_block, !dbg !3362

after_check8:                                     ; preds = %after_assign
  br label %noerr_block, !dbg !3362

guard_block:                                      ; preds = %assign_optional7
  %14 = load i64, ptr %error_var, align 8, !dbg !3362
  ret i64 %14, !dbg !3362

noerr_block:                                      ; preds = %after_check8
  %15 = call ptr @std.io.stderr(), !dbg !3363
  %16 = call i64 @std.io.File.flush(ptr %15), !dbg !3363
  %not_err10 = icmp eq i64 %16, 0, !dbg !3363
  %17 = call i1 @llvm.expect.i1(i1 %not_err10, i1 true), !dbg !3363
  br i1 %17, label %after_check12, label %assign_optional11, !dbg !3363

assign_optional11:                                ; preds = %noerr_block
  store i64 %16, ptr %error_var9, align 8, !dbg !3363
  br label %guard_block13, !dbg !3363

after_check12:                                    ; preds = %noerr_block
  br label %noerr_block14, !dbg !3363

guard_block13:                                    ; preds = %assign_optional11
  %18 = load i64, ptr %error_var9, align 8, !dbg !3363
  ret i64 %18, !dbg !3363

noerr_block14:                                    ; preds = %after_check12
  %optval = load i64, ptr %len.f, align 8, !dbg !3364
  %not_err15 = icmp eq i64 %optval, 0, !dbg !3364
  %19 = call i1 @llvm.expect.i1(i1 %not_err15, i1 true), !dbg !3364
  br i1 %19, label %after_check17, label %assign_optional16, !dbg !3364

assign_optional16:                                ; preds = %noerr_block14
  store i64 %optval, ptr %reterr, align 8, !dbg !3364
  br label %err_retblock, !dbg !3364

after_check17:                                    ; preds = %noerr_block14
  %20 = load i64, ptr %len, align 8, !dbg !3364
  %add = add i64 %20, 1, !dbg !3364
  store i64 %add, ptr %0, align 8, !dbg !3364
  ret i64 0, !dbg !3364

err_retblock:                                     ; preds = %assign_optional16
  %21 = load i64, ptr %reterr, align 8, !dbg !3364
  ret i64 %21, !dbg !3364
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.bprintf(ptr %0, ptr %1, i64 %2, ptr %3, i64 %4, ptr byval(%"any[]") align 8 %5) #0 comdat !dbg !3365 {
entry:
  %buffer = alloca %"char[]", align 8
  %format = alloca %"char[]", align 8
  %formatter = alloca %Formatter, align 8
  %data = alloca %BufferData, align 8
  %size = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  store ptr %1, ptr %buffer, align 8
  %ptradd = getelementptr inbounds i8, ptr %buffer, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %buffer, !3368, !DIExpression(), !3369)
  store ptr %3, ptr %format, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %format, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %format, !3370, !DIExpression(), !3371)
    #dbg_declare(ptr %5, !3372, !DIExpression(), !3373)
    #dbg_declare(ptr %formatter, !3374, !DIExpression(), !3375)
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !3375
    #dbg_declare(ptr %data, !3376, !DIExpression(), !3381)
  call void @llvm.memset.p0.i64(ptr align 8 %data, i8 0, i64 24, i1 false), !dbg !3381
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %data, ptr align 8 %buffer, i32 16, i1 false), !dbg !3382
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_buffer_fn, ptr %data), !dbg !3383
    #dbg_declare(ptr %size, !3384, !DIExpression(), !3385)
  %lo = load ptr, ptr %format, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %format, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load ptr, ptr %5, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %5, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  %6 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr %lo, i64 %hi, ptr %lo3, i64 %hi5), !dbg !3386
  %not_err = icmp eq i64 %6, 0, !dbg !3386
  %7 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3386
  br i1 %7, label %after_check, label %assign_optional, !dbg !3386

assign_optional:                                  ; preds = %entry
  store i64 %6, ptr %error_var, align 8, !dbg !3386
  br label %guard_block, !dbg !3386

after_check:                                      ; preds = %entry
  br label %noerr_block, !dbg !3386

guard_block:                                      ; preds = %assign_optional
  %8 = load i64, ptr %error_var, align 8, !dbg !3386
  ret i64 %8, !dbg !3386

noerr_block:                                      ; preds = %after_check
  %9 = load i64, ptr %retparam, align 8, !dbg !3386
  store i64 %9, ptr %size, align 8, !dbg !3386
  %10 = load %"char[]", ptr %buffer, align 8, !dbg !3387
  %11 = extractvalue %"char[]" %10, 0, !dbg !3387
  %12 = extractvalue %"char[]" %10, 1, !dbg !3388
  %gt = icmp ugt i64 0, %12, !dbg !3388
  %13 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3388
  br i1 %13, label %panic, label %checkok, !dbg !3388

checkok:                                          ; preds = %noerr_block
  %ptradd8 = getelementptr inbounds i8, ptr %data, i64 16, !dbg !3389
  %14 = load i64, ptr %ptradd8, align 8, !dbg !3389
  %add = add i64 0, %14, !dbg !3389
  %lt = icmp ult i64 %12, %add, !dbg !3389
  %sub = sub i64 %add, 1, !dbg !3389
  %15 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !3389
  br i1 %15, label %panic9, label %checkok16, !dbg !3389

checkok16:                                        ; preds = %checkok
  %size17 = sub i64 %add, 0, !dbg !3387
  %16 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !3387
  %17 = insertvalue %"char[]" %16, i64 %size17, 1, !dbg !3387
  store %"char[]" %17, ptr %0, align 8, !dbg !3387
  ret i64 0, !dbg !3387

panic:                                            ; preds = %noerr_block
  store i64 %12, ptr %taddr, align 8
  %18 = insertvalue %any undef, ptr %taddr, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr6, align 8
  %20 = insertvalue %any undef, ptr %taddr6, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %19, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %21, ptr %ptradd7, align 16
  %22 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %22, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.208, i64 5, ptr @.func.212, i64 7, i32 326, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3387
  unreachable, !dbg !3387

panic9:                                           ; preds = %checkok
  store i64 %sub, ptr %taddr10, align 8
  %23 = insertvalue %any undef, ptr %taddr10, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr11, align 8
  %25 = insertvalue %any undef, ptr %taddr11, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %24, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %26, ptr %ptradd13, align 16
  %27 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %27, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 60, ptr @.file.208, i64 5, ptr @.func.212, i64 7, i32 326, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !3387
  unreachable, !dbg !3387
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.out_buffer_fn(ptr %0, i8 zeroext %1) #0 !dbg !3390 {
entry:
  %data = alloca ptr, align 8
  %c = alloca i8, align 1
  %buffer_data = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  store ptr %0, ptr %data, align 8
    #dbg_declare(ptr %data, !3391, !DIExpression(), !3392)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !3393, !DIExpression(), !3394)
    #dbg_declare(ptr %buffer_data, !3395, !DIExpression(), !3397)
  %2 = load ptr, ptr %data, align 8, !dbg !3398
  store ptr %2, ptr %buffer_data, align 8, !dbg !3398
  %3 = load ptr, ptr %buffer_data, align 8, !dbg !3399
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !3399
  %4 = load i64, ptr %ptradd, align 8, !dbg !3399
  %5 = load ptr, ptr %buffer_data, align 8, !dbg !3400
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !3400
  %6 = load i64, ptr %ptradd1, align 8, !dbg !3400
  %ge = icmp uge i64 %4, %6, !dbg !3399
  br i1 %ge, label %if.then, label %if.exit, !dbg !3399

if.then:                                          ; preds = %entry
  ret i64 ptrtoint (ptr @"std.io.PrintFault$BUFFER_EXCEEDED" to i64), !dbg !3401

if.exit:                                          ; preds = %entry
  %7 = load ptr, ptr %buffer_data, align 8, !dbg !3402
  %ptradd2 = getelementptr inbounds i8, ptr %7, i64 8, !dbg !3402
  %8 = load i64, ptr %ptradd2, align 8, !dbg !3402
  %9 = load ptr, ptr %7, align 8, !dbg !3402
  %10 = load ptr, ptr %buffer_data, align 8, !dbg !3403
  %ptradd3 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !3403
  %11 = load i64, ptr %ptradd3, align 8, !dbg !3403
  %add = add i64 %11, 1, !dbg !3403
  store i64 %add, ptr %ptradd3, align 8, !dbg !3403
  %ge4 = icmp uge i64 %11, %8, !dbg !3403
  %12 = call i1 @llvm.expect.i1(i1 %ge4, i1 false), !dbg !3403
  br i1 %12, label %panic, label %checkok, !dbg !3403

checkok:                                          ; preds = %if.exit
  %ptradd7 = getelementptr inbounds i8, ptr %9, i64 %11, !dbg !3403
  %13 = load i8, ptr %c, align 1, !dbg !3404
  store i8 %13, ptr %ptradd7, align 1, !dbg !3404
  ret i64 0, !dbg !3404

panic:                                            ; preds = %if.exit
  store i64 %8, ptr %taddr, align 8
  %14 = insertvalue %any undef, ptr %taddr, 0
  %15 = insertvalue %any %14, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %11, ptr %taddr5, align 8
  %16 = insertvalue %any undef, ptr %taddr5, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %15, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %17, ptr %ptradd6, align 16
  %18 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %18, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.208, i64 5, ptr @.func.213, i64 13, i32 334, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3403
  unreachable, !dbg !3403
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.io.putchar(i8 zeroext %0) #0 comdat !dbg !3405 {
entry:
  %c = alloca i8, align 1
  store i8 %0, ptr %c, align 1
    #dbg_declare(ptr %c, !3408, !DIExpression(), !3409)
  %1 = load i8, ptr %c, align 1, !dbg !3410
  %zext = zext i8 %1 to i32, !dbg !3410
  %2 = call i32 @putchar(i32 %zext), !dbg !3411
  ret void, !dbg !3411
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.stdout() #0 comdat !dbg !3412 {
entry:
  %result = alloca %File, align 8
  %0 = load ptr, ptr @stdout.file, align 8, !dbg !3416
  %i2nb = icmp eq ptr %0, null, !dbg !3416
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !3416

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr @stdout, align 8, !dbg !3417
  %2 = call ptr @std.io.file.from_handle(ptr %1), !dbg !3421
  store ptr %2, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 @stdout.file, ptr align 8 %result, i32 8, i1 false)
  br label %if.exit

if.exit:                                          ; preds = %if.then, %entry
  ret ptr @stdout.file, !dbg !3422
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.stderr() #0 comdat !dbg !3423 {
entry:
  %result = alloca %File, align 8
  %0 = load ptr, ptr @stderr.file, align 8, !dbg !3424
  %i2nb = icmp eq ptr %0, null, !dbg !3424
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !3424

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr @stderr, align 8, !dbg !3425
  %2 = call ptr @std.io.file.from_handle(ptr %1), !dbg !3428
  store ptr %2, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 @stderr.file, ptr align 8 %result, i32 8, i1 false)
  br label %if.exit

if.exit:                                          ; preds = %if.then, %entry
  ret ptr @stderr.file, !dbg !3429
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.stdin() #0 comdat !dbg !3430 {
entry:
  %result = alloca %File, align 8
  %0 = load ptr, ptr @stdin.file, align 8, !dbg !3431
  %i2nb = icmp eq ptr %0, null, !dbg !3431
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !3431

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr @stdin, align 8, !dbg !3432
  %2 = call ptr @std.io.file.from_handle(ptr %1), !dbg !3435
  store ptr %2, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 @stdin.file, ptr align 8 %result, i32 8, i1 false)
  br label %if.exit

if.exit:                                          ; preds = %if.then, %entry
  ret ptr @stdin.file, !dbg !3436
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.adjust(ptr %0, ptr %1, i64 %2) #0 !dbg !3437 {
entry:
  %self = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr = alloca i64, align 8
  %reterr1 = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !3440
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3440
  br i1 %4, label %panic, label %checkok, !dbg !3440

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3441, !DIExpression(), !3442)
  store i64 %2, ptr %len, align 8
    #dbg_declare(ptr %len, !3443, !DIExpression(), !3444)
  %5 = load ptr, ptr %self, align 8, !dbg !3445
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !3445
  %6 = load i32, ptr %ptradd, align 8, !dbg !3445
  %lshrl = lshr i32 %6, 1, !dbg !3445
  %7 = and i32 1, %lshrl, !dbg !3445
  %trunc = trunc i32 %7 to i8, !dbg !3445
  %8 = trunc i8 %trunc to i1, !dbg !3445
  %not = xor i1 %8, true, !dbg !3445
  br i1 %not, label %if.then, label %if.exit, !dbg !3445

if.then:                                          ; preds = %checkok
  store i64 0, ptr %0, align 8, !dbg !3446
  ret i64 0, !dbg !3446

if.exit:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !3447
  %ptradd2 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !3447
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd2, i64 4, !dbg !3447
  %10 = load i32, ptr %ptradd3, align 4, !dbg !3447
  %zext = zext i32 %10 to i64, !dbg !3447
  %11 = load i64, ptr %len, align 8, !dbg !3448
  %12 = load ptr, ptr %self, align 8
  %13 = call i64 @std.io.Formatter.pad(ptr %retparam, ptr %12, i8 zeroext 32, i64 %zext, i64 %11) #6, !dbg !3449
  %not_err = icmp eq i64 %13, 0, !dbg !3449
  %14 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3449
  br i1 %14, label %after_check, label %assign_optional, !dbg !3449

assign_optional:                                  ; preds = %if.exit
  store i64 %13, ptr %reterr1, align 8, !dbg !3449
  br label %err_retblock, !dbg !3449

after_check:                                      ; preds = %if.exit
  %15 = load i64, ptr %retparam, align 8, !dbg !3449
  store i64 %15, ptr %0, align 8, !dbg !3449
  ret i64 0, !dbg !3449

err_retblock:                                     ; preds = %assign_optional
  %16 = load i64, ptr %reterr1, align 8, !dbg !3449
  ret i64 %16, !dbg !3449

panic:                                            ; preds = %entry
  %17 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3442
  call void %17(ptr @.panic_msg, i64 62, ptr @.file.215, i64 20, ptr @.func.232, i64 6, i32 35) #5, !dbg !3442
  unreachable, !dbg !3442
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.out_substr(ptr %0, ptr %1, ptr %2, i64 %3) #0 !dbg !3450 {
entry:
  %self = alloca ptr, align 8
  %str = alloca %"char[]", align 8
  %l = alloca i64, align 8
  %prec = alloca i32, align 4
  %index = alloca i64, align 8
  %chars = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !3451
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !3451
  br i1 %5, label %panic, label %checkok, !dbg !3451

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3452, !DIExpression(), !3453)
  store ptr %2, ptr %str, align 8
  %ptradd = getelementptr inbounds i8, ptr %str, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %str, !3454, !DIExpression(), !3455)
    #dbg_declare(ptr %l, !3456, !DIExpression(), !3457)
  %lo = load ptr, ptr %str, align 8, !dbg !3458
  %ptradd1 = getelementptr inbounds i8, ptr %str, i64 8, !dbg !3458
  %hi = load i64, ptr %ptradd1, align 8, !dbg !3458
  %6 = call i64 @std.core.string.conv.utf8_codepoints(ptr %lo, i64 %hi), !dbg !3459
  store i64 %6, ptr %l, align 8, !dbg !3459
    #dbg_declare(ptr %prec, !3460, !DIExpression(), !3461)
  %7 = load ptr, ptr %self, align 8, !dbg !3462
  %ptradd2 = getelementptr inbounds i8, ptr %7, i64 16, !dbg !3462
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd2, i64 8, !dbg !3462
  %8 = load i32, ptr %ptradd3, align 8, !dbg !3462
  store i32 %8, ptr %prec, align 4, !dbg !3462
  %9 = load ptr, ptr %self, align 8, !dbg !3463
  %ptradd4 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !3463
  %10 = load i32, ptr %ptradd4, align 8, !dbg !3463
  %lshrl = lshr i32 %10, 6, !dbg !3463
  %11 = and i32 1, %lshrl, !dbg !3463
  %trunc = trunc i32 %11 to i8, !dbg !3463
  %12 = trunc i8 %trunc to i1, !dbg !3463
  br i1 %12, label %and.rhs, label %and.phi, !dbg !3463

and.rhs:                                          ; preds = %checkok
  %13 = load i64, ptr %l, align 8, !dbg !3464
  %14 = load i32, ptr %prec, align 4, !dbg !3465
  %zext = zext i32 %14 to i64, !dbg !3465
  %lt = icmp ult i64 %13, %zext, !dbg !3464
  br label %and.phi, !dbg !3464

and.phi:                                          ; preds = %and.rhs, %checkok
  %val = phi i1 [ false, %checkok ], [ %lt, %and.rhs ], !dbg !3464
  br i1 %val, label %if.then, label %if.exit, !dbg !3464

if.then:                                          ; preds = %and.phi
  %15 = load i32, ptr %prec, align 4, !dbg !3466
  %zext5 = zext i32 %15 to i64, !dbg !3466
  store i64 %zext5, ptr %l, align 8, !dbg !3466
  br label %if.exit, !dbg !3466

if.exit:                                          ; preds = %if.then, %and.phi
    #dbg_declare(ptr %index, !3467, !DIExpression(), !3468)
  store i64 0, ptr %index, align 8, !dbg !3469
    #dbg_declare(ptr %chars, !3470, !DIExpression(), !3471)
  %ptradd6 = getelementptr inbounds i8, ptr %str, i64 8, !dbg !3472
  %16 = load i64, ptr %ptradd6, align 8, !dbg !3472
  store i64 %16, ptr %chars, align 8, !dbg !3472
    #dbg_declare(ptr %ptr, !3473, !DIExpression(), !3474)
  %17 = load ptr, ptr %str, align 8, !dbg !3475
  store ptr %17, ptr %ptr, align 8, !dbg !3475
  br label %loop.cond, !dbg !3476

loop.cond:                                        ; preds = %noerr_block, %if.exit
  %18 = load i64, ptr %index, align 8, !dbg !3477
  %19 = load i64, ptr %chars, align 8, !dbg !3479
  %lt7 = icmp ult i64 %18, %19, !dbg !3477
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !3477

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !3480, !DIExpression(), !3482)
  %20 = load ptr, ptr %ptr, align 8, !dbg !3483
  %21 = load i64, ptr %index, align 8, !dbg !3484
  %ptradd8 = getelementptr inbounds i8, ptr %20, i64 %21, !dbg !3484
  %22 = load i8, ptr %ptradd8, align 1, !dbg !3484
  store i8 %22, ptr %c, align 1, !dbg !3484
  %23 = load i8, ptr %c, align 1, !dbg !3485
  %zext9 = zext i8 %23 to i32, !dbg !3485
  %and = and i32 %zext9, 192, !dbg !3485
  %neq = icmp ne i32 %and, 128, !dbg !3485
  br i1 %neq, label %and.rhs10, label %and.phi14, !dbg !3485

and.rhs10:                                        ; preds = %loop.body
  %24 = load ptr, ptr %self, align 8, !dbg !3486
  %ptradd11 = getelementptr inbounds i8, ptr %24, i64 16, !dbg !3486
  %25 = load i32, ptr %ptradd11, align 8, !dbg !3486
  %lshrl12 = lshr i32 %25, 6, !dbg !3486
  %26 = and i32 1, %lshrl12, !dbg !3486
  %trunc13 = trunc i32 %26 to i8, !dbg !3486
  %27 = trunc i8 %trunc13 to i1, !dbg !3486
  br label %and.phi14, !dbg !3486

and.phi14:                                        ; preds = %and.rhs10, %loop.body
  %val15 = phi i1 [ false, %loop.body ], [ %27, %and.rhs10 ], !dbg !3486
  br i1 %val15, label %and.rhs16, label %and.phi17, !dbg !3486

and.rhs16:                                        ; preds = %and.phi14
  %28 = load i32, ptr %prec, align 4, !dbg !3487
  %sub = sub i32 %28, 1, !dbg !3487
  store i32 %sub, ptr %prec, align 4, !dbg !3487
  %i2nb = icmp eq i32 %28, 0, !dbg !3487
  br label %and.phi17, !dbg !3487

and.phi17:                                        ; preds = %and.rhs16, %and.phi14
  %val18 = phi i1 [ false, %and.phi14 ], [ %i2nb, %and.rhs16 ], !dbg !3487
  br i1 %val18, label %if.then19, label %if.exit20, !dbg !3487

if.then19:                                        ; preds = %and.phi17
  br label %loop.exit, !dbg !3488

if.exit20:                                        ; preds = %and.phi17
  %29 = load ptr, ptr %self, align 8
  %30 = load i8, ptr %c, align 1
  %31 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %29, i8 zeroext %30), !dbg !3489
  %not_err = icmp eq i64 %31, 0, !dbg !3489
  %32 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3489
  br i1 %32, label %after_check, label %assign_optional, !dbg !3489

assign_optional:                                  ; preds = %if.exit20
  store i64 %31, ptr %error_var, align 8, !dbg !3489
  br label %guard_block, !dbg !3489

after_check:                                      ; preds = %if.exit20
  br label %noerr_block, !dbg !3489

guard_block:                                      ; preds = %assign_optional
  %33 = load i64, ptr %error_var, align 8, !dbg !3489
  ret i64 %33, !dbg !3489

noerr_block:                                      ; preds = %after_check
  %34 = load i64, ptr %index, align 8, !dbg !3490
  %add = add i64 %34, 1, !dbg !3490
  store i64 %add, ptr %index, align 8, !dbg !3490
  br label %loop.cond, !dbg !3490

loop.exit:                                        ; preds = %if.then19, %loop.cond
  %35 = load i64, ptr %index, align 8, !dbg !3491
  store i64 %35, ptr %0, align 8, !dbg !3491
  ret i64 0, !dbg !3491

panic:                                            ; preds = %entry
  %36 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3453
  call void %36(ptr @.panic_msg, i64 62, ptr @.file.215, i64 20, ptr @.func.233, i64 10, i32 161) #5, !dbg !3453
  unreachable, !dbg !3453
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Formatter.pad(ptr %0, ptr %1, i8 zeroext %2, i64 %3, i64 %4) #0 comdat !dbg !3492 {
entry:
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %width = alloca i64, align 8
  %len = alloca i64, align 8
  %delta = alloca i64, align 8
  %i = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %x = alloca i32, align 4
  %.anon = alloca i64, align 8
  %a = alloca i32, align 4
  %b = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !3495
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !3495
  br i1 %6, label %panic, label %checkok, !dbg !3495

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3496, !DIExpression(), !3497)
  store i8 %2, ptr %c, align 1
    #dbg_declare(ptr %c, !3498, !DIExpression(), !3499)
  store i64 %3, ptr %width, align 8
    #dbg_declare(ptr %width, !3500, !DIExpression(), !3501)
  store i64 %4, ptr %len, align 8
    #dbg_declare(ptr %len, !3502, !DIExpression(), !3503)
    #dbg_declare(ptr %delta, !3504, !DIExpression(), !3505)
  %7 = load i64, ptr %width, align 8, !dbg !3506
  %8 = load i64, ptr %len, align 8, !dbg !3507
  %sub = sub i64 %7, %8, !dbg !3506
  store i64 %sub, ptr %delta, align 8, !dbg !3506
    #dbg_declare(ptr %i, !3508, !DIExpression(), !3510)
  store i64 0, ptr %i, align 8, !dbg !3511
  br label %loop.cond, !dbg !3511

loop.cond:                                        ; preds = %noerr_block, %checkok
  %9 = load i64, ptr %i, align 8, !dbg !3512
  %10 = load i64, ptr %delta, align 8, !dbg !3513
  %lt = icmp slt i64 %9, %10, !dbg !3512
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !3512

loop.body:                                        ; preds = %loop.cond
  %11 = load ptr, ptr %self, align 8
  %12 = load i8, ptr %c, align 1
  %13 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %11, i8 zeroext %12), !dbg !3514
  %not_err = icmp eq i64 %13, 0, !dbg !3514
  %14 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3514
  br i1 %14, label %after_check, label %assign_optional, !dbg !3514

assign_optional:                                  ; preds = %loop.body
  store i64 %13, ptr %error_var, align 8, !dbg !3514
  br label %guard_block, !dbg !3514

after_check:                                      ; preds = %loop.body
  br label %noerr_block, !dbg !3514

guard_block:                                      ; preds = %assign_optional
  %15 = load i64, ptr %error_var, align 8, !dbg !3514
  ret i64 %15, !dbg !3514

noerr_block:                                      ; preds = %after_check
  %16 = load i64, ptr %i, align 8, !dbg !3515
  %add = add i64 %16, 1, !dbg !3515
  store i64 %add, ptr %i, align 8, !dbg !3515
  br label %loop.cond, !dbg !3515

loop.exit:                                        ; preds = %loop.cond
  store i32 0, ptr %x, align 4
  %17 = load i64, ptr %delta, align 8
  store i64 %17, ptr %.anon, align 8
  %18 = load i32, ptr %x, align 4
  store i32 %18, ptr %a, align 4
  %19 = load i64, ptr %.anon, align 8
  store i64 %19, ptr %b, align 8
  %20 = load i32, ptr %a, align 4, !dbg !3516
  %sext = sext i32 %20 to i64, !dbg !3516
  %21 = load i64, ptr %b, align 8, !dbg !3521
  %gt = icmp sgt i64 %sext, %21, !dbg !3516
  br i1 %gt, label %cond.lhs, label %cond.rhs, !dbg !3516

cond.lhs:                                         ; preds = %loop.exit
  %22 = load i32, ptr %x, align 4, !dbg !3522
  %sext1 = sext i32 %22 to i64, !dbg !3522
  br label %cond.phi, !dbg !3522

cond.rhs:                                         ; preds = %loop.exit
  %23 = load i64, ptr %.anon, align 8, !dbg !3523
  br label %cond.phi, !dbg !3523

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %sext1, %cond.lhs ], [ %23, %cond.rhs ], !dbg !3523
  store i64 %val, ptr %0, align 8, !dbg !3523
  ret i64 0, !dbg !3523

panic:                                            ; preds = %entry
  %24 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3497
  call void %24(ptr @.panic_msg, i64 62, ptr @.file.215, i64 20, ptr @.func.234, i64 3, i32 180) #5, !dbg !3497
  unreachable, !dbg !3497
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Formatter.out_chars(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !3524 {
entry:
  %self = alloca ptr, align 8
  %s = alloca %"char[]", align 8
  %.anon = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !3527
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !3527
  br i1 %5, label %panic, label %checkok, !dbg !3527

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3528, !DIExpression(), !3529)
  store ptr %2, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !3530, !DIExpression(), !3531)
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !3532
  %6 = load i64, ptr %ptradd1, align 8, !dbg !3532
    #dbg_declare(ptr %.anon, !3534, !DIExpression(), !3532)
  store i64 0, ptr %.anon, align 8, !dbg !3532
  br label %loop.cond, !dbg !3532

loop.cond:                                        ; preds = %noerr_block, %checkok
  %7 = load i64, ptr %.anon, align 8, !dbg !3532
  %lt = icmp ult i64 %7, %6, !dbg !3532
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !3532

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !3535, !DIExpression(), !3537)
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !3538
  %8 = load i64, ptr %ptradd2, align 8, !dbg !3538
  %9 = load ptr, ptr %s, align 8, !dbg !3538
  %10 = load i64, ptr %.anon, align 8, !dbg !3538
  %ge = icmp uge i64 %10, %8, !dbg !3538
  %11 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !3538
  br i1 %11, label %panic3, label %checkok6, !dbg !3538

checkok6:                                         ; preds = %loop.body
  %ptradd7 = getelementptr inbounds i8, ptr %9, i64 %10, !dbg !3538
  %12 = load i8, ptr %ptradd7, align 1, !dbg !3538
  store i8 %12, ptr %c, align 1, !dbg !3538
  %13 = load ptr, ptr %self, align 8
  %14 = load i8, ptr %c, align 1
  %15 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %13, i8 zeroext %14), !dbg !3539
  %not_err = icmp eq i64 %15, 0, !dbg !3539
  %16 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3539
  br i1 %16, label %after_check, label %assign_optional, !dbg !3539

assign_optional:                                  ; preds = %checkok6
  store i64 %15, ptr %error_var, align 8, !dbg !3539
  br label %guard_block, !dbg !3539

after_check:                                      ; preds = %checkok6
  br label %noerr_block, !dbg !3539

guard_block:                                      ; preds = %assign_optional
  %17 = load i64, ptr %error_var, align 8, !dbg !3539
  ret i64 %17, !dbg !3539

noerr_block:                                      ; preds = %after_check
  %18 = load i64, ptr %.anon, align 8, !dbg !3532
  %addnuw = add nuw i64 %18, 1, !dbg !3532
  store i64 %addnuw, ptr %.anon, align 8, !dbg !3532
  br label %loop.cond, !dbg !3532

loop.exit:                                        ; preds = %loop.cond
  %ptradd8 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !3540
  %19 = load i64, ptr %ptradd8, align 8, !dbg !3540
  store i64 %19, ptr %0, align 8, !dbg !3540
  ret i64 0, !dbg !3540

panic:                                            ; preds = %entry
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3529
  call void %20(ptr @.panic_msg, i64 62, ptr @.file.215, i64 20, ptr @.func.235, i64 9, i32 194) #5, !dbg !3529
  unreachable, !dbg !3529

panic3:                                           ; preds = %loop.body
  store i64 %8, ptr %taddr, align 8
  %21 = insertvalue %any undef, ptr %taddr, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr4, align 8
  %23 = insertvalue %any undef, ptr %taddr4, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %22, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %24, ptr %ptradd5, align 16
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.215, i64 20, ptr @.func.235, i64 9, i32 196, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3538
  unreachable, !dbg !3538
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Formatter.etoa(ptr %0, ptr %1, double %2) #0 comdat !dbg !3541 {
entry:
  %self = alloca ptr, align 8
  %y = alloca double, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !3545
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3545
  br i1 %4, label %panic, label %checkok, !dbg !3545

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3546, !DIExpression(), !3547)
  store double %2, ptr %y, align 8
    #dbg_declare(ptr %y, !3548, !DIExpression(), !3549)
  %5 = load ptr, ptr %self, align 8
  %6 = load double, ptr %y, align 8
  %7 = call i64 @std.io.Formatter.floatformat(ptr %retparam, ptr %5, i32 1, double %6), !dbg !3545
  %not_err = icmp eq i64 %7, 0, !dbg !3545
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3545
  br i1 %8, label %after_check, label %assign_optional, !dbg !3545

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %reterr, align 8, !dbg !3545
  br label %err_retblock, !dbg !3545

after_check:                                      ; preds = %checkok
  %9 = load i64, ptr %retparam, align 8, !dbg !3545
  store i64 %9, ptr %0, align 8, !dbg !3545
  ret i64 0, !dbg !3545

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !3545
  ret i64 %10, !dbg !3545

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3547
  call void %11(ptr @.panic_msg, i64 62, ptr @.file.215, i64 20, ptr @.func.236, i64 4, i32 208) #5, !dbg !3547
  unreachable, !dbg !3547
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Formatter.ftoa(ptr %0, ptr %1, double %2) #0 comdat !dbg !3550 {
entry:
  %self = alloca ptr, align 8
  %y = alloca double, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !3551
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3551
  br i1 %4, label %panic, label %checkok, !dbg !3551

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3552, !DIExpression(), !3553)
  store double %2, ptr %y, align 8
    #dbg_declare(ptr %y, !3554, !DIExpression(), !3555)
  %5 = load ptr, ptr %self, align 8
  %6 = load double, ptr %y, align 8
  %7 = call i64 @std.io.Formatter.floatformat(ptr %retparam, ptr %5, i32 0, double %6), !dbg !3551
  %not_err = icmp eq i64 %7, 0, !dbg !3551
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3551
  br i1 %8, label %after_check, label %assign_optional, !dbg !3551

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %reterr, align 8, !dbg !3551
  br label %err_retblock, !dbg !3551

after_check:                                      ; preds = %checkok
  %9 = load i64, ptr %retparam, align 8, !dbg !3551
  store i64 %9, ptr %0, align 8, !dbg !3551
  ret i64 0, !dbg !3551

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !3551
  ret i64 %10, !dbg !3551

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3553
  call void %11(ptr @.panic_msg, i64 62, ptr @.file.215, i64 20, ptr @.func.237, i64 4, i32 209) #5, !dbg !3553
  unreachable, !dbg !3553
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Formatter.gtoa(ptr %0, ptr %1, double %2) #0 comdat !dbg !3556 {
entry:
  %self = alloca ptr, align 8
  %y = alloca double, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !3557
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3557
  br i1 %4, label %panic, label %checkok, !dbg !3557

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3558, !DIExpression(), !3559)
  store double %2, ptr %y, align 8
    #dbg_declare(ptr %y, !3560, !DIExpression(), !3561)
  %5 = load ptr, ptr %self, align 8
  %6 = load double, ptr %y, align 8
  %7 = call i64 @std.io.Formatter.floatformat(ptr %retparam, ptr %5, i32 2, double %6), !dbg !3557
  %not_err = icmp eq i64 %7, 0, !dbg !3557
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3557
  br i1 %8, label %after_check, label %assign_optional, !dbg !3557

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %reterr, align 8, !dbg !3557
  br label %err_retblock, !dbg !3557

after_check:                                      ; preds = %checkok
  %9 = load i64, ptr %retparam, align 8, !dbg !3557
  store i64 %9, ptr %0, align 8, !dbg !3557
  ret i64 0, !dbg !3557

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !3557
  ret i64 %10, !dbg !3557

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3559
  call void %11(ptr @.panic_msg, i64 62, ptr @.file.215, i64 20, ptr @.func.238, i64 4, i32 210) #5, !dbg !3559
  unreachable, !dbg !3559
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Formatter.atoa(ptr %0, ptr %1, double %2) #0 comdat !dbg !3562 {
entry:
  %self = alloca ptr, align 8
  %y = alloca double, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !3563
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3563
  br i1 %4, label %panic, label %checkok, !dbg !3563

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3564, !DIExpression(), !3565)
  store double %2, ptr %y, align 8
    #dbg_declare(ptr %y, !3566, !DIExpression(), !3567)
  %5 = load ptr, ptr %self, align 8
  %6 = load double, ptr %y, align 8
  %7 = call i64 @std.io.Formatter.floatformat(ptr %retparam, ptr %5, i32 3, double %6), !dbg !3563
  %not_err = icmp eq i64 %7, 0, !dbg !3563
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3563
  br i1 %8, label %after_check, label %assign_optional, !dbg !3563

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %reterr, align 8, !dbg !3563
  br label %err_retblock, !dbg !3563

after_check:                                      ; preds = %checkok
  %9 = load i64, ptr %retparam, align 8, !dbg !3563
  store i64 %9, ptr %0, align 8, !dbg !3563
  ret i64 0, !dbg !3563

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !3563
  ret i64 %10, !dbg !3563

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3565
  call void %11(ptr @.panic_msg, i64 62, ptr @.file.215, i64 20, ptr @.func.239, i64 4, i32 211) #5, !dbg !3565
  unreachable, !dbg !3565
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.floatformat(ptr %0, ptr %1, i32 %2, double %3) #0 !dbg !3568 {
entry:
  %self = alloca ptr, align 8
  %formatting = alloca i32, align 4
  %y = alloca double, align 8
  %big = alloca [126 x i32], align 16
  %is_neg = alloca i8, align 1
  %x = alloca double, align 8
  %expr = alloca double, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %pl = alloca i64, align 8
  %x8 = alloca double, align 8
  %expr9 = alloca double, align 8
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %len = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %s = alloca %"char[]", align 8
  %x35 = alloca double, align 8
  %expr36 = alloca double, align 8
  %taddr41 = alloca i64, align 8
  %taddr42 = alloca i64, align 8
  %varargslots43 = alloca [2 x %any], align 16
  %indirectarg46 = alloca %"any[]", align 8
  %error_var57 = alloca i64, align 8
  %retparam59 = alloca i64, align 8
  %error_var67 = alloca i64, align 8
  %retparam68 = alloca i64, align 8
  %error_var80 = alloca i64, align 8
  %retparam85 = alloca i64, align 8
  %reterr = alloca i64, align 8
  %e2 = alloca i32, align 4
  %x94 = alloca double, align 8
  %e = alloca ptr, align 8
  %ebuf0 = alloca [12 x i8], align 1
  %ebuf = alloca ptr, align 8
  %buf_array = alloca [22 x i8], align 16
  %buf = alloca ptr, align 8
  %p = alloca i64, align 8
  %round = alloca double, align 8
  %re = alloca i32, align 4
  %estr = alloca ptr, align 8
  %taddr140 = alloca i128, align 16
  %s165 = alloca ptr, align 8
  %xdigits = alloca ptr, align 8
  %x173 = alloca i32, align 4
  %outlen = alloca i64, align 8
  %explen = alloca i64, align 8
  %len209 = alloca i64, align 8
  %l = alloca i64, align 8
  %error_var234 = alloca i64, align 8
  %retparam239 = alloca i64, align 8
  %error_var254 = alloca i64, align 8
  %retparam256 = alloca i64, align 8
  %error_var264 = alloca i64, align 8
  %retparam269 = alloca i64, align 8
  %error_var279 = alloca i64, align 8
  %retparam284 = alloca i64, align 8
  %error_var292 = alloca i64, align 8
  %retparam294 = alloca i64, align 8
  %error_var301 = alloca i64, align 8
  %retparam304 = alloca i64, align 8
  %error_var311 = alloca i64, align 8
  %retparam314 = alloca i64, align 8
  %error_var325 = alloca i64, align 8
  %retparam330 = alloca i64, align 8
  %reterr338 = alloca i64, align 8
  %a = alloca ptr, align 8
  %z = alloca ptr, align 8
  %r = alloca ptr, align 8
  %v = alloca i32, align 4
  %carry = alloca i32, align 4
  %sh = alloca i32, align 4
  %x363 = alloca i32, align 4
  %y364 = alloca i32, align 4
  %d = alloca ptr, align 8
  %x368 = alloca i64, align 8
  %taddr373 = alloca i64, align 8
  %taddr374 = alloca i64, align 8
  %varargslots375 = alloca [2 x %any], align 16
  %indirectarg378 = alloca %"any[]", align 8
  %taddr383 = alloca i64, align 8
  %varargslots384 = alloca [1 x %any], align 16
  %indirectarg386 = alloca %"any[]", align 8
  %taddr394 = alloca i64, align 8
  %taddr395 = alloca i64, align 8
  %varargslots396 = alloca [2 x %any], align 16
  %indirectarg399 = alloca %"any[]", align 8
  %taddr412 = alloca i64, align 8
  %taddr413 = alloca i64, align 8
  %varargslots414 = alloca [2 x %any], align 16
  %indirectarg417 = alloca %"any[]", align 8
  %carry434 = alloca i32, align 4
  %b = alloca ptr, align 8
  %sh435 = alloca i32, align 4
  %x436 = alloca i32, align 4
  %y438 = alloca i32, align 4
  %need = alloca i32, align 4
  %d444 = alloca ptr, align 8
  %rm = alloca i32, align 4
  %taddr452 = alloca i64, align 8
  %taddr453 = alloca i64, align 8
  %varargslots454 = alloca [2 x %any], align 16
  %indirectarg457 = alloca %"any[]", align 8
  %taddr460 = alloca i32, align 4
  %varargslots461 = alloca [1 x %any], align 16
  %indirectarg463 = alloca %"any[]", align 8
  %taddr467 = alloca i32, align 4
  %varargslots468 = alloca [1 x %any], align 16
  %indirectarg470 = alloca %"any[]", align 8
  %taddr479 = alloca i64, align 8
  %taddr480 = alloca i64, align 8
  %varargslots481 = alloca [2 x %any], align 16
  %indirectarg484 = alloca %"any[]", align 8
  %taddr490 = alloca i64, align 8
  %taddr491 = alloca i64, align 8
  %varargslots492 = alloca [2 x %any], align 16
  %indirectarg495 = alloca %"any[]", align 8
  %taddr499 = alloca i32, align 4
  %varargslots500 = alloca [1 x %any], align 16
  %indirectarg502 = alloca %"any[]", align 8
  %taddr508 = alloca i32, align 4
  %varargslots509 = alloca [1 x %any], align 16
  %indirectarg511 = alloca %"any[]", align 8
  %taddr515 = alloca i32, align 4
  %varargslots516 = alloca [1 x %any], align 16
  %indirectarg518 = alloca %"any[]", align 8
  %e542 = alloca i32, align 4
  %i = alloca i32, align 4
  %taddr552 = alloca i64, align 8
  %taddr553 = alloca i64, align 8
  %varargslots554 = alloca [2 x %any], align 16
  %indirectarg557 = alloca %"any[]", align 8
  %j = alloca i32, align 4
  %x584 = alloca i32, align 4
  %d585 = alloca ptr, align 8
  %i594 = alloca i32, align 4
  %taddr606 = alloca i64, align 8
  %taddr607 = alloca i64, align 8
  %varargslots608 = alloca [2 x %any], align 16
  %indirectarg611 = alloca %"any[]", align 8
  %round623 = alloca double, align 8
  %small = alloca double, align 8
  %taddr628 = alloca i64, align 8
  %taddr629 = alloca i64, align 8
  %varargslots630 = alloca [2 x %any], align 16
  %indirectarg633 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %taddr685 = alloca i64, align 8
  %taddr686 = alloca i64, align 8
  %varargslots687 = alloca [2 x %any], align 16
  %indirectarg690 = alloca %"any[]", align 8
  %taddr700 = alloca i64, align 8
  %taddr701 = alloca i64, align 8
  %varargslots702 = alloca [2 x %any], align 16
  %indirectarg705 = alloca %"any[]", align 8
  %taddr711 = alloca i64, align 8
  %taddr712 = alloca i64, align 8
  %varargslots713 = alloca [2 x %any], align 16
  %indirectarg716 = alloca %"any[]", align 8
  %taddr724 = alloca i64, align 8
  %taddr725 = alloca i64, align 8
  %varargslots726 = alloca [2 x %any], align 16
  %indirectarg729 = alloca %"any[]", align 8
  %taddr738 = alloca i64, align 8
  %taddr739 = alloca i64, align 8
  %varargslots740 = alloca [2 x %any], align 16
  %indirectarg743 = alloca %"any[]", align 8
  %taddr752 = alloca i64, align 8
  %taddr753 = alloca i64, align 8
  %varargslots754 = alloca [2 x %any], align 16
  %indirectarg757 = alloca %"any[]", align 8
  %taddr764 = alloca i64, align 8
  %taddr765 = alloca i64, align 8
  %varargslots766 = alloca [2 x %any], align 16
  %indirectarg769 = alloca %"any[]", align 8
  %taddr780 = alloca i64, align 8
  %taddr781 = alloca i64, align 8
  %varargslots782 = alloca [2 x %any], align 16
  %indirectarg785 = alloca %"any[]", align 8
  %i843 = alloca i32, align 4
  %x859 = alloca i64, align 8
  %x860 = alloca i64, align 8
  %y865 = alloca i64, align 8
  %y866 = alloca i64, align 8
  %x868 = alloca i64, align 8
  %x869 = alloca i64, align 8
  %y876 = alloca i64, align 8
  %y877 = alloca i64, align 8
  %l893 = alloca i32, align 4
  %estr905 = alloca ptr, align 8
  %taddr924 = alloca i128, align 16
  %len960 = alloca i64, align 8
  %error_var972 = alloca i64, align 8
  %retparam978 = alloca i64, align 8
  %error_var993 = alloca i64, align 8
  %retparam995 = alloca i64, align 8
  %error_var1006 = alloca i64, align 8
  %retparam1012 = alloca i64, align 8
  %d1025 = alloca ptr, align 8
  %s1029 = alloca ptr, align 8
  %taddr1034 = alloca i64, align 8
  %taddr1035 = alloca i64, align 8
  %varargslots1036 = alloca [2 x %any], align 16
  %indirectarg1039 = alloca %"any[]", align 8
  %taddr1043 = alloca i128, align 16
  %switch1047 = alloca i8, align 1
  %error_var1068 = alloca i64, align 8
  %retparam1072 = alloca i64, align 8
  %error_var1089 = alloca i64, align 8
  %retparam1090 = alloca i64, align 8
  %s1105 = alloca ptr, align 8
  %taddr1110 = alloca i64, align 8
  %taddr1111 = alloca i64, align 8
  %varargslots1112 = alloca [2 x %any], align 16
  %indirectarg1115 = alloca %"any[]", align 8
  %taddr1119 = alloca i128, align 16
  %error_var1131 = alloca i64, align 8
  %x1132 = alloca i64, align 8
  %y1133 = alloca i64, align 8
  %retparam1136 = alloca i64, align 8
  %error_var1146 = alloca i64, align 8
  %retparam1148 = alloca i64, align 8
  %d1160 = alloca ptr, align 8
  %s1168 = alloca ptr, align 8
  %taddr1173 = alloca i64, align 8
  %taddr1174 = alloca i64, align 8
  %varargslots1175 = alloca [2 x %any], align 16
  %indirectarg1178 = alloca %"any[]", align 8
  %taddr1182 = alloca i128, align 16
  %error_var1199 = alloca i64, align 8
  %retparam1201 = alloca i64, align 8
  %error_var1216 = alloca i64, align 8
  %retparam1217 = alloca i64, align 8
  %error_var1226 = alloca i64, align 8
  %x1228 = alloca i64, align 8
  %y1229 = alloca i64, align 8
  %retparam1232 = alloca i64, align 8
  %error_var1243 = alloca i64, align 8
  %retparam1245 = alloca i64, align 8
  %error_var1252 = alloca i64, align 8
  %retparam1255 = alloca i64, align 8
  %error_var1267 = alloca i64, align 8
  %retparam1273 = alloca i64, align 8
  %reterr1281 = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !3571
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !3571
  br i1 %5, label %panic, label %checkok, !dbg !3571

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3572, !DIExpression(), !3573)
  store i32 %2, ptr %formatting, align 4
    #dbg_declare(ptr %formatting, !3574, !DIExpression(), !3575)
  store double %3, ptr %y, align 8
    #dbg_declare(ptr %y, !3576, !DIExpression(), !3577)
    #dbg_declare(ptr %big, !3578, !DIExpression(), !3582)
  call void @llvm.memset.p0.i64(ptr align 16 %big, i8 0, i64 504, i1 false), !dbg !3582
    #dbg_declare(ptr %is_neg, !3583, !DIExpression(), !3584)
  store i8 0, ptr %is_neg, align 1, !dbg !3585
  %6 = load double, ptr %y, align 8
  store double %6, ptr %x, align 8
  %7 = load double, ptr %x, align 8
  store double %7, ptr %expr, align 8
  %checknull = icmp eq ptr %expr, null, !dbg !3586
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3586
  br i1 %8, label %panic1, label %checkok2, !dbg !3586

checkok2:                                         ; preds = %checkok
  %9 = ptrtoint ptr %expr to i64, !dbg !3591
  %10 = urem i64 %9, 8, !dbg !3591
  %11 = icmp ne i64 %10, 0, !dbg !3591
  %12 = call i1 @llvm.expect.i1(i1 %11, i1 false), !dbg !3591
  br i1 %12, label %panic3, label %checkok5, !dbg !3591

checkok5:                                         ; preds = %checkok2
  %13 = load i64, ptr %expr, align 8, !dbg !3591
  %lshr = lshr i64 %13, 63, !dbg !3592
  %14 = freeze i64 %lshr, !dbg !3592
  %trunc = trunc i64 %14 to i32, !dbg !3592
  %i2b = icmp ne i32 %trunc, 0, !dbg !3592
  br i1 %i2b, label %if.then, label %if.exit, !dbg !3592

if.then:                                          ; preds = %checkok5
  store i8 1, ptr %is_neg, align 1, !dbg !3593
  %15 = load double, ptr %y, align 8, !dbg !3595
  %fneg = fneg double %15, !dbg !3595
  store double %fneg, ptr %y, align 8, !dbg !3595
  br label %if.exit, !dbg !3595

if.exit:                                          ; preds = %if.then, %checkok5
    #dbg_declare(ptr %pl, !3596, !DIExpression(), !3597)
  %16 = load i8, ptr %is_neg, align 1, !dbg !3598
  %17 = trunc i8 %16 to i1, !dbg !3598
  br i1 %17, label %or.phi, label %or.rhs, !dbg !3598

or.rhs:                                           ; preds = %if.exit
  %18 = load ptr, ptr %self, align 8, !dbg !3599
  %ptradd6 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !3599
  %19 = load i32, ptr %ptradd6, align 8, !dbg !3599
  %lshrl = lshr i32 %19, 2, !dbg !3599
  %20 = and i32 1, %lshrl, !dbg !3599
  %trunc7 = trunc i32 %20 to i8, !dbg !3599
  %21 = trunc i8 %trunc7 to i1, !dbg !3599
  br label %or.phi, !dbg !3599

or.phi:                                           ; preds = %or.rhs, %if.exit
  %val = phi i1 [ true, %if.exit ], [ %21, %or.rhs ], !dbg !3599
  %ternary = select i1 %val, i64 1, i64 0, !dbg !3600
  store i64 %ternary, ptr %pl, align 8, !dbg !3600
  %22 = load double, ptr %y, align 8
  store double %22, ptr %x8, align 8
  %23 = load double, ptr %x8, align 8
  store double %23, ptr %expr9, align 8
  %checknull10 = icmp eq ptr %expr9, null, !dbg !3601
  %24 = call i1 @llvm.expect.i1(i1 %checknull10, i1 false), !dbg !3601
  br i1 %24, label %panic11, label %checkok12, !dbg !3601

checkok12:                                        ; preds = %or.phi
  %25 = ptrtoint ptr %expr9 to i64, !dbg !3606
  %26 = urem i64 %25, 8, !dbg !3606
  %27 = icmp ne i64 %26, 0, !dbg !3606
  %28 = call i1 @llvm.expect.i1(i1 %27, i1 false), !dbg !3606
  br i1 %28, label %panic13, label %checkok20, !dbg !3606

checkok20:                                        ; preds = %checkok12
  %29 = load i64, ptr %expr9, align 8, !dbg !3606
  %and = and i64 %29, 9223372036854775807, !dbg !3603
  %lt = icmp ult i64 %and, 9218868437227405312, !dbg !3603
  %not = xor i1 %lt, true, !dbg !3603
  br i1 %not, label %if.then21, label %if.exit93, !dbg !3603

if.then21:                                        ; preds = %checkok20
    #dbg_declare(ptr %len, !3607, !DIExpression(), !3609)
  store i64 0, ptr %len, align 8, !dbg !3609
  %30 = load ptr, ptr %self, align 8, !dbg !3610
  %ptradd22 = getelementptr inbounds i8, ptr %30, i64 16, !dbg !3610
  %31 = load i32, ptr %ptradd22, align 8, !dbg !3610
  %lshrl23 = lshr i32 %31, 1, !dbg !3610
  %32 = and i32 1, %lshrl23, !dbg !3610
  %trunc24 = trunc i32 %32 to i8, !dbg !3610
  %33 = trunc i8 %trunc24 to i1, !dbg !3610
  %not25 = xor i1 %33, true, !dbg !3610
  br i1 %not25, label %if.then26, label %if.exit30, !dbg !3610

if.then26:                                        ; preds = %if.then21
  %34 = load i64, ptr %len, align 8, !dbg !3611
  %35 = load ptr, ptr %self, align 8, !dbg !3612
  %ptradd27 = getelementptr inbounds i8, ptr %35, i64 16, !dbg !3612
  %ptradd28 = getelementptr inbounds i8, ptr %ptradd27, i64 4, !dbg !3612
  %36 = load i32, ptr %ptradd28, align 4, !dbg !3612
  %zext = zext i32 %36 to i64, !dbg !3612
  %37 = load i64, ptr %pl, align 8, !dbg !3613
  %add = add i64 3, %37, !dbg !3614
  %38 = load ptr, ptr %self, align 8
  %39 = call i64 @std.io.Formatter.pad(ptr %retparam, ptr %38, i8 zeroext 32, i64 %zext, i64 %add) #6, !dbg !3615
  %not_err = icmp eq i64 %39, 0, !dbg !3615
  %40 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3615
  br i1 %40, label %after_check, label %assign_optional, !dbg !3615

assign_optional:                                  ; preds = %if.then26
  store i64 %39, ptr %error_var, align 8, !dbg !3615
  br label %guard_block, !dbg !3615

after_check:                                      ; preds = %if.then26
  br label %noerr_block, !dbg !3615

guard_block:                                      ; preds = %assign_optional
  %41 = load i64, ptr %error_var, align 8, !dbg !3615
  ret i64 %41, !dbg !3615

noerr_block:                                      ; preds = %after_check
  %42 = load i64, ptr %retparam, align 8, !dbg !3615
  %add29 = add i64 %34, %42, !dbg !3611
  store i64 %add29, ptr %len, align 8, !dbg !3611
  br label %if.exit30, !dbg !3611

if.exit30:                                        ; preds = %noerr_block, %if.then21
    #dbg_declare(ptr %s, !3616, !DIExpression(), !3617)
  %43 = load ptr, ptr %self, align 8, !dbg !3618
  %ptradd31 = getelementptr inbounds i8, ptr %43, i64 16, !dbg !3618
  %44 = load i32, ptr %ptradd31, align 8, !dbg !3618
  %lshrl32 = lshr i32 %44, 5, !dbg !3618
  %45 = and i32 1, %lshrl32, !dbg !3618
  %trunc33 = trunc i32 %45 to i8, !dbg !3618
  %46 = trunc i8 %trunc33 to i1, !dbg !3618
  %ternary34 = select i1 %46, %"char[]" { ptr @.str.241, i64 3 }, %"char[]" { ptr @.str.242, i64 3 }, !dbg !3619
  store %"char[]" %ternary34, ptr %s, align 8, !dbg !3619
  %47 = load double, ptr %y, align 8
  store double %47, ptr %x35, align 8
  %48 = load double, ptr %x35, align 8
  store double %48, ptr %expr36, align 8
  %checknull37 = icmp eq ptr %expr36, null, !dbg !3620
  %49 = call i1 @llvm.expect.i1(i1 %checknull37, i1 false), !dbg !3620
  br i1 %49, label %panic38, label %checkok39, !dbg !3620

checkok39:                                        ; preds = %if.exit30
  %50 = ptrtoint ptr %expr36 to i64, !dbg !3625
  %51 = urem i64 %50, 8, !dbg !3625
  %52 = icmp ne i64 %51, 0, !dbg !3625
  %53 = call i1 @llvm.expect.i1(i1 %52, i1 false), !dbg !3625
  br i1 %53, label %panic40, label %checkok47, !dbg !3625

checkok47:                                        ; preds = %checkok39
  %54 = load i64, ptr %expr36, align 8, !dbg !3625
  %and48 = and i64 %54, 9223372036854775807, !dbg !3622
  %gt = icmp ugt i64 %and48, 9218868437227405312, !dbg !3622
  br i1 %gt, label %if.then49, label %if.exit54, !dbg !3622

if.then49:                                        ; preds = %checkok47
  %55 = load ptr, ptr %self, align 8, !dbg !3626
  %ptradd50 = getelementptr inbounds i8, ptr %55, i64 16, !dbg !3626
  %56 = load i32, ptr %ptradd50, align 8, !dbg !3626
  %lshrl51 = lshr i32 %56, 5, !dbg !3626
  %57 = and i32 1, %lshrl51, !dbg !3626
  %trunc52 = trunc i32 %57 to i8, !dbg !3626
  %58 = trunc i8 %trunc52 to i1, !dbg !3626
  %ternary53 = select i1 %58, %"char[]" { ptr @.str.243, i64 3 }, %"char[]" { ptr @.str.244, i64 3 }, !dbg !3627
  store %"char[]" %ternary53, ptr %s, align 8, !dbg !3627
  br label %if.exit54, !dbg !3627

if.exit54:                                        ; preds = %if.then49, %checkok47
  %59 = load i64, ptr %pl, align 8, !dbg !3628
  %i2b55 = icmp ne i64 %59, 0, !dbg !3628
  br i1 %i2b55, label %if.then56, label %if.exit66, !dbg !3628

if.then56:                                        ; preds = %if.exit54
  %60 = load i64, ptr %len, align 8, !dbg !3629
  %61 = load i8, ptr %is_neg, align 1, !dbg !3630
  %62 = trunc i8 %61 to i1, !dbg !3630
  %ternary58 = select i1 %62, i8 45, i8 43, !dbg !3631
  %63 = load ptr, ptr %self, align 8
  %64 = call i64 @std.io.Formatter.out(ptr %retparam59, ptr %63, i8 zeroext %ternary58), !dbg !3632
  %not_err60 = icmp eq i64 %64, 0, !dbg !3632
  %65 = call i1 @llvm.expect.i1(i1 %not_err60, i1 true), !dbg !3632
  br i1 %65, label %after_check62, label %assign_optional61, !dbg !3632

assign_optional61:                                ; preds = %if.then56
  store i64 %64, ptr %error_var57, align 8, !dbg !3632
  br label %guard_block63, !dbg !3632

after_check62:                                    ; preds = %if.then56
  br label %noerr_block64, !dbg !3632

guard_block63:                                    ; preds = %assign_optional61
  %66 = load i64, ptr %error_var57, align 8, !dbg !3632
  ret i64 %66, !dbg !3632

noerr_block64:                                    ; preds = %after_check62
  %67 = load i64, ptr %retparam59, align 8, !dbg !3632
  %add65 = add i64 %60, %67, !dbg !3629
  store i64 %add65, ptr %len, align 8, !dbg !3629
  br label %if.exit66, !dbg !3629

if.exit66:                                        ; preds = %noerr_block64, %if.exit54
  %68 = load i64, ptr %len, align 8, !dbg !3633
  %69 = load ptr, ptr %self, align 8
  %lo = load ptr, ptr %s, align 8
  %ptradd69 = getelementptr inbounds i8, ptr %s, i64 8
  %hi = load i64, ptr %ptradd69, align 8
  %70 = call i64 @std.io.Formatter.out_chars(ptr %retparam68, ptr %69, ptr %lo, i64 %hi), !dbg !3634
  %not_err70 = icmp eq i64 %70, 0, !dbg !3634
  %71 = call i1 @llvm.expect.i1(i1 %not_err70, i1 true), !dbg !3634
  br i1 %71, label %after_check72, label %assign_optional71, !dbg !3634

assign_optional71:                                ; preds = %if.exit66
  store i64 %70, ptr %error_var67, align 8, !dbg !3634
  br label %guard_block73, !dbg !3634

after_check72:                                    ; preds = %if.exit66
  br label %noerr_block74, !dbg !3634

guard_block73:                                    ; preds = %assign_optional71
  %72 = load i64, ptr %error_var67, align 8, !dbg !3634
  ret i64 %72, !dbg !3634

noerr_block74:                                    ; preds = %after_check72
  %73 = load i64, ptr %retparam68, align 8, !dbg !3634
  %add75 = add i64 %68, %73, !dbg !3633
  store i64 %add75, ptr %len, align 8, !dbg !3633
  %74 = load ptr, ptr %self, align 8, !dbg !3635
  %ptradd76 = getelementptr inbounds i8, ptr %74, i64 16, !dbg !3635
  %75 = load i32, ptr %ptradd76, align 8, !dbg !3635
  %lshrl77 = lshr i32 %75, 1, !dbg !3635
  %76 = and i32 1, %lshrl77, !dbg !3635
  %trunc78 = trunc i32 %76 to i8, !dbg !3635
  %77 = trunc i8 %trunc78 to i1, !dbg !3635
  br i1 %77, label %if.then79, label %if.exit92, !dbg !3635

if.then79:                                        ; preds = %noerr_block74
  %78 = load i64, ptr %len, align 8, !dbg !3636
  %79 = load ptr, ptr %self, align 8, !dbg !3637
  %ptradd81 = getelementptr inbounds i8, ptr %79, i64 16, !dbg !3637
  %ptradd82 = getelementptr inbounds i8, ptr %ptradd81, i64 4, !dbg !3637
  %80 = load i32, ptr %ptradd82, align 4, !dbg !3637
  %zext83 = zext i32 %80 to i64, !dbg !3637
  %81 = load i64, ptr %pl, align 8, !dbg !3638
  %add84 = add i64 3, %81, !dbg !3639
  %82 = load ptr, ptr %self, align 8
  %83 = call i64 @std.io.Formatter.pad(ptr %retparam85, ptr %82, i8 zeroext 32, i64 %zext83, i64 %add84) #6, !dbg !3640
  %not_err86 = icmp eq i64 %83, 0, !dbg !3640
  %84 = call i1 @llvm.expect.i1(i1 %not_err86, i1 true), !dbg !3640
  br i1 %84, label %after_check88, label %assign_optional87, !dbg !3640

assign_optional87:                                ; preds = %if.then79
  store i64 %83, ptr %error_var80, align 8, !dbg !3640
  br label %guard_block89, !dbg !3640

after_check88:                                    ; preds = %if.then79
  br label %noerr_block90, !dbg !3640

guard_block89:                                    ; preds = %assign_optional87
  %85 = load i64, ptr %error_var80, align 8, !dbg !3640
  ret i64 %85, !dbg !3640

noerr_block90:                                    ; preds = %after_check88
  %86 = load i64, ptr %retparam85, align 8, !dbg !3640
  %add91 = add i64 %78, %86, !dbg !3636
  store i64 %add91, ptr %len, align 8, !dbg !3636
  br label %if.exit92, !dbg !3636

if.exit92:                                        ; preds = %noerr_block90, %noerr_block74
  %87 = load i64, ptr %len, align 8, !dbg !3641
  store i64 %87, ptr %0, align 8, !dbg !3641
  ret i64 0, !dbg !3641

if.exit93:                                        ; preds = %checkok20
    #dbg_declare(ptr %e2, !3642, !DIExpression(), !3643)
  store i32 0, ptr %e2, align 4, !dbg !3643
  %88 = load double, ptr %y, align 8
  store double %88, ptr %x94, align 8
  store ptr %e2, ptr %e, align 8
  %89 = load double, ptr %x94, align 8, !dbg !3644
  %90 = load ptr, ptr %e, align 8, !dbg !3644
  %91 = call double @std.math._frexp(double %89, ptr %90), !dbg !3647
  %fmul = fmul double %91, 2.000000e+00, !dbg !3646
  store double %fmul, ptr %y, align 8, !dbg !3646
  %92 = load double, ptr %y, align 8, !dbg !3648
  %neq = fcmp one double %92, 0.000000e+00, !dbg !3648
  br i1 %neq, label %if.then95, label %if.exit96, !dbg !3648

if.then95:                                        ; preds = %if.exit93
  %93 = load i32, ptr %e2, align 4, !dbg !3649
  %sub = sub i32 %93, 1, !dbg !3649
  store i32 %sub, ptr %e2, align 4, !dbg !3649
  br label %if.exit96, !dbg !3649

if.exit96:                                        ; preds = %if.then95, %if.exit93
    #dbg_declare(ptr %ebuf0, !3650, !DIExpression(), !3654)
  store i8 0, ptr %ebuf0, align 1, !dbg !3654
  %ptradd97 = getelementptr inbounds i8, ptr %ebuf0, i64 1, !dbg !3654
  store i8 0, ptr %ptradd97, align 1, !dbg !3654
  %ptradd98 = getelementptr inbounds i8, ptr %ebuf0, i64 2, !dbg !3654
  store i8 0, ptr %ptradd98, align 1, !dbg !3654
  %ptradd99 = getelementptr inbounds i8, ptr %ebuf0, i64 3, !dbg !3654
  store i8 0, ptr %ptradd99, align 1, !dbg !3654
  %ptradd100 = getelementptr inbounds i8, ptr %ebuf0, i64 4, !dbg !3654
  store i8 0, ptr %ptradd100, align 1, !dbg !3654
  %ptradd101 = getelementptr inbounds i8, ptr %ebuf0, i64 5, !dbg !3654
  store i8 0, ptr %ptradd101, align 1, !dbg !3654
  %ptradd102 = getelementptr inbounds i8, ptr %ebuf0, i64 6, !dbg !3654
  store i8 0, ptr %ptradd102, align 1, !dbg !3654
  %ptradd103 = getelementptr inbounds i8, ptr %ebuf0, i64 7, !dbg !3654
  store i8 0, ptr %ptradd103, align 1, !dbg !3654
  %ptradd104 = getelementptr inbounds i8, ptr %ebuf0, i64 8, !dbg !3654
  store i8 0, ptr %ptradd104, align 1, !dbg !3654
  %ptradd105 = getelementptr inbounds i8, ptr %ebuf0, i64 9, !dbg !3654
  store i8 0, ptr %ptradd105, align 1, !dbg !3654
  %ptradd106 = getelementptr inbounds i8, ptr %ebuf0, i64 10, !dbg !3654
  store i8 0, ptr %ptradd106, align 1, !dbg !3654
  %ptradd107 = getelementptr inbounds i8, ptr %ebuf0, i64 11, !dbg !3654
  store i8 0, ptr %ptradd107, align 1, !dbg !3654
    #dbg_declare(ptr %ebuf, !3655, !DIExpression(), !3656)
  %ptradd_any = getelementptr i8, ptr %ebuf0, i64 12, !dbg !3657
  store ptr %ptradd_any, ptr %ebuf, align 8, !dbg !3657
    #dbg_declare(ptr %buf_array, !3658, !DIExpression(), !3662)
  call void @llvm.memset.p0.i64(ptr align 16 %buf_array, i8 0, i64 22, i1 false), !dbg !3662
    #dbg_declare(ptr %buf, !3663, !DIExpression(), !3664)
  store ptr %buf_array, ptr %buf, align 8, !dbg !3665
    #dbg_declare(ptr %p, !3666, !DIExpression(), !3667)
  %94 = load ptr, ptr %self, align 8, !dbg !3668
  %ptradd108 = getelementptr inbounds i8, ptr %94, i64 16, !dbg !3668
  %95 = load i32, ptr %ptradd108, align 8, !dbg !3668
  %lshrl109 = lshr i32 %95, 6, !dbg !3668
  %96 = and i32 1, %lshrl109, !dbg !3668
  %trunc110 = trunc i32 %96 to i8, !dbg !3668
  %97 = trunc i8 %trunc110 to i1, !dbg !3668
  br i1 %97, label %cond.lhs, label %cond.rhs, !dbg !3668

cond.lhs:                                         ; preds = %if.exit96
  %98 = load ptr, ptr %self, align 8, !dbg !3669
  %ptradd111 = getelementptr inbounds i8, ptr %98, i64 16, !dbg !3669
  %ptradd112 = getelementptr inbounds i8, ptr %ptradd111, i64 8, !dbg !3669
  %99 = load i32, ptr %ptradd112, align 8, !dbg !3669
  br label %cond.phi, !dbg !3669

cond.rhs:                                         ; preds = %if.exit96
  br label %cond.phi, !dbg !3670

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val113 = phi i32 [ %99, %cond.lhs ], [ -1, %cond.rhs ], !dbg !3670
  %sext = sext i32 %val113 to i64, !dbg !3670
  store i64 %sext, ptr %p, align 8, !dbg !3670
  %100 = load i32, ptr %formatting, align 4, !dbg !3671
  %eq = icmp eq i32 %100, 3, !dbg !3671
  br i1 %eq, label %if.then114, label %if.exit339, !dbg !3671

if.then114:                                       ; preds = %cond.phi
    #dbg_declare(ptr %round, !3672, !DIExpression(), !3674)
  store double 8.000000e+00, ptr %round, align 8, !dbg !3675
  %101 = load i64, ptr %pl, align 8, !dbg !3676
  %add115 = add i64 %101, 2, !dbg !3676
  store i64 %add115, ptr %pl, align 8, !dbg !3676
  %102 = load i64, ptr %p, align 8, !dbg !3677
  %gt116 = icmp sgt i64 %102, 0, !dbg !3677
  br i1 %gt116, label %and.rhs, label %and.phi, !dbg !3677

and.rhs:                                          ; preds = %if.then114
  %103 = load i64, ptr %p, align 8, !dbg !3678
  %lt117 = icmp slt i64 %103, 12, !dbg !3678
  br label %and.phi, !dbg !3678

and.phi:                                          ; preds = %and.rhs, %if.then114
  %val118 = phi i1 [ false, %if.then114 ], [ %lt117, %and.rhs ], !dbg !3678
  br i1 %val118, label %if.then119, label %if.exit132, !dbg !3678

if.then119:                                       ; preds = %and.phi
    #dbg_declare(ptr %re, !3679, !DIExpression(), !3681)
  %104 = load i64, ptr %p, align 8, !dbg !3682
  %trunc120 = trunc i64 %104 to i32, !dbg !3682
  %sub121 = sub i32 12, %trunc120, !dbg !3683
  store i32 %sub121, ptr %re, align 4, !dbg !3683
  %105 = load double, ptr %round, align 8, !dbg !3684
  %fmul122 = fmul double %105, 2.000000e+00, !dbg !3684
  store double %fmul122, ptr %round, align 8, !dbg !3684
  br label %loop.cond, !dbg !3685

loop.cond:                                        ; preds = %loop.body, %if.then119
  %106 = load i32, ptr %re, align 4, !dbg !3686
  %sub123 = sub i32 %106, 1, !dbg !3686
  store i32 %sub123, ptr %re, align 4, !dbg !3686
  %i2b124 = icmp ne i32 %106, 0, !dbg !3686
  br i1 %i2b124, label %loop.body, label %loop.exit, !dbg !3686

loop.body:                                        ; preds = %loop.cond
  %107 = load double, ptr %round, align 8, !dbg !3688
  %fmul125 = fmul double %107, 1.600000e+01, !dbg !3688
  store double %fmul125, ptr %round, align 8, !dbg !3688
  br label %loop.cond, !dbg !3688

loop.exit:                                        ; preds = %loop.cond
  %108 = load i8, ptr %is_neg, align 1, !dbg !3689
  %109 = trunc i8 %108 to i1, !dbg !3689
  br i1 %109, label %if.then126, label %if.else, !dbg !3689

if.then126:                                       ; preds = %loop.exit
  %110 = load double, ptr %y, align 8, !dbg !3690
  %fneg127 = fneg double %110, !dbg !3690
  store double %fneg127, ptr %y, align 8, !dbg !3690
  %111 = load double, ptr %y, align 8, !dbg !3692
  %112 = load double, ptr %round, align 8, !dbg !3693
  %fsub = fsub double %111, %112, !dbg !3692
  store double %fsub, ptr %y, align 8, !dbg !3692
  %113 = load double, ptr %y, align 8, !dbg !3694
  %114 = load double, ptr %round, align 8, !dbg !3695
  %fadd = fadd double %113, %114, !dbg !3694
  store double %fadd, ptr %y, align 8, !dbg !3694
  %115 = load double, ptr %y, align 8, !dbg !3696
  %fneg128 = fneg double %115, !dbg !3696
  store double %fneg128, ptr %y, align 8, !dbg !3696
  br label %if.exit131, !dbg !3696

if.else:                                          ; preds = %loop.exit
  %116 = load double, ptr %y, align 8, !dbg !3697
  %117 = load double, ptr %round, align 8, !dbg !3699
  %fadd129 = fadd double %116, %117, !dbg !3697
  store double %fadd129, ptr %y, align 8, !dbg !3697
  %118 = load double, ptr %y, align 8, !dbg !3700
  %119 = load double, ptr %round, align 8, !dbg !3701
  %fsub130 = fsub double %118, %119, !dbg !3700
  store double %fsub130, ptr %y, align 8, !dbg !3700
  br label %if.exit131, !dbg !3700

if.exit131:                                       ; preds = %if.else, %if.then126
  br label %if.exit132, !dbg !3700

if.exit132:                                       ; preds = %if.exit131, %and.phi
    #dbg_declare(ptr %estr, !3702, !DIExpression(), !3703)
  %120 = load i32, ptr %e2, align 4, !dbg !3704
  %lt133 = icmp slt i32 %120, 0, !dbg !3704
  br i1 %lt133, label %cond.lhs134, label %cond.rhs136, !dbg !3704

cond.lhs134:                                      ; preds = %if.exit132
  %121 = load i32, ptr %e2, align 4, !dbg !3705
  %neg = sub i32 0, %121, !dbg !3705
  %sext135 = sext i32 %neg to i128, !dbg !3705
  br label %cond.phi138, !dbg !3705

cond.rhs136:                                      ; preds = %if.exit132
  %122 = load i32, ptr %e2, align 4, !dbg !3706
  %sext137 = sext i32 %122 to i128, !dbg !3706
  br label %cond.phi138, !dbg !3706

cond.phi138:                                      ; preds = %cond.rhs136, %cond.lhs134
  %val139 = phi i128 [ %sext135, %cond.lhs134 ], [ %sext137, %cond.rhs136 ], !dbg !3706
  store i128 %val139, ptr %taddr140, align 16
  %lo141 = load i64, ptr %taddr140, align 16
  %ptradd142 = getelementptr inbounds i8, ptr %taddr140, i64 8
  %hi143 = load i64, ptr %ptradd142, align 8
  %123 = load ptr, ptr %ebuf, align 8
  %124 = call ptr @std.io.fmt_u(i64 %lo141, i64 %hi143, ptr %123), !dbg !3707
  store ptr %124, ptr %estr, align 8, !dbg !3707
  %125 = load ptr, ptr %estr, align 8, !dbg !3708
  %126 = load ptr, ptr %ebuf, align 8, !dbg !3709
  %eq144 = icmp eq ptr %125, %126, !dbg !3708
  br i1 %eq144, label %if.then145, label %if.exit150, !dbg !3708

if.then145:                                       ; preds = %cond.phi138
  %127 = load ptr, ptr %estr, align 8, !dbg !3710
  %ptradd_any146 = getelementptr i8, ptr %127, i8 -1, !dbg !3710
  store ptr %ptradd_any146, ptr %estr, align 8, !dbg !3710
  %checknull147 = icmp eq ptr %ptradd_any146, null, !dbg !3710
  %128 = call i1 @llvm.expect.i1(i1 %checknull147, i1 false), !dbg !3710
  br i1 %128, label %panic148, label %checkok149, !dbg !3710

checkok149:                                       ; preds = %if.then145
  store i8 48, ptr %ptradd_any146, align 1, !dbg !3711
  br label %if.exit150, !dbg !3711

if.exit150:                                       ; preds = %checkok149, %cond.phi138
  %129 = load ptr, ptr %estr, align 8, !dbg !3712
  %ptradd_any151 = getelementptr i8, ptr %129, i8 -1, !dbg !3712
  store ptr %ptradd_any151, ptr %estr, align 8, !dbg !3712
  %checknull152 = icmp eq ptr %ptradd_any151, null, !dbg !3712
  %130 = call i1 @llvm.expect.i1(i1 %checknull152, i1 false), !dbg !3712
  br i1 %130, label %panic153, label %checkok154, !dbg !3712

checkok154:                                       ; preds = %if.exit150
  %131 = load i32, ptr %e2, align 4, !dbg !3713
  %lt155 = icmp slt i32 %131, 0, !dbg !3713
  %ternary156 = select i1 %lt155, i8 45, i8 43, !dbg !3714
  store i8 %ternary156, ptr %ptradd_any151, align 1, !dbg !3714
  %132 = load ptr, ptr %estr, align 8, !dbg !3715
  %ptradd_any157 = getelementptr i8, ptr %132, i8 -1, !dbg !3715
  store ptr %ptradd_any157, ptr %estr, align 8, !dbg !3715
  %checknull158 = icmp eq ptr %ptradd_any157, null, !dbg !3715
  %133 = call i1 @llvm.expect.i1(i1 %checknull158, i1 false), !dbg !3715
  br i1 %133, label %panic159, label %checkok160, !dbg !3715

checkok160:                                       ; preds = %checkok154
  %134 = load ptr, ptr %self, align 8, !dbg !3716
  %ptradd161 = getelementptr inbounds i8, ptr %134, i64 16, !dbg !3716
  %135 = load i32, ptr %ptradd161, align 8, !dbg !3716
  %lshrl162 = lshr i32 %135, 5, !dbg !3716
  %136 = and i32 1, %lshrl162, !dbg !3716
  %trunc163 = trunc i32 %136 to i8, !dbg !3716
  %137 = trunc i8 %trunc163 to i1, !dbg !3716
  %ternary164 = select i1 %137, i8 80, i8 112, !dbg !3717
  store i8 %ternary164, ptr %ptradd_any157, align 1, !dbg !3717
    #dbg_declare(ptr %s165, !3718, !DIExpression(), !3719)
  %138 = load ptr, ptr %buf, align 8, !dbg !3720
  store ptr %138, ptr %s165, align 8, !dbg !3720
    #dbg_declare(ptr %xdigits, !3721, !DIExpression(), !3722)
  %139 = load ptr, ptr %self, align 8, !dbg !3723
  %ptradd166 = getelementptr inbounds i8, ptr %139, i64 16, !dbg !3723
  %140 = load i32, ptr %ptradd166, align 8, !dbg !3723
  %lshrl167 = lshr i32 %140, 5, !dbg !3723
  %141 = and i32 1, %lshrl167, !dbg !3723
  %trunc168 = trunc i32 %141 to i8, !dbg !3723
  %142 = trunc i8 %trunc168 to i1, !dbg !3723
  %ternary169 = select i1 %142, ptr @std.io.XDIGITS_H, ptr @std.io.XDIGITS_L, !dbg !3724
  store ptr %ternary169, ptr %xdigits, align 8, !dbg !3724
  br label %loop.body172, !dbg !3725

loop.cond170:                                     ; preds = %if.exit202
  %143 = load double, ptr %y, align 8, !dbg !3726
  %neq171 = fcmp one double %143, 0.000000e+00, !dbg !3726
  br i1 %neq171, label %loop.body172, label %loop.exit203, !dbg !3726

loop.body172:                                     ; preds = %loop.cond170, %checkok160
    #dbg_declare(ptr %x173, !3728, !DIExpression(), !3730)
  %144 = load double, ptr %y, align 8, !dbg !3731
  %fpsi = fptosi double %144 to i32, !dbg !3731
  store i32 %fpsi, ptr %x173, align 4, !dbg !3731
  %145 = load ptr, ptr %s165, align 8, !dbg !3732
  %ptradd_any174 = getelementptr i8, ptr %145, i8 1, !dbg !3732
  store ptr %ptradd_any174, ptr %s165, align 8, !dbg !3732
  %checknull175 = icmp eq ptr %145, null, !dbg !3732
  %146 = call i1 @llvm.expect.i1(i1 %checknull175, i1 false), !dbg !3732
  br i1 %146, label %panic176, label %checkok177, !dbg !3732

checkok177:                                       ; preds = %loop.body172
  %147 = load ptr, ptr %xdigits, align 8, !dbg !3733
  %148 = load i32, ptr %x173, align 4, !dbg !3734
  %sext178 = sext i32 %148 to i64, !dbg !3734
  %ptradd179 = getelementptr inbounds i8, ptr %147, i64 %sext178, !dbg !3734
  %149 = load i8, ptr %ptradd179, align 1, !dbg !3734
  store i8 %149, ptr %145, align 1, !dbg !3734
  %150 = load double, ptr %y, align 8, !dbg !3735
  %151 = load i32, ptr %x173, align 4, !dbg !3736
  %sifp = sitofp i32 %151 to double, !dbg !3736
  %fsub180 = fsub double %150, %sifp, !dbg !3735
  %fmul181 = fmul double 1.600000e+01, %fsub180, !dbg !3737
  store double %fmul181, ptr %y, align 8, !dbg !3737
  %152 = load ptr, ptr %s165, align 8, !dbg !3738
  %153 = load ptr, ptr %buf, align 8, !dbg !3739
  %154 = ptrtoint ptr %153 to i64, !dbg !3738
  %155 = ptrtoint ptr %152 to i64, !dbg !3738
  %156 = sub i64 %155, %154, !dbg !3738
  %157 = sdiv exact i64 %156, 1, !dbg !3738
  %eq182 = icmp eq i64 %157, 1, !dbg !3738
  br i1 %eq182, label %and.rhs183, label %and.phi195, !dbg !3738

and.rhs183:                                       ; preds = %checkok177
  %158 = load double, ptr %y, align 8, !dbg !3740
  %neq184 = fcmp one double %158, 0.000000e+00, !dbg !3740
  br i1 %neq184, label %or.phi187, label %or.rhs185, !dbg !3740

or.rhs185:                                        ; preds = %and.rhs183
  %159 = load i64, ptr %p, align 8, !dbg !3741
  %gt186 = icmp sgt i64 %159, 0, !dbg !3741
  br label %or.phi187, !dbg !3741

or.phi187:                                        ; preds = %or.rhs185, %and.rhs183
  %val188 = phi i1 [ true, %and.rhs183 ], [ %gt186, %or.rhs185 ], !dbg !3741
  br i1 %val188, label %or.phi193, label %or.rhs189, !dbg !3741

or.rhs189:                                        ; preds = %or.phi187
  %160 = load ptr, ptr %self, align 8, !dbg !3742
  %ptradd190 = getelementptr inbounds i8, ptr %160, i64 16, !dbg !3742
  %161 = load i32, ptr %ptradd190, align 8, !dbg !3742
  %lshrl191 = lshr i32 %161, 4, !dbg !3742
  %162 = and i32 1, %lshrl191, !dbg !3742
  %trunc192 = trunc i32 %162 to i8, !dbg !3742
  %163 = trunc i8 %trunc192 to i1, !dbg !3742
  br label %or.phi193, !dbg !3742

or.phi193:                                        ; preds = %or.rhs189, %or.phi187
  %val194 = phi i1 [ true, %or.phi187 ], [ %163, %or.rhs189 ], !dbg !3742
  br label %and.phi195, !dbg !3742

and.phi195:                                       ; preds = %or.phi193, %checkok177
  %val196 = phi i1 [ false, %checkok177 ], [ %val194, %or.phi193 ], !dbg !3742
  br i1 %val196, label %if.then197, label %if.exit202, !dbg !3742

if.then197:                                       ; preds = %and.phi195
  %164 = load ptr, ptr %s165, align 8, !dbg !3743
  %ptradd_any198 = getelementptr i8, ptr %164, i8 1, !dbg !3743
  store ptr %ptradd_any198, ptr %s165, align 8, !dbg !3743
  %checknull199 = icmp eq ptr %164, null, !dbg !3743
  %165 = call i1 @llvm.expect.i1(i1 %checknull199, i1 false), !dbg !3743
  br i1 %165, label %panic200, label %checkok201, !dbg !3743

checkok201:                                       ; preds = %if.then197
  store i8 46, ptr %164, align 1, !dbg !3744
  br label %if.exit202, !dbg !3744

if.exit202:                                       ; preds = %checkok201, %and.phi195
  br label %loop.cond170, !dbg !3744

loop.exit203:                                     ; preds = %loop.cond170
    #dbg_declare(ptr %outlen, !3745, !DIExpression(), !3746)
  %166 = load ptr, ptr %s165, align 8, !dbg !3747
  %167 = load ptr, ptr %buf, align 8, !dbg !3748
  %168 = ptrtoint ptr %167 to i64, !dbg !3747
  %169 = ptrtoint ptr %166 to i64, !dbg !3747
  %170 = sub i64 %169, %168, !dbg !3747
  %171 = sdiv exact i64 %170, 1, !dbg !3747
  store i64 %171, ptr %outlen, align 8, !dbg !3747
    #dbg_declare(ptr %explen, !3749, !DIExpression(), !3750)
  %172 = load ptr, ptr %ebuf, align 8, !dbg !3751
  %173 = load ptr, ptr %estr, align 8, !dbg !3752
  %174 = ptrtoint ptr %173 to i64, !dbg !3751
  %175 = ptrtoint ptr %172 to i64, !dbg !3751
  %176 = sub i64 %175, %174, !dbg !3751
  %177 = sdiv exact i64 %176, 1, !dbg !3751
  store i64 %177, ptr %explen, align 8, !dbg !3751
  %178 = load i64, ptr %p, align 8, !dbg !3753
  %179 = load i64, ptr %explen, align 8, !dbg !3754
  %sub204 = sub i64 2147483645, %179, !dbg !3755
  %180 = load i64, ptr %pl, align 8, !dbg !3756
  %sub205 = sub i64 %sub204, %180, !dbg !3755
  %gt206 = icmp sgt i64 %178, %sub205, !dbg !3753
  br i1 %gt206, label %if.then207, label %if.exit208, !dbg !3753

if.then207:                                       ; preds = %loop.exit203
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !3757

if.exit208:                                       ; preds = %loop.exit203
    #dbg_declare(ptr %len209, !3758, !DIExpression(), !3759)
  store i64 0, ptr %len209, align 8, !dbg !3759
    #dbg_declare(ptr %l, !3760, !DIExpression(), !3761)
  %181 = load i64, ptr %p, align 8, !dbg !3762
  %i2b210 = icmp ne i64 %181, 0, !dbg !3762
  br i1 %i2b210, label %and.rhs211, label %and.phi214, !dbg !3762

and.rhs211:                                       ; preds = %if.exit208
  %182 = load i64, ptr %outlen, align 8, !dbg !3763
  %sub212 = sub i64 %182, 2, !dbg !3763
  %183 = load i64, ptr %p, align 8, !dbg !3764
  %lt213 = icmp slt i64 %sub212, %183, !dbg !3763
  br label %and.phi214, !dbg !3763

and.phi214:                                       ; preds = %and.rhs211, %if.exit208
  %val215 = phi i1 [ false, %if.exit208 ], [ %lt213, %and.rhs211 ], !dbg !3763
  br i1 %val215, label %cond.lhs216, label %cond.rhs219, !dbg !3763

cond.lhs216:                                      ; preds = %and.phi214
  %184 = load i64, ptr %p, align 8, !dbg !3765
  %add217 = add i64 %184, 2, !dbg !3765
  %185 = load i64, ptr %explen, align 8, !dbg !3766
  %add218 = add i64 %add217, %185, !dbg !3765
  br label %cond.phi221, !dbg !3765

cond.rhs219:                                      ; preds = %and.phi214
  %186 = load i64, ptr %outlen, align 8, !dbg !3767
  %187 = load i64, ptr %explen, align 8, !dbg !3768
  %add220 = add i64 %186, %187, !dbg !3767
  br label %cond.phi221, !dbg !3767

cond.phi221:                                      ; preds = %cond.rhs219, %cond.lhs216
  %val222 = phi i64 [ %add218, %cond.lhs216 ], [ %add220, %cond.rhs219 ], !dbg !3767
  store i64 %val222, ptr %l, align 8, !dbg !3767
  %188 = load ptr, ptr %self, align 8, !dbg !3769
  %ptradd223 = getelementptr inbounds i8, ptr %188, i64 16, !dbg !3769
  %189 = load i32, ptr %ptradd223, align 8, !dbg !3769
  %lshrl224 = lshr i32 %189, 1, !dbg !3769
  %190 = and i32 1, %lshrl224, !dbg !3769
  %trunc225 = trunc i32 %190 to i8, !dbg !3769
  %191 = trunc i8 %trunc225 to i1, !dbg !3769
  %not226 = xor i1 %191, true, !dbg !3769
  br i1 %not226, label %and.rhs227, label %and.phi231, !dbg !3769

and.rhs227:                                       ; preds = %cond.phi221
  %192 = load ptr, ptr %self, align 8, !dbg !3770
  %ptradd228 = getelementptr inbounds i8, ptr %192, i64 16, !dbg !3770
  %193 = load i32, ptr %ptradd228, align 8, !dbg !3770
  %194 = and i32 1, %193, !dbg !3770
  %trunc229 = trunc i32 %194 to i8, !dbg !3770
  %195 = trunc i8 %trunc229 to i1, !dbg !3770
  %not230 = xor i1 %195, true, !dbg !3770
  br label %and.phi231, !dbg !3770

and.phi231:                                       ; preds = %and.rhs227, %cond.phi221
  %val232 = phi i1 [ false, %cond.phi221 ], [ %not230, %and.rhs227 ], !dbg !3770
  br i1 %val232, label %if.then233, label %if.exit246, !dbg !3770

if.then233:                                       ; preds = %and.phi231
  %196 = load i64, ptr %len209, align 8, !dbg !3771
  %197 = load ptr, ptr %self, align 8, !dbg !3772
  %ptradd235 = getelementptr inbounds i8, ptr %197, i64 16, !dbg !3772
  %ptradd236 = getelementptr inbounds i8, ptr %ptradd235, i64 4, !dbg !3772
  %198 = load i32, ptr %ptradd236, align 4, !dbg !3772
  %zext237 = zext i32 %198 to i64, !dbg !3772
  %199 = load i64, ptr %pl, align 8, !dbg !3773
  %200 = load i64, ptr %l, align 8, !dbg !3774
  %add238 = add i64 %199, %200, !dbg !3773
  %201 = load ptr, ptr %self, align 8
  %202 = call i64 @std.io.Formatter.pad(ptr %retparam239, ptr %201, i8 zeroext 32, i64 %zext237, i64 %add238) #6, !dbg !3775
  %not_err240 = icmp eq i64 %202, 0, !dbg !3775
  %203 = call i1 @llvm.expect.i1(i1 %not_err240, i1 true), !dbg !3775
  br i1 %203, label %after_check242, label %assign_optional241, !dbg !3775

assign_optional241:                               ; preds = %if.then233
  store i64 %202, ptr %error_var234, align 8, !dbg !3775
  br label %guard_block243, !dbg !3775

after_check242:                                   ; preds = %if.then233
  br label %noerr_block244, !dbg !3775

guard_block243:                                   ; preds = %assign_optional241
  %204 = load i64, ptr %error_var234, align 8, !dbg !3775
  ret i64 %204, !dbg !3775

noerr_block244:                                   ; preds = %after_check242
  %205 = load i64, ptr %retparam239, align 8, !dbg !3775
  %add245 = add i64 %196, %205, !dbg !3771
  store i64 %add245, ptr %len209, align 8, !dbg !3771
  br label %if.exit246, !dbg !3771

if.exit246:                                       ; preds = %noerr_block244, %and.phi231
  %206 = load i8, ptr %is_neg, align 1, !dbg !3776
  %207 = trunc i8 %206 to i1, !dbg !3776
  br i1 %207, label %or.phi251, label %or.rhs247, !dbg !3776

or.rhs247:                                        ; preds = %if.exit246
  %208 = load ptr, ptr %self, align 8, !dbg !3777
  %ptradd248 = getelementptr inbounds i8, ptr %208, i64 16, !dbg !3777
  %209 = load i32, ptr %ptradd248, align 8, !dbg !3777
  %lshrl249 = lshr i32 %209, 2, !dbg !3777
  %210 = and i32 1, %lshrl249, !dbg !3777
  %trunc250 = trunc i32 %210 to i8, !dbg !3777
  %211 = trunc i8 %trunc250 to i1, !dbg !3777
  br label %or.phi251, !dbg !3777

or.phi251:                                        ; preds = %or.rhs247, %if.exit246
  %val252 = phi i1 [ true, %if.exit246 ], [ %211, %or.rhs247 ], !dbg !3777
  br i1 %val252, label %if.then253, label %if.exit263, !dbg !3777

if.then253:                                       ; preds = %or.phi251
  %212 = load i64, ptr %len209, align 8, !dbg !3778
  %213 = load i8, ptr %is_neg, align 1, !dbg !3779
  %214 = trunc i8 %213 to i1, !dbg !3779
  %ternary255 = select i1 %214, i8 45, i8 43, !dbg !3780
  %215 = load ptr, ptr %self, align 8
  %216 = call i64 @std.io.Formatter.out(ptr %retparam256, ptr %215, i8 zeroext %ternary255), !dbg !3781
  %not_err257 = icmp eq i64 %216, 0, !dbg !3781
  %217 = call i1 @llvm.expect.i1(i1 %not_err257, i1 true), !dbg !3781
  br i1 %217, label %after_check259, label %assign_optional258, !dbg !3781

assign_optional258:                               ; preds = %if.then253
  store i64 %216, ptr %error_var254, align 8, !dbg !3781
  br label %guard_block260, !dbg !3781

after_check259:                                   ; preds = %if.then253
  br label %noerr_block261, !dbg !3781

guard_block260:                                   ; preds = %assign_optional258
  %218 = load i64, ptr %error_var254, align 8, !dbg !3781
  ret i64 %218, !dbg !3781

noerr_block261:                                   ; preds = %after_check259
  %219 = load i64, ptr %retparam256, align 8, !dbg !3781
  %add262 = add i64 %212, %219, !dbg !3778
  store i64 %add262, ptr %len209, align 8, !dbg !3778
  br label %if.exit263, !dbg !3778

if.exit263:                                       ; preds = %noerr_block261, %or.phi251
  %220 = load i64, ptr %len209, align 8, !dbg !3782
  %221 = load ptr, ptr %self, align 8, !dbg !3783
  %ptradd265 = getelementptr inbounds i8, ptr %221, i64 16, !dbg !3783
  %222 = load i32, ptr %ptradd265, align 8, !dbg !3783
  %lshrl266 = lshr i32 %222, 5, !dbg !3783
  %223 = and i32 1, %lshrl266, !dbg !3783
  %trunc267 = trunc i32 %223 to i8, !dbg !3783
  %224 = trunc i8 %trunc267 to i1, !dbg !3783
  %ternary268 = select i1 %224, %"char[]" { ptr @.str.247, i64 2 }, %"char[]" { ptr @.str.248, i64 2 }, !dbg !3784
  %225 = load ptr, ptr %self, align 8
  %226 = extractvalue %"char[]" %ternary268, 0
  %227 = extractvalue %"char[]" %ternary268, 1
  %228 = call i64 @std.io.Formatter.out_chars(ptr %retparam269, ptr %225, ptr %226, i64 %227), !dbg !3785
  %not_err270 = icmp eq i64 %228, 0, !dbg !3785
  %229 = call i1 @llvm.expect.i1(i1 %not_err270, i1 true), !dbg !3785
  br i1 %229, label %after_check272, label %assign_optional271, !dbg !3785

assign_optional271:                               ; preds = %if.exit263
  store i64 %228, ptr %error_var264, align 8, !dbg !3785
  br label %guard_block273, !dbg !3785

after_check272:                                   ; preds = %if.exit263
  br label %noerr_block274, !dbg !3785

guard_block273:                                   ; preds = %assign_optional271
  %230 = load i64, ptr %error_var264, align 8, !dbg !3785
  ret i64 %230, !dbg !3785

noerr_block274:                                   ; preds = %after_check272
  %231 = load i64, ptr %retparam269, align 8, !dbg !3785
  %add275 = add i64 %220, %231, !dbg !3782
  store i64 %add275, ptr %len209, align 8, !dbg !3782
  %232 = load ptr, ptr %self, align 8, !dbg !3786
  %ptradd276 = getelementptr inbounds i8, ptr %232, i64 16, !dbg !3786
  %233 = load i32, ptr %ptradd276, align 8, !dbg !3786
  %234 = and i32 1, %233, !dbg !3786
  %trunc277 = trunc i32 %234 to i8, !dbg !3786
  %235 = trunc i8 %trunc277 to i1, !dbg !3786
  br i1 %235, label %if.then278, label %if.exit291, !dbg !3786

if.then278:                                       ; preds = %noerr_block274
  %236 = load i64, ptr %len209, align 8, !dbg !3787
  %237 = load ptr, ptr %self, align 8, !dbg !3788
  %ptradd280 = getelementptr inbounds i8, ptr %237, i64 16, !dbg !3788
  %ptradd281 = getelementptr inbounds i8, ptr %ptradd280, i64 4, !dbg !3788
  %238 = load i32, ptr %ptradd281, align 4, !dbg !3788
  %zext282 = zext i32 %238 to i64, !dbg !3788
  %239 = load i64, ptr %pl, align 8, !dbg !3789
  %240 = load i64, ptr %l, align 8, !dbg !3790
  %add283 = add i64 %239, %240, !dbg !3789
  %241 = load ptr, ptr %self, align 8
  %242 = call i64 @std.io.Formatter.pad(ptr %retparam284, ptr %241, i8 zeroext 48, i64 %zext282, i64 %add283) #6, !dbg !3791
  %not_err285 = icmp eq i64 %242, 0, !dbg !3791
  %243 = call i1 @llvm.expect.i1(i1 %not_err285, i1 true), !dbg !3791
  br i1 %243, label %after_check287, label %assign_optional286, !dbg !3791

assign_optional286:                               ; preds = %if.then278
  store i64 %242, ptr %error_var279, align 8, !dbg !3791
  br label %guard_block288, !dbg !3791

after_check287:                                   ; preds = %if.then278
  br label %noerr_block289, !dbg !3791

guard_block288:                                   ; preds = %assign_optional286
  %244 = load i64, ptr %error_var279, align 8, !dbg !3791
  ret i64 %244, !dbg !3791

noerr_block289:                                   ; preds = %after_check287
  %245 = load i64, ptr %retparam284, align 8, !dbg !3791
  %add290 = add i64 %236, %245, !dbg !3787
  store i64 %add290, ptr %len209, align 8, !dbg !3787
  br label %if.exit291, !dbg !3787

if.exit291:                                       ; preds = %noerr_block289, %noerr_block274
  %246 = load i64, ptr %len209, align 8, !dbg !3792
  %247 = load ptr, ptr %buf, align 8, !dbg !3793
  %248 = load i64, ptr %outlen, align 8, !dbg !3794
  %add293 = add i64 0, %248, !dbg !3794
  %size = sub i64 %add293, 0, !dbg !3794
  %249 = insertvalue %"char[]" undef, ptr %247, 0, !dbg !3794
  %250 = insertvalue %"char[]" %249, i64 %size, 1, !dbg !3794
  %251 = load ptr, ptr %self, align 8
  %252 = call i64 @std.io.Formatter.out_chars(ptr %retparam294, ptr %251, ptr %247, i64 %size), !dbg !3795
  %not_err295 = icmp eq i64 %252, 0, !dbg !3795
  %253 = call i1 @llvm.expect.i1(i1 %not_err295, i1 true), !dbg !3795
  br i1 %253, label %after_check297, label %assign_optional296, !dbg !3795

assign_optional296:                               ; preds = %if.exit291
  store i64 %252, ptr %error_var292, align 8, !dbg !3795
  br label %guard_block298, !dbg !3795

after_check297:                                   ; preds = %if.exit291
  br label %noerr_block299, !dbg !3795

guard_block298:                                   ; preds = %assign_optional296
  %254 = load i64, ptr %error_var292, align 8, !dbg !3795
  ret i64 %254, !dbg !3795

noerr_block299:                                   ; preds = %after_check297
  %255 = load i64, ptr %retparam294, align 8, !dbg !3795
  %add300 = add i64 %246, %255, !dbg !3792
  store i64 %add300, ptr %len209, align 8, !dbg !3792
  %256 = load i64, ptr %len209, align 8, !dbg !3796
  %257 = load i64, ptr %l, align 8, !dbg !3797
  %258 = load i64, ptr %outlen, align 8, !dbg !3798
  %sub302 = sub i64 %257, %258, !dbg !3797
  %259 = load i64, ptr %explen, align 8, !dbg !3799
  %sub303 = sub i64 %sub302, %259, !dbg !3797
  %260 = load ptr, ptr %self, align 8
  %261 = call i64 @std.io.Formatter.pad(ptr %retparam304, ptr %260, i8 zeroext 48, i64 %sub303, i64 0) #6, !dbg !3800
  %not_err305 = icmp eq i64 %261, 0, !dbg !3800
  %262 = call i1 @llvm.expect.i1(i1 %not_err305, i1 true), !dbg !3800
  br i1 %262, label %after_check307, label %assign_optional306, !dbg !3800

assign_optional306:                               ; preds = %noerr_block299
  store i64 %261, ptr %error_var301, align 8, !dbg !3800
  br label %guard_block308, !dbg !3800

after_check307:                                   ; preds = %noerr_block299
  br label %noerr_block309, !dbg !3800

guard_block308:                                   ; preds = %assign_optional306
  %263 = load i64, ptr %error_var301, align 8, !dbg !3800
  ret i64 %263, !dbg !3800

noerr_block309:                                   ; preds = %after_check307
  %264 = load i64, ptr %retparam304, align 8, !dbg !3800
  %add310 = add i64 %256, %264, !dbg !3796
  store i64 %add310, ptr %len209, align 8, !dbg !3796
  %265 = load i64, ptr %len209, align 8, !dbg !3801
  %266 = load ptr, ptr %estr, align 8, !dbg !3802
  %267 = load i64, ptr %explen, align 8, !dbg !3803
  %add312 = add i64 0, %267, !dbg !3803
  %size313 = sub i64 %add312, 0, !dbg !3803
  %268 = insertvalue %"char[]" undef, ptr %266, 0, !dbg !3803
  %269 = insertvalue %"char[]" %268, i64 %size313, 1, !dbg !3803
  %270 = load ptr, ptr %self, align 8
  %271 = call i64 @std.io.Formatter.out_chars(ptr %retparam314, ptr %270, ptr %266, i64 %size313), !dbg !3804
  %not_err315 = icmp eq i64 %271, 0, !dbg !3804
  %272 = call i1 @llvm.expect.i1(i1 %not_err315, i1 true), !dbg !3804
  br i1 %272, label %after_check317, label %assign_optional316, !dbg !3804

assign_optional316:                               ; preds = %noerr_block309
  store i64 %271, ptr %error_var311, align 8, !dbg !3804
  br label %guard_block318, !dbg !3804

after_check317:                                   ; preds = %noerr_block309
  br label %noerr_block319, !dbg !3804

guard_block318:                                   ; preds = %assign_optional316
  %273 = load i64, ptr %error_var311, align 8, !dbg !3804
  ret i64 %273, !dbg !3804

noerr_block319:                                   ; preds = %after_check317
  %274 = load i64, ptr %retparam314, align 8, !dbg !3804
  %add320 = add i64 %265, %274, !dbg !3801
  store i64 %add320, ptr %len209, align 8, !dbg !3801
  %275 = load ptr, ptr %self, align 8, !dbg !3805
  %ptradd321 = getelementptr inbounds i8, ptr %275, i64 16, !dbg !3805
  %276 = load i32, ptr %ptradd321, align 8, !dbg !3805
  %lshrl322 = lshr i32 %276, 1, !dbg !3805
  %277 = and i32 1, %lshrl322, !dbg !3805
  %trunc323 = trunc i32 %277 to i8, !dbg !3805
  %278 = trunc i8 %trunc323 to i1, !dbg !3805
  br i1 %278, label %if.then324, label %if.exit337, !dbg !3805

if.then324:                                       ; preds = %noerr_block319
  %279 = load i64, ptr %len209, align 8, !dbg !3806
  %280 = load ptr, ptr %self, align 8, !dbg !3807
  %ptradd326 = getelementptr inbounds i8, ptr %280, i64 16, !dbg !3807
  %ptradd327 = getelementptr inbounds i8, ptr %ptradd326, i64 4, !dbg !3807
  %281 = load i32, ptr %ptradd327, align 4, !dbg !3807
  %zext328 = zext i32 %281 to i64, !dbg !3807
  %282 = load i64, ptr %pl, align 8, !dbg !3808
  %283 = load i64, ptr %l, align 8, !dbg !3809
  %add329 = add i64 %282, %283, !dbg !3808
  %284 = load ptr, ptr %self, align 8
  %285 = call i64 @std.io.Formatter.pad(ptr %retparam330, ptr %284, i8 zeroext 32, i64 %zext328, i64 %add329) #6, !dbg !3810
  %not_err331 = icmp eq i64 %285, 0, !dbg !3810
  %286 = call i1 @llvm.expect.i1(i1 %not_err331, i1 true), !dbg !3810
  br i1 %286, label %after_check333, label %assign_optional332, !dbg !3810

assign_optional332:                               ; preds = %if.then324
  store i64 %285, ptr %error_var325, align 8, !dbg !3810
  br label %guard_block334, !dbg !3810

after_check333:                                   ; preds = %if.then324
  br label %noerr_block335, !dbg !3810

guard_block334:                                   ; preds = %assign_optional332
  %287 = load i64, ptr %error_var325, align 8, !dbg !3810
  ret i64 %287, !dbg !3810

noerr_block335:                                   ; preds = %after_check333
  %288 = load i64, ptr %retparam330, align 8, !dbg !3810
  %add336 = add i64 %279, %288, !dbg !3806
  store i64 %add336, ptr %len209, align 8, !dbg !3806
  br label %if.exit337, !dbg !3806

if.exit337:                                       ; preds = %noerr_block335, %noerr_block319
  %289 = load i64, ptr %len209, align 8, !dbg !3811
  store i64 %289, ptr %0, align 8, !dbg !3811
  ret i64 0, !dbg !3811

if.exit339:                                       ; preds = %cond.phi
  %290 = load i64, ptr %p, align 8, !dbg !3812
  %lt340 = icmp slt i64 %290, 0, !dbg !3812
  br i1 %lt340, label %if.then341, label %if.exit342, !dbg !3812

if.then341:                                       ; preds = %if.exit339
  store i64 6, ptr %p, align 8, !dbg !3813
  br label %if.exit342, !dbg !3813

if.exit342:                                       ; preds = %if.then341, %if.exit339
  %291 = load double, ptr %y, align 8, !dbg !3814
  %neq343 = fcmp one double %291, 0.000000e+00, !dbg !3814
  br i1 %neq343, label %if.then344, label %if.exit347, !dbg !3814

if.then344:                                       ; preds = %if.exit342
  %292 = load double, ptr %y, align 8, !dbg !3815
  %fmul345 = fmul double %292, 0x41B0000000000000, !dbg !3815
  store double %fmul345, ptr %y, align 8, !dbg !3815
  %293 = load i32, ptr %e2, align 4, !dbg !3817
  %sub346 = sub i32 %293, 28, !dbg !3817
  store i32 %sub346, ptr %e2, align 4, !dbg !3817
  br label %if.exit347, !dbg !3817

if.exit347:                                       ; preds = %if.then344, %if.exit342
    #dbg_declare(ptr %a, !3818, !DIExpression(), !3820)
  store ptr null, ptr %a, align 8, !dbg !3820
    #dbg_declare(ptr %z, !3821, !DIExpression(), !3822)
  store ptr null, ptr %z, align 8, !dbg !3822
    #dbg_declare(ptr %r, !3823, !DIExpression(), !3824)
  store ptr null, ptr %r, align 8, !dbg !3824
  %294 = load i32, ptr %e2, align 4, !dbg !3825
  %lt348 = icmp slt i32 %294, 0, !dbg !3825
  br i1 %lt348, label %if.then349, label %if.else350, !dbg !3825

if.then349:                                       ; preds = %if.exit347
  store ptr %big, ptr %z, align 8, !dbg !3826
  store ptr %big, ptr %r, align 8, !dbg !3826
  store ptr %big, ptr %a, align 8, !dbg !3826
  br label %if.exit352, !dbg !3826

if.else350:                                       ; preds = %if.exit347
  %ptradd_any351 = getelementptr i8, ptr %big, i64 288, !dbg !3828
  store ptr %ptradd_any351, ptr %z, align 8, !dbg !3828
  store ptr %ptradd_any351, ptr %r, align 8, !dbg !3828
  store ptr %ptradd_any351, ptr %a, align 8, !dbg !3828
  br label %if.exit352, !dbg !3828

if.exit352:                                       ; preds = %if.else350, %if.then349
  br label %loop.body355, !dbg !3830

loop.cond353:                                     ; preds = %loop.body355
  %295 = load double, ptr %y, align 8, !dbg !3831
  %neq354 = fcmp one double %295, 0.000000e+00, !dbg !3831
  br i1 %neq354, label %loop.body355, label %loop.exit359, !dbg !3831

loop.body355:                                     ; preds = %loop.cond353, %if.exit352
    #dbg_declare(ptr %v, !3833, !DIExpression(), !3835)
  %296 = load ptr, ptr %z, align 8, !dbg !3836
  %ptradd_any356 = getelementptr i8, ptr %296, i8 4, !dbg !3836
  store ptr %ptradd_any356, ptr %z, align 8, !dbg !3836
  %297 = load double, ptr %y, align 8, !dbg !3837
  %fpui = fptoui double %297 to i32, !dbg !3837
  store i32 %fpui, ptr %296, align 4, !dbg !3837
  store i32 %fpui, ptr %v, align 4, !dbg !3837
  %298 = load double, ptr %y, align 8, !dbg !3838
  %299 = load i32, ptr %v, align 4, !dbg !3839
  %uifp = uitofp i32 %299 to double, !dbg !3839
  %fsub357 = fsub double %298, %uifp, !dbg !3838
  %fmul358 = fmul double 1.000000e+09, %fsub357, !dbg !3840
  store double %fmul358, ptr %y, align 8, !dbg !3840
  br label %loop.cond353, !dbg !3840

loop.exit359:                                     ; preds = %loop.cond353
  br label %loop.cond360, !dbg !3841

loop.cond360:                                     ; preds = %loop.exit428, %loop.exit359
  %300 = load i32, ptr %e2, align 4, !dbg !3842
  %gt361 = icmp sgt i32 %300, 0, !dbg !3842
  br i1 %gt361, label %loop.body362, label %loop.exit430, !dbg !3842

loop.body362:                                     ; preds = %loop.cond360
    #dbg_declare(ptr %carry, !3844, !DIExpression(), !3846)
  store i32 0, ptr %carry, align 4, !dbg !3847
    #dbg_declare(ptr %sh, !3848, !DIExpression(), !3849)
  store i32 29, ptr %x363, align 4
  %301 = load i32, ptr %e2, align 4
  store i32 %301, ptr %y364, align 4
  %302 = load i32, ptr %x363, align 4, !dbg !3850
  %303 = load i32, ptr %y364, align 4, !dbg !3853
  %304 = call i32 @llvm.smin.i32(i32 %302, i32 %303), !dbg !3853
  store i32 %304, ptr %sh, align 4, !dbg !3853
    #dbg_declare(ptr %d, !3854, !DIExpression(), !3856)
  %305 = load ptr, ptr %z, align 8, !dbg !3857
  %ptradd_any365 = getelementptr i8, ptr %305, i64 -4, !dbg !3858
  store ptr %ptradd_any365, ptr %d, align 8, !dbg !3858
  br label %loop.cond366, !dbg !3858

loop.cond366:                                     ; preds = %checkok400, %loop.body362
  %306 = load ptr, ptr %d, align 8, !dbg !3859
  %307 = load ptr, ptr %a, align 8, !dbg !3860
  %ge = icmp uge ptr %306, %307, !dbg !3859
  br i1 %ge, label %loop.body367, label %loop.exit404, !dbg !3859

loop.body367:                                     ; preds = %loop.cond366
    #dbg_declare(ptr %x368, !3861, !DIExpression(), !3863)
  %308 = load ptr, ptr %d, align 8, !dbg !3864
  %checknull369 = icmp eq ptr %308, null, !dbg !3864
  %309 = call i1 @llvm.expect.i1(i1 %checknull369, i1 false), !dbg !3864
  br i1 %309, label %panic370, label %checkok371, !dbg !3864

checkok371:                                       ; preds = %loop.body367
  %310 = ptrtoint ptr %308 to i64, !dbg !3864
  %311 = urem i64 %310, 4, !dbg !3864
  %312 = icmp ne i64 %311, 0, !dbg !3864
  %313 = call i1 @llvm.expect.i1(i1 %312, i1 false), !dbg !3864
  br i1 %313, label %panic372, label %checkok379, !dbg !3864

checkok379:                                       ; preds = %checkok371
  %314 = load i32, ptr %308, align 4, !dbg !3864
  %zext380 = zext i32 %314 to i64, !dbg !3864
  %315 = load i32, ptr %sh, align 4, !dbg !3865
  %zext381 = zext i32 %315 to i64, !dbg !3866
  %shift_exceeds = icmp uge i64 %zext381, 64, !dbg !3866
  %316 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !3866
  br i1 %316, label %panic382, label %checkok387, !dbg !3866

checkok387:                                       ; preds = %checkok379
  %shl = shl i64 %zext380, %zext381, !dbg !3866
  %317 = freeze i64 %shl, !dbg !3866
  %318 = load i32, ptr %carry, align 4, !dbg !3867
  %zext388 = zext i32 %318 to i64, !dbg !3867
  %add389 = add i64 %317, %zext388, !dbg !3866
  store i64 %add389, ptr %x368, align 8, !dbg !3866
  %319 = load ptr, ptr %d, align 8, !dbg !3868
  %checknull390 = icmp eq ptr %319, null, !dbg !3868
  %320 = call i1 @llvm.expect.i1(i1 %checknull390, i1 false), !dbg !3868
  br i1 %320, label %panic391, label %checkok392, !dbg !3868

checkok392:                                       ; preds = %checkok387
  %321 = ptrtoint ptr %319 to i64, !dbg !3868
  %322 = urem i64 %321, 4, !dbg !3868
  %323 = icmp ne i64 %322, 0, !dbg !3868
  %324 = call i1 @llvm.expect.i1(i1 %323, i1 false), !dbg !3868
  br i1 %324, label %panic393, label %checkok400, !dbg !3868

checkok400:                                       ; preds = %checkok392
  %325 = load i64, ptr %x368, align 8, !dbg !3869
  %smod = srem i64 %325, 1000000000, !dbg !3870
  %trunc401 = trunc i64 %smod to i32, !dbg !3870
  store i32 %trunc401, ptr %319, align 4, !dbg !3870
  %326 = load i64, ptr %x368, align 8, !dbg !3871
  %sdiv = sdiv i64 %326, 1000000000, !dbg !3872
  %trunc402 = trunc i64 %sdiv to i32, !dbg !3872
  store i32 %trunc402, ptr %carry, align 4, !dbg !3872
  %327 = load ptr, ptr %d, align 8, !dbg !3873
  %ptradd_any403 = getelementptr i8, ptr %327, i8 -4, !dbg !3873
  store ptr %ptradd_any403, ptr %d, align 8, !dbg !3873
  br label %loop.cond366, !dbg !3873

loop.exit404:                                     ; preds = %loop.cond366
  %328 = load i32, ptr %carry, align 4, !dbg !3874
  %i2b405 = icmp ne i32 %328, 0, !dbg !3874
  br i1 %i2b405, label %if.then406, label %if.exit419, !dbg !3874

if.then406:                                       ; preds = %loop.exit404
  %329 = load ptr, ptr %a, align 8, !dbg !3875
  %ptradd_any407 = getelementptr i8, ptr %329, i8 -4, !dbg !3875
  store ptr %ptradd_any407, ptr %a, align 8, !dbg !3875
  %checknull408 = icmp eq ptr %ptradd_any407, null, !dbg !3875
  %330 = call i1 @llvm.expect.i1(i1 %checknull408, i1 false), !dbg !3875
  br i1 %330, label %panic409, label %checkok410, !dbg !3875

checkok410:                                       ; preds = %if.then406
  %331 = ptrtoint ptr %ptradd_any407 to i64, !dbg !3876
  %332 = urem i64 %331, 4, !dbg !3876
  %333 = icmp ne i64 %332, 0, !dbg !3876
  %334 = call i1 @llvm.expect.i1(i1 %333, i1 false), !dbg !3876
  br i1 %334, label %panic411, label %checkok418, !dbg !3876

checkok418:                                       ; preds = %checkok410
  %335 = load i32, ptr %carry, align 4, !dbg !3877
  store i32 %335, ptr %ptradd_any407, align 4, !dbg !3877
  br label %if.exit419, !dbg !3877

if.exit419:                                       ; preds = %checkok418, %loop.exit404
  br label %loop.cond420, !dbg !3878

loop.cond420:                                     ; preds = %loop.body426, %if.exit419
  %336 = load ptr, ptr %z, align 8, !dbg !3879
  %337 = load ptr, ptr %a, align 8, !dbg !3881
  %gt421 = icmp ugt ptr %336, %337, !dbg !3879
  br i1 %gt421, label %and.rhs422, label %and.phi424, !dbg !3879

and.rhs422:                                       ; preds = %loop.cond420
  %338 = load ptr, ptr %z, align 8, !dbg !3882
  %ptradd423 = getelementptr inbounds i8, ptr %338, i64 -4, !dbg !3883
  %339 = load i32, ptr %ptradd423, align 4, !dbg !3883
  %i2nb = icmp eq i32 %339, 0, !dbg !3883
  br label %and.phi424, !dbg !3883

and.phi424:                                       ; preds = %and.rhs422, %loop.cond420
  %val425 = phi i1 [ false, %loop.cond420 ], [ %i2nb, %and.rhs422 ], !dbg !3883
  br i1 %val425, label %loop.body426, label %loop.exit428, !dbg !3883

loop.body426:                                     ; preds = %and.phi424
  %340 = load ptr, ptr %z, align 8, !dbg !3884
  %ptradd_any427 = getelementptr i8, ptr %340, i8 -4, !dbg !3884
  store ptr %ptradd_any427, ptr %z, align 8, !dbg !3884
  br label %loop.cond420, !dbg !3884

loop.exit428:                                     ; preds = %and.phi424
  %341 = load i32, ptr %e2, align 4, !dbg !3885
  %342 = load i32, ptr %sh, align 4, !dbg !3886
  %sub429 = sub i32 %341, %342, !dbg !3885
  store i32 %sub429, ptr %e2, align 4, !dbg !3885
  br label %loop.cond360, !dbg !3885

loop.exit430:                                     ; preds = %loop.cond360
  br label %loop.cond431, !dbg !3887

loop.cond431:                                     ; preds = %if.exit539, %loop.exit430
  %343 = load i32, ptr %e2, align 4, !dbg !3888
  %lt432 = icmp slt i32 %343, 0, !dbg !3888
  br i1 %lt432, label %loop.body433, label %loop.exit541, !dbg !3888

loop.body433:                                     ; preds = %loop.cond431
    #dbg_declare(ptr %carry434, !3890, !DIExpression(), !3892)
  store i32 0, ptr %carry434, align 4, !dbg !3893
    #dbg_declare(ptr %b, !3894, !DIExpression(), !3895)
  store ptr null, ptr %b, align 8, !dbg !3895
    #dbg_declare(ptr %sh435, !3896, !DIExpression(), !3897)
  store i32 9, ptr %x436, align 4
  %344 = load i32, ptr %e2, align 4, !dbg !3898
  %neg437 = sub i32 0, %344, !dbg !3898
  store i32 %neg437, ptr %y438, align 4
  %345 = load i32, ptr %x436, align 4, !dbg !3899
  %346 = load i32, ptr %y438, align 4, !dbg !3902
  %347 = call i32 @llvm.smin.i32(i32 %345, i32 %346), !dbg !3902
  store i32 %347, ptr %sh435, align 4, !dbg !3902
    #dbg_declare(ptr %need, !3903, !DIExpression(), !3904)
  %348 = load i64, ptr %p, align 8, !dbg !3905
  %add439 = add i64 %348, 17, !dbg !3905
  %add440 = add i64 %add439, 8, !dbg !3905
  %sdiv441 = sdiv i64 %add440, 9, !dbg !3905
  %add442 = add i64 1, %sdiv441, !dbg !3906
  %trunc443 = trunc i64 %add442 to i32, !dbg !3906
  store i32 %trunc443, ptr %need, align 4, !dbg !3906
    #dbg_declare(ptr %d444, !3907, !DIExpression(), !3909)
  %349 = load ptr, ptr %a, align 8, !dbg !3910
  store ptr %349, ptr %d444, align 8, !dbg !3910
  br label %loop.cond445, !dbg !3910

loop.cond445:                                     ; preds = %checkok519, %loop.body433
  %350 = load ptr, ptr %d444, align 8, !dbg !3911
  %351 = load ptr, ptr %z, align 8, !dbg !3912
  %lt446 = icmp ult ptr %350, %351, !dbg !3911
  br i1 %lt446, label %loop.body447, label %loop.exit521, !dbg !3911

loop.body447:                                     ; preds = %loop.cond445
    #dbg_declare(ptr %rm, !3913, !DIExpression(), !3915)
  %352 = load ptr, ptr %d444, align 8, !dbg !3916
  %checknull448 = icmp eq ptr %352, null, !dbg !3916
  %353 = call i1 @llvm.expect.i1(i1 %checknull448, i1 false), !dbg !3916
  br i1 %353, label %panic449, label %checkok450, !dbg !3916

checkok450:                                       ; preds = %loop.body447
  %354 = ptrtoint ptr %352 to i64, !dbg !3916
  %355 = urem i64 %354, 4, !dbg !3916
  %356 = icmp ne i64 %355, 0, !dbg !3916
  %357 = call i1 @llvm.expect.i1(i1 %356, i1 false), !dbg !3916
  br i1 %357, label %panic451, label %checkok458, !dbg !3916

checkok458:                                       ; preds = %checkok450
  %358 = load i32, ptr %352, align 4, !dbg !3916
  %359 = load i32, ptr %sh435, align 4, !dbg !3917
  %shift_underflow = icmp slt i32 %359, 0, !dbg !3918
  %360 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !3918
  br i1 %360, label %panic459, label %checkok464, !dbg !3918

checkok464:                                       ; preds = %checkok458
  %shift_exceeds465 = icmp sge i32 %359, 32, !dbg !3918
  %361 = call i1 @llvm.expect.i1(i1 %shift_exceeds465, i1 false), !dbg !3918
  br i1 %361, label %panic466, label %checkok471, !dbg !3918

checkok471:                                       ; preds = %checkok464
  %shl472 = shl i32 1, %359, !dbg !3918
  %362 = freeze i32 %shl472, !dbg !3918
  %sub473 = sub i32 %362, 1, !dbg !3918
  %and474 = and i32 %358, %sub473, !dbg !3919
  store i32 %and474, ptr %rm, align 4, !dbg !3919
  %363 = load ptr, ptr %d444, align 8, !dbg !3920
  %checknull475 = icmp eq ptr %363, null, !dbg !3920
  %364 = call i1 @llvm.expect.i1(i1 %checknull475, i1 false), !dbg !3920
  br i1 %364, label %panic476, label %checkok477, !dbg !3920

checkok477:                                       ; preds = %checkok471
  %365 = ptrtoint ptr %363 to i64, !dbg !3920
  %366 = urem i64 %365, 4, !dbg !3920
  %367 = icmp ne i64 %366, 0, !dbg !3920
  %368 = call i1 @llvm.expect.i1(i1 %367, i1 false), !dbg !3920
  br i1 %368, label %panic478, label %checkok485, !dbg !3920

checkok485:                                       ; preds = %checkok477
  %369 = load ptr, ptr %d444, align 8, !dbg !3921
  %checknull486 = icmp eq ptr %369, null, !dbg !3921
  %370 = call i1 @llvm.expect.i1(i1 %checknull486, i1 false), !dbg !3921
  br i1 %370, label %panic487, label %checkok488, !dbg !3921

checkok488:                                       ; preds = %checkok485
  %371 = ptrtoint ptr %369 to i64, !dbg !3921
  %372 = urem i64 %371, 4, !dbg !3921
  %373 = icmp ne i64 %372, 0, !dbg !3921
  %374 = call i1 @llvm.expect.i1(i1 %373, i1 false), !dbg !3921
  br i1 %374, label %panic489, label %checkok496, !dbg !3921

checkok496:                                       ; preds = %checkok488
  %375 = load i32, ptr %369, align 4, !dbg !3921
  %376 = load i32, ptr %sh435, align 4, !dbg !3922
  %shift_exceeds497 = icmp uge i32 %376, 32, !dbg !3923
  %377 = call i1 @llvm.expect.i1(i1 %shift_exceeds497, i1 false), !dbg !3923
  br i1 %377, label %panic498, label %checkok503, !dbg !3923

checkok503:                                       ; preds = %checkok496
  %lshr504 = lshr i32 %375, %376, !dbg !3923
  %378 = freeze i32 %lshr504, !dbg !3923
  %379 = load i32, ptr %carry434, align 4, !dbg !3924
  %add505 = add i32 %378, %379, !dbg !3923
  store i32 %add505, ptr %363, align 4, !dbg !3923
  %380 = load i32, ptr %sh435, align 4, !dbg !3925
  %shift_underflow506 = icmp slt i32 %380, 0, !dbg !3926
  %381 = call i1 @llvm.expect.i1(i1 %shift_underflow506, i1 false), !dbg !3926
  br i1 %381, label %panic507, label %checkok512, !dbg !3926

checkok512:                                       ; preds = %checkok503
  %shift_exceeds513 = icmp sge i32 %380, 32, !dbg !3926
  %382 = call i1 @llvm.expect.i1(i1 %shift_exceeds513, i1 false), !dbg !3926
  br i1 %382, label %panic514, label %checkok519, !dbg !3926

checkok519:                                       ; preds = %checkok512
  %ashr = ashr i32 1000000000, %380, !dbg !3926
  %383 = freeze i32 %ashr, !dbg !3926
  %384 = load i32, ptr %rm, align 4, !dbg !3927
  %mul = mul i32 %383, %384, !dbg !3926
  store i32 %mul, ptr %carry434, align 4, !dbg !3926
  %385 = load ptr, ptr %d444, align 8, !dbg !3928
  %ptradd_any520 = getelementptr i8, ptr %385, i8 4, !dbg !3928
  store ptr %ptradd_any520, ptr %d444, align 8, !dbg !3928
  br label %loop.cond445, !dbg !3928

loop.exit521:                                     ; preds = %loop.cond445
  %386 = load ptr, ptr %a, align 8, !dbg !3929
  %387 = load i32, ptr %386, align 4, !dbg !3930
  %i2nb522 = icmp eq i32 %387, 0, !dbg !3930
  br i1 %i2nb522, label %if.then523, label %if.exit525, !dbg !3930

if.then523:                                       ; preds = %loop.exit521
  %388 = load ptr, ptr %a, align 8, !dbg !3931
  %ptradd_any524 = getelementptr i8, ptr %388, i8 4, !dbg !3931
  store ptr %ptradd_any524, ptr %a, align 8, !dbg !3931
  br label %if.exit525, !dbg !3931

if.exit525:                                       ; preds = %if.then523, %loop.exit521
  %389 = load i32, ptr %carry434, align 4, !dbg !3932
  %i2b526 = icmp ne i32 %389, 0, !dbg !3932
  br i1 %i2b526, label %if.then527, label %if.exit529, !dbg !3932

if.then527:                                       ; preds = %if.exit525
  %390 = load ptr, ptr %z, align 8, !dbg !3933
  %ptradd_any528 = getelementptr i8, ptr %390, i8 4, !dbg !3933
  store ptr %ptradd_any528, ptr %z, align 8, !dbg !3933
  %391 = load i32, ptr %carry434, align 4, !dbg !3934
  store i32 %391, ptr %390, align 4, !dbg !3934
  br label %if.exit529, !dbg !3934

if.exit529:                                       ; preds = %if.then527, %if.exit525
  %392 = load i32, ptr %formatting, align 4, !dbg !3935
  %eq530 = icmp eq i32 %392, 0, !dbg !3935
  br i1 %eq530, label %cond.lhs531, label %cond.rhs532, !dbg !3935

cond.lhs531:                                      ; preds = %if.exit529
  %393 = load ptr, ptr %r, align 8, !dbg !3936
  br label %cond.phi533, !dbg !3936

cond.rhs532:                                      ; preds = %if.exit529
  %394 = load ptr, ptr %a, align 8, !dbg !3937
  br label %cond.phi533, !dbg !3937

cond.phi533:                                      ; preds = %cond.rhs532, %cond.lhs531
  %val534 = phi ptr [ %393, %cond.lhs531 ], [ %394, %cond.rhs532 ], !dbg !3937
  store ptr %val534, ptr %b, align 8, !dbg !3937
  %395 = load ptr, ptr %z, align 8, !dbg !3938
  %396 = load ptr, ptr %b, align 8, !dbg !3939
  %397 = ptrtoint ptr %396 to i64, !dbg !3938
  %398 = ptrtoint ptr %395 to i64, !dbg !3938
  %399 = sub i64 %398, %397, !dbg !3938
  %400 = sdiv exact i64 %399, 4, !dbg !3938
  %401 = load i32, ptr %need, align 4, !dbg !3940
  %sext535 = sext i32 %401 to i64, !dbg !3940
  %gt536 = icmp sgt i64 %400, %sext535, !dbg !3938
  br i1 %gt536, label %if.then537, label %if.exit539, !dbg !3938

if.then537:                                       ; preds = %cond.phi533
  %402 = load ptr, ptr %b, align 8, !dbg !3941
  %403 = load i32, ptr %need, align 4, !dbg !3942
  %sext538 = sext i32 %403 to i64, !dbg !3942
  %ptroffset_any = getelementptr [4 x i8], ptr %402, i64 %sext538, !dbg !3942
  store ptr %ptroffset_any, ptr %z, align 8, !dbg !3942
  br label %if.exit539, !dbg !3942

if.exit539:                                       ; preds = %if.then537, %cond.phi533
  %404 = load i32, ptr %e2, align 4, !dbg !3943
  %405 = load i32, ptr %sh435, align 4, !dbg !3944
  %add540 = add i32 %404, %405, !dbg !3943
  store i32 %add540, ptr %e2, align 4, !dbg !3943
  br label %loop.cond431, !dbg !3943

loop.exit541:                                     ; preds = %loop.cond431
    #dbg_declare(ptr %e542, !3945, !DIExpression(), !3946)
  store i32 0, ptr %e542, align 4, !dbg !3946
  %406 = load ptr, ptr %a, align 8, !dbg !3947
  %407 = load ptr, ptr %z, align 8, !dbg !3948
  %lt543 = icmp ult ptr %406, %407, !dbg !3947
  br i1 %lt543, label %if.then544, label %if.exit563, !dbg !3947

if.then544:                                       ; preds = %loop.exit541
    #dbg_declare(ptr %i, !3949, !DIExpression(), !3952)
  store i32 10, ptr %i, align 4, !dbg !3953
  %408 = load ptr, ptr %r, align 8, !dbg !3954
  %409 = load ptr, ptr %a, align 8, !dbg !3955
  %410 = ptrtoint ptr %409 to i64, !dbg !3954
  %411 = ptrtoint ptr %408 to i64, !dbg !3954
  %412 = sub i64 %411, %410, !dbg !3954
  %413 = sdiv exact i64 %412, 4, !dbg !3954
  %mul545 = mul i64 9, %413, !dbg !3956
  %trunc546 = trunc i64 %mul545 to i32, !dbg !3956
  store i32 %trunc546, ptr %e542, align 4, !dbg !3956
  br label %loop.cond547, !dbg !3956

loop.cond547:                                     ; preds = %loop.body559, %if.then544
  %414 = load ptr, ptr %a, align 8, !dbg !3957
  %checknull548 = icmp eq ptr %414, null, !dbg !3957
  %415 = call i1 @llvm.expect.i1(i1 %checknull548, i1 false), !dbg !3957
  br i1 %415, label %panic549, label %checkok550, !dbg !3957

checkok550:                                       ; preds = %loop.cond547
  %416 = ptrtoint ptr %414 to i64, !dbg !3957
  %417 = urem i64 %416, 4, !dbg !3957
  %418 = icmp ne i64 %417, 0, !dbg !3957
  %419 = call i1 @llvm.expect.i1(i1 %418, i1 false), !dbg !3957
  br i1 %419, label %panic551, label %checkok558, !dbg !3957

checkok558:                                       ; preds = %checkok550
  %420 = load i32, ptr %414, align 4, !dbg !3957
  %421 = load i32, ptr %i, align 4, !dbg !3958
  %le = icmp sle i32 %421, %420, !dbg !3959
  %check = icmp slt i32 %420, 0, !dbg !3959
  %siui-le = or i1 %check, %le, !dbg !3959
  br i1 %siui-le, label %loop.body559, label %loop.exit562, !dbg !3959

loop.body559:                                     ; preds = %checkok558
  %422 = load i32, ptr %i, align 4, !dbg !3960
  %mul560 = mul i32 %422, 10, !dbg !3960
  store i32 %mul560, ptr %i, align 4, !dbg !3960
  %423 = load i32, ptr %e542, align 4, !dbg !3961
  %add561 = add i32 %423, 1, !dbg !3961
  store i32 %add561, ptr %e542, align 4, !dbg !3961
  br label %loop.cond547, !dbg !3961

loop.exit562:                                     ; preds = %checkok558
  br label %if.exit563, !dbg !3961

if.exit563:                                       ; preds = %loop.exit562, %loop.exit541
    #dbg_declare(ptr %j, !3962, !DIExpression(), !3963)
  %424 = load i64, ptr %p, align 8, !dbg !3964
  %425 = load i32, ptr %formatting, align 4, !dbg !3965
  %eq564 = icmp eq i32 %425, 0, !dbg !3965
  br i1 %eq564, label %cond.lhs565, label %cond.rhs566, !dbg !3965

cond.lhs565:                                      ; preds = %if.exit563
  br label %cond.phi574, !dbg !3966

cond.rhs566:                                      ; preds = %if.exit563
  %426 = load i32, ptr %e542, align 4, !dbg !3967
  %427 = load i32, ptr %formatting, align 4, !dbg !3968
  %eq567 = icmp eq i32 %427, 2, !dbg !3968
  br i1 %eq567, label %and.rhs568, label %and.phi570, !dbg !3968

and.rhs568:                                       ; preds = %cond.rhs566
  %428 = load i64, ptr %p, align 8, !dbg !3969
  %i2b569 = icmp ne i64 %428, 0, !dbg !3969
  br label %and.phi570, !dbg !3969

and.phi570:                                       ; preds = %and.rhs568, %cond.rhs566
  %val571 = phi i1 [ false, %cond.rhs566 ], [ %i2b569, %and.rhs568 ], !dbg !3969
  %zext572 = zext i1 %val571 to i32, !dbg !3969
  %sub573 = sub i32 %426, %zext572, !dbg !3967
  br label %cond.phi574, !dbg !3967

cond.phi574:                                      ; preds = %and.phi570, %cond.lhs565
  %val575 = phi i32 [ 0, %cond.lhs565 ], [ %sub573, %and.phi570 ], !dbg !3967
  %sext576 = sext i32 %val575 to i64, !dbg !3967
  %sub577 = sub i64 %424, %sext576, !dbg !3970
  %trunc578 = trunc i64 %sub577 to i32, !dbg !3970
  store i32 %trunc578, ptr %j, align 4, !dbg !3970
  %429 = load i32, ptr %j, align 4, !dbg !3971
  %sext579 = sext i32 %429 to i64, !dbg !3971
  %430 = load ptr, ptr %z, align 8, !dbg !3972
  %431 = load ptr, ptr %r, align 8, !dbg !3973
  %432 = ptrtoint ptr %431 to i64, !dbg !3972
  %433 = ptrtoint ptr %430 to i64, !dbg !3972
  %434 = sub i64 %433, %432, !dbg !3972
  %435 = sdiv exact i64 %434, 4, !dbg !3972
  %sub580 = sub i64 %435, 1, !dbg !3972
  %mul581 = mul i64 9, %sub580, !dbg !3974
  %lt582 = icmp slt i64 %sext579, %mul581, !dbg !3971
  br i1 %lt582, label %if.then583, label %if.exit801, !dbg !3971

if.then583:                                       ; preds = %cond.phi574
    #dbg_declare(ptr %x584, !3975, !DIExpression(), !3977)
  store i32 0, ptr %x584, align 4, !dbg !3977
    #dbg_declare(ptr %d585, !3978, !DIExpression(), !3979)
  %436 = load ptr, ptr %r, align 8, !dbg !3980
  %437 = load i32, ptr %j, align 4, !dbg !3981
  %add586 = add i32 %437, 9216, !dbg !3981
  %sdiv587 = sdiv i32 %add586, 9, !dbg !3981
  %sub588 = sub i32 %sdiv587, 1024, !dbg !3981
  %sext589 = sext i32 %sub588 to i64, !dbg !3981
  %add590 = add i64 1, %sext589, !dbg !3980
  %ptroffset_any591 = getelementptr [4 x i8], ptr %436, i64 %add590, !dbg !3980
  store ptr %ptroffset_any591, ptr %d585, align 8, !dbg !3980
  %438 = load i32, ptr %j, align 4, !dbg !3982
  %add592 = add i32 %438, 9216, !dbg !3982
  store i32 %add592, ptr %j, align 4, !dbg !3982
  %439 = load i32, ptr %j, align 4, !dbg !3983
  %smod593 = srem i32 %439, 9, !dbg !3983
  store i32 %smod593, ptr %j, align 4, !dbg !3983
    #dbg_declare(ptr %i594, !3984, !DIExpression(), !3985)
  store i32 0, ptr %i594, align 4, !dbg !3985
  store i32 10, ptr %i594, align 4, !dbg !3986
  %440 = load i32, ptr %j, align 4, !dbg !3988
  %add595 = add i32 %440, 1, !dbg !3988
  store i32 %add595, ptr %j, align 4, !dbg !3988
  br label %loop.cond596, !dbg !3988

loop.cond596:                                     ; preds = %loop.body598, %if.then583
  %441 = load i32, ptr %j, align 4, !dbg !3989
  %lt597 = icmp slt i32 %441, 9, !dbg !3989
  br i1 %lt597, label %loop.body598, label %loop.exit601, !dbg !3989

loop.body598:                                     ; preds = %loop.cond596
  %442 = load i32, ptr %i594, align 4, !dbg !3990
  %mul599 = mul i32 %442, 10, !dbg !3990
  store i32 %mul599, ptr %i594, align 4, !dbg !3990
  %443 = load i32, ptr %j, align 4, !dbg !3991
  %add600 = add i32 %443, 1, !dbg !3991
  store i32 %add600, ptr %j, align 4, !dbg !3991
  br label %loop.cond596, !dbg !3991

loop.exit601:                                     ; preds = %loop.cond596
  %444 = load ptr, ptr %d585, align 8, !dbg !3992
  %checknull602 = icmp eq ptr %444, null, !dbg !3992
  %445 = call i1 @llvm.expect.i1(i1 %checknull602, i1 false), !dbg !3992
  br i1 %445, label %panic603, label %checkok604, !dbg !3992

checkok604:                                       ; preds = %loop.exit601
  %446 = ptrtoint ptr %444 to i64, !dbg !3992
  %447 = urem i64 %446, 4, !dbg !3992
  %448 = icmp ne i64 %447, 0, !dbg !3992
  %449 = call i1 @llvm.expect.i1(i1 %448, i1 false), !dbg !3992
  br i1 %449, label %panic605, label %checkok612, !dbg !3992

checkok612:                                       ; preds = %checkok604
  %450 = load i32, ptr %444, align 4, !dbg !3992
  %451 = load i32, ptr %i594, align 4, !dbg !3993
  %zero = icmp eq i32 %451, 0, !dbg !3994
  %452 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !3994
  br i1 %452, label %panic613, label %checkok614, !dbg !3994

checkok614:                                       ; preds = %checkok612
  %smod615 = srem i32 %450, %451, !dbg !3994
  store i32 %smod615, ptr %x584, align 4, !dbg !3994
  %453 = load i32, ptr %x584, align 4, !dbg !3995
  %i2b616 = icmp ne i32 %453, 0, !dbg !3995
  br i1 %i2b616, label %or.phi620, label %or.rhs617, !dbg !3995

or.rhs617:                                        ; preds = %checkok614
  %454 = load ptr, ptr %d585, align 8, !dbg !3996
  %ptradd_any618 = getelementptr i8, ptr %454, i64 4, !dbg !3997
  %455 = load ptr, ptr %z, align 8, !dbg !3998
  %neq619 = icmp ne ptr %ptradd_any618, %455, !dbg !3996
  br label %or.phi620, !dbg !3996

or.phi620:                                        ; preds = %or.rhs617, %checkok614
  %val621 = phi i1 [ true, %checkok614 ], [ %neq619, %or.rhs617 ], !dbg !3996
  br i1 %val621, label %if.then622, label %if.exit795, !dbg !3996

if.then622:                                       ; preds = %or.phi620
    #dbg_declare(ptr %round623, !3999, !DIExpression(), !4001)
  store double 0x4340000000000000, ptr %round623, align 8, !dbg !4002
    #dbg_declare(ptr %small, !4003, !DIExpression(), !4004)
  store double 0.000000e+00, ptr %small, align 8, !dbg !4004
  %456 = load ptr, ptr %d585, align 8, !dbg !4005
  %checknull624 = icmp eq ptr %456, null, !dbg !4005
  %457 = call i1 @llvm.expect.i1(i1 %checknull624, i1 false), !dbg !4005
  br i1 %457, label %panic625, label %checkok626, !dbg !4005

checkok626:                                       ; preds = %if.then622
  %458 = ptrtoint ptr %456 to i64, !dbg !4005
  %459 = urem i64 %458, 4, !dbg !4005
  %460 = icmp ne i64 %459, 0, !dbg !4005
  %461 = call i1 @llvm.expect.i1(i1 %460, i1 false), !dbg !4005
  br i1 %461, label %panic627, label %checkok634, !dbg !4005

checkok634:                                       ; preds = %checkok626
  %462 = load i32, ptr %456, align 4, !dbg !4005
  %463 = load i32, ptr %i594, align 4, !dbg !4006
  %zero635 = icmp eq i32 %463, 0, !dbg !4007
  %464 = call i1 @llvm.expect.i1(i1 %zero635, i1 false), !dbg !4007
  br i1 %464, label %panic636, label %checkok637, !dbg !4007

checkok637:                                       ; preds = %checkok634
  %sdiv638 = sdiv i32 %462, %463, !dbg !4007
  %and639 = and i32 %sdiv638, 1, !dbg !4007
  %i2b640 = icmp ne i32 %and639, 0, !dbg !4007
  br i1 %i2b640, label %or.phi653, label %or.rhs641, !dbg !4007

or.rhs641:                                        ; preds = %checkok637
  %465 = load i32, ptr %i594, align 4, !dbg !4008
  %eq642 = icmp eq i32 %465, 1000000000, !dbg !4008
  br i1 %eq642, label %and.rhs643, label %and.phi645, !dbg !4008

and.rhs643:                                       ; preds = %or.rhs641
  %466 = load ptr, ptr %d585, align 8, !dbg !4009
  %467 = load ptr, ptr %a, align 8, !dbg !4010
  %gt644 = icmp ugt ptr %466, %467, !dbg !4009
  br label %and.phi645, !dbg !4009

and.phi645:                                       ; preds = %and.rhs643, %or.rhs641
  %val646 = phi i1 [ false, %or.rhs641 ], [ %gt644, %and.rhs643 ], !dbg !4009
  br i1 %val646, label %and.rhs647, label %and.phi651, !dbg !4009

and.rhs647:                                       ; preds = %and.phi645
  %468 = load ptr, ptr %d585, align 8, !dbg !4011
  %ptradd648 = getelementptr inbounds i8, ptr %468, i64 -4, !dbg !4012
  %469 = load i32, ptr %ptradd648, align 4, !dbg !4012
  %and649 = and i32 %469, 1, !dbg !4011
  %i2b650 = icmp ne i32 %and649, 0, !dbg !4011
  br label %and.phi651, !dbg !4011

and.phi651:                                       ; preds = %and.rhs647, %and.phi645
  %val652 = phi i1 [ false, %and.phi645 ], [ %i2b650, %and.rhs647 ], !dbg !4011
  br label %or.phi653, !dbg !4011

or.phi653:                                        ; preds = %and.phi651, %checkok637
  %val654 = phi i1 [ true, %checkok637 ], [ %val652, %and.phi651 ], !dbg !4011
  br i1 %val654, label %if.then655, label %if.exit657, !dbg !4011

if.then655:                                       ; preds = %or.phi653
  %470 = load double, ptr %round623, align 8, !dbg !4013
  %fadd656 = fadd double %470, 2.000000e+00, !dbg !4013
  store double %fadd656, ptr %round623, align 8, !dbg !4013
  br label %if.exit657, !dbg !4013

if.exit657:                                       ; preds = %if.then655, %or.phi653
  store i8 1, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %if.exit657
  %471 = load i8, ptr %switch, align 1
  %472 = trunc i8 %471 to i1
  %473 = load i32, ptr %x584, align 4, !dbg !4015
  %474 = load i32, ptr %i594, align 4, !dbg !4017
  %sdiv658 = sdiv i32 %474, 2, !dbg !4017
  %gt659 = icmp sgt i32 %sdiv658, %473, !dbg !4015
  %check660 = icmp sge i32 %473, 0, !dbg !4015
  %siui-gt = and i1 %check660, %gt659, !dbg !4015
  %eq661 = icmp eq i1 %siui-gt, %472, !dbg !4015
  br i1 %eq661, label %switch.case, label %next_if, !dbg !4015

switch.case:                                      ; preds = %switch.entry
  store double 5.000000e-01, ptr %small, align 8, !dbg !4018
  br label %switch.exit, !dbg !4018

next_if:                                          ; preds = %switch.entry
  %475 = load i32, ptr %x584, align 4, !dbg !4020
  %476 = load i32, ptr %i594, align 4, !dbg !4021
  %sdiv662 = sdiv i32 %476, 2, !dbg !4021
  %eq663 = icmp eq i32 %sdiv662, %475, !dbg !4020
  %check664 = icmp sge i32 %sdiv662, 0, !dbg !4020
  %siui-eq = and i1 %check664, %eq663, !dbg !4020
  br i1 %siui-eq, label %and.rhs665, label %and.phi668, !dbg !4020

and.rhs665:                                       ; preds = %next_if
  %477 = load ptr, ptr %d585, align 8, !dbg !4022
  %ptradd_any666 = getelementptr i8, ptr %477, i64 4, !dbg !4023
  %478 = load ptr, ptr %z, align 8, !dbg !4024
  %eq667 = icmp eq ptr %ptradd_any666, %478, !dbg !4022
  br label %and.phi668, !dbg !4022

and.phi668:                                       ; preds = %and.rhs665, %next_if
  %val669 = phi i1 [ false, %next_if ], [ %eq667, %and.rhs665 ], !dbg !4022
  %eq670 = icmp eq i1 %val669, %472, !dbg !4022
  br i1 %eq670, label %switch.case671, label %next_if672, !dbg !4022

switch.case671:                                   ; preds = %and.phi668
  store double 1.000000e+00, ptr %small, align 8, !dbg !4025
  br label %switch.exit, !dbg !4025

next_if672:                                       ; preds = %and.phi668
  br label %switch.default, !dbg !4025

switch.default:                                   ; preds = %next_if672
  store double 1.500000e+00, ptr %small, align 8, !dbg !4027
  br label %switch.exit, !dbg !4027

switch.exit:                                      ; preds = %switch.default, %switch.case671, %switch.case
  %479 = load i64, ptr %pl, align 8, !dbg !4029
  %i2b673 = icmp ne i64 %479, 0, !dbg !4029
  br i1 %i2b673, label %and.rhs674, label %and.phi675, !dbg !4029

and.rhs674:                                       ; preds = %switch.exit
  %480 = load i8, ptr %is_neg, align 1, !dbg !4030
  %481 = trunc i8 %480 to i1, !dbg !4030
  br label %and.phi675, !dbg !4030

and.phi675:                                       ; preds = %and.rhs674, %switch.exit
  %val676 = phi i1 [ false, %switch.exit ], [ %481, %and.rhs674 ], !dbg !4030
  br i1 %val676, label %if.then677, label %if.exit680, !dbg !4030

if.then677:                                       ; preds = %and.phi675
  %482 = load double, ptr %round623, align 8, !dbg !4031
  %fmul678 = fmul double %482, -1.000000e+00, !dbg !4031
  store double %fmul678, ptr %round623, align 8, !dbg !4031
  %483 = load double, ptr %small, align 8, !dbg !4033
  %fmul679 = fmul double %483, -1.000000e+00, !dbg !4033
  store double %fmul679, ptr %small, align 8, !dbg !4033
  br label %if.exit680, !dbg !4033

if.exit680:                                       ; preds = %if.then677, %and.phi675
  %484 = load ptr, ptr %d585, align 8, !dbg !4034
  %checknull681 = icmp eq ptr %484, null, !dbg !4034
  %485 = call i1 @llvm.expect.i1(i1 %checknull681, i1 false), !dbg !4034
  br i1 %485, label %panic682, label %checkok683, !dbg !4034

checkok683:                                       ; preds = %if.exit680
  %486 = ptrtoint ptr %484 to i64, !dbg !4034
  %487 = urem i64 %486, 4, !dbg !4034
  %488 = icmp ne i64 %487, 0, !dbg !4034
  %489 = call i1 @llvm.expect.i1(i1 %488, i1 false), !dbg !4034
  br i1 %489, label %panic684, label %checkok691, !dbg !4034

checkok691:                                       ; preds = %checkok683
  %490 = load i32, ptr %484, align 4, !dbg !4034
  %491 = load i32, ptr %x584, align 4, !dbg !4035
  %sub692 = sub i32 %490, %491, !dbg !4036
  store i32 %sub692, ptr %484, align 4, !dbg !4036
  %492 = load double, ptr %round623, align 8, !dbg !4037
  %493 = load double, ptr %small, align 8, !dbg !4038
  %fadd693 = fadd double %492, %493, !dbg !4037
  %494 = load double, ptr %round623, align 8, !dbg !4039
  %neq694 = fcmp one double %fadd693, %494, !dbg !4037
  br i1 %neq694, label %if.then695, label %if.exit794, !dbg !4037

if.then695:                                       ; preds = %checkok691
  %495 = load ptr, ptr %d585, align 8, !dbg !4040
  %checknull696 = icmp eq ptr %495, null, !dbg !4040
  %496 = call i1 @llvm.expect.i1(i1 %checknull696, i1 false), !dbg !4040
  br i1 %496, label %panic697, label %checkok698, !dbg !4040

checkok698:                                       ; preds = %if.then695
  %497 = ptrtoint ptr %495 to i64, !dbg !4040
  %498 = urem i64 %497, 4, !dbg !4040
  %499 = icmp ne i64 %498, 0, !dbg !4040
  %500 = call i1 @llvm.expect.i1(i1 %499, i1 false), !dbg !4040
  br i1 %500, label %panic699, label %checkok706, !dbg !4040

checkok706:                                       ; preds = %checkok698
  %501 = load ptr, ptr %d585, align 8, !dbg !4042
  %checknull707 = icmp eq ptr %501, null, !dbg !4042
  %502 = call i1 @llvm.expect.i1(i1 %checknull707, i1 false), !dbg !4042
  br i1 %502, label %panic708, label %checkok709, !dbg !4042

checkok709:                                       ; preds = %checkok706
  %503 = ptrtoint ptr %501 to i64, !dbg !4042
  %504 = urem i64 %503, 4, !dbg !4042
  %505 = icmp ne i64 %504, 0, !dbg !4042
  %506 = call i1 @llvm.expect.i1(i1 %505, i1 false), !dbg !4042
  br i1 %506, label %panic710, label %checkok717, !dbg !4042

checkok717:                                       ; preds = %checkok709
  %507 = load i32, ptr %501, align 4, !dbg !4042
  %508 = load i32, ptr %i594, align 4, !dbg !4043
  %add718 = add i32 %507, %508, !dbg !4044
  store i32 %add718, ptr %495, align 4, !dbg !4044
  br label %loop.cond719, !dbg !4045

loop.cond719:                                     ; preds = %checkok770, %checkok717
  %509 = load ptr, ptr %d585, align 8, !dbg !4046
  %checknull720 = icmp eq ptr %509, null, !dbg !4046
  %510 = call i1 @llvm.expect.i1(i1 %checknull720, i1 false), !dbg !4046
  br i1 %510, label %panic721, label %checkok722, !dbg !4046

checkok722:                                       ; preds = %loop.cond719
  %511 = ptrtoint ptr %509 to i64, !dbg !4046
  %512 = urem i64 %511, 4, !dbg !4046
  %513 = icmp ne i64 %512, 0, !dbg !4046
  %514 = call i1 @llvm.expect.i1(i1 %513, i1 false), !dbg !4046
  br i1 %514, label %panic723, label %checkok730, !dbg !4046

checkok730:                                       ; preds = %checkok722
  %515 = load i32, ptr %509, align 4, !dbg !4046
  %lt731 = icmp ult i32 999999999, %515, !dbg !4048
  br i1 %lt731, label %loop.body732, label %loop.exit772, !dbg !4048

loop.body732:                                     ; preds = %checkok730
  %516 = load ptr, ptr %d585, align 8, !dbg !4049
  %ptradd_any733 = getelementptr i8, ptr %516, i8 -4, !dbg !4049
  store ptr %ptradd_any733, ptr %d585, align 8, !dbg !4049
  %checknull734 = icmp eq ptr %516, null, !dbg !4049
  %517 = call i1 @llvm.expect.i1(i1 %checknull734, i1 false), !dbg !4049
  br i1 %517, label %panic735, label %checkok736, !dbg !4049

checkok736:                                       ; preds = %loop.body732
  %518 = ptrtoint ptr %516 to i64, !dbg !4049
  %519 = urem i64 %518, 4, !dbg !4049
  %520 = icmp ne i64 %519, 0, !dbg !4049
  %521 = call i1 @llvm.expect.i1(i1 %520, i1 false), !dbg !4049
  br i1 %521, label %panic737, label %checkok744, !dbg !4049

checkok744:                                       ; preds = %checkok736
  store i32 0, ptr %516, align 4, !dbg !4051
  %522 = load ptr, ptr %d585, align 8, !dbg !4052
  %523 = load ptr, ptr %a, align 8, !dbg !4053
  %lt745 = icmp ult ptr %522, %523, !dbg !4052
  br i1 %lt745, label %if.then746, label %if.exit759, !dbg !4052

if.then746:                                       ; preds = %checkok744
  %524 = load ptr, ptr %a, align 8, !dbg !4054
  %ptradd_any747 = getelementptr i8, ptr %524, i8 -4, !dbg !4054
  store ptr %ptradd_any747, ptr %a, align 8, !dbg !4054
  %checknull748 = icmp eq ptr %ptradd_any747, null, !dbg !4054
  %525 = call i1 @llvm.expect.i1(i1 %checknull748, i1 false), !dbg !4054
  br i1 %525, label %panic749, label %checkok750, !dbg !4054

checkok750:                                       ; preds = %if.then746
  %526 = ptrtoint ptr %ptradd_any747 to i64, !dbg !4055
  %527 = urem i64 %526, 4, !dbg !4055
  %528 = icmp ne i64 %527, 0, !dbg !4055
  %529 = call i1 @llvm.expect.i1(i1 %528, i1 false), !dbg !4055
  br i1 %529, label %panic751, label %checkok758, !dbg !4055

checkok758:                                       ; preds = %checkok750
  store i32 0, ptr %ptradd_any747, align 4, !dbg !4056
  br label %if.exit759, !dbg !4056

if.exit759:                                       ; preds = %checkok758, %checkok744
  %530 = load ptr, ptr %d585, align 8, !dbg !4057
  %checknull760 = icmp eq ptr %530, null, !dbg !4057
  %531 = call i1 @llvm.expect.i1(i1 %checknull760, i1 false), !dbg !4057
  br i1 %531, label %panic761, label %checkok762, !dbg !4057

checkok762:                                       ; preds = %if.exit759
  %532 = ptrtoint ptr %530 to i64, !dbg !4057
  %533 = urem i64 %532, 4, !dbg !4057
  %534 = icmp ne i64 %533, 0, !dbg !4057
  %535 = call i1 @llvm.expect.i1(i1 %534, i1 false), !dbg !4057
  br i1 %535, label %panic763, label %checkok770, !dbg !4057

checkok770:                                       ; preds = %checkok762
  %536 = load i32, ptr %530, align 4, !dbg !4058
  %add771 = add i32 %536, 1, !dbg !4058
  store i32 %add771, ptr %530, align 4, !dbg !4058
  br label %loop.cond719, !dbg !4058

loop.exit772:                                     ; preds = %checkok730
  store i32 10, ptr %i594, align 4, !dbg !4059
  %537 = load ptr, ptr %r, align 8, !dbg !4061
  %538 = load ptr, ptr %a, align 8, !dbg !4062
  %539 = ptrtoint ptr %538 to i64, !dbg !4061
  %540 = ptrtoint ptr %537 to i64, !dbg !4061
  %541 = sub i64 %540, %539, !dbg !4061
  %542 = sdiv exact i64 %541, 4, !dbg !4061
  %mul773 = mul i64 9, %542, !dbg !4063
  %trunc774 = trunc i64 %mul773 to i32, !dbg !4063
  store i32 %trunc774, ptr %e542, align 4, !dbg !4063
  br label %loop.cond775, !dbg !4063

loop.cond775:                                     ; preds = %loop.body790, %loop.exit772
  %543 = load ptr, ptr %a, align 8, !dbg !4064
  %checknull776 = icmp eq ptr %543, null, !dbg !4064
  %544 = call i1 @llvm.expect.i1(i1 %checknull776, i1 false), !dbg !4064
  br i1 %544, label %panic777, label %checkok778, !dbg !4064

checkok778:                                       ; preds = %loop.cond775
  %545 = ptrtoint ptr %543 to i64, !dbg !4064
  %546 = urem i64 %545, 4, !dbg !4064
  %547 = icmp ne i64 %546, 0, !dbg !4064
  %548 = call i1 @llvm.expect.i1(i1 %547, i1 false), !dbg !4064
  br i1 %548, label %panic779, label %checkok786, !dbg !4064

checkok786:                                       ; preds = %checkok778
  %549 = load i32, ptr %543, align 4, !dbg !4064
  %550 = load i32, ptr %i594, align 4, !dbg !4065
  %le787 = icmp sle i32 %550, %549, !dbg !4066
  %check788 = icmp slt i32 %549, 0, !dbg !4066
  %siui-le789 = or i1 %check788, %le787, !dbg !4066
  br i1 %siui-le789, label %loop.body790, label %loop.exit793, !dbg !4066

loop.body790:                                     ; preds = %checkok786
  %551 = load i32, ptr %i594, align 4, !dbg !4067
  %mul791 = mul i32 %551, 10, !dbg !4067
  store i32 %mul791, ptr %i594, align 4, !dbg !4067
  %552 = load i32, ptr %e542, align 4, !dbg !4068
  %add792 = add i32 %552, 1, !dbg !4068
  store i32 %add792, ptr %e542, align 4, !dbg !4068
  br label %loop.cond775, !dbg !4068

loop.exit793:                                     ; preds = %checkok786
  br label %if.exit794, !dbg !4068

if.exit794:                                       ; preds = %loop.exit793, %checkok691
  br label %if.exit795, !dbg !4068

if.exit795:                                       ; preds = %if.exit794, %or.phi620
  %553 = load ptr, ptr %z, align 8, !dbg !4069
  %554 = load ptr, ptr %d585, align 8, !dbg !4070
  %ptradd_any796 = getelementptr i8, ptr %554, i64 4, !dbg !4071
  %gt797 = icmp ugt ptr %553, %ptradd_any796, !dbg !4069
  br i1 %gt797, label %if.then798, label %if.exit800, !dbg !4069

if.then798:                                       ; preds = %if.exit795
  %555 = load ptr, ptr %d585, align 8, !dbg !4072
  %ptradd_any799 = getelementptr i8, ptr %555, i64 4, !dbg !4073
  store ptr %ptradd_any799, ptr %z, align 8, !dbg !4073
  br label %if.exit800, !dbg !4073

if.exit800:                                       ; preds = %if.then798, %if.exit795
  br label %if.exit801, !dbg !4073

if.exit801:                                       ; preds = %if.exit800, %cond.phi574
  br label %loop.cond802, !dbg !4074

loop.cond802:                                     ; preds = %loop.body809, %if.exit801
  %556 = load ptr, ptr %z, align 8, !dbg !4075
  %557 = load ptr, ptr %a, align 8, !dbg !4077
  %gt803 = icmp ugt ptr %556, %557, !dbg !4075
  br i1 %gt803, label %and.rhs804, label %and.phi807, !dbg !4075

and.rhs804:                                       ; preds = %loop.cond802
  %558 = load ptr, ptr %z, align 8, !dbg !4078
  %ptradd805 = getelementptr inbounds i8, ptr %558, i64 -4, !dbg !4079
  %559 = load i32, ptr %ptradd805, align 4, !dbg !4079
  %i2nb806 = icmp eq i32 %559, 0, !dbg !4079
  br label %and.phi807, !dbg !4079

and.phi807:                                       ; preds = %and.rhs804, %loop.cond802
  %val808 = phi i1 [ false, %loop.cond802 ], [ %i2nb806, %and.rhs804 ], !dbg !4079
  br i1 %val808, label %loop.body809, label %loop.exit811, !dbg !4079

loop.body809:                                     ; preds = %and.phi807
  %560 = load ptr, ptr %z, align 8, !dbg !4080
  %ptradd_any810 = getelementptr i8, ptr %560, i8 -4, !dbg !4080
  store ptr %ptradd_any810, ptr %z, align 8, !dbg !4080
  br label %loop.cond802, !dbg !4080

loop.exit811:                                     ; preds = %and.phi807
  %561 = load i32, ptr %formatting, align 4, !dbg !4081
  %eq812 = icmp eq i32 %561, 2, !dbg !4081
  br i1 %eq812, label %if.then813, label %if.exit880, !dbg !4081

if.then813:                                       ; preds = %loop.exit811
  %562 = load i64, ptr %p, align 8, !dbg !4082
  %i2nb814 = icmp eq i64 %562, 0, !dbg !4082
  br i1 %i2nb814, label %if.then815, label %if.exit817, !dbg !4082

if.then815:                                       ; preds = %if.then813
  %563 = load i64, ptr %p, align 8, !dbg !4084
  %add816 = add i64 %563, 1, !dbg !4084
  store i64 %add816, ptr %p, align 8, !dbg !4084
  br label %if.exit817, !dbg !4084

if.exit817:                                       ; preds = %if.then815, %if.then813
  %564 = load i64, ptr %p, align 8, !dbg !4085
  %565 = load i32, ptr %e542, align 4, !dbg !4086
  %sext818 = sext i32 %565 to i64, !dbg !4086
  %gt819 = icmp sgt i64 %564, %sext818, !dbg !4085
  br i1 %gt819, label %and.rhs820, label %and.phi822, !dbg !4085

and.rhs820:                                       ; preds = %if.exit817
  %566 = load i32, ptr %e542, align 4, !dbg !4087
  %ge821 = icmp sge i32 %566, -4, !dbg !4087
  br label %and.phi822, !dbg !4087

and.phi822:                                       ; preds = %and.rhs820, %if.exit817
  %val823 = phi i1 [ false, %if.exit817 ], [ %ge821, %and.rhs820 ], !dbg !4087
  br i1 %val823, label %if.then824, label %if.else828, !dbg !4087

if.then824:                                       ; preds = %and.phi822
  store i32 0, ptr %formatting, align 4, !dbg !4088
  %567 = load i64, ptr %p, align 8, !dbg !4090
  %568 = load i32, ptr %e542, align 4, !dbg !4091
  %sext825 = sext i32 %568 to i64, !dbg !4091
  %add826 = add i64 %sext825, 1, !dbg !4091
  %sub827 = sub i64 %567, %add826, !dbg !4090
  store i64 %sub827, ptr %p, align 8, !dbg !4090
  br label %if.exit830, !dbg !4090

if.else828:                                       ; preds = %and.phi822
  store i32 1, ptr %formatting, align 4, !dbg !4092
  %569 = load i64, ptr %p, align 8, !dbg !4094
  %sub829 = sub i64 %569, 1, !dbg !4094
  store i64 %sub829, ptr %p, align 8, !dbg !4094
  br label %if.exit830, !dbg !4094

if.exit830:                                       ; preds = %if.else828, %if.then824
  %570 = load ptr, ptr %self, align 8, !dbg !4095
  %ptradd831 = getelementptr inbounds i8, ptr %570, i64 16, !dbg !4095
  %571 = load i32, ptr %ptradd831, align 8, !dbg !4095
  %lshrl832 = lshr i32 %571, 4, !dbg !4095
  %572 = and i32 1, %lshrl832, !dbg !4095
  %trunc833 = trunc i32 %572 to i8, !dbg !4095
  %573 = trunc i8 %trunc833 to i1, !dbg !4095
  %not834 = xor i1 %573, true, !dbg !4095
  br i1 %not834, label %if.then835, label %if.exit879, !dbg !4095

if.then835:                                       ; preds = %if.exit830
  %574 = load ptr, ptr %z, align 8, !dbg !4096
  %575 = load ptr, ptr %a, align 8, !dbg !4098
  %gt836 = icmp ugt ptr %574, %575, !dbg !4096
  br i1 %gt836, label %and.rhs837, label %and.phi840, !dbg !4096

and.rhs837:                                       ; preds = %if.then835
  %576 = load ptr, ptr %z, align 8, !dbg !4099
  %ptradd838 = getelementptr inbounds i8, ptr %576, i64 -4, !dbg !4100
  %577 = load i32, ptr %ptradd838, align 4, !dbg !4100
  %i2b839 = icmp ne i32 %577, 0, !dbg !4100
  br label %and.phi840, !dbg !4100

and.phi840:                                       ; preds = %and.rhs837, %if.then835
  %val841 = phi i1 [ false, %if.then835 ], [ %i2b839, %and.rhs837 ], !dbg !4100
  br i1 %val841, label %if.then842, label %if.else855, !dbg !4100

if.then842:                                       ; preds = %and.phi840
    #dbg_declare(ptr %i843, !4101, !DIExpression(), !4104)
  store i32 10, ptr %i843, align 4, !dbg !4105
  store i32 0, ptr %j, align 4, !dbg !4106
  br label %loop.cond844, !dbg !4106

loop.cond844:                                     ; preds = %loop.body851, %if.then842
  %578 = load ptr, ptr %z, align 8, !dbg !4107
  %ptradd845 = getelementptr inbounds i8, ptr %578, i64 -4, !dbg !4108
  %579 = load i32, ptr %ptradd845, align 4, !dbg !4108
  %580 = load i32, ptr %i843, align 4, !dbg !4109
  %zero846 = icmp eq i32 %580, 0, !dbg !4107
  %581 = call i1 @llvm.expect.i1(i1 %zero846, i1 false), !dbg !4107
  br i1 %581, label %panic847, label %checkok848, !dbg !4107

checkok848:                                       ; preds = %loop.cond844
  %smod849 = srem i32 %579, %580, !dbg !4107
  %eq850 = icmp eq i32 %smod849, 0, !dbg !4107
  br i1 %eq850, label %loop.body851, label %loop.exit854, !dbg !4107

loop.body851:                                     ; preds = %checkok848
  %582 = load i32, ptr %i843, align 4, !dbg !4110
  %mul852 = mul i32 %582, 10, !dbg !4110
  store i32 %mul852, ptr %i843, align 4, !dbg !4110
  %583 = load i32, ptr %j, align 4, !dbg !4111
  %add853 = add i32 %583, 1, !dbg !4111
  store i32 %add853, ptr %j, align 4, !dbg !4111
  br label %loop.cond844, !dbg !4111

loop.exit854:                                     ; preds = %checkok848
  br label %if.exit856, !dbg !4111

if.else855:                                       ; preds = %and.phi840
  store i32 9, ptr %j, align 4, !dbg !4112
  br label %if.exit856, !dbg !4112

if.exit856:                                       ; preds = %if.else855, %loop.exit854
  %584 = load i32, ptr %formatting, align 4, !dbg !4114
  %eq857 = icmp eq i32 %584, 0, !dbg !4114
  br i1 %eq857, label %if.then858, label %if.else867, !dbg !4114

if.then858:                                       ; preds = %if.exit856
  %585 = load i64, ptr %p, align 8
  store i64 %585, ptr %x859, align 8
  store i64 0, ptr %x860, align 8
  %586 = load ptr, ptr %z, align 8, !dbg !4115
  %587 = load ptr, ptr %r, align 8, !dbg !4117
  %588 = ptrtoint ptr %587 to i64, !dbg !4115
  %589 = ptrtoint ptr %586 to i64, !dbg !4115
  %590 = sub i64 %589, %588, !dbg !4115
  %591 = sdiv exact i64 %590, 4, !dbg !4115
  %sub861 = sub i64 %591, 1, !dbg !4115
  %mul862 = mul i64 9, %sub861, !dbg !4118
  %592 = load i32, ptr %j, align 4, !dbg !4119
  %sext863 = sext i32 %592 to i64, !dbg !4119
  %sub864 = sub i64 %mul862, %sext863, !dbg !4118
  store i64 %sub864, ptr %y865, align 8
  %593 = load i64, ptr %x860, align 8, !dbg !4120
  %594 = load i64, ptr %y865, align 8, !dbg !4123
  %595 = call i64 @llvm.smax.i64(i64 %593, i64 %594), !dbg !4123
  store i64 %595, ptr %y866, align 8
  %596 = load i64, ptr %x859, align 8, !dbg !4124
  %597 = load i64, ptr %y866, align 8, !dbg !4127
  %598 = call i64 @llvm.smin.i64(i64 %596, i64 %597), !dbg !4127
  store i64 %598, ptr %p, align 8, !dbg !4127
  br label %if.exit878, !dbg !4127

if.else867:                                       ; preds = %if.exit856
  %599 = load i64, ptr %p, align 8
  store i64 %599, ptr %x868, align 8
  store i64 0, ptr %x869, align 8
  %600 = load ptr, ptr %z, align 8, !dbg !4128
  %601 = load ptr, ptr %r, align 8, !dbg !4130
  %602 = ptrtoint ptr %601 to i64, !dbg !4128
  %603 = ptrtoint ptr %600 to i64, !dbg !4128
  %604 = sub i64 %603, %602, !dbg !4128
  %605 = sdiv exact i64 %604, 4, !dbg !4128
  %sub870 = sub i64 %605, 1, !dbg !4128
  %mul871 = mul i64 9, %sub870, !dbg !4131
  %606 = load i32, ptr %e542, align 4, !dbg !4132
  %sext872 = sext i32 %606 to i64, !dbg !4132
  %add873 = add i64 %mul871, %sext872, !dbg !4131
  %607 = load i32, ptr %j, align 4, !dbg !4133
  %sext874 = sext i32 %607 to i64, !dbg !4133
  %sub875 = sub i64 %add873, %sext874, !dbg !4131
  store i64 %sub875, ptr %y876, align 8
  %608 = load i64, ptr %x869, align 8, !dbg !4134
  %609 = load i64, ptr %y876, align 8, !dbg !4137
  %610 = call i64 @llvm.smax.i64(i64 %608, i64 %609), !dbg !4137
  store i64 %610, ptr %y877, align 8
  %611 = load i64, ptr %x868, align 8, !dbg !4138
  %612 = load i64, ptr %y877, align 8, !dbg !4141
  %613 = call i64 @llvm.smin.i64(i64 %611, i64 %612), !dbg !4141
  store i64 %613, ptr %p, align 8, !dbg !4141
  br label %if.exit878, !dbg !4141

if.exit878:                                       ; preds = %if.else867, %if.then858
  br label %if.exit879, !dbg !4141

if.exit879:                                       ; preds = %if.exit878, %if.exit830
  br label %if.exit880, !dbg !4141

if.exit880:                                       ; preds = %if.exit879, %loop.exit811
  %614 = load i64, ptr %p, align 8, !dbg !4142
  %615 = load i64, ptr %p, align 8, !dbg !4143
  %i2b881 = icmp ne i64 %615, 0, !dbg !4143
  br i1 %i2b881, label %or.phi886, label %or.rhs882, !dbg !4143

or.rhs882:                                        ; preds = %if.exit880
  %616 = load ptr, ptr %self, align 8, !dbg !4144
  %ptradd883 = getelementptr inbounds i8, ptr %616, i64 16, !dbg !4144
  %617 = load i32, ptr %ptradd883, align 8, !dbg !4144
  %lshrl884 = lshr i32 %617, 4, !dbg !4144
  %618 = and i32 1, %lshrl884, !dbg !4144
  %trunc885 = trunc i32 %618 to i8, !dbg !4144
  %619 = trunc i8 %trunc885 to i1, !dbg !4144
  br label %or.phi886, !dbg !4144

or.phi886:                                        ; preds = %or.rhs882, %if.exit880
  %val887 = phi i1 [ true, %if.exit880 ], [ %619, %or.rhs882 ], !dbg !4144
  %zext888 = zext i1 %val887 to i64, !dbg !4144
  %sub889 = sub i64 2147483646, %zext888, !dbg !4145
  %gt890 = icmp sgt i64 %614, %sub889, !dbg !4142
  br i1 %gt890, label %if.then891, label %if.exit892, !dbg !4142

if.then891:                                       ; preds = %or.phi886
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !4146

if.exit892:                                       ; preds = %or.phi886
    #dbg_declare(ptr %l893, !4147, !DIExpression(), !4148)
  %620 = load i64, ptr %p, align 8, !dbg !4149
  %add894 = add i64 1, %620, !dbg !4150
  %621 = load i64, ptr %p, align 8, !dbg !4151
  %i2b895 = icmp ne i64 %621, 0, !dbg !4151
  br i1 %i2b895, label %or.phi900, label %or.rhs896, !dbg !4151

or.rhs896:                                        ; preds = %if.exit892
  %622 = load ptr, ptr %self, align 8, !dbg !4152
  %ptradd897 = getelementptr inbounds i8, ptr %622, i64 16, !dbg !4152
  %623 = load i32, ptr %ptradd897, align 8, !dbg !4152
  %lshrl898 = lshr i32 %623, 4, !dbg !4152
  %624 = and i32 1, %lshrl898, !dbg !4152
  %trunc899 = trunc i32 %624 to i8, !dbg !4152
  %625 = trunc i8 %trunc899 to i1, !dbg !4152
  br label %or.phi900, !dbg !4152

or.phi900:                                        ; preds = %or.rhs896, %if.exit892
  %val901 = phi i1 [ true, %if.exit892 ], [ %625, %or.rhs896 ], !dbg !4152
  %zext902 = zext i1 %val901 to i64, !dbg !4152
  %add903 = add i64 %add894, %zext902, !dbg !4153
  %trunc904 = trunc i64 %add903 to i32, !dbg !4153
  store i32 %trunc904, ptr %l893, align 4, !dbg !4153
    #dbg_declare(ptr %estr905, !4154, !DIExpression(), !4155)
  %626 = load i32, ptr %formatting, align 4, !dbg !4156
  %eq906 = icmp eq i32 %626, 0, !dbg !4156
  br i1 %eq906, label %if.then907, label %if.else916, !dbg !4156

if.then907:                                       ; preds = %or.phi900
  %627 = load i32, ptr %e542, align 4, !dbg !4157
  %628 = load i32, ptr %l893, align 4, !dbg !4159
  %sub908 = sub i32 2147483647, %628, !dbg !4160
  %gt909 = icmp sgt i32 %627, %sub908, !dbg !4157
  br i1 %gt909, label %if.then910, label %if.exit911, !dbg !4157

if.then910:                                       ; preds = %if.then907
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !4161

if.exit911:                                       ; preds = %if.then907
  %629 = load i32, ptr %e542, align 4, !dbg !4162
  %gt912 = icmp sgt i32 %629, 0, !dbg !4162
  br i1 %gt912, label %if.then913, label %if.exit915, !dbg !4162

if.then913:                                       ; preds = %if.exit911
  %630 = load i32, ptr %l893, align 4, !dbg !4163
  %631 = load i32, ptr %e542, align 4, !dbg !4164
  %add914 = add i32 %630, %631, !dbg !4163
  store i32 %add914, ptr %l893, align 4, !dbg !4163
  br label %if.exit915, !dbg !4163

if.exit915:                                       ; preds = %if.then913, %if.exit911
  br label %if.exit954, !dbg !4163

if.else916:                                       ; preds = %or.phi900
  %632 = load i32, ptr %e542, align 4, !dbg !4165
  %lt917 = icmp slt i32 %632, 0, !dbg !4165
  br i1 %lt917, label %cond.lhs918, label %cond.rhs920, !dbg !4165

cond.lhs918:                                      ; preds = %if.else916
  %633 = load i32, ptr %e542, align 4, !dbg !4167
  %neg919 = sub i32 0, %633, !dbg !4167
  br label %cond.phi921, !dbg !4167

cond.rhs920:                                      ; preds = %if.else916
  %634 = load i32, ptr %e542, align 4, !dbg !4168
  br label %cond.phi921, !dbg !4168

cond.phi921:                                      ; preds = %cond.rhs920, %cond.lhs918
  %val922 = phi i32 [ %neg919, %cond.lhs918 ], [ %634, %cond.rhs920 ], !dbg !4168
  %sext923 = sext i32 %val922 to i128, !dbg !4168
  store i128 %sext923, ptr %taddr924, align 16
  %lo925 = load i64, ptr %taddr924, align 16
  %ptradd926 = getelementptr inbounds i8, ptr %taddr924, i64 8
  %hi927 = load i64, ptr %ptradd926, align 8
  %635 = load ptr, ptr %ebuf, align 8
  %636 = call ptr @std.io.fmt_u(i64 %lo925, i64 %hi927, ptr %635), !dbg !4169
  store ptr %636, ptr %estr905, align 8, !dbg !4169
  br label %loop.cond928, !dbg !4170

loop.cond928:                                     ; preds = %loop.body930, %cond.phi921
  %637 = load ptr, ptr %ebuf, align 8, !dbg !4171
  %638 = load ptr, ptr %estr905, align 8, !dbg !4173
  %639 = ptrtoint ptr %638 to i64, !dbg !4171
  %640 = ptrtoint ptr %637 to i64, !dbg !4171
  %641 = sub i64 %640, %639, !dbg !4171
  %642 = sdiv exact i64 %641, 1, !dbg !4171
  %lt929 = icmp slt i64 %642, 2, !dbg !4171
  br i1 %lt929, label %loop.body930, label %loop.exit932, !dbg !4171

loop.body930:                                     ; preds = %loop.cond928
  %643 = load ptr, ptr %estr905, align 8, !dbg !4174
  %ptradd_any931 = getelementptr i8, ptr %643, i8 -1, !dbg !4174
  store ptr %ptradd_any931, ptr %estr905, align 8, !dbg !4174
  store i8 48, ptr %ptradd_any931, align 1, !dbg !4175
  br label %loop.cond928, !dbg !4175

loop.exit932:                                     ; preds = %loop.cond928
  %644 = load ptr, ptr %estr905, align 8, !dbg !4176
  %ptradd_any933 = getelementptr i8, ptr %644, i8 -1, !dbg !4176
  store ptr %ptradd_any933, ptr %estr905, align 8, !dbg !4176
  %checknull934 = icmp eq ptr %ptradd_any933, null, !dbg !4176
  %645 = call i1 @llvm.expect.i1(i1 %checknull934, i1 false), !dbg !4176
  br i1 %645, label %panic935, label %checkok936, !dbg !4176

checkok936:                                       ; preds = %loop.exit932
  %646 = load i32, ptr %e542, align 4, !dbg !4177
  %lt937 = icmp slt i32 %646, 0, !dbg !4177
  %ternary938 = select i1 %lt937, i8 45, i8 43, !dbg !4178
  store i8 %ternary938, ptr %ptradd_any933, align 1, !dbg !4178
  %647 = load ptr, ptr %estr905, align 8, !dbg !4179
  %ptradd_any939 = getelementptr i8, ptr %647, i8 -1, !dbg !4179
  store ptr %ptradd_any939, ptr %estr905, align 8, !dbg !4179
  %checknull940 = icmp eq ptr %ptradd_any939, null, !dbg !4179
  %648 = call i1 @llvm.expect.i1(i1 %checknull940, i1 false), !dbg !4179
  br i1 %648, label %panic941, label %checkok942, !dbg !4179

checkok942:                                       ; preds = %checkok936
  %649 = load ptr, ptr %self, align 8, !dbg !4180
  %ptradd943 = getelementptr inbounds i8, ptr %649, i64 16, !dbg !4180
  %650 = load i32, ptr %ptradd943, align 8, !dbg !4180
  %lshrl944 = lshr i32 %650, 5, !dbg !4180
  %651 = and i32 1, %lshrl944, !dbg !4180
  %trunc945 = trunc i32 %651 to i8, !dbg !4180
  %652 = trunc i8 %trunc945 to i1, !dbg !4180
  %ternary946 = select i1 %652, i8 69, i8 101, !dbg !4181
  store i8 %ternary946, ptr %ptradd_any939, align 1, !dbg !4181
  %653 = load ptr, ptr %ebuf, align 8, !dbg !4182
  %654 = load ptr, ptr %estr905, align 8, !dbg !4183
  %655 = ptrtoint ptr %654 to i64, !dbg !4182
  %656 = ptrtoint ptr %653 to i64, !dbg !4182
  %657 = sub i64 %656, %655, !dbg !4182
  %658 = sdiv exact i64 %657, 1, !dbg !4182
  %659 = load i32, ptr %l893, align 4, !dbg !4184
  %sext947 = sext i32 %659 to i64, !dbg !4184
  %sub948 = sub i64 2147483647, %sext947, !dbg !4185
  %gt949 = icmp sgt i64 %658, %sub948, !dbg !4182
  br i1 %gt949, label %if.then950, label %if.exit951, !dbg !4182

if.then950:                                       ; preds = %checkok942
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !4186

if.exit951:                                       ; preds = %checkok942
  %660 = load i32, ptr %l893, align 4, !dbg !4187
  %661 = load ptr, ptr %ebuf, align 8, !dbg !4188
  %662 = load ptr, ptr %estr905, align 8, !dbg !4189
  %663 = ptrtoint ptr %662 to i64, !dbg !4190
  %664 = ptrtoint ptr %661 to i64, !dbg !4190
  %665 = sub i64 %664, %663, !dbg !4190
  %666 = sdiv exact i64 %665, 1, !dbg !4190
  %trunc952 = trunc i64 %666 to i32, !dbg !4190
  %add953 = add i32 %660, %trunc952, !dbg !4187
  store i32 %add953, ptr %l893, align 4, !dbg !4187
  br label %if.exit954, !dbg !4187

if.exit954:                                       ; preds = %if.exit951, %if.exit915
  %667 = load i32, ptr %l893, align 4, !dbg !4191
  %sext955 = sext i32 %667 to i64, !dbg !4191
  %668 = load i64, ptr %pl, align 8, !dbg !4192
  %sub956 = sub i64 2147483647, %668, !dbg !4193
  %gt957 = icmp sgt i64 %sext955, %sub956, !dbg !4191
  br i1 %gt957, label %if.then958, label %if.exit959, !dbg !4191

if.then958:                                       ; preds = %if.exit954
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !4194

if.exit959:                                       ; preds = %if.exit954
    #dbg_declare(ptr %len960, !4195, !DIExpression(), !4196)
  store i64 0, ptr %len960, align 8, !dbg !4196
  %669 = load ptr, ptr %self, align 8, !dbg !4197
  %ptradd961 = getelementptr inbounds i8, ptr %669, i64 16, !dbg !4197
  %670 = load i32, ptr %ptradd961, align 8, !dbg !4197
  %lshrl962 = lshr i32 %670, 1, !dbg !4197
  %671 = and i32 1, %lshrl962, !dbg !4197
  %trunc963 = trunc i32 %671 to i8, !dbg !4197
  %672 = trunc i8 %trunc963 to i1, !dbg !4197
  %not964 = xor i1 %672, true, !dbg !4197
  br i1 %not964, label %and.rhs965, label %and.phi969, !dbg !4197

and.rhs965:                                       ; preds = %if.exit959
  %673 = load ptr, ptr %self, align 8, !dbg !4198
  %ptradd966 = getelementptr inbounds i8, ptr %673, i64 16, !dbg !4198
  %674 = load i32, ptr %ptradd966, align 8, !dbg !4198
  %675 = and i32 1, %674, !dbg !4198
  %trunc967 = trunc i32 %675 to i8, !dbg !4198
  %676 = trunc i8 %trunc967 to i1, !dbg !4198
  %not968 = xor i1 %676, true, !dbg !4198
  br label %and.phi969, !dbg !4198

and.phi969:                                       ; preds = %and.rhs965, %if.exit959
  %val970 = phi i1 [ false, %if.exit959 ], [ %not968, %and.rhs965 ], !dbg !4198
  br i1 %val970, label %if.then971, label %if.exit985, !dbg !4198

if.then971:                                       ; preds = %and.phi969
  %677 = load i64, ptr %len960, align 8, !dbg !4199
  %678 = load ptr, ptr %self, align 8, !dbg !4200
  %ptradd973 = getelementptr inbounds i8, ptr %678, i64 16, !dbg !4200
  %ptradd974 = getelementptr inbounds i8, ptr %ptradd973, i64 4, !dbg !4200
  %679 = load i32, ptr %ptradd974, align 4, !dbg !4200
  %zext975 = zext i32 %679 to i64, !dbg !4200
  %680 = load i64, ptr %pl, align 8, !dbg !4201
  %681 = load i32, ptr %l893, align 4, !dbg !4202
  %sext976 = sext i32 %681 to i64, !dbg !4202
  %add977 = add i64 %680, %sext976, !dbg !4201
  %682 = load ptr, ptr %self, align 8
  %683 = call i64 @std.io.Formatter.pad(ptr %retparam978, ptr %682, i8 zeroext 32, i64 %zext975, i64 %add977) #6, !dbg !4203
  %not_err979 = icmp eq i64 %683, 0, !dbg !4203
  %684 = call i1 @llvm.expect.i1(i1 %not_err979, i1 true), !dbg !4203
  br i1 %684, label %after_check981, label %assign_optional980, !dbg !4203

assign_optional980:                               ; preds = %if.then971
  store i64 %683, ptr %error_var972, align 8, !dbg !4203
  br label %guard_block982, !dbg !4203

after_check981:                                   ; preds = %if.then971
  br label %noerr_block983, !dbg !4203

guard_block982:                                   ; preds = %assign_optional980
  %685 = load i64, ptr %error_var972, align 8, !dbg !4203
  ret i64 %685, !dbg !4203

noerr_block983:                                   ; preds = %after_check981
  %686 = load i64, ptr %retparam978, align 8, !dbg !4203
  %add984 = add i64 %677, %686, !dbg !4199
  store i64 %add984, ptr %len960, align 8, !dbg !4199
  br label %if.exit985, !dbg !4199

if.exit985:                                       ; preds = %noerr_block983, %and.phi969
  %687 = load i8, ptr %is_neg, align 1, !dbg !4204
  %688 = trunc i8 %687 to i1, !dbg !4204
  br i1 %688, label %or.phi990, label %or.rhs986, !dbg !4204

or.rhs986:                                        ; preds = %if.exit985
  %689 = load ptr, ptr %self, align 8, !dbg !4205
  %ptradd987 = getelementptr inbounds i8, ptr %689, i64 16, !dbg !4205
  %690 = load i32, ptr %ptradd987, align 8, !dbg !4205
  %lshrl988 = lshr i32 %690, 2, !dbg !4205
  %691 = and i32 1, %lshrl988, !dbg !4205
  %trunc989 = trunc i32 %691 to i8, !dbg !4205
  %692 = trunc i8 %trunc989 to i1, !dbg !4205
  br label %or.phi990, !dbg !4205

or.phi990:                                        ; preds = %or.rhs986, %if.exit985
  %val991 = phi i1 [ true, %if.exit985 ], [ %692, %or.rhs986 ], !dbg !4205
  br i1 %val991, label %if.then992, label %if.exit1002, !dbg !4205

if.then992:                                       ; preds = %or.phi990
  %693 = load i64, ptr %len960, align 8, !dbg !4206
  %694 = load i8, ptr %is_neg, align 1, !dbg !4207
  %695 = trunc i8 %694 to i1, !dbg !4207
  %ternary994 = select i1 %695, i8 45, i8 43, !dbg !4208
  %696 = load ptr, ptr %self, align 8
  %697 = call i64 @std.io.Formatter.out(ptr %retparam995, ptr %696, i8 zeroext %ternary994), !dbg !4209
  %not_err996 = icmp eq i64 %697, 0, !dbg !4209
  %698 = call i1 @llvm.expect.i1(i1 %not_err996, i1 true), !dbg !4209
  br i1 %698, label %after_check998, label %assign_optional997, !dbg !4209

assign_optional997:                               ; preds = %if.then992
  store i64 %697, ptr %error_var993, align 8, !dbg !4209
  br label %guard_block999, !dbg !4209

after_check998:                                   ; preds = %if.then992
  br label %noerr_block1000, !dbg !4209

guard_block999:                                   ; preds = %assign_optional997
  %699 = load i64, ptr %error_var993, align 8, !dbg !4209
  ret i64 %699, !dbg !4209

noerr_block1000:                                  ; preds = %after_check998
  %700 = load i64, ptr %retparam995, align 8, !dbg !4209
  %add1001 = add i64 %693, %700, !dbg !4206
  store i64 %add1001, ptr %len960, align 8, !dbg !4206
  br label %if.exit1002, !dbg !4206

if.exit1002:                                      ; preds = %noerr_block1000, %or.phi990
  %701 = load ptr, ptr %self, align 8, !dbg !4210
  %ptradd1003 = getelementptr inbounds i8, ptr %701, i64 16, !dbg !4210
  %702 = load i32, ptr %ptradd1003, align 8, !dbg !4210
  %703 = and i32 1, %702, !dbg !4210
  %trunc1004 = trunc i32 %703 to i8, !dbg !4210
  %704 = trunc i8 %trunc1004 to i1, !dbg !4210
  br i1 %704, label %if.then1005, label %if.exit1019, !dbg !4210

if.then1005:                                      ; preds = %if.exit1002
  %705 = load i64, ptr %len960, align 8, !dbg !4211
  %706 = load ptr, ptr %self, align 8, !dbg !4212
  %ptradd1007 = getelementptr inbounds i8, ptr %706, i64 16, !dbg !4212
  %ptradd1008 = getelementptr inbounds i8, ptr %ptradd1007, i64 4, !dbg !4212
  %707 = load i32, ptr %ptradd1008, align 4, !dbg !4212
  %zext1009 = zext i32 %707 to i64, !dbg !4212
  %708 = load i64, ptr %pl, align 8, !dbg !4213
  %709 = load i32, ptr %l893, align 4, !dbg !4214
  %sext1010 = sext i32 %709 to i64, !dbg !4214
  %add1011 = add i64 %708, %sext1010, !dbg !4213
  %710 = load ptr, ptr %self, align 8
  %711 = call i64 @std.io.Formatter.pad(ptr %retparam1012, ptr %710, i8 zeroext 48, i64 %zext1009, i64 %add1011) #6, !dbg !4215
  %not_err1013 = icmp eq i64 %711, 0, !dbg !4215
  %712 = call i1 @llvm.expect.i1(i1 %not_err1013, i1 true), !dbg !4215
  br i1 %712, label %after_check1015, label %assign_optional1014, !dbg !4215

assign_optional1014:                              ; preds = %if.then1005
  store i64 %711, ptr %error_var1006, align 8, !dbg !4215
  br label %guard_block1016, !dbg !4215

after_check1015:                                  ; preds = %if.then1005
  br label %noerr_block1017, !dbg !4215

guard_block1016:                                  ; preds = %assign_optional1014
  %713 = load i64, ptr %error_var1006, align 8, !dbg !4215
  ret i64 %713, !dbg !4215

noerr_block1017:                                  ; preds = %after_check1015
  %714 = load i64, ptr %retparam1012, align 8, !dbg !4215
  %add1018 = add i64 %705, %714, !dbg !4211
  store i64 %add1018, ptr %len960, align 8, !dbg !4211
  br label %if.exit1019, !dbg !4211

if.exit1019:                                      ; preds = %noerr_block1017, %if.exit1002
  %715 = load i32, ptr %formatting, align 4, !dbg !4216
  %eq1020 = icmp eq i32 %715, 0, !dbg !4216
  br i1 %eq1020, label %if.then1021, label %if.else1155, !dbg !4216

if.then1021:                                      ; preds = %if.exit1019
  %716 = load ptr, ptr %a, align 8, !dbg !4217
  %717 = load ptr, ptr %r, align 8, !dbg !4219
  %gt1022 = icmp ugt ptr %716, %717, !dbg !4217
  br i1 %gt1022, label %if.then1023, label %if.exit1024, !dbg !4217

if.then1023:                                      ; preds = %if.then1021
  %718 = load ptr, ptr %r, align 8, !dbg !4220
  store ptr %718, ptr %a, align 8, !dbg !4220
  br label %if.exit1024, !dbg !4220

if.exit1024:                                      ; preds = %if.then1023, %if.then1021
    #dbg_declare(ptr %d1025, !4221, !DIExpression(), !4222)
  %719 = load ptr, ptr %a, align 8, !dbg !4223
  store ptr %719, ptr %d1025, align 8, !dbg !4223
  br label %loop.cond1026, !dbg !4224

loop.cond1026:                                    ; preds = %noerr_block1077, %if.exit1024
  %720 = load ptr, ptr %d1025, align 8, !dbg !4225
  %721 = load ptr, ptr %r, align 8, !dbg !4227
  %le1027 = icmp ule ptr %720, %721, !dbg !4225
  br i1 %le1027, label %loop.body1028, label %loop.exit1080, !dbg !4225

loop.body1028:                                    ; preds = %loop.cond1026
    #dbg_declare(ptr %s1029, !4228, !DIExpression(), !4230)
  %722 = load ptr, ptr %d1025, align 8, !dbg !4231
  %checknull1030 = icmp eq ptr %722, null, !dbg !4231
  %723 = call i1 @llvm.expect.i1(i1 %checknull1030, i1 false), !dbg !4231
  br i1 %723, label %panic1031, label %checkok1032, !dbg !4231

checkok1032:                                      ; preds = %loop.body1028
  %724 = ptrtoint ptr %722 to i64, !dbg !4231
  %725 = urem i64 %724, 4, !dbg !4231
  %726 = icmp ne i64 %725, 0, !dbg !4231
  %727 = call i1 @llvm.expect.i1(i1 %726, i1 false), !dbg !4231
  br i1 %727, label %panic1033, label %checkok1040, !dbg !4231

checkok1040:                                      ; preds = %checkok1032
  %728 = load i32, ptr %722, align 4, !dbg !4231
  %zext1041 = zext i32 %728 to i128, !dbg !4231
  %729 = load ptr, ptr %buf, align 8, !dbg !4232
  %ptradd_any1042 = getelementptr i8, ptr %729, i64 9, !dbg !4233
  store i128 %zext1041, ptr %taddr1043, align 16
  %lo1044 = load i64, ptr %taddr1043, align 16
  %ptradd1045 = getelementptr inbounds i8, ptr %taddr1043, i64 8
  %hi1046 = load i64, ptr %ptradd1045, align 8
  %730 = call ptr @std.io.fmt_u(i64 %lo1044, i64 %hi1046, ptr %ptradd_any1042), !dbg !4234
  store ptr %730, ptr %s1029, align 8, !dbg !4234
  store i8 1, ptr %switch1047, align 1
  br label %switch.entry1048

switch.entry1048:                                 ; preds = %checkok1040
  %731 = load i8, ptr %switch1047, align 1
  %732 = trunc i8 %731 to i1
  %733 = load ptr, ptr %d1025, align 8, !dbg !4235
  %734 = load ptr, ptr %a, align 8, !dbg !4237
  %neq1049 = icmp ne ptr %733, %734, !dbg !4235
  %eq1050 = icmp eq i1 %neq1049, %732, !dbg !4235
  br i1 %eq1050, label %switch.case1051, label %next_if1057, !dbg !4235

switch.case1051:                                  ; preds = %switch.entry1048
  br label %loop.cond1052, !dbg !4238

loop.cond1052:                                    ; preds = %loop.body1054, %switch.case1051
  %735 = load ptr, ptr %s1029, align 8, !dbg !4240
  %736 = load ptr, ptr %buf, align 8, !dbg !4242
  %gt1053 = icmp ugt ptr %735, %736, !dbg !4240
  br i1 %gt1053, label %loop.body1054, label %loop.exit1056, !dbg !4240

loop.body1054:                                    ; preds = %loop.cond1052
  %737 = load ptr, ptr %s1029, align 8, !dbg !4243
  %ptradd_any1055 = getelementptr i8, ptr %737, i8 -1, !dbg !4243
  store ptr %ptradd_any1055, ptr %s1029, align 8, !dbg !4243
  store i8 48, ptr %ptradd_any1055, align 1, !dbg !4244
  br label %loop.cond1052, !dbg !4244

loop.exit1056:                                    ; preds = %loop.cond1052
  br label %switch.exit1067, !dbg !4244

next_if1057:                                      ; preds = %switch.entry1048
  %738 = load ptr, ptr %s1029, align 8, !dbg !4245
  %739 = load ptr, ptr %buf, align 8, !dbg !4246
  %ptradd_any1058 = getelementptr i8, ptr %739, i64 9, !dbg !4247
  %eq1059 = icmp eq ptr %738, %ptradd_any1058, !dbg !4245
  %eq1060 = icmp eq i1 %eq1059, %732, !dbg !4245
  br i1 %eq1060, label %switch.case1061, label %next_if1066, !dbg !4245

switch.case1061:                                  ; preds = %next_if1057
  %740 = load ptr, ptr %s1029, align 8, !dbg !4248
  %ptradd_any1062 = getelementptr i8, ptr %740, i8 -1, !dbg !4248
  store ptr %ptradd_any1062, ptr %s1029, align 8, !dbg !4248
  %checknull1063 = icmp eq ptr %ptradd_any1062, null, !dbg !4248
  %741 = call i1 @llvm.expect.i1(i1 %checknull1063, i1 false), !dbg !4248
  br i1 %741, label %panic1064, label %checkok1065, !dbg !4248

checkok1065:                                      ; preds = %switch.case1061
  store i8 48, ptr %ptradd_any1062, align 1, !dbg !4250
  br label %switch.exit1067, !dbg !4250

next_if1066:                                      ; preds = %next_if1057
  br label %switch.exit1067, !dbg !4250

switch.exit1067:                                  ; preds = %next_if1066, %checkok1065, %loop.exit1056
  %742 = load i64, ptr %len960, align 8, !dbg !4251
  %743 = load ptr, ptr %s1029, align 8, !dbg !4252
  %744 = load ptr, ptr %buf, align 8, !dbg !4253
  %ptradd_any1069 = getelementptr i8, ptr %744, i64 9, !dbg !4254
  %745 = load ptr, ptr %s1029, align 8, !dbg !4255
  %746 = ptrtoint ptr %745 to i64, !dbg !4253
  %747 = ptrtoint ptr %ptradd_any1069 to i64, !dbg !4253
  %748 = sub i64 %747, %746, !dbg !4253
  %749 = sdiv exact i64 %748, 1, !dbg !4253
  %add1070 = add i64 0, %749, !dbg !4253
  %size1071 = sub i64 %add1070, 0, !dbg !4253
  %750 = insertvalue %"char[]" undef, ptr %743, 0, !dbg !4253
  %751 = insertvalue %"char[]" %750, i64 %size1071, 1, !dbg !4253
  %752 = load ptr, ptr %self, align 8
  %753 = call i64 @std.io.Formatter.out_chars(ptr %retparam1072, ptr %752, ptr %743, i64 %size1071), !dbg !4256
  %not_err1073 = icmp eq i64 %753, 0, !dbg !4256
  %754 = call i1 @llvm.expect.i1(i1 %not_err1073, i1 true), !dbg !4256
  br i1 %754, label %after_check1075, label %assign_optional1074, !dbg !4256

assign_optional1074:                              ; preds = %switch.exit1067
  store i64 %753, ptr %error_var1068, align 8, !dbg !4256
  br label %guard_block1076, !dbg !4256

after_check1075:                                  ; preds = %switch.exit1067
  br label %noerr_block1077, !dbg !4256

guard_block1076:                                  ; preds = %assign_optional1074
  %755 = load i64, ptr %error_var1068, align 8, !dbg !4256
  ret i64 %755, !dbg !4256

noerr_block1077:                                  ; preds = %after_check1075
  %756 = load i64, ptr %retparam1072, align 8, !dbg !4256
  %add1078 = add i64 %742, %756, !dbg !4251
  store i64 %add1078, ptr %len960, align 8, !dbg !4251
  %757 = load ptr, ptr %d1025, align 8, !dbg !4257
  %ptradd_any1079 = getelementptr i8, ptr %757, i8 4, !dbg !4257
  store ptr %ptradd_any1079, ptr %d1025, align 8, !dbg !4257
  br label %loop.cond1026, !dbg !4257

loop.exit1080:                                    ; preds = %loop.cond1026
  %758 = load i64, ptr %p, align 8, !dbg !4258
  %i2b1081 = icmp ne i64 %758, 0, !dbg !4258
  br i1 %i2b1081, label %or.phi1086, label %or.rhs1082, !dbg !4258

or.rhs1082:                                       ; preds = %loop.exit1080
  %759 = load ptr, ptr %self, align 8, !dbg !4259
  %ptradd1083 = getelementptr inbounds i8, ptr %759, i64 16, !dbg !4259
  %760 = load i32, ptr %ptradd1083, align 8, !dbg !4259
  %lshrl1084 = lshr i32 %760, 4, !dbg !4259
  %761 = and i32 1, %lshrl1084, !dbg !4259
  %trunc1085 = trunc i32 %761 to i8, !dbg !4259
  %762 = trunc i8 %trunc1085 to i1, !dbg !4259
  br label %or.phi1086, !dbg !4259

or.phi1086:                                       ; preds = %or.rhs1082, %loop.exit1080
  %val1087 = phi i1 [ true, %loop.exit1080 ], [ %762, %or.rhs1082 ], !dbg !4259
  br i1 %val1087, label %if.then1088, label %if.exit1097, !dbg !4259

if.then1088:                                      ; preds = %or.phi1086
  %763 = load i64, ptr %len960, align 8, !dbg !4260
  %764 = load ptr, ptr %self, align 8
  %765 = call i64 @std.io.Formatter.out(ptr %retparam1090, ptr %764, i8 zeroext 46), !dbg !4261
  %not_err1091 = icmp eq i64 %765, 0, !dbg !4261
  %766 = call i1 @llvm.expect.i1(i1 %not_err1091, i1 true), !dbg !4261
  br i1 %766, label %after_check1093, label %assign_optional1092, !dbg !4261

assign_optional1092:                              ; preds = %if.then1088
  store i64 %765, ptr %error_var1089, align 8, !dbg !4261
  br label %guard_block1094, !dbg !4261

after_check1093:                                  ; preds = %if.then1088
  br label %noerr_block1095, !dbg !4261

guard_block1094:                                  ; preds = %assign_optional1092
  %767 = load i64, ptr %error_var1089, align 8, !dbg !4261
  ret i64 %767, !dbg !4261

noerr_block1095:                                  ; preds = %after_check1093
  %768 = load i64, ptr %retparam1090, align 8, !dbg !4261
  %add1096 = add i64 %763, %768, !dbg !4260
  store i64 %add1096, ptr %len960, align 8, !dbg !4260
  br label %if.exit1097, !dbg !4260

if.exit1097:                                      ; preds = %noerr_block1095, %or.phi1086
  br label %loop.cond1098, !dbg !4262

loop.cond1098:                                    ; preds = %noerr_block1141, %if.exit1097
  %769 = load ptr, ptr %d1025, align 8, !dbg !4263
  %770 = load ptr, ptr %z, align 8, !dbg !4265
  %lt1099 = icmp ult ptr %769, %770, !dbg !4263
  br i1 %lt1099, label %and.rhs1100, label %and.phi1102, !dbg !4263

and.rhs1100:                                      ; preds = %loop.cond1098
  %771 = load i64, ptr %p, align 8, !dbg !4266
  %gt1101 = icmp sgt i64 %771, 0, !dbg !4266
  br label %and.phi1102, !dbg !4266

and.phi1102:                                      ; preds = %and.rhs1100, %loop.cond1098
  %val1103 = phi i1 [ false, %loop.cond1098 ], [ %gt1101, %and.rhs1100 ], !dbg !4266
  br i1 %val1103, label %loop.body1104, label %loop.exit1145, !dbg !4266

loop.body1104:                                    ; preds = %and.phi1102
    #dbg_declare(ptr %s1105, !4267, !DIExpression(), !4269)
  %772 = load ptr, ptr %d1025, align 8, !dbg !4270
  %checknull1106 = icmp eq ptr %772, null, !dbg !4270
  %773 = call i1 @llvm.expect.i1(i1 %checknull1106, i1 false), !dbg !4270
  br i1 %773, label %panic1107, label %checkok1108, !dbg !4270

checkok1108:                                      ; preds = %loop.body1104
  %774 = ptrtoint ptr %772 to i64, !dbg !4270
  %775 = urem i64 %774, 4, !dbg !4270
  %776 = icmp ne i64 %775, 0, !dbg !4270
  %777 = call i1 @llvm.expect.i1(i1 %776, i1 false), !dbg !4270
  br i1 %777, label %panic1109, label %checkok1116, !dbg !4270

checkok1116:                                      ; preds = %checkok1108
  %778 = load i32, ptr %772, align 4, !dbg !4270
  %zext1117 = zext i32 %778 to i128, !dbg !4270
  %779 = load ptr, ptr %buf, align 8, !dbg !4271
  %ptradd_any1118 = getelementptr i8, ptr %779, i64 9, !dbg !4272
  store i128 %zext1117, ptr %taddr1119, align 16
  %lo1120 = load i64, ptr %taddr1119, align 16
  %ptradd1121 = getelementptr inbounds i8, ptr %taddr1119, i64 8
  %hi1122 = load i64, ptr %ptradd1121, align 8
  %780 = call ptr @std.io.fmt_u(i64 %lo1120, i64 %hi1122, ptr %ptradd_any1118), !dbg !4273
  store ptr %780, ptr %s1105, align 8, !dbg !4273
  br label %loop.cond1123, !dbg !4274

loop.cond1123:                                    ; preds = %checkok1129, %checkok1116
  %781 = load ptr, ptr %s1105, align 8, !dbg !4275
  %782 = load ptr, ptr %buf, align 8, !dbg !4277
  %gt1124 = icmp ugt ptr %781, %782, !dbg !4275
  br i1 %gt1124, label %loop.body1125, label %loop.exit1130, !dbg !4275

loop.body1125:                                    ; preds = %loop.cond1123
  %783 = load ptr, ptr %s1105, align 8, !dbg !4278
  %ptradd_any1126 = getelementptr i8, ptr %783, i8 -1, !dbg !4278
  store ptr %ptradd_any1126, ptr %s1105, align 8, !dbg !4278
  %checknull1127 = icmp eq ptr %ptradd_any1126, null, !dbg !4278
  %784 = call i1 @llvm.expect.i1(i1 %checknull1127, i1 false), !dbg !4278
  br i1 %784, label %panic1128, label %checkok1129, !dbg !4278

checkok1129:                                      ; preds = %loop.body1125
  store i8 48, ptr %ptradd_any1126, align 1, !dbg !4279
  br label %loop.cond1123, !dbg !4279

loop.exit1130:                                    ; preds = %loop.cond1123
  %785 = load i64, ptr %len960, align 8, !dbg !4280
  %786 = load ptr, ptr %s1105, align 8, !dbg !4281
  store i64 9, ptr %x1132, align 8
  %787 = load i64, ptr %p, align 8
  store i64 %787, ptr %y1133, align 8
  %788 = load i64, ptr %x1132, align 8, !dbg !4282
  %789 = load i64, ptr %y1133, align 8, !dbg !4285
  %790 = call i64 @llvm.smin.i64(i64 %788, i64 %789), !dbg !4285
  %add1134 = add i64 0, %790, !dbg !4285
  %size1135 = sub i64 %add1134, 0, !dbg !4285
  %791 = insertvalue %"char[]" undef, ptr %786, 0, !dbg !4285
  %792 = insertvalue %"char[]" %791, i64 %size1135, 1, !dbg !4285
  %793 = load ptr, ptr %self, align 8
  %794 = call i64 @std.io.Formatter.out_chars(ptr %retparam1136, ptr %793, ptr %786, i64 %size1135), !dbg !4286
  %not_err1137 = icmp eq i64 %794, 0, !dbg !4286
  %795 = call i1 @llvm.expect.i1(i1 %not_err1137, i1 true), !dbg !4286
  br i1 %795, label %after_check1139, label %assign_optional1138, !dbg !4286

assign_optional1138:                              ; preds = %loop.exit1130
  store i64 %794, ptr %error_var1131, align 8, !dbg !4286
  br label %guard_block1140, !dbg !4286

after_check1139:                                  ; preds = %loop.exit1130
  br label %noerr_block1141, !dbg !4286

guard_block1140:                                  ; preds = %assign_optional1138
  %796 = load i64, ptr %error_var1131, align 8, !dbg !4286
  ret i64 %796, !dbg !4286

noerr_block1141:                                  ; preds = %after_check1139
  %797 = load i64, ptr %retparam1136, align 8, !dbg !4286
  %add1142 = add i64 %785, %797, !dbg !4280
  store i64 %add1142, ptr %len960, align 8, !dbg !4280
  %798 = load ptr, ptr %d1025, align 8, !dbg !4287
  %ptradd_any1143 = getelementptr i8, ptr %798, i8 4, !dbg !4287
  store ptr %ptradd_any1143, ptr %d1025, align 8, !dbg !4287
  %799 = load i64, ptr %p, align 8, !dbg !4288
  %sub1144 = sub i64 %799, 9, !dbg !4288
  store i64 %sub1144, ptr %p, align 8, !dbg !4288
  br label %loop.cond1098, !dbg !4288

loop.exit1145:                                    ; preds = %and.phi1102
  %800 = load i64, ptr %len960, align 8, !dbg !4289
  %801 = load i64, ptr %p, align 8, !dbg !4290
  %add1147 = add i64 %801, 9, !dbg !4290
  %802 = load ptr, ptr %self, align 8
  %803 = call i64 @std.io.Formatter.pad(ptr %retparam1148, ptr %802, i8 zeroext 48, i64 %add1147, i64 9) #6, !dbg !4291
  %not_err1149 = icmp eq i64 %803, 0, !dbg !4291
  %804 = call i1 @llvm.expect.i1(i1 %not_err1149, i1 true), !dbg !4291
  br i1 %804, label %after_check1151, label %assign_optional1150, !dbg !4291

assign_optional1150:                              ; preds = %loop.exit1145
  store i64 %803, ptr %error_var1146, align 8, !dbg !4291
  br label %guard_block1152, !dbg !4291

after_check1151:                                  ; preds = %loop.exit1145
  br label %noerr_block1153, !dbg !4291

guard_block1152:                                  ; preds = %assign_optional1150
  %805 = load i64, ptr %error_var1146, align 8, !dbg !4291
  ret i64 %805, !dbg !4291

noerr_block1153:                                  ; preds = %after_check1151
  %806 = load i64, ptr %retparam1148, align 8, !dbg !4291
  %add1154 = add i64 %800, %806, !dbg !4289
  store i64 %add1154, ptr %len960, align 8, !dbg !4289
  br label %if.exit1262, !dbg !4289

if.else1155:                                      ; preds = %if.exit1019
  %807 = load ptr, ptr %z, align 8, !dbg !4292
  %808 = load ptr, ptr %a, align 8, !dbg !4294
  %le1156 = icmp ule ptr %807, %808, !dbg !4292
  br i1 %le1156, label %if.then1157, label %if.exit1159, !dbg !4292

if.then1157:                                      ; preds = %if.else1155
  %809 = load ptr, ptr %a, align 8, !dbg !4295
  %ptradd_any1158 = getelementptr i8, ptr %809, i64 4, !dbg !4296
  store ptr %ptradd_any1158, ptr %z, align 8, !dbg !4296
  br label %if.exit1159, !dbg !4296

if.exit1159:                                      ; preds = %if.then1157, %if.else1155
    #dbg_declare(ptr %d1160, !4297, !DIExpression(), !4299)
  %810 = load ptr, ptr %a, align 8, !dbg !4300
  store ptr %810, ptr %d1160, align 8, !dbg !4300
  br label %loop.cond1161, !dbg !4300

loop.cond1161:                                    ; preds = %noerr_block1237, %if.exit1159
  %811 = load ptr, ptr %d1160, align 8, !dbg !4301
  %812 = load ptr, ptr %z, align 8, !dbg !4302
  %lt1162 = icmp ult ptr %811, %812, !dbg !4301
  br i1 %lt1162, label %and.rhs1163, label %and.phi1165, !dbg !4301

and.rhs1163:                                      ; preds = %loop.cond1161
  %813 = load i64, ptr %p, align 8, !dbg !4303
  %ge1164 = icmp sge i64 %813, 0, !dbg !4303
  br label %and.phi1165, !dbg !4303

and.phi1165:                                      ; preds = %and.rhs1163, %loop.cond1161
  %val1166 = phi i1 [ false, %loop.cond1161 ], [ %ge1164, %and.rhs1163 ], !dbg !4303
  br i1 %val1166, label %loop.body1167, label %loop.exit1242, !dbg !4303

loop.body1167:                                    ; preds = %and.phi1165
    #dbg_declare(ptr %s1168, !4304, !DIExpression(), !4306)
  %814 = load ptr, ptr %d1160, align 8, !dbg !4307
  %checknull1169 = icmp eq ptr %814, null, !dbg !4307
  %815 = call i1 @llvm.expect.i1(i1 %checknull1169, i1 false), !dbg !4307
  br i1 %815, label %panic1170, label %checkok1171, !dbg !4307

checkok1171:                                      ; preds = %loop.body1167
  %816 = ptrtoint ptr %814 to i64, !dbg !4307
  %817 = urem i64 %816, 4, !dbg !4307
  %818 = icmp ne i64 %817, 0, !dbg !4307
  %819 = call i1 @llvm.expect.i1(i1 %818, i1 false), !dbg !4307
  br i1 %819, label %panic1172, label %checkok1179, !dbg !4307

checkok1179:                                      ; preds = %checkok1171
  %820 = load i32, ptr %814, align 4, !dbg !4307
  %zext1180 = zext i32 %820 to i128, !dbg !4307
  %821 = load ptr, ptr %buf, align 8, !dbg !4308
  %ptradd_any1181 = getelementptr i8, ptr %821, i64 9, !dbg !4309
  store i128 %zext1180, ptr %taddr1182, align 16
  %lo1183 = load i64, ptr %taddr1182, align 16
  %ptradd1184 = getelementptr inbounds i8, ptr %taddr1182, i64 8
  %hi1185 = load i64, ptr %ptradd1184, align 8
  %822 = call ptr @std.io.fmt_u(i64 %lo1183, i64 %hi1185, ptr %ptradd_any1181), !dbg !4310
  store ptr %822, ptr %s1168, align 8, !dbg !4310
  %823 = load ptr, ptr %s1168, align 8, !dbg !4311
  %824 = load ptr, ptr %buf, align 8, !dbg !4312
  %ptradd_any1186 = getelementptr i8, ptr %824, i64 9, !dbg !4313
  %eq1187 = icmp eq ptr %823, %ptradd_any1186, !dbg !4311
  br i1 %eq1187, label %if.then1188, label %if.exit1190, !dbg !4311

if.then1188:                                      ; preds = %checkok1179
  %825 = load ptr, ptr %s1168, align 8, !dbg !4314
  %ptradd_any1189 = getelementptr i8, ptr %825, i8 -1, !dbg !4314
  store ptr %ptradd_any1189, ptr %s1168, align 8, !dbg !4314
  store i8 48, ptr %ptradd_any1189, align 1, !dbg !4315
  br label %if.exit1190, !dbg !4315

if.exit1190:                                      ; preds = %if.then1188, %checkok1179
  %826 = load ptr, ptr %d1160, align 8, !dbg !4316
  %827 = load ptr, ptr %a, align 8, !dbg !4317
  %neq1191 = icmp ne ptr %826, %827, !dbg !4316
  br i1 %neq1191, label %if.then1192, label %if.else1198, !dbg !4316

if.then1192:                                      ; preds = %if.exit1190
  br label %loop.cond1193, !dbg !4318

loop.cond1193:                                    ; preds = %loop.body1195, %if.then1192
  %828 = load ptr, ptr %s1168, align 8, !dbg !4320
  %829 = load ptr, ptr %buf, align 8, !dbg !4322
  %gt1194 = icmp ugt ptr %828, %829, !dbg !4320
  br i1 %gt1194, label %loop.body1195, label %loop.exit1197, !dbg !4320

loop.body1195:                                    ; preds = %loop.cond1193
  %830 = load ptr, ptr %s1168, align 8, !dbg !4323
  %ptradd_any1196 = getelementptr i8, ptr %830, i8 -1, !dbg !4323
  store ptr %ptradd_any1196, ptr %s1168, align 8, !dbg !4323
  store i8 48, ptr %ptradd_any1196, align 1, !dbg !4324
  br label %loop.cond1193, !dbg !4324

loop.exit1197:                                    ; preds = %loop.cond1193
  br label %if.exit1225, !dbg !4324

if.else1198:                                      ; preds = %if.exit1190
  %831 = load i64, ptr %len960, align 8, !dbg !4325
  %832 = load ptr, ptr %s1168, align 8, !dbg !4327
  %ptradd_any1200 = getelementptr i8, ptr %832, i8 1, !dbg !4327
  store ptr %ptradd_any1200, ptr %s1168, align 8, !dbg !4327
  %833 = load ptr, ptr %self, align 8
  %834 = load i8, ptr %832, align 1
  %835 = call i64 @std.io.Formatter.out(ptr %retparam1201, ptr %833, i8 zeroext %834), !dbg !4328
  %not_err1202 = icmp eq i64 %835, 0, !dbg !4328
  %836 = call i1 @llvm.expect.i1(i1 %not_err1202, i1 true), !dbg !4328
  br i1 %836, label %after_check1204, label %assign_optional1203, !dbg !4328

assign_optional1203:                              ; preds = %if.else1198
  store i64 %835, ptr %error_var1199, align 8, !dbg !4328
  br label %guard_block1205, !dbg !4328

after_check1204:                                  ; preds = %if.else1198
  br label %noerr_block1206, !dbg !4328

guard_block1205:                                  ; preds = %assign_optional1203
  %837 = load i64, ptr %error_var1199, align 8, !dbg !4328
  ret i64 %837, !dbg !4328

noerr_block1206:                                  ; preds = %after_check1204
  %838 = load i64, ptr %retparam1201, align 8, !dbg !4328
  %add1207 = add i64 %831, %838, !dbg !4325
  store i64 %add1207, ptr %len960, align 8, !dbg !4325
  %839 = load i64, ptr %p, align 8, !dbg !4329
  %gt1208 = icmp sgt i64 %839, 0, !dbg !4329
  br i1 %gt1208, label %or.phi1213, label %or.rhs1209, !dbg !4329

or.rhs1209:                                       ; preds = %noerr_block1206
  %840 = load ptr, ptr %self, align 8, !dbg !4330
  %ptradd1210 = getelementptr inbounds i8, ptr %840, i64 16, !dbg !4330
  %841 = load i32, ptr %ptradd1210, align 8, !dbg !4330
  %lshrl1211 = lshr i32 %841, 4, !dbg !4330
  %842 = and i32 1, %lshrl1211, !dbg !4330
  %trunc1212 = trunc i32 %842 to i8, !dbg !4330
  %843 = trunc i8 %trunc1212 to i1, !dbg !4330
  br label %or.phi1213, !dbg !4330

or.phi1213:                                       ; preds = %or.rhs1209, %noerr_block1206
  %val1214 = phi i1 [ true, %noerr_block1206 ], [ %843, %or.rhs1209 ], !dbg !4330
  br i1 %val1214, label %if.then1215, label %if.exit1224, !dbg !4330

if.then1215:                                      ; preds = %or.phi1213
  %844 = load i64, ptr %len960, align 8, !dbg !4331
  %845 = load ptr, ptr %self, align 8
  %846 = call i64 @std.io.Formatter.out(ptr %retparam1217, ptr %845, i8 zeroext 46), !dbg !4332
  %not_err1218 = icmp eq i64 %846, 0, !dbg !4332
  %847 = call i1 @llvm.expect.i1(i1 %not_err1218, i1 true), !dbg !4332
  br i1 %847, label %after_check1220, label %assign_optional1219, !dbg !4332

assign_optional1219:                              ; preds = %if.then1215
  store i64 %846, ptr %error_var1216, align 8, !dbg !4332
  br label %guard_block1221, !dbg !4332

after_check1220:                                  ; preds = %if.then1215
  br label %noerr_block1222, !dbg !4332

guard_block1221:                                  ; preds = %assign_optional1219
  %848 = load i64, ptr %error_var1216, align 8, !dbg !4332
  ret i64 %848, !dbg !4332

noerr_block1222:                                  ; preds = %after_check1220
  %849 = load i64, ptr %retparam1217, align 8, !dbg !4332
  %add1223 = add i64 %844, %849, !dbg !4331
  store i64 %add1223, ptr %len960, align 8, !dbg !4331
  br label %if.exit1224, !dbg !4331

if.exit1224:                                      ; preds = %noerr_block1222, %or.phi1213
  br label %if.exit1225, !dbg !4331

if.exit1225:                                      ; preds = %if.exit1224, %loop.exit1197
  %850 = load i64, ptr %len960, align 8, !dbg !4333
  %851 = load ptr, ptr %s1168, align 8, !dbg !4334
  %852 = load ptr, ptr %buf, align 8, !dbg !4335
  %ptradd_any1227 = getelementptr i8, ptr %852, i64 9, !dbg !4336
  %853 = load ptr, ptr %s1168, align 8, !dbg !4337
  %854 = ptrtoint ptr %853 to i64, !dbg !4335
  %855 = ptrtoint ptr %ptradd_any1227 to i64, !dbg !4335
  %856 = sub i64 %855, %854, !dbg !4335
  %857 = sdiv exact i64 %856, 1, !dbg !4335
  store i64 %857, ptr %x1228, align 8
  %858 = load i64, ptr %p, align 8
  store i64 %858, ptr %y1229, align 8
  %859 = load i64, ptr %x1228, align 8, !dbg !4338
  %860 = load i64, ptr %y1229, align 8, !dbg !4341
  %861 = call i64 @llvm.smin.i64(i64 %859, i64 %860), !dbg !4341
  %add1230 = add i64 0, %861, !dbg !4341
  %size1231 = sub i64 %add1230, 0, !dbg !4341
  %862 = insertvalue %"char[]" undef, ptr %851, 0, !dbg !4341
  %863 = insertvalue %"char[]" %862, i64 %size1231, 1, !dbg !4341
  %864 = load ptr, ptr %self, align 8
  %865 = call i64 @std.io.Formatter.out_chars(ptr %retparam1232, ptr %864, ptr %851, i64 %size1231), !dbg !4342
  %not_err1233 = icmp eq i64 %865, 0, !dbg !4342
  %866 = call i1 @llvm.expect.i1(i1 %not_err1233, i1 true), !dbg !4342
  br i1 %866, label %after_check1235, label %assign_optional1234, !dbg !4342

assign_optional1234:                              ; preds = %if.exit1225
  store i64 %865, ptr %error_var1226, align 8, !dbg !4342
  br label %guard_block1236, !dbg !4342

after_check1235:                                  ; preds = %if.exit1225
  br label %noerr_block1237, !dbg !4342

guard_block1236:                                  ; preds = %assign_optional1234
  %867 = load i64, ptr %error_var1226, align 8, !dbg !4342
  ret i64 %867, !dbg !4342

noerr_block1237:                                  ; preds = %after_check1235
  %868 = load i64, ptr %retparam1232, align 8, !dbg !4342
  %add1238 = add i64 %850, %868, !dbg !4333
  store i64 %add1238, ptr %len960, align 8, !dbg !4333
  %869 = load i64, ptr %p, align 8, !dbg !4343
  %870 = load ptr, ptr %buf, align 8, !dbg !4344
  %ptradd_any1239 = getelementptr i8, ptr %870, i64 9, !dbg !4345
  %871 = load ptr, ptr %s1168, align 8, !dbg !4346
  %872 = ptrtoint ptr %871 to i64, !dbg !4344
  %873 = ptrtoint ptr %ptradd_any1239 to i64, !dbg !4344
  %874 = sub i64 %873, %872, !dbg !4344
  %875 = sdiv exact i64 %874, 1, !dbg !4344
  %sub1240 = sub i64 %869, %875, !dbg !4343
  store i64 %sub1240, ptr %p, align 8, !dbg !4343
  %876 = load ptr, ptr %d1160, align 8, !dbg !4347
  %ptradd_any1241 = getelementptr i8, ptr %876, i8 4, !dbg !4347
  store ptr %ptradd_any1241, ptr %d1160, align 8, !dbg !4347
  br label %loop.cond1161, !dbg !4347

loop.exit1242:                                    ; preds = %and.phi1165
  %877 = load i64, ptr %len960, align 8, !dbg !4348
  %878 = load i64, ptr %p, align 8, !dbg !4349
  %add1244 = add i64 %878, 18, !dbg !4349
  %879 = load ptr, ptr %self, align 8
  %880 = call i64 @std.io.Formatter.pad(ptr %retparam1245, ptr %879, i8 zeroext 48, i64 %add1244, i64 18) #6, !dbg !4350
  %not_err1246 = icmp eq i64 %880, 0, !dbg !4350
  %881 = call i1 @llvm.expect.i1(i1 %not_err1246, i1 true), !dbg !4350
  br i1 %881, label %after_check1248, label %assign_optional1247, !dbg !4350

assign_optional1247:                              ; preds = %loop.exit1242
  store i64 %880, ptr %error_var1243, align 8, !dbg !4350
  br label %guard_block1249, !dbg !4350

after_check1248:                                  ; preds = %loop.exit1242
  br label %noerr_block1250, !dbg !4350

guard_block1249:                                  ; preds = %assign_optional1247
  %882 = load i64, ptr %error_var1243, align 8, !dbg !4350
  ret i64 %882, !dbg !4350

noerr_block1250:                                  ; preds = %after_check1248
  %883 = load i64, ptr %retparam1245, align 8, !dbg !4350
  %add1251 = add i64 %877, %883, !dbg !4348
  store i64 %add1251, ptr %len960, align 8, !dbg !4348
  %884 = load i64, ptr %len960, align 8, !dbg !4351
  %885 = load ptr, ptr %estr905, align 8, !dbg !4352
  %886 = load ptr, ptr %ebuf, align 8, !dbg !4353
  %887 = load ptr, ptr %estr905, align 8, !dbg !4354
  %888 = ptrtoint ptr %887 to i64, !dbg !4353
  %889 = ptrtoint ptr %886 to i64, !dbg !4353
  %890 = sub i64 %889, %888, !dbg !4353
  %891 = sdiv exact i64 %890, 1, !dbg !4353
  %add1253 = add i64 0, %891, !dbg !4353
  %size1254 = sub i64 %add1253, 0, !dbg !4353
  %892 = insertvalue %"char[]" undef, ptr %885, 0, !dbg !4353
  %893 = insertvalue %"char[]" %892, i64 %size1254, 1, !dbg !4353
  %894 = load ptr, ptr %self, align 8
  %895 = call i64 @std.io.Formatter.out_chars(ptr %retparam1255, ptr %894, ptr %885, i64 %size1254), !dbg !4355
  %not_err1256 = icmp eq i64 %895, 0, !dbg !4355
  %896 = call i1 @llvm.expect.i1(i1 %not_err1256, i1 true), !dbg !4355
  br i1 %896, label %after_check1258, label %assign_optional1257, !dbg !4355

assign_optional1257:                              ; preds = %noerr_block1250
  store i64 %895, ptr %error_var1252, align 8, !dbg !4355
  br label %guard_block1259, !dbg !4355

after_check1258:                                  ; preds = %noerr_block1250
  br label %noerr_block1260, !dbg !4355

guard_block1259:                                  ; preds = %assign_optional1257
  %897 = load i64, ptr %error_var1252, align 8, !dbg !4355
  ret i64 %897, !dbg !4355

noerr_block1260:                                  ; preds = %after_check1258
  %898 = load i64, ptr %retparam1255, align 8, !dbg !4355
  %add1261 = add i64 %884, %898, !dbg !4351
  store i64 %add1261, ptr %len960, align 8, !dbg !4351
  br label %if.exit1262, !dbg !4351

if.exit1262:                                      ; preds = %noerr_block1260, %noerr_block1153
  %899 = load ptr, ptr %self, align 8, !dbg !4356
  %ptradd1263 = getelementptr inbounds i8, ptr %899, i64 16, !dbg !4356
  %900 = load i32, ptr %ptradd1263, align 8, !dbg !4356
  %lshrl1264 = lshr i32 %900, 1, !dbg !4356
  %901 = and i32 1, %lshrl1264, !dbg !4356
  %trunc1265 = trunc i32 %901 to i8, !dbg !4356
  %902 = trunc i8 %trunc1265 to i1, !dbg !4356
  br i1 %902, label %if.then1266, label %if.exit1280, !dbg !4356

if.then1266:                                      ; preds = %if.exit1262
  %903 = load i64, ptr %len960, align 8, !dbg !4357
  %904 = load ptr, ptr %self, align 8, !dbg !4358
  %ptradd1268 = getelementptr inbounds i8, ptr %904, i64 16, !dbg !4358
  %ptradd1269 = getelementptr inbounds i8, ptr %ptradd1268, i64 4, !dbg !4358
  %905 = load i32, ptr %ptradd1269, align 4, !dbg !4358
  %zext1270 = zext i32 %905 to i64, !dbg !4358
  %906 = load i64, ptr %pl, align 8, !dbg !4359
  %907 = load i32, ptr %l893, align 4, !dbg !4360
  %sext1271 = sext i32 %907 to i64, !dbg !4360
  %add1272 = add i64 %906, %sext1271, !dbg !4359
  %908 = load ptr, ptr %self, align 8
  %909 = call i64 @std.io.Formatter.pad(ptr %retparam1273, ptr %908, i8 zeroext 32, i64 %zext1270, i64 %add1272) #6, !dbg !4361
  %not_err1274 = icmp eq i64 %909, 0, !dbg !4361
  %910 = call i1 @llvm.expect.i1(i1 %not_err1274, i1 true), !dbg !4361
  br i1 %910, label %after_check1276, label %assign_optional1275, !dbg !4361

assign_optional1275:                              ; preds = %if.then1266
  store i64 %909, ptr %error_var1267, align 8, !dbg !4361
  br label %guard_block1277, !dbg !4361

after_check1276:                                  ; preds = %if.then1266
  br label %noerr_block1278, !dbg !4361

guard_block1277:                                  ; preds = %assign_optional1275
  %911 = load i64, ptr %error_var1267, align 8, !dbg !4361
  ret i64 %911, !dbg !4361

noerr_block1278:                                  ; preds = %after_check1276
  %912 = load i64, ptr %retparam1273, align 8, !dbg !4361
  %add1279 = add i64 %903, %912, !dbg !4357
  store i64 %add1279, ptr %len960, align 8, !dbg !4357
  br label %if.exit1280, !dbg !4357

if.exit1280:                                      ; preds = %noerr_block1278, %if.exit1262
  %913 = load i64, ptr %len960, align 8, !dbg !4362
  store i64 %913, ptr %0, align 8, !dbg !4362
  ret i64 0, !dbg !4362

panic:                                            ; preds = %entry
  %914 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3573
  call void %914(ptr @.panic_msg, i64 62, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 213) #5, !dbg !3573
  unreachable, !dbg !3573

panic1:                                           ; preds = %checkok
  %915 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3591
  call void %915(ptr @.panic_msg.49, i64 53, ptr @.file.50, i64 10, ptr @.func.240, i64 11, i32 212) #5, !dbg !3591
  unreachable, !dbg !3591

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %916 = insertvalue %any undef, ptr %taddr, 0
  %917 = insertvalue %any %916, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr4, align 8
  %918 = insertvalue %any undef, ptr %taddr4, 0
  %919 = insertvalue %any %918, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %917, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %919, ptr %ptradd, align 16
  %920 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %920, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.50, i64 10, ptr @.func.240, i64 11, i32 212, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3591
  unreachable, !dbg !3591

panic11:                                          ; preds = %or.phi
  %921 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3606
  call void %921(ptr @.panic_msg.49, i64 53, ptr @.file.50, i64 10, ptr @.func.240, i64 11, i32 212) #5, !dbg !3606
  unreachable, !dbg !3606

panic13:                                          ; preds = %checkok12
  store i64 8, ptr %taddr14, align 8
  %922 = insertvalue %any undef, ptr %taddr14, 0
  %923 = insertvalue %any %922, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr15, align 8
  %924 = insertvalue %any undef, ptr %taddr15, 0
  %925 = insertvalue %any %924, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %923, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %925, ptr %ptradd17, align 16
  %926 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %926, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.50, i64 10, ptr @.func.240, i64 11, i32 212, ptr byval(%"any[]") align 8 %indirectarg19) #5, !dbg !3606
  unreachable, !dbg !3606

panic38:                                          ; preds = %if.exit30
  %927 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3625
  call void %927(ptr @.panic_msg.49, i64 53, ptr @.file.50, i64 10, ptr @.func.240, i64 11, i32 212) #5, !dbg !3625
  unreachable, !dbg !3625

panic40:                                          ; preds = %checkok39
  store i64 8, ptr %taddr41, align 8
  %928 = insertvalue %any undef, ptr %taddr41, 0
  %929 = insertvalue %any %928, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %51, ptr %taddr42, align 8
  %930 = insertvalue %any undef, ptr %taddr42, 0
  %931 = insertvalue %any %930, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %929, ptr %varargslots43, align 16
  %ptradd44 = getelementptr inbounds i8, ptr %varargslots43, i64 16
  store %any %931, ptr %ptradd44, align 16
  %932 = insertvalue %"any[]" undef, ptr %varargslots43, 0
  %"$$temp45" = insertvalue %"any[]" %932, i64 2, 1
  store %"any[]" %"$$temp45", ptr %indirectarg46, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.50, i64 10, ptr @.func.240, i64 11, i32 212, ptr byval(%"any[]") align 8 %indirectarg46) #5, !dbg !3625
  unreachable, !dbg !3625

panic148:                                         ; preds = %if.then145
  %933 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4363
  call void %933(ptr @.panic_msg.245, i64 47, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 274) #5, !dbg !4363
  unreachable, !dbg !4363

panic153:                                         ; preds = %if.exit150
  %934 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4364
  call void %934(ptr @.panic_msg.245, i64 47, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 275) #5, !dbg !4364
  unreachable, !dbg !4364

panic159:                                         ; preds = %checkok154
  %935 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4365
  call void %935(ptr @.panic_msg.245, i64 47, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 276) #5, !dbg !4365
  unreachable, !dbg !4365

panic176:                                         ; preds = %loop.body172
  %936 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3732
  call void %936(ptr @.panic_msg.246, i64 44, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 282) #5, !dbg !3732
  unreachable, !dbg !3732

panic200:                                         ; preds = %if.then197
  %937 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3743
  call void %937(ptr @.panic_msg.246, i64 44, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 284) #5, !dbg !3743
  unreachable, !dbg !3743

panic370:                                         ; preds = %loop.body367
  %938 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3864
  call void %938(ptr @.panic_msg.249, i64 42, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 332) #5, !dbg !3864
  unreachable, !dbg !3864

panic372:                                         ; preds = %checkok371
  store i64 4, ptr %taddr373, align 8
  %939 = insertvalue %any undef, ptr %taddr373, 0
  %940 = insertvalue %any %939, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %311, ptr %taddr374, align 8
  %941 = insertvalue %any undef, ptr %taddr374, 0
  %942 = insertvalue %any %941, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %940, ptr %varargslots375, align 16
  %ptradd376 = getelementptr inbounds i8, ptr %varargslots375, i64 16
  store %any %942, ptr %ptradd376, align 16
  %943 = insertvalue %"any[]" undef, ptr %varargslots375, 0
  %"$$temp377" = insertvalue %"any[]" %943, i64 2, 1
  store %"any[]" %"$$temp377", ptr %indirectarg378, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 332, ptr byval(%"any[]") align 8 %indirectarg378) #5, !dbg !3864
  unreachable, !dbg !3864

panic382:                                         ; preds = %checkok379
  store i64 %zext381, ptr %taddr383, align 8
  %944 = insertvalue %any undef, ptr %taddr383, 0
  %945 = insertvalue %any %944, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %945, ptr %varargslots384, align 16
  %946 = insertvalue %"any[]" undef, ptr %varargslots384, 0
  %"$$temp385" = insertvalue %"any[]" %946, i64 1, 1
  store %"any[]" %"$$temp385", ptr %indirectarg386, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.43, i64 35, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 332, ptr byval(%"any[]") align 8 %indirectarg386) #5, !dbg !3866
  unreachable, !dbg !3866

panic391:                                         ; preds = %checkok387
  %947 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3868
  call void %947(ptr @.panic_msg.249, i64 42, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 333) #5, !dbg !3868
  unreachable, !dbg !3868

panic393:                                         ; preds = %checkok392
  store i64 4, ptr %taddr394, align 8
  %948 = insertvalue %any undef, ptr %taddr394, 0
  %949 = insertvalue %any %948, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %322, ptr %taddr395, align 8
  %950 = insertvalue %any undef, ptr %taddr395, 0
  %951 = insertvalue %any %950, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %949, ptr %varargslots396, align 16
  %ptradd397 = getelementptr inbounds i8, ptr %varargslots396, i64 16
  store %any %951, ptr %ptradd397, align 16
  %952 = insertvalue %"any[]" undef, ptr %varargslots396, 0
  %"$$temp398" = insertvalue %"any[]" %952, i64 2, 1
  store %"any[]" %"$$temp398", ptr %indirectarg399, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 333, ptr byval(%"any[]") align 8 %indirectarg399) #5, !dbg !3868
  unreachable, !dbg !3868

panic409:                                         ; preds = %if.then406
  %953 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3876
  call void %953(ptr @.panic_msg.250, i64 44, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 336) #5, !dbg !3876
  unreachable, !dbg !3876

panic411:                                         ; preds = %checkok410
  store i64 4, ptr %taddr412, align 8
  %954 = insertvalue %any undef, ptr %taddr412, 0
  %955 = insertvalue %any %954, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %332, ptr %taddr413, align 8
  %956 = insertvalue %any undef, ptr %taddr413, 0
  %957 = insertvalue %any %956, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %955, ptr %varargslots414, align 16
  %ptradd415 = getelementptr inbounds i8, ptr %varargslots414, i64 16
  store %any %957, ptr %ptradd415, align 16
  %958 = insertvalue %"any[]" undef, ptr %varargslots414, 0
  %"$$temp416" = insertvalue %"any[]" %958, i64 2, 1
  store %"any[]" %"$$temp416", ptr %indirectarg417, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 336, ptr byval(%"any[]") align 8 %indirectarg417) #5, !dbg !3876
  unreachable, !dbg !3876

panic449:                                         ; preds = %loop.body447
  %959 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3916
  call void %959(ptr @.panic_msg.249, i64 42, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 350) #5, !dbg !3916
  unreachable, !dbg !3916

panic451:                                         ; preds = %checkok450
  store i64 4, ptr %taddr452, align 8
  %960 = insertvalue %any undef, ptr %taddr452, 0
  %961 = insertvalue %any %960, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %355, ptr %taddr453, align 8
  %962 = insertvalue %any undef, ptr %taddr453, 0
  %963 = insertvalue %any %962, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %961, ptr %varargslots454, align 16
  %ptradd455 = getelementptr inbounds i8, ptr %varargslots454, i64 16
  store %any %963, ptr %ptradd455, align 16
  %964 = insertvalue %"any[]" undef, ptr %varargslots454, 0
  %"$$temp456" = insertvalue %"any[]" %964, i64 2, 1
  store %"any[]" %"$$temp456", ptr %indirectarg457, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 350, ptr byval(%"any[]") align 8 %indirectarg457) #5, !dbg !3916
  unreachable, !dbg !3916

panic459:                                         ; preds = %checkok458
  store i32 %359, ptr %taddr460, align 4
  %965 = insertvalue %any undef, ptr %taddr460, 0
  %966 = insertvalue %any %965, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %966, ptr %varargslots461, align 16
  %967 = insertvalue %"any[]" undef, ptr %varargslots461, 0
  %"$$temp462" = insertvalue %"any[]" %967, i64 1, 1
  store %"any[]" %"$$temp462", ptr %indirectarg463, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.43, i64 35, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 350, ptr byval(%"any[]") align 8 %indirectarg463) #5, !dbg !3918
  unreachable, !dbg !3918

panic466:                                         ; preds = %checkok464
  store i32 %359, ptr %taddr467, align 4
  %968 = insertvalue %any undef, ptr %taddr467, 0
  %969 = insertvalue %any %968, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %969, ptr %varargslots468, align 16
  %970 = insertvalue %"any[]" undef, ptr %varargslots468, 0
  %"$$temp469" = insertvalue %"any[]" %970, i64 1, 1
  store %"any[]" %"$$temp469", ptr %indirectarg470, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.43, i64 35, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 350, ptr byval(%"any[]") align 8 %indirectarg470) #5, !dbg !3918
  unreachable, !dbg !3918

panic476:                                         ; preds = %checkok471
  %971 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3920
  call void %971(ptr @.panic_msg.249, i64 42, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 351) #5, !dbg !3920
  unreachable, !dbg !3920

panic478:                                         ; preds = %checkok477
  store i64 4, ptr %taddr479, align 8
  %972 = insertvalue %any undef, ptr %taddr479, 0
  %973 = insertvalue %any %972, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %366, ptr %taddr480, align 8
  %974 = insertvalue %any undef, ptr %taddr480, 0
  %975 = insertvalue %any %974, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %973, ptr %varargslots481, align 16
  %ptradd482 = getelementptr inbounds i8, ptr %varargslots481, i64 16
  store %any %975, ptr %ptradd482, align 16
  %976 = insertvalue %"any[]" undef, ptr %varargslots481, 0
  %"$$temp483" = insertvalue %"any[]" %976, i64 2, 1
  store %"any[]" %"$$temp483", ptr %indirectarg484, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 351, ptr byval(%"any[]") align 8 %indirectarg484) #5, !dbg !3920
  unreachable, !dbg !3920

panic487:                                         ; preds = %checkok485
  %977 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3921
  call void %977(ptr @.panic_msg.249, i64 42, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 351) #5, !dbg !3921
  unreachable, !dbg !3921

panic489:                                         ; preds = %checkok488
  store i64 4, ptr %taddr490, align 8
  %978 = insertvalue %any undef, ptr %taddr490, 0
  %979 = insertvalue %any %978, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %372, ptr %taddr491, align 8
  %980 = insertvalue %any undef, ptr %taddr491, 0
  %981 = insertvalue %any %980, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %979, ptr %varargslots492, align 16
  %ptradd493 = getelementptr inbounds i8, ptr %varargslots492, i64 16
  store %any %981, ptr %ptradd493, align 16
  %982 = insertvalue %"any[]" undef, ptr %varargslots492, 0
  %"$$temp494" = insertvalue %"any[]" %982, i64 2, 1
  store %"any[]" %"$$temp494", ptr %indirectarg495, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 351, ptr byval(%"any[]") align 8 %indirectarg495) #5, !dbg !3921
  unreachable, !dbg !3921

panic498:                                         ; preds = %checkok496
  store i32 %376, ptr %taddr499, align 4
  %983 = insertvalue %any undef, ptr %taddr499, 0
  %984 = insertvalue %any %983, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %984, ptr %varargslots500, align 16
  %985 = insertvalue %"any[]" undef, ptr %varargslots500, 0
  %"$$temp501" = insertvalue %"any[]" %985, i64 1, 1
  store %"any[]" %"$$temp501", ptr %indirectarg502, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.43, i64 35, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 351, ptr byval(%"any[]") align 8 %indirectarg502) #5, !dbg !3923
  unreachable, !dbg !3923

panic507:                                         ; preds = %checkok503
  store i32 %380, ptr %taddr508, align 4
  %986 = insertvalue %any undef, ptr %taddr508, 0
  %987 = insertvalue %any %986, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %987, ptr %varargslots509, align 16
  %988 = insertvalue %"any[]" undef, ptr %varargslots509, 0
  %"$$temp510" = insertvalue %"any[]" %988, i64 1, 1
  store %"any[]" %"$$temp510", ptr %indirectarg511, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.43, i64 35, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 352, ptr byval(%"any[]") align 8 %indirectarg511) #5, !dbg !3926
  unreachable, !dbg !3926

panic514:                                         ; preds = %checkok512
  store i32 %380, ptr %taddr515, align 4
  %989 = insertvalue %any undef, ptr %taddr515, 0
  %990 = insertvalue %any %989, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %990, ptr %varargslots516, align 16
  %991 = insertvalue %"any[]" undef, ptr %varargslots516, 0
  %"$$temp517" = insertvalue %"any[]" %991, i64 1, 1
  store %"any[]" %"$$temp517", ptr %indirectarg518, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.43, i64 35, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 352, ptr byval(%"any[]") align 8 %indirectarg518) #5, !dbg !3926
  unreachable, !dbg !3926

panic549:                                         ; preds = %loop.cond547
  %992 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3957
  call void %992(ptr @.panic_msg.251, i64 42, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 365) #5, !dbg !3957
  unreachable, !dbg !3957

panic551:                                         ; preds = %checkok550
  store i64 4, ptr %taddr552, align 8
  %993 = insertvalue %any undef, ptr %taddr552, 0
  %994 = insertvalue %any %993, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %417, ptr %taddr553, align 8
  %995 = insertvalue %any undef, ptr %taddr553, 0
  %996 = insertvalue %any %995, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %994, ptr %varargslots554, align 16
  %ptradd555 = getelementptr inbounds i8, ptr %varargslots554, i64 16
  store %any %996, ptr %ptradd555, align 16
  %997 = insertvalue %"any[]" undef, ptr %varargslots554, 0
  %"$$temp556" = insertvalue %"any[]" %997, i64 2, 1
  store %"any[]" %"$$temp556", ptr %indirectarg557, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 365, ptr byval(%"any[]") align 8 %indirectarg557) #5, !dbg !3957
  unreachable, !dbg !3957

panic603:                                         ; preds = %loop.exit601
  %998 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3992
  call void %998(ptr @.panic_msg.249, i64 42, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 379) #5, !dbg !3992
  unreachable, !dbg !3992

panic605:                                         ; preds = %checkok604
  store i64 4, ptr %taddr606, align 8
  %999 = insertvalue %any undef, ptr %taddr606, 0
  %1000 = insertvalue %any %999, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %447, ptr %taddr607, align 8
  %1001 = insertvalue %any undef, ptr %taddr607, 0
  %1002 = insertvalue %any %1001, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %1000, ptr %varargslots608, align 16
  %ptradd609 = getelementptr inbounds i8, ptr %varargslots608, i64 16
  store %any %1002, ptr %ptradd609, align 16
  %1003 = insertvalue %"any[]" undef, ptr %varargslots608, 0
  %"$$temp610" = insertvalue %"any[]" %1003, i64 2, 1
  store %"any[]" %"$$temp610", ptr %indirectarg611, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 379, ptr byval(%"any[]") align 8 %indirectarg611) #5, !dbg !3992
  unreachable, !dbg !3992

panic613:                                         ; preds = %checkok612
  %1004 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3994
  call void %1004(ptr @.panic_msg.252, i64 10, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 379) #5, !dbg !3994
  unreachable, !dbg !3994

panic625:                                         ; preds = %if.then622
  %1005 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4005
  call void %1005(ptr @.panic_msg.249, i64 42, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 385) #5, !dbg !4005
  unreachable, !dbg !4005

panic627:                                         ; preds = %checkok626
  store i64 4, ptr %taddr628, align 8
  %1006 = insertvalue %any undef, ptr %taddr628, 0
  %1007 = insertvalue %any %1006, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %459, ptr %taddr629, align 8
  %1008 = insertvalue %any undef, ptr %taddr629, 0
  %1009 = insertvalue %any %1008, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %1007, ptr %varargslots630, align 16
  %ptradd631 = getelementptr inbounds i8, ptr %varargslots630, i64 16
  store %any %1009, ptr %ptradd631, align 16
  %1010 = insertvalue %"any[]" undef, ptr %varargslots630, 0
  %"$$temp632" = insertvalue %"any[]" %1010, i64 2, 1
  store %"any[]" %"$$temp632", ptr %indirectarg633, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 385, ptr byval(%"any[]") align 8 %indirectarg633) #5, !dbg !4005
  unreachable, !dbg !4005

panic636:                                         ; preds = %checkok634
  %1011 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4007
  call void %1011(ptr @.panic_msg.253, i64 17, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 385) #5, !dbg !4007
  unreachable, !dbg !4007

panic682:                                         ; preds = %if.exit680
  %1012 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4034
  call void %1012(ptr @.panic_msg.249, i64 42, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 403) #5, !dbg !4034
  unreachable, !dbg !4034

panic684:                                         ; preds = %checkok683
  store i64 4, ptr %taddr685, align 8
  %1013 = insertvalue %any undef, ptr %taddr685, 0
  %1014 = insertvalue %any %1013, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %487, ptr %taddr686, align 8
  %1015 = insertvalue %any undef, ptr %taddr686, 0
  %1016 = insertvalue %any %1015, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %1014, ptr %varargslots687, align 16
  %ptradd688 = getelementptr inbounds i8, ptr %varargslots687, i64 16
  store %any %1016, ptr %ptradd688, align 16
  %1017 = insertvalue %"any[]" undef, ptr %varargslots687, 0
  %"$$temp689" = insertvalue %"any[]" %1017, i64 2, 1
  store %"any[]" %"$$temp689", ptr %indirectarg690, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 403, ptr byval(%"any[]") align 8 %indirectarg690) #5, !dbg !4034
  unreachable, !dbg !4034

panic697:                                         ; preds = %if.then695
  %1018 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4040
  call void %1018(ptr @.panic_msg.249, i64 42, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 407) #5, !dbg !4040
  unreachable, !dbg !4040

panic699:                                         ; preds = %checkok698
  store i64 4, ptr %taddr700, align 8
  %1019 = insertvalue %any undef, ptr %taddr700, 0
  %1020 = insertvalue %any %1019, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %498, ptr %taddr701, align 8
  %1021 = insertvalue %any undef, ptr %taddr701, 0
  %1022 = insertvalue %any %1021, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %1020, ptr %varargslots702, align 16
  %ptradd703 = getelementptr inbounds i8, ptr %varargslots702, i64 16
  store %any %1022, ptr %ptradd703, align 16
  %1023 = insertvalue %"any[]" undef, ptr %varargslots702, 0
  %"$$temp704" = insertvalue %"any[]" %1023, i64 2, 1
  store %"any[]" %"$$temp704", ptr %indirectarg705, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 407, ptr byval(%"any[]") align 8 %indirectarg705) #5, !dbg !4040
  unreachable, !dbg !4040

panic708:                                         ; preds = %checkok706
  %1024 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4042
  call void %1024(ptr @.panic_msg.249, i64 42, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 407) #5, !dbg !4042
  unreachable, !dbg !4042

panic710:                                         ; preds = %checkok709
  store i64 4, ptr %taddr711, align 8
  %1025 = insertvalue %any undef, ptr %taddr711, 0
  %1026 = insertvalue %any %1025, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %504, ptr %taddr712, align 8
  %1027 = insertvalue %any undef, ptr %taddr712, 0
  %1028 = insertvalue %any %1027, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %1026, ptr %varargslots713, align 16
  %ptradd714 = getelementptr inbounds i8, ptr %varargslots713, i64 16
  store %any %1028, ptr %ptradd714, align 16
  %1029 = insertvalue %"any[]" undef, ptr %varargslots713, 0
  %"$$temp715" = insertvalue %"any[]" %1029, i64 2, 1
  store %"any[]" %"$$temp715", ptr %indirectarg716, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 407, ptr byval(%"any[]") align 8 %indirectarg716) #5, !dbg !4042
  unreachable, !dbg !4042

panic721:                                         ; preds = %loop.cond719
  %1030 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4046
  call void %1030(ptr @.panic_msg.249, i64 42, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 408) #5, !dbg !4046
  unreachable, !dbg !4046

panic723:                                         ; preds = %checkok722
  store i64 4, ptr %taddr724, align 8
  %1031 = insertvalue %any undef, ptr %taddr724, 0
  %1032 = insertvalue %any %1031, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %512, ptr %taddr725, align 8
  %1033 = insertvalue %any undef, ptr %taddr725, 0
  %1034 = insertvalue %any %1033, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %1032, ptr %varargslots726, align 16
  %ptradd727 = getelementptr inbounds i8, ptr %varargslots726, i64 16
  store %any %1034, ptr %ptradd727, align 16
  %1035 = insertvalue %"any[]" undef, ptr %varargslots726, 0
  %"$$temp728" = insertvalue %"any[]" %1035, i64 2, 1
  store %"any[]" %"$$temp728", ptr %indirectarg729, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 408, ptr byval(%"any[]") align 8 %indirectarg729) #5, !dbg !4046
  unreachable, !dbg !4046

panic735:                                         ; preds = %loop.body732
  %1036 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4049
  call void %1036(ptr @.panic_msg.254, i64 44, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 410) #5, !dbg !4049
  unreachable, !dbg !4049

panic737:                                         ; preds = %checkok736
  store i64 4, ptr %taddr738, align 8
  %1037 = insertvalue %any undef, ptr %taddr738, 0
  %1038 = insertvalue %any %1037, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %519, ptr %taddr739, align 8
  %1039 = insertvalue %any undef, ptr %taddr739, 0
  %1040 = insertvalue %any %1039, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %1038, ptr %varargslots740, align 16
  %ptradd741 = getelementptr inbounds i8, ptr %varargslots740, i64 16
  store %any %1040, ptr %ptradd741, align 16
  %1041 = insertvalue %"any[]" undef, ptr %varargslots740, 0
  %"$$temp742" = insertvalue %"any[]" %1041, i64 2, 1
  store %"any[]" %"$$temp742", ptr %indirectarg743, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 410, ptr byval(%"any[]") align 8 %indirectarg743) #5, !dbg !4049
  unreachable, !dbg !4049

panic749:                                         ; preds = %if.then746
  %1042 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4055
  call void %1042(ptr @.panic_msg.250, i64 44, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 411) #5, !dbg !4055
  unreachable, !dbg !4055

panic751:                                         ; preds = %checkok750
  store i64 4, ptr %taddr752, align 8
  %1043 = insertvalue %any undef, ptr %taddr752, 0
  %1044 = insertvalue %any %1043, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %527, ptr %taddr753, align 8
  %1045 = insertvalue %any undef, ptr %taddr753, 0
  %1046 = insertvalue %any %1045, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %1044, ptr %varargslots754, align 16
  %ptradd755 = getelementptr inbounds i8, ptr %varargslots754, i64 16
  store %any %1046, ptr %ptradd755, align 16
  %1047 = insertvalue %"any[]" undef, ptr %varargslots754, 0
  %"$$temp756" = insertvalue %"any[]" %1047, i64 2, 1
  store %"any[]" %"$$temp756", ptr %indirectarg757, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 411, ptr byval(%"any[]") align 8 %indirectarg757) #5, !dbg !4055
  unreachable, !dbg !4055

panic761:                                         ; preds = %if.exit759
  %1048 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4057
  call void %1048(ptr @.panic_msg.249, i64 42, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 412) #5, !dbg !4057
  unreachable, !dbg !4057

panic763:                                         ; preds = %checkok762
  store i64 4, ptr %taddr764, align 8
  %1049 = insertvalue %any undef, ptr %taddr764, 0
  %1050 = insertvalue %any %1049, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %533, ptr %taddr765, align 8
  %1051 = insertvalue %any undef, ptr %taddr765, 0
  %1052 = insertvalue %any %1051, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %1050, ptr %varargslots766, align 16
  %ptradd767 = getelementptr inbounds i8, ptr %varargslots766, i64 16
  store %any %1052, ptr %ptradd767, align 16
  %1053 = insertvalue %"any[]" undef, ptr %varargslots766, 0
  %"$$temp768" = insertvalue %"any[]" %1053, i64 2, 1
  store %"any[]" %"$$temp768", ptr %indirectarg769, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 412, ptr byval(%"any[]") align 8 %indirectarg769) #5, !dbg !4057
  unreachable, !dbg !4057

panic777:                                         ; preds = %loop.cond775
  %1054 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4064
  call void %1054(ptr @.panic_msg.251, i64 42, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 414) #5, !dbg !4064
  unreachable, !dbg !4064

panic779:                                         ; preds = %checkok778
  store i64 4, ptr %taddr780, align 8
  %1055 = insertvalue %any undef, ptr %taddr780, 0
  %1056 = insertvalue %any %1055, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %546, ptr %taddr781, align 8
  %1057 = insertvalue %any undef, ptr %taddr781, 0
  %1058 = insertvalue %any %1057, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %1056, ptr %varargslots782, align 16
  %ptradd783 = getelementptr inbounds i8, ptr %varargslots782, i64 16
  store %any %1058, ptr %ptradd783, align 16
  %1059 = insertvalue %"any[]" undef, ptr %varargslots782, 0
  %"$$temp784" = insertvalue %"any[]" %1059, i64 2, 1
  store %"any[]" %"$$temp784", ptr %indirectarg785, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 414, ptr byval(%"any[]") align 8 %indirectarg785) #5, !dbg !4064
  unreachable, !dbg !4064

panic847:                                         ; preds = %loop.cond844
  %1060 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4107
  call void %1060(ptr @.panic_msg.252, i64 10, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 439) #5, !dbg !4107
  unreachable, !dbg !4107

panic935:                                         ; preds = %loop.exit932
  %1061 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4366
  call void %1061(ptr @.panic_msg.245, i64 47, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 468) #5, !dbg !4366
  unreachable, !dbg !4366

panic941:                                         ; preds = %checkok936
  %1062 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4367
  call void %1062(ptr @.panic_msg.245, i64 47, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 469) #5, !dbg !4367
  unreachable, !dbg !4367

panic1031:                                        ; preds = %loop.body1028
  %1063 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4231
  call void %1063(ptr @.panic_msg.249, i64 42, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 484) #5, !dbg !4231
  unreachable, !dbg !4231

panic1033:                                        ; preds = %checkok1032
  store i64 4, ptr %taddr1034, align 8
  %1064 = insertvalue %any undef, ptr %taddr1034, 0
  %1065 = insertvalue %any %1064, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %725, ptr %taddr1035, align 8
  %1066 = insertvalue %any undef, ptr %taddr1035, 0
  %1067 = insertvalue %any %1066, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %1065, ptr %varargslots1036, align 16
  %ptradd1037 = getelementptr inbounds i8, ptr %varargslots1036, i64 16
  store %any %1067, ptr %ptradd1037, align 16
  %1068 = insertvalue %"any[]" undef, ptr %varargslots1036, 0
  %"$$temp1038" = insertvalue %"any[]" %1068, i64 2, 1
  store %"any[]" %"$$temp1038", ptr %indirectarg1039, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 484, ptr byval(%"any[]") align 8 %indirectarg1039) #5, !dbg !4231
  unreachable, !dbg !4231

panic1064:                                        ; preds = %switch.case1061
  %1069 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4368
  call void %1069(ptr @.panic_msg.224, i64 44, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 490) #5, !dbg !4368
  unreachable, !dbg !4368

panic1107:                                        ; preds = %loop.body1104
  %1070 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4270
  call void %1070(ptr @.panic_msg.249, i64 42, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 497) #5, !dbg !4270
  unreachable, !dbg !4270

panic1109:                                        ; preds = %checkok1108
  store i64 4, ptr %taddr1110, align 8
  %1071 = insertvalue %any undef, ptr %taddr1110, 0
  %1072 = insertvalue %any %1071, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %775, ptr %taddr1111, align 8
  %1073 = insertvalue %any undef, ptr %taddr1111, 0
  %1074 = insertvalue %any %1073, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %1072, ptr %varargslots1112, align 16
  %ptradd1113 = getelementptr inbounds i8, ptr %varargslots1112, i64 16
  store %any %1074, ptr %ptradd1113, align 16
  %1075 = insertvalue %"any[]" undef, ptr %varargslots1112, 0
  %"$$temp1114" = insertvalue %"any[]" %1075, i64 2, 1
  store %"any[]" %"$$temp1114", ptr %indirectarg1115, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 497, ptr byval(%"any[]") align 8 %indirectarg1115) #5, !dbg !4270
  unreachable, !dbg !4270

panic1128:                                        ; preds = %loop.body1125
  %1076 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4369
  call void %1076(ptr @.panic_msg.224, i64 44, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 498) #5, !dbg !4369
  unreachable, !dbg !4369

panic1170:                                        ; preds = %loop.body1167
  %1077 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4307
  call void %1077(ptr @.panic_msg.249, i64 42, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 508) #5, !dbg !4307
  unreachable, !dbg !4307

panic1172:                                        ; preds = %checkok1171
  store i64 4, ptr %taddr1173, align 8
  %1078 = insertvalue %any undef, ptr %taddr1173, 0
  %1079 = insertvalue %any %1078, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %817, ptr %taddr1174, align 8
  %1080 = insertvalue %any undef, ptr %taddr1174, 0
  %1081 = insertvalue %any %1080, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %1079, ptr %varargslots1175, align 16
  %ptradd1176 = getelementptr inbounds i8, ptr %varargslots1175, i64 16
  store %any %1081, ptr %ptradd1176, align 16
  %1082 = insertvalue %"any[]" undef, ptr %varargslots1175, 0
  %"$$temp1177" = insertvalue %"any[]" %1082, i64 2, 1
  store %"any[]" %"$$temp1177", ptr %indirectarg1178, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.240, i64 11, i32 508, ptr byval(%"any[]") align 8 %indirectarg1178) #5, !dbg !4307
  unreachable, !dbg !4307
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.ntoa(ptr %0, ptr %1, i64 %2, i64 %3, i8 zeroext %4, i32 %5) #0 !dbg !4370 {
entry:
  %self = alloca ptr, align 8
  %value = alloca i128, align 16
  %negative = alloca i8, align 1
  %base = alloca i32, align 4
  %buf = alloca [256 x i8], align 16
  %len = alloca i64, align 8
  %past_10 = alloca i8, align 1
  %digit = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %6 = icmp eq ptr %1, null, !dbg !4373
  %7 = call i1 @llvm.expect.i1(i1 %6, i1 false), !dbg !4373
  br i1 %7, label %panic, label %checkok, !dbg !4373

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !4374, !DIExpression(), !4375)
  store i64 %2, ptr %value, align 16
  %ptradd = getelementptr inbounds i8, ptr %value, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %value, !4376, !DIExpression(), !4377)
  store i8 %4, ptr %negative, align 1
    #dbg_declare(ptr %negative, !4378, !DIExpression(), !4379)
  store i32 %5, ptr %base, align 4
    #dbg_declare(ptr %base, !4380, !DIExpression(), !4381)
    #dbg_declare(ptr %buf, !4382, !DIExpression(), !4386)
    #dbg_declare(ptr %len, !4387, !DIExpression(), !4388)
  store i64 0, ptr %len, align 8, !dbg !4388
  %8 = load i128, ptr %value, align 16, !dbg !4389
  %i2nb = icmp eq i128 %8, 0, !dbg !4389
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !4389

if.then:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !4390
  %ptradd1 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !4390
  %10 = load i32, ptr %ptradd1, align 8, !dbg !4391
  %11 = and i32 %10, -17, !dbg !4391
  store i32 %11, ptr %ptradd1, align 8, !dbg !4391
  br label %if.exit, !dbg !4391

if.exit:                                          ; preds = %if.then, %checkok
  %12 = load ptr, ptr %self, align 8, !dbg !4392
  %ptradd2 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !4392
  %13 = load i32, ptr %ptradd2, align 8, !dbg !4392
  %lshrl = lshr i32 %13, 6, !dbg !4392
  %14 = and i32 1, %lshrl, !dbg !4392
  %trunc = trunc i32 %14 to i8, !dbg !4392
  %15 = trunc i8 %trunc to i1, !dbg !4392
  %not = xor i1 %15, true, !dbg !4392
  br i1 %not, label %or.phi, label %or.rhs, !dbg !4392

or.rhs:                                           ; preds = %if.exit
  %16 = load i128, ptr %value, align 16, !dbg !4393
  %i2b = icmp ne i128 %16, 0, !dbg !4393
  br label %or.phi, !dbg !4393

or.phi:                                           ; preds = %or.rhs, %if.exit
  %val = phi i1 [ true, %if.exit ], [ %i2b, %or.rhs ], !dbg !4393
  br i1 %val, label %if.then3, label %if.exit30, !dbg !4393

if.then3:                                         ; preds = %or.phi
    #dbg_declare(ptr %past_10, !4394, !DIExpression(), !4396)
  %17 = load ptr, ptr %self, align 8, !dbg !4397
  %ptradd4 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !4397
  %18 = load i32, ptr %ptradd4, align 8, !dbg !4397
  %lshrl5 = lshr i32 %18, 5, !dbg !4397
  %19 = and i32 1, %lshrl5, !dbg !4397
  %trunc6 = trunc i32 %19 to i8, !dbg !4397
  %20 = trunc i8 %trunc6 to i1, !dbg !4397
  %ternary = select i1 %20, i8 65, i8 97, !dbg !4398
  %zext = zext i8 %ternary to i32, !dbg !4398
  %sub = sub i32 %zext, 10, !dbg !4397
  %trunc7 = trunc i32 %sub to i8, !dbg !4397
  store i8 %trunc7, ptr %past_10, align 1, !dbg !4397
  br label %loop.body, !dbg !4399

loop.cond:                                        ; preds = %checkok29
  %21 = load i128, ptr %value, align 16, !dbg !4400
  %i2b8 = icmp ne i128 %21, 0, !dbg !4400
  br i1 %i2b8, label %loop.body, label %loop.exit, !dbg !4400

loop.body:                                        ; preds = %loop.cond, %if.then3
  %22 = load i64, ptr %len, align 8, !dbg !4402
  %le = icmp ule i64 256, %22, !dbg !4402
  br i1 %le, label %if.then9, label %if.exit10, !dbg !4402

if.then9:                                         ; preds = %loop.body
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !4404

if.exit10:                                        ; preds = %loop.body
    #dbg_declare(ptr %digit, !4405, !DIExpression(), !4406)
  %23 = load i128, ptr %value, align 16, !dbg !4407
  %24 = load i32, ptr %base, align 4, !dbg !4408
  %zext11 = zext i32 %24 to i128, !dbg !4408
  %zero = icmp eq i128 %zext11, 0, !dbg !4409
  %25 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !4409
  br i1 %25, label %panic12, label %checkok13, !dbg !4409

checkok13:                                        ; preds = %if.exit10
  %umod = urem i128 %23, %zext11, !dbg !4409
  %trunc14 = trunc i128 %umod to i8, !dbg !4409
  store i8 %trunc14, ptr %digit, align 1, !dbg !4409
  %26 = load i64, ptr %len, align 8, !dbg !4410
  %add = add i64 %26, 1, !dbg !4410
  store i64 %add, ptr %len, align 8, !dbg !4410
  %ge = icmp uge i64 %26, 256, !dbg !4410
  %27 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !4410
  br i1 %27, label %panic15, label %checkok18, !dbg !4410

checkok18:                                        ; preds = %checkok13
  %ptradd19 = getelementptr inbounds i8, ptr %buf, i64 %26, !dbg !4410
  %28 = load i8, ptr %digit, align 1, !dbg !4411
  %zext20 = zext i8 %28 to i32, !dbg !4411
  %29 = load i8, ptr %digit, align 1, !dbg !4412
  %zext21 = zext i8 %29 to i32, !dbg !4412
  %gt = icmp ugt i32 10, %zext21, !dbg !4412
  br i1 %gt, label %cond.lhs, label %cond.rhs, !dbg !4412

cond.lhs:                                         ; preds = %checkok18
  br label %cond.phi, !dbg !4413

cond.rhs:                                         ; preds = %checkok18
  %30 = load i8, ptr %past_10, align 1, !dbg !4414
  br label %cond.phi, !dbg !4414

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val22 = phi i8 [ 48, %cond.lhs ], [ %30, %cond.rhs ], !dbg !4414
  %zext23 = zext i8 %val22 to i32, !dbg !4414
  %add24 = add i32 %zext20, %zext23, !dbg !4411
  %trunc25 = trunc i32 %add24 to i8, !dbg !4411
  store i8 %trunc25, ptr %ptradd19, align 1, !dbg !4411
  %31 = load i128, ptr %value, align 16, !dbg !4415
  %32 = load i32, ptr %base, align 4, !dbg !4416
  %zext26 = zext i32 %32 to i128, !dbg !4416
  %zero27 = icmp eq i128 %zext26, 0, !dbg !4415
  %33 = call i1 @llvm.expect.i1(i1 %zero27, i1 false), !dbg !4415
  br i1 %33, label %panic28, label %checkok29, !dbg !4415

checkok29:                                        ; preds = %cond.phi
  %udiv = udiv i128 %31, %zext26, !dbg !4415
  store i128 %udiv, ptr %value, align 16, !dbg !4415
  br label %loop.cond, !dbg !4415

loop.exit:                                        ; preds = %loop.cond
  br label %if.exit30, !dbg !4415

if.exit30:                                        ; preds = %loop.exit, %or.phi
  %34 = insertvalue %"char[]" undef, ptr %buf, 0, !dbg !4417
  %35 = insertvalue %"char[]" %34, i64 256, 1, !dbg !4417
  %36 = load ptr, ptr %self, align 8
  %37 = load i64, ptr %len, align 8
  %38 = load i8, ptr %negative, align 1
  %39 = load i32, ptr %base, align 4
  %40 = call i64 @std.io.Formatter.ntoa_format(ptr %retparam, ptr %36, ptr %buf, i64 256, i64 %37, i8 zeroext %38, i32 %39), !dbg !4418
  %not_err = icmp eq i64 %40, 0, !dbg !4418
  %41 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4418
  br i1 %41, label %after_check, label %assign_optional, !dbg !4418

assign_optional:                                  ; preds = %if.exit30
  store i64 %40, ptr %reterr, align 8, !dbg !4418
  br label %err_retblock, !dbg !4418

after_check:                                      ; preds = %if.exit30
  %42 = load i64, ptr %retparam, align 8, !dbg !4418
  store i64 %42, ptr %0, align 8, !dbg !4418
  ret i64 0, !dbg !4418

err_retblock:                                     ; preds = %assign_optional
  %43 = load i64, ptr %reterr, align 8, !dbg !4418
  ret i64 %43, !dbg !4418

panic:                                            ; preds = %entry
  %44 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4375
  call void %44(ptr @.panic_msg, i64 62, ptr @.file.215, i64 20, ptr @.func.255, i64 4, i32 531) #5, !dbg !4375
  unreachable, !dbg !4375

panic12:                                          ; preds = %if.exit10
  %45 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4409
  call void %45(ptr @.panic_msg.252, i64 10, ptr @.file.215, i64 20, ptr @.func.255, i64 4, i32 546) #5, !dbg !4409
  unreachable, !dbg !4409

panic15:                                          ; preds = %checkok13
  store i64 256, ptr %taddr, align 8
  %46 = insertvalue %any undef, ptr %taddr, 0
  %47 = insertvalue %any %46, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr16, align 8
  %48 = insertvalue %any undef, ptr %taddr16, 0
  %49 = insertvalue %any %48, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %47, ptr %varargslots, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %49, ptr %ptradd17, align 16
  %50 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %50, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.215, i64 20, ptr @.func.255, i64 4, i32 547, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !4410
  unreachable, !dbg !4410

panic28:                                          ; preds = %cond.phi
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4415
  call void %51(ptr @.panic_msg.253, i64 17, ptr @.file.215, i64 20, ptr @.func.255, i64 4, i32 548) #5, !dbg !4415
  unreachable, !dbg !4415
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.ntoa_format(ptr %0, ptr %1, ptr %2, i64 %3, i64 %4, i8 zeroext %5, i32 %6) #0 !dbg !4419 {
entry:
  %self = alloca ptr, align 8
  %buf = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %negative = alloca i8, align 1
  %base = alloca i32, align 4
  %taddr = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr53 = alloca i64, align 8
  %taddr54 = alloca i64, align 8
  %varargslots55 = alloca [2 x %any], align 16
  %indirectarg58 = alloca %"any[]", align 8
  %switch = alloca i32, align 4
  %taddr109 = alloca i64, align 8
  %taddr110 = alloca i64, align 8
  %varargslots111 = alloca [2 x %any], align 16
  %indirectarg114 = alloca %"any[]", align 8
  %taddr125 = alloca i64, align 8
  %taddr126 = alloca i64, align 8
  %varargslots127 = alloca [2 x %any], align 16
  %indirectarg130 = alloca %"any[]", align 8
  %taddr142 = alloca i64, align 8
  %taddr143 = alloca i64, align 8
  %varargslots144 = alloca [2 x %any], align 16
  %indirectarg147 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg155 = alloca %"any[]", align 8
  %taddr160 = alloca i64, align 8
  %taddr161 = alloca i64, align 8
  %varargslots162 = alloca [2 x %any], align 16
  %indirectarg165 = alloca %"any[]", align 8
  %switch170 = alloca i8, align 1
  %taddr182 = alloca i64, align 8
  %taddr183 = alloca i64, align 8
  %varargslots184 = alloca [2 x %any], align 16
  %indirectarg187 = alloca %"any[]", align 8
  %taddr203 = alloca i64, align 8
  %taddr204 = alloca i64, align 8
  %varargslots205 = alloca [2 x %any], align 16
  %indirectarg208 = alloca %"any[]", align 8
  %taddr225 = alloca i64, align 8
  %taddr226 = alloca i64, align 8
  %varargslots227 = alloca [2 x %any], align 16
  %indirectarg230 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %taddr238 = alloca i64, align 8
  %taddr239 = alloca i64, align 8
  %varargslots240 = alloca [2 x %any], align 16
  %indirectarg243 = alloca %"any[]", align 8
  %taddr249 = alloca i64, align 8
  %taddr250 = alloca i64, align 8
  %varargslots251 = alloca [2 x %any], align 16
  %indirectarg254 = alloca %"any[]", align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %7 = icmp eq ptr %1, null, !dbg !4422
  %8 = call i1 @llvm.expect.i1(i1 %7, i1 false), !dbg !4422
  br i1 %8, label %panic, label %checkok, !dbg !4422

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !4423, !DIExpression(), !4424)
  store ptr %2, ptr %buf, align 8
  %ptradd = getelementptr inbounds i8, ptr %buf, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %buf, !4425, !DIExpression(), !4426)
  store i64 %4, ptr %len, align 8
    #dbg_declare(ptr %len, !4427, !DIExpression(), !4428)
  store i8 %5, ptr %negative, align 1
    #dbg_declare(ptr %negative, !4429, !DIExpression(), !4430)
  store i32 %6, ptr %base, align 4
    #dbg_declare(ptr %base, !4431, !DIExpression(), !4432)
  %9 = load ptr, ptr %self, align 8, !dbg !4433
  %ptradd1 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !4433
  %10 = load i32, ptr %ptradd1, align 8, !dbg !4433
  %lshrl = lshr i32 %10, 1, !dbg !4433
  %11 = and i32 1, %lshrl, !dbg !4433
  %trunc = trunc i32 %11 to i8, !dbg !4433
  %12 = trunc i8 %trunc to i1, !dbg !4433
  %not = xor i1 %12, true, !dbg !4433
  br i1 %not, label %if.then, label %if.exit62, !dbg !4433

if.then:                                          ; preds = %checkok
  %13 = load ptr, ptr %self, align 8, !dbg !4434
  %ptradd2 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !4434
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd2, i64 4, !dbg !4434
  %14 = load i32, ptr %ptradd3, align 4, !dbg !4434
  %i2b = icmp ne i32 %14, 0, !dbg !4434
  br i1 %i2b, label %and.rhs, label %and.phi, !dbg !4434

and.rhs:                                          ; preds = %if.then
  %15 = load ptr, ptr %self, align 8, !dbg !4436
  %ptradd4 = getelementptr inbounds i8, ptr %15, i64 16, !dbg !4436
  %16 = load i32, ptr %ptradd4, align 8, !dbg !4436
  %17 = and i32 1, %16, !dbg !4436
  %trunc5 = trunc i32 %17 to i8, !dbg !4436
  %18 = trunc i8 %trunc5 to i1, !dbg !4436
  br label %and.phi, !dbg !4436

and.phi:                                          ; preds = %and.rhs, %if.then
  %val = phi i1 [ false, %if.then ], [ %18, %and.rhs ], !dbg !4436
  br i1 %val, label %and.rhs6, label %and.phi17, !dbg !4436

and.rhs6:                                         ; preds = %and.phi
  %19 = load i8, ptr %negative, align 1, !dbg !4437
  %20 = trunc i8 %19 to i1, !dbg !4437
  br i1 %20, label %or.phi, label %or.rhs, !dbg !4437

or.rhs:                                           ; preds = %and.rhs6
  %21 = load ptr, ptr %self, align 8, !dbg !4438
  %ptradd7 = getelementptr inbounds i8, ptr %21, i64 16, !dbg !4438
  %22 = load i32, ptr %ptradd7, align 8, !dbg !4438
  %lshrl8 = lshr i32 %22, 2, !dbg !4438
  %23 = and i32 1, %lshrl8, !dbg !4438
  %trunc9 = trunc i32 %23 to i8, !dbg !4438
  %24 = trunc i8 %trunc9 to i1, !dbg !4438
  br label %or.phi, !dbg !4438

or.phi:                                           ; preds = %or.rhs, %and.rhs6
  %val10 = phi i1 [ true, %and.rhs6 ], [ %24, %or.rhs ], !dbg !4438
  br i1 %val10, label %or.phi15, label %or.rhs11, !dbg !4438

or.rhs11:                                         ; preds = %or.phi
  %25 = load ptr, ptr %self, align 8, !dbg !4439
  %ptradd12 = getelementptr inbounds i8, ptr %25, i64 16, !dbg !4439
  %26 = load i32, ptr %ptradd12, align 8, !dbg !4439
  %lshrl13 = lshr i32 %26, 3, !dbg !4439
  %27 = and i32 1, %lshrl13, !dbg !4439
  %trunc14 = trunc i32 %27 to i8, !dbg !4439
  %28 = trunc i8 %trunc14 to i1, !dbg !4439
  br label %or.phi15, !dbg !4439

or.phi15:                                         ; preds = %or.rhs11, %or.phi
  %val16 = phi i1 [ true, %or.phi ], [ %28, %or.rhs11 ], !dbg !4439
  br label %and.phi17, !dbg !4439

and.phi17:                                        ; preds = %or.phi15, %and.phi
  %val18 = phi i1 [ false, %and.phi ], [ %val16, %or.phi15 ], !dbg !4439
  br i1 %val18, label %if.then19, label %if.exit, !dbg !4439

if.then19:                                        ; preds = %and.phi17
  %29 = load ptr, ptr %self, align 8, !dbg !4440
  %ptradd20 = getelementptr inbounds i8, ptr %29, i64 16, !dbg !4440
  %ptradd21 = getelementptr inbounds i8, ptr %ptradd20, i64 4, !dbg !4440
  %30 = load i32, ptr %ptradd21, align 4, !dbg !4440
  %sub = sub i32 %30, 1, !dbg !4440
  store i32 %sub, ptr %ptradd21, align 4, !dbg !4440
  br label %if.exit, !dbg !4440

if.exit:                                          ; preds = %if.then19, %and.phi17
  br label %loop.cond, !dbg !4441

loop.cond:                                        ; preds = %checkok32, %if.exit
  %31 = load i64, ptr %len, align 8, !dbg !4442
  %32 = load ptr, ptr %self, align 8, !dbg !4444
  %ptradd22 = getelementptr inbounds i8, ptr %32, i64 16, !dbg !4444
  %ptradd23 = getelementptr inbounds i8, ptr %ptradd22, i64 8, !dbg !4444
  %33 = load i32, ptr %ptradd23, align 8, !dbg !4444
  %zext = zext i32 %33 to i64, !dbg !4444
  %lt = icmp ult i64 %31, %zext, !dbg !4442
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !4442

loop.body:                                        ; preds = %loop.cond
  %34 = load i64, ptr %len, align 8, !dbg !4445
  %ptradd24 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !4447
  %35 = load i64, ptr %ptradd24, align 8, !dbg !4447
  %ge = icmp uge i64 %34, %35, !dbg !4445
  br i1 %ge, label %if.then25, label %if.exit26, !dbg !4445

if.then25:                                        ; preds = %loop.body
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !4448

if.exit26:                                        ; preds = %loop.body
  %ptradd27 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !4449
  %36 = load i64, ptr %ptradd27, align 8, !dbg !4449
  %37 = load ptr, ptr %buf, align 8, !dbg !4449
  %38 = load i64, ptr %len, align 8, !dbg !4450
  %add = add i64 %38, 1, !dbg !4450
  store i64 %add, ptr %len, align 8, !dbg !4450
  %ge28 = icmp uge i64 %38, %36, !dbg !4450
  %39 = call i1 @llvm.expect.i1(i1 %ge28, i1 false), !dbg !4450
  br i1 %39, label %panic29, label %checkok32, !dbg !4450

checkok32:                                        ; preds = %if.exit26
  %ptradd33 = getelementptr inbounds i8, ptr %37, i64 %38, !dbg !4450
  store i8 48, ptr %ptradd33, align 1, !dbg !4451
  br label %loop.cond, !dbg !4451

loop.exit:                                        ; preds = %loop.cond
  br label %loop.cond34, !dbg !4452

loop.cond34:                                      ; preds = %checkok59, %loop.exit
  %40 = load ptr, ptr %self, align 8, !dbg !4453
  %ptradd35 = getelementptr inbounds i8, ptr %40, i64 16, !dbg !4453
  %41 = load i32, ptr %ptradd35, align 8, !dbg !4453
  %42 = and i32 1, %41, !dbg !4453
  %trunc36 = trunc i32 %42 to i8, !dbg !4453
  %43 = trunc i8 %trunc36 to i1, !dbg !4453
  br i1 %43, label %and.rhs37, label %and.phi42, !dbg !4453

and.rhs37:                                        ; preds = %loop.cond34
  %44 = load i64, ptr %len, align 8, !dbg !4455
  %45 = load ptr, ptr %self, align 8, !dbg !4456
  %ptradd38 = getelementptr inbounds i8, ptr %45, i64 16, !dbg !4456
  %ptradd39 = getelementptr inbounds i8, ptr %ptradd38, i64 4, !dbg !4456
  %46 = load i32, ptr %ptradd39, align 4, !dbg !4456
  %zext40 = zext i32 %46 to i64, !dbg !4456
  %lt41 = icmp ult i64 %44, %zext40, !dbg !4455
  br label %and.phi42, !dbg !4455

and.phi42:                                        ; preds = %and.rhs37, %loop.cond34
  %val43 = phi i1 [ false, %loop.cond34 ], [ %lt41, %and.rhs37 ], !dbg !4455
  br i1 %val43, label %loop.body44, label %loop.exit61, !dbg !4455

loop.body44:                                      ; preds = %and.phi42
  %47 = load i64, ptr %len, align 8, !dbg !4457
  %ptradd45 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !4459
  %48 = load i64, ptr %ptradd45, align 8, !dbg !4459
  %ge46 = icmp uge i64 %47, %48, !dbg !4457
  br i1 %ge46, label %if.then47, label %if.exit48, !dbg !4457

if.then47:                                        ; preds = %loop.body44
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !4460

if.exit48:                                        ; preds = %loop.body44
  %ptradd49 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !4461
  %49 = load i64, ptr %ptradd49, align 8, !dbg !4461
  %50 = load ptr, ptr %buf, align 8, !dbg !4461
  %51 = load i64, ptr %len, align 8, !dbg !4462
  %add50 = add i64 %51, 1, !dbg !4462
  store i64 %add50, ptr %len, align 8, !dbg !4462
  %ge51 = icmp uge i64 %51, %49, !dbg !4462
  %52 = call i1 @llvm.expect.i1(i1 %ge51, i1 false), !dbg !4462
  br i1 %52, label %panic52, label %checkok59, !dbg !4462

checkok59:                                        ; preds = %if.exit48
  %ptradd60 = getelementptr inbounds i8, ptr %50, i64 %51, !dbg !4462
  store i8 48, ptr %ptradd60, align 1, !dbg !4463
  br label %loop.cond34, !dbg !4463

loop.exit61:                                      ; preds = %and.phi42
  br label %if.exit62, !dbg !4463

if.exit62:                                        ; preds = %loop.exit61, %checkok
  %53 = load ptr, ptr %self, align 8, !dbg !4464
  %ptradd63 = getelementptr inbounds i8, ptr %53, i64 16, !dbg !4464
  %54 = load i32, ptr %ptradd63, align 8, !dbg !4464
  %lshrl64 = lshr i32 %54, 4, !dbg !4464
  %55 = and i32 1, %lshrl64, !dbg !4464
  %trunc65 = trunc i32 %55 to i8, !dbg !4464
  %56 = trunc i8 %trunc65 to i1, !dbg !4464
  br i1 %56, label %and.rhs66, label %and.phi67, !dbg !4464

and.rhs66:                                        ; preds = %if.exit62
  %57 = load i32, ptr %base, align 4, !dbg !4465
  %neq = icmp ne i32 10, %57, !dbg !4465
  br label %and.phi67, !dbg !4465

and.phi67:                                        ; preds = %and.rhs66, %if.exit62
  %val68 = phi i1 [ false, %if.exit62 ], [ %neq, %and.rhs66 ], !dbg !4465
  br i1 %val68, label %if.then69, label %if.exit169, !dbg !4465

if.then69:                                        ; preds = %and.phi67
  %58 = load ptr, ptr %self, align 8, !dbg !4466
  %ptradd70 = getelementptr inbounds i8, ptr %58, i64 16, !dbg !4466
  %59 = load i32, ptr %ptradd70, align 8, !dbg !4466
  %lshrl71 = lshr i32 %59, 6, !dbg !4466
  %60 = and i32 1, %lshrl71, !dbg !4466
  %trunc72 = trunc i32 %60 to i8, !dbg !4466
  %61 = trunc i8 %trunc72 to i1, !dbg !4466
  %not73 = xor i1 %61, true, !dbg !4466
  br i1 %not73, label %and.rhs74, label %and.phi76, !dbg !4466

and.rhs74:                                        ; preds = %if.then69
  %62 = load i64, ptr %len, align 8, !dbg !4468
  %i2b75 = icmp ne i64 %62, 0, !dbg !4468
  br label %and.phi76, !dbg !4468

and.phi76:                                        ; preds = %and.rhs74, %if.then69
  %val77 = phi i1 [ false, %if.then69 ], [ %i2b75, %and.rhs74 ], !dbg !4468
  br i1 %val77, label %and.rhs78, label %and.phi82, !dbg !4468

and.rhs78:                                        ; preds = %and.phi76
  %63 = load i64, ptr %len, align 8, !dbg !4469
  %64 = load ptr, ptr %self, align 8, !dbg !4470
  %ptradd79 = getelementptr inbounds i8, ptr %64, i64 16, !dbg !4470
  %ptradd80 = getelementptr inbounds i8, ptr %ptradd79, i64 8, !dbg !4470
  %65 = load i32, ptr %ptradd80, align 8, !dbg !4470
  %zext81 = zext i32 %65 to i64, !dbg !4470
  %eq = icmp eq i64 %63, %zext81, !dbg !4469
  br label %and.phi82, !dbg !4469

and.phi82:                                        ; preds = %and.rhs78, %and.phi76
  %val83 = phi i1 [ false, %and.phi76 ], [ %eq, %and.rhs78 ], !dbg !4469
  br i1 %val83, label %and.rhs84, label %and.phi89, !dbg !4469

and.rhs84:                                        ; preds = %and.phi82
  %66 = load i64, ptr %len, align 8, !dbg !4471
  %67 = load ptr, ptr %self, align 8, !dbg !4472
  %ptradd85 = getelementptr inbounds i8, ptr %67, i64 16, !dbg !4472
  %ptradd86 = getelementptr inbounds i8, ptr %ptradd85, i64 4, !dbg !4472
  %68 = load i32, ptr %ptradd86, align 4, !dbg !4472
  %zext87 = zext i32 %68 to i64, !dbg !4472
  %eq88 = icmp eq i64 %66, %zext87, !dbg !4471
  br label %and.phi89, !dbg !4471

and.phi89:                                        ; preds = %and.rhs84, %and.phi82
  %val90 = phi i1 [ false, %and.phi82 ], [ %eq88, %and.rhs84 ], !dbg !4471
  br i1 %val90, label %if.then91, label %if.exit97, !dbg !4471

if.then91:                                        ; preds = %and.phi89
  %69 = load i64, ptr %len, align 8, !dbg !4473
  %sub92 = sub i64 %69, 1, !dbg !4473
  store i64 %sub92, ptr %len, align 8, !dbg !4473
  %70 = load i64, ptr %len, align 8, !dbg !4475
  %i2b93 = icmp ne i64 %70, 0, !dbg !4475
  br i1 %i2b93, label %if.then94, label %if.exit96, !dbg !4475

if.then94:                                        ; preds = %if.then91
  %71 = load i64, ptr %len, align 8, !dbg !4476
  %sub95 = sub i64 %71, 1, !dbg !4476
  store i64 %sub95, ptr %len, align 8, !dbg !4476
  br label %if.exit96, !dbg !4476

if.exit96:                                        ; preds = %if.then94, %if.then91
  br label %if.exit97, !dbg !4476

if.exit97:                                        ; preds = %if.exit96, %and.phi89
  %72 = load i32, ptr %base, align 4, !dbg !4477
  %neq98 = icmp ne i32 10, %72, !dbg !4477
  br i1 %neq98, label %if.then99, label %if.exit168, !dbg !4477

if.then99:                                        ; preds = %if.exit97
  %73 = load i64, ptr %len, align 8, !dbg !4478
  %add100 = add i64 %73, 1, !dbg !4478
  %ptradd101 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !4480
  %74 = load i64, ptr %ptradd101, align 8, !dbg !4480
  %ge102 = icmp sge i64 %add100, %74, !dbg !4478
  %check = icmp sge i64 %74, 0, !dbg !4478
  %siui-ge = and i1 %check, %ge102, !dbg !4478
  br i1 %siui-ge, label %if.then103, label %if.exit104, !dbg !4478

if.then103:                                       ; preds = %if.then99
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !4481

if.exit104:                                       ; preds = %if.then99
  %75 = load i32, ptr %base, align 4
  store i32 %75, ptr %switch, align 4
  br label %switch.entry

switch.entry:                                     ; preds = %if.exit104
  %76 = load i32, ptr %switch, align 4
  switch i32 %76, label %switch.default [
    i32 16, label %switch.case
    i32 8, label %switch.case120
    i32 2, label %switch.case137
  ]

switch.case:                                      ; preds = %switch.entry
  %ptradd105 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !4482
  %77 = load i64, ptr %ptradd105, align 8, !dbg !4482
  %78 = load ptr, ptr %buf, align 8, !dbg !4482
  %79 = load i64, ptr %len, align 8, !dbg !4485
  %add106 = add i64 %79, 1, !dbg !4485
  store i64 %add106, ptr %len, align 8, !dbg !4485
  %ge107 = icmp uge i64 %79, %77, !dbg !4485
  %80 = call i1 @llvm.expect.i1(i1 %ge107, i1 false), !dbg !4485
  br i1 %80, label %panic108, label %checkok115, !dbg !4485

checkok115:                                       ; preds = %switch.case
  %ptradd116 = getelementptr inbounds i8, ptr %78, i64 %79, !dbg !4485
  %81 = load ptr, ptr %self, align 8, !dbg !4486
  %ptradd117 = getelementptr inbounds i8, ptr %81, i64 16, !dbg !4486
  %82 = load i32, ptr %ptradd117, align 8, !dbg !4486
  %lshrl118 = lshr i32 %82, 5, !dbg !4486
  %83 = and i32 1, %lshrl118, !dbg !4486
  %trunc119 = trunc i32 %83 to i8, !dbg !4486
  %84 = trunc i8 %trunc119 to i1, !dbg !4486
  %ternary = select i1 %84, i8 88, i8 120, !dbg !4487
  store i8 %ternary, ptr %ptradd116, align 1, !dbg !4487
  br label %switch.exit, !dbg !4487

switch.case120:                                   ; preds = %switch.entry
  %ptradd121 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !4488
  %85 = load i64, ptr %ptradd121, align 8, !dbg !4488
  %86 = load ptr, ptr %buf, align 8, !dbg !4488
  %87 = load i64, ptr %len, align 8, !dbg !4490
  %add122 = add i64 %87, 1, !dbg !4490
  store i64 %add122, ptr %len, align 8, !dbg !4490
  %ge123 = icmp uge i64 %87, %85, !dbg !4490
  %88 = call i1 @llvm.expect.i1(i1 %ge123, i1 false), !dbg !4490
  br i1 %88, label %panic124, label %checkok131, !dbg !4490

checkok131:                                       ; preds = %switch.case120
  %ptradd132 = getelementptr inbounds i8, ptr %86, i64 %87, !dbg !4490
  %89 = load ptr, ptr %self, align 8, !dbg !4491
  %ptradd133 = getelementptr inbounds i8, ptr %89, i64 16, !dbg !4491
  %90 = load i32, ptr %ptradd133, align 8, !dbg !4491
  %lshrl134 = lshr i32 %90, 5, !dbg !4491
  %91 = and i32 1, %lshrl134, !dbg !4491
  %trunc135 = trunc i32 %91 to i8, !dbg !4491
  %92 = trunc i8 %trunc135 to i1, !dbg !4491
  %ternary136 = select i1 %92, i8 79, i8 111, !dbg !4492
  store i8 %ternary136, ptr %ptradd132, align 1, !dbg !4492
  br label %switch.exit, !dbg !4492

switch.case137:                                   ; preds = %switch.entry
  %ptradd138 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !4493
  %93 = load i64, ptr %ptradd138, align 8, !dbg !4493
  %94 = load ptr, ptr %buf, align 8, !dbg !4493
  %95 = load i64, ptr %len, align 8, !dbg !4495
  %add139 = add i64 %95, 1, !dbg !4495
  store i64 %add139, ptr %len, align 8, !dbg !4495
  %ge140 = icmp uge i64 %95, %93, !dbg !4495
  %96 = call i1 @llvm.expect.i1(i1 %ge140, i1 false), !dbg !4495
  br i1 %96, label %panic141, label %checkok148, !dbg !4495

checkok148:                                       ; preds = %switch.case137
  %ptradd149 = getelementptr inbounds i8, ptr %94, i64 %95, !dbg !4495
  %97 = load ptr, ptr %self, align 8, !dbg !4496
  %ptradd150 = getelementptr inbounds i8, ptr %97, i64 16, !dbg !4496
  %98 = load i32, ptr %ptradd150, align 8, !dbg !4496
  %lshrl151 = lshr i32 %98, 5, !dbg !4496
  %99 = and i32 1, %lshrl151, !dbg !4496
  %trunc152 = trunc i32 %99 to i8, !dbg !4496
  %100 = trunc i8 %trunc152 to i1, !dbg !4496
  %ternary153 = select i1 %100, i8 66, i8 98, !dbg !4497
  store i8 %ternary153, ptr %ptradd149, align 1, !dbg !4497
  br label %switch.exit, !dbg !4497

switch.default:                                   ; preds = %switch.entry
  store %"char[]" { ptr @.str.257, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !4498
  %ptradd154 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !4498
  %hi = load i64, ptr %ptradd154, align 8, !dbg !4498
  store %"any[]" zeroinitializer, ptr %indirectarg155, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.258, i64 20, ptr @.str.259, i64 21, i32 593, ptr byval(%"any[]") align 8 %indirectarg155), !dbg !4502
  unreachable, !dbg !4503

switch.exit:                                      ; preds = %checkok148, %checkok131, %checkok115
  %ptradd156 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !4504
  %101 = load i64, ptr %ptradd156, align 8, !dbg !4504
  %102 = load ptr, ptr %buf, align 8, !dbg !4504
  %103 = load i64, ptr %len, align 8, !dbg !4505
  %add157 = add i64 %103, 1, !dbg !4505
  store i64 %add157, ptr %len, align 8, !dbg !4505
  %ge158 = icmp uge i64 %103, %101, !dbg !4505
  %104 = call i1 @llvm.expect.i1(i1 %ge158, i1 false), !dbg !4505
  br i1 %104, label %panic159, label %checkok166, !dbg !4505

checkok166:                                       ; preds = %switch.exit
  %ptradd167 = getelementptr inbounds i8, ptr %102, i64 %103, !dbg !4505
  store i8 48, ptr %ptradd167, align 1, !dbg !4506
  br label %if.exit168, !dbg !4506

if.exit168:                                       ; preds = %checkok166, %if.exit97
  br label %if.exit169, !dbg !4506

if.exit169:                                       ; preds = %if.exit168, %and.phi67
  store i8 1, ptr %switch170, align 1
  br label %switch.entry171

switch.entry171:                                  ; preds = %if.exit169
  %105 = load i8, ptr %switch170, align 1
  %106 = trunc i8 %105 to i1
  %107 = load i8, ptr %negative, align 1, !dbg !4507
  %108 = trunc i8 %107 to i1, !dbg !4507
  %eq172 = icmp eq i1 %108, %106, !dbg !4507
  br i1 %eq172, label %switch.case173, label %next_if, !dbg !4507

switch.case173:                                   ; preds = %switch.entry171
  %109 = load i64, ptr %len, align 8, !dbg !4509
  %ptradd174 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !4511
  %110 = load i64, ptr %ptradd174, align 8, !dbg !4511
  %ge175 = icmp uge i64 %109, %110, !dbg !4509
  br i1 %ge175, label %if.then176, label %if.exit177, !dbg !4509

if.then176:                                       ; preds = %switch.case173
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !4512

if.exit177:                                       ; preds = %switch.case173
  %ptradd178 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !4513
  %111 = load i64, ptr %ptradd178, align 8, !dbg !4513
  %112 = load ptr, ptr %buf, align 8, !dbg !4513
  %113 = load i64, ptr %len, align 8, !dbg !4514
  %add179 = add i64 %113, 1, !dbg !4514
  store i64 %add179, ptr %len, align 8, !dbg !4514
  %ge180 = icmp uge i64 %113, %111, !dbg !4514
  %114 = call i1 @llvm.expect.i1(i1 %ge180, i1 false), !dbg !4514
  br i1 %114, label %panic181, label %checkok188, !dbg !4514

checkok188:                                       ; preds = %if.exit177
  %ptradd189 = getelementptr inbounds i8, ptr %112, i64 %113, !dbg !4514
  store i8 45, ptr %ptradd189, align 1, !dbg !4515
  br label %switch.exit234, !dbg !4515

next_if:                                          ; preds = %switch.entry171
  %115 = load ptr, ptr %self, align 8, !dbg !4516
  %ptradd190 = getelementptr inbounds i8, ptr %115, i64 16, !dbg !4516
  %116 = load i32, ptr %ptradd190, align 8, !dbg !4516
  %lshrl191 = lshr i32 %116, 2, !dbg !4516
  %117 = and i32 1, %lshrl191, !dbg !4516
  %trunc192 = trunc i32 %117 to i8, !dbg !4516
  %118 = trunc i8 %trunc192 to i1, !dbg !4516
  %eq193 = icmp eq i1 %118, %106, !dbg !4516
  br i1 %eq193, label %switch.case194, label %next_if211, !dbg !4516

switch.case194:                                   ; preds = %next_if
  %119 = load i64, ptr %len, align 8, !dbg !4517
  %ptradd195 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !4519
  %120 = load i64, ptr %ptradd195, align 8, !dbg !4519
  %ge196 = icmp uge i64 %119, %120, !dbg !4517
  br i1 %ge196, label %if.then197, label %if.exit198, !dbg !4517

if.then197:                                       ; preds = %switch.case194
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !4520

if.exit198:                                       ; preds = %switch.case194
  %ptradd199 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !4521
  %121 = load i64, ptr %ptradd199, align 8, !dbg !4521
  %122 = load ptr, ptr %buf, align 8, !dbg !4521
  %123 = load i64, ptr %len, align 8, !dbg !4522
  %add200 = add i64 %123, 1, !dbg !4522
  store i64 %add200, ptr %len, align 8, !dbg !4522
  %ge201 = icmp uge i64 %123, %121, !dbg !4522
  %124 = call i1 @llvm.expect.i1(i1 %ge201, i1 false), !dbg !4522
  br i1 %124, label %panic202, label %checkok209, !dbg !4522

checkok209:                                       ; preds = %if.exit198
  %ptradd210 = getelementptr inbounds i8, ptr %122, i64 %123, !dbg !4522
  store i8 43, ptr %ptradd210, align 1, !dbg !4523
  br label %switch.exit234, !dbg !4523

next_if211:                                       ; preds = %next_if
  %125 = load ptr, ptr %self, align 8, !dbg !4524
  %ptradd212 = getelementptr inbounds i8, ptr %125, i64 16, !dbg !4524
  %126 = load i32, ptr %ptradd212, align 8, !dbg !4524
  %lshrl213 = lshr i32 %126, 3, !dbg !4524
  %127 = and i32 1, %lshrl213, !dbg !4524
  %trunc214 = trunc i32 %127 to i8, !dbg !4524
  %128 = trunc i8 %trunc214 to i1, !dbg !4524
  %eq215 = icmp eq i1 %128, %106, !dbg !4524
  br i1 %eq215, label %switch.case216, label %next_if233, !dbg !4524

switch.case216:                                   ; preds = %next_if211
  %129 = load i64, ptr %len, align 8, !dbg !4525
  %ptradd217 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !4527
  %130 = load i64, ptr %ptradd217, align 8, !dbg !4527
  %ge218 = icmp uge i64 %129, %130, !dbg !4525
  br i1 %ge218, label %if.then219, label %if.exit220, !dbg !4525

if.then219:                                       ; preds = %switch.case216
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !4528

if.exit220:                                       ; preds = %switch.case216
  %ptradd221 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !4529
  %131 = load i64, ptr %ptradd221, align 8, !dbg !4529
  %132 = load ptr, ptr %buf, align 8, !dbg !4529
  %133 = load i64, ptr %len, align 8, !dbg !4530
  %add222 = add i64 %133, 1, !dbg !4530
  store i64 %add222, ptr %len, align 8, !dbg !4530
  %ge223 = icmp uge i64 %133, %131, !dbg !4530
  %134 = call i1 @llvm.expect.i1(i1 %ge223, i1 false), !dbg !4530
  br i1 %134, label %panic224, label %checkok231, !dbg !4530

checkok231:                                       ; preds = %if.exit220
  %ptradd232 = getelementptr inbounds i8, ptr %132, i64 %133, !dbg !4530
  store i8 32, ptr %ptradd232, align 1, !dbg !4531
  br label %switch.exit234, !dbg !4531

next_if233:                                       ; preds = %next_if211
  br label %switch.exit234, !dbg !4531

switch.exit234:                                   ; preds = %next_if233, %checkok231, %checkok209, %checkok188
  %135 = load i64, ptr %len, align 8, !dbg !4532
  %i2b235 = icmp ne i64 %135, 0, !dbg !4532
  br i1 %i2b235, label %if.then236, label %if.exit256, !dbg !4532

if.then236:                                       ; preds = %switch.exit234
  %136 = load %"char[]", ptr %buf, align 8, !dbg !4533
  %137 = extractvalue %"char[]" %136, 0, !dbg !4533
  %138 = extractvalue %"char[]" %136, 1, !dbg !4534
  %gt = icmp ugt i64 0, %138, !dbg !4534
  %139 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !4534
  br i1 %139, label %panic237, label %checkok244, !dbg !4534

checkok244:                                       ; preds = %if.then236
  %140 = load i64, ptr %len, align 8, !dbg !4535
  %add245 = add i64 0, %140, !dbg !4535
  %lt246 = icmp ult i64 %138, %add245, !dbg !4535
  %sub247 = sub i64 %add245, 1, !dbg !4535
  %141 = call i1 @llvm.expect.i1(i1 %lt246, i1 false), !dbg !4535
  br i1 %141, label %panic248, label %checkok255, !dbg !4535

checkok255:                                       ; preds = %checkok244
  %size = sub i64 %add245, 0, !dbg !4533
  %142 = insertvalue %"char[]" undef, ptr %137, 0, !dbg !4533
  %143 = insertvalue %"char[]" %142, i64 %size, 1, !dbg !4533
  %144 = load ptr, ptr %self, align 8
  %145 = call i64 @std.io.Formatter.out_reverse(ptr %retparam, ptr %144, ptr %137, i64 %size), !dbg !4536
  %not_err = icmp eq i64 %145, 0, !dbg !4536
  %146 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4536
  br i1 %146, label %after_check, label %assign_optional, !dbg !4536

assign_optional:                                  ; preds = %checkok255
  store i64 %145, ptr %error_var, align 8, !dbg !4536
  br label %guard_block, !dbg !4536

after_check:                                      ; preds = %checkok255
  br label %noerr_block, !dbg !4536

guard_block:                                      ; preds = %assign_optional
  %147 = load i64, ptr %error_var, align 8, !dbg !4536
  ret i64 %147, !dbg !4536

noerr_block:                                      ; preds = %after_check
  br label %if.exit256, !dbg !4536

if.exit256:                                       ; preds = %noerr_block, %switch.exit234
  %148 = load i64, ptr %len, align 8, !dbg !4537
  store i64 %148, ptr %0, align 8, !dbg !4537
  ret i64 0, !dbg !4537

panic:                                            ; preds = %entry
  %149 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4424
  call void %149(ptr @.panic_msg, i64 62, ptr @.file.215, i64 20, ptr @.func.256, i64 11, i32 555) #5, !dbg !4424
  unreachable, !dbg !4424

panic29:                                          ; preds = %if.exit26
  store i64 %36, ptr %taddr, align 8
  %150 = insertvalue %any undef, ptr %taddr, 0
  %151 = insertvalue %any %150, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %38, ptr %taddr30, align 8
  %152 = insertvalue %any undef, ptr %taddr30, 0
  %153 = insertvalue %any %152, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %151, ptr %varargslots, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %153, ptr %ptradd31, align 16
  %154 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %154, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.215, i64 20, ptr @.func.256, i64 11, i32 564, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !4450
  unreachable, !dbg !4450

panic52:                                          ; preds = %if.exit48
  store i64 %49, ptr %taddr53, align 8
  %155 = insertvalue %any undef, ptr %taddr53, 0
  %156 = insertvalue %any %155, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %51, ptr %taddr54, align 8
  %157 = insertvalue %any undef, ptr %taddr54, 0
  %158 = insertvalue %any %157, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %156, ptr %varargslots55, align 16
  %ptradd56 = getelementptr inbounds i8, ptr %varargslots55, i64 16
  store %any %158, ptr %ptradd56, align 16
  %159 = insertvalue %"any[]" undef, ptr %varargslots55, 0
  %"$$temp57" = insertvalue %"any[]" %159, i64 2, 1
  store %"any[]" %"$$temp57", ptr %indirectarg58, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.215, i64 20, ptr @.func.256, i64 11, i32 569, ptr byval(%"any[]") align 8 %indirectarg58) #5, !dbg !4462
  unreachable, !dbg !4462

panic108:                                         ; preds = %switch.case
  store i64 %77, ptr %taddr109, align 8
  %160 = insertvalue %any undef, ptr %taddr109, 0
  %161 = insertvalue %any %160, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %79, ptr %taddr110, align 8
  %162 = insertvalue %any undef, ptr %taddr110, 0
  %163 = insertvalue %any %162, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %161, ptr %varargslots111, align 16
  %ptradd112 = getelementptr inbounds i8, ptr %varargslots111, i64 16
  store %any %163, ptr %ptradd112, align 16
  %164 = insertvalue %"any[]" undef, ptr %varargslots111, 0
  %"$$temp113" = insertvalue %"any[]" %164, i64 2, 1
  store %"any[]" %"$$temp113", ptr %indirectarg114, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.215, i64 20, ptr @.func.256, i64 11, i32 587, ptr byval(%"any[]") align 8 %indirectarg114) #5, !dbg !4485
  unreachable, !dbg !4485

panic124:                                         ; preds = %switch.case120
  store i64 %85, ptr %taddr125, align 8
  %165 = insertvalue %any undef, ptr %taddr125, 0
  %166 = insertvalue %any %165, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %87, ptr %taddr126, align 8
  %167 = insertvalue %any undef, ptr %taddr126, 0
  %168 = insertvalue %any %167, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %166, ptr %varargslots127, align 16
  %ptradd128 = getelementptr inbounds i8, ptr %varargslots127, i64 16
  store %any %168, ptr %ptradd128, align 16
  %169 = insertvalue %"any[]" undef, ptr %varargslots127, 0
  %"$$temp129" = insertvalue %"any[]" %169, i64 2, 1
  store %"any[]" %"$$temp129", ptr %indirectarg130, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.215, i64 20, ptr @.func.256, i64 11, i32 589, ptr byval(%"any[]") align 8 %indirectarg130) #5, !dbg !4490
  unreachable, !dbg !4490

panic141:                                         ; preds = %switch.case137
  store i64 %93, ptr %taddr142, align 8
  %170 = insertvalue %any undef, ptr %taddr142, 0
  %171 = insertvalue %any %170, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %95, ptr %taddr143, align 8
  %172 = insertvalue %any undef, ptr %taddr143, 0
  %173 = insertvalue %any %172, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %171, ptr %varargslots144, align 16
  %ptradd145 = getelementptr inbounds i8, ptr %varargslots144, i64 16
  store %any %173, ptr %ptradd145, align 16
  %174 = insertvalue %"any[]" undef, ptr %varargslots144, 0
  %"$$temp146" = insertvalue %"any[]" %174, i64 2, 1
  store %"any[]" %"$$temp146", ptr %indirectarg147, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.215, i64 20, ptr @.func.256, i64 11, i32 591, ptr byval(%"any[]") align 8 %indirectarg147) #5, !dbg !4495
  unreachable, !dbg !4495

panic159:                                         ; preds = %switch.exit
  store i64 %101, ptr %taddr160, align 8
  %175 = insertvalue %any undef, ptr %taddr160, 0
  %176 = insertvalue %any %175, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %103, ptr %taddr161, align 8
  %177 = insertvalue %any undef, ptr %taddr161, 0
  %178 = insertvalue %any %177, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %176, ptr %varargslots162, align 16
  %ptradd163 = getelementptr inbounds i8, ptr %varargslots162, i64 16
  store %any %178, ptr %ptradd163, align 16
  %179 = insertvalue %"any[]" undef, ptr %varargslots162, 0
  %"$$temp164" = insertvalue %"any[]" %179, i64 2, 1
  store %"any[]" %"$$temp164", ptr %indirectarg165, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.215, i64 20, ptr @.func.256, i64 11, i32 595, ptr byval(%"any[]") align 8 %indirectarg165) #5, !dbg !4505
  unreachable, !dbg !4505

panic181:                                         ; preds = %if.exit177
  store i64 %111, ptr %taddr182, align 8
  %180 = insertvalue %any undef, ptr %taddr182, 0
  %181 = insertvalue %any %180, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %113, ptr %taddr183, align 8
  %182 = insertvalue %any undef, ptr %taddr183, 0
  %183 = insertvalue %any %182, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %181, ptr %varargslots184, align 16
  %ptradd185 = getelementptr inbounds i8, ptr %varargslots184, i64 16
  store %any %183, ptr %ptradd185, align 16
  %184 = insertvalue %"any[]" undef, ptr %varargslots184, 0
  %"$$temp186" = insertvalue %"any[]" %184, i64 2, 1
  store %"any[]" %"$$temp186", ptr %indirectarg187, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.215, i64 20, ptr @.func.256, i64 11, i32 603, ptr byval(%"any[]") align 8 %indirectarg187) #5, !dbg !4514
  unreachable, !dbg !4514

panic202:                                         ; preds = %if.exit198
  store i64 %121, ptr %taddr203, align 8
  %185 = insertvalue %any undef, ptr %taddr203, 0
  %186 = insertvalue %any %185, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %123, ptr %taddr204, align 8
  %187 = insertvalue %any undef, ptr %taddr204, 0
  %188 = insertvalue %any %187, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %186, ptr %varargslots205, align 16
  %ptradd206 = getelementptr inbounds i8, ptr %varargslots205, i64 16
  store %any %188, ptr %ptradd206, align 16
  %189 = insertvalue %"any[]" undef, ptr %varargslots205, 0
  %"$$temp207" = insertvalue %"any[]" %189, i64 2, 1
  store %"any[]" %"$$temp207", ptr %indirectarg208, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.215, i64 20, ptr @.func.256, i64 11, i32 606, ptr byval(%"any[]") align 8 %indirectarg208) #5, !dbg !4522
  unreachable, !dbg !4522

panic224:                                         ; preds = %if.exit220
  store i64 %131, ptr %taddr225, align 8
  %190 = insertvalue %any undef, ptr %taddr225, 0
  %191 = insertvalue %any %190, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %133, ptr %taddr226, align 8
  %192 = insertvalue %any undef, ptr %taddr226, 0
  %193 = insertvalue %any %192, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %191, ptr %varargslots227, align 16
  %ptradd228 = getelementptr inbounds i8, ptr %varargslots227, i64 16
  store %any %193, ptr %ptradd228, align 16
  %194 = insertvalue %"any[]" undef, ptr %varargslots227, 0
  %"$$temp229" = insertvalue %"any[]" %194, i64 2, 1
  store %"any[]" %"$$temp229", ptr %indirectarg230, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.215, i64 20, ptr @.func.256, i64 11, i32 609, ptr byval(%"any[]") align 8 %indirectarg230) #5, !dbg !4530
  unreachable, !dbg !4530

panic237:                                         ; preds = %if.then236
  store i64 %138, ptr %taddr238, align 8
  %195 = insertvalue %any undef, ptr %taddr238, 0
  %196 = insertvalue %any %195, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr239, align 8
  %197 = insertvalue %any undef, ptr %taddr239, 0
  %198 = insertvalue %any %197, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %196, ptr %varargslots240, align 16
  %ptradd241 = getelementptr inbounds i8, ptr %varargslots240, i64 16
  store %any %198, ptr %ptradd241, align 16
  %199 = insertvalue %"any[]" undef, ptr %varargslots240, 0
  %"$$temp242" = insertvalue %"any[]" %199, i64 2, 1
  store %"any[]" %"$$temp242", ptr %indirectarg243, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 61, ptr @.file.215, i64 20, ptr @.func.256, i64 11, i32 611, ptr byval(%"any[]") align 8 %indirectarg243) #5, !dbg !4533
  unreachable, !dbg !4533

panic248:                                         ; preds = %checkok244
  store i64 %sub247, ptr %taddr249, align 8
  %200 = insertvalue %any undef, ptr %taddr249, 0
  %201 = insertvalue %any %200, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %138, ptr %taddr250, align 8
  %202 = insertvalue %any undef, ptr %taddr250, 0
  %203 = insertvalue %any %202, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %201, ptr %varargslots251, align 16
  %ptradd252 = getelementptr inbounds i8, ptr %varargslots251, i64 16
  store %any %203, ptr %ptradd252, align 16
  %204 = insertvalue %"any[]" undef, ptr %varargslots251, 0
  %"$$temp253" = insertvalue %"any[]" %204, i64 2, 1
  store %"any[]" %"$$temp253", ptr %indirectarg254, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 60, ptr @.file.215, i64 20, ptr @.func.256, i64 11, i32 611, ptr byval(%"any[]") align 8 %indirectarg254) #5, !dbg !4533
  unreachable, !dbg !4533
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.ntoa_any(ptr %0, ptr %1, i64 %2, ptr %3, i32 %4) #0 !dbg !4538 {
entry:
  %self = alloca ptr, align 8
  %arg = alloca %any, align 8
  %base = alloca i32, align 4
  %is_neg = alloca i8, align 1
  %reterr = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i128, align 16
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %retparam2 = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !4541
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !4541
  br i1 %6, label %panic, label %checkok, !dbg !4541

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !4542, !DIExpression(), !4543)
  store i64 %2, ptr %arg, align 8
  %ptradd = getelementptr inbounds i8, ptr %arg, i64 8
  store ptr %3, ptr %ptradd, align 8
    #dbg_declare(ptr %arg, !4544, !DIExpression(), !4545)
  store i32 %4, ptr %base, align 4
    #dbg_declare(ptr %base, !4546, !DIExpression(), !4547)
    #dbg_declare(ptr %is_neg, !4548, !DIExpression(), !4549)
  store i8 0, ptr %is_neg, align 1, !dbg !4549
  %lo = load i64, ptr %arg, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %arg, i64 8
  %hi = load ptr, ptr %ptradd1, align 8
  %7 = call i64 @std.io.int_from_any(ptr %retparam, i64 %lo, ptr %hi, ptr %is_neg), !dbg !4550
  %not_err = icmp eq i64 %7, 0, !dbg !4550
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4550
  br i1 %8, label %after_check, label %assign_optional, !dbg !4550

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %error_var, align 8, !dbg !4550
  br label %panic_block, !dbg !4550

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !4550

panic_block:                                      ; preds = %assign_optional
  %9 = insertvalue %any undef, ptr %error_var, 0, !dbg !4550
  %10 = insertvalue %any %9, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !4550
  store %any %10, ptr %varargslots, align 16
  %11 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %11, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.103, i64 36, ptr @.file.215, i64 20, ptr @.func.260, i64 8, i32 619, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !4550
  unreachable, !dbg !4550

noerr_block:                                      ; preds = %after_check
  %12 = load ptr, ptr %self, align 8
  %lo3 = load i64, ptr %retparam, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %retparam, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  %13 = load i8, ptr %is_neg, align 1
  %14 = load i32, ptr %base, align 4
  %15 = call i64 @std.io.Formatter.ntoa(ptr %retparam2, ptr %12, i64 %lo3, i64 %hi5, i8 zeroext %13, i32 %14) #6, !dbg !4551
  %not_err6 = icmp eq i64 %15, 0, !dbg !4551
  %16 = call i1 @llvm.expect.i1(i1 %not_err6, i1 true), !dbg !4551
  br i1 %16, label %after_check8, label %assign_optional7, !dbg !4551

assign_optional7:                                 ; preds = %noerr_block
  store i64 %15, ptr %reterr, align 8, !dbg !4551
  br label %err_retblock, !dbg !4551

after_check8:                                     ; preds = %noerr_block
  %17 = load i64, ptr %retparam2, align 8, !dbg !4551
  store i64 %17, ptr %0, align 8, !dbg !4551
  ret i64 0, !dbg !4551

err_retblock:                                     ; preds = %assign_optional7
  %18 = load i64, ptr %reterr, align 8, !dbg !4551
  ret i64 %18, !dbg !4551

panic:                                            ; preds = %entry
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4543
  call void %19(ptr @.panic_msg, i64 62, ptr @.file.215, i64 20, ptr @.func.260, i64 8, i32 616) #5, !dbg !4543
  unreachable, !dbg !4543
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.out_char(ptr %0, ptr %1, i64 %2, ptr %3) #0 !dbg !4552 {
entry:
  %self = alloca ptr, align 8
  %arg = alloca %any, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %len = alloca i64, align 8
  %l = alloca i32, align 4
  %error_var = alloca i64, align 8
  %retparam2 = alloca i64, align 8
  %c = alloca i32, align 4
  %v = alloca %any, align 8
  %blockret = alloca i32, align 4
  %any_type = alloca i64, align 8
  %kind = alloca i8, align 1
  %is_mixed_signed = alloca i8, align 1
  %max = alloca i32, align 4
  %min = alloca i32, align 4
  %switch = alloca i64, align 8
  %c17 = alloca i8, align 1
  %s = alloca i16, align 2
  %taddr = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %i = alloca i32, align 4
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %varargslots66 = alloca [2 x %any], align 16
  %indirectarg69 = alloca %"any[]", align 8
  %l96 = alloca i64, align 8
  %taddr101 = alloca i64, align 8
  %taddr102 = alloca i64, align 8
  %varargslots103 = alloca [2 x %any], align 16
  %indirectarg106 = alloca %"any[]", align 8
  %i135 = alloca i128, align 16
  %taddr140 = alloca i64, align 8
  %taddr141 = alloca i64, align 8
  %varargslots142 = alloca [2 x %any], align 16
  %indirectarg145 = alloca %"any[]", align 8
  %c175 = alloca i8, align 1
  %s192 = alloca i16, align 2
  %taddr197 = alloca i64, align 8
  %taddr198 = alloca i64, align 8
  %varargslots199 = alloca [2 x %any], align 16
  %indirectarg202 = alloca %"any[]", align 8
  %i222 = alloca i32, align 4
  %taddr227 = alloca i64, align 8
  %taddr228 = alloca i64, align 8
  %varargslots229 = alloca [2 x %any], align 16
  %indirectarg232 = alloca %"any[]", align 8
  %l249 = alloca i64, align 8
  %taddr254 = alloca i64, align 8
  %taddr255 = alloca i64, align 8
  %varargslots256 = alloca [2 x %any], align 16
  %indirectarg259 = alloca %"any[]", align 8
  %i279 = alloca i128, align 16
  %taddr284 = alloca i64, align 8
  %taddr285 = alloca i64, align 8
  %varargslots286 = alloca [2 x %any], align 16
  %indirectarg289 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg303 = alloca %"any[]", align 8
  %switch305 = alloca i8, align 1
  %error_var310 = alloca i64, align 8
  %retparam312 = alloca i64, align 8
  %error_var322 = alloca i64, align 8
  %retparam324 = alloca i64, align 8
  %error_var330 = alloca i64, align 8
  %retparam333 = alloca i64, align 8
  %error_var343 = alloca i64, align 8
  %retparam347 = alloca i64, align 8
  %error_var353 = alloca i64, align 8
  %retparam358 = alloca i64, align 8
  %error_var364 = alloca i64, align 8
  %retparam368 = alloca i64, align 8
  %error_var376 = alloca i64, align 8
  %retparam380 = alloca i64, align 8
  %error_var386 = alloca i64, align 8
  %retparam391 = alloca i64, align 8
  %error_var397 = alloca i64, align 8
  %retparam402 = alloca i64, align 8
  %error_var408 = alloca i64, align 8
  %retparam412 = alloca i64, align 8
  %error_var418 = alloca i64, align 8
  %retparam420 = alloca i64, align 8
  %reterr427 = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !4553
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !4553
  br i1 %5, label %panic, label %checkok, !dbg !4553

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !4554, !DIExpression(), !4555)
  store i64 %2, ptr %arg, align 8
  %ptradd = getelementptr inbounds i8, ptr %arg, i64 8
  store ptr %3, ptr %ptradd, align 8
    #dbg_declare(ptr %arg, !4556, !DIExpression(), !4557)
  %ptradd1 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4558
  %6 = load i64, ptr %ptradd1, align 8, !dbg !4558
  %"introspect*" = inttoptr i64 %6 to ptr, !dbg !4558
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !4558
  %7 = call i8 @std.core.types.TypeKind.is_int(i8 zeroext %typeid.kind) #6, !dbg !4558
  %8 = trunc i8 %7 to i1, !dbg !4558
  %not = xor i1 %8, true, !dbg !4558
  br i1 %not, label %if.then, label %if.exit, !dbg !4558

if.then:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8
  %10 = call i64 @std.io.Formatter.out_substr(ptr %retparam, ptr %9, ptr @.str.262, i64 10), !dbg !4559
  %not_err = icmp eq i64 %10, 0, !dbg !4559
  %11 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4559
  br i1 %11, label %after_check, label %assign_optional, !dbg !4559

assign_optional:                                  ; preds = %if.then
  store i64 %10, ptr %reterr, align 8, !dbg !4559
  br label %err_retblock, !dbg !4559

after_check:                                      ; preds = %if.then
  %12 = load i64, ptr %retparam, align 8, !dbg !4559
  store i64 %12, ptr %0, align 8, !dbg !4559
  ret i64 0, !dbg !4559

err_retblock:                                     ; preds = %assign_optional
  %13 = load i64, ptr %reterr, align 8, !dbg !4559
  ret i64 %13, !dbg !4559

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %len, !4561, !DIExpression(), !4562)
  store i64 1, ptr %len, align 8, !dbg !4563
    #dbg_declare(ptr %l, !4564, !DIExpression(), !4565)
  store i32 1, ptr %l, align 4, !dbg !4566
  %14 = load i64, ptr %len, align 8, !dbg !4567
  %15 = load i32, ptr %l, align 4, !dbg !4568
  %zext = zext i32 %15 to i64, !dbg !4568
  %16 = load ptr, ptr %self, align 8
  %17 = call i64 @std.io.Formatter.adjust(ptr %retparam2, ptr %16, i64 %zext), !dbg !4569
  %not_err3 = icmp eq i64 %17, 0, !dbg !4569
  %18 = call i1 @llvm.expect.i1(i1 %not_err3, i1 true), !dbg !4569
  br i1 %18, label %after_check5, label %assign_optional4, !dbg !4569

assign_optional4:                                 ; preds = %if.exit
  store i64 %17, ptr %error_var, align 8, !dbg !4569
  br label %guard_block, !dbg !4569

after_check5:                                     ; preds = %if.exit
  br label %noerr_block, !dbg !4569

guard_block:                                      ; preds = %assign_optional4
  %19 = load i64, ptr %error_var, align 8, !dbg !4569
  ret i64 %19, !dbg !4569

noerr_block:                                      ; preds = %after_check5
  %20 = load i64, ptr %retparam2, align 8, !dbg !4569
  %add = add i64 %14, %20, !dbg !4567
  store i64 %add, ptr %len, align 8, !dbg !4567
    #dbg_declare(ptr %c, !4570, !DIExpression(), !4572)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %v, ptr align 8 %arg, i32 16, i1 false)
  %21 = call i8 @std.core.types.TypeKind.is_int(i8 zeroext 3) #6, !dbg !4573
  %22 = trunc i8 %21 to i1, !dbg !4573
  br i1 %22, label %assert_ok, label %assert_fail, !dbg !4573

assert_fail:                                      ; preds = %noerr_block
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4573
  call void %23(ptr @.panic_msg.141, i64 69, ptr @.file.142, i64 8, ptr @.func.261, i64 8, i32 22) #5, !dbg !4573
  unreachable, !dbg !4573

assert_ok:                                        ; preds = %noerr_block
  %ptradd6 = getelementptr inbounds i8, ptr %v, i64 8, !dbg !4577
  %24 = load i64, ptr %ptradd6, align 8, !dbg !4577
  %"introspect*7" = inttoptr i64 %24 to ptr, !dbg !4577
  %typeid.kind8 = load i8, ptr %"introspect*7", align 8, !dbg !4577
  %25 = call i8 @std.core.types.TypeKind.is_int(i8 zeroext %typeid.kind8) #6, !dbg !4577
  %26 = trunc i8 %25 to i1, !dbg !4577
  br i1 %26, label %assert_ok10, label %assert_fail9, !dbg !4577

assert_fail9:                                     ; preds = %assert_ok
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4577
  call void %27(ptr @.panic_msg.145, i64 71, ptr @.file.142, i64 8, ptr @.func.261, i64 8, i32 23) #5, !dbg !4577
  unreachable, !dbg !4577

assert_ok10:                                      ; preds = %assert_ok
    #dbg_declare(ptr %any_type, !4578, !DIExpression(), !4579)
  %ptradd11 = getelementptr inbounds i8, ptr %v, i64 8, !dbg !4580
  %28 = load i64, ptr %ptradd11, align 8, !dbg !4580
  store i64 %28, ptr %any_type, align 8, !dbg !4580
    #dbg_declare(ptr %kind, !4581, !DIExpression(), !4582)
  %29 = load i64, ptr %any_type, align 8, !dbg !4583
  %"introspect*12" = inttoptr i64 %29 to ptr, !dbg !4583
  %typeid.kind13 = load i8, ptr %"introspect*12", align 8, !dbg !4583
  store i8 %typeid.kind13, ptr %kind, align 1, !dbg !4583
    #dbg_declare(ptr %is_mixed_signed, !4584, !DIExpression(), !4585)
  %30 = load i64, ptr %any_type, align 8, !dbg !4586
  %"introspect*14" = inttoptr i64 %30 to ptr, !dbg !4586
  %typeid.kind15 = load i8, ptr %"introspect*14", align 8, !dbg !4586
  %neq = icmp ne i8 3, %typeid.kind15, !dbg !4587
  %31 = zext i1 %neq to i8, !dbg !4587
  store i8 %31, ptr %is_mixed_signed, align 1, !dbg !4587
    #dbg_declare(ptr %max, !4588, !DIExpression(), !4589)
  store i32 -1, ptr %max, align 4, !dbg !4590
    #dbg_declare(ptr %min, !4591, !DIExpression(), !4592)
  store i32 0, ptr %min, align 4, !dbg !4593
  %32 = load i64, ptr %any_type, align 8
  store i64 %32, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %assert_ok10
  %33 = load i64, ptr %switch, align 8
  br label %check_subtype, !dbg !4594

check_subtype:                                    ; preds = %parent_type_block, %switch.entry
  %34 = phi i64 [ %33, %switch.entry ], [ %typeid.parent, %parent_type_block ], !dbg !4594
  %eq = icmp eq i64 ptrtoint (ptr @"$ct.ichar" to i64), %34, !dbg !4594
  br i1 %eq, label %result_block, label %parent_type_block, !dbg !4594

parent_type_block:                                ; preds = %check_subtype
  %35 = inttoptr i64 %34 to ptr, !dbg !4594
  %ptradd16 = getelementptr inbounds i8, ptr %35, i64 8, !dbg !4594
  %typeid.parent = load i64, ptr %ptradd16, align 8, !dbg !4594
  %36 = icmp eq i64 %typeid.parent, 0, !dbg !4594
  br i1 %36, label %result_block, label %check_subtype, !dbg !4594

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %37 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !4594
  br i1 %37, label %switch.case, label %next_if, !dbg !4594

switch.case:                                      ; preds = %result_block
    #dbg_declare(ptr %c17, !4596, !DIExpression(), !4598)
  %38 = load ptr, ptr %v, align 8, !dbg !4599
  %checknull = icmp eq ptr %38, null, !dbg !4599
  %39 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !4599
  br i1 %39, label %panic18, label %checkok19, !dbg !4599

checkok19:                                        ; preds = %switch.case
  %40 = load i8, ptr %38, align 1, !dbg !4600
  store i8 %40, ptr %c17, align 1, !dbg !4600
  %41 = load i8, ptr %is_mixed_signed, align 1, !dbg !4601
  %42 = trunc i8 %41 to i1, !dbg !4601
  br i1 %42, label %and.rhs, label %and.phi, !dbg !4601

and.rhs:                                          ; preds = %checkok19
  %43 = load i8, ptr %c17, align 1, !dbg !4602
  %sext = sext i8 %43 to i32, !dbg !4602
  %lt = icmp slt i32 %sext, 0, !dbg !4602
  br label %and.phi, !dbg !4602

and.phi:                                          ; preds = %and.rhs, %checkok19
  %val = phi i1 [ false, %checkok19 ], [ %lt, %and.rhs ], !dbg !4602
  br i1 %val, label %if.then20, label %if.exit21, !dbg !4602

if.then20:                                        ; preds = %and.phi
  br label %else_block, !dbg !4603

if.exit21:                                        ; preds = %and.phi
  %44 = load i8, ptr %c17, align 1, !dbg !4604
  %sext22 = sext i8 %44 to i32, !dbg !4604
  store i32 %sext22, ptr %blockret, align 4, !dbg !4604
  br label %expr_block.exit, !dbg !4604

next_if:                                          ; preds = %result_block
  br label %check_subtype23, !dbg !4605

check_subtype23:                                  ; preds = %parent_type_block25, %next_if
  %45 = phi i64 [ %33, %next_if ], [ %typeid.parent27, %parent_type_block25 ], !dbg !4605
  %eq24 = icmp eq i64 ptrtoint (ptr @"$ct.short" to i64), %45, !dbg !4605
  br i1 %eq24, label %result_block28, label %parent_type_block25, !dbg !4605

parent_type_block25:                              ; preds = %check_subtype23
  %46 = inttoptr i64 %45 to ptr, !dbg !4605
  %ptradd26 = getelementptr inbounds i8, ptr %46, i64 8, !dbg !4605
  %typeid.parent27 = load i64, ptr %ptradd26, align 8, !dbg !4605
  %47 = icmp eq i64 %typeid.parent27, 0, !dbg !4605
  br i1 %47, label %result_block28, label %check_subtype23, !dbg !4605

result_block28:                                   ; preds = %parent_type_block25, %check_subtype23
  %48 = phi i1 [ false, %parent_type_block25 ], [ true, %check_subtype23 ], !dbg !4605
  br i1 %48, label %switch.case29, label %next_if52, !dbg !4605

switch.case29:                                    ; preds = %result_block28
    #dbg_declare(ptr %s, !4606, !DIExpression(), !4608)
  %49 = load ptr, ptr %v, align 8, !dbg !4609
  %checknull30 = icmp eq ptr %49, null, !dbg !4609
  %50 = call i1 @llvm.expect.i1(i1 %checknull30, i1 false), !dbg !4609
  br i1 %50, label %panic31, label %checkok32, !dbg !4609

checkok32:                                        ; preds = %switch.case29
  %51 = ptrtoint ptr %49 to i64, !dbg !4610
  %52 = urem i64 %51, 2, !dbg !4610
  %53 = icmp ne i64 %52, 0, !dbg !4610
  %54 = call i1 @llvm.expect.i1(i1 %53, i1 false), !dbg !4610
  br i1 %54, label %panic33, label %checkok36, !dbg !4610

checkok36:                                        ; preds = %checkok32
  %55 = load i16, ptr %49, align 2, !dbg !4610
  store i16 %55, ptr %s, align 2, !dbg !4610
  %56 = load i8, ptr %is_mixed_signed, align 1, !dbg !4611
  %57 = trunc i8 %56 to i1, !dbg !4611
  br i1 %57, label %and.rhs37, label %and.phi40, !dbg !4611

and.rhs37:                                        ; preds = %checkok36
  %58 = load i16, ptr %s, align 2, !dbg !4612
  %sext38 = sext i16 %58 to i32, !dbg !4612
  %lt39 = icmp slt i32 %sext38, 0, !dbg !4612
  br label %and.phi40, !dbg !4612

and.phi40:                                        ; preds = %and.rhs37, %checkok36
  %val41 = phi i1 [ false, %checkok36 ], [ %lt39, %and.rhs37 ], !dbg !4612
  br i1 %val41, label %if.then42, label %if.exit43, !dbg !4612

if.then42:                                        ; preds = %and.phi40
  br label %else_block, !dbg !4613

if.exit43:                                        ; preds = %and.phi40
  %59 = load i16, ptr %s, align 2, !dbg !4614
  %sext44 = sext i16 %59 to i32, !dbg !4614
  %60 = load i32, ptr %max, align 4, !dbg !4615
  %gt = icmp sgt i32 %sext44, %60, !dbg !4614
  %check = icmp sge i32 %60, 0, !dbg !4614
  %siui-gt = and i1 %check, %gt, !dbg !4614
  br i1 %siui-gt, label %or.phi, label %or.rhs, !dbg !4614

or.rhs:                                           ; preds = %if.exit43
  %61 = load i16, ptr %s, align 2, !dbg !4616
  %sext45 = sext i16 %61 to i32, !dbg !4616
  %62 = load i32, ptr %min, align 4, !dbg !4617
  %lt46 = icmp slt i32 %sext45, %62, !dbg !4616
  %check47 = icmp slt i32 %62, 0, !dbg !4616
  %siui-lt = or i1 %check47, %lt46, !dbg !4616
  br label %or.phi, !dbg !4616

or.phi:                                           ; preds = %or.rhs, %if.exit43
  %val48 = phi i1 [ true, %if.exit43 ], [ %siui-lt, %or.rhs ], !dbg !4616
  br i1 %val48, label %if.then49, label %if.exit50, !dbg !4616

if.then49:                                        ; preds = %or.phi
  br label %else_block, !dbg !4618

if.exit50:                                        ; preds = %or.phi
  %63 = load i16, ptr %s, align 2, !dbg !4619
  %sext51 = sext i16 %63 to i32, !dbg !4619
  store i32 %sext51, ptr %blockret, align 4, !dbg !4619
  br label %expr_block.exit, !dbg !4619

next_if52:                                        ; preds = %result_block28
  br label %check_subtype53, !dbg !4620

check_subtype53:                                  ; preds = %parent_type_block55, %next_if52
  %64 = phi i64 [ %33, %next_if52 ], [ %typeid.parent57, %parent_type_block55 ], !dbg !4620
  %eq54 = icmp eq i64 ptrtoint (ptr @"$ct.int" to i64), %64, !dbg !4620
  br i1 %eq54, label %result_block58, label %parent_type_block55, !dbg !4620

parent_type_block55:                              ; preds = %check_subtype53
  %65 = inttoptr i64 %64 to ptr, !dbg !4620
  %ptradd56 = getelementptr inbounds i8, ptr %65, i64 8, !dbg !4620
  %typeid.parent57 = load i64, ptr %ptradd56, align 8, !dbg !4620
  %66 = icmp eq i64 %typeid.parent57, 0, !dbg !4620
  br i1 %66, label %result_block58, label %check_subtype53, !dbg !4620

result_block58:                                   ; preds = %parent_type_block55, %check_subtype53
  %67 = phi i1 [ false, %parent_type_block55 ], [ true, %check_subtype53 ], !dbg !4620
  br i1 %67, label %switch.case59, label %next_if88, !dbg !4620

switch.case59:                                    ; preds = %result_block58
    #dbg_declare(ptr %i, !4621, !DIExpression(), !4623)
  %68 = load ptr, ptr %v, align 8, !dbg !4624
  %checknull60 = icmp eq ptr %68, null, !dbg !4624
  %69 = call i1 @llvm.expect.i1(i1 %checknull60, i1 false), !dbg !4624
  br i1 %69, label %panic61, label %checkok62, !dbg !4624

checkok62:                                        ; preds = %switch.case59
  %70 = ptrtoint ptr %68 to i64, !dbg !4625
  %71 = urem i64 %70, 4, !dbg !4625
  %72 = icmp ne i64 %71, 0, !dbg !4625
  %73 = call i1 @llvm.expect.i1(i1 %72, i1 false), !dbg !4625
  br i1 %73, label %panic63, label %checkok70, !dbg !4625

checkok70:                                        ; preds = %checkok62
  %74 = load i32, ptr %68, align 4, !dbg !4625
  store i32 %74, ptr %i, align 4, !dbg !4625
  %75 = load i8, ptr %is_mixed_signed, align 1, !dbg !4626
  %76 = trunc i8 %75 to i1, !dbg !4626
  br i1 %76, label %and.rhs71, label %and.phi73, !dbg !4626

and.rhs71:                                        ; preds = %checkok70
  %77 = load i32, ptr %i, align 4, !dbg !4627
  %lt72 = icmp slt i32 %77, 0, !dbg !4627
  br label %and.phi73, !dbg !4627

and.phi73:                                        ; preds = %and.rhs71, %checkok70
  %val74 = phi i1 [ false, %checkok70 ], [ %lt72, %and.rhs71 ], !dbg !4627
  br i1 %val74, label %if.then75, label %if.exit76, !dbg !4627

if.then75:                                        ; preds = %and.phi73
  br label %else_block, !dbg !4628

if.exit76:                                        ; preds = %and.phi73
  %78 = load i32, ptr %i, align 4, !dbg !4629
  %79 = load i32, ptr %max, align 4, !dbg !4630
  %gt77 = icmp sgt i32 %78, %79, !dbg !4629
  %check78 = icmp sge i32 %79, 0, !dbg !4629
  %siui-gt79 = and i1 %check78, %gt77, !dbg !4629
  br i1 %siui-gt79, label %or.phi84, label %or.rhs80, !dbg !4629

or.rhs80:                                         ; preds = %if.exit76
  %80 = load i32, ptr %i, align 4, !dbg !4631
  %81 = load i32, ptr %min, align 4, !dbg !4632
  %lt81 = icmp slt i32 %80, %81, !dbg !4631
  %check82 = icmp slt i32 %81, 0, !dbg !4631
  %siui-lt83 = or i1 %check82, %lt81, !dbg !4631
  br label %or.phi84, !dbg !4631

or.phi84:                                         ; preds = %or.rhs80, %if.exit76
  %val85 = phi i1 [ true, %if.exit76 ], [ %siui-lt83, %or.rhs80 ], !dbg !4631
  br i1 %val85, label %if.then86, label %if.exit87, !dbg !4631

if.then86:                                        ; preds = %or.phi84
  br label %else_block, !dbg !4633

if.exit87:                                        ; preds = %or.phi84
  %82 = load i32, ptr %i, align 4, !dbg !4634
  store i32 %82, ptr %blockret, align 4, !dbg !4634
  br label %expr_block.exit, !dbg !4634

next_if88:                                        ; preds = %result_block58
  br label %check_subtype89, !dbg !4635

check_subtype89:                                  ; preds = %parent_type_block91, %next_if88
  %83 = phi i64 [ %33, %next_if88 ], [ %typeid.parent93, %parent_type_block91 ], !dbg !4635
  %eq90 = icmp eq i64 ptrtoint (ptr @"$ct.long" to i64), %83, !dbg !4635
  br i1 %eq90, label %result_block94, label %parent_type_block91, !dbg !4635

parent_type_block91:                              ; preds = %check_subtype89
  %84 = inttoptr i64 %83 to ptr, !dbg !4635
  %ptradd92 = getelementptr inbounds i8, ptr %84, i64 8, !dbg !4635
  %typeid.parent93 = load i64, ptr %ptradd92, align 8, !dbg !4635
  %85 = icmp eq i64 %typeid.parent93, 0, !dbg !4635
  br i1 %85, label %result_block94, label %check_subtype89, !dbg !4635

result_block94:                                   ; preds = %parent_type_block91, %check_subtype89
  %86 = phi i1 [ false, %parent_type_block91 ], [ true, %check_subtype89 ], !dbg !4635
  br i1 %86, label %switch.case95, label %next_if127, !dbg !4635

switch.case95:                                    ; preds = %result_block94
    #dbg_declare(ptr %l96, !4636, !DIExpression(), !4638)
  %87 = load ptr, ptr %v, align 8, !dbg !4639
  %checknull97 = icmp eq ptr %87, null, !dbg !4639
  %88 = call i1 @llvm.expect.i1(i1 %checknull97, i1 false), !dbg !4639
  br i1 %88, label %panic98, label %checkok99, !dbg !4639

checkok99:                                        ; preds = %switch.case95
  %89 = ptrtoint ptr %87 to i64, !dbg !4640
  %90 = urem i64 %89, 8, !dbg !4640
  %91 = icmp ne i64 %90, 0, !dbg !4640
  %92 = call i1 @llvm.expect.i1(i1 %91, i1 false), !dbg !4640
  br i1 %92, label %panic100, label %checkok107, !dbg !4640

checkok107:                                       ; preds = %checkok99
  %93 = load i64, ptr %87, align 8, !dbg !4640
  store i64 %93, ptr %l96, align 8, !dbg !4640
  %94 = load i8, ptr %is_mixed_signed, align 1, !dbg !4641
  %95 = trunc i8 %94 to i1, !dbg !4641
  br i1 %95, label %and.rhs108, label %and.phi110, !dbg !4641

and.rhs108:                                       ; preds = %checkok107
  %96 = load i64, ptr %l96, align 8, !dbg !4642
  %lt109 = icmp slt i64 %96, 0, !dbg !4642
  br label %and.phi110, !dbg !4642

and.phi110:                                       ; preds = %and.rhs108, %checkok107
  %val111 = phi i1 [ false, %checkok107 ], [ %lt109, %and.rhs108 ], !dbg !4642
  br i1 %val111, label %if.then112, label %if.exit113, !dbg !4642

if.then112:                                       ; preds = %and.phi110
  br label %else_block, !dbg !4643

if.exit113:                                       ; preds = %and.phi110
  %97 = load i64, ptr %l96, align 8, !dbg !4644
  %98 = load i32, ptr %max, align 4, !dbg !4645
  %zext114 = zext i32 %98 to i64, !dbg !4645
  %gt115 = icmp sgt i64 %97, %zext114, !dbg !4644
  %check116 = icmp sge i64 %zext114, 0, !dbg !4644
  %siui-gt117 = and i1 %check116, %gt115, !dbg !4644
  br i1 %siui-gt117, label %or.phi123, label %or.rhs118, !dbg !4644

or.rhs118:                                        ; preds = %if.exit113
  %99 = load i64, ptr %l96, align 8, !dbg !4646
  %100 = load i32, ptr %min, align 4, !dbg !4647
  %zext119 = zext i32 %100 to i64, !dbg !4647
  %lt120 = icmp slt i64 %99, %zext119, !dbg !4646
  %check121 = icmp slt i64 %zext119, 0, !dbg !4646
  %siui-lt122 = or i1 %check121, %lt120, !dbg !4646
  br label %or.phi123, !dbg !4646

or.phi123:                                        ; preds = %or.rhs118, %if.exit113
  %val124 = phi i1 [ true, %if.exit113 ], [ %siui-lt122, %or.rhs118 ], !dbg !4646
  br i1 %val124, label %if.then125, label %if.exit126, !dbg !4646

if.then125:                                       ; preds = %or.phi123
  br label %else_block, !dbg !4648

if.exit126:                                       ; preds = %or.phi123
  %101 = load i64, ptr %l96, align 8, !dbg !4649
  %trunc = trunc i64 %101 to i32, !dbg !4649
  store i32 %trunc, ptr %blockret, align 4, !dbg !4649
  br label %expr_block.exit, !dbg !4649

next_if127:                                       ; preds = %result_block94
  br label %check_subtype128, !dbg !4650

check_subtype128:                                 ; preds = %parent_type_block130, %next_if127
  %102 = phi i64 [ %33, %next_if127 ], [ %typeid.parent132, %parent_type_block130 ], !dbg !4650
  %eq129 = icmp eq i64 ptrtoint (ptr @"$ct.int128" to i64), %102, !dbg !4650
  br i1 %eq129, label %result_block133, label %parent_type_block130, !dbg !4650

parent_type_block130:                             ; preds = %check_subtype128
  %103 = inttoptr i64 %102 to ptr, !dbg !4650
  %ptradd131 = getelementptr inbounds i8, ptr %103, i64 8, !dbg !4650
  %typeid.parent132 = load i64, ptr %ptradd131, align 8, !dbg !4650
  %104 = icmp eq i64 %typeid.parent132, 0, !dbg !4650
  br i1 %104, label %result_block133, label %check_subtype128, !dbg !4650

result_block133:                                  ; preds = %parent_type_block130, %check_subtype128
  %105 = phi i1 [ false, %parent_type_block130 ], [ true, %check_subtype128 ], !dbg !4650
  br i1 %105, label %switch.case134, label %next_if167, !dbg !4650

switch.case134:                                   ; preds = %result_block133
    #dbg_declare(ptr %i135, !4651, !DIExpression(), !4653)
  %106 = load ptr, ptr %v, align 8, !dbg !4654
  %checknull136 = icmp eq ptr %106, null, !dbg !4654
  %107 = call i1 @llvm.expect.i1(i1 %checknull136, i1 false), !dbg !4654
  br i1 %107, label %panic137, label %checkok138, !dbg !4654

checkok138:                                       ; preds = %switch.case134
  %108 = ptrtoint ptr %106 to i64, !dbg !4655
  %109 = urem i64 %108, 16, !dbg !4655
  %110 = icmp ne i64 %109, 0, !dbg !4655
  %111 = call i1 @llvm.expect.i1(i1 %110, i1 false), !dbg !4655
  br i1 %111, label %panic139, label %checkok146, !dbg !4655

checkok146:                                       ; preds = %checkok138
  %112 = load i128, ptr %106, align 16, !dbg !4655
  store i128 %112, ptr %i135, align 16, !dbg !4655
  %113 = load i8, ptr %is_mixed_signed, align 1, !dbg !4656
  %114 = trunc i8 %113 to i1, !dbg !4656
  br i1 %114, label %and.rhs147, label %and.phi149, !dbg !4656

and.rhs147:                                       ; preds = %checkok146
  %115 = load i128, ptr %i135, align 16, !dbg !4657
  %lt148 = icmp slt i128 %115, 0, !dbg !4657
  br label %and.phi149, !dbg !4657

and.phi149:                                       ; preds = %and.rhs147, %checkok146
  %val150 = phi i1 [ false, %checkok146 ], [ %lt148, %and.rhs147 ], !dbg !4657
  br i1 %val150, label %if.then151, label %if.exit152, !dbg !4657

if.then151:                                       ; preds = %and.phi149
  br label %else_block, !dbg !4658

if.exit152:                                       ; preds = %and.phi149
  %116 = load i128, ptr %i135, align 16, !dbg !4659
  %117 = load i32, ptr %max, align 4, !dbg !4660
  %zext153 = zext i32 %117 to i128, !dbg !4660
  %gt154 = icmp sgt i128 %116, %zext153, !dbg !4659
  %check155 = icmp sge i128 %zext153, 0, !dbg !4659
  %siui-gt156 = and i1 %check155, %gt154, !dbg !4659
  br i1 %siui-gt156, label %or.phi162, label %or.rhs157, !dbg !4659

or.rhs157:                                        ; preds = %if.exit152
  %118 = load i128, ptr %i135, align 16, !dbg !4661
  %119 = load i32, ptr %min, align 4, !dbg !4662
  %zext158 = zext i32 %119 to i128, !dbg !4662
  %lt159 = icmp slt i128 %118, %zext158, !dbg !4661
  %check160 = icmp slt i128 %zext158, 0, !dbg !4661
  %siui-lt161 = or i1 %check160, %lt159, !dbg !4661
  br label %or.phi162, !dbg !4661

or.phi162:                                        ; preds = %or.rhs157, %if.exit152
  %val163 = phi i1 [ true, %if.exit152 ], [ %siui-lt161, %or.rhs157 ], !dbg !4661
  br i1 %val163, label %if.then164, label %if.exit165, !dbg !4661

if.then164:                                       ; preds = %or.phi162
  br label %else_block, !dbg !4663

if.exit165:                                       ; preds = %or.phi162
  %120 = load i128, ptr %i135, align 16, !dbg !4664
  %trunc166 = trunc i128 %120 to i32, !dbg !4664
  store i32 %trunc166, ptr %blockret, align 4, !dbg !4664
  br label %expr_block.exit, !dbg !4664

next_if167:                                       ; preds = %result_block133
  br label %check_subtype168, !dbg !4665

check_subtype168:                                 ; preds = %parent_type_block170, %next_if167
  %121 = phi i64 [ %33, %next_if167 ], [ %typeid.parent172, %parent_type_block170 ], !dbg !4665
  %eq169 = icmp eq i64 ptrtoint (ptr @"$ct.char" to i64), %121, !dbg !4665
  br i1 %eq169, label %result_block173, label %parent_type_block170, !dbg !4665

parent_type_block170:                             ; preds = %check_subtype168
  %122 = inttoptr i64 %121 to ptr, !dbg !4665
  %ptradd171 = getelementptr inbounds i8, ptr %122, i64 8, !dbg !4665
  %typeid.parent172 = load i64, ptr %ptradd171, align 8, !dbg !4665
  %123 = icmp eq i64 %typeid.parent172, 0, !dbg !4665
  br i1 %123, label %result_block173, label %check_subtype168, !dbg !4665

result_block173:                                  ; preds = %parent_type_block170, %check_subtype168
  %124 = phi i1 [ false, %parent_type_block170 ], [ true, %check_subtype168 ], !dbg !4665
  br i1 %124, label %switch.case174, label %next_if184, !dbg !4665

switch.case174:                                   ; preds = %result_block173
    #dbg_declare(ptr %c175, !4666, !DIExpression(), !4668)
  %125 = load ptr, ptr %v, align 8, !dbg !4669
  %checknull176 = icmp eq ptr %125, null, !dbg !4669
  %126 = call i1 @llvm.expect.i1(i1 %checknull176, i1 false), !dbg !4669
  br i1 %126, label %panic177, label %checkok178, !dbg !4669

checkok178:                                       ; preds = %switch.case174
  %127 = load i8, ptr %125, align 1, !dbg !4670
  store i8 %127, ptr %c175, align 1, !dbg !4670
  %128 = load i8, ptr %c175, align 1, !dbg !4671
  %zext179 = zext i8 %128 to i32, !dbg !4671
  %129 = load i32, ptr %max, align 4, !dbg !4672
  %gt180 = icmp ugt i32 %zext179, %129, !dbg !4671
  br i1 %gt180, label %if.then181, label %if.exit182, !dbg !4671

if.then181:                                       ; preds = %checkok178
  br label %else_block, !dbg !4673

if.exit182:                                       ; preds = %checkok178
  %130 = load i8, ptr %c175, align 1, !dbg !4674
  %zext183 = zext i8 %130 to i32, !dbg !4674
  store i32 %zext183, ptr %blockret, align 4, !dbg !4674
  br label %expr_block.exit, !dbg !4674

next_if184:                                       ; preds = %result_block173
  br label %check_subtype185, !dbg !4675

check_subtype185:                                 ; preds = %parent_type_block187, %next_if184
  %131 = phi i64 [ %33, %next_if184 ], [ %typeid.parent189, %parent_type_block187 ], !dbg !4675
  %eq186 = icmp eq i64 ptrtoint (ptr @"$ct.ushort" to i64), %131, !dbg !4675
  br i1 %eq186, label %result_block190, label %parent_type_block187, !dbg !4675

parent_type_block187:                             ; preds = %check_subtype185
  %132 = inttoptr i64 %131 to ptr, !dbg !4675
  %ptradd188 = getelementptr inbounds i8, ptr %132, i64 8, !dbg !4675
  %typeid.parent189 = load i64, ptr %ptradd188, align 8, !dbg !4675
  %133 = icmp eq i64 %typeid.parent189, 0, !dbg !4675
  br i1 %133, label %result_block190, label %check_subtype185, !dbg !4675

result_block190:                                  ; preds = %parent_type_block187, %check_subtype185
  %134 = phi i1 [ false, %parent_type_block187 ], [ true, %check_subtype185 ], !dbg !4675
  br i1 %134, label %switch.case191, label %next_if214, !dbg !4675

switch.case191:                                   ; preds = %result_block190
    #dbg_declare(ptr %s192, !4676, !DIExpression(), !4678)
  %135 = load ptr, ptr %v, align 8, !dbg !4679
  %checknull193 = icmp eq ptr %135, null, !dbg !4679
  %136 = call i1 @llvm.expect.i1(i1 %checknull193, i1 false), !dbg !4679
  br i1 %136, label %panic194, label %checkok195, !dbg !4679

checkok195:                                       ; preds = %switch.case191
  %137 = ptrtoint ptr %135 to i64, !dbg !4680
  %138 = urem i64 %137, 2, !dbg !4680
  %139 = icmp ne i64 %138, 0, !dbg !4680
  %140 = call i1 @llvm.expect.i1(i1 %139, i1 false), !dbg !4680
  br i1 %140, label %panic196, label %checkok203, !dbg !4680

checkok203:                                       ; preds = %checkok195
  %141 = load i16, ptr %135, align 2, !dbg !4680
  store i16 %141, ptr %s192, align 2, !dbg !4680
  %142 = load i16, ptr %s192, align 2, !dbg !4681
  %zext204 = zext i16 %142 to i32, !dbg !4681
  %143 = load i32, ptr %max, align 4, !dbg !4682
  %gt205 = icmp ugt i32 %zext204, %143, !dbg !4681
  br i1 %gt205, label %or.phi209, label %or.rhs206, !dbg !4681

or.rhs206:                                        ; preds = %checkok203
  %144 = load i16, ptr %s192, align 2, !dbg !4683
  %zext207 = zext i16 %144 to i32, !dbg !4683
  %145 = load i32, ptr %min, align 4, !dbg !4684
  %lt208 = icmp ult i32 %zext207, %145, !dbg !4683
  br label %or.phi209, !dbg !4683

or.phi209:                                        ; preds = %or.rhs206, %checkok203
  %val210 = phi i1 [ true, %checkok203 ], [ %lt208, %or.rhs206 ], !dbg !4683
  br i1 %val210, label %if.then211, label %if.exit212, !dbg !4683

if.then211:                                       ; preds = %or.phi209
  br label %else_block, !dbg !4685

if.exit212:                                       ; preds = %or.phi209
  %146 = load i16, ptr %s192, align 2, !dbg !4686
  %zext213 = zext i16 %146 to i32, !dbg !4686
  store i32 %zext213, ptr %blockret, align 4, !dbg !4686
  br label %expr_block.exit, !dbg !4686

next_if214:                                       ; preds = %result_block190
  br label %check_subtype215, !dbg !4687

check_subtype215:                                 ; preds = %parent_type_block217, %next_if214
  %147 = phi i64 [ %33, %next_if214 ], [ %typeid.parent219, %parent_type_block217 ], !dbg !4687
  %eq216 = icmp eq i64 ptrtoint (ptr @"$ct.uint" to i64), %147, !dbg !4687
  br i1 %eq216, label %result_block220, label %parent_type_block217, !dbg !4687

parent_type_block217:                             ; preds = %check_subtype215
  %148 = inttoptr i64 %147 to ptr, !dbg !4687
  %ptradd218 = getelementptr inbounds i8, ptr %148, i64 8, !dbg !4687
  %typeid.parent219 = load i64, ptr %ptradd218, align 8, !dbg !4687
  %149 = icmp eq i64 %typeid.parent219, 0, !dbg !4687
  br i1 %149, label %result_block220, label %check_subtype215, !dbg !4687

result_block220:                                  ; preds = %parent_type_block217, %check_subtype215
  %150 = phi i1 [ false, %parent_type_block217 ], [ true, %check_subtype215 ], !dbg !4687
  br i1 %150, label %switch.case221, label %next_if241, !dbg !4687

switch.case221:                                   ; preds = %result_block220
    #dbg_declare(ptr %i222, !4688, !DIExpression(), !4690)
  %151 = load ptr, ptr %v, align 8, !dbg !4691
  %checknull223 = icmp eq ptr %151, null, !dbg !4691
  %152 = call i1 @llvm.expect.i1(i1 %checknull223, i1 false), !dbg !4691
  br i1 %152, label %panic224, label %checkok225, !dbg !4691

checkok225:                                       ; preds = %switch.case221
  %153 = ptrtoint ptr %151 to i64, !dbg !4692
  %154 = urem i64 %153, 4, !dbg !4692
  %155 = icmp ne i64 %154, 0, !dbg !4692
  %156 = call i1 @llvm.expect.i1(i1 %155, i1 false), !dbg !4692
  br i1 %156, label %panic226, label %checkok233, !dbg !4692

checkok233:                                       ; preds = %checkok225
  %157 = load i32, ptr %151, align 4, !dbg !4692
  store i32 %157, ptr %i222, align 4, !dbg !4692
  %158 = load i32, ptr %i222, align 4, !dbg !4693
  %159 = load i32, ptr %max, align 4, !dbg !4694
  %gt234 = icmp ugt i32 %158, %159, !dbg !4693
  br i1 %gt234, label %or.phi237, label %or.rhs235, !dbg !4693

or.rhs235:                                        ; preds = %checkok233
  %160 = load i32, ptr %i222, align 4, !dbg !4695
  %161 = load i32, ptr %min, align 4, !dbg !4696
  %lt236 = icmp ult i32 %160, %161, !dbg !4695
  br label %or.phi237, !dbg !4695

or.phi237:                                        ; preds = %or.rhs235, %checkok233
  %val238 = phi i1 [ true, %checkok233 ], [ %lt236, %or.rhs235 ], !dbg !4695
  br i1 %val238, label %if.then239, label %if.exit240, !dbg !4695

if.then239:                                       ; preds = %or.phi237
  br label %else_block, !dbg !4697

if.exit240:                                       ; preds = %or.phi237
  %162 = load i32, ptr %i222, align 4, !dbg !4698
  store i32 %162, ptr %blockret, align 4, !dbg !4698
  br label %expr_block.exit, !dbg !4698

next_if241:                                       ; preds = %result_block220
  br label %check_subtype242, !dbg !4699

check_subtype242:                                 ; preds = %parent_type_block244, %next_if241
  %163 = phi i64 [ %33, %next_if241 ], [ %typeid.parent246, %parent_type_block244 ], !dbg !4699
  %eq243 = icmp eq i64 ptrtoint (ptr @"$ct.ulong" to i64), %163, !dbg !4699
  br i1 %eq243, label %result_block247, label %parent_type_block244, !dbg !4699

parent_type_block244:                             ; preds = %check_subtype242
  %164 = inttoptr i64 %163 to ptr, !dbg !4699
  %ptradd245 = getelementptr inbounds i8, ptr %164, i64 8, !dbg !4699
  %typeid.parent246 = load i64, ptr %ptradd245, align 8, !dbg !4699
  %165 = icmp eq i64 %typeid.parent246, 0, !dbg !4699
  br i1 %165, label %result_block247, label %check_subtype242, !dbg !4699

result_block247:                                  ; preds = %parent_type_block244, %check_subtype242
  %166 = phi i1 [ false, %parent_type_block244 ], [ true, %check_subtype242 ], !dbg !4699
  br i1 %166, label %switch.case248, label %next_if271, !dbg !4699

switch.case248:                                   ; preds = %result_block247
    #dbg_declare(ptr %l249, !4700, !DIExpression(), !4702)
  %167 = load ptr, ptr %v, align 8, !dbg !4703
  %checknull250 = icmp eq ptr %167, null, !dbg !4703
  %168 = call i1 @llvm.expect.i1(i1 %checknull250, i1 false), !dbg !4703
  br i1 %168, label %panic251, label %checkok252, !dbg !4703

checkok252:                                       ; preds = %switch.case248
  %169 = ptrtoint ptr %167 to i64, !dbg !4704
  %170 = urem i64 %169, 8, !dbg !4704
  %171 = icmp ne i64 %170, 0, !dbg !4704
  %172 = call i1 @llvm.expect.i1(i1 %171, i1 false), !dbg !4704
  br i1 %172, label %panic253, label %checkok260, !dbg !4704

checkok260:                                       ; preds = %checkok252
  %173 = load i64, ptr %167, align 8, !dbg !4704
  store i64 %173, ptr %l249, align 8, !dbg !4704
  %174 = load i64, ptr %l249, align 8, !dbg !4705
  %175 = load i32, ptr %max, align 4, !dbg !4706
  %zext261 = zext i32 %175 to i64, !dbg !4706
  %gt262 = icmp ugt i64 %174, %zext261, !dbg !4705
  br i1 %gt262, label %or.phi266, label %or.rhs263, !dbg !4705

or.rhs263:                                        ; preds = %checkok260
  %176 = load i64, ptr %l249, align 8, !dbg !4707
  %177 = load i32, ptr %min, align 4, !dbg !4708
  %zext264 = zext i32 %177 to i64, !dbg !4708
  %lt265 = icmp ult i64 %176, %zext264, !dbg !4707
  br label %or.phi266, !dbg !4707

or.phi266:                                        ; preds = %or.rhs263, %checkok260
  %val267 = phi i1 [ true, %checkok260 ], [ %lt265, %or.rhs263 ], !dbg !4707
  br i1 %val267, label %if.then268, label %if.exit269, !dbg !4707

if.then268:                                       ; preds = %or.phi266
  br label %else_block, !dbg !4709

if.exit269:                                       ; preds = %or.phi266
  %178 = load i64, ptr %l249, align 8, !dbg !4710
  %trunc270 = trunc i64 %178 to i32, !dbg !4710
  store i32 %trunc270, ptr %blockret, align 4, !dbg !4710
  br label %expr_block.exit, !dbg !4710

next_if271:                                       ; preds = %result_block247
  br label %check_subtype272, !dbg !4711

check_subtype272:                                 ; preds = %parent_type_block274, %next_if271
  %179 = phi i64 [ %33, %next_if271 ], [ %typeid.parent276, %parent_type_block274 ], !dbg !4711
  %eq273 = icmp eq i64 ptrtoint (ptr @"$ct.uint128" to i64), %179, !dbg !4711
  br i1 %eq273, label %result_block277, label %parent_type_block274, !dbg !4711

parent_type_block274:                             ; preds = %check_subtype272
  %180 = inttoptr i64 %179 to ptr, !dbg !4711
  %ptradd275 = getelementptr inbounds i8, ptr %180, i64 8, !dbg !4711
  %typeid.parent276 = load i64, ptr %ptradd275, align 8, !dbg !4711
  %181 = icmp eq i64 %typeid.parent276, 0, !dbg !4711
  br i1 %181, label %result_block277, label %check_subtype272, !dbg !4711

result_block277:                                  ; preds = %parent_type_block274, %check_subtype272
  %182 = phi i1 [ false, %parent_type_block274 ], [ true, %check_subtype272 ], !dbg !4711
  br i1 %182, label %switch.case278, label %next_if301, !dbg !4711

switch.case278:                                   ; preds = %result_block277
    #dbg_declare(ptr %i279, !4712, !DIExpression(), !4714)
  %183 = load ptr, ptr %v, align 8, !dbg !4715
  %checknull280 = icmp eq ptr %183, null, !dbg !4715
  %184 = call i1 @llvm.expect.i1(i1 %checknull280, i1 false), !dbg !4715
  br i1 %184, label %panic281, label %checkok282, !dbg !4715

checkok282:                                       ; preds = %switch.case278
  %185 = ptrtoint ptr %183 to i64, !dbg !4716
  %186 = urem i64 %185, 16, !dbg !4716
  %187 = icmp ne i64 %186, 0, !dbg !4716
  %188 = call i1 @llvm.expect.i1(i1 %187, i1 false), !dbg !4716
  br i1 %188, label %panic283, label %checkok290, !dbg !4716

checkok290:                                       ; preds = %checkok282
  %189 = load i128, ptr %183, align 16, !dbg !4716
  store i128 %189, ptr %i279, align 16, !dbg !4716
  %190 = load i128, ptr %i279, align 16, !dbg !4717
  %191 = load i32, ptr %max, align 4, !dbg !4718
  %zext291 = zext i32 %191 to i128, !dbg !4718
  %gt292 = icmp ugt i128 %190, %zext291, !dbg !4717
  br i1 %gt292, label %or.phi296, label %or.rhs293, !dbg !4717

or.rhs293:                                        ; preds = %checkok290
  %192 = load i128, ptr %i279, align 16, !dbg !4719
  %193 = load i32, ptr %min, align 4, !dbg !4720
  %zext294 = zext i32 %193 to i128, !dbg !4720
  %lt295 = icmp ult i128 %192, %zext294, !dbg !4719
  br label %or.phi296, !dbg !4719

or.phi296:                                        ; preds = %or.rhs293, %checkok290
  %val297 = phi i1 [ true, %checkok290 ], [ %lt295, %or.rhs293 ], !dbg !4719
  br i1 %val297, label %if.then298, label %if.exit299, !dbg !4719

if.then298:                                       ; preds = %or.phi296
  br label %else_block, !dbg !4721

if.exit299:                                       ; preds = %or.phi296
  %194 = load i128, ptr %i279, align 16, !dbg !4722
  %trunc300 = trunc i128 %194 to i32, !dbg !4722
  store i32 %trunc300, ptr %blockret, align 4, !dbg !4722
  br label %expr_block.exit, !dbg !4722

next_if301:                                       ; preds = %result_block277
  br label %switch.default, !dbg !4722

switch.default:                                   ; preds = %next_if301
  store %"char[]" { ptr @.str.263, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !4723
  %ptradd302 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !4723
  %hi = load i64, ptr %ptradd302, align 8, !dbg !4723
  store %"any[]" zeroinitializer, ptr %indirectarg303, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.264, i64 20, ptr @.str.265, i64 18, i32 633, ptr byval(%"any[]") align 8 %indirectarg303), !dbg !4727
  unreachable, !dbg !4728

expr_block.exit:                                  ; preds = %if.exit299, %if.exit269, %if.exit240, %if.exit212, %if.exit182, %if.exit165, %if.exit126, %if.exit87, %if.exit50, %if.exit21
  %195 = load i32, ptr %blockret, align 4, !dbg !4728
  br label %phi_block, !dbg !4728

else_block:                                       ; preds = %if.then298, %if.then268, %if.then239, %if.then211, %if.then181, %if.then164, %if.then151, %if.then125, %if.then112, %if.then86, %if.then75, %if.then49, %if.then42, %if.then20
  br label %phi_block, !dbg !4729

phi_block:                                        ; preds = %else_block, %expr_block.exit
  %val304 = phi i32 [ %195, %expr_block.exit ], [ 65533, %else_block ], !dbg !4729
  store i32 %val304, ptr %c, align 4, !dbg !4729
  store i8 1, ptr %switch305, align 1
  br label %switch.entry306

switch.entry306:                                  ; preds = %phi_block
  %196 = load i8, ptr %switch305, align 1
  %197 = trunc i8 %196 to i1
  %198 = load i32, ptr %c, align 4, !dbg !4730
  %lt307 = icmp ult i32 %198, 127, !dbg !4730
  %eq308 = icmp eq i1 %lt307, %197, !dbg !4730
  br i1 %eq308, label %switch.case309, label %next_if318, !dbg !4730

switch.case309:                                   ; preds = %switch.entry306
  %199 = load i32, ptr %c, align 4, !dbg !4732
  %trunc311 = trunc i32 %199 to i8, !dbg !4732
  %200 = load ptr, ptr %self, align 8
  %201 = call i64 @std.io.Formatter.out(ptr %retparam312, ptr %200, i8 zeroext %trunc311), !dbg !4734
  %not_err313 = icmp eq i64 %201, 0, !dbg !4734
  %202 = call i1 @llvm.expect.i1(i1 %not_err313, i1 true), !dbg !4734
  br i1 %202, label %after_check315, label %assign_optional314, !dbg !4734

assign_optional314:                               ; preds = %switch.case309
  store i64 %201, ptr %error_var310, align 8, !dbg !4734
  br label %guard_block316, !dbg !4734

after_check315:                                   ; preds = %switch.case309
  br label %noerr_block317, !dbg !4734

guard_block316:                                   ; preds = %assign_optional314
  %203 = load i64, ptr %error_var310, align 8, !dbg !4734
  ret i64 %203, !dbg !4734

noerr_block317:                                   ; preds = %after_check315
  br label %switch.exit, !dbg !4734

next_if318:                                       ; preds = %switch.entry306
  %204 = load i32, ptr %c, align 4, !dbg !4735
  %lt319 = icmp ult i32 %204, 2047, !dbg !4735
  %eq320 = icmp eq i1 %lt319, %197, !dbg !4735
  br i1 %eq320, label %switch.case321, label %next_if339, !dbg !4735

switch.case321:                                   ; preds = %next_if318
  %205 = load i32, ptr %c, align 4, !dbg !4736
  %lshr = lshr i32 %205, 6, !dbg !4736
  %206 = freeze i32 %lshr, !dbg !4736
  %or = or i32 192, %206, !dbg !4738
  %trunc323 = trunc i32 %or to i8, !dbg !4738
  %207 = load ptr, ptr %self, align 8
  %208 = call i64 @std.io.Formatter.out(ptr %retparam324, ptr %207, i8 zeroext %trunc323), !dbg !4739
  %not_err325 = icmp eq i64 %208, 0, !dbg !4739
  %209 = call i1 @llvm.expect.i1(i1 %not_err325, i1 true), !dbg !4739
  br i1 %209, label %after_check327, label %assign_optional326, !dbg !4739

assign_optional326:                               ; preds = %switch.case321
  store i64 %208, ptr %error_var322, align 8, !dbg !4739
  br label %guard_block328, !dbg !4739

after_check327:                                   ; preds = %switch.case321
  br label %noerr_block329, !dbg !4739

guard_block328:                                   ; preds = %assign_optional326
  %210 = load i64, ptr %error_var322, align 8, !dbg !4739
  ret i64 %210, !dbg !4739

noerr_block329:                                   ; preds = %after_check327
  %211 = load i32, ptr %c, align 4, !dbg !4740
  %and = and i32 %211, 63, !dbg !4740
  %or331 = or i32 128, %and, !dbg !4741
  %trunc332 = trunc i32 %or331 to i8, !dbg !4741
  %212 = load ptr, ptr %self, align 8
  %213 = call i64 @std.io.Formatter.out(ptr %retparam333, ptr %212, i8 zeroext %trunc332), !dbg !4742
  %not_err334 = icmp eq i64 %213, 0, !dbg !4742
  %214 = call i1 @llvm.expect.i1(i1 %not_err334, i1 true), !dbg !4742
  br i1 %214, label %after_check336, label %assign_optional335, !dbg !4742

assign_optional335:                               ; preds = %noerr_block329
  store i64 %213, ptr %error_var330, align 8, !dbg !4742
  br label %guard_block337, !dbg !4742

after_check336:                                   ; preds = %noerr_block329
  br label %noerr_block338, !dbg !4742

guard_block337:                                   ; preds = %assign_optional335
  %215 = load i64, ptr %error_var330, align 8, !dbg !4742
  ret i64 %215, !dbg !4742

noerr_block338:                                   ; preds = %after_check336
  br label %switch.exit, !dbg !4742

next_if339:                                       ; preds = %next_if318
  %216 = load i32, ptr %c, align 4, !dbg !4743
  %lt340 = icmp ult i32 %216, 65535, !dbg !4743
  %eq341 = icmp eq i1 %lt340, %197, !dbg !4743
  br i1 %eq341, label %switch.case342, label %next_if374, !dbg !4743

switch.case342:                                   ; preds = %next_if339
  %217 = load i32, ptr %c, align 4, !dbg !4744
  %lshr344 = lshr i32 %217, 12, !dbg !4744
  %218 = freeze i32 %lshr344, !dbg !4744
  %or345 = or i32 224, %218, !dbg !4746
  %trunc346 = trunc i32 %or345 to i8, !dbg !4746
  %219 = load ptr, ptr %self, align 8
  %220 = call i64 @std.io.Formatter.out(ptr %retparam347, ptr %219, i8 zeroext %trunc346), !dbg !4747
  %not_err348 = icmp eq i64 %220, 0, !dbg !4747
  %221 = call i1 @llvm.expect.i1(i1 %not_err348, i1 true), !dbg !4747
  br i1 %221, label %after_check350, label %assign_optional349, !dbg !4747

assign_optional349:                               ; preds = %switch.case342
  store i64 %220, ptr %error_var343, align 8, !dbg !4747
  br label %guard_block351, !dbg !4747

after_check350:                                   ; preds = %switch.case342
  br label %noerr_block352, !dbg !4747

guard_block351:                                   ; preds = %assign_optional349
  %222 = load i64, ptr %error_var343, align 8, !dbg !4747
  ret i64 %222, !dbg !4747

noerr_block352:                                   ; preds = %after_check350
  %223 = load i32, ptr %c, align 4, !dbg !4748
  %lshr354 = lshr i32 %223, 6, !dbg !4748
  %224 = freeze i32 %lshr354, !dbg !4748
  %and355 = and i32 %224, 63, !dbg !4748
  %or356 = or i32 128, %and355, !dbg !4749
  %trunc357 = trunc i32 %or356 to i8, !dbg !4749
  %225 = load ptr, ptr %self, align 8
  %226 = call i64 @std.io.Formatter.out(ptr %retparam358, ptr %225, i8 zeroext %trunc357), !dbg !4750
  %not_err359 = icmp eq i64 %226, 0, !dbg !4750
  %227 = call i1 @llvm.expect.i1(i1 %not_err359, i1 true), !dbg !4750
  br i1 %227, label %after_check361, label %assign_optional360, !dbg !4750

assign_optional360:                               ; preds = %noerr_block352
  store i64 %226, ptr %error_var353, align 8, !dbg !4750
  br label %guard_block362, !dbg !4750

after_check361:                                   ; preds = %noerr_block352
  br label %noerr_block363, !dbg !4750

guard_block362:                                   ; preds = %assign_optional360
  %228 = load i64, ptr %error_var353, align 8, !dbg !4750
  ret i64 %228, !dbg !4750

noerr_block363:                                   ; preds = %after_check361
  %229 = load i32, ptr %c, align 4, !dbg !4751
  %and365 = and i32 %229, 63, !dbg !4751
  %or366 = or i32 128, %and365, !dbg !4752
  %trunc367 = trunc i32 %or366 to i8, !dbg !4752
  %230 = load ptr, ptr %self, align 8
  %231 = call i64 @std.io.Formatter.out(ptr %retparam368, ptr %230, i8 zeroext %trunc367), !dbg !4753
  %not_err369 = icmp eq i64 %231, 0, !dbg !4753
  %232 = call i1 @llvm.expect.i1(i1 %not_err369, i1 true), !dbg !4753
  br i1 %232, label %after_check371, label %assign_optional370, !dbg !4753

assign_optional370:                               ; preds = %noerr_block363
  store i64 %231, ptr %error_var364, align 8, !dbg !4753
  br label %guard_block372, !dbg !4753

after_check371:                                   ; preds = %noerr_block363
  br label %noerr_block373, !dbg !4753

guard_block372:                                   ; preds = %assign_optional370
  %233 = load i64, ptr %error_var364, align 8, !dbg !4753
  ret i64 %233, !dbg !4753

noerr_block373:                                   ; preds = %after_check371
  br label %switch.exit, !dbg !4753

next_if374:                                       ; preds = %next_if339
  br label %switch.default375, !dbg !4753

switch.default375:                                ; preds = %next_if374
  %234 = load i32, ptr %c, align 4, !dbg !4754
  %lshr377 = lshr i32 %234, 18, !dbg !4754
  %235 = freeze i32 %lshr377, !dbg !4754
  %or378 = or i32 240, %235, !dbg !4756
  %trunc379 = trunc i32 %or378 to i8, !dbg !4756
  %236 = load ptr, ptr %self, align 8
  %237 = call i64 @std.io.Formatter.out(ptr %retparam380, ptr %236, i8 zeroext %trunc379), !dbg !4757
  %not_err381 = icmp eq i64 %237, 0, !dbg !4757
  %238 = call i1 @llvm.expect.i1(i1 %not_err381, i1 true), !dbg !4757
  br i1 %238, label %after_check383, label %assign_optional382, !dbg !4757

assign_optional382:                               ; preds = %switch.default375
  store i64 %237, ptr %error_var376, align 8, !dbg !4757
  br label %guard_block384, !dbg !4757

after_check383:                                   ; preds = %switch.default375
  br label %noerr_block385, !dbg !4757

guard_block384:                                   ; preds = %assign_optional382
  %239 = load i64, ptr %error_var376, align 8, !dbg !4757
  ret i64 %239, !dbg !4757

noerr_block385:                                   ; preds = %after_check383
  %240 = load i32, ptr %c, align 4, !dbg !4758
  %lshr387 = lshr i32 %240, 12, !dbg !4758
  %241 = freeze i32 %lshr387, !dbg !4758
  %and388 = and i32 %241, 63, !dbg !4758
  %or389 = or i32 128, %and388, !dbg !4759
  %trunc390 = trunc i32 %or389 to i8, !dbg !4759
  %242 = load ptr, ptr %self, align 8
  %243 = call i64 @std.io.Formatter.out(ptr %retparam391, ptr %242, i8 zeroext %trunc390), !dbg !4760
  %not_err392 = icmp eq i64 %243, 0, !dbg !4760
  %244 = call i1 @llvm.expect.i1(i1 %not_err392, i1 true), !dbg !4760
  br i1 %244, label %after_check394, label %assign_optional393, !dbg !4760

assign_optional393:                               ; preds = %noerr_block385
  store i64 %243, ptr %error_var386, align 8, !dbg !4760
  br label %guard_block395, !dbg !4760

after_check394:                                   ; preds = %noerr_block385
  br label %noerr_block396, !dbg !4760

guard_block395:                                   ; preds = %assign_optional393
  %245 = load i64, ptr %error_var386, align 8, !dbg !4760
  ret i64 %245, !dbg !4760

noerr_block396:                                   ; preds = %after_check394
  %246 = load i32, ptr %c, align 4, !dbg !4761
  %lshr398 = lshr i32 %246, 6, !dbg !4761
  %247 = freeze i32 %lshr398, !dbg !4761
  %and399 = and i32 %247, 63, !dbg !4761
  %or400 = or i32 128, %and399, !dbg !4762
  %trunc401 = trunc i32 %or400 to i8, !dbg !4762
  %248 = load ptr, ptr %self, align 8
  %249 = call i64 @std.io.Formatter.out(ptr %retparam402, ptr %248, i8 zeroext %trunc401), !dbg !4763
  %not_err403 = icmp eq i64 %249, 0, !dbg !4763
  %250 = call i1 @llvm.expect.i1(i1 %not_err403, i1 true), !dbg !4763
  br i1 %250, label %after_check405, label %assign_optional404, !dbg !4763

assign_optional404:                               ; preds = %noerr_block396
  store i64 %249, ptr %error_var397, align 8, !dbg !4763
  br label %guard_block406, !dbg !4763

after_check405:                                   ; preds = %noerr_block396
  br label %noerr_block407, !dbg !4763

guard_block406:                                   ; preds = %assign_optional404
  %251 = load i64, ptr %error_var397, align 8, !dbg !4763
  ret i64 %251, !dbg !4763

noerr_block407:                                   ; preds = %after_check405
  %252 = load i32, ptr %c, align 4, !dbg !4764
  %and409 = and i32 %252, 63, !dbg !4764
  %or410 = or i32 128, %and409, !dbg !4765
  %trunc411 = trunc i32 %or410 to i8, !dbg !4765
  %253 = load ptr, ptr %self, align 8
  %254 = call i64 @std.io.Formatter.out(ptr %retparam412, ptr %253, i8 zeroext %trunc411), !dbg !4766
  %not_err413 = icmp eq i64 %254, 0, !dbg !4766
  %255 = call i1 @llvm.expect.i1(i1 %not_err413, i1 true), !dbg !4766
  br i1 %255, label %after_check415, label %assign_optional414, !dbg !4766

assign_optional414:                               ; preds = %noerr_block407
  store i64 %254, ptr %error_var408, align 8, !dbg !4766
  br label %guard_block416, !dbg !4766

after_check415:                                   ; preds = %noerr_block407
  br label %noerr_block417, !dbg !4766

guard_block416:                                   ; preds = %assign_optional414
  %256 = load i64, ptr %error_var408, align 8, !dbg !4766
  ret i64 %256, !dbg !4766

noerr_block417:                                   ; preds = %after_check415
  br label %switch.exit, !dbg !4766

switch.exit:                                      ; preds = %noerr_block417, %noerr_block373, %noerr_block338, %noerr_block317
  %257 = load i64, ptr %len, align 8, !dbg !4767
  %258 = load i32, ptr %l, align 4, !dbg !4768
  %zext419 = zext i32 %258 to i64, !dbg !4768
  %259 = load ptr, ptr %self, align 8
  %260 = call i64 @std.io.Formatter.adjust(ptr %retparam420, ptr %259, i64 %zext419), !dbg !4769
  %not_err421 = icmp eq i64 %260, 0, !dbg !4769
  %261 = call i1 @llvm.expect.i1(i1 %not_err421, i1 true), !dbg !4769
  br i1 %261, label %after_check423, label %assign_optional422, !dbg !4769

assign_optional422:                               ; preds = %switch.exit
  store i64 %260, ptr %error_var418, align 8, !dbg !4769
  br label %guard_block424, !dbg !4769

after_check423:                                   ; preds = %switch.exit
  br label %noerr_block425, !dbg !4769

guard_block424:                                   ; preds = %assign_optional422
  %262 = load i64, ptr %error_var418, align 8, !dbg !4769
  ret i64 %262, !dbg !4769

noerr_block425:                                   ; preds = %after_check423
  %263 = load i64, ptr %retparam420, align 8, !dbg !4769
  %add426 = add i64 %257, %263, !dbg !4767
  store i64 %add426, ptr %len, align 8, !dbg !4767
  %264 = load i64, ptr %len, align 8, !dbg !4770
  store i64 %264, ptr %0, align 8, !dbg !4770
  ret i64 0, !dbg !4770

panic:                                            ; preds = %entry
  %265 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4555
  call void %265(ptr @.panic_msg, i64 62, ptr @.file.215, i64 20, ptr @.func.261, i64 8, i32 622) #5, !dbg !4555
  unreachable, !dbg !4555

panic18:                                          ; preds = %switch.case
  %266 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4600
  call void %266(ptr @.panic_msg.146, i64 52, ptr @.file.142, i64 8, ptr @.func.261, i64 8, i32 35) #5, !dbg !4600
  unreachable, !dbg !4600

panic31:                                          ; preds = %switch.case29
  %267 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4610
  call void %267(ptr @.panic_msg.149, i64 53, ptr @.file.142, i64 8, ptr @.func.261, i64 8, i32 39) #5, !dbg !4610
  unreachable, !dbg !4610

panic33:                                          ; preds = %checkok32
  store i64 2, ptr %taddr, align 8
  %268 = insertvalue %any undef, ptr %taddr, 0
  %269 = insertvalue %any %268, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %52, ptr %taddr34, align 8
  %270 = insertvalue %any undef, ptr %taddr34, 0
  %271 = insertvalue %any %270, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %269, ptr %varargslots, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %271, ptr %ptradd35, align 16
  %272 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %272, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.142, i64 8, ptr @.func.261, i64 8, i32 39, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !4610
  unreachable, !dbg !4610

panic61:                                          ; preds = %switch.case59
  %273 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4625
  call void %273(ptr @.panic_msg.150, i64 51, ptr @.file.142, i64 8, ptr @.func.261, i64 8, i32 44) #5, !dbg !4625
  unreachable, !dbg !4625

panic63:                                          ; preds = %checkok62
  store i64 4, ptr %taddr64, align 8
  %274 = insertvalue %any undef, ptr %taddr64, 0
  %275 = insertvalue %any %274, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %71, ptr %taddr65, align 8
  %276 = insertvalue %any undef, ptr %taddr65, 0
  %277 = insertvalue %any %276, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %275, ptr %varargslots66, align 16
  %ptradd67 = getelementptr inbounds i8, ptr %varargslots66, i64 16
  store %any %277, ptr %ptradd67, align 16
  %278 = insertvalue %"any[]" undef, ptr %varargslots66, 0
  %"$$temp68" = insertvalue %"any[]" %278, i64 2, 1
  store %"any[]" %"$$temp68", ptr %indirectarg69, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.142, i64 8, ptr @.func.261, i64 8, i32 44, ptr byval(%"any[]") align 8 %indirectarg69) #5, !dbg !4625
  unreachable, !dbg !4625

panic98:                                          ; preds = %switch.case95
  %279 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4640
  call void %279(ptr @.panic_msg.151, i64 52, ptr @.file.142, i64 8, ptr @.func.261, i64 8, i32 49) #5, !dbg !4640
  unreachable, !dbg !4640

panic100:                                         ; preds = %checkok99
  store i64 8, ptr %taddr101, align 8
  %280 = insertvalue %any undef, ptr %taddr101, 0
  %281 = insertvalue %any %280, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %90, ptr %taddr102, align 8
  %282 = insertvalue %any undef, ptr %taddr102, 0
  %283 = insertvalue %any %282, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %281, ptr %varargslots103, align 16
  %ptradd104 = getelementptr inbounds i8, ptr %varargslots103, i64 16
  store %any %283, ptr %ptradd104, align 16
  %284 = insertvalue %"any[]" undef, ptr %varargslots103, 0
  %"$$temp105" = insertvalue %"any[]" %284, i64 2, 1
  store %"any[]" %"$$temp105", ptr %indirectarg106, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.142, i64 8, ptr @.func.261, i64 8, i32 49, ptr byval(%"any[]") align 8 %indirectarg106) #5, !dbg !4640
  unreachable, !dbg !4640

panic137:                                         ; preds = %switch.case134
  %285 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4655
  call void %285(ptr @.panic_msg.152, i64 54, ptr @.file.142, i64 8, ptr @.func.261, i64 8, i32 54) #5, !dbg !4655
  unreachable, !dbg !4655

panic139:                                         ; preds = %checkok138
  store i64 16, ptr %taddr140, align 8
  %286 = insertvalue %any undef, ptr %taddr140, 0
  %287 = insertvalue %any %286, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %109, ptr %taddr141, align 8
  %288 = insertvalue %any undef, ptr %taddr141, 0
  %289 = insertvalue %any %288, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %287, ptr %varargslots142, align 16
  %ptradd143 = getelementptr inbounds i8, ptr %varargslots142, i64 16
  store %any %289, ptr %ptradd143, align 16
  %290 = insertvalue %"any[]" undef, ptr %varargslots142, 0
  %"$$temp144" = insertvalue %"any[]" %290, i64 2, 1
  store %"any[]" %"$$temp144", ptr %indirectarg145, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.142, i64 8, ptr @.func.261, i64 8, i32 54, ptr byval(%"any[]") align 8 %indirectarg145) #5, !dbg !4655
  unreachable, !dbg !4655

panic177:                                         ; preds = %switch.case174
  %291 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4670
  call void %291(ptr @.panic_msg.146, i64 52, ptr @.file.142, i64 8, ptr @.func.261, i64 8, i32 59) #5, !dbg !4670
  unreachable, !dbg !4670

panic194:                                         ; preds = %switch.case191
  %292 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4680
  call void %292(ptr @.panic_msg.153, i64 54, ptr @.file.142, i64 8, ptr @.func.261, i64 8, i32 63) #5, !dbg !4680
  unreachable, !dbg !4680

panic196:                                         ; preds = %checkok195
  store i64 2, ptr %taddr197, align 8
  %293 = insertvalue %any undef, ptr %taddr197, 0
  %294 = insertvalue %any %293, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %138, ptr %taddr198, align 8
  %295 = insertvalue %any undef, ptr %taddr198, 0
  %296 = insertvalue %any %295, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %294, ptr %varargslots199, align 16
  %ptradd200 = getelementptr inbounds i8, ptr %varargslots199, i64 16
  store %any %296, ptr %ptradd200, align 16
  %297 = insertvalue %"any[]" undef, ptr %varargslots199, 0
  %"$$temp201" = insertvalue %"any[]" %297, i64 2, 1
  store %"any[]" %"$$temp201", ptr %indirectarg202, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.142, i64 8, ptr @.func.261, i64 8, i32 63, ptr byval(%"any[]") align 8 %indirectarg202) #5, !dbg !4680
  unreachable, !dbg !4680

panic224:                                         ; preds = %switch.case221
  %298 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4692
  call void %298(ptr @.panic_msg.154, i64 52, ptr @.file.142, i64 8, ptr @.func.261, i64 8, i32 67) #5, !dbg !4692
  unreachable, !dbg !4692

panic226:                                         ; preds = %checkok225
  store i64 4, ptr %taddr227, align 8
  %299 = insertvalue %any undef, ptr %taddr227, 0
  %300 = insertvalue %any %299, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %154, ptr %taddr228, align 8
  %301 = insertvalue %any undef, ptr %taddr228, 0
  %302 = insertvalue %any %301, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %300, ptr %varargslots229, align 16
  %ptradd230 = getelementptr inbounds i8, ptr %varargslots229, i64 16
  store %any %302, ptr %ptradd230, align 16
  %303 = insertvalue %"any[]" undef, ptr %varargslots229, 0
  %"$$temp231" = insertvalue %"any[]" %303, i64 2, 1
  store %"any[]" %"$$temp231", ptr %indirectarg232, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.142, i64 8, ptr @.func.261, i64 8, i32 67, ptr byval(%"any[]") align 8 %indirectarg232) #5, !dbg !4692
  unreachable, !dbg !4692

panic251:                                         ; preds = %switch.case248
  %304 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4704
  call void %304(ptr @.panic_msg.155, i64 53, ptr @.file.142, i64 8, ptr @.func.261, i64 8, i32 71) #5, !dbg !4704
  unreachable, !dbg !4704

panic253:                                         ; preds = %checkok252
  store i64 8, ptr %taddr254, align 8
  %305 = insertvalue %any undef, ptr %taddr254, 0
  %306 = insertvalue %any %305, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %170, ptr %taddr255, align 8
  %307 = insertvalue %any undef, ptr %taddr255, 0
  %308 = insertvalue %any %307, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %306, ptr %varargslots256, align 16
  %ptradd257 = getelementptr inbounds i8, ptr %varargslots256, i64 16
  store %any %308, ptr %ptradd257, align 16
  %309 = insertvalue %"any[]" undef, ptr %varargslots256, 0
  %"$$temp258" = insertvalue %"any[]" %309, i64 2, 1
  store %"any[]" %"$$temp258", ptr %indirectarg259, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.142, i64 8, ptr @.func.261, i64 8, i32 71, ptr byval(%"any[]") align 8 %indirectarg259) #5, !dbg !4704
  unreachable, !dbg !4704

panic281:                                         ; preds = %switch.case278
  %310 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4716
  call void %310(ptr @.panic_msg.156, i64 55, ptr @.file.142, i64 8, ptr @.func.261, i64 8, i32 75) #5, !dbg !4716
  unreachable, !dbg !4716

panic283:                                         ; preds = %checkok282
  store i64 16, ptr %taddr284, align 8
  %311 = insertvalue %any undef, ptr %taddr284, 0
  %312 = insertvalue %any %311, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %186, ptr %taddr285, align 8
  %313 = insertvalue %any undef, ptr %taddr285, 0
  %314 = insertvalue %any %313, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %312, ptr %varargslots286, align 16
  %ptradd287 = getelementptr inbounds i8, ptr %varargslots286, i64 16
  store %any %314, ptr %ptradd287, align 16
  %315 = insertvalue %"any[]" undef, ptr %varargslots286, 0
  %"$$temp288" = insertvalue %"any[]" %315, i64 2, 1
  store %"any[]" %"$$temp288", ptr %indirectarg289, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.142, i64 8, ptr @.func.261, i64 8, i32 75, ptr byval(%"any[]") align 8 %indirectarg289) #5, !dbg !4716
  unreachable, !dbg !4716
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.out_reverse(ptr %0, ptr %1, ptr %2, i64 %3) #0 !dbg !4771 {
entry:
  %self = alloca ptr, align 8
  %buf = alloca %"char[]", align 8
  %n = alloca i64, align 8
  %buffer_start_idx = alloca i64, align 8
  %len = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %error_var10 = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %retparam17 = alloca i64, align 8
  %error_var24 = alloca i64, align 8
  %retparam25 = alloca i64, align 8
  %reterr = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !4772
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !4772
  br i1 %5, label %panic, label %checkok, !dbg !4772

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !4773, !DIExpression(), !4774)
  store ptr %2, ptr %buf, align 8
  %ptradd = getelementptr inbounds i8, ptr %buf, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %buf, !4775, !DIExpression(), !4776)
    #dbg_declare(ptr %n, !4777, !DIExpression(), !4778)
  store i64 0, ptr %n, align 8, !dbg !4778
    #dbg_declare(ptr %buffer_start_idx, !4779, !DIExpression(), !4780)
  %6 = load ptr, ptr %self, align 8, !dbg !4781
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !4781
  %ptradd2 = getelementptr inbounds i8, ptr %ptradd1, i64 16, !dbg !4781
  %7 = load i64, ptr %ptradd2, align 8, !dbg !4781
  store i64 %7, ptr %buffer_start_idx, align 8, !dbg !4781
    #dbg_declare(ptr %len, !4782, !DIExpression(), !4783)
  %ptradd3 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !4784
  %8 = load i64, ptr %ptradd3, align 8, !dbg !4784
  store i64 %8, ptr %len, align 8, !dbg !4784
  %9 = load ptr, ptr %self, align 8, !dbg !4785
  %ptradd4 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !4785
  %10 = load i32, ptr %ptradd4, align 8, !dbg !4785
  %11 = and i32 1, %10, !dbg !4785
  %trunc = trunc i32 %11 to i8, !dbg !4785
  %12 = trunc i8 %trunc to i1, !dbg !4785
  %not = xor i1 %12, true, !dbg !4785
  br i1 %not, label %and.rhs, label %and.phi, !dbg !4785

and.rhs:                                          ; preds = %checkok
  %13 = load ptr, ptr %self, align 8, !dbg !4786
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !4786
  %14 = load i32, ptr %ptradd5, align 8, !dbg !4786
  %lshrl = lshr i32 %14, 1, !dbg !4786
  %15 = and i32 1, %lshrl, !dbg !4786
  %trunc6 = trunc i32 %15 to i8, !dbg !4786
  %16 = trunc i8 %trunc6 to i1, !dbg !4786
  %not7 = xor i1 %16, true, !dbg !4786
  br label %and.phi, !dbg !4786

and.phi:                                          ; preds = %and.rhs, %checkok
  %val = phi i1 [ false, %checkok ], [ %not7, %and.rhs ], !dbg !4786
  br i1 %val, label %if.then, label %if.exit, !dbg !4786

if.then:                                          ; preds = %and.phi
  %17 = load i64, ptr %n, align 8, !dbg !4787
  %18 = load ptr, ptr %self, align 8, !dbg !4789
  %ptradd8 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !4789
  %ptradd9 = getelementptr inbounds i8, ptr %ptradd8, i64 4, !dbg !4789
  %19 = load i32, ptr %ptradd9, align 4, !dbg !4789
  %zext = zext i32 %19 to i64, !dbg !4789
  %20 = load i64, ptr %len, align 8, !dbg !4790
  %21 = load ptr, ptr %self, align 8
  %22 = call i64 @std.io.Formatter.pad(ptr %retparam, ptr %21, i8 zeroext 32, i64 %zext, i64 %20) #6, !dbg !4791
  %not_err = icmp eq i64 %22, 0, !dbg !4791
  %23 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4791
  br i1 %23, label %after_check, label %assign_optional, !dbg !4791

assign_optional:                                  ; preds = %if.then
  store i64 %22, ptr %error_var, align 8, !dbg !4791
  br label %guard_block, !dbg !4791

after_check:                                      ; preds = %if.then
  br label %noerr_block, !dbg !4791

guard_block:                                      ; preds = %assign_optional
  %24 = load i64, ptr %error_var, align 8, !dbg !4791
  ret i64 %24, !dbg !4791

noerr_block:                                      ; preds = %after_check
  %25 = load i64, ptr %retparam, align 8, !dbg !4791
  %add = add i64 %17, %25, !dbg !4787
  store i64 %add, ptr %n, align 8, !dbg !4787
  br label %if.exit, !dbg !4787

if.exit:                                          ; preds = %noerr_block, %and.phi
  br label %loop.cond, !dbg !4792

loop.cond:                                        ; preds = %noerr_block22, %if.exit
  %26 = load i64, ptr %len, align 8, !dbg !4793
  %i2b = icmp ne i64 %26, 0, !dbg !4793
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !4793

loop.body:                                        ; preds = %loop.cond
  %27 = load i64, ptr %n, align 8, !dbg !4795
  %ptradd11 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !4796
  %28 = load i64, ptr %ptradd11, align 8, !dbg !4796
  %29 = load ptr, ptr %buf, align 8, !dbg !4796
  %30 = load i64, ptr %len, align 8, !dbg !4797
  %sub = sub i64 %30, 1, !dbg !4797
  store i64 %sub, ptr %len, align 8, !dbg !4797
  %ge = icmp uge i64 %sub, %28, !dbg !4797
  %31 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !4797
  br i1 %31, label %panic12, label %checkok15, !dbg !4797

checkok15:                                        ; preds = %loop.body
  %ptradd16 = getelementptr inbounds i8, ptr %29, i64 %sub, !dbg !4798
  %32 = load ptr, ptr %self, align 8
  %33 = load i8, ptr %ptradd16, align 1
  %34 = call i64 @std.io.Formatter.out(ptr %retparam17, ptr %32, i8 zeroext %33), !dbg !4799
  %not_err18 = icmp eq i64 %34, 0, !dbg !4799
  %35 = call i1 @llvm.expect.i1(i1 %not_err18, i1 true), !dbg !4799
  br i1 %35, label %after_check20, label %assign_optional19, !dbg !4799

assign_optional19:                                ; preds = %checkok15
  store i64 %34, ptr %error_var10, align 8, !dbg !4799
  br label %guard_block21, !dbg !4799

after_check20:                                    ; preds = %checkok15
  br label %noerr_block22, !dbg !4799

guard_block21:                                    ; preds = %assign_optional19
  %36 = load i64, ptr %error_var10, align 8, !dbg !4799
  ret i64 %36, !dbg !4799

noerr_block22:                                    ; preds = %after_check20
  %37 = load i64, ptr %retparam17, align 8, !dbg !4799
  %add23 = add i64 %27, %37, !dbg !4795
  store i64 %add23, ptr %n, align 8, !dbg !4795
  br label %loop.cond, !dbg !4795

loop.exit:                                        ; preds = %loop.cond
  %38 = load i64, ptr %n, align 8, !dbg !4800
  %39 = load ptr, ptr %self, align 8
  %40 = load i64, ptr %n, align 8
  %41 = call i64 @std.io.Formatter.adjust(ptr %retparam25, ptr %39, i64 %40), !dbg !4801
  %not_err26 = icmp eq i64 %41, 0, !dbg !4801
  %42 = call i1 @llvm.expect.i1(i1 %not_err26, i1 true), !dbg !4801
  br i1 %42, label %after_check28, label %assign_optional27, !dbg !4801

assign_optional27:                                ; preds = %loop.exit
  store i64 %41, ptr %error_var24, align 8, !dbg !4801
  br label %guard_block29, !dbg !4801

after_check28:                                    ; preds = %loop.exit
  br label %noerr_block30, !dbg !4801

guard_block29:                                    ; preds = %assign_optional27
  %43 = load i64, ptr %error_var24, align 8, !dbg !4801
  ret i64 %43, !dbg !4801

noerr_block30:                                    ; preds = %after_check28
  %44 = load i64, ptr %retparam25, align 8, !dbg !4801
  %add31 = add i64 %38, %44, !dbg !4800
  store i64 %add31, ptr %n, align 8, !dbg !4800
  %45 = load i64, ptr %n, align 8, !dbg !4802
  store i64 %45, ptr %0, align 8, !dbg !4802
  ret i64 0, !dbg !4802

panic:                                            ; preds = %entry
  %46 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4774
  call void %46(ptr @.panic_msg, i64 62, ptr @.file.215, i64 20, ptr @.func.266, i64 11, i32 656) #5, !dbg !4774
  unreachable, !dbg !4774

panic12:                                          ; preds = %loop.body
  store i64 %28, ptr %taddr, align 8
  %47 = insertvalue %any undef, ptr %taddr, 0
  %48 = insertvalue %any %47, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %sub, ptr %taddr13, align 8
  %49 = insertvalue %any undef, ptr %taddr13, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %48, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %50, ptr %ptradd14, align 16
  %51 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %51, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.215, i64 20, ptr @.func.266, i64 11, i32 667, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !4798
  unreachable, !dbg !4798
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.print_hex_chars(ptr %0, ptr %1, ptr %2, i64 %3, i8 zeroext %4) #0 comdat !dbg !4803 {
entry:
  %f = alloca ptr, align 8
  %out = alloca %"char[]", align 8
  %uppercase = alloca i8, align 1
  %past_10 = alloca i8, align 1
  %len = alloca i64, align 8
  %.anon = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %digit = alloca i8, align 1
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %error_var15 = alloca i64, align 8
  %retparam26 = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %f, align 8
    #dbg_declare(ptr %f, !4806, !DIExpression(), !4807)
  store ptr %2, ptr %out, align 8
  %ptradd = getelementptr inbounds i8, ptr %out, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %out, !4808, !DIExpression(), !4809)
  store i8 %4, ptr %uppercase, align 1
    #dbg_declare(ptr %uppercase, !4810, !DIExpression(), !4811)
    #dbg_declare(ptr %past_10, !4812, !DIExpression(), !4813)
  %5 = load i8, ptr %uppercase, align 1, !dbg !4814
  %6 = trunc i8 %5 to i1, !dbg !4814
  %ternary = select i1 %6, i8 65, i8 97, !dbg !4815
  %zext = zext i8 %ternary to i32, !dbg !4815
  %sub = sub i32 %zext, 10, !dbg !4814
  %trunc = trunc i32 %sub to i8, !dbg !4814
  store i8 %trunc, ptr %past_10, align 1, !dbg !4814
    #dbg_declare(ptr %len, !4816, !DIExpression(), !4817)
  store i64 0, ptr %len, align 8, !dbg !4818
  %ptradd1 = getelementptr inbounds i8, ptr %out, i64 8, !dbg !4819
  %7 = load i64, ptr %ptradd1, align 8, !dbg !4819
    #dbg_declare(ptr %.anon, !4821, !DIExpression(), !4819)
  store i64 0, ptr %.anon, align 8, !dbg !4819
  br label %loop.cond, !dbg !4819

loop.cond:                                        ; preds = %noerr_block31, %entry
  %8 = load i64, ptr %.anon, align 8, !dbg !4819
  %lt = icmp ult i64 %8, %7, !dbg !4819
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !4819

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !4822, !DIExpression(), !4824)
  %ptradd2 = getelementptr inbounds i8, ptr %out, i64 8, !dbg !4825
  %9 = load i64, ptr %ptradd2, align 8, !dbg !4825
  %10 = load ptr, ptr %out, align 8, !dbg !4825
  %11 = load i64, ptr %.anon, align 8, !dbg !4825
  %ge = icmp uge i64 %11, %9, !dbg !4825
  %12 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !4825
  br i1 %12, label %panic, label %checkok, !dbg !4825

checkok:                                          ; preds = %loop.body
  %ptradd5 = getelementptr inbounds i8, ptr %10, i64 %11, !dbg !4825
  %13 = load i8, ptr %ptradd5, align 1, !dbg !4825
  store i8 %13, ptr %c, align 1, !dbg !4825
    #dbg_declare(ptr %digit, !4826, !DIExpression(), !4828)
  %14 = load i8, ptr %c, align 1, !dbg !4829
  %zext6 = zext i8 %14 to i32, !dbg !4829
  %lshr = lshr i32 %zext6, 4, !dbg !4829
  %15 = freeze i32 %lshr, !dbg !4829
  %trunc7 = trunc i32 %15 to i8, !dbg !4829
  store i8 %trunc7, ptr %digit, align 1, !dbg !4829
  %16 = load i8, ptr %digit, align 1, !dbg !4830
  %zext8 = zext i8 %16 to i32, !dbg !4830
  %17 = load i8, ptr %digit, align 1, !dbg !4831
  %zext9 = zext i8 %17 to i32, !dbg !4831
  %gt = icmp ugt i32 10, %zext9, !dbg !4831
  br i1 %gt, label %cond.lhs, label %cond.rhs, !dbg !4831

cond.lhs:                                         ; preds = %checkok
  br label %cond.phi, !dbg !4832

cond.rhs:                                         ; preds = %checkok
  %18 = load i8, ptr %past_10, align 1, !dbg !4833
  br label %cond.phi, !dbg !4833

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i8 [ 48, %cond.lhs ], [ %18, %cond.rhs ], !dbg !4833
  %zext10 = zext i8 %val to i32, !dbg !4833
  %add = add i32 %zext8, %zext10, !dbg !4830
  %trunc11 = trunc i32 %add to i8, !dbg !4830
  %19 = load ptr, ptr %f, align 8
  %20 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %19, i8 zeroext %trunc11), !dbg !4834
  %not_err = icmp eq i64 %20, 0, !dbg !4834
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4834
  br i1 %21, label %after_check, label %assign_optional, !dbg !4834

assign_optional:                                  ; preds = %cond.phi
  store i64 %20, ptr %error_var, align 8, !dbg !4834
  br label %guard_block, !dbg !4834

after_check:                                      ; preds = %cond.phi
  br label %noerr_block, !dbg !4834

guard_block:                                      ; preds = %assign_optional
  %22 = load i64, ptr %error_var, align 8, !dbg !4834
  ret i64 %22, !dbg !4834

noerr_block:                                      ; preds = %after_check
  %23 = load i64, ptr %len, align 8, !dbg !4835
  %add12 = add i64 %23, 1, !dbg !4835
  store i64 %add12, ptr %len, align 8, !dbg !4835
  %24 = load i8, ptr %c, align 1, !dbg !4836
  %zext13 = zext i8 %24 to i32, !dbg !4836
  %and = and i32 %zext13, 15, !dbg !4836
  %trunc14 = trunc i32 %and to i8, !dbg !4836
  store i8 %trunc14, ptr %digit, align 1, !dbg !4836
  %25 = load i8, ptr %digit, align 1, !dbg !4837
  %zext16 = zext i8 %25 to i32, !dbg !4837
  %26 = load i8, ptr %digit, align 1, !dbg !4838
  %zext17 = zext i8 %26 to i32, !dbg !4838
  %gt18 = icmp ugt i32 10, %zext17, !dbg !4838
  br i1 %gt18, label %cond.lhs19, label %cond.rhs20, !dbg !4838

cond.lhs19:                                       ; preds = %noerr_block
  br label %cond.phi21, !dbg !4839

cond.rhs20:                                       ; preds = %noerr_block
  %27 = load i8, ptr %past_10, align 1, !dbg !4840
  br label %cond.phi21, !dbg !4840

cond.phi21:                                       ; preds = %cond.rhs20, %cond.lhs19
  %val22 = phi i8 [ 48, %cond.lhs19 ], [ %27, %cond.rhs20 ], !dbg !4840
  %zext23 = zext i8 %val22 to i32, !dbg !4840
  %add24 = add i32 %zext16, %zext23, !dbg !4837
  %trunc25 = trunc i32 %add24 to i8, !dbg !4837
  %28 = load ptr, ptr %f, align 8
  %29 = call i64 @std.io.Formatter.out(ptr %retparam26, ptr %28, i8 zeroext %trunc25), !dbg !4841
  %not_err27 = icmp eq i64 %29, 0, !dbg !4841
  %30 = call i1 @llvm.expect.i1(i1 %not_err27, i1 true), !dbg !4841
  br i1 %30, label %after_check29, label %assign_optional28, !dbg !4841

assign_optional28:                                ; preds = %cond.phi21
  store i64 %29, ptr %error_var15, align 8, !dbg !4841
  br label %guard_block30, !dbg !4841

after_check29:                                    ; preds = %cond.phi21
  br label %noerr_block31, !dbg !4841

guard_block30:                                    ; preds = %assign_optional28
  %31 = load i64, ptr %error_var15, align 8, !dbg !4841
  ret i64 %31, !dbg !4841

noerr_block31:                                    ; preds = %after_check29
  %32 = load i64, ptr %len, align 8, !dbg !4842
  %add32 = add i64 %32, 1, !dbg !4842
  store i64 %add32, ptr %len, align 8, !dbg !4842
  %33 = load i64, ptr %.anon, align 8, !dbg !4819
  %addnuw = add nuw i64 %33, 1, !dbg !4819
  store i64 %addnuw, ptr %.anon, align 8, !dbg !4819
  br label %loop.cond, !dbg !4819

loop.exit:                                        ; preds = %loop.cond
  %34 = load i64, ptr %len, align 8, !dbg !4843
  store i64 %34, ptr %0, align 8, !dbg !4843
  ret i64 0, !dbg !4843

panic:                                            ; preds = %loop.body
  store i64 %9, ptr %taddr, align 8
  %35 = insertvalue %any undef, ptr %taddr, 0
  %36 = insertvalue %any %35, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %11, ptr %taddr3, align 8
  %37 = insertvalue %any undef, ptr %taddr3, 0
  %38 = insertvalue %any %37, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %36, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %38, ptr %ptradd4, align 16
  %39 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %39, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.59, i64 59, ptr @.file.215, i64 20, ptr @.func.216, i64 15, i32 16, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !4825
  unreachable, !dbg !4825
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.int_from_any(ptr %0, i64 %1, ptr %2, ptr %3) #0 !dbg !4844 {
entry:
  %arg = alloca %any, align 8
  %is_neg = alloca ptr, align 8
  %switch = alloca i8, align 1
  %reterr = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %reterr10 = alloca i64, align 8
  %self = alloca ptr, align 8
  %taddr15 = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %varargslots17 = alloca [2 x %any], align 16
  %indirectarg20 = alloca %"any[]", align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %retparam = alloca i128, align 16
  %taddr51 = alloca %any, align 8
  %switch57 = alloca i64, align 8
  %arg62 = alloca ptr, align 8
  %reterr63 = alloca i64, align 8
  %arg75 = alloca ptr, align 8
  %val = alloca i32, align 4
  %reterr79 = alloca i64, align 8
  %arg94 = alloca ptr, align 8
  %val95 = alloca i32, align 4
  %taddr100 = alloca i64, align 8
  %taddr101 = alloca i64, align 8
  %varargslots102 = alloca [2 x %any], align 16
  %indirectarg105 = alloca %"any[]", align 8
  %reterr108 = alloca i64, align 8
  %arg129 = alloca ptr, align 8
  %val130 = alloca i32, align 4
  %taddr135 = alloca i64, align 8
  %taddr136 = alloca i64, align 8
  %varargslots137 = alloca [2 x %any], align 16
  %indirectarg140 = alloca %"any[]", align 8
  %reterr142 = alloca i64, align 8
  %arg163 = alloca ptr, align 8
  %val164 = alloca i64, align 8
  %taddr169 = alloca i64, align 8
  %taddr170 = alloca i64, align 8
  %varargslots171 = alloca [2 x %any], align 16
  %indirectarg174 = alloca %"any[]", align 8
  %reterr176 = alloca i64, align 8
  %arg197 = alloca ptr, align 8
  %val198 = alloca i128, align 16
  %taddr203 = alloca i64, align 8
  %taddr204 = alloca i64, align 8
  %varargslots205 = alloca [2 x %any], align 16
  %indirectarg208 = alloca %"any[]", align 8
  %reterr210 = alloca i64, align 8
  %arg229 = alloca ptr, align 8
  %reterr230 = alloca i64, align 8
  %arg243 = alloca ptr, align 8
  %reterr244 = alloca i64, align 8
  %taddr249 = alloca i64, align 8
  %taddr250 = alloca i64, align 8
  %varargslots251 = alloca [2 x %any], align 16
  %indirectarg254 = alloca %"any[]", align 8
  %arg265 = alloca ptr, align 8
  %reterr266 = alloca i64, align 8
  %taddr271 = alloca i64, align 8
  %taddr272 = alloca i64, align 8
  %varargslots273 = alloca [2 x %any], align 16
  %indirectarg276 = alloca %"any[]", align 8
  %arg287 = alloca ptr, align 8
  %reterr288 = alloca i64, align 8
  %taddr293 = alloca i64, align 8
  %taddr294 = alloca i64, align 8
  %varargslots295 = alloca [2 x %any], align 16
  %indirectarg298 = alloca %"any[]", align 8
  %arg309 = alloca ptr, align 8
  %reterr310 = alloca i64, align 8
  %taddr315 = alloca i64, align 8
  %taddr316 = alloca i64, align 8
  %varargslots317 = alloca [2 x %any], align 16
  %indirectarg320 = alloca %"any[]", align 8
  %arg330 = alloca ptr, align 8
  %f = alloca float, align 4
  %taddr335 = alloca i64, align 8
  %taddr336 = alloca i64, align 8
  %varargslots337 = alloca [2 x %any], align 16
  %indirectarg340 = alloca %"any[]", align 8
  %reterr342 = alloca i64, align 8
  %arg359 = alloca ptr, align 8
  %d = alloca double, align 8
  %taddr364 = alloca i64, align 8
  %taddr365 = alloca i64, align 8
  %varargslots366 = alloca [2 x %any], align 16
  %indirectarg369 = alloca %"any[]", align 8
  %reterr371 = alloca i64, align 8
  store i64 %1, ptr %arg, align 8
  %ptradd = getelementptr inbounds i8, ptr %arg, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %arg, !4849, !DIExpression(), !4850)
  store ptr %3, ptr %is_neg, align 8
    #dbg_declare(ptr %is_neg, !4851, !DIExpression(), !4852)
  %ptradd1 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4853
  %4 = load i64, ptr %ptradd1, align 8, !dbg !4853
  %"introspect*" = inttoptr i64 %4 to ptr, !dbg !4853
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !4853
  store i8 %typeid.kind, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %entry
  %5 = load i8, ptr %switch, align 1
  switch i8 %5, label %switch.default [
    i8 19, label %switch.case
    i8 18, label %switch.case9
    i8 8, label %switch.case9
  ]

switch.case:                                      ; preds = %switch.entry
  %6 = load ptr, ptr %is_neg, align 8, !dbg !4855
  %checknull = icmp eq ptr %6, null, !dbg !4855
  %7 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !4855
  br i1 %7, label %panic, label %checkok, !dbg !4855

checkok:                                          ; preds = %switch.case
  store i8 0, ptr %6, align 1, !dbg !4857
  %8 = load ptr, ptr %arg, align 8, !dbg !4858
  %checknull2 = icmp eq ptr %8, null, !dbg !4858
  %9 = call i1 @llvm.expect.i1(i1 %checknull2, i1 false), !dbg !4858
  br i1 %9, label %panic3, label %checkok4, !dbg !4858

checkok4:                                         ; preds = %checkok
  %10 = ptrtoint ptr %8 to i64, !dbg !4859
  %11 = urem i64 %10, 8, !dbg !4859
  %12 = icmp ne i64 %11, 0, !dbg !4859
  %13 = call i1 @llvm.expect.i1(i1 %12, i1 false), !dbg !4859
  br i1 %13, label %panic5, label %checkok8, !dbg !4859

checkok8:                                         ; preds = %checkok4
  %14 = load ptr, ptr %8, align 8, !dbg !4859
  %ptrxi = ptrtoint ptr %14 to i64, !dbg !4859
  %zext = zext i64 %ptrxi to i128, !dbg !4859
  store i128 %zext, ptr %0, align 16, !dbg !4859
  ret i64 0, !dbg !4859

switch.case9:                                     ; preds = %switch.entry, %switch.entry
  store ptr %arg, ptr %self, align 8
  %15 = load ptr, ptr %self, align 8, !dbg !4860
  %checknull11 = icmp eq ptr %15, null, !dbg !4860
  %16 = call i1 @llvm.expect.i1(i1 %checknull11, i1 false), !dbg !4860
  br i1 %16, label %panic12, label %checkok13, !dbg !4860

checkok13:                                        ; preds = %switch.case9
  %17 = ptrtoint ptr %15 to i64, !dbg !4860
  %18 = urem i64 %17, 8, !dbg !4860
  %19 = icmp ne i64 %18, 0, !dbg !4860
  %20 = call i1 @llvm.expect.i1(i1 %19, i1 false), !dbg !4860
  br i1 %20, label %panic14, label %checkok21, !dbg !4860

checkok21:                                        ; preds = %checkok13
  %21 = load ptr, ptr %15, align 8, !dbg !4860
  %22 = load ptr, ptr %self, align 8, !dbg !4864
  %checknull22 = icmp eq ptr %22, null, !dbg !4864
  %23 = call i1 @llvm.expect.i1(i1 %checknull22, i1 false), !dbg !4864
  br i1 %23, label %panic23, label %checkok24, !dbg !4864

checkok24:                                        ; preds = %checkok21
  %24 = ptrtoint ptr %22 to i64, !dbg !4864
  %25 = urem i64 %24, 8, !dbg !4864
  %26 = icmp ne i64 %25, 0, !dbg !4864
  %27 = call i1 @llvm.expect.i1(i1 %26, i1 false), !dbg !4864
  br i1 %27, label %panic25, label %checkok32, !dbg !4864

checkok32:                                        ; preds = %checkok24
  %ptradd33 = getelementptr inbounds i8, ptr %22, i64 8, !dbg !4864
  %28 = load i64, ptr %ptradd33, align 8, !dbg !4864
  %"introspect*34" = inttoptr i64 %28 to ptr, !dbg !4864
  %typeid.kind35 = load i8, ptr %"introspect*34", align 8, !dbg !4864
  %eq = icmp eq i8 %typeid.kind35, 15, !dbg !4864
  br i1 %eq, label %check_type_ok, label %check_next, !dbg !4864

check_next:                                       ; preds = %checkok32
  %eq36 = icmp eq i8 %typeid.kind35, 19, !dbg !4864
  br i1 %eq36, label %check_type_ok, label %check_next37, !dbg !4864

check_next37:                                     ; preds = %check_next
  %eq38 = icmp eq i8 %typeid.kind35, 17, !dbg !4864
  br i1 %eq38, label %check_type_ok, label %check_next39, !dbg !4864

check_next39:                                     ; preds = %check_next37
  %eq40 = icmp eq i8 %typeid.kind35, 8, !dbg !4864
  br i1 %eq40, label %check_type_ok, label %check_next41, !dbg !4864

check_next41:                                     ; preds = %check_next39
  %eq42 = icmp eq i8 %typeid.kind35, 16, !dbg !4864
  br i1 %eq42, label %check_type_ok, label %check_next43, !dbg !4864

check_next43:                                     ; preds = %check_next41
  %eq44 = icmp eq i8 %typeid.kind35, 18, !dbg !4864
  br i1 %eq44, label %check_type_ok, label %check_next45, !dbg !4864

check_next45:                                     ; preds = %check_next43
  %eq46 = icmp eq i8 %typeid.kind35, 14, !dbg !4864
  br i1 %eq46, label %check_type_ok, label %check_next47, !dbg !4864

check_next47:                                     ; preds = %check_next45
  %eq48 = icmp eq i8 %typeid.kind35, 12, !dbg !4864
  br i1 %eq48, label %check_type_ok, label %check_next49, !dbg !4864

check_next49:                                     ; preds = %check_next47
  %29 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4864
  call void %29(ptr @.panic_msg.144, i64 49, ptr @.file.50, i64 10, ptr @.func.218, i64 12, i32 199) #5, !dbg !4864
  unreachable, !dbg !4864

check_type_ok:                                    ; preds = %check_next47, %check_next45, %check_next43, %check_next41, %check_next39, %check_next37, %check_next, %checkok32
  %ptradd50 = getelementptr inbounds i8, ptr %"introspect*34", i64 32, !dbg !4864
  %typeid.inner = load i64, ptr %ptradd50, align 8, !dbg !4864
  %30 = insertvalue %any undef, ptr %21, 0, !dbg !4864
  %31 = insertvalue %any %30, i64 %typeid.inner, 1, !dbg !4864
  store %any %31, ptr %taddr51, align 8
  %lo = load i64, ptr %taddr51, align 8
  %ptradd52 = getelementptr inbounds i8, ptr %taddr51, i64 8
  %hi = load ptr, ptr %ptradd52, align 8
  %32 = load ptr, ptr %is_neg, align 8
  %33 = call i64 @std.io.int_from_any(ptr %retparam, i64 %lo, ptr %hi, ptr %32), !dbg !4865
  %not_err = icmp eq i64 %33, 0, !dbg !4865
  %34 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4865
  br i1 %34, label %after_check, label %assign_optional, !dbg !4865

assign_optional:                                  ; preds = %check_type_ok
  store i64 %33, ptr %reterr10, align 8, !dbg !4865
  br label %err_retblock, !dbg !4865

after_check:                                      ; preds = %check_type_ok
  %35 = load i128, ptr %retparam, align 16, !dbg !4865
  store i128 %35, ptr %0, align 16, !dbg !4865
  ret i64 0, !dbg !4865

err_retblock:                                     ; preds = %assign_optional
  %36 = load i64, ptr %reterr10, align 8, !dbg !4865
  ret i64 %36, !dbg !4865

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !4866

switch.exit:                                      ; preds = %switch.default
  %37 = load ptr, ptr %is_neg, align 8, !dbg !4868
  %checknull53 = icmp eq ptr %37, null, !dbg !4868
  %38 = call i1 @llvm.expect.i1(i1 %checknull53, i1 false), !dbg !4868
  br i1 %38, label %panic54, label %checkok55, !dbg !4868

checkok55:                                        ; preds = %switch.exit
  store i8 0, ptr %37, align 1, !dbg !4869
  %ptradd56 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4870
  %39 = load i64, ptr %ptradd56, align 8
  store i64 %39, ptr %switch57, align 8
  br label %switch.entry58

switch.entry58:                                   ; preds = %checkok55
  %40 = load i64, ptr %switch57, align 8
  br label %check_subtype, !dbg !4872

check_subtype:                                    ; preds = %parent_type_block, %switch.entry58
  %41 = phi i64 [ %40, %switch.entry58 ], [ %typeid.parent, %parent_type_block ], !dbg !4872
  %eq59 = icmp eq i64 ptrtoint (ptr @"$ct.bool" to i64), %41, !dbg !4872
  br i1 %eq59, label %result_block, label %parent_type_block, !dbg !4872

parent_type_block:                                ; preds = %check_subtype
  %42 = inttoptr i64 %41 to ptr, !dbg !4872
  %ptradd60 = getelementptr inbounds i8, ptr %42, i64 8, !dbg !4872
  %typeid.parent = load i64, ptr %ptradd60, align 8, !dbg !4872
  %43 = icmp eq i64 %typeid.parent, 0, !dbg !4872
  br i1 %43, label %result_block, label %check_subtype, !dbg !4872

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %44 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !4872
  br i1 %44, label %switch.case61, label %next_if, !dbg !4872

switch.case61:                                    ; preds = %result_block
    #dbg_declare(ptr %arg62, !4873, !DIExpression(), !4875)
  %45 = load ptr, ptr %arg, align 8, !dbg !4875
  store ptr %45, ptr %arg62, align 8, !dbg !4875
  %46 = load ptr, ptr %arg62, align 8, !dbg !4876
  %checknull64 = icmp eq ptr %46, null, !dbg !4876
  %47 = call i1 @llvm.expect.i1(i1 %checknull64, i1 false), !dbg !4876
  br i1 %47, label %panic65, label %checkok66, !dbg !4876

checkok66:                                        ; preds = %switch.case61
  %48 = load i8, ptr %46, align 1, !dbg !4876
  %49 = trunc i8 %48 to i1, !dbg !4876
  %zext67 = zext i1 %49 to i128, !dbg !4876
  store i128 %zext67, ptr %0, align 16, !dbg !4876
  ret i64 0, !dbg !4876

next_if:                                          ; preds = %result_block
  br label %check_subtype68, !dbg !4877

check_subtype68:                                  ; preds = %parent_type_block70, %next_if
  %50 = phi i64 [ %40, %next_if ], [ %typeid.parent72, %parent_type_block70 ], !dbg !4877
  %eq69 = icmp eq i64 ptrtoint (ptr @"$ct.ichar" to i64), %50, !dbg !4877
  br i1 %eq69, label %result_block73, label %parent_type_block70, !dbg !4877

parent_type_block70:                              ; preds = %check_subtype68
  %51 = inttoptr i64 %50 to ptr, !dbg !4877
  %ptradd71 = getelementptr inbounds i8, ptr %51, i64 8, !dbg !4877
  %typeid.parent72 = load i64, ptr %ptradd71, align 8, !dbg !4877
  %52 = icmp eq i64 %typeid.parent72, 0, !dbg !4877
  br i1 %52, label %result_block73, label %check_subtype68, !dbg !4877

result_block73:                                   ; preds = %parent_type_block70, %check_subtype68
  %53 = phi i1 [ false, %parent_type_block70 ], [ true, %check_subtype68 ], !dbg !4877
  br i1 %53, label %switch.case74, label %next_if86, !dbg !4877

switch.case74:                                    ; preds = %result_block73
    #dbg_declare(ptr %arg75, !4878, !DIExpression(), !4880)
  %54 = load ptr, ptr %arg, align 8, !dbg !4880
  store ptr %54, ptr %arg75, align 8, !dbg !4880
    #dbg_declare(ptr %val, !4881, !DIExpression(), !4882)
  %55 = load ptr, ptr %arg75, align 8, !dbg !4883
  %checknull76 = icmp eq ptr %55, null, !dbg !4883
  %56 = call i1 @llvm.expect.i1(i1 %checknull76, i1 false), !dbg !4883
  br i1 %56, label %panic77, label %checkok78, !dbg !4883

checkok78:                                        ; preds = %switch.case74
  %57 = load i8, ptr %55, align 1, !dbg !4883
  %sext = sext i8 %57 to i32, !dbg !4883
  store i32 %sext, ptr %val, align 4, !dbg !4883
  %58 = load ptr, ptr %is_neg, align 8, !dbg !4884
  %checknull80 = icmp eq ptr %58, null, !dbg !4884
  %59 = call i1 @llvm.expect.i1(i1 %checknull80, i1 false), !dbg !4884
  br i1 %59, label %panic81, label %checkok82, !dbg !4884

checkok82:                                        ; preds = %checkok78
  %60 = load i32, ptr %val, align 4, !dbg !4885
  %lt = icmp slt i32 %60, 0, !dbg !4885
  %61 = zext i1 %lt to i8, !dbg !4885
  store i8 %61, ptr %58, align 1, !dbg !4885
  %62 = trunc i8 %61 to i1, !dbg !4885
  br i1 %62, label %cond.lhs, label %cond.rhs, !dbg !4885

cond.lhs:                                         ; preds = %checkok82
  %63 = load i32, ptr %val, align 4, !dbg !4886
  %sext83 = sext i32 %63 to i128, !dbg !4886
  %bnot = xor i128 %sext83, -1, !dbg !4886
  %add = add i128 %bnot, 1, !dbg !4887
  br label %cond.phi, !dbg !4887

cond.rhs:                                         ; preds = %checkok82
  %64 = load i32, ptr %val, align 4, !dbg !4888
  %sext84 = sext i32 %64 to i128, !dbg !4888
  br label %cond.phi, !dbg !4888

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val85 = phi i128 [ %add, %cond.lhs ], [ %sext84, %cond.rhs ], !dbg !4888
  store i128 %val85, ptr %0, align 16, !dbg !4888
  ret i64 0, !dbg !4888

next_if86:                                        ; preds = %result_block73
  br label %check_subtype87, !dbg !4889

check_subtype87:                                  ; preds = %parent_type_block89, %next_if86
  %65 = phi i64 [ %40, %next_if86 ], [ %typeid.parent91, %parent_type_block89 ], !dbg !4889
  %eq88 = icmp eq i64 ptrtoint (ptr @"$ct.short" to i64), %65, !dbg !4889
  br i1 %eq88, label %result_block92, label %parent_type_block89, !dbg !4889

parent_type_block89:                              ; preds = %check_subtype87
  %66 = inttoptr i64 %65 to ptr, !dbg !4889
  %ptradd90 = getelementptr inbounds i8, ptr %66, i64 8, !dbg !4889
  %typeid.parent91 = load i64, ptr %ptradd90, align 8, !dbg !4889
  %67 = icmp eq i64 %typeid.parent91, 0, !dbg !4889
  br i1 %67, label %result_block92, label %check_subtype87, !dbg !4889

result_block92:                                   ; preds = %parent_type_block89, %check_subtype87
  %68 = phi i1 [ false, %parent_type_block89 ], [ true, %check_subtype87 ], !dbg !4889
  br i1 %68, label %switch.case93, label %next_if121, !dbg !4889

switch.case93:                                    ; preds = %result_block92
    #dbg_declare(ptr %arg94, !4890, !DIExpression(), !4893)
  %69 = load ptr, ptr %arg, align 8, !dbg !4893
  store ptr %69, ptr %arg94, align 8, !dbg !4893
    #dbg_declare(ptr %val95, !4894, !DIExpression(), !4895)
  %70 = load ptr, ptr %arg94, align 8, !dbg !4896
  %checknull96 = icmp eq ptr %70, null, !dbg !4896
  %71 = call i1 @llvm.expect.i1(i1 %checknull96, i1 false), !dbg !4896
  br i1 %71, label %panic97, label %checkok98, !dbg !4896

checkok98:                                        ; preds = %switch.case93
  %72 = ptrtoint ptr %70 to i64, !dbg !4896
  %73 = urem i64 %72, 2, !dbg !4896
  %74 = icmp ne i64 %73, 0, !dbg !4896
  %75 = call i1 @llvm.expect.i1(i1 %74, i1 false), !dbg !4896
  br i1 %75, label %panic99, label %checkok106, !dbg !4896

checkok106:                                       ; preds = %checkok98
  %76 = load i16, ptr %70, align 2, !dbg !4896
  %sext107 = sext i16 %76 to i32, !dbg !4896
  store i32 %sext107, ptr %val95, align 4, !dbg !4896
  %77 = load ptr, ptr %is_neg, align 8, !dbg !4897
  %checknull109 = icmp eq ptr %77, null, !dbg !4897
  %78 = call i1 @llvm.expect.i1(i1 %checknull109, i1 false), !dbg !4897
  br i1 %78, label %panic110, label %checkok111, !dbg !4897

checkok111:                                       ; preds = %checkok106
  %79 = load i32, ptr %val95, align 4, !dbg !4898
  %lt112 = icmp slt i32 %79, 0, !dbg !4898
  %80 = zext i1 %lt112 to i8, !dbg !4898
  store i8 %80, ptr %77, align 1, !dbg !4898
  %81 = trunc i8 %80 to i1, !dbg !4898
  br i1 %81, label %cond.lhs113, label %cond.rhs117, !dbg !4898

cond.lhs113:                                      ; preds = %checkok111
  %82 = load i32, ptr %val95, align 4, !dbg !4899
  %sext114 = sext i32 %82 to i128, !dbg !4899
  %bnot115 = xor i128 %sext114, -1, !dbg !4899
  %add116 = add i128 %bnot115, 1, !dbg !4900
  br label %cond.phi119, !dbg !4900

cond.rhs117:                                      ; preds = %checkok111
  %83 = load i32, ptr %val95, align 4, !dbg !4901
  %sext118 = sext i32 %83 to i128, !dbg !4901
  br label %cond.phi119, !dbg !4901

cond.phi119:                                      ; preds = %cond.rhs117, %cond.lhs113
  %val120 = phi i128 [ %add116, %cond.lhs113 ], [ %sext118, %cond.rhs117 ], !dbg !4901
  store i128 %val120, ptr %0, align 16, !dbg !4901
  ret i64 0, !dbg !4901

next_if121:                                       ; preds = %result_block92
  br label %check_subtype122, !dbg !4902

check_subtype122:                                 ; preds = %parent_type_block124, %next_if121
  %84 = phi i64 [ %40, %next_if121 ], [ %typeid.parent126, %parent_type_block124 ], !dbg !4902
  %eq123 = icmp eq i64 ptrtoint (ptr @"$ct.int" to i64), %84, !dbg !4902
  br i1 %eq123, label %result_block127, label %parent_type_block124, !dbg !4902

parent_type_block124:                             ; preds = %check_subtype122
  %85 = inttoptr i64 %84 to ptr, !dbg !4902
  %ptradd125 = getelementptr inbounds i8, ptr %85, i64 8, !dbg !4902
  %typeid.parent126 = load i64, ptr %ptradd125, align 8, !dbg !4902
  %86 = icmp eq i64 %typeid.parent126, 0, !dbg !4902
  br i1 %86, label %result_block127, label %check_subtype122, !dbg !4902

result_block127:                                  ; preds = %parent_type_block124, %check_subtype122
  %87 = phi i1 [ false, %parent_type_block124 ], [ true, %check_subtype122 ], !dbg !4902
  br i1 %87, label %switch.case128, label %next_if155, !dbg !4902

switch.case128:                                   ; preds = %result_block127
    #dbg_declare(ptr %arg129, !4903, !DIExpression(), !4906)
  %88 = load ptr, ptr %arg, align 8, !dbg !4906
  store ptr %88, ptr %arg129, align 8, !dbg !4906
    #dbg_declare(ptr %val130, !4907, !DIExpression(), !4908)
  %89 = load ptr, ptr %arg129, align 8, !dbg !4909
  %checknull131 = icmp eq ptr %89, null, !dbg !4909
  %90 = call i1 @llvm.expect.i1(i1 %checknull131, i1 false), !dbg !4909
  br i1 %90, label %panic132, label %checkok133, !dbg !4909

checkok133:                                       ; preds = %switch.case128
  %91 = ptrtoint ptr %89 to i64, !dbg !4909
  %92 = urem i64 %91, 4, !dbg !4909
  %93 = icmp ne i64 %92, 0, !dbg !4909
  %94 = call i1 @llvm.expect.i1(i1 %93, i1 false), !dbg !4909
  br i1 %94, label %panic134, label %checkok141, !dbg !4909

checkok141:                                       ; preds = %checkok133
  %95 = load i32, ptr %89, align 4, !dbg !4909
  store i32 %95, ptr %val130, align 4, !dbg !4909
  %96 = load ptr, ptr %is_neg, align 8, !dbg !4910
  %checknull143 = icmp eq ptr %96, null, !dbg !4910
  %97 = call i1 @llvm.expect.i1(i1 %checknull143, i1 false), !dbg !4910
  br i1 %97, label %panic144, label %checkok145, !dbg !4910

checkok145:                                       ; preds = %checkok141
  %98 = load i32, ptr %val130, align 4, !dbg !4911
  %lt146 = icmp slt i32 %98, 0, !dbg !4911
  %99 = zext i1 %lt146 to i8, !dbg !4911
  store i8 %99, ptr %96, align 1, !dbg !4911
  %100 = trunc i8 %99 to i1, !dbg !4911
  br i1 %100, label %cond.lhs147, label %cond.rhs151, !dbg !4911

cond.lhs147:                                      ; preds = %checkok145
  %101 = load i32, ptr %val130, align 4, !dbg !4912
  %sext148 = sext i32 %101 to i128, !dbg !4912
  %bnot149 = xor i128 %sext148, -1, !dbg !4912
  %add150 = add i128 %bnot149, 1, !dbg !4913
  br label %cond.phi153, !dbg !4913

cond.rhs151:                                      ; preds = %checkok145
  %102 = load i32, ptr %val130, align 4, !dbg !4914
  %sext152 = sext i32 %102 to i128, !dbg !4914
  br label %cond.phi153, !dbg !4914

cond.phi153:                                      ; preds = %cond.rhs151, %cond.lhs147
  %val154 = phi i128 [ %add150, %cond.lhs147 ], [ %sext152, %cond.rhs151 ], !dbg !4914
  store i128 %val154, ptr %0, align 16, !dbg !4914
  ret i64 0, !dbg !4914

next_if155:                                       ; preds = %result_block127
  br label %check_subtype156, !dbg !4915

check_subtype156:                                 ; preds = %parent_type_block158, %next_if155
  %103 = phi i64 [ %40, %next_if155 ], [ %typeid.parent160, %parent_type_block158 ], !dbg !4915
  %eq157 = icmp eq i64 ptrtoint (ptr @"$ct.long" to i64), %103, !dbg !4915
  br i1 %eq157, label %result_block161, label %parent_type_block158, !dbg !4915

parent_type_block158:                             ; preds = %check_subtype156
  %104 = inttoptr i64 %103 to ptr, !dbg !4915
  %ptradd159 = getelementptr inbounds i8, ptr %104, i64 8, !dbg !4915
  %typeid.parent160 = load i64, ptr %ptradd159, align 8, !dbg !4915
  %105 = icmp eq i64 %typeid.parent160, 0, !dbg !4915
  br i1 %105, label %result_block161, label %check_subtype156, !dbg !4915

result_block161:                                  ; preds = %parent_type_block158, %check_subtype156
  %106 = phi i1 [ false, %parent_type_block158 ], [ true, %check_subtype156 ], !dbg !4915
  br i1 %106, label %switch.case162, label %next_if189, !dbg !4915

switch.case162:                                   ; preds = %result_block161
    #dbg_declare(ptr %arg163, !4916, !DIExpression(), !4919)
  %107 = load ptr, ptr %arg, align 8, !dbg !4919
  store ptr %107, ptr %arg163, align 8, !dbg !4919
    #dbg_declare(ptr %val164, !4920, !DIExpression(), !4921)
  %108 = load ptr, ptr %arg163, align 8, !dbg !4922
  %checknull165 = icmp eq ptr %108, null, !dbg !4922
  %109 = call i1 @llvm.expect.i1(i1 %checknull165, i1 false), !dbg !4922
  br i1 %109, label %panic166, label %checkok167, !dbg !4922

checkok167:                                       ; preds = %switch.case162
  %110 = ptrtoint ptr %108 to i64, !dbg !4922
  %111 = urem i64 %110, 8, !dbg !4922
  %112 = icmp ne i64 %111, 0, !dbg !4922
  %113 = call i1 @llvm.expect.i1(i1 %112, i1 false), !dbg !4922
  br i1 %113, label %panic168, label %checkok175, !dbg !4922

checkok175:                                       ; preds = %checkok167
  %114 = load i64, ptr %108, align 8, !dbg !4922
  store i64 %114, ptr %val164, align 8, !dbg !4922
  %115 = load ptr, ptr %is_neg, align 8, !dbg !4923
  %checknull177 = icmp eq ptr %115, null, !dbg !4923
  %116 = call i1 @llvm.expect.i1(i1 %checknull177, i1 false), !dbg !4923
  br i1 %116, label %panic178, label %checkok179, !dbg !4923

checkok179:                                       ; preds = %checkok175
  %117 = load i64, ptr %val164, align 8, !dbg !4924
  %lt180 = icmp slt i64 %117, 0, !dbg !4924
  %118 = zext i1 %lt180 to i8, !dbg !4924
  store i8 %118, ptr %115, align 1, !dbg !4924
  %119 = trunc i8 %118 to i1, !dbg !4924
  br i1 %119, label %cond.lhs181, label %cond.rhs185, !dbg !4924

cond.lhs181:                                      ; preds = %checkok179
  %120 = load i64, ptr %val164, align 8, !dbg !4925
  %sext182 = sext i64 %120 to i128, !dbg !4925
  %bnot183 = xor i128 %sext182, -1, !dbg !4925
  %add184 = add i128 %bnot183, 1, !dbg !4926
  br label %cond.phi187, !dbg !4926

cond.rhs185:                                      ; preds = %checkok179
  %121 = load i64, ptr %val164, align 8, !dbg !4927
  %sext186 = sext i64 %121 to i128, !dbg !4927
  br label %cond.phi187, !dbg !4927

cond.phi187:                                      ; preds = %cond.rhs185, %cond.lhs181
  %val188 = phi i128 [ %add184, %cond.lhs181 ], [ %sext186, %cond.rhs185 ], !dbg !4927
  store i128 %val188, ptr %0, align 16, !dbg !4927
  ret i64 0, !dbg !4927

next_if189:                                       ; preds = %result_block161
  br label %check_subtype190, !dbg !4928

check_subtype190:                                 ; preds = %parent_type_block192, %next_if189
  %122 = phi i64 [ %40, %next_if189 ], [ %typeid.parent194, %parent_type_block192 ], !dbg !4928
  %eq191 = icmp eq i64 ptrtoint (ptr @"$ct.int128" to i64), %122, !dbg !4928
  br i1 %eq191, label %result_block195, label %parent_type_block192, !dbg !4928

parent_type_block192:                             ; preds = %check_subtype190
  %123 = inttoptr i64 %122 to ptr, !dbg !4928
  %ptradd193 = getelementptr inbounds i8, ptr %123, i64 8, !dbg !4928
  %typeid.parent194 = load i64, ptr %ptradd193, align 8, !dbg !4928
  %124 = icmp eq i64 %typeid.parent194, 0, !dbg !4928
  br i1 %124, label %result_block195, label %check_subtype190, !dbg !4928

result_block195:                                  ; preds = %parent_type_block192, %check_subtype190
  %125 = phi i1 [ false, %parent_type_block192 ], [ true, %check_subtype190 ], !dbg !4928
  br i1 %125, label %switch.case196, label %next_if221, !dbg !4928

switch.case196:                                   ; preds = %result_block195
    #dbg_declare(ptr %arg197, !4929, !DIExpression(), !4932)
  %126 = load ptr, ptr %arg, align 8, !dbg !4932
  store ptr %126, ptr %arg197, align 8, !dbg !4932
    #dbg_declare(ptr %val198, !4933, !DIExpression(), !4934)
  %127 = load ptr, ptr %arg197, align 8, !dbg !4935
  %checknull199 = icmp eq ptr %127, null, !dbg !4935
  %128 = call i1 @llvm.expect.i1(i1 %checknull199, i1 false), !dbg !4935
  br i1 %128, label %panic200, label %checkok201, !dbg !4935

checkok201:                                       ; preds = %switch.case196
  %129 = ptrtoint ptr %127 to i64, !dbg !4935
  %130 = urem i64 %129, 16, !dbg !4935
  %131 = icmp ne i64 %130, 0, !dbg !4935
  %132 = call i1 @llvm.expect.i1(i1 %131, i1 false), !dbg !4935
  br i1 %132, label %panic202, label %checkok209, !dbg !4935

checkok209:                                       ; preds = %checkok201
  %133 = load i128, ptr %127, align 16, !dbg !4935
  store i128 %133, ptr %val198, align 16, !dbg !4935
  %134 = load ptr, ptr %is_neg, align 8, !dbg !4936
  %checknull211 = icmp eq ptr %134, null, !dbg !4936
  %135 = call i1 @llvm.expect.i1(i1 %checknull211, i1 false), !dbg !4936
  br i1 %135, label %panic212, label %checkok213, !dbg !4936

checkok213:                                       ; preds = %checkok209
  %136 = load i128, ptr %val198, align 16, !dbg !4937
  %lt214 = icmp slt i128 %136, 0, !dbg !4937
  %137 = zext i1 %lt214 to i8, !dbg !4937
  store i8 %137, ptr %134, align 1, !dbg !4937
  %138 = trunc i8 %137 to i1, !dbg !4937
  br i1 %138, label %cond.lhs215, label %cond.rhs218, !dbg !4937

cond.lhs215:                                      ; preds = %checkok213
  %139 = load i128, ptr %val198, align 16, !dbg !4938
  %bnot216 = xor i128 %139, -1, !dbg !4938
  %add217 = add i128 %bnot216, 1, !dbg !4939
  br label %cond.phi219, !dbg !4939

cond.rhs218:                                      ; preds = %checkok213
  %140 = load i128, ptr %val198, align 16, !dbg !4940
  br label %cond.phi219, !dbg !4940

cond.phi219:                                      ; preds = %cond.rhs218, %cond.lhs215
  %val220 = phi i128 [ %add217, %cond.lhs215 ], [ %140, %cond.rhs218 ], !dbg !4940
  store i128 %val220, ptr %0, align 16, !dbg !4940
  ret i64 0, !dbg !4940

next_if221:                                       ; preds = %result_block195
  br label %check_subtype222, !dbg !4941

check_subtype222:                                 ; preds = %parent_type_block224, %next_if221
  %141 = phi i64 [ %40, %next_if221 ], [ %typeid.parent226, %parent_type_block224 ], !dbg !4941
  %eq223 = icmp eq i64 ptrtoint (ptr @"$ct.char" to i64), %141, !dbg !4941
  br i1 %eq223, label %result_block227, label %parent_type_block224, !dbg !4941

parent_type_block224:                             ; preds = %check_subtype222
  %142 = inttoptr i64 %141 to ptr, !dbg !4941
  %ptradd225 = getelementptr inbounds i8, ptr %142, i64 8, !dbg !4941
  %typeid.parent226 = load i64, ptr %ptradd225, align 8, !dbg !4941
  %143 = icmp eq i64 %typeid.parent226, 0, !dbg !4941
  br i1 %143, label %result_block227, label %check_subtype222, !dbg !4941

result_block227:                                  ; preds = %parent_type_block224, %check_subtype222
  %144 = phi i1 [ false, %parent_type_block224 ], [ true, %check_subtype222 ], !dbg !4941
  br i1 %144, label %switch.case228, label %next_if235, !dbg !4941

switch.case228:                                   ; preds = %result_block227
    #dbg_declare(ptr %arg229, !4942, !DIExpression(), !4944)
  %145 = load ptr, ptr %arg, align 8, !dbg !4944
  store ptr %145, ptr %arg229, align 8, !dbg !4944
  %146 = load ptr, ptr %arg229, align 8, !dbg !4945
  %checknull231 = icmp eq ptr %146, null, !dbg !4945
  %147 = call i1 @llvm.expect.i1(i1 %checknull231, i1 false), !dbg !4945
  br i1 %147, label %panic232, label %checkok233, !dbg !4945

checkok233:                                       ; preds = %switch.case228
  %148 = load i8, ptr %146, align 1, !dbg !4945
  %zext234 = zext i8 %148 to i128, !dbg !4945
  store i128 %zext234, ptr %0, align 16, !dbg !4945
  ret i64 0, !dbg !4945

next_if235:                                       ; preds = %result_block227
  br label %check_subtype236, !dbg !4946

check_subtype236:                                 ; preds = %parent_type_block238, %next_if235
  %149 = phi i64 [ %40, %next_if235 ], [ %typeid.parent240, %parent_type_block238 ], !dbg !4946
  %eq237 = icmp eq i64 ptrtoint (ptr @"$ct.ushort" to i64), %149, !dbg !4946
  br i1 %eq237, label %result_block241, label %parent_type_block238, !dbg !4946

parent_type_block238:                             ; preds = %check_subtype236
  %150 = inttoptr i64 %149 to ptr, !dbg !4946
  %ptradd239 = getelementptr inbounds i8, ptr %150, i64 8, !dbg !4946
  %typeid.parent240 = load i64, ptr %ptradd239, align 8, !dbg !4946
  %151 = icmp eq i64 %typeid.parent240, 0, !dbg !4946
  br i1 %151, label %result_block241, label %check_subtype236, !dbg !4946

result_block241:                                  ; preds = %parent_type_block238, %check_subtype236
  %152 = phi i1 [ false, %parent_type_block238 ], [ true, %check_subtype236 ], !dbg !4946
  br i1 %152, label %switch.case242, label %next_if257, !dbg !4946

switch.case242:                                   ; preds = %result_block241
    #dbg_declare(ptr %arg243, !4947, !DIExpression(), !4950)
  %153 = load ptr, ptr %arg, align 8, !dbg !4950
  store ptr %153, ptr %arg243, align 8, !dbg !4950
  %154 = load ptr, ptr %arg243, align 8, !dbg !4951
  %checknull245 = icmp eq ptr %154, null, !dbg !4951
  %155 = call i1 @llvm.expect.i1(i1 %checknull245, i1 false), !dbg !4951
  br i1 %155, label %panic246, label %checkok247, !dbg !4951

checkok247:                                       ; preds = %switch.case242
  %156 = ptrtoint ptr %154 to i64, !dbg !4951
  %157 = urem i64 %156, 2, !dbg !4951
  %158 = icmp ne i64 %157, 0, !dbg !4951
  %159 = call i1 @llvm.expect.i1(i1 %158, i1 false), !dbg !4951
  br i1 %159, label %panic248, label %checkok255, !dbg !4951

checkok255:                                       ; preds = %checkok247
  %160 = load i16, ptr %154, align 2, !dbg !4951
  %zext256 = zext i16 %160 to i128, !dbg !4951
  store i128 %zext256, ptr %0, align 16, !dbg !4951
  ret i64 0, !dbg !4951

next_if257:                                       ; preds = %result_block241
  br label %check_subtype258, !dbg !4952

check_subtype258:                                 ; preds = %parent_type_block260, %next_if257
  %161 = phi i64 [ %40, %next_if257 ], [ %typeid.parent262, %parent_type_block260 ], !dbg !4952
  %eq259 = icmp eq i64 ptrtoint (ptr @"$ct.uint" to i64), %161, !dbg !4952
  br i1 %eq259, label %result_block263, label %parent_type_block260, !dbg !4952

parent_type_block260:                             ; preds = %check_subtype258
  %162 = inttoptr i64 %161 to ptr, !dbg !4952
  %ptradd261 = getelementptr inbounds i8, ptr %162, i64 8, !dbg !4952
  %typeid.parent262 = load i64, ptr %ptradd261, align 8, !dbg !4952
  %163 = icmp eq i64 %typeid.parent262, 0, !dbg !4952
  br i1 %163, label %result_block263, label %check_subtype258, !dbg !4952

result_block263:                                  ; preds = %parent_type_block260, %check_subtype258
  %164 = phi i1 [ false, %parent_type_block260 ], [ true, %check_subtype258 ], !dbg !4952
  br i1 %164, label %switch.case264, label %next_if279, !dbg !4952

switch.case264:                                   ; preds = %result_block263
    #dbg_declare(ptr %arg265, !4953, !DIExpression(), !4955)
  %165 = load ptr, ptr %arg, align 8, !dbg !4955
  store ptr %165, ptr %arg265, align 8, !dbg !4955
  %166 = load ptr, ptr %arg265, align 8, !dbg !4956
  %checknull267 = icmp eq ptr %166, null, !dbg !4956
  %167 = call i1 @llvm.expect.i1(i1 %checknull267, i1 false), !dbg !4956
  br i1 %167, label %panic268, label %checkok269, !dbg !4956

checkok269:                                       ; preds = %switch.case264
  %168 = ptrtoint ptr %166 to i64, !dbg !4956
  %169 = urem i64 %168, 4, !dbg !4956
  %170 = icmp ne i64 %169, 0, !dbg !4956
  %171 = call i1 @llvm.expect.i1(i1 %170, i1 false), !dbg !4956
  br i1 %171, label %panic270, label %checkok277, !dbg !4956

checkok277:                                       ; preds = %checkok269
  %172 = load i32, ptr %166, align 4, !dbg !4956
  %zext278 = zext i32 %172 to i128, !dbg !4956
  store i128 %zext278, ptr %0, align 16, !dbg !4956
  ret i64 0, !dbg !4956

next_if279:                                       ; preds = %result_block263
  br label %check_subtype280, !dbg !4957

check_subtype280:                                 ; preds = %parent_type_block282, %next_if279
  %173 = phi i64 [ %40, %next_if279 ], [ %typeid.parent284, %parent_type_block282 ], !dbg !4957
  %eq281 = icmp eq i64 ptrtoint (ptr @"$ct.ulong" to i64), %173, !dbg !4957
  br i1 %eq281, label %result_block285, label %parent_type_block282, !dbg !4957

parent_type_block282:                             ; preds = %check_subtype280
  %174 = inttoptr i64 %173 to ptr, !dbg !4957
  %ptradd283 = getelementptr inbounds i8, ptr %174, i64 8, !dbg !4957
  %typeid.parent284 = load i64, ptr %ptradd283, align 8, !dbg !4957
  %175 = icmp eq i64 %typeid.parent284, 0, !dbg !4957
  br i1 %175, label %result_block285, label %check_subtype280, !dbg !4957

result_block285:                                  ; preds = %parent_type_block282, %check_subtype280
  %176 = phi i1 [ false, %parent_type_block282 ], [ true, %check_subtype280 ], !dbg !4957
  br i1 %176, label %switch.case286, label %next_if301, !dbg !4957

switch.case286:                                   ; preds = %result_block285
    #dbg_declare(ptr %arg287, !4958, !DIExpression(), !4961)
  %177 = load ptr, ptr %arg, align 8, !dbg !4961
  store ptr %177, ptr %arg287, align 8, !dbg !4961
  %178 = load ptr, ptr %arg287, align 8, !dbg !4962
  %checknull289 = icmp eq ptr %178, null, !dbg !4962
  %179 = call i1 @llvm.expect.i1(i1 %checknull289, i1 false), !dbg !4962
  br i1 %179, label %panic290, label %checkok291, !dbg !4962

checkok291:                                       ; preds = %switch.case286
  %180 = ptrtoint ptr %178 to i64, !dbg !4962
  %181 = urem i64 %180, 8, !dbg !4962
  %182 = icmp ne i64 %181, 0, !dbg !4962
  %183 = call i1 @llvm.expect.i1(i1 %182, i1 false), !dbg !4962
  br i1 %183, label %panic292, label %checkok299, !dbg !4962

checkok299:                                       ; preds = %checkok291
  %184 = load i64, ptr %178, align 8, !dbg !4962
  %zext300 = zext i64 %184 to i128, !dbg !4962
  store i128 %zext300, ptr %0, align 16, !dbg !4962
  ret i64 0, !dbg !4962

next_if301:                                       ; preds = %result_block285
  br label %check_subtype302, !dbg !4963

check_subtype302:                                 ; preds = %parent_type_block304, %next_if301
  %185 = phi i64 [ %40, %next_if301 ], [ %typeid.parent306, %parent_type_block304 ], !dbg !4963
  %eq303 = icmp eq i64 ptrtoint (ptr @"$ct.uint128" to i64), %185, !dbg !4963
  br i1 %eq303, label %result_block307, label %parent_type_block304, !dbg !4963

parent_type_block304:                             ; preds = %check_subtype302
  %186 = inttoptr i64 %185 to ptr, !dbg !4963
  %ptradd305 = getelementptr inbounds i8, ptr %186, i64 8, !dbg !4963
  %typeid.parent306 = load i64, ptr %ptradd305, align 8, !dbg !4963
  %187 = icmp eq i64 %typeid.parent306, 0, !dbg !4963
  br i1 %187, label %result_block307, label %check_subtype302, !dbg !4963

result_block307:                                  ; preds = %parent_type_block304, %check_subtype302
  %188 = phi i1 [ false, %parent_type_block304 ], [ true, %check_subtype302 ], !dbg !4963
  br i1 %188, label %switch.case308, label %next_if322, !dbg !4963

switch.case308:                                   ; preds = %result_block307
    #dbg_declare(ptr %arg309, !4964, !DIExpression(), !4966)
  %189 = load ptr, ptr %arg, align 8, !dbg !4966
  store ptr %189, ptr %arg309, align 8, !dbg !4966
  %190 = load ptr, ptr %arg309, align 8, !dbg !4967
  %checknull311 = icmp eq ptr %190, null, !dbg !4967
  %191 = call i1 @llvm.expect.i1(i1 %checknull311, i1 false), !dbg !4967
  br i1 %191, label %panic312, label %checkok313, !dbg !4967

checkok313:                                       ; preds = %switch.case308
  %192 = ptrtoint ptr %190 to i64, !dbg !4967
  %193 = urem i64 %192, 16, !dbg !4967
  %194 = icmp ne i64 %193, 0, !dbg !4967
  %195 = call i1 @llvm.expect.i1(i1 %194, i1 false), !dbg !4967
  br i1 %195, label %panic314, label %checkok321, !dbg !4967

checkok321:                                       ; preds = %checkok313
  %196 = load i128, ptr %190, align 16, !dbg !4967
  store i128 %196, ptr %0, align 16, !dbg !4967
  ret i64 0, !dbg !4967

next_if322:                                       ; preds = %result_block307
  br label %check_subtype323, !dbg !4968

check_subtype323:                                 ; preds = %parent_type_block325, %next_if322
  %197 = phi i64 [ %40, %next_if322 ], [ %typeid.parent327, %parent_type_block325 ], !dbg !4968
  %eq324 = icmp eq i64 ptrtoint (ptr @"$ct.float" to i64), %197, !dbg !4968
  br i1 %eq324, label %result_block328, label %parent_type_block325, !dbg !4968

parent_type_block325:                             ; preds = %check_subtype323
  %198 = inttoptr i64 %197 to ptr, !dbg !4968
  %ptradd326 = getelementptr inbounds i8, ptr %198, i64 8, !dbg !4968
  %typeid.parent327 = load i64, ptr %ptradd326, align 8, !dbg !4968
  %199 = icmp eq i64 %typeid.parent327, 0, !dbg !4968
  br i1 %199, label %result_block328, label %check_subtype323, !dbg !4968

result_block328:                                  ; preds = %parent_type_block325, %check_subtype323
  %200 = phi i1 [ false, %parent_type_block325 ], [ true, %check_subtype323 ], !dbg !4968
  br i1 %200, label %switch.case329, label %next_if351, !dbg !4968

switch.case329:                                   ; preds = %result_block328
    #dbg_declare(ptr %arg330, !4969, !DIExpression(), !4973)
  %201 = load ptr, ptr %arg, align 8, !dbg !4973
  store ptr %201, ptr %arg330, align 8, !dbg !4973
    #dbg_declare(ptr %f, !4974, !DIExpression(), !4975)
  %202 = load ptr, ptr %arg330, align 8, !dbg !4976
  %checknull331 = icmp eq ptr %202, null, !dbg !4976
  %203 = call i1 @llvm.expect.i1(i1 %checknull331, i1 false), !dbg !4976
  br i1 %203, label %panic332, label %checkok333, !dbg !4976

checkok333:                                       ; preds = %switch.case329
  %204 = ptrtoint ptr %202 to i64, !dbg !4976
  %205 = urem i64 %204, 4, !dbg !4976
  %206 = icmp ne i64 %205, 0, !dbg !4976
  %207 = call i1 @llvm.expect.i1(i1 %206, i1 false), !dbg !4976
  br i1 %207, label %panic334, label %checkok341, !dbg !4976

checkok341:                                       ; preds = %checkok333
  %208 = load float, ptr %202, align 4, !dbg !4976
  store float %208, ptr %f, align 4, !dbg !4976
  %209 = load ptr, ptr %is_neg, align 8, !dbg !4977
  %checknull343 = icmp eq ptr %209, null, !dbg !4977
  %210 = call i1 @llvm.expect.i1(i1 %checknull343, i1 false), !dbg !4977
  br i1 %210, label %panic344, label %checkok345, !dbg !4977

checkok345:                                       ; preds = %checkok341
  %211 = load float, ptr %f, align 4, !dbg !4978
  %lt346 = fcmp olt float %211, 0.000000e+00, !dbg !4978
  %212 = zext i1 %lt346 to i8, !dbg !4978
  store i8 %212, ptr %209, align 1, !dbg !4978
  %213 = trunc i8 %212 to i1, !dbg !4978
  br i1 %213, label %cond.lhs347, label %cond.rhs348, !dbg !4978

cond.lhs347:                                      ; preds = %checkok345
  %214 = load float, ptr %f, align 4, !dbg !4979
  %fneg = fneg float %214, !dbg !4979
  br label %cond.phi349, !dbg !4979

cond.rhs348:                                      ; preds = %checkok345
  %215 = load float, ptr %f, align 4, !dbg !4980
  br label %cond.phi349, !dbg !4980

cond.phi349:                                      ; preds = %cond.rhs348, %cond.lhs347
  %val350 = phi float [ %fneg, %cond.lhs347 ], [ %215, %cond.rhs348 ], !dbg !4980
  %fpui = fptoui float %val350 to i128, !dbg !4980
  store i128 %fpui, ptr %0, align 16, !dbg !4980
  ret i64 0, !dbg !4980

next_if351:                                       ; preds = %result_block328
  br label %check_subtype352, !dbg !4981

check_subtype352:                                 ; preds = %parent_type_block354, %next_if351
  %216 = phi i64 [ %40, %next_if351 ], [ %typeid.parent356, %parent_type_block354 ], !dbg !4981
  %eq353 = icmp eq i64 ptrtoint (ptr @"$ct.double" to i64), %216, !dbg !4981
  br i1 %eq353, label %result_block357, label %parent_type_block354, !dbg !4981

parent_type_block354:                             ; preds = %check_subtype352
  %217 = inttoptr i64 %216 to ptr, !dbg !4981
  %ptradd355 = getelementptr inbounds i8, ptr %217, i64 8, !dbg !4981
  %typeid.parent356 = load i64, ptr %ptradd355, align 8, !dbg !4981
  %218 = icmp eq i64 %typeid.parent356, 0, !dbg !4981
  br i1 %218, label %result_block357, label %check_subtype352, !dbg !4981

result_block357:                                  ; preds = %parent_type_block354, %check_subtype352
  %219 = phi i1 [ false, %parent_type_block354 ], [ true, %check_subtype352 ], !dbg !4981
  br i1 %219, label %switch.case358, label %next_if382, !dbg !4981

switch.case358:                                   ; preds = %result_block357
    #dbg_declare(ptr %arg359, !4982, !DIExpression(), !4985)
  %220 = load ptr, ptr %arg, align 8, !dbg !4985
  store ptr %220, ptr %arg359, align 8, !dbg !4985
    #dbg_declare(ptr %d, !4986, !DIExpression(), !4987)
  %221 = load ptr, ptr %arg359, align 8, !dbg !4988
  %checknull360 = icmp eq ptr %221, null, !dbg !4988
  %222 = call i1 @llvm.expect.i1(i1 %checknull360, i1 false), !dbg !4988
  br i1 %222, label %panic361, label %checkok362, !dbg !4988

checkok362:                                       ; preds = %switch.case358
  %223 = ptrtoint ptr %221 to i64, !dbg !4988
  %224 = urem i64 %223, 8, !dbg !4988
  %225 = icmp ne i64 %224, 0, !dbg !4988
  %226 = call i1 @llvm.expect.i1(i1 %225, i1 false), !dbg !4988
  br i1 %226, label %panic363, label %checkok370, !dbg !4988

checkok370:                                       ; preds = %checkok362
  %227 = load double, ptr %221, align 8, !dbg !4988
  store double %227, ptr %d, align 8, !dbg !4988
  %228 = load ptr, ptr %is_neg, align 8, !dbg !4989
  %checknull372 = icmp eq ptr %228, null, !dbg !4989
  %229 = call i1 @llvm.expect.i1(i1 %checknull372, i1 false), !dbg !4989
  br i1 %229, label %panic373, label %checkok374, !dbg !4989

checkok374:                                       ; preds = %checkok370
  %230 = load double, ptr %d, align 8, !dbg !4990
  %lt375 = fcmp olt double %230, 0.000000e+00, !dbg !4990
  %231 = zext i1 %lt375 to i8, !dbg !4990
  store i8 %231, ptr %228, align 1, !dbg !4990
  %232 = trunc i8 %231 to i1, !dbg !4990
  br i1 %232, label %cond.lhs376, label %cond.rhs378, !dbg !4990

cond.lhs376:                                      ; preds = %checkok374
  %233 = load double, ptr %d, align 8, !dbg !4991
  %fneg377 = fneg double %233, !dbg !4991
  br label %cond.phi379, !dbg !4991

cond.rhs378:                                      ; preds = %checkok374
  %234 = load double, ptr %d, align 8, !dbg !4992
  br label %cond.phi379, !dbg !4992

cond.phi379:                                      ; preds = %cond.rhs378, %cond.lhs376
  %val380 = phi double [ %fneg377, %cond.lhs376 ], [ %234, %cond.rhs378 ], !dbg !4992
  %fpui381 = fptoui double %val380 to i128, !dbg !4992
  store i128 %fpui381, ptr %0, align 16, !dbg !4992
  ret i64 0, !dbg !4992

next_if382:                                       ; preds = %result_block357
  br label %switch.default383, !dbg !4992

switch.default383:                                ; preds = %next_if382
  ret i64 ptrtoint (ptr @"std.io.FormattingFault$BAD_FORMAT" to i64), !dbg !4993

panic:                                            ; preds = %switch.case
  %235 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4855
  call void %235(ptr @.panic_msg.217, i64 47, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 46) #5, !dbg !4855
  unreachable, !dbg !4855

panic3:                                           ; preds = %checkok
  %236 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4859
  call void %236(ptr @.panic_msg.219, i64 55, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 47) #5, !dbg !4859
  unreachable, !dbg !4859

panic5:                                           ; preds = %checkok4
  store i64 8, ptr %taddr, align 8
  %237 = insertvalue %any undef, ptr %taddr, 0
  %238 = insertvalue %any %237, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %11, ptr %taddr6, align 8
  %239 = insertvalue %any undef, ptr %taddr6, 0
  %240 = insertvalue %any %239, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %238, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %240, ptr %ptradd7, align 16
  %241 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %241, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 47, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !4859
  unreachable, !dbg !4859

panic12:                                          ; preds = %switch.case9
  %242 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4860
  call void %242(ptr @.panic_msg.36, i64 45, ptr @.file.50, i64 10, ptr @.func.218, i64 12, i32 199) #5, !dbg !4860
  unreachable, !dbg !4860

panic14:                                          ; preds = %checkok13
  store i64 8, ptr %taddr15, align 8
  %243 = insertvalue %any undef, ptr %taddr15, 0
  %244 = insertvalue %any %243, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %18, ptr %taddr16, align 8
  %245 = insertvalue %any undef, ptr %taddr16, 0
  %246 = insertvalue %any %245, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %244, ptr %varargslots17, align 16
  %ptradd18 = getelementptr inbounds i8, ptr %varargslots17, i64 16
  store %any %246, ptr %ptradd18, align 16
  %247 = insertvalue %"any[]" undef, ptr %varargslots17, 0
  %"$$temp19" = insertvalue %"any[]" %247, i64 2, 1
  store %"any[]" %"$$temp19", ptr %indirectarg20, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.50, i64 10, ptr @.func.218, i64 12, i32 199, ptr byval(%"any[]") align 8 %indirectarg20) #5, !dbg !4860
  unreachable, !dbg !4860

panic23:                                          ; preds = %checkok21
  %248 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4864
  call void %248(ptr @.panic_msg.36, i64 45, ptr @.file.50, i64 10, ptr @.func.218, i64 12, i32 199) #5, !dbg !4864
  unreachable, !dbg !4864

panic25:                                          ; preds = %checkok24
  store i64 8, ptr %taddr26, align 8
  %249 = insertvalue %any undef, ptr %taddr26, 0
  %250 = insertvalue %any %249, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr27, align 8
  %251 = insertvalue %any undef, ptr %taddr27, 0
  %252 = insertvalue %any %251, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %250, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %252, ptr %ptradd29, align 16
  %253 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %253, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.50, i64 10, ptr @.func.218, i64 12, i32 199, ptr byval(%"any[]") align 8 %indirectarg31) #5, !dbg !4864
  unreachable, !dbg !4864

panic54:                                          ; preds = %switch.exit
  %254 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4868
  call void %254(ptr @.panic_msg.217, i64 47, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 54) #5, !dbg !4868
  unreachable, !dbg !4868

panic65:                                          ; preds = %switch.case61
  %255 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4876
  call void %255(ptr @.panic_msg.220, i64 44, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 58) #5, !dbg !4876
  unreachable, !dbg !4876

panic77:                                          ; preds = %switch.case74
  %256 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4883
  call void %256(ptr @.panic_msg.220, i64 44, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 60) #5, !dbg !4883
  unreachable, !dbg !4883

panic81:                                          ; preds = %checkok78
  %257 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4884
  call void %257(ptr @.panic_msg.217, i64 47, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 61) #5, !dbg !4884
  unreachable, !dbg !4884

panic97:                                          ; preds = %switch.case93
  %258 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4896
  call void %258(ptr @.panic_msg.220, i64 44, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 63) #5, !dbg !4896
  unreachable, !dbg !4896

panic99:                                          ; preds = %checkok98
  store i64 2, ptr %taddr100, align 8
  %259 = insertvalue %any undef, ptr %taddr100, 0
  %260 = insertvalue %any %259, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %73, ptr %taddr101, align 8
  %261 = insertvalue %any undef, ptr %taddr101, 0
  %262 = insertvalue %any %261, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %260, ptr %varargslots102, align 16
  %ptradd103 = getelementptr inbounds i8, ptr %varargslots102, i64 16
  store %any %262, ptr %ptradd103, align 16
  %263 = insertvalue %"any[]" undef, ptr %varargslots102, 0
  %"$$temp104" = insertvalue %"any[]" %263, i64 2, 1
  store %"any[]" %"$$temp104", ptr %indirectarg105, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 63, ptr byval(%"any[]") align 8 %indirectarg105) #5, !dbg !4896
  unreachable, !dbg !4896

panic110:                                         ; preds = %checkok106
  %264 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4897
  call void %264(ptr @.panic_msg.217, i64 47, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 64) #5, !dbg !4897
  unreachable, !dbg !4897

panic132:                                         ; preds = %switch.case128
  %265 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4909
  call void %265(ptr @.panic_msg.220, i64 44, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 66) #5, !dbg !4909
  unreachable, !dbg !4909

panic134:                                         ; preds = %checkok133
  store i64 4, ptr %taddr135, align 8
  %266 = insertvalue %any undef, ptr %taddr135, 0
  %267 = insertvalue %any %266, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %92, ptr %taddr136, align 8
  %268 = insertvalue %any undef, ptr %taddr136, 0
  %269 = insertvalue %any %268, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %267, ptr %varargslots137, align 16
  %ptradd138 = getelementptr inbounds i8, ptr %varargslots137, i64 16
  store %any %269, ptr %ptradd138, align 16
  %270 = insertvalue %"any[]" undef, ptr %varargslots137, 0
  %"$$temp139" = insertvalue %"any[]" %270, i64 2, 1
  store %"any[]" %"$$temp139", ptr %indirectarg140, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 66, ptr byval(%"any[]") align 8 %indirectarg140) #5, !dbg !4909
  unreachable, !dbg !4909

panic144:                                         ; preds = %checkok141
  %271 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4910
  call void %271(ptr @.panic_msg.217, i64 47, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 67) #5, !dbg !4910
  unreachable, !dbg !4910

panic166:                                         ; preds = %switch.case162
  %272 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4922
  call void %272(ptr @.panic_msg.220, i64 44, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 69) #5, !dbg !4922
  unreachable, !dbg !4922

panic168:                                         ; preds = %checkok167
  store i64 8, ptr %taddr169, align 8
  %273 = insertvalue %any undef, ptr %taddr169, 0
  %274 = insertvalue %any %273, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %111, ptr %taddr170, align 8
  %275 = insertvalue %any undef, ptr %taddr170, 0
  %276 = insertvalue %any %275, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %274, ptr %varargslots171, align 16
  %ptradd172 = getelementptr inbounds i8, ptr %varargslots171, i64 16
  store %any %276, ptr %ptradd172, align 16
  %277 = insertvalue %"any[]" undef, ptr %varargslots171, 0
  %"$$temp173" = insertvalue %"any[]" %277, i64 2, 1
  store %"any[]" %"$$temp173", ptr %indirectarg174, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 69, ptr byval(%"any[]") align 8 %indirectarg174) #5, !dbg !4922
  unreachable, !dbg !4922

panic178:                                         ; preds = %checkok175
  %278 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4923
  call void %278(ptr @.panic_msg.217, i64 47, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 70) #5, !dbg !4923
  unreachable, !dbg !4923

panic200:                                         ; preds = %switch.case196
  %279 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4935
  call void %279(ptr @.panic_msg.220, i64 44, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 72) #5, !dbg !4935
  unreachable, !dbg !4935

panic202:                                         ; preds = %checkok201
  store i64 16, ptr %taddr203, align 8
  %280 = insertvalue %any undef, ptr %taddr203, 0
  %281 = insertvalue %any %280, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %130, ptr %taddr204, align 8
  %282 = insertvalue %any undef, ptr %taddr204, 0
  %283 = insertvalue %any %282, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %281, ptr %varargslots205, align 16
  %ptradd206 = getelementptr inbounds i8, ptr %varargslots205, i64 16
  store %any %283, ptr %ptradd206, align 16
  %284 = insertvalue %"any[]" undef, ptr %varargslots205, 0
  %"$$temp207" = insertvalue %"any[]" %284, i64 2, 1
  store %"any[]" %"$$temp207", ptr %indirectarg208, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 72, ptr byval(%"any[]") align 8 %indirectarg208) #5, !dbg !4935
  unreachable, !dbg !4935

panic212:                                         ; preds = %checkok209
  %285 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4936
  call void %285(ptr @.panic_msg.217, i64 47, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 73) #5, !dbg !4936
  unreachable, !dbg !4936

panic232:                                         ; preds = %switch.case228
  %286 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4945
  call void %286(ptr @.panic_msg.220, i64 44, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 75) #5, !dbg !4945
  unreachable, !dbg !4945

panic246:                                         ; preds = %switch.case242
  %287 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4951
  call void %287(ptr @.panic_msg.220, i64 44, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 77) #5, !dbg !4951
  unreachable, !dbg !4951

panic248:                                         ; preds = %checkok247
  store i64 2, ptr %taddr249, align 8
  %288 = insertvalue %any undef, ptr %taddr249, 0
  %289 = insertvalue %any %288, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %157, ptr %taddr250, align 8
  %290 = insertvalue %any undef, ptr %taddr250, 0
  %291 = insertvalue %any %290, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %289, ptr %varargslots251, align 16
  %ptradd252 = getelementptr inbounds i8, ptr %varargslots251, i64 16
  store %any %291, ptr %ptradd252, align 16
  %292 = insertvalue %"any[]" undef, ptr %varargslots251, 0
  %"$$temp253" = insertvalue %"any[]" %292, i64 2, 1
  store %"any[]" %"$$temp253", ptr %indirectarg254, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 77, ptr byval(%"any[]") align 8 %indirectarg254) #5, !dbg !4951
  unreachable, !dbg !4951

panic268:                                         ; preds = %switch.case264
  %293 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4956
  call void %293(ptr @.panic_msg.220, i64 44, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 79) #5, !dbg !4956
  unreachable, !dbg !4956

panic270:                                         ; preds = %checkok269
  store i64 4, ptr %taddr271, align 8
  %294 = insertvalue %any undef, ptr %taddr271, 0
  %295 = insertvalue %any %294, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %169, ptr %taddr272, align 8
  %296 = insertvalue %any undef, ptr %taddr272, 0
  %297 = insertvalue %any %296, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %295, ptr %varargslots273, align 16
  %ptradd274 = getelementptr inbounds i8, ptr %varargslots273, i64 16
  store %any %297, ptr %ptradd274, align 16
  %298 = insertvalue %"any[]" undef, ptr %varargslots273, 0
  %"$$temp275" = insertvalue %"any[]" %298, i64 2, 1
  store %"any[]" %"$$temp275", ptr %indirectarg276, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 79, ptr byval(%"any[]") align 8 %indirectarg276) #5, !dbg !4956
  unreachable, !dbg !4956

panic290:                                         ; preds = %switch.case286
  %299 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4962
  call void %299(ptr @.panic_msg.220, i64 44, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 81) #5, !dbg !4962
  unreachable, !dbg !4962

panic292:                                         ; preds = %checkok291
  store i64 8, ptr %taddr293, align 8
  %300 = insertvalue %any undef, ptr %taddr293, 0
  %301 = insertvalue %any %300, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %181, ptr %taddr294, align 8
  %302 = insertvalue %any undef, ptr %taddr294, 0
  %303 = insertvalue %any %302, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %301, ptr %varargslots295, align 16
  %ptradd296 = getelementptr inbounds i8, ptr %varargslots295, i64 16
  store %any %303, ptr %ptradd296, align 16
  %304 = insertvalue %"any[]" undef, ptr %varargslots295, 0
  %"$$temp297" = insertvalue %"any[]" %304, i64 2, 1
  store %"any[]" %"$$temp297", ptr %indirectarg298, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 81, ptr byval(%"any[]") align 8 %indirectarg298) #5, !dbg !4962
  unreachable, !dbg !4962

panic312:                                         ; preds = %switch.case308
  %305 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4967
  call void %305(ptr @.panic_msg.220, i64 44, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 83) #5, !dbg !4967
  unreachable, !dbg !4967

panic314:                                         ; preds = %checkok313
  store i64 16, ptr %taddr315, align 8
  %306 = insertvalue %any undef, ptr %taddr315, 0
  %307 = insertvalue %any %306, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %193, ptr %taddr316, align 8
  %308 = insertvalue %any undef, ptr %taddr316, 0
  %309 = insertvalue %any %308, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %307, ptr %varargslots317, align 16
  %ptradd318 = getelementptr inbounds i8, ptr %varargslots317, i64 16
  store %any %309, ptr %ptradd318, align 16
  %310 = insertvalue %"any[]" undef, ptr %varargslots317, 0
  %"$$temp319" = insertvalue %"any[]" %310, i64 2, 1
  store %"any[]" %"$$temp319", ptr %indirectarg320, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 83, ptr byval(%"any[]") align 8 %indirectarg320) #5, !dbg !4967
  unreachable, !dbg !4967

panic332:                                         ; preds = %switch.case329
  %311 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4976
  call void %311(ptr @.panic_msg.220, i64 44, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 85) #5, !dbg !4976
  unreachable, !dbg !4976

panic334:                                         ; preds = %checkok333
  store i64 4, ptr %taddr335, align 8
  %312 = insertvalue %any undef, ptr %taddr335, 0
  %313 = insertvalue %any %312, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %205, ptr %taddr336, align 8
  %314 = insertvalue %any undef, ptr %taddr336, 0
  %315 = insertvalue %any %314, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %313, ptr %varargslots337, align 16
  %ptradd338 = getelementptr inbounds i8, ptr %varargslots337, i64 16
  store %any %315, ptr %ptradd338, align 16
  %316 = insertvalue %"any[]" undef, ptr %varargslots337, 0
  %"$$temp339" = insertvalue %"any[]" %316, i64 2, 1
  store %"any[]" %"$$temp339", ptr %indirectarg340, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 85, ptr byval(%"any[]") align 8 %indirectarg340) #5, !dbg !4976
  unreachable, !dbg !4976

panic344:                                         ; preds = %checkok341
  %317 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4977
  call void %317(ptr @.panic_msg.217, i64 47, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 86) #5, !dbg !4977
  unreachable, !dbg !4977

panic361:                                         ; preds = %switch.case358
  %318 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4988
  call void %318(ptr @.panic_msg.220, i64 44, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 88) #5, !dbg !4988
  unreachable, !dbg !4988

panic363:                                         ; preds = %checkok362
  store i64 8, ptr %taddr364, align 8
  %319 = insertvalue %any undef, ptr %taddr364, 0
  %320 = insertvalue %any %319, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %224, ptr %taddr365, align 8
  %321 = insertvalue %any undef, ptr %taddr365, 0
  %322 = insertvalue %any %321, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %320, ptr %varargslots366, align 16
  %ptradd367 = getelementptr inbounds i8, ptr %varargslots366, i64 16
  store %any %322, ptr %ptradd367, align 16
  %323 = insertvalue %"any[]" undef, ptr %varargslots366, 0
  %"$$temp368" = insertvalue %"any[]" %323, i64 2, 1
  store %"any[]" %"$$temp368", ptr %indirectarg369, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 88, ptr byval(%"any[]") align 8 %indirectarg369) #5, !dbg !4988
  unreachable, !dbg !4988

panic373:                                         ; preds = %checkok370
  %324 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4989
  call void %324(ptr @.panic_msg.217, i64 47, ptr @.file.215, i64 20, ptr @.func.218, i64 12, i32 89) #5, !dbg !4989
  unreachable, !dbg !4989
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.float_from_any(ptr %0, i64 %1, ptr %2) #0 !dbg !4995 {
entry:
  %arg = alloca %any, align 8
  %reterr = alloca i64, align 8
  %self = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %retparam = alloca double, align 8
  %taddr36 = alloca %any, align 8
  %switch = alloca i64, align 8
  %arg41 = alloca ptr, align 8
  %reterr42 = alloca i64, align 8
  %arg53 = alloca ptr, align 8
  %reterr54 = alloca i64, align 8
  %arg66 = alloca ptr, align 8
  %reterr67 = alloca i64, align 8
  %taddr72 = alloca i64, align 8
  %taddr73 = alloca i64, align 8
  %varargslots74 = alloca [2 x %any], align 16
  %indirectarg77 = alloca %"any[]", align 8
  %arg88 = alloca ptr, align 8
  %reterr89 = alloca i64, align 8
  %taddr94 = alloca i64, align 8
  %taddr95 = alloca i64, align 8
  %varargslots96 = alloca [2 x %any], align 16
  %indirectarg99 = alloca %"any[]", align 8
  %arg110 = alloca ptr, align 8
  %reterr111 = alloca i64, align 8
  %taddr116 = alloca i64, align 8
  %taddr117 = alloca i64, align 8
  %varargslots118 = alloca [2 x %any], align 16
  %indirectarg121 = alloca %"any[]", align 8
  %arg132 = alloca ptr, align 8
  %reterr133 = alloca i64, align 8
  %taddr138 = alloca i64, align 8
  %taddr139 = alloca i64, align 8
  %varargslots140 = alloca [2 x %any], align 16
  %indirectarg143 = alloca %"any[]", align 8
  %arg154 = alloca ptr, align 8
  %reterr155 = alloca i64, align 8
  %arg168 = alloca ptr, align 8
  %reterr169 = alloca i64, align 8
  %taddr174 = alloca i64, align 8
  %taddr175 = alloca i64, align 8
  %varargslots176 = alloca [2 x %any], align 16
  %indirectarg179 = alloca %"any[]", align 8
  %arg190 = alloca ptr, align 8
  %reterr191 = alloca i64, align 8
  %taddr196 = alloca i64, align 8
  %taddr197 = alloca i64, align 8
  %varargslots198 = alloca [2 x %any], align 16
  %indirectarg201 = alloca %"any[]", align 8
  %arg212 = alloca ptr, align 8
  %reterr213 = alloca i64, align 8
  %taddr218 = alloca i64, align 8
  %taddr219 = alloca i64, align 8
  %varargslots220 = alloca [2 x %any], align 16
  %indirectarg223 = alloca %"any[]", align 8
  %arg234 = alloca ptr, align 8
  %reterr235 = alloca i64, align 8
  %taddr240 = alloca i64, align 8
  %taddr241 = alloca i64, align 8
  %varargslots242 = alloca [2 x %any], align 16
  %indirectarg245 = alloca %"any[]", align 8
  %arg256 = alloca ptr, align 8
  %reterr257 = alloca i64, align 8
  %taddr262 = alloca i64, align 8
  %taddr263 = alloca i64, align 8
  %varargslots264 = alloca [2 x %any], align 16
  %indirectarg267 = alloca %"any[]", align 8
  %arg277 = alloca ptr, align 8
  %reterr278 = alloca i64, align 8
  %taddr283 = alloca i64, align 8
  %taddr284 = alloca i64, align 8
  %varargslots285 = alloca [2 x %any], align 16
  %indirectarg288 = alloca %"any[]", align 8
  store i64 %1, ptr %arg, align 8
  %ptradd = getelementptr inbounds i8, ptr %arg, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %arg, !5000, !DIExpression(), !5001)
  %ptradd1 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !5002
  %3 = load i64, ptr %ptradd1, align 8, !dbg !5002
  %"introspect*" = inttoptr i64 %3 to ptr, !dbg !5002
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !5002
  %eq = icmp eq i8 %typeid.kind, 18, !dbg !5002
  br i1 %eq, label %if.then, label %if.exit, !dbg !5002

if.then:                                          ; preds = %entry
  store ptr %arg, ptr %self, align 8
  %4 = load ptr, ptr %self, align 8, !dbg !5003
  %checknull = icmp eq ptr %4, null, !dbg !5003
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !5003
  br i1 %5, label %panic, label %checkok, !dbg !5003

checkok:                                          ; preds = %if.then
  %6 = ptrtoint ptr %4 to i64, !dbg !5003
  %7 = urem i64 %6, 8, !dbg !5003
  %8 = icmp ne i64 %7, 0, !dbg !5003
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !5003
  br i1 %9, label %panic2, label %checkok5, !dbg !5003

checkok5:                                         ; preds = %checkok
  %10 = load ptr, ptr %4, align 8, !dbg !5003
  %11 = load ptr, ptr %self, align 8, !dbg !5007
  %checknull6 = icmp eq ptr %11, null, !dbg !5007
  %12 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !5007
  br i1 %12, label %panic7, label %checkok8, !dbg !5007

checkok8:                                         ; preds = %checkok5
  %13 = ptrtoint ptr %11 to i64, !dbg !5007
  %14 = urem i64 %13, 8, !dbg !5007
  %15 = icmp ne i64 %14, 0, !dbg !5007
  %16 = call i1 @llvm.expect.i1(i1 %15, i1 false), !dbg !5007
  br i1 %16, label %panic9, label %checkok16, !dbg !5007

checkok16:                                        ; preds = %checkok8
  %ptradd17 = getelementptr inbounds i8, ptr %11, i64 8, !dbg !5007
  %17 = load i64, ptr %ptradd17, align 8, !dbg !5007
  %"introspect*18" = inttoptr i64 %17 to ptr, !dbg !5007
  %typeid.kind19 = load i8, ptr %"introspect*18", align 8, !dbg !5007
  %eq20 = icmp eq i8 %typeid.kind19, 15, !dbg !5007
  br i1 %eq20, label %check_type_ok, label %check_next, !dbg !5007

check_next:                                       ; preds = %checkok16
  %eq21 = icmp eq i8 %typeid.kind19, 19, !dbg !5007
  br i1 %eq21, label %check_type_ok, label %check_next22, !dbg !5007

check_next22:                                     ; preds = %check_next
  %eq23 = icmp eq i8 %typeid.kind19, 17, !dbg !5007
  br i1 %eq23, label %check_type_ok, label %check_next24, !dbg !5007

check_next24:                                     ; preds = %check_next22
  %eq25 = icmp eq i8 %typeid.kind19, 8, !dbg !5007
  br i1 %eq25, label %check_type_ok, label %check_next26, !dbg !5007

check_next26:                                     ; preds = %check_next24
  %eq27 = icmp eq i8 %typeid.kind19, 16, !dbg !5007
  br i1 %eq27, label %check_type_ok, label %check_next28, !dbg !5007

check_next28:                                     ; preds = %check_next26
  %eq29 = icmp eq i8 %typeid.kind19, 18, !dbg !5007
  br i1 %eq29, label %check_type_ok, label %check_next30, !dbg !5007

check_next30:                                     ; preds = %check_next28
  %eq31 = icmp eq i8 %typeid.kind19, 14, !dbg !5007
  br i1 %eq31, label %check_type_ok, label %check_next32, !dbg !5007

check_next32:                                     ; preds = %check_next30
  %eq33 = icmp eq i8 %typeid.kind19, 12, !dbg !5007
  br i1 %eq33, label %check_type_ok, label %check_next34, !dbg !5007

check_next34:                                     ; preds = %check_next32
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5007
  call void %18(ptr @.panic_msg.144, i64 49, ptr @.file.50, i64 10, ptr @.func.221, i64 14, i32 199) #5, !dbg !5007
  unreachable, !dbg !5007

check_type_ok:                                    ; preds = %check_next32, %check_next30, %check_next28, %check_next26, %check_next24, %check_next22, %check_next, %checkok16
  %ptradd35 = getelementptr inbounds i8, ptr %"introspect*18", i64 32, !dbg !5007
  %typeid.inner = load i64, ptr %ptradd35, align 8, !dbg !5007
  %19 = insertvalue %any undef, ptr %10, 0, !dbg !5007
  %20 = insertvalue %any %19, i64 %typeid.inner, 1, !dbg !5007
  store %any %20, ptr %taddr36, align 8
  %lo = load i64, ptr %taddr36, align 8
  %ptradd37 = getelementptr inbounds i8, ptr %taddr36, i64 8
  %hi = load ptr, ptr %ptradd37, align 8
  %21 = call i64 @std.io.float_from_any(ptr %retparam, i64 %lo, ptr %hi), !dbg !5008
  %not_err = icmp eq i64 %21, 0, !dbg !5008
  %22 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !5008
  br i1 %22, label %after_check, label %assign_optional, !dbg !5008

assign_optional:                                  ; preds = %check_type_ok
  store i64 %21, ptr %reterr, align 8, !dbg !5008
  br label %err_retblock, !dbg !5008

after_check:                                      ; preds = %check_type_ok
  %23 = load double, ptr %retparam, align 8, !dbg !5008
  store double %23, ptr %0, align 8, !dbg !5008
  ret i64 0, !dbg !5008

err_retblock:                                     ; preds = %assign_optional
  %24 = load i64, ptr %reterr, align 8, !dbg !5008
  ret i64 %24, !dbg !5008

if.exit:                                          ; preds = %entry
  %ptradd38 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !5009
  %25 = load i64, ptr %ptradd38, align 8
  store i64 %25, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %if.exit
  %26 = load i64, ptr %switch, align 8
  br label %check_subtype, !dbg !5011

check_subtype:                                    ; preds = %parent_type_block, %switch.entry
  %27 = phi i64 [ %26, %switch.entry ], [ %typeid.parent, %parent_type_block ], !dbg !5011
  %eq39 = icmp eq i64 ptrtoint (ptr @"$ct.bool" to i64), %27, !dbg !5011
  br i1 %eq39, label %result_block, label %parent_type_block, !dbg !5011

parent_type_block:                                ; preds = %check_subtype
  %28 = inttoptr i64 %27 to ptr, !dbg !5011
  %ptradd40 = getelementptr inbounds i8, ptr %28, i64 8, !dbg !5011
  %typeid.parent = load i64, ptr %ptradd40, align 8, !dbg !5011
  %29 = icmp eq i64 %typeid.parent, 0, !dbg !5011
  br i1 %29, label %result_block, label %check_subtype, !dbg !5011

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %30 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !5011
  br i1 %30, label %switch.case, label %next_if, !dbg !5011

switch.case:                                      ; preds = %result_block
    #dbg_declare(ptr %arg41, !5012, !DIExpression(), !5014)
  %31 = load ptr, ptr %arg, align 8, !dbg !5014
  store ptr %31, ptr %arg41, align 8, !dbg !5014
  %32 = load ptr, ptr %arg41, align 8, !dbg !5015
  %checknull43 = icmp eq ptr %32, null, !dbg !5015
  %33 = call i1 @llvm.expect.i1(i1 %checknull43, i1 false), !dbg !5015
  br i1 %33, label %panic44, label %checkok45, !dbg !5015

checkok45:                                        ; preds = %switch.case
  %34 = load i8, ptr %32, align 1, !dbg !5015
  %35 = trunc i8 %34 to i1, !dbg !5015
  %uifp = uitofp i1 %35 to double, !dbg !5015
  store double %uifp, ptr %0, align 8, !dbg !5015
  ret i64 0, !dbg !5015

next_if:                                          ; preds = %result_block
  br label %check_subtype46, !dbg !5016

check_subtype46:                                  ; preds = %parent_type_block48, %next_if
  %36 = phi i64 [ %26, %next_if ], [ %typeid.parent50, %parent_type_block48 ], !dbg !5016
  %eq47 = icmp eq i64 ptrtoint (ptr @"$ct.ichar" to i64), %36, !dbg !5016
  br i1 %eq47, label %result_block51, label %parent_type_block48, !dbg !5016

parent_type_block48:                              ; preds = %check_subtype46
  %37 = inttoptr i64 %36 to ptr, !dbg !5016
  %ptradd49 = getelementptr inbounds i8, ptr %37, i64 8, !dbg !5016
  %typeid.parent50 = load i64, ptr %ptradd49, align 8, !dbg !5016
  %38 = icmp eq i64 %typeid.parent50, 0, !dbg !5016
  br i1 %38, label %result_block51, label %check_subtype46, !dbg !5016

result_block51:                                   ; preds = %parent_type_block48, %check_subtype46
  %39 = phi i1 [ false, %parent_type_block48 ], [ true, %check_subtype46 ], !dbg !5016
  br i1 %39, label %switch.case52, label %next_if58, !dbg !5016

switch.case52:                                    ; preds = %result_block51
    #dbg_declare(ptr %arg53, !5017, !DIExpression(), !5019)
  %40 = load ptr, ptr %arg, align 8, !dbg !5019
  store ptr %40, ptr %arg53, align 8, !dbg !5019
  %41 = load ptr, ptr %arg53, align 8, !dbg !5020
  %checknull55 = icmp eq ptr %41, null, !dbg !5020
  %42 = call i1 @llvm.expect.i1(i1 %checknull55, i1 false), !dbg !5020
  br i1 %42, label %panic56, label %checkok57, !dbg !5020

checkok57:                                        ; preds = %switch.case52
  %43 = load i8, ptr %41, align 1, !dbg !5020
  %sifp = sitofp i8 %43 to double, !dbg !5020
  store double %sifp, ptr %0, align 8, !dbg !5020
  ret i64 0, !dbg !5020

next_if58:                                        ; preds = %result_block51
  br label %check_subtype59, !dbg !5021

check_subtype59:                                  ; preds = %parent_type_block61, %next_if58
  %44 = phi i64 [ %26, %next_if58 ], [ %typeid.parent63, %parent_type_block61 ], !dbg !5021
  %eq60 = icmp eq i64 ptrtoint (ptr @"$ct.short" to i64), %44, !dbg !5021
  br i1 %eq60, label %result_block64, label %parent_type_block61, !dbg !5021

parent_type_block61:                              ; preds = %check_subtype59
  %45 = inttoptr i64 %44 to ptr, !dbg !5021
  %ptradd62 = getelementptr inbounds i8, ptr %45, i64 8, !dbg !5021
  %typeid.parent63 = load i64, ptr %ptradd62, align 8, !dbg !5021
  %46 = icmp eq i64 %typeid.parent63, 0, !dbg !5021
  br i1 %46, label %result_block64, label %check_subtype59, !dbg !5021

result_block64:                                   ; preds = %parent_type_block61, %check_subtype59
  %47 = phi i1 [ false, %parent_type_block61 ], [ true, %check_subtype59 ], !dbg !5021
  br i1 %47, label %switch.case65, label %next_if80, !dbg !5021

switch.case65:                                    ; preds = %result_block64
    #dbg_declare(ptr %arg66, !5022, !DIExpression(), !5024)
  %48 = load ptr, ptr %arg, align 8, !dbg !5024
  store ptr %48, ptr %arg66, align 8, !dbg !5024
  %49 = load ptr, ptr %arg66, align 8, !dbg !5025
  %checknull68 = icmp eq ptr %49, null, !dbg !5025
  %50 = call i1 @llvm.expect.i1(i1 %checknull68, i1 false), !dbg !5025
  br i1 %50, label %panic69, label %checkok70, !dbg !5025

checkok70:                                        ; preds = %switch.case65
  %51 = ptrtoint ptr %49 to i64, !dbg !5025
  %52 = urem i64 %51, 2, !dbg !5025
  %53 = icmp ne i64 %52, 0, !dbg !5025
  %54 = call i1 @llvm.expect.i1(i1 %53, i1 false), !dbg !5025
  br i1 %54, label %panic71, label %checkok78, !dbg !5025

checkok78:                                        ; preds = %checkok70
  %55 = load i16, ptr %49, align 2, !dbg !5025
  %sifp79 = sitofp i16 %55 to double, !dbg !5025
  store double %sifp79, ptr %0, align 8, !dbg !5025
  ret i64 0, !dbg !5025

next_if80:                                        ; preds = %result_block64
  br label %check_subtype81, !dbg !5026

check_subtype81:                                  ; preds = %parent_type_block83, %next_if80
  %56 = phi i64 [ %26, %next_if80 ], [ %typeid.parent85, %parent_type_block83 ], !dbg !5026
  %eq82 = icmp eq i64 ptrtoint (ptr @"$ct.int" to i64), %56, !dbg !5026
  br i1 %eq82, label %result_block86, label %parent_type_block83, !dbg !5026

parent_type_block83:                              ; preds = %check_subtype81
  %57 = inttoptr i64 %56 to ptr, !dbg !5026
  %ptradd84 = getelementptr inbounds i8, ptr %57, i64 8, !dbg !5026
  %typeid.parent85 = load i64, ptr %ptradd84, align 8, !dbg !5026
  %58 = icmp eq i64 %typeid.parent85, 0, !dbg !5026
  br i1 %58, label %result_block86, label %check_subtype81, !dbg !5026

result_block86:                                   ; preds = %parent_type_block83, %check_subtype81
  %59 = phi i1 [ false, %parent_type_block83 ], [ true, %check_subtype81 ], !dbg !5026
  br i1 %59, label %switch.case87, label %next_if102, !dbg !5026

switch.case87:                                    ; preds = %result_block86
    #dbg_declare(ptr %arg88, !5027, !DIExpression(), !5029)
  %60 = load ptr, ptr %arg, align 8, !dbg !5029
  store ptr %60, ptr %arg88, align 8, !dbg !5029
  %61 = load ptr, ptr %arg88, align 8, !dbg !5030
  %checknull90 = icmp eq ptr %61, null, !dbg !5030
  %62 = call i1 @llvm.expect.i1(i1 %checknull90, i1 false), !dbg !5030
  br i1 %62, label %panic91, label %checkok92, !dbg !5030

checkok92:                                        ; preds = %switch.case87
  %63 = ptrtoint ptr %61 to i64, !dbg !5030
  %64 = urem i64 %63, 4, !dbg !5030
  %65 = icmp ne i64 %64, 0, !dbg !5030
  %66 = call i1 @llvm.expect.i1(i1 %65, i1 false), !dbg !5030
  br i1 %66, label %panic93, label %checkok100, !dbg !5030

checkok100:                                       ; preds = %checkok92
  %67 = load i32, ptr %61, align 4, !dbg !5030
  %sifp101 = sitofp i32 %67 to double, !dbg !5030
  store double %sifp101, ptr %0, align 8, !dbg !5030
  ret i64 0, !dbg !5030

next_if102:                                       ; preds = %result_block86
  br label %check_subtype103, !dbg !5031

check_subtype103:                                 ; preds = %parent_type_block105, %next_if102
  %68 = phi i64 [ %26, %next_if102 ], [ %typeid.parent107, %parent_type_block105 ], !dbg !5031
  %eq104 = icmp eq i64 ptrtoint (ptr @"$ct.long" to i64), %68, !dbg !5031
  br i1 %eq104, label %result_block108, label %parent_type_block105, !dbg !5031

parent_type_block105:                             ; preds = %check_subtype103
  %69 = inttoptr i64 %68 to ptr, !dbg !5031
  %ptradd106 = getelementptr inbounds i8, ptr %69, i64 8, !dbg !5031
  %typeid.parent107 = load i64, ptr %ptradd106, align 8, !dbg !5031
  %70 = icmp eq i64 %typeid.parent107, 0, !dbg !5031
  br i1 %70, label %result_block108, label %check_subtype103, !dbg !5031

result_block108:                                  ; preds = %parent_type_block105, %check_subtype103
  %71 = phi i1 [ false, %parent_type_block105 ], [ true, %check_subtype103 ], !dbg !5031
  br i1 %71, label %switch.case109, label %next_if124, !dbg !5031

switch.case109:                                   ; preds = %result_block108
    #dbg_declare(ptr %arg110, !5032, !DIExpression(), !5034)
  %72 = load ptr, ptr %arg, align 8, !dbg !5034
  store ptr %72, ptr %arg110, align 8, !dbg !5034
  %73 = load ptr, ptr %arg110, align 8, !dbg !5035
  %checknull112 = icmp eq ptr %73, null, !dbg !5035
  %74 = call i1 @llvm.expect.i1(i1 %checknull112, i1 false), !dbg !5035
  br i1 %74, label %panic113, label %checkok114, !dbg !5035

checkok114:                                       ; preds = %switch.case109
  %75 = ptrtoint ptr %73 to i64, !dbg !5035
  %76 = urem i64 %75, 8, !dbg !5035
  %77 = icmp ne i64 %76, 0, !dbg !5035
  %78 = call i1 @llvm.expect.i1(i1 %77, i1 false), !dbg !5035
  br i1 %78, label %panic115, label %checkok122, !dbg !5035

checkok122:                                       ; preds = %checkok114
  %79 = load i64, ptr %73, align 8, !dbg !5035
  %sifp123 = sitofp i64 %79 to double, !dbg !5035
  store double %sifp123, ptr %0, align 8, !dbg !5035
  ret i64 0, !dbg !5035

next_if124:                                       ; preds = %result_block108
  br label %check_subtype125, !dbg !5036

check_subtype125:                                 ; preds = %parent_type_block127, %next_if124
  %80 = phi i64 [ %26, %next_if124 ], [ %typeid.parent129, %parent_type_block127 ], !dbg !5036
  %eq126 = icmp eq i64 ptrtoint (ptr @"$ct.int128" to i64), %80, !dbg !5036
  br i1 %eq126, label %result_block130, label %parent_type_block127, !dbg !5036

parent_type_block127:                             ; preds = %check_subtype125
  %81 = inttoptr i64 %80 to ptr, !dbg !5036
  %ptradd128 = getelementptr inbounds i8, ptr %81, i64 8, !dbg !5036
  %typeid.parent129 = load i64, ptr %ptradd128, align 8, !dbg !5036
  %82 = icmp eq i64 %typeid.parent129, 0, !dbg !5036
  br i1 %82, label %result_block130, label %check_subtype125, !dbg !5036

result_block130:                                  ; preds = %parent_type_block127, %check_subtype125
  %83 = phi i1 [ false, %parent_type_block127 ], [ true, %check_subtype125 ], !dbg !5036
  br i1 %83, label %switch.case131, label %next_if146, !dbg !5036

switch.case131:                                   ; preds = %result_block130
    #dbg_declare(ptr %arg132, !5037, !DIExpression(), !5039)
  %84 = load ptr, ptr %arg, align 8, !dbg !5039
  store ptr %84, ptr %arg132, align 8, !dbg !5039
  %85 = load ptr, ptr %arg132, align 8, !dbg !5040
  %checknull134 = icmp eq ptr %85, null, !dbg !5040
  %86 = call i1 @llvm.expect.i1(i1 %checknull134, i1 false), !dbg !5040
  br i1 %86, label %panic135, label %checkok136, !dbg !5040

checkok136:                                       ; preds = %switch.case131
  %87 = ptrtoint ptr %85 to i64, !dbg !5040
  %88 = urem i64 %87, 16, !dbg !5040
  %89 = icmp ne i64 %88, 0, !dbg !5040
  %90 = call i1 @llvm.expect.i1(i1 %89, i1 false), !dbg !5040
  br i1 %90, label %panic137, label %checkok144, !dbg !5040

checkok144:                                       ; preds = %checkok136
  %91 = load i128, ptr %85, align 16, !dbg !5040
  %sifp145 = sitofp i128 %91 to double, !dbg !5040
  store double %sifp145, ptr %0, align 8, !dbg !5040
  ret i64 0, !dbg !5040

next_if146:                                       ; preds = %result_block130
  br label %check_subtype147, !dbg !5041

check_subtype147:                                 ; preds = %parent_type_block149, %next_if146
  %92 = phi i64 [ %26, %next_if146 ], [ %typeid.parent151, %parent_type_block149 ], !dbg !5041
  %eq148 = icmp eq i64 ptrtoint (ptr @"$ct.char" to i64), %92, !dbg !5041
  br i1 %eq148, label %result_block152, label %parent_type_block149, !dbg !5041

parent_type_block149:                             ; preds = %check_subtype147
  %93 = inttoptr i64 %92 to ptr, !dbg !5041
  %ptradd150 = getelementptr inbounds i8, ptr %93, i64 8, !dbg !5041
  %typeid.parent151 = load i64, ptr %ptradd150, align 8, !dbg !5041
  %94 = icmp eq i64 %typeid.parent151, 0, !dbg !5041
  br i1 %94, label %result_block152, label %check_subtype147, !dbg !5041

result_block152:                                  ; preds = %parent_type_block149, %check_subtype147
  %95 = phi i1 [ false, %parent_type_block149 ], [ true, %check_subtype147 ], !dbg !5041
  br i1 %95, label %switch.case153, label %next_if160, !dbg !5041

switch.case153:                                   ; preds = %result_block152
    #dbg_declare(ptr %arg154, !5042, !DIExpression(), !5044)
  %96 = load ptr, ptr %arg, align 8, !dbg !5044
  store ptr %96, ptr %arg154, align 8, !dbg !5044
  %97 = load ptr, ptr %arg154, align 8, !dbg !5045
  %checknull156 = icmp eq ptr %97, null, !dbg !5045
  %98 = call i1 @llvm.expect.i1(i1 %checknull156, i1 false), !dbg !5045
  br i1 %98, label %panic157, label %checkok158, !dbg !5045

checkok158:                                       ; preds = %switch.case153
  %99 = load i8, ptr %97, align 1, !dbg !5045
  %uifp159 = uitofp i8 %99 to double, !dbg !5045
  store double %uifp159, ptr %0, align 8, !dbg !5045
  ret i64 0, !dbg !5045

next_if160:                                       ; preds = %result_block152
  br label %check_subtype161, !dbg !5046

check_subtype161:                                 ; preds = %parent_type_block163, %next_if160
  %100 = phi i64 [ %26, %next_if160 ], [ %typeid.parent165, %parent_type_block163 ], !dbg !5046
  %eq162 = icmp eq i64 ptrtoint (ptr @"$ct.ushort" to i64), %100, !dbg !5046
  br i1 %eq162, label %result_block166, label %parent_type_block163, !dbg !5046

parent_type_block163:                             ; preds = %check_subtype161
  %101 = inttoptr i64 %100 to ptr, !dbg !5046
  %ptradd164 = getelementptr inbounds i8, ptr %101, i64 8, !dbg !5046
  %typeid.parent165 = load i64, ptr %ptradd164, align 8, !dbg !5046
  %102 = icmp eq i64 %typeid.parent165, 0, !dbg !5046
  br i1 %102, label %result_block166, label %check_subtype161, !dbg !5046

result_block166:                                  ; preds = %parent_type_block163, %check_subtype161
  %103 = phi i1 [ false, %parent_type_block163 ], [ true, %check_subtype161 ], !dbg !5046
  br i1 %103, label %switch.case167, label %next_if182, !dbg !5046

switch.case167:                                   ; preds = %result_block166
    #dbg_declare(ptr %arg168, !5047, !DIExpression(), !5049)
  %104 = load ptr, ptr %arg, align 8, !dbg !5049
  store ptr %104, ptr %arg168, align 8, !dbg !5049
  %105 = load ptr, ptr %arg168, align 8, !dbg !5050
  %checknull170 = icmp eq ptr %105, null, !dbg !5050
  %106 = call i1 @llvm.expect.i1(i1 %checknull170, i1 false), !dbg !5050
  br i1 %106, label %panic171, label %checkok172, !dbg !5050

checkok172:                                       ; preds = %switch.case167
  %107 = ptrtoint ptr %105 to i64, !dbg !5050
  %108 = urem i64 %107, 2, !dbg !5050
  %109 = icmp ne i64 %108, 0, !dbg !5050
  %110 = call i1 @llvm.expect.i1(i1 %109, i1 false), !dbg !5050
  br i1 %110, label %panic173, label %checkok180, !dbg !5050

checkok180:                                       ; preds = %checkok172
  %111 = load i16, ptr %105, align 2, !dbg !5050
  %uifp181 = uitofp i16 %111 to double, !dbg !5050
  store double %uifp181, ptr %0, align 8, !dbg !5050
  ret i64 0, !dbg !5050

next_if182:                                       ; preds = %result_block166
  br label %check_subtype183, !dbg !5051

check_subtype183:                                 ; preds = %parent_type_block185, %next_if182
  %112 = phi i64 [ %26, %next_if182 ], [ %typeid.parent187, %parent_type_block185 ], !dbg !5051
  %eq184 = icmp eq i64 ptrtoint (ptr @"$ct.uint" to i64), %112, !dbg !5051
  br i1 %eq184, label %result_block188, label %parent_type_block185, !dbg !5051

parent_type_block185:                             ; preds = %check_subtype183
  %113 = inttoptr i64 %112 to ptr, !dbg !5051
  %ptradd186 = getelementptr inbounds i8, ptr %113, i64 8, !dbg !5051
  %typeid.parent187 = load i64, ptr %ptradd186, align 8, !dbg !5051
  %114 = icmp eq i64 %typeid.parent187, 0, !dbg !5051
  br i1 %114, label %result_block188, label %check_subtype183, !dbg !5051

result_block188:                                  ; preds = %parent_type_block185, %check_subtype183
  %115 = phi i1 [ false, %parent_type_block185 ], [ true, %check_subtype183 ], !dbg !5051
  br i1 %115, label %switch.case189, label %next_if204, !dbg !5051

switch.case189:                                   ; preds = %result_block188
    #dbg_declare(ptr %arg190, !5052, !DIExpression(), !5054)
  %116 = load ptr, ptr %arg, align 8, !dbg !5054
  store ptr %116, ptr %arg190, align 8, !dbg !5054
  %117 = load ptr, ptr %arg190, align 8, !dbg !5055
  %checknull192 = icmp eq ptr %117, null, !dbg !5055
  %118 = call i1 @llvm.expect.i1(i1 %checknull192, i1 false), !dbg !5055
  br i1 %118, label %panic193, label %checkok194, !dbg !5055

checkok194:                                       ; preds = %switch.case189
  %119 = ptrtoint ptr %117 to i64, !dbg !5055
  %120 = urem i64 %119, 4, !dbg !5055
  %121 = icmp ne i64 %120, 0, !dbg !5055
  %122 = call i1 @llvm.expect.i1(i1 %121, i1 false), !dbg !5055
  br i1 %122, label %panic195, label %checkok202, !dbg !5055

checkok202:                                       ; preds = %checkok194
  %123 = load i32, ptr %117, align 4, !dbg !5055
  %uifp203 = uitofp i32 %123 to double, !dbg !5055
  store double %uifp203, ptr %0, align 8, !dbg !5055
  ret i64 0, !dbg !5055

next_if204:                                       ; preds = %result_block188
  br label %check_subtype205, !dbg !5056

check_subtype205:                                 ; preds = %parent_type_block207, %next_if204
  %124 = phi i64 [ %26, %next_if204 ], [ %typeid.parent209, %parent_type_block207 ], !dbg !5056
  %eq206 = icmp eq i64 ptrtoint (ptr @"$ct.ulong" to i64), %124, !dbg !5056
  br i1 %eq206, label %result_block210, label %parent_type_block207, !dbg !5056

parent_type_block207:                             ; preds = %check_subtype205
  %125 = inttoptr i64 %124 to ptr, !dbg !5056
  %ptradd208 = getelementptr inbounds i8, ptr %125, i64 8, !dbg !5056
  %typeid.parent209 = load i64, ptr %ptradd208, align 8, !dbg !5056
  %126 = icmp eq i64 %typeid.parent209, 0, !dbg !5056
  br i1 %126, label %result_block210, label %check_subtype205, !dbg !5056

result_block210:                                  ; preds = %parent_type_block207, %check_subtype205
  %127 = phi i1 [ false, %parent_type_block207 ], [ true, %check_subtype205 ], !dbg !5056
  br i1 %127, label %switch.case211, label %next_if226, !dbg !5056

switch.case211:                                   ; preds = %result_block210
    #dbg_declare(ptr %arg212, !5057, !DIExpression(), !5059)
  %128 = load ptr, ptr %arg, align 8, !dbg !5059
  store ptr %128, ptr %arg212, align 8, !dbg !5059
  %129 = load ptr, ptr %arg212, align 8, !dbg !5060
  %checknull214 = icmp eq ptr %129, null, !dbg !5060
  %130 = call i1 @llvm.expect.i1(i1 %checknull214, i1 false), !dbg !5060
  br i1 %130, label %panic215, label %checkok216, !dbg !5060

checkok216:                                       ; preds = %switch.case211
  %131 = ptrtoint ptr %129 to i64, !dbg !5060
  %132 = urem i64 %131, 8, !dbg !5060
  %133 = icmp ne i64 %132, 0, !dbg !5060
  %134 = call i1 @llvm.expect.i1(i1 %133, i1 false), !dbg !5060
  br i1 %134, label %panic217, label %checkok224, !dbg !5060

checkok224:                                       ; preds = %checkok216
  %135 = load i64, ptr %129, align 8, !dbg !5060
  %uifp225 = uitofp i64 %135 to double, !dbg !5060
  store double %uifp225, ptr %0, align 8, !dbg !5060
  ret i64 0, !dbg !5060

next_if226:                                       ; preds = %result_block210
  br label %check_subtype227, !dbg !5061

check_subtype227:                                 ; preds = %parent_type_block229, %next_if226
  %136 = phi i64 [ %26, %next_if226 ], [ %typeid.parent231, %parent_type_block229 ], !dbg !5061
  %eq228 = icmp eq i64 ptrtoint (ptr @"$ct.uint128" to i64), %136, !dbg !5061
  br i1 %eq228, label %result_block232, label %parent_type_block229, !dbg !5061

parent_type_block229:                             ; preds = %check_subtype227
  %137 = inttoptr i64 %136 to ptr, !dbg !5061
  %ptradd230 = getelementptr inbounds i8, ptr %137, i64 8, !dbg !5061
  %typeid.parent231 = load i64, ptr %ptradd230, align 8, !dbg !5061
  %138 = icmp eq i64 %typeid.parent231, 0, !dbg !5061
  br i1 %138, label %result_block232, label %check_subtype227, !dbg !5061

result_block232:                                  ; preds = %parent_type_block229, %check_subtype227
  %139 = phi i1 [ false, %parent_type_block229 ], [ true, %check_subtype227 ], !dbg !5061
  br i1 %139, label %switch.case233, label %next_if248, !dbg !5061

switch.case233:                                   ; preds = %result_block232
    #dbg_declare(ptr %arg234, !5062, !DIExpression(), !5064)
  %140 = load ptr, ptr %arg, align 8, !dbg !5064
  store ptr %140, ptr %arg234, align 8, !dbg !5064
  %141 = load ptr, ptr %arg234, align 8, !dbg !5065
  %checknull236 = icmp eq ptr %141, null, !dbg !5065
  %142 = call i1 @llvm.expect.i1(i1 %checknull236, i1 false), !dbg !5065
  br i1 %142, label %panic237, label %checkok238, !dbg !5065

checkok238:                                       ; preds = %switch.case233
  %143 = ptrtoint ptr %141 to i64, !dbg !5065
  %144 = urem i64 %143, 16, !dbg !5065
  %145 = icmp ne i64 %144, 0, !dbg !5065
  %146 = call i1 @llvm.expect.i1(i1 %145, i1 false), !dbg !5065
  br i1 %146, label %panic239, label %checkok246, !dbg !5065

checkok246:                                       ; preds = %checkok238
  %147 = load i128, ptr %141, align 16, !dbg !5065
  %uifp247 = uitofp i128 %147 to double, !dbg !5065
  store double %uifp247, ptr %0, align 8, !dbg !5065
  ret i64 0, !dbg !5065

next_if248:                                       ; preds = %result_block232
  br label %check_subtype249, !dbg !5066

check_subtype249:                                 ; preds = %parent_type_block251, %next_if248
  %148 = phi i64 [ %26, %next_if248 ], [ %typeid.parent253, %parent_type_block251 ], !dbg !5066
  %eq250 = icmp eq i64 ptrtoint (ptr @"$ct.float" to i64), %148, !dbg !5066
  br i1 %eq250, label %result_block254, label %parent_type_block251, !dbg !5066

parent_type_block251:                             ; preds = %check_subtype249
  %149 = inttoptr i64 %148 to ptr, !dbg !5066
  %ptradd252 = getelementptr inbounds i8, ptr %149, i64 8, !dbg !5066
  %typeid.parent253 = load i64, ptr %ptradd252, align 8, !dbg !5066
  %150 = icmp eq i64 %typeid.parent253, 0, !dbg !5066
  br i1 %150, label %result_block254, label %check_subtype249, !dbg !5066

result_block254:                                  ; preds = %parent_type_block251, %check_subtype249
  %151 = phi i1 [ false, %parent_type_block251 ], [ true, %check_subtype249 ], !dbg !5066
  br i1 %151, label %switch.case255, label %next_if269, !dbg !5066

switch.case255:                                   ; preds = %result_block254
    #dbg_declare(ptr %arg256, !5067, !DIExpression(), !5069)
  %152 = load ptr, ptr %arg, align 8, !dbg !5069
  store ptr %152, ptr %arg256, align 8, !dbg !5069
  %153 = load ptr, ptr %arg256, align 8, !dbg !5070
  %checknull258 = icmp eq ptr %153, null, !dbg !5070
  %154 = call i1 @llvm.expect.i1(i1 %checknull258, i1 false), !dbg !5070
  br i1 %154, label %panic259, label %checkok260, !dbg !5070

checkok260:                                       ; preds = %switch.case255
  %155 = ptrtoint ptr %153 to i64, !dbg !5070
  %156 = urem i64 %155, 4, !dbg !5070
  %157 = icmp ne i64 %156, 0, !dbg !5070
  %158 = call i1 @llvm.expect.i1(i1 %157, i1 false), !dbg !5070
  br i1 %158, label %panic261, label %checkok268, !dbg !5070

checkok268:                                       ; preds = %checkok260
  %159 = load float, ptr %153, align 4, !dbg !5070
  %fpfpext = fpext float %159 to double, !dbg !5070
  store double %fpfpext, ptr %0, align 8, !dbg !5070
  ret i64 0, !dbg !5070

next_if269:                                       ; preds = %result_block254
  br label %check_subtype270, !dbg !5071

check_subtype270:                                 ; preds = %parent_type_block272, %next_if269
  %160 = phi i64 [ %26, %next_if269 ], [ %typeid.parent274, %parent_type_block272 ], !dbg !5071
  %eq271 = icmp eq i64 ptrtoint (ptr @"$ct.double" to i64), %160, !dbg !5071
  br i1 %eq271, label %result_block275, label %parent_type_block272, !dbg !5071

parent_type_block272:                             ; preds = %check_subtype270
  %161 = inttoptr i64 %160 to ptr, !dbg !5071
  %ptradd273 = getelementptr inbounds i8, ptr %161, i64 8, !dbg !5071
  %typeid.parent274 = load i64, ptr %ptradd273, align 8, !dbg !5071
  %162 = icmp eq i64 %typeid.parent274, 0, !dbg !5071
  br i1 %162, label %result_block275, label %check_subtype270, !dbg !5071

result_block275:                                  ; preds = %parent_type_block272, %check_subtype270
  %163 = phi i1 [ false, %parent_type_block272 ], [ true, %check_subtype270 ], !dbg !5071
  br i1 %163, label %switch.case276, label %next_if290, !dbg !5071

switch.case276:                                   ; preds = %result_block275
    #dbg_declare(ptr %arg277, !5072, !DIExpression(), !5074)
  %164 = load ptr, ptr %arg, align 8, !dbg !5074
  store ptr %164, ptr %arg277, align 8, !dbg !5074
  %165 = load ptr, ptr %arg277, align 8, !dbg !5075
  %checknull279 = icmp eq ptr %165, null, !dbg !5075
  %166 = call i1 @llvm.expect.i1(i1 %checknull279, i1 false), !dbg !5075
  br i1 %166, label %panic280, label %checkok281, !dbg !5075

checkok281:                                       ; preds = %switch.case276
  %167 = ptrtoint ptr %165 to i64, !dbg !5075
  %168 = urem i64 %167, 8, !dbg !5075
  %169 = icmp ne i64 %168, 0, !dbg !5075
  %170 = call i1 @llvm.expect.i1(i1 %169, i1 false), !dbg !5075
  br i1 %170, label %panic282, label %checkok289, !dbg !5075

checkok289:                                       ; preds = %checkok281
  %171 = load double, ptr %165, align 8, !dbg !5075
  store double %171, ptr %0, align 8, !dbg !5075
  ret i64 0, !dbg !5075

next_if290:                                       ; preds = %result_block275
  br label %switch.default, !dbg !5075

switch.default:                                   ; preds = %next_if290
  ret i64 ptrtoint (ptr @"std.io.FormattingFault$BAD_FORMAT" to i64), !dbg !5076

panic:                                            ; preds = %if.then
  %172 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5003
  call void %172(ptr @.panic_msg.36, i64 45, ptr @.file.50, i64 10, ptr @.func.221, i64 14, i32 199) #5, !dbg !5003
  unreachable, !dbg !5003

panic2:                                           ; preds = %checkok
  store i64 8, ptr %taddr, align 8
  %173 = insertvalue %any undef, ptr %taddr, 0
  %174 = insertvalue %any %173, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr3, align 8
  %175 = insertvalue %any undef, ptr %taddr3, 0
  %176 = insertvalue %any %175, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %174, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %176, ptr %ptradd4, align 16
  %177 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %177, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.50, i64 10, ptr @.func.221, i64 14, i32 199, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !5003
  unreachable, !dbg !5003

panic7:                                           ; preds = %checkok5
  %178 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5007
  call void %178(ptr @.panic_msg.36, i64 45, ptr @.file.50, i64 10, ptr @.func.221, i64 14, i32 199) #5, !dbg !5007
  unreachable, !dbg !5007

panic9:                                           ; preds = %checkok8
  store i64 8, ptr %taddr10, align 8
  %179 = insertvalue %any undef, ptr %taddr10, 0
  %180 = insertvalue %any %179, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr11, align 8
  %181 = insertvalue %any undef, ptr %taddr11, 0
  %182 = insertvalue %any %181, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %180, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %182, ptr %ptradd13, align 16
  %183 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %183, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.50, i64 10, ptr @.func.221, i64 14, i32 199, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !5007
  unreachable, !dbg !5007

panic44:                                          ; preds = %switch.case
  %184 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5015
  call void %184(ptr @.panic_msg.220, i64 44, ptr @.file.215, i64 20, ptr @.func.221, i64 14, i32 107) #5, !dbg !5015
  unreachable, !dbg !5015

panic56:                                          ; preds = %switch.case52
  %185 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5020
  call void %185(ptr @.panic_msg.220, i64 44, ptr @.file.215, i64 20, ptr @.func.221, i64 14, i32 109) #5, !dbg !5020
  unreachable, !dbg !5020

panic69:                                          ; preds = %switch.case65
  %186 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5025
  call void %186(ptr @.panic_msg.220, i64 44, ptr @.file.215, i64 20, ptr @.func.221, i64 14, i32 111) #5, !dbg !5025
  unreachable, !dbg !5025

panic71:                                          ; preds = %checkok70
  store i64 2, ptr %taddr72, align 8
  %187 = insertvalue %any undef, ptr %taddr72, 0
  %188 = insertvalue %any %187, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %52, ptr %taddr73, align 8
  %189 = insertvalue %any undef, ptr %taddr73, 0
  %190 = insertvalue %any %189, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %188, ptr %varargslots74, align 16
  %ptradd75 = getelementptr inbounds i8, ptr %varargslots74, i64 16
  store %any %190, ptr %ptradd75, align 16
  %191 = insertvalue %"any[]" undef, ptr %varargslots74, 0
  %"$$temp76" = insertvalue %"any[]" %191, i64 2, 1
  store %"any[]" %"$$temp76", ptr %indirectarg77, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.221, i64 14, i32 111, ptr byval(%"any[]") align 8 %indirectarg77) #5, !dbg !5025
  unreachable, !dbg !5025

panic91:                                          ; preds = %switch.case87
  %192 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5030
  call void %192(ptr @.panic_msg.220, i64 44, ptr @.file.215, i64 20, ptr @.func.221, i64 14, i32 113) #5, !dbg !5030
  unreachable, !dbg !5030

panic93:                                          ; preds = %checkok92
  store i64 4, ptr %taddr94, align 8
  %193 = insertvalue %any undef, ptr %taddr94, 0
  %194 = insertvalue %any %193, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %64, ptr %taddr95, align 8
  %195 = insertvalue %any undef, ptr %taddr95, 0
  %196 = insertvalue %any %195, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %194, ptr %varargslots96, align 16
  %ptradd97 = getelementptr inbounds i8, ptr %varargslots96, i64 16
  store %any %196, ptr %ptradd97, align 16
  %197 = insertvalue %"any[]" undef, ptr %varargslots96, 0
  %"$$temp98" = insertvalue %"any[]" %197, i64 2, 1
  store %"any[]" %"$$temp98", ptr %indirectarg99, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.221, i64 14, i32 113, ptr byval(%"any[]") align 8 %indirectarg99) #5, !dbg !5030
  unreachable, !dbg !5030

panic113:                                         ; preds = %switch.case109
  %198 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5035
  call void %198(ptr @.panic_msg.220, i64 44, ptr @.file.215, i64 20, ptr @.func.221, i64 14, i32 115) #5, !dbg !5035
  unreachable, !dbg !5035

panic115:                                         ; preds = %checkok114
  store i64 8, ptr %taddr116, align 8
  %199 = insertvalue %any undef, ptr %taddr116, 0
  %200 = insertvalue %any %199, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %76, ptr %taddr117, align 8
  %201 = insertvalue %any undef, ptr %taddr117, 0
  %202 = insertvalue %any %201, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %200, ptr %varargslots118, align 16
  %ptradd119 = getelementptr inbounds i8, ptr %varargslots118, i64 16
  store %any %202, ptr %ptradd119, align 16
  %203 = insertvalue %"any[]" undef, ptr %varargslots118, 0
  %"$$temp120" = insertvalue %"any[]" %203, i64 2, 1
  store %"any[]" %"$$temp120", ptr %indirectarg121, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.221, i64 14, i32 115, ptr byval(%"any[]") align 8 %indirectarg121) #5, !dbg !5035
  unreachable, !dbg !5035

panic135:                                         ; preds = %switch.case131
  %204 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5040
  call void %204(ptr @.panic_msg.220, i64 44, ptr @.file.215, i64 20, ptr @.func.221, i64 14, i32 117) #5, !dbg !5040
  unreachable, !dbg !5040

panic137:                                         ; preds = %checkok136
  store i64 16, ptr %taddr138, align 8
  %205 = insertvalue %any undef, ptr %taddr138, 0
  %206 = insertvalue %any %205, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %88, ptr %taddr139, align 8
  %207 = insertvalue %any undef, ptr %taddr139, 0
  %208 = insertvalue %any %207, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %206, ptr %varargslots140, align 16
  %ptradd141 = getelementptr inbounds i8, ptr %varargslots140, i64 16
  store %any %208, ptr %ptradd141, align 16
  %209 = insertvalue %"any[]" undef, ptr %varargslots140, 0
  %"$$temp142" = insertvalue %"any[]" %209, i64 2, 1
  store %"any[]" %"$$temp142", ptr %indirectarg143, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.221, i64 14, i32 117, ptr byval(%"any[]") align 8 %indirectarg143) #5, !dbg !5040
  unreachable, !dbg !5040

panic157:                                         ; preds = %switch.case153
  %210 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5045
  call void %210(ptr @.panic_msg.220, i64 44, ptr @.file.215, i64 20, ptr @.func.221, i64 14, i32 119) #5, !dbg !5045
  unreachable, !dbg !5045

panic171:                                         ; preds = %switch.case167
  %211 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5050
  call void %211(ptr @.panic_msg.220, i64 44, ptr @.file.215, i64 20, ptr @.func.221, i64 14, i32 121) #5, !dbg !5050
  unreachable, !dbg !5050

panic173:                                         ; preds = %checkok172
  store i64 2, ptr %taddr174, align 8
  %212 = insertvalue %any undef, ptr %taddr174, 0
  %213 = insertvalue %any %212, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %108, ptr %taddr175, align 8
  %214 = insertvalue %any undef, ptr %taddr175, 0
  %215 = insertvalue %any %214, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %213, ptr %varargslots176, align 16
  %ptradd177 = getelementptr inbounds i8, ptr %varargslots176, i64 16
  store %any %215, ptr %ptradd177, align 16
  %216 = insertvalue %"any[]" undef, ptr %varargslots176, 0
  %"$$temp178" = insertvalue %"any[]" %216, i64 2, 1
  store %"any[]" %"$$temp178", ptr %indirectarg179, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.221, i64 14, i32 121, ptr byval(%"any[]") align 8 %indirectarg179) #5, !dbg !5050
  unreachable, !dbg !5050

panic193:                                         ; preds = %switch.case189
  %217 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5055
  call void %217(ptr @.panic_msg.220, i64 44, ptr @.file.215, i64 20, ptr @.func.221, i64 14, i32 123) #5, !dbg !5055
  unreachable, !dbg !5055

panic195:                                         ; preds = %checkok194
  store i64 4, ptr %taddr196, align 8
  %218 = insertvalue %any undef, ptr %taddr196, 0
  %219 = insertvalue %any %218, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %120, ptr %taddr197, align 8
  %220 = insertvalue %any undef, ptr %taddr197, 0
  %221 = insertvalue %any %220, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %219, ptr %varargslots198, align 16
  %ptradd199 = getelementptr inbounds i8, ptr %varargslots198, i64 16
  store %any %221, ptr %ptradd199, align 16
  %222 = insertvalue %"any[]" undef, ptr %varargslots198, 0
  %"$$temp200" = insertvalue %"any[]" %222, i64 2, 1
  store %"any[]" %"$$temp200", ptr %indirectarg201, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.221, i64 14, i32 123, ptr byval(%"any[]") align 8 %indirectarg201) #5, !dbg !5055
  unreachable, !dbg !5055

panic215:                                         ; preds = %switch.case211
  %223 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5060
  call void %223(ptr @.panic_msg.220, i64 44, ptr @.file.215, i64 20, ptr @.func.221, i64 14, i32 125) #5, !dbg !5060
  unreachable, !dbg !5060

panic217:                                         ; preds = %checkok216
  store i64 8, ptr %taddr218, align 8
  %224 = insertvalue %any undef, ptr %taddr218, 0
  %225 = insertvalue %any %224, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %132, ptr %taddr219, align 8
  %226 = insertvalue %any undef, ptr %taddr219, 0
  %227 = insertvalue %any %226, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %225, ptr %varargslots220, align 16
  %ptradd221 = getelementptr inbounds i8, ptr %varargslots220, i64 16
  store %any %227, ptr %ptradd221, align 16
  %228 = insertvalue %"any[]" undef, ptr %varargslots220, 0
  %"$$temp222" = insertvalue %"any[]" %228, i64 2, 1
  store %"any[]" %"$$temp222", ptr %indirectarg223, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.221, i64 14, i32 125, ptr byval(%"any[]") align 8 %indirectarg223) #5, !dbg !5060
  unreachable, !dbg !5060

panic237:                                         ; preds = %switch.case233
  %229 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5065
  call void %229(ptr @.panic_msg.220, i64 44, ptr @.file.215, i64 20, ptr @.func.221, i64 14, i32 127) #5, !dbg !5065
  unreachable, !dbg !5065

panic239:                                         ; preds = %checkok238
  store i64 16, ptr %taddr240, align 8
  %230 = insertvalue %any undef, ptr %taddr240, 0
  %231 = insertvalue %any %230, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %144, ptr %taddr241, align 8
  %232 = insertvalue %any undef, ptr %taddr241, 0
  %233 = insertvalue %any %232, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %231, ptr %varargslots242, align 16
  %ptradd243 = getelementptr inbounds i8, ptr %varargslots242, i64 16
  store %any %233, ptr %ptradd243, align 16
  %234 = insertvalue %"any[]" undef, ptr %varargslots242, 0
  %"$$temp244" = insertvalue %"any[]" %234, i64 2, 1
  store %"any[]" %"$$temp244", ptr %indirectarg245, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.221, i64 14, i32 127, ptr byval(%"any[]") align 8 %indirectarg245) #5, !dbg !5065
  unreachable, !dbg !5065

panic259:                                         ; preds = %switch.case255
  %235 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5070
  call void %235(ptr @.panic_msg.220, i64 44, ptr @.file.215, i64 20, ptr @.func.221, i64 14, i32 129) #5, !dbg !5070
  unreachable, !dbg !5070

panic261:                                         ; preds = %checkok260
  store i64 4, ptr %taddr262, align 8
  %236 = insertvalue %any undef, ptr %taddr262, 0
  %237 = insertvalue %any %236, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %156, ptr %taddr263, align 8
  %238 = insertvalue %any undef, ptr %taddr263, 0
  %239 = insertvalue %any %238, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %237, ptr %varargslots264, align 16
  %ptradd265 = getelementptr inbounds i8, ptr %varargslots264, i64 16
  store %any %239, ptr %ptradd265, align 16
  %240 = insertvalue %"any[]" undef, ptr %varargslots264, 0
  %"$$temp266" = insertvalue %"any[]" %240, i64 2, 1
  store %"any[]" %"$$temp266", ptr %indirectarg267, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.221, i64 14, i32 129, ptr byval(%"any[]") align 8 %indirectarg267) #5, !dbg !5070
  unreachable, !dbg !5070

panic280:                                         ; preds = %switch.case276
  %241 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5075
  call void %241(ptr @.panic_msg.220, i64 44, ptr @.file.215, i64 20, ptr @.func.221, i64 14, i32 131) #5, !dbg !5075
  unreachable, !dbg !5075

panic282:                                         ; preds = %checkok281
  store i64 8, ptr %taddr283, align 8
  %242 = insertvalue %any undef, ptr %taddr283, 0
  %243 = insertvalue %any %242, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %168, ptr %taddr284, align 8
  %244 = insertvalue %any undef, ptr %taddr284, 0
  %245 = insertvalue %any %244, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %243, ptr %varargslots285, align 16
  %ptradd286 = getelementptr inbounds i8, ptr %varargslots285, i64 16
  store %any %245, ptr %ptradd286, align 16
  %246 = insertvalue %"any[]" undef, ptr %varargslots285, 0
  %"$$temp287" = insertvalue %"any[]" %246, i64 2, 1
  store %"any[]" %"$$temp287", ptr %indirectarg288, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.221, i64 14, i32 131, ptr byval(%"any[]") align 8 %indirectarg288) #5, !dbg !5075
  unreachable, !dbg !5075
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @std.io.simple_atoi(ptr %0, i64 %1, ptr %2) #0 !dbg !5078 {
entry:
  %buf = alloca ptr, align 8
  %maxlen = alloca i64, align 8
  %len_ptr = alloca ptr, align 8
  %i = alloca i32, align 4
  %len = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %c = alloca i8, align 1
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  store ptr %0, ptr %buf, align 8
    #dbg_declare(ptr %buf, !5081, !DIExpression(), !5082)
  store i64 %1, ptr %maxlen, align 8
    #dbg_declare(ptr %maxlen, !5083, !DIExpression(), !5084)
  store ptr %2, ptr %len_ptr, align 8
    #dbg_declare(ptr %len_ptr, !5085, !DIExpression(), !5086)
    #dbg_declare(ptr %i, !5087, !DIExpression(), !5088)
  store i32 0, ptr %i, align 4, !dbg !5089
    #dbg_declare(ptr %len, !5090, !DIExpression(), !5091)
  %3 = load ptr, ptr %len_ptr, align 8, !dbg !5092
  %checknull = icmp eq ptr %3, null, !dbg !5092
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !5092
  br i1 %4, label %panic, label %checkok, !dbg !5092

checkok:                                          ; preds = %entry
  %5 = ptrtoint ptr %3 to i64, !dbg !5092
  %6 = urem i64 %5, 8, !dbg !5092
  %7 = icmp ne i64 %6, 0, !dbg !5092
  %8 = call i1 @llvm.expect.i1(i1 %7, i1 false), !dbg !5092
  br i1 %8, label %panic1, label %checkok3, !dbg !5092

checkok3:                                         ; preds = %checkok
  %9 = load i64, ptr %3, align 8, !dbg !5092
  store i64 %9, ptr %len, align 8, !dbg !5092
  br label %loop.cond, !dbg !5093

loop.cond:                                        ; preds = %if.exit, %checkok3
  %10 = load i64, ptr %len, align 8, !dbg !5094
  %11 = load i64, ptr %maxlen, align 8, !dbg !5096
  %lt = icmp ult i64 %10, %11, !dbg !5094
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !5094

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !5097, !DIExpression(), !5099)
  %12 = load ptr, ptr %buf, align 8, !dbg !5100
  %13 = load i64, ptr %len, align 8, !dbg !5101
  %ptradd4 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !5101
  %14 = load i8, ptr %ptradd4, align 1, !dbg !5101
  store i8 %14, ptr %c, align 1, !dbg !5101
  %15 = load i8, ptr %c, align 1, !dbg !5102
  %16 = call i8 @std.ascii.char.is_digit(i8 zeroext %15), !dbg !5102
  %17 = trunc i8 %16 to i1, !dbg !5102
  %not = xor i1 %17, true, !dbg !5102
  br i1 %not, label %if.then, label %if.exit, !dbg !5102

if.then:                                          ; preds = %loop.body
  br label %loop.exit, !dbg !5103

if.exit:                                          ; preds = %loop.body
  %18 = load i32, ptr %i, align 4, !dbg !5104
  %mul = mul i32 %18, 10, !dbg !5104
  %19 = load i8, ptr %c, align 1, !dbg !5105
  %zext = zext i8 %19 to i32, !dbg !5105
  %add = add i32 %mul, %zext, !dbg !5104
  %sub = sub i32 %add, 48, !dbg !5104
  store i32 %sub, ptr %i, align 4, !dbg !5104
  %20 = load i64, ptr %len, align 8, !dbg !5106
  %add5 = add i64 %20, 1, !dbg !5106
  store i64 %add5, ptr %len, align 8, !dbg !5106
  br label %loop.cond, !dbg !5106

loop.exit:                                        ; preds = %if.then, %loop.cond
  %21 = load ptr, ptr %len_ptr, align 8, !dbg !5107
  %checknull6 = icmp eq ptr %21, null, !dbg !5107
  %22 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !5107
  br i1 %22, label %panic7, label %checkok8, !dbg !5107

checkok8:                                         ; preds = %loop.exit
  %23 = ptrtoint ptr %21 to i64, !dbg !5107
  %24 = urem i64 %23, 8, !dbg !5107
  %25 = icmp ne i64 %24, 0, !dbg !5107
  %26 = call i1 @llvm.expect.i1(i1 %25, i1 false), !dbg !5107
  br i1 %26, label %panic9, label %checkok16, !dbg !5107

checkok16:                                        ; preds = %checkok8
  %27 = load i64, ptr %len, align 8, !dbg !5108
  store i64 %27, ptr %21, align 8, !dbg !5108
  %28 = load i32, ptr %i, align 4, !dbg !5109
  ret i32 %28, !dbg !5109

panic:                                            ; preds = %entry
  %29 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5092
  call void %29(ptr @.panic_msg.222, i64 48, ptr @.file.215, i64 20, ptr @.func.223, i64 11, i32 149) #5, !dbg !5092
  unreachable, !dbg !5092

panic1:                                           ; preds = %checkok
  store i64 8, ptr %taddr, align 8
  %30 = insertvalue %any undef, ptr %taddr, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr2, align 8
  %32 = insertvalue %any undef, ptr %taddr2, 0
  %33 = insertvalue %any %32, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %31, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %33, ptr %ptradd, align 16
  %34 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %34, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.223, i64 11, i32 149, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !5092
  unreachable, !dbg !5092

panic7:                                           ; preds = %loop.exit
  %35 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5107
  call void %35(ptr @.panic_msg.222, i64 48, ptr @.file.215, i64 20, ptr @.func.223, i64 11, i32 157) #5, !dbg !5107
  unreachable, !dbg !5107

panic9:                                           ; preds = %checkok8
  store i64 8, ptr %taddr10, align 8
  %36 = insertvalue %any undef, ptr %taddr10, 0
  %37 = insertvalue %any %36, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr11, align 8
  %38 = insertvalue %any undef, ptr %taddr11, 0
  %39 = insertvalue %any %38, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %37, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %39, ptr %ptradd13, align 16
  %40 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %40, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.223, i64 11, i32 157, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !5107
  unreachable, !dbg !5107
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.fmt_u(i64 %0, i64 %1, ptr %2) #0 comdat !dbg !5110 {
entry:
  %x = alloca i128, align 16
  %s = alloca ptr, align 8
  %y = alloca i64, align 8
  store i64 %0, ptr %x, align 16
  %ptradd = getelementptr inbounds i8, ptr %x, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %x, !5113, !DIExpression(), !5114)
  store ptr %2, ptr %s, align 8
    #dbg_declare(ptr %s, !5115, !DIExpression(), !5116)
  br label %loop.cond, !dbg !5117

loop.cond:                                        ; preds = %checkok, %entry
  %3 = load i128, ptr %x, align 16, !dbg !5118
  %gt = icmp ugt i128 %3, 18446744073709551615, !dbg !5118
  br i1 %gt, label %loop.body, label %loop.exit, !dbg !5118

loop.body:                                        ; preds = %loop.cond
  %4 = load ptr, ptr %s, align 8, !dbg !5120
  %ptradd_any = getelementptr i8, ptr %4, i8 -1, !dbg !5120
  store ptr %ptradd_any, ptr %s, align 8, !dbg !5120
  %checknull = icmp eq ptr %ptradd_any, null, !dbg !5120
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !5120
  br i1 %5, label %panic, label %checkok, !dbg !5120

checkok:                                          ; preds = %loop.body
  %6 = load i128, ptr %x, align 16, !dbg !5121
  %smod = srem i128 %6, 10, !dbg !5122
  %trunc = trunc i128 %smod to i8, !dbg !5122
  %zext = zext i8 %trunc to i32, !dbg !5122
  %add = add i32 48, %zext, !dbg !5123
  %trunc1 = trunc i32 %add to i8, !dbg !5123
  store i8 %trunc1, ptr %ptradd_any, align 1, !dbg !5123
  %7 = load i128, ptr %x, align 16, !dbg !5124
  %udiv = udiv i128 %7, 10, !dbg !5124
  store i128 %udiv, ptr %x, align 16, !dbg !5124
  br label %loop.cond, !dbg !5124

loop.exit:                                        ; preds = %loop.cond
    #dbg_declare(ptr %y, !5125, !DIExpression(), !5127)
  %8 = load i128, ptr %x, align 16, !dbg !5128
  %trunc2 = trunc i128 %8 to i64, !dbg !5128
  store i64 %trunc2, ptr %y, align 8, !dbg !5128
  br label %loop.cond3, !dbg !5128

loop.cond3:                                       ; preds = %checkok8, %loop.exit
  %9 = load i64, ptr %y, align 8, !dbg !5129
  %i2b = icmp ne i64 %9, 0, !dbg !5129
  br i1 %i2b, label %loop.body4, label %loop.exit15, !dbg !5129

loop.body4:                                       ; preds = %loop.cond3
  %10 = load ptr, ptr %s, align 8, !dbg !5130
  %ptradd_any5 = getelementptr i8, ptr %10, i8 -1, !dbg !5130
  store ptr %ptradd_any5, ptr %s, align 8, !dbg !5130
  %checknull6 = icmp eq ptr %ptradd_any5, null, !dbg !5130
  %11 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !5130
  br i1 %11, label %panic7, label %checkok8, !dbg !5130

checkok8:                                         ; preds = %loop.body4
  %12 = load i64, ptr %y, align 8, !dbg !5131
  %smod9 = srem i64 %12, 10, !dbg !5132
  %trunc10 = trunc i64 %smod9 to i8, !dbg !5132
  %zext11 = zext i8 %trunc10 to i32, !dbg !5132
  %add12 = add i32 48, %zext11, !dbg !5133
  %trunc13 = trunc i32 %add12 to i8, !dbg !5133
  store i8 %trunc13, ptr %ptradd_any5, align 1, !dbg !5133
  %13 = load i64, ptr %y, align 8, !dbg !5134
  %udiv14 = udiv i64 %13, 10, !dbg !5134
  store i64 %udiv14, ptr %y, align 8, !dbg !5134
  br label %loop.cond3, !dbg !5134

loop.exit15:                                      ; preds = %loop.cond3
  %14 = load ptr, ptr %s, align 8, !dbg !5135
  ret ptr %14, !dbg !5135

panic:                                            ; preds = %loop.body
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5136
  call void %15(ptr @.panic_msg.224, i64 44, ptr @.file.215, i64 20, ptr @.func.225, i64 5, i32 189) #5, !dbg !5136
  unreachable, !dbg !5136

panic7:                                           ; preds = %loop.body4
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5137
  call void %16(ptr @.panic_msg.224, i64 44, ptr @.file.215, i64 20, ptr @.func.225, i64 5, i32 190) #5, !dbg !5137
  unreachable, !dbg !5137
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.printf_parse_format_field(ptr %0, ptr %1, i64 %2, ptr %3, ptr %4, i64 %5, ptr %6) #0 !dbg !5138 {
entry:
  %args_ptr = alloca ptr, align 8
  %args_len = alloca i64, align 8
  %args_index_ptr = alloca ptr, align 8
  %format_ptr = alloca ptr, align 8
  %format_len = alloca i64, align 8
  %index_ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %reterr6 = alloca i64, align 8
  %len = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %taddr25 = alloca i64, align 8
  %taddr26 = alloca i64, align 8
  %varargslots27 = alloca [2 x %any], align 16
  %indirectarg30 = alloca %"any[]", align 8
  %val = alloca %any, align 8
  %taddr39 = alloca i64, align 8
  %taddr40 = alloca i64, align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %intval = alloca i32, align 4
  %intval.f = alloca i64, align 8
  %v = alloca %any, align 8
  %blockret = alloca i32, align 4
  %any_type = alloca i64, align 8
  %kind = alloca i8, align 1
  %is_mixed_signed = alloca i8, align 1
  %max = alloca i32, align 4
  %min = alloca i32, align 4
  %switch = alloca i64, align 8
  %c62 = alloca i8, align 1
  %s = alloca i16, align 2
  %taddr81 = alloca i64, align 8
  %taddr82 = alloca i64, align 8
  %varargslots83 = alloca [2 x %any], align 16
  %indirectarg86 = alloca %"any[]", align 8
  %i = alloca i32, align 4
  %taddr114 = alloca i64, align 8
  %taddr115 = alloca i64, align 8
  %varargslots116 = alloca [2 x %any], align 16
  %indirectarg119 = alloca %"any[]", align 8
  %l = alloca i64, align 8
  %taddr146 = alloca i64, align 8
  %taddr147 = alloca i64, align 8
  %varargslots148 = alloca [2 x %any], align 16
  %indirectarg151 = alloca %"any[]", align 8
  %i176 = alloca i128, align 16
  %taddr181 = alloca i64, align 8
  %taddr182 = alloca i64, align 8
  %varargslots183 = alloca [2 x %any], align 16
  %indirectarg186 = alloca %"any[]", align 8
  %c212 = alloca i8, align 1
  %s228 = alloca i16, align 2
  %taddr233 = alloca i64, align 8
  %taddr234 = alloca i64, align 8
  %varargslots235 = alloca [2 x %any], align 16
  %indirectarg238 = alloca %"any[]", align 8
  %i261 = alloca i32, align 4
  %taddr266 = alloca i64, align 8
  %taddr267 = alloca i64, align 8
  %varargslots268 = alloca [2 x %any], align 16
  %indirectarg271 = alloca %"any[]", align 8
  %l292 = alloca i64, align 8
  %taddr297 = alloca i64, align 8
  %taddr298 = alloca i64, align 8
  %varargslots299 = alloca [2 x %any], align 16
  %indirectarg302 = alloca %"any[]", align 8
  %i326 = alloca i128, align 16
  %taddr331 = alloca i64, align 8
  %taddr332 = alloca i64, align 8
  %varargslots333 = alloca [2 x %any], align 16
  %indirectarg336 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg354 = alloca %"any[]", align 8
  %reterr355 = alloca i64, align 8
  store ptr %1, ptr %args_ptr, align 8
    #dbg_declare(ptr %args_ptr, !5141, !DIExpression(), !5142)
  store i64 %2, ptr %args_len, align 8
    #dbg_declare(ptr %args_len, !5143, !DIExpression(), !5144)
  store ptr %3, ptr %args_index_ptr, align 8
    #dbg_declare(ptr %args_index_ptr, !5145, !DIExpression(), !5146)
  store ptr %4, ptr %format_ptr, align 8
    #dbg_declare(ptr %format_ptr, !5147, !DIExpression(), !5148)
  store i64 %5, ptr %format_len, align 8
    #dbg_declare(ptr %format_len, !5149, !DIExpression(), !5150)
  store ptr %6, ptr %index_ptr, align 8
    #dbg_declare(ptr %index_ptr, !5151, !DIExpression(), !5152)
    #dbg_declare(ptr %c, !5153, !DIExpression(), !5154)
  %7 = load ptr, ptr %format_ptr, align 8, !dbg !5155
  %8 = load ptr, ptr %index_ptr, align 8, !dbg !5156
  %checknull = icmp eq ptr %8, null, !dbg !5156
  %9 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !5156
  br i1 %9, label %panic, label %checkok, !dbg !5156

checkok:                                          ; preds = %entry
  %10 = ptrtoint ptr %8 to i64, !dbg !5156
  %11 = urem i64 %10, 8, !dbg !5156
  %12 = icmp ne i64 %11, 0, !dbg !5156
  %13 = call i1 @llvm.expect.i1(i1 %12, i1 false), !dbg !5156
  br i1 %13, label %panic1, label %checkok3, !dbg !5156

checkok3:                                         ; preds = %checkok
  %14 = load i64, ptr %8, align 8, !dbg !5156
  %ptradd4 = getelementptr inbounds i8, ptr %7, i64 %14, !dbg !5156
  %15 = load i8, ptr %ptradd4, align 1, !dbg !5156
  store i8 %15, ptr %c, align 1, !dbg !5156
  %16 = load i8, ptr %c, align 1, !dbg !5157
  %17 = call i8 @std.ascii.char.is_digit(i8 zeroext %16), !dbg !5157
  %18 = trunc i8 %17 to i1, !dbg !5157
  br i1 %18, label %if.then, label %if.exit, !dbg !5157

if.then:                                          ; preds = %checkok3
  %19 = load ptr, ptr %format_ptr, align 8, !dbg !5158
  %20 = load i64, ptr %format_len, align 8, !dbg !5158
  %21 = load ptr, ptr %index_ptr, align 8, !dbg !5158
  %22 = call i32 @std.io.simple_atoi(ptr %19, i64 %20, ptr %21) #6, !dbg !5159
  store i32 %22, ptr %0, align 4, !dbg !5159
  ret i64 0, !dbg !5159

if.exit:                                          ; preds = %checkok3
  %23 = load i8, ptr %c, align 1, !dbg !5160
  %neq = icmp ne i8 %23, 42, !dbg !5160
  br i1 %neq, label %if.then5, label %if.exit7, !dbg !5160

if.then5:                                         ; preds = %if.exit
  store i32 0, ptr %0, align 4, !dbg !5161
  ret i64 0, !dbg !5161

if.exit7:                                         ; preds = %if.exit
    #dbg_declare(ptr %len, !5162, !DIExpression(), !5163)
  %24 = load ptr, ptr %index_ptr, align 8, !dbg !5164
  %checknull8 = icmp eq ptr %24, null, !dbg !5164
  %25 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !5164
  br i1 %25, label %panic9, label %checkok10, !dbg !5164

checkok10:                                        ; preds = %if.exit7
  %26 = ptrtoint ptr %24 to i64, !dbg !5164
  %27 = urem i64 %26, 8, !dbg !5164
  %28 = icmp ne i64 %27, 0, !dbg !5164
  %29 = call i1 @llvm.expect.i1(i1 %28, i1 false), !dbg !5164
  br i1 %29, label %panic11, label %checkok18, !dbg !5164

checkok18:                                        ; preds = %checkok10
  %30 = load i64, ptr %24, align 8, !dbg !5165
  %add = add i64 %30, 1, !dbg !5165
  store i64 %add, ptr %24, align 8, !dbg !5165
  store i64 %add, ptr %len, align 8, !dbg !5165
  %31 = load i64, ptr %len, align 8, !dbg !5166
  %32 = load i64, ptr %format_len, align 8, !dbg !5167
  %ge = icmp uge i64 %31, %32, !dbg !5166
  br i1 %ge, label %if.then19, label %if.exit20, !dbg !5166

if.then19:                                        ; preds = %checkok18
  ret i64 ptrtoint (ptr @"std.io.FormattingFault$BAD_FORMAT" to i64), !dbg !5168

if.exit20:                                        ; preds = %checkok18
  %33 = load ptr, ptr %args_index_ptr, align 8, !dbg !5169
  %checknull21 = icmp eq ptr %33, null, !dbg !5169
  %34 = call i1 @llvm.expect.i1(i1 %checknull21, i1 false), !dbg !5169
  br i1 %34, label %panic22, label %checkok23, !dbg !5169

checkok23:                                        ; preds = %if.exit20
  %35 = ptrtoint ptr %33 to i64, !dbg !5169
  %36 = urem i64 %35, 8, !dbg !5169
  %37 = icmp ne i64 %36, 0, !dbg !5169
  %38 = call i1 @llvm.expect.i1(i1 %37, i1 false), !dbg !5169
  br i1 %38, label %panic24, label %checkok31, !dbg !5169

checkok31:                                        ; preds = %checkok23
  %39 = load i64, ptr %33, align 8, !dbg !5169
  %40 = load i64, ptr %args_len, align 8, !dbg !5170
  %ge32 = icmp uge i64 %39, %40, !dbg !5171
  br i1 %ge32, label %if.then33, label %if.exit34, !dbg !5171

if.then33:                                        ; preds = %checkok31
  ret i64 ptrtoint (ptr @"std.io.FormattingFault$BAD_FORMAT" to i64), !dbg !5172

if.exit34:                                        ; preds = %checkok31
    #dbg_declare(ptr %val, !5173, !DIExpression(), !5174)
  %41 = load ptr, ptr %args_ptr, align 8, !dbg !5175
  %42 = load ptr, ptr %args_index_ptr, align 8, !dbg !5176
  %checknull35 = icmp eq ptr %42, null, !dbg !5176
  %43 = call i1 @llvm.expect.i1(i1 %checknull35, i1 false), !dbg !5176
  br i1 %43, label %panic36, label %checkok37, !dbg !5176

checkok37:                                        ; preds = %if.exit34
  %44 = ptrtoint ptr %42 to i64, !dbg !5176
  %45 = urem i64 %44, 8, !dbg !5176
  %46 = icmp ne i64 %45, 0, !dbg !5176
  %47 = call i1 @llvm.expect.i1(i1 %46, i1 false), !dbg !5176
  br i1 %47, label %panic38, label %checkok45, !dbg !5176

checkok45:                                        ; preds = %checkok37
  %48 = load i64, ptr %42, align 8, !dbg !5177
  %add46 = add i64 %48, 1, !dbg !5177
  store i64 %add46, ptr %42, align 8, !dbg !5177
  %ptroffset = getelementptr inbounds [16 x i8], ptr %41, i64 %48, !dbg !5177
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %val, ptr align 8 %ptroffset, i32 16, i1 false), !dbg !5177
  %ptradd47 = getelementptr inbounds i8, ptr %val, i64 8, !dbg !5178
  %49 = load i64, ptr %ptradd47, align 8, !dbg !5178
  %"introspect*" = inttoptr i64 %49 to ptr, !dbg !5178
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !5178
  %50 = call i8 @std.core.types.TypeKind.is_int(i8 zeroext %typeid.kind) #6, !dbg !5178
  %51 = trunc i8 %50 to i1, !dbg !5178
  %not = xor i1 %51, true, !dbg !5178
  br i1 %not, label %if.then48, label %if.exit49, !dbg !5178

if.then48:                                        ; preds = %checkok45
  ret i64 ptrtoint (ptr @"std.io.FormattingFault$BAD_FORMAT" to i64), !dbg !5179

if.exit49:                                        ; preds = %checkok45
    #dbg_declare(ptr %intval, !5180, !DIExpression(), !5181)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %v, ptr align 8 %val, i32 16, i1 false)
  %52 = call i8 @std.core.types.TypeKind.is_int(i8 zeroext 2) #6, !dbg !5182
  %53 = trunc i8 %52 to i1, !dbg !5182
  br i1 %53, label %assert_ok, label %assert_fail, !dbg !5182

assert_fail:                                      ; preds = %if.exit49
  %54 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5182
  call void %54(ptr @.panic_msg.141, i64 69, ptr @.file.142, i64 8, ptr @.func.227, i64 25, i32 22) #5, !dbg !5182
  unreachable, !dbg !5182

assert_ok:                                        ; preds = %if.exit49
  %ptradd50 = getelementptr inbounds i8, ptr %v, i64 8, !dbg !5186
  %55 = load i64, ptr %ptradd50, align 8, !dbg !5186
  %"introspect*51" = inttoptr i64 %55 to ptr, !dbg !5186
  %typeid.kind52 = load i8, ptr %"introspect*51", align 8, !dbg !5186
  %56 = call i8 @std.core.types.TypeKind.is_int(i8 zeroext %typeid.kind52) #6, !dbg !5186
  %57 = trunc i8 %56 to i1, !dbg !5186
  br i1 %57, label %assert_ok54, label %assert_fail53, !dbg !5186

assert_fail53:                                    ; preds = %assert_ok
  %58 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5186
  call void %58(ptr @.panic_msg.145, i64 71, ptr @.file.142, i64 8, ptr @.func.227, i64 25, i32 23) #5, !dbg !5186
  unreachable, !dbg !5186

assert_ok54:                                      ; preds = %assert_ok
    #dbg_declare(ptr %any_type, !5187, !DIExpression(), !5188)
  %ptradd55 = getelementptr inbounds i8, ptr %v, i64 8, !dbg !5189
  %59 = load i64, ptr %ptradd55, align 8, !dbg !5189
  store i64 %59, ptr %any_type, align 8, !dbg !5189
    #dbg_declare(ptr %kind, !5190, !DIExpression(), !5191)
  %60 = load i64, ptr %any_type, align 8, !dbg !5192
  %"introspect*56" = inttoptr i64 %60 to ptr, !dbg !5192
  %typeid.kind57 = load i8, ptr %"introspect*56", align 8, !dbg !5192
  store i8 %typeid.kind57, ptr %kind, align 1, !dbg !5192
    #dbg_declare(ptr %is_mixed_signed, !5193, !DIExpression(), !5194)
  %61 = load i64, ptr %any_type, align 8, !dbg !5195
  %"introspect*58" = inttoptr i64 %61 to ptr, !dbg !5195
  %typeid.kind59 = load i8, ptr %"introspect*58", align 8, !dbg !5195
  %neq60 = icmp ne i8 2, %typeid.kind59, !dbg !5196
  %62 = zext i1 %neq60 to i8, !dbg !5196
  store i8 %62, ptr %is_mixed_signed, align 1, !dbg !5196
    #dbg_declare(ptr %max, !5197, !DIExpression(), !5198)
  store i32 2147483647, ptr %max, align 4, !dbg !5199
    #dbg_declare(ptr %min, !5200, !DIExpression(), !5201)
  store i32 -2147483648, ptr %min, align 4, !dbg !5202
  %63 = load i64, ptr %any_type, align 8
  store i64 %63, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %assert_ok54
  %64 = load i64, ptr %switch, align 8
  br label %check_subtype, !dbg !5203

check_subtype:                                    ; preds = %parent_type_block, %switch.entry
  %65 = phi i64 [ %64, %switch.entry ], [ %typeid.parent, %parent_type_block ], !dbg !5203
  %eq = icmp eq i64 ptrtoint (ptr @"$ct.ichar" to i64), %65, !dbg !5203
  br i1 %eq, label %result_block, label %parent_type_block, !dbg !5203

parent_type_block:                                ; preds = %check_subtype
  %66 = inttoptr i64 %65 to ptr, !dbg !5203
  %ptradd61 = getelementptr inbounds i8, ptr %66, i64 8, !dbg !5203
  %typeid.parent = load i64, ptr %ptradd61, align 8, !dbg !5203
  %67 = icmp eq i64 %typeid.parent, 0, !dbg !5203
  br i1 %67, label %result_block, label %check_subtype, !dbg !5203

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %68 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !5203
  br i1 %68, label %switch.case, label %next_if, !dbg !5203

switch.case:                                      ; preds = %result_block
    #dbg_declare(ptr %c62, !5205, !DIExpression(), !5207)
  %69 = load ptr, ptr %v, align 8, !dbg !5208
  %checknull63 = icmp eq ptr %69, null, !dbg !5208
  %70 = call i1 @llvm.expect.i1(i1 %checknull63, i1 false), !dbg !5208
  br i1 %70, label %panic64, label %checkok65, !dbg !5208

checkok65:                                        ; preds = %switch.case
  %71 = load i8, ptr %69, align 1, !dbg !5209
  store i8 %71, ptr %c62, align 1, !dbg !5209
  %72 = load i8, ptr %is_mixed_signed, align 1, !dbg !5210
  %73 = trunc i8 %72 to i1, !dbg !5210
  br i1 %73, label %and.rhs, label %and.phi, !dbg !5210

and.rhs:                                          ; preds = %checkok65
  %74 = load i8, ptr %c62, align 1, !dbg !5211
  %sext = sext i8 %74 to i32, !dbg !5211
  %lt = icmp slt i32 %sext, 0, !dbg !5211
  br label %and.phi, !dbg !5211

and.phi:                                          ; preds = %and.rhs, %checkok65
  %val66 = phi i1 [ false, %checkok65 ], [ %lt, %and.rhs ], !dbg !5211
  br i1 %val66, label %if.then67, label %if.exit68, !dbg !5211

if.then67:                                        ; preds = %and.phi
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %intval.f, align 8, !dbg !5212
  br label %after_assign, !dbg !5212

if.exit68:                                        ; preds = %and.phi
  %75 = load i8, ptr %c62, align 1, !dbg !5213
  %sext69 = sext i8 %75 to i32, !dbg !5213
  store i32 %sext69, ptr %blockret, align 4, !dbg !5213
  br label %expr_block.exit, !dbg !5213

next_if:                                          ; preds = %result_block
  br label %check_subtype70, !dbg !5214

check_subtype70:                                  ; preds = %parent_type_block72, %next_if
  %76 = phi i64 [ %64, %next_if ], [ %typeid.parent74, %parent_type_block72 ], !dbg !5214
  %eq71 = icmp eq i64 ptrtoint (ptr @"$ct.short" to i64), %76, !dbg !5214
  br i1 %eq71, label %result_block75, label %parent_type_block72, !dbg !5214

parent_type_block72:                              ; preds = %check_subtype70
  %77 = inttoptr i64 %76 to ptr, !dbg !5214
  %ptradd73 = getelementptr inbounds i8, ptr %77, i64 8, !dbg !5214
  %typeid.parent74 = load i64, ptr %ptradd73, align 8, !dbg !5214
  %78 = icmp eq i64 %typeid.parent74, 0, !dbg !5214
  br i1 %78, label %result_block75, label %check_subtype70, !dbg !5214

result_block75:                                   ; preds = %parent_type_block72, %check_subtype70
  %79 = phi i1 [ false, %parent_type_block72 ], [ true, %check_subtype70 ], !dbg !5214
  br i1 %79, label %switch.case76, label %next_if102, !dbg !5214

switch.case76:                                    ; preds = %result_block75
    #dbg_declare(ptr %s, !5215, !DIExpression(), !5217)
  %80 = load ptr, ptr %v, align 8, !dbg !5218
  %checknull77 = icmp eq ptr %80, null, !dbg !5218
  %81 = call i1 @llvm.expect.i1(i1 %checknull77, i1 false), !dbg !5218
  br i1 %81, label %panic78, label %checkok79, !dbg !5218

checkok79:                                        ; preds = %switch.case76
  %82 = ptrtoint ptr %80 to i64, !dbg !5219
  %83 = urem i64 %82, 2, !dbg !5219
  %84 = icmp ne i64 %83, 0, !dbg !5219
  %85 = call i1 @llvm.expect.i1(i1 %84, i1 false), !dbg !5219
  br i1 %85, label %panic80, label %checkok87, !dbg !5219

checkok87:                                        ; preds = %checkok79
  %86 = load i16, ptr %80, align 2, !dbg !5219
  store i16 %86, ptr %s, align 2, !dbg !5219
  %87 = load i8, ptr %is_mixed_signed, align 1, !dbg !5220
  %88 = trunc i8 %87 to i1, !dbg !5220
  br i1 %88, label %and.rhs88, label %and.phi91, !dbg !5220

and.rhs88:                                        ; preds = %checkok87
  %89 = load i16, ptr %s, align 2, !dbg !5221
  %sext89 = sext i16 %89 to i32, !dbg !5221
  %lt90 = icmp slt i32 %sext89, 0, !dbg !5221
  br label %and.phi91, !dbg !5221

and.phi91:                                        ; preds = %and.rhs88, %checkok87
  %val92 = phi i1 [ false, %checkok87 ], [ %lt90, %and.rhs88 ], !dbg !5221
  br i1 %val92, label %if.then93, label %if.exit94, !dbg !5221

if.then93:                                        ; preds = %and.phi91
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %intval.f, align 8, !dbg !5222
  br label %after_assign, !dbg !5222

if.exit94:                                        ; preds = %and.phi91
  %90 = load i16, ptr %s, align 2, !dbg !5223
  %sext95 = sext i16 %90 to i32, !dbg !5223
  %91 = load i32, ptr %max, align 4, !dbg !5224
  %gt = icmp sgt i32 %sext95, %91, !dbg !5223
  br i1 %gt, label %or.phi, label %or.rhs, !dbg !5223

or.rhs:                                           ; preds = %if.exit94
  %92 = load i16, ptr %s, align 2, !dbg !5225
  %sext96 = sext i16 %92 to i32, !dbg !5225
  %93 = load i32, ptr %min, align 4, !dbg !5226
  %lt97 = icmp slt i32 %sext96, %93, !dbg !5225
  br label %or.phi, !dbg !5225

or.phi:                                           ; preds = %or.rhs, %if.exit94
  %val98 = phi i1 [ true, %if.exit94 ], [ %lt97, %or.rhs ], !dbg !5225
  br i1 %val98, label %if.then99, label %if.exit100, !dbg !5225

if.then99:                                        ; preds = %or.phi
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !5227
  br label %after_assign, !dbg !5227

if.exit100:                                       ; preds = %or.phi
  %94 = load i16, ptr %s, align 2, !dbg !5228
  %sext101 = sext i16 %94 to i32, !dbg !5228
  store i32 %sext101, ptr %blockret, align 4, !dbg !5228
  br label %expr_block.exit, !dbg !5228

next_if102:                                       ; preds = %result_block75
  br label %check_subtype103, !dbg !5229

check_subtype103:                                 ; preds = %parent_type_block105, %next_if102
  %95 = phi i64 [ %64, %next_if102 ], [ %typeid.parent107, %parent_type_block105 ], !dbg !5229
  %eq104 = icmp eq i64 ptrtoint (ptr @"$ct.int" to i64), %95, !dbg !5229
  br i1 %eq104, label %result_block108, label %parent_type_block105, !dbg !5229

parent_type_block105:                             ; preds = %check_subtype103
  %96 = inttoptr i64 %95 to ptr, !dbg !5229
  %ptradd106 = getelementptr inbounds i8, ptr %96, i64 8, !dbg !5229
  %typeid.parent107 = load i64, ptr %ptradd106, align 8, !dbg !5229
  %97 = icmp eq i64 %typeid.parent107, 0, !dbg !5229
  br i1 %97, label %result_block108, label %check_subtype103, !dbg !5229

result_block108:                                  ; preds = %parent_type_block105, %check_subtype103
  %98 = phi i1 [ false, %parent_type_block105 ], [ true, %check_subtype103 ], !dbg !5229
  br i1 %98, label %switch.case109, label %next_if134, !dbg !5229

switch.case109:                                   ; preds = %result_block108
    #dbg_declare(ptr %i, !5230, !DIExpression(), !5232)
  %99 = load ptr, ptr %v, align 8, !dbg !5233
  %checknull110 = icmp eq ptr %99, null, !dbg !5233
  %100 = call i1 @llvm.expect.i1(i1 %checknull110, i1 false), !dbg !5233
  br i1 %100, label %panic111, label %checkok112, !dbg !5233

checkok112:                                       ; preds = %switch.case109
  %101 = ptrtoint ptr %99 to i64, !dbg !5234
  %102 = urem i64 %101, 4, !dbg !5234
  %103 = icmp ne i64 %102, 0, !dbg !5234
  %104 = call i1 @llvm.expect.i1(i1 %103, i1 false), !dbg !5234
  br i1 %104, label %panic113, label %checkok120, !dbg !5234

checkok120:                                       ; preds = %checkok112
  %105 = load i32, ptr %99, align 4, !dbg !5234
  store i32 %105, ptr %i, align 4, !dbg !5234
  %106 = load i8, ptr %is_mixed_signed, align 1, !dbg !5235
  %107 = trunc i8 %106 to i1, !dbg !5235
  br i1 %107, label %and.rhs121, label %and.phi123, !dbg !5235

and.rhs121:                                       ; preds = %checkok120
  %108 = load i32, ptr %i, align 4, !dbg !5236
  %lt122 = icmp slt i32 %108, 0, !dbg !5236
  br label %and.phi123, !dbg !5236

and.phi123:                                       ; preds = %and.rhs121, %checkok120
  %val124 = phi i1 [ false, %checkok120 ], [ %lt122, %and.rhs121 ], !dbg !5236
  br i1 %val124, label %if.then125, label %if.exit126, !dbg !5236

if.then125:                                       ; preds = %and.phi123
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %intval.f, align 8, !dbg !5237
  br label %after_assign, !dbg !5237

if.exit126:                                       ; preds = %and.phi123
  %109 = load i32, ptr %i, align 4, !dbg !5238
  %110 = load i32, ptr %max, align 4, !dbg !5239
  %gt127 = icmp sgt i32 %109, %110, !dbg !5238
  br i1 %gt127, label %or.phi130, label %or.rhs128, !dbg !5238

or.rhs128:                                        ; preds = %if.exit126
  %111 = load i32, ptr %i, align 4, !dbg !5240
  %112 = load i32, ptr %min, align 4, !dbg !5241
  %lt129 = icmp slt i32 %111, %112, !dbg !5240
  br label %or.phi130, !dbg !5240

or.phi130:                                        ; preds = %or.rhs128, %if.exit126
  %val131 = phi i1 [ true, %if.exit126 ], [ %lt129, %or.rhs128 ], !dbg !5240
  br i1 %val131, label %if.then132, label %if.exit133, !dbg !5240

if.then132:                                       ; preds = %or.phi130
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !5242
  br label %after_assign, !dbg !5242

if.exit133:                                       ; preds = %or.phi130
  %113 = load i32, ptr %i, align 4, !dbg !5243
  store i32 %113, ptr %blockret, align 4, !dbg !5243
  br label %expr_block.exit, !dbg !5243

next_if134:                                       ; preds = %result_block108
  br label %check_subtype135, !dbg !5244

check_subtype135:                                 ; preds = %parent_type_block137, %next_if134
  %114 = phi i64 [ %64, %next_if134 ], [ %typeid.parent139, %parent_type_block137 ], !dbg !5244
  %eq136 = icmp eq i64 ptrtoint (ptr @"$ct.long" to i64), %114, !dbg !5244
  br i1 %eq136, label %result_block140, label %parent_type_block137, !dbg !5244

parent_type_block137:                             ; preds = %check_subtype135
  %115 = inttoptr i64 %114 to ptr, !dbg !5244
  %ptradd138 = getelementptr inbounds i8, ptr %115, i64 8, !dbg !5244
  %typeid.parent139 = load i64, ptr %ptradd138, align 8, !dbg !5244
  %116 = icmp eq i64 %typeid.parent139, 0, !dbg !5244
  br i1 %116, label %result_block140, label %check_subtype135, !dbg !5244

result_block140:                                  ; preds = %parent_type_block137, %check_subtype135
  %117 = phi i1 [ false, %parent_type_block137 ], [ true, %check_subtype135 ], !dbg !5244
  br i1 %117, label %switch.case141, label %next_if168, !dbg !5244

switch.case141:                                   ; preds = %result_block140
    #dbg_declare(ptr %l, !5245, !DIExpression(), !5247)
  %118 = load ptr, ptr %v, align 8, !dbg !5248
  %checknull142 = icmp eq ptr %118, null, !dbg !5248
  %119 = call i1 @llvm.expect.i1(i1 %checknull142, i1 false), !dbg !5248
  br i1 %119, label %panic143, label %checkok144, !dbg !5248

checkok144:                                       ; preds = %switch.case141
  %120 = ptrtoint ptr %118 to i64, !dbg !5249
  %121 = urem i64 %120, 8, !dbg !5249
  %122 = icmp ne i64 %121, 0, !dbg !5249
  %123 = call i1 @llvm.expect.i1(i1 %122, i1 false), !dbg !5249
  br i1 %123, label %panic145, label %checkok152, !dbg !5249

checkok152:                                       ; preds = %checkok144
  %124 = load i64, ptr %118, align 8, !dbg !5249
  store i64 %124, ptr %l, align 8, !dbg !5249
  %125 = load i8, ptr %is_mixed_signed, align 1, !dbg !5250
  %126 = trunc i8 %125 to i1, !dbg !5250
  br i1 %126, label %and.rhs153, label %and.phi155, !dbg !5250

and.rhs153:                                       ; preds = %checkok152
  %127 = load i64, ptr %l, align 8, !dbg !5251
  %lt154 = icmp slt i64 %127, 0, !dbg !5251
  br label %and.phi155, !dbg !5251

and.phi155:                                       ; preds = %and.rhs153, %checkok152
  %val156 = phi i1 [ false, %checkok152 ], [ %lt154, %and.rhs153 ], !dbg !5251
  br i1 %val156, label %if.then157, label %if.exit158, !dbg !5251

if.then157:                                       ; preds = %and.phi155
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %intval.f, align 8, !dbg !5252
  br label %after_assign, !dbg !5252

if.exit158:                                       ; preds = %and.phi155
  %128 = load i64, ptr %l, align 8, !dbg !5253
  %129 = load i32, ptr %max, align 4, !dbg !5254
  %sext159 = sext i32 %129 to i64, !dbg !5254
  %gt160 = icmp sgt i64 %128, %sext159, !dbg !5253
  br i1 %gt160, label %or.phi164, label %or.rhs161, !dbg !5253

or.rhs161:                                        ; preds = %if.exit158
  %130 = load i64, ptr %l, align 8, !dbg !5255
  %131 = load i32, ptr %min, align 4, !dbg !5256
  %sext162 = sext i32 %131 to i64, !dbg !5256
  %lt163 = icmp slt i64 %130, %sext162, !dbg !5255
  br label %or.phi164, !dbg !5255

or.phi164:                                        ; preds = %or.rhs161, %if.exit158
  %val165 = phi i1 [ true, %if.exit158 ], [ %lt163, %or.rhs161 ], !dbg !5255
  br i1 %val165, label %if.then166, label %if.exit167, !dbg !5255

if.then166:                                       ; preds = %or.phi164
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !5257
  br label %after_assign, !dbg !5257

if.exit167:                                       ; preds = %or.phi164
  %132 = load i64, ptr %l, align 8, !dbg !5258
  %trunc = trunc i64 %132 to i32, !dbg !5258
  store i32 %trunc, ptr %blockret, align 4, !dbg !5258
  br label %expr_block.exit, !dbg !5258

next_if168:                                       ; preds = %result_block140
  br label %check_subtype169, !dbg !5259

check_subtype169:                                 ; preds = %parent_type_block171, %next_if168
  %133 = phi i64 [ %64, %next_if168 ], [ %typeid.parent173, %parent_type_block171 ], !dbg !5259
  %eq170 = icmp eq i64 ptrtoint (ptr @"$ct.int128" to i64), %133, !dbg !5259
  br i1 %eq170, label %result_block174, label %parent_type_block171, !dbg !5259

parent_type_block171:                             ; preds = %check_subtype169
  %134 = inttoptr i64 %133 to ptr, !dbg !5259
  %ptradd172 = getelementptr inbounds i8, ptr %134, i64 8, !dbg !5259
  %typeid.parent173 = load i64, ptr %ptradd172, align 8, !dbg !5259
  %135 = icmp eq i64 %typeid.parent173, 0, !dbg !5259
  br i1 %135, label %result_block174, label %check_subtype169, !dbg !5259

result_block174:                                  ; preds = %parent_type_block171, %check_subtype169
  %136 = phi i1 [ false, %parent_type_block171 ], [ true, %check_subtype169 ], !dbg !5259
  br i1 %136, label %switch.case175, label %next_if204, !dbg !5259

switch.case175:                                   ; preds = %result_block174
    #dbg_declare(ptr %i176, !5260, !DIExpression(), !5262)
  %137 = load ptr, ptr %v, align 8, !dbg !5263
  %checknull177 = icmp eq ptr %137, null, !dbg !5263
  %138 = call i1 @llvm.expect.i1(i1 %checknull177, i1 false), !dbg !5263
  br i1 %138, label %panic178, label %checkok179, !dbg !5263

checkok179:                                       ; preds = %switch.case175
  %139 = ptrtoint ptr %137 to i64, !dbg !5264
  %140 = urem i64 %139, 16, !dbg !5264
  %141 = icmp ne i64 %140, 0, !dbg !5264
  %142 = call i1 @llvm.expect.i1(i1 %141, i1 false), !dbg !5264
  br i1 %142, label %panic180, label %checkok187, !dbg !5264

checkok187:                                       ; preds = %checkok179
  %143 = load i128, ptr %137, align 16, !dbg !5264
  store i128 %143, ptr %i176, align 16, !dbg !5264
  %144 = load i8, ptr %is_mixed_signed, align 1, !dbg !5265
  %145 = trunc i8 %144 to i1, !dbg !5265
  br i1 %145, label %and.rhs188, label %and.phi190, !dbg !5265

and.rhs188:                                       ; preds = %checkok187
  %146 = load i128, ptr %i176, align 16, !dbg !5266
  %lt189 = icmp slt i128 %146, 0, !dbg !5266
  br label %and.phi190, !dbg !5266

and.phi190:                                       ; preds = %and.rhs188, %checkok187
  %val191 = phi i1 [ false, %checkok187 ], [ %lt189, %and.rhs188 ], !dbg !5266
  br i1 %val191, label %if.then192, label %if.exit193, !dbg !5266

if.then192:                                       ; preds = %and.phi190
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %intval.f, align 8, !dbg !5267
  br label %after_assign, !dbg !5267

if.exit193:                                       ; preds = %and.phi190
  %147 = load i128, ptr %i176, align 16, !dbg !5268
  %148 = load i32, ptr %max, align 4, !dbg !5269
  %sext194 = sext i32 %148 to i128, !dbg !5269
  %gt195 = icmp sgt i128 %147, %sext194, !dbg !5268
  br i1 %gt195, label %or.phi199, label %or.rhs196, !dbg !5268

or.rhs196:                                        ; preds = %if.exit193
  %149 = load i128, ptr %i176, align 16, !dbg !5270
  %150 = load i32, ptr %min, align 4, !dbg !5271
  %sext197 = sext i32 %150 to i128, !dbg !5271
  %lt198 = icmp slt i128 %149, %sext197, !dbg !5270
  br label %or.phi199, !dbg !5270

or.phi199:                                        ; preds = %or.rhs196, %if.exit193
  %val200 = phi i1 [ true, %if.exit193 ], [ %lt198, %or.rhs196 ], !dbg !5270
  br i1 %val200, label %if.then201, label %if.exit202, !dbg !5270

if.then201:                                       ; preds = %or.phi199
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !5272
  br label %after_assign, !dbg !5272

if.exit202:                                       ; preds = %or.phi199
  %151 = load i128, ptr %i176, align 16, !dbg !5273
  %trunc203 = trunc i128 %151 to i32, !dbg !5273
  store i32 %trunc203, ptr %blockret, align 4, !dbg !5273
  br label %expr_block.exit, !dbg !5273

next_if204:                                       ; preds = %result_block174
  br label %check_subtype205, !dbg !5274

check_subtype205:                                 ; preds = %parent_type_block207, %next_if204
  %152 = phi i64 [ %64, %next_if204 ], [ %typeid.parent209, %parent_type_block207 ], !dbg !5274
  %eq206 = icmp eq i64 ptrtoint (ptr @"$ct.char" to i64), %152, !dbg !5274
  br i1 %eq206, label %result_block210, label %parent_type_block207, !dbg !5274

parent_type_block207:                             ; preds = %check_subtype205
  %153 = inttoptr i64 %152 to ptr, !dbg !5274
  %ptradd208 = getelementptr inbounds i8, ptr %153, i64 8, !dbg !5274
  %typeid.parent209 = load i64, ptr %ptradd208, align 8, !dbg !5274
  %154 = icmp eq i64 %typeid.parent209, 0, !dbg !5274
  br i1 %154, label %result_block210, label %check_subtype205, !dbg !5274

result_block210:                                  ; preds = %parent_type_block207, %check_subtype205
  %155 = phi i1 [ false, %parent_type_block207 ], [ true, %check_subtype205 ], !dbg !5274
  br i1 %155, label %switch.case211, label %next_if220, !dbg !5274

switch.case211:                                   ; preds = %result_block210
    #dbg_declare(ptr %c212, !5275, !DIExpression(), !5277)
  %156 = load ptr, ptr %v, align 8, !dbg !5278
  %checknull213 = icmp eq ptr %156, null, !dbg !5278
  %157 = call i1 @llvm.expect.i1(i1 %checknull213, i1 false), !dbg !5278
  br i1 %157, label %panic214, label %checkok215, !dbg !5278

checkok215:                                       ; preds = %switch.case211
  %158 = load i8, ptr %156, align 1, !dbg !5279
  store i8 %158, ptr %c212, align 1, !dbg !5279
  %159 = load i8, ptr %c212, align 1, !dbg !5280
  %zext = zext i8 %159 to i32, !dbg !5280
  %160 = load i32, ptr %max, align 4, !dbg !5281
  %lt216 = icmp slt i32 %160, %zext, !dbg !5280
  %check = icmp slt i32 %zext, 0, !dbg !5280
  %siui-lt = or i1 %check, %lt216, !dbg !5280
  br i1 %siui-lt, label %if.then217, label %if.exit218, !dbg !5280

if.then217:                                       ; preds = %checkok215
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !5282
  br label %after_assign, !dbg !5282

if.exit218:                                       ; preds = %checkok215
  %161 = load i8, ptr %c212, align 1, !dbg !5283
  %zext219 = zext i8 %161 to i32, !dbg !5283
  store i32 %zext219, ptr %blockret, align 4, !dbg !5283
  br label %expr_block.exit, !dbg !5283

next_if220:                                       ; preds = %result_block210
  br label %check_subtype221, !dbg !5284

check_subtype221:                                 ; preds = %parent_type_block223, %next_if220
  %162 = phi i64 [ %64, %next_if220 ], [ %typeid.parent225, %parent_type_block223 ], !dbg !5284
  %eq222 = icmp eq i64 ptrtoint (ptr @"$ct.ushort" to i64), %162, !dbg !5284
  br i1 %eq222, label %result_block226, label %parent_type_block223, !dbg !5284

parent_type_block223:                             ; preds = %check_subtype221
  %163 = inttoptr i64 %162 to ptr, !dbg !5284
  %ptradd224 = getelementptr inbounds i8, ptr %163, i64 8, !dbg !5284
  %typeid.parent225 = load i64, ptr %ptradd224, align 8, !dbg !5284
  %164 = icmp eq i64 %typeid.parent225, 0, !dbg !5284
  br i1 %164, label %result_block226, label %check_subtype221, !dbg !5284

result_block226:                                  ; preds = %parent_type_block223, %check_subtype221
  %165 = phi i1 [ false, %parent_type_block223 ], [ true, %check_subtype221 ], !dbg !5284
  br i1 %165, label %switch.case227, label %next_if253, !dbg !5284

switch.case227:                                   ; preds = %result_block226
    #dbg_declare(ptr %s228, !5285, !DIExpression(), !5287)
  %166 = load ptr, ptr %v, align 8, !dbg !5288
  %checknull229 = icmp eq ptr %166, null, !dbg !5288
  %167 = call i1 @llvm.expect.i1(i1 %checknull229, i1 false), !dbg !5288
  br i1 %167, label %panic230, label %checkok231, !dbg !5288

checkok231:                                       ; preds = %switch.case227
  %168 = ptrtoint ptr %166 to i64, !dbg !5289
  %169 = urem i64 %168, 2, !dbg !5289
  %170 = icmp ne i64 %169, 0, !dbg !5289
  %171 = call i1 @llvm.expect.i1(i1 %170, i1 false), !dbg !5289
  br i1 %171, label %panic232, label %checkok239, !dbg !5289

checkok239:                                       ; preds = %checkok231
  %172 = load i16, ptr %166, align 2, !dbg !5289
  store i16 %172, ptr %s228, align 2, !dbg !5289
  %173 = load i16, ptr %s228, align 2, !dbg !5290
  %zext240 = zext i16 %173 to i32, !dbg !5290
  %174 = load i32, ptr %max, align 4, !dbg !5291
  %lt241 = icmp slt i32 %174, %zext240, !dbg !5290
  %check242 = icmp slt i32 %zext240, 0, !dbg !5290
  %siui-lt243 = or i1 %check242, %lt241, !dbg !5290
  br i1 %siui-lt243, label %or.phi248, label %or.rhs244, !dbg !5290

or.rhs244:                                        ; preds = %checkok239
  %175 = load i16, ptr %s228, align 2, !dbg !5292
  %zext245 = zext i16 %175 to i32, !dbg !5292
  %176 = load i32, ptr %min, align 4, !dbg !5293
  %gt246 = icmp sgt i32 %176, %zext245, !dbg !5292
  %check247 = icmp sge i32 %zext245, 0, !dbg !5292
  %siui-gt = and i1 %check247, %gt246, !dbg !5292
  br label %or.phi248, !dbg !5292

or.phi248:                                        ; preds = %or.rhs244, %checkok239
  %val249 = phi i1 [ true, %checkok239 ], [ %siui-gt, %or.rhs244 ], !dbg !5292
  br i1 %val249, label %if.then250, label %if.exit251, !dbg !5292

if.then250:                                       ; preds = %or.phi248
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !5294
  br label %after_assign, !dbg !5294

if.exit251:                                       ; preds = %or.phi248
  %177 = load i16, ptr %s228, align 2, !dbg !5295
  %zext252 = zext i16 %177 to i32, !dbg !5295
  store i32 %zext252, ptr %blockret, align 4, !dbg !5295
  br label %expr_block.exit, !dbg !5295

next_if253:                                       ; preds = %result_block226
  br label %check_subtype254, !dbg !5296

check_subtype254:                                 ; preds = %parent_type_block256, %next_if253
  %178 = phi i64 [ %64, %next_if253 ], [ %typeid.parent258, %parent_type_block256 ], !dbg !5296
  %eq255 = icmp eq i64 ptrtoint (ptr @"$ct.uint" to i64), %178, !dbg !5296
  br i1 %eq255, label %result_block259, label %parent_type_block256, !dbg !5296

parent_type_block256:                             ; preds = %check_subtype254
  %179 = inttoptr i64 %178 to ptr, !dbg !5296
  %ptradd257 = getelementptr inbounds i8, ptr %179, i64 8, !dbg !5296
  %typeid.parent258 = load i64, ptr %ptradd257, align 8, !dbg !5296
  %180 = icmp eq i64 %typeid.parent258, 0, !dbg !5296
  br i1 %180, label %result_block259, label %check_subtype254, !dbg !5296

result_block259:                                  ; preds = %parent_type_block256, %check_subtype254
  %181 = phi i1 [ false, %parent_type_block256 ], [ true, %check_subtype254 ], !dbg !5296
  br i1 %181, label %switch.case260, label %next_if284, !dbg !5296

switch.case260:                                   ; preds = %result_block259
    #dbg_declare(ptr %i261, !5297, !DIExpression(), !5299)
  %182 = load ptr, ptr %v, align 8, !dbg !5300
  %checknull262 = icmp eq ptr %182, null, !dbg !5300
  %183 = call i1 @llvm.expect.i1(i1 %checknull262, i1 false), !dbg !5300
  br i1 %183, label %panic263, label %checkok264, !dbg !5300

checkok264:                                       ; preds = %switch.case260
  %184 = ptrtoint ptr %182 to i64, !dbg !5301
  %185 = urem i64 %184, 4, !dbg !5301
  %186 = icmp ne i64 %185, 0, !dbg !5301
  %187 = call i1 @llvm.expect.i1(i1 %186, i1 false), !dbg !5301
  br i1 %187, label %panic265, label %checkok272, !dbg !5301

checkok272:                                       ; preds = %checkok264
  %188 = load i32, ptr %182, align 4, !dbg !5301
  store i32 %188, ptr %i261, align 4, !dbg !5301
  %189 = load i32, ptr %i261, align 4, !dbg !5302
  %190 = load i32, ptr %max, align 4, !dbg !5303
  %lt273 = icmp slt i32 %190, %189, !dbg !5302
  %check274 = icmp slt i32 %189, 0, !dbg !5302
  %siui-lt275 = or i1 %check274, %lt273, !dbg !5302
  br i1 %siui-lt275, label %or.phi280, label %or.rhs276, !dbg !5302

or.rhs276:                                        ; preds = %checkok272
  %191 = load i32, ptr %i261, align 4, !dbg !5304
  %192 = load i32, ptr %min, align 4, !dbg !5305
  %gt277 = icmp sgt i32 %192, %191, !dbg !5304
  %check278 = icmp sge i32 %191, 0, !dbg !5304
  %siui-gt279 = and i1 %check278, %gt277, !dbg !5304
  br label %or.phi280, !dbg !5304

or.phi280:                                        ; preds = %or.rhs276, %checkok272
  %val281 = phi i1 [ true, %checkok272 ], [ %siui-gt279, %or.rhs276 ], !dbg !5304
  br i1 %val281, label %if.then282, label %if.exit283, !dbg !5304

if.then282:                                       ; preds = %or.phi280
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !5306
  br label %after_assign, !dbg !5306

if.exit283:                                       ; preds = %or.phi280
  %193 = load i32, ptr %i261, align 4, !dbg !5307
  store i32 %193, ptr %blockret, align 4, !dbg !5307
  br label %expr_block.exit, !dbg !5307

next_if284:                                       ; preds = %result_block259
  br label %check_subtype285, !dbg !5308

check_subtype285:                                 ; preds = %parent_type_block287, %next_if284
  %194 = phi i64 [ %64, %next_if284 ], [ %typeid.parent289, %parent_type_block287 ], !dbg !5308
  %eq286 = icmp eq i64 ptrtoint (ptr @"$ct.ulong" to i64), %194, !dbg !5308
  br i1 %eq286, label %result_block290, label %parent_type_block287, !dbg !5308

parent_type_block287:                             ; preds = %check_subtype285
  %195 = inttoptr i64 %194 to ptr, !dbg !5308
  %ptradd288 = getelementptr inbounds i8, ptr %195, i64 8, !dbg !5308
  %typeid.parent289 = load i64, ptr %ptradd288, align 8, !dbg !5308
  %196 = icmp eq i64 %typeid.parent289, 0, !dbg !5308
  br i1 %196, label %result_block290, label %check_subtype285, !dbg !5308

result_block290:                                  ; preds = %parent_type_block287, %check_subtype285
  %197 = phi i1 [ false, %parent_type_block287 ], [ true, %check_subtype285 ], !dbg !5308
  br i1 %197, label %switch.case291, label %next_if318, !dbg !5308

switch.case291:                                   ; preds = %result_block290
    #dbg_declare(ptr %l292, !5309, !DIExpression(), !5311)
  %198 = load ptr, ptr %v, align 8, !dbg !5312
  %checknull293 = icmp eq ptr %198, null, !dbg !5312
  %199 = call i1 @llvm.expect.i1(i1 %checknull293, i1 false), !dbg !5312
  br i1 %199, label %panic294, label %checkok295, !dbg !5312

checkok295:                                       ; preds = %switch.case291
  %200 = ptrtoint ptr %198 to i64, !dbg !5313
  %201 = urem i64 %200, 8, !dbg !5313
  %202 = icmp ne i64 %201, 0, !dbg !5313
  %203 = call i1 @llvm.expect.i1(i1 %202, i1 false), !dbg !5313
  br i1 %203, label %panic296, label %checkok303, !dbg !5313

checkok303:                                       ; preds = %checkok295
  %204 = load i64, ptr %198, align 8, !dbg !5313
  store i64 %204, ptr %l292, align 8, !dbg !5313
  %205 = load i64, ptr %l292, align 8, !dbg !5314
  %206 = load i32, ptr %max, align 4, !dbg !5315
  %sext304 = sext i32 %206 to i64, !dbg !5315
  %lt305 = icmp slt i64 %sext304, %205, !dbg !5314
  %check306 = icmp slt i64 %205, 0, !dbg !5314
  %siui-lt307 = or i1 %check306, %lt305, !dbg !5314
  br i1 %siui-lt307, label %or.phi313, label %or.rhs308, !dbg !5314

or.rhs308:                                        ; preds = %checkok303
  %207 = load i64, ptr %l292, align 8, !dbg !5316
  %208 = load i32, ptr %min, align 4, !dbg !5317
  %sext309 = sext i32 %208 to i64, !dbg !5317
  %gt310 = icmp sgt i64 %sext309, %207, !dbg !5316
  %check311 = icmp sge i64 %207, 0, !dbg !5316
  %siui-gt312 = and i1 %check311, %gt310, !dbg !5316
  br label %or.phi313, !dbg !5316

or.phi313:                                        ; preds = %or.rhs308, %checkok303
  %val314 = phi i1 [ true, %checkok303 ], [ %siui-gt312, %or.rhs308 ], !dbg !5316
  br i1 %val314, label %if.then315, label %if.exit316, !dbg !5316

if.then315:                                       ; preds = %or.phi313
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !5318
  br label %after_assign, !dbg !5318

if.exit316:                                       ; preds = %or.phi313
  %209 = load i64, ptr %l292, align 8, !dbg !5319
  %trunc317 = trunc i64 %209 to i32, !dbg !5319
  store i32 %trunc317, ptr %blockret, align 4, !dbg !5319
  br label %expr_block.exit, !dbg !5319

next_if318:                                       ; preds = %result_block290
  br label %check_subtype319, !dbg !5320

check_subtype319:                                 ; preds = %parent_type_block321, %next_if318
  %210 = phi i64 [ %64, %next_if318 ], [ %typeid.parent323, %parent_type_block321 ], !dbg !5320
  %eq320 = icmp eq i64 ptrtoint (ptr @"$ct.uint128" to i64), %210, !dbg !5320
  br i1 %eq320, label %result_block324, label %parent_type_block321, !dbg !5320

parent_type_block321:                             ; preds = %check_subtype319
  %211 = inttoptr i64 %210 to ptr, !dbg !5320
  %ptradd322 = getelementptr inbounds i8, ptr %211, i64 8, !dbg !5320
  %typeid.parent323 = load i64, ptr %ptradd322, align 8, !dbg !5320
  %212 = icmp eq i64 %typeid.parent323, 0, !dbg !5320
  br i1 %212, label %result_block324, label %check_subtype319, !dbg !5320

result_block324:                                  ; preds = %parent_type_block321, %check_subtype319
  %213 = phi i1 [ false, %parent_type_block321 ], [ true, %check_subtype319 ], !dbg !5320
  br i1 %213, label %switch.case325, label %next_if352, !dbg !5320

switch.case325:                                   ; preds = %result_block324
    #dbg_declare(ptr %i326, !5321, !DIExpression(), !5323)
  %214 = load ptr, ptr %v, align 8, !dbg !5324
  %checknull327 = icmp eq ptr %214, null, !dbg !5324
  %215 = call i1 @llvm.expect.i1(i1 %checknull327, i1 false), !dbg !5324
  br i1 %215, label %panic328, label %checkok329, !dbg !5324

checkok329:                                       ; preds = %switch.case325
  %216 = ptrtoint ptr %214 to i64, !dbg !5325
  %217 = urem i64 %216, 16, !dbg !5325
  %218 = icmp ne i64 %217, 0, !dbg !5325
  %219 = call i1 @llvm.expect.i1(i1 %218, i1 false), !dbg !5325
  br i1 %219, label %panic330, label %checkok337, !dbg !5325

checkok337:                                       ; preds = %checkok329
  %220 = load i128, ptr %214, align 16, !dbg !5325
  store i128 %220, ptr %i326, align 16, !dbg !5325
  %221 = load i128, ptr %i326, align 16, !dbg !5326
  %222 = load i32, ptr %max, align 4, !dbg !5327
  %sext338 = sext i32 %222 to i128, !dbg !5327
  %lt339 = icmp slt i128 %sext338, %221, !dbg !5326
  %check340 = icmp slt i128 %221, 0, !dbg !5326
  %siui-lt341 = or i1 %check340, %lt339, !dbg !5326
  br i1 %siui-lt341, label %or.phi347, label %or.rhs342, !dbg !5326

or.rhs342:                                        ; preds = %checkok337
  %223 = load i128, ptr %i326, align 16, !dbg !5328
  %224 = load i32, ptr %min, align 4, !dbg !5329
  %sext343 = sext i32 %224 to i128, !dbg !5329
  %gt344 = icmp sgt i128 %sext343, %223, !dbg !5328
  %check345 = icmp sge i128 %223, 0, !dbg !5328
  %siui-gt346 = and i1 %check345, %gt344, !dbg !5328
  br label %or.phi347, !dbg !5328

or.phi347:                                        ; preds = %or.rhs342, %checkok337
  %val348 = phi i1 [ true, %checkok337 ], [ %siui-gt346, %or.rhs342 ], !dbg !5328
  br i1 %val348, label %if.then349, label %if.exit350, !dbg !5328

if.then349:                                       ; preds = %or.phi347
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !5330
  br label %after_assign, !dbg !5330

if.exit350:                                       ; preds = %or.phi347
  %225 = load i128, ptr %i326, align 16, !dbg !5331
  %trunc351 = trunc i128 %225 to i32, !dbg !5331
  store i32 %trunc351, ptr %blockret, align 4, !dbg !5331
  br label %expr_block.exit, !dbg !5331

next_if352:                                       ; preds = %result_block324
  br label %switch.default, !dbg !5331

switch.default:                                   ; preds = %next_if352
  store %"char[]" { ptr @.str.229, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !5332
  %ptradd353 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !5332
  %hi = load i64, ptr %ptradd353, align 8, !dbg !5332
  store %"any[]" zeroinitializer, ptr %indirectarg354, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.230, i64 20, ptr @.str.231, i64 25, i32 687, ptr byval(%"any[]") align 8 %indirectarg354), !dbg !5336
  unreachable, !dbg !5337

expr_block.exit:                                  ; preds = %if.exit350, %if.exit316, %if.exit283, %if.exit251, %if.exit218, %if.exit202, %if.exit167, %if.exit133, %if.exit100, %if.exit68
  %226 = load i32, ptr %blockret, align 4, !dbg !5337
  store i32 %226, ptr %intval, align 4, !dbg !5337
  store i64 0, ptr %intval.f, align 8, !dbg !5337
  br label %after_assign, !dbg !5337

after_assign:                                     ; preds = %expr_block.exit, %if.then349, %if.then315, %if.then282, %if.then250, %if.then217, %if.then201, %if.then192, %if.then166, %if.then157, %if.then132, %if.then125, %if.then99, %if.then93, %if.then67
  %optval = load i64, ptr %intval.f, align 8, !dbg !5338
  %not_err = icmp eq i64 %optval, 0, !dbg !5338
  %227 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !5338
  br i1 %227, label %after_check, label %else_block, !dbg !5338

after_check:                                      ; preds = %after_assign
  %228 = load i32, ptr %intval, align 4, !dbg !5338
  br label %phi_block, !dbg !5338

else_block:                                       ; preds = %after_assign
  store i64 ptrtoint (ptr @"std.io.FormattingFault$BAD_FORMAT" to i64), ptr %reterr355, align 8, !dbg !5339
  br label %err_retblock, !dbg !5339

phi_block:                                        ; preds = %after_check
  store i32 %228, ptr %0, align 4, !dbg !5339
  ret i64 0, !dbg !5339

err_retblock:                                     ; preds = %else_block
  %229 = load i64, ptr %reterr355, align 8, !dbg !5339
  ret i64 %229, !dbg !5339

panic:                                            ; preds = %entry
  %230 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5156
  call void %230(ptr @.panic_msg.226, i64 50, ptr @.file.215, i64 20, ptr @.func.227, i64 25, i32 679) #5, !dbg !5156
  unreachable, !dbg !5156

panic1:                                           ; preds = %checkok
  store i64 8, ptr %taddr, align 8
  %231 = insertvalue %any undef, ptr %taddr, 0
  %232 = insertvalue %any %231, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %11, ptr %taddr2, align 8
  %233 = insertvalue %any undef, ptr %taddr2, 0
  %234 = insertvalue %any %233, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %232, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %234, ptr %ptradd, align 16
  %235 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %235, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.227, i64 25, i32 679, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !5156
  unreachable, !dbg !5156

panic9:                                           ; preds = %if.exit7
  %236 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5164
  call void %236(ptr @.panic_msg.226, i64 50, ptr @.file.215, i64 20, ptr @.func.227, i64 25, i32 682) #5, !dbg !5164
  unreachable, !dbg !5164

panic11:                                          ; preds = %checkok10
  store i64 8, ptr %taddr12, align 8
  %237 = insertvalue %any undef, ptr %taddr12, 0
  %238 = insertvalue %any %237, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %27, ptr %taddr13, align 8
  %239 = insertvalue %any undef, ptr %taddr13, 0
  %240 = insertvalue %any %239, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %238, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %240, ptr %ptradd15, align 16
  %241 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %241, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.227, i64 25, i32 682, ptr byval(%"any[]") align 8 %indirectarg17) #5, !dbg !5164
  unreachable, !dbg !5164

panic22:                                          ; preds = %if.exit20
  %242 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5169
  call void %242(ptr @.panic_msg.228, i64 55, ptr @.file.215, i64 20, ptr @.func.227, i64 25, i32 684) #5, !dbg !5169
  unreachable, !dbg !5169

panic24:                                          ; preds = %checkok23
  store i64 8, ptr %taddr25, align 8
  %243 = insertvalue %any undef, ptr %taddr25, 0
  %244 = insertvalue %any %243, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr26, align 8
  %245 = insertvalue %any undef, ptr %taddr26, 0
  %246 = insertvalue %any %245, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %244, ptr %varargslots27, align 16
  %ptradd28 = getelementptr inbounds i8, ptr %varargslots27, i64 16
  store %any %246, ptr %ptradd28, align 16
  %247 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp29" = insertvalue %"any[]" %247, i64 2, 1
  store %"any[]" %"$$temp29", ptr %indirectarg30, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.227, i64 25, i32 684, ptr byval(%"any[]") align 8 %indirectarg30) #5, !dbg !5169
  unreachable, !dbg !5169

panic36:                                          ; preds = %if.exit34
  %248 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5176
  call void %248(ptr @.panic_msg.228, i64 55, ptr @.file.215, i64 20, ptr @.func.227, i64 25, i32 685) #5, !dbg !5176
  unreachable, !dbg !5176

panic38:                                          ; preds = %checkok37
  store i64 8, ptr %taddr39, align 8
  %249 = insertvalue %any undef, ptr %taddr39, 0
  %250 = insertvalue %any %249, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %45, ptr %taddr40, align 8
  %251 = insertvalue %any undef, ptr %taddr40, 0
  %252 = insertvalue %any %251, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %250, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %252, ptr %ptradd42, align 16
  %253 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %253, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.215, i64 20, ptr @.func.227, i64 25, i32 685, ptr byval(%"any[]") align 8 %indirectarg44) #5, !dbg !5176
  unreachable, !dbg !5176

panic64:                                          ; preds = %switch.case
  %254 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5209
  call void %254(ptr @.panic_msg.146, i64 52, ptr @.file.142, i64 8, ptr @.func.227, i64 25, i32 35) #5, !dbg !5209
  unreachable, !dbg !5209

panic78:                                          ; preds = %switch.case76
  %255 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5219
  call void %255(ptr @.panic_msg.149, i64 53, ptr @.file.142, i64 8, ptr @.func.227, i64 25, i32 39) #5, !dbg !5219
  unreachable, !dbg !5219

panic80:                                          ; preds = %checkok79
  store i64 2, ptr %taddr81, align 8
  %256 = insertvalue %any undef, ptr %taddr81, 0
  %257 = insertvalue %any %256, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %83, ptr %taddr82, align 8
  %258 = insertvalue %any undef, ptr %taddr82, 0
  %259 = insertvalue %any %258, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %257, ptr %varargslots83, align 16
  %ptradd84 = getelementptr inbounds i8, ptr %varargslots83, i64 16
  store %any %259, ptr %ptradd84, align 16
  %260 = insertvalue %"any[]" undef, ptr %varargslots83, 0
  %"$$temp85" = insertvalue %"any[]" %260, i64 2, 1
  store %"any[]" %"$$temp85", ptr %indirectarg86, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.142, i64 8, ptr @.func.227, i64 25, i32 39, ptr byval(%"any[]") align 8 %indirectarg86) #5, !dbg !5219
  unreachable, !dbg !5219

panic111:                                         ; preds = %switch.case109
  %261 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5234
  call void %261(ptr @.panic_msg.150, i64 51, ptr @.file.142, i64 8, ptr @.func.227, i64 25, i32 44) #5, !dbg !5234
  unreachable, !dbg !5234

panic113:                                         ; preds = %checkok112
  store i64 4, ptr %taddr114, align 8
  %262 = insertvalue %any undef, ptr %taddr114, 0
  %263 = insertvalue %any %262, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %102, ptr %taddr115, align 8
  %264 = insertvalue %any undef, ptr %taddr115, 0
  %265 = insertvalue %any %264, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %263, ptr %varargslots116, align 16
  %ptradd117 = getelementptr inbounds i8, ptr %varargslots116, i64 16
  store %any %265, ptr %ptradd117, align 16
  %266 = insertvalue %"any[]" undef, ptr %varargslots116, 0
  %"$$temp118" = insertvalue %"any[]" %266, i64 2, 1
  store %"any[]" %"$$temp118", ptr %indirectarg119, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.142, i64 8, ptr @.func.227, i64 25, i32 44, ptr byval(%"any[]") align 8 %indirectarg119) #5, !dbg !5234
  unreachable, !dbg !5234

panic143:                                         ; preds = %switch.case141
  %267 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5249
  call void %267(ptr @.panic_msg.151, i64 52, ptr @.file.142, i64 8, ptr @.func.227, i64 25, i32 49) #5, !dbg !5249
  unreachable, !dbg !5249

panic145:                                         ; preds = %checkok144
  store i64 8, ptr %taddr146, align 8
  %268 = insertvalue %any undef, ptr %taddr146, 0
  %269 = insertvalue %any %268, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %121, ptr %taddr147, align 8
  %270 = insertvalue %any undef, ptr %taddr147, 0
  %271 = insertvalue %any %270, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %269, ptr %varargslots148, align 16
  %ptradd149 = getelementptr inbounds i8, ptr %varargslots148, i64 16
  store %any %271, ptr %ptradd149, align 16
  %272 = insertvalue %"any[]" undef, ptr %varargslots148, 0
  %"$$temp150" = insertvalue %"any[]" %272, i64 2, 1
  store %"any[]" %"$$temp150", ptr %indirectarg151, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.142, i64 8, ptr @.func.227, i64 25, i32 49, ptr byval(%"any[]") align 8 %indirectarg151) #5, !dbg !5249
  unreachable, !dbg !5249

panic178:                                         ; preds = %switch.case175
  %273 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5264
  call void %273(ptr @.panic_msg.152, i64 54, ptr @.file.142, i64 8, ptr @.func.227, i64 25, i32 54) #5, !dbg !5264
  unreachable, !dbg !5264

panic180:                                         ; preds = %checkok179
  store i64 16, ptr %taddr181, align 8
  %274 = insertvalue %any undef, ptr %taddr181, 0
  %275 = insertvalue %any %274, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %140, ptr %taddr182, align 8
  %276 = insertvalue %any undef, ptr %taddr182, 0
  %277 = insertvalue %any %276, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %275, ptr %varargslots183, align 16
  %ptradd184 = getelementptr inbounds i8, ptr %varargslots183, i64 16
  store %any %277, ptr %ptradd184, align 16
  %278 = insertvalue %"any[]" undef, ptr %varargslots183, 0
  %"$$temp185" = insertvalue %"any[]" %278, i64 2, 1
  store %"any[]" %"$$temp185", ptr %indirectarg186, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.142, i64 8, ptr @.func.227, i64 25, i32 54, ptr byval(%"any[]") align 8 %indirectarg186) #5, !dbg !5264
  unreachable, !dbg !5264

panic214:                                         ; preds = %switch.case211
  %279 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5279
  call void %279(ptr @.panic_msg.146, i64 52, ptr @.file.142, i64 8, ptr @.func.227, i64 25, i32 59) #5, !dbg !5279
  unreachable, !dbg !5279

panic230:                                         ; preds = %switch.case227
  %280 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5289
  call void %280(ptr @.panic_msg.153, i64 54, ptr @.file.142, i64 8, ptr @.func.227, i64 25, i32 63) #5, !dbg !5289
  unreachable, !dbg !5289

panic232:                                         ; preds = %checkok231
  store i64 2, ptr %taddr233, align 8
  %281 = insertvalue %any undef, ptr %taddr233, 0
  %282 = insertvalue %any %281, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %169, ptr %taddr234, align 8
  %283 = insertvalue %any undef, ptr %taddr234, 0
  %284 = insertvalue %any %283, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %282, ptr %varargslots235, align 16
  %ptradd236 = getelementptr inbounds i8, ptr %varargslots235, i64 16
  store %any %284, ptr %ptradd236, align 16
  %285 = insertvalue %"any[]" undef, ptr %varargslots235, 0
  %"$$temp237" = insertvalue %"any[]" %285, i64 2, 1
  store %"any[]" %"$$temp237", ptr %indirectarg238, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.142, i64 8, ptr @.func.227, i64 25, i32 63, ptr byval(%"any[]") align 8 %indirectarg238) #5, !dbg !5289
  unreachable, !dbg !5289

panic263:                                         ; preds = %switch.case260
  %286 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5301
  call void %286(ptr @.panic_msg.154, i64 52, ptr @.file.142, i64 8, ptr @.func.227, i64 25, i32 67) #5, !dbg !5301
  unreachable, !dbg !5301

panic265:                                         ; preds = %checkok264
  store i64 4, ptr %taddr266, align 8
  %287 = insertvalue %any undef, ptr %taddr266, 0
  %288 = insertvalue %any %287, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %185, ptr %taddr267, align 8
  %289 = insertvalue %any undef, ptr %taddr267, 0
  %290 = insertvalue %any %289, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %288, ptr %varargslots268, align 16
  %ptradd269 = getelementptr inbounds i8, ptr %varargslots268, i64 16
  store %any %290, ptr %ptradd269, align 16
  %291 = insertvalue %"any[]" undef, ptr %varargslots268, 0
  %"$$temp270" = insertvalue %"any[]" %291, i64 2, 1
  store %"any[]" %"$$temp270", ptr %indirectarg271, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.142, i64 8, ptr @.func.227, i64 25, i32 67, ptr byval(%"any[]") align 8 %indirectarg271) #5, !dbg !5301
  unreachable, !dbg !5301

panic294:                                         ; preds = %switch.case291
  %292 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5313
  call void %292(ptr @.panic_msg.155, i64 53, ptr @.file.142, i64 8, ptr @.func.227, i64 25, i32 71) #5, !dbg !5313
  unreachable, !dbg !5313

panic296:                                         ; preds = %checkok295
  store i64 8, ptr %taddr297, align 8
  %293 = insertvalue %any undef, ptr %taddr297, 0
  %294 = insertvalue %any %293, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %201, ptr %taddr298, align 8
  %295 = insertvalue %any undef, ptr %taddr298, 0
  %296 = insertvalue %any %295, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %294, ptr %varargslots299, align 16
  %ptradd300 = getelementptr inbounds i8, ptr %varargslots299, i64 16
  store %any %296, ptr %ptradd300, align 16
  %297 = insertvalue %"any[]" undef, ptr %varargslots299, 0
  %"$$temp301" = insertvalue %"any[]" %297, i64 2, 1
  store %"any[]" %"$$temp301", ptr %indirectarg302, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.142, i64 8, ptr @.func.227, i64 25, i32 71, ptr byval(%"any[]") align 8 %indirectarg302) #5, !dbg !5313
  unreachable, !dbg !5313

panic328:                                         ; preds = %switch.case325
  %298 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5325
  call void %298(ptr @.panic_msg.156, i64 55, ptr @.file.142, i64 8, ptr @.func.227, i64 25, i32 75) #5, !dbg !5325
  unreachable, !dbg !5325

panic330:                                         ; preds = %checkok329
  store i64 16, ptr %taddr331, align 8
  %299 = insertvalue %any undef, ptr %taddr331, 0
  %300 = insertvalue %any %299, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %217, ptr %taddr332, align 8
  %301 = insertvalue %any undef, ptr %taddr332, 0
  %302 = insertvalue %any %301, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %300, ptr %varargslots333, align 16
  %ptradd334 = getelementptr inbounds i8, ptr %varargslots333, i64 16
  store %any %302, ptr %ptradd334, align 16
  %303 = insertvalue %"any[]" undef, ptr %varargslots333, 0
  %"$$temp335" = insertvalue %"any[]" %303, i64 2, 1
  store %"any[]" %"$$temp335", ptr %indirectarg336, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.37, i64 94, ptr @.file.142, i64 8, ptr @.func.227, i64 25, i32 75, ptr byval(%"any[]") align 8 %indirectarg336) #5, !dbg !5325
  unreachable, !dbg !5325
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare i1 @llvm.expect.i1(i1, i1) #1

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.builtin.panicf(ptr, i64, ptr, i64, ptr, i64, i32, ptr byval(%"any[]") align 8) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i32(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i32, i1 immarg) #3

define weak ptr @.dyn_search(ptr %0, ptr %1) unnamed_addr comdat {
entry:
  br label %check

check:                                            ; preds = %no_match, %entry
  %2 = phi ptr [ %0, %entry ], [ %9, %no_match ]
  %3 = icmp eq ptr %2, null
  br i1 %3, label %missing_function, label %compare

missing_function:                                 ; preds = %check
  ret ptr null

compare:                                          ; preds = %check
  %4 = getelementptr inbounds { ptr, ptr, ptr }, ptr %2, i32 0, i32 1
  %5 = load ptr, ptr %4, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %match, label %no_match

match:                                            ; preds = %compare
  %7 = load ptr, ptr %2, align 8
  ret ptr %7

no_match:                                         ; preds = %compare
  %8 = getelementptr inbounds { ptr, ptr, ptr }, ptr %2, i32 0, i32 2
  %9 = load ptr, ptr %8, align 8
  br label %check
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.bswap.i32(i32) #4

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memmove.p0.p0.i64(ptr nocapture writeonly, ptr nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.mem.allocator.init_default_temp_allocators() #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.String.index_of(ptr, ptr, i64, ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.mem.allocator.OnStackAllocator.init(ptr, ptr, i64, i64, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.mem.allocator.OnStackAllocator.free(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak zeroext i8 @std.core.types.TypeKind.is_int(i8 zeroext) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak { ptr, i64 } @std.core.string.ZString.str_view(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak { ptr, i64 } @std.core.dstring.DString.str_view(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare i32 @putchar(i32) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.io.File.flush(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.io.File.write_byte(ptr, i8 zeroext) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak ptr @std.io.file.from_handle(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak zeroext i8 @std.ascii.char.is_digit(i8 zeroext) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.string.conv.utf8_codepoints(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak double @std.math._frexp(double, ptr) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smax.i64(i64, i64) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #4

define internal void @.c3_dynamic_register() align 8 {
entry:
  %next_val = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.len", i32 0, i32 2), align 8
  %0 = icmp eq ptr %next_val, inttoptr (i64 -1 to ptr)
  br i1 %0, label %dtable_check, label %dtable_skip

dtable_check:                                     ; preds = %dtable_check, %entry
  %dtable_ref = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %entry ], [ %next_dtable_ref, %dtable_check ]
  %dtable_ptr = load ptr, ptr %dtable_ref, align 8
  %1 = icmp eq ptr %dtable_ptr, null
  %next_dtable_ref = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr, i32 0, i32 2
  br i1 %1, label %dtable_found, label %dtable_check

dtable_found:                                     ; preds = %dtable_check
  store ptr @"$ct.dyn.std.io.ByteReader.len", ptr %dtable_ref, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.len", i32 0, i32 2), align 8
  br label %dtable_skip

dtable_skip:                                      ; preds = %dtable_found, %entry
  %next_val1 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.read", i32 0, i32 2), align 8
  %2 = icmp eq ptr %next_val1, inttoptr (i64 -1 to ptr)
  br i1 %2, label %dtable_check2, label %dtable_skip7

dtable_check2:                                    ; preds = %dtable_check2, %dtable_skip
  %dtable_ref3 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip ], [ %next_dtable_ref5, %dtable_check2 ]
  %dtable_ptr4 = load ptr, ptr %dtable_ref3, align 8
  %3 = icmp eq ptr %dtable_ptr4, null
  %next_dtable_ref5 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr4, i32 0, i32 2
  br i1 %3, label %dtable_found6, label %dtable_check2

dtable_found6:                                    ; preds = %dtable_check2
  store ptr @"$ct.dyn.std.io.ByteReader.read", ptr %dtable_ref3, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.read", i32 0, i32 2), align 8
  br label %dtable_skip7

dtable_skip7:                                     ; preds = %dtable_found6, %dtable_skip
  %next_val8 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.read_byte", i32 0, i32 2), align 8
  %4 = icmp eq ptr %next_val8, inttoptr (i64 -1 to ptr)
  br i1 %4, label %dtable_check9, label %dtable_skip14

dtable_check9:                                    ; preds = %dtable_check9, %dtable_skip7
  %dtable_ref10 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip7 ], [ %next_dtable_ref12, %dtable_check9 ]
  %dtable_ptr11 = load ptr, ptr %dtable_ref10, align 8
  %5 = icmp eq ptr %dtable_ptr11, null
  %next_dtable_ref12 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr11, i32 0, i32 2
  br i1 %5, label %dtable_found13, label %dtable_check9

dtable_found13:                                   ; preds = %dtable_check9
  store ptr @"$ct.dyn.std.io.ByteReader.read_byte", ptr %dtable_ref10, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip14

dtable_skip14:                                    ; preds = %dtable_found13, %dtable_skip7
  %next_val15 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.pushback_byte", i32 0, i32 2), align 8
  %6 = icmp eq ptr %next_val15, inttoptr (i64 -1 to ptr)
  br i1 %6, label %dtable_check16, label %dtable_skip21

dtable_check16:                                   ; preds = %dtable_check16, %dtable_skip14
  %dtable_ref17 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip14 ], [ %next_dtable_ref19, %dtable_check16 ]
  %dtable_ptr18 = load ptr, ptr %dtable_ref17, align 8
  %7 = icmp eq ptr %dtable_ptr18, null
  %next_dtable_ref19 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr18, i32 0, i32 2
  br i1 %7, label %dtable_found20, label %dtable_check16

dtable_found20:                                   ; preds = %dtable_check16
  store ptr @"$ct.dyn.std.io.ByteReader.pushback_byte", ptr %dtable_ref17, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.pushback_byte", i32 0, i32 2), align 8
  br label %dtable_skip21

dtable_skip21:                                    ; preds = %dtable_found20, %dtable_skip14
  %next_val22 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.seek", i32 0, i32 2), align 8
  %8 = icmp eq ptr %next_val22, inttoptr (i64 -1 to ptr)
  br i1 %8, label %dtable_check23, label %dtable_skip28

dtable_check23:                                   ; preds = %dtable_check23, %dtable_skip21
  %dtable_ref24 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip21 ], [ %next_dtable_ref26, %dtable_check23 ]
  %dtable_ptr25 = load ptr, ptr %dtable_ref24, align 8
  %9 = icmp eq ptr %dtable_ptr25, null
  %next_dtable_ref26 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr25, i32 0, i32 2
  br i1 %9, label %dtable_found27, label %dtable_check23

dtable_found27:                                   ; preds = %dtable_check23
  store ptr @"$ct.dyn.std.io.ByteReader.seek", ptr %dtable_ref24, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.seek", i32 0, i32 2), align 8
  br label %dtable_skip28

dtable_skip28:                                    ; preds = %dtable_found27, %dtable_skip21
  %next_val29 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.write_to", i32 0, i32 2), align 8
  %10 = icmp eq ptr %next_val29, inttoptr (i64 -1 to ptr)
  br i1 %10, label %dtable_check30, label %dtable_skip35

dtable_check30:                                   ; preds = %dtable_check30, %dtable_skip28
  %dtable_ref31 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip28 ], [ %next_dtable_ref33, %dtable_check30 ]
  %dtable_ptr32 = load ptr, ptr %dtable_ref31, align 8
  %11 = icmp eq ptr %dtable_ptr32, null
  %next_dtable_ref33 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr32, i32 0, i32 2
  br i1 %11, label %dtable_found34, label %dtable_check30

dtable_found34:                                   ; preds = %dtable_check30
  store ptr @"$ct.dyn.std.io.ByteReader.write_to", ptr %dtable_ref31, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.write_to", i32 0, i32 2), align 8
  br label %dtable_skip35

dtable_skip35:                                    ; preds = %dtable_found34, %dtable_skip28
  %next_val36 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.available", i32 0, i32 2), align 8
  %12 = icmp eq ptr %next_val36, inttoptr (i64 -1 to ptr)
  br i1 %12, label %dtable_check37, label %dtable_skip42

dtable_check37:                                   ; preds = %dtable_check37, %dtable_skip35
  %dtable_ref38 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip35 ], [ %next_dtable_ref40, %dtable_check37 ]
  %dtable_ptr39 = load ptr, ptr %dtable_ref38, align 8
  %13 = icmp eq ptr %dtable_ptr39, null
  %next_dtable_ref40 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr39, i32 0, i32 2
  br i1 %13, label %dtable_found41, label %dtable_check37

dtable_found41:                                   ; preds = %dtable_check37
  store ptr @"$ct.dyn.std.io.ByteReader.available", ptr %dtable_ref38, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.available", i32 0, i32 2), align 8
  br label %dtable_skip42

dtable_skip42:                                    ; preds = %dtable_found41, %dtable_skip35
  %next_val43 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ReadBuffer.close", i32 0, i32 2), align 8
  %14 = icmp eq ptr %next_val43, inttoptr (i64 -1 to ptr)
  br i1 %14, label %dtable_check44, label %dtable_skip49

dtable_check44:                                   ; preds = %dtable_check44, %dtable_skip42
  %dtable_ref45 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ReadBuffer", i32 0, i32 2), %dtable_skip42 ], [ %next_dtable_ref47, %dtable_check44 ]
  %dtable_ptr46 = load ptr, ptr %dtable_ref45, align 8
  %15 = icmp eq ptr %dtable_ptr46, null
  %next_dtable_ref47 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr46, i32 0, i32 2
  br i1 %15, label %dtable_found48, label %dtable_check44

dtable_found48:                                   ; preds = %dtable_check44
  store ptr @"$ct.dyn.std.io.ReadBuffer.close", ptr %dtable_ref45, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ReadBuffer.close", i32 0, i32 2), align 8
  br label %dtable_skip49

dtable_skip49:                                    ; preds = %dtable_found48, %dtable_skip42
  %next_val50 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ReadBuffer.read", i32 0, i32 2), align 8
  %16 = icmp eq ptr %next_val50, inttoptr (i64 -1 to ptr)
  br i1 %16, label %dtable_check51, label %dtable_skip56

dtable_check51:                                   ; preds = %dtable_check51, %dtable_skip49
  %dtable_ref52 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ReadBuffer", i32 0, i32 2), %dtable_skip49 ], [ %next_dtable_ref54, %dtable_check51 ]
  %dtable_ptr53 = load ptr, ptr %dtable_ref52, align 8
  %17 = icmp eq ptr %dtable_ptr53, null
  %next_dtable_ref54 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr53, i32 0, i32 2
  br i1 %17, label %dtable_found55, label %dtable_check51

dtable_found55:                                   ; preds = %dtable_check51
  store ptr @"$ct.dyn.std.io.ReadBuffer.read", ptr %dtable_ref52, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ReadBuffer.read", i32 0, i32 2), align 8
  br label %dtable_skip56

dtable_skip56:                                    ; preds = %dtable_found55, %dtable_skip49
  %next_val57 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ReadBuffer.read_byte", i32 0, i32 2), align 8
  %18 = icmp eq ptr %next_val57, inttoptr (i64 -1 to ptr)
  br i1 %18, label %dtable_check58, label %dtable_skip63

dtable_check58:                                   ; preds = %dtable_check58, %dtable_skip56
  %dtable_ref59 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ReadBuffer", i32 0, i32 2), %dtable_skip56 ], [ %next_dtable_ref61, %dtable_check58 ]
  %dtable_ptr60 = load ptr, ptr %dtable_ref59, align 8
  %19 = icmp eq ptr %dtable_ptr60, null
  %next_dtable_ref61 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr60, i32 0, i32 2
  br i1 %19, label %dtable_found62, label %dtable_check58

dtable_found62:                                   ; preds = %dtable_check58
  store ptr @"$ct.dyn.std.io.ReadBuffer.read_byte", ptr %dtable_ref59, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ReadBuffer.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip63

dtable_skip63:                                    ; preds = %dtable_found62, %dtable_skip56
  %next_val64 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.close", i32 0, i32 2), align 8
  %20 = icmp eq ptr %next_val64, inttoptr (i64 -1 to ptr)
  br i1 %20, label %dtable_check65, label %dtable_skip70

dtable_check65:                                   ; preds = %dtable_check65, %dtable_skip63
  %dtable_ref66 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.WriteBuffer", i32 0, i32 2), %dtable_skip63 ], [ %next_dtable_ref68, %dtable_check65 ]
  %dtable_ptr67 = load ptr, ptr %dtable_ref66, align 8
  %21 = icmp eq ptr %dtable_ptr67, null
  %next_dtable_ref68 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr67, i32 0, i32 2
  br i1 %21, label %dtable_found69, label %dtable_check65

dtable_found69:                                   ; preds = %dtable_check65
  store ptr @"$ct.dyn.std.io.WriteBuffer.close", ptr %dtable_ref66, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.close", i32 0, i32 2), align 8
  br label %dtable_skip70

dtable_skip70:                                    ; preds = %dtable_found69, %dtable_skip63
  %next_val71 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.flush", i32 0, i32 2), align 8
  %22 = icmp eq ptr %next_val71, inttoptr (i64 -1 to ptr)
  br i1 %22, label %dtable_check72, label %dtable_skip77

dtable_check72:                                   ; preds = %dtable_check72, %dtable_skip70
  %dtable_ref73 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.WriteBuffer", i32 0, i32 2), %dtable_skip70 ], [ %next_dtable_ref75, %dtable_check72 ]
  %dtable_ptr74 = load ptr, ptr %dtable_ref73, align 8
  %23 = icmp eq ptr %dtable_ptr74, null
  %next_dtable_ref75 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr74, i32 0, i32 2
  br i1 %23, label %dtable_found76, label %dtable_check72

dtable_found76:                                   ; preds = %dtable_check72
  store ptr @"$ct.dyn.std.io.WriteBuffer.flush", ptr %dtable_ref73, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.flush", i32 0, i32 2), align 8
  br label %dtable_skip77

dtable_skip77:                                    ; preds = %dtable_found76, %dtable_skip70
  %next_val78 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.write", i32 0, i32 2), align 8
  %24 = icmp eq ptr %next_val78, inttoptr (i64 -1 to ptr)
  br i1 %24, label %dtable_check79, label %dtable_skip84

dtable_check79:                                   ; preds = %dtable_check79, %dtable_skip77
  %dtable_ref80 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.WriteBuffer", i32 0, i32 2), %dtable_skip77 ], [ %next_dtable_ref82, %dtable_check79 ]
  %dtable_ptr81 = load ptr, ptr %dtable_ref80, align 8
  %25 = icmp eq ptr %dtable_ptr81, null
  %next_dtable_ref82 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr81, i32 0, i32 2
  br i1 %25, label %dtable_found83, label %dtable_check79

dtable_found83:                                   ; preds = %dtable_check79
  store ptr @"$ct.dyn.std.io.WriteBuffer.write", ptr %dtable_ref80, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.write", i32 0, i32 2), align 8
  br label %dtable_skip84

dtable_skip84:                                    ; preds = %dtable_found83, %dtable_skip77
  %next_val85 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.write_byte", i32 0, i32 2), align 8
  %26 = icmp eq ptr %next_val85, inttoptr (i64 -1 to ptr)
  br i1 %26, label %dtable_check86, label %dtable_skip91

dtable_check86:                                   ; preds = %dtable_check86, %dtable_skip84
  %dtable_ref87 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.WriteBuffer", i32 0, i32 2), %dtable_skip84 ], [ %next_dtable_ref89, %dtable_check86 ]
  %dtable_ptr88 = load ptr, ptr %dtable_ref87, align 8
  %27 = icmp eq ptr %dtable_ptr88, null
  %next_dtable_ref89 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr88, i32 0, i32 2
  br i1 %27, label %dtable_found90, label %dtable_check86

dtable_found90:                                   ; preds = %dtable_check86
  store ptr @"$ct.dyn.std.io.WriteBuffer.write_byte", ptr %dtable_ref87, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.write_byte", i32 0, i32 2), align 8
  br label %dtable_skip91

dtable_skip91:                                    ; preds = %dtable_found90, %dtable_skip84
  %next_val92 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.destroy", i32 0, i32 2), align 8
  %28 = icmp eq ptr %next_val92, inttoptr (i64 -1 to ptr)
  br i1 %28, label %dtable_check93, label %dtable_skip98

dtable_check93:                                   ; preds = %dtable_check93, %dtable_skip91
  %dtable_ref94 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteWriter", i32 0, i32 2), %dtable_skip91 ], [ %next_dtable_ref96, %dtable_check93 ]
  %dtable_ptr95 = load ptr, ptr %dtable_ref94, align 8
  %29 = icmp eq ptr %dtable_ptr95, null
  %next_dtable_ref96 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr95, i32 0, i32 2
  br i1 %29, label %dtable_found97, label %dtable_check93

dtable_found97:                                   ; preds = %dtable_check93
  store ptr @"$ct.dyn.std.io.ByteWriter.destroy", ptr %dtable_ref94, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.destroy", i32 0, i32 2), align 8
  br label %dtable_skip98

dtable_skip98:                                    ; preds = %dtable_found97, %dtable_skip91
  %next_val99 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.write", i32 0, i32 2), align 8
  %30 = icmp eq ptr %next_val99, inttoptr (i64 -1 to ptr)
  br i1 %30, label %dtable_check100, label %dtable_skip105

dtable_check100:                                  ; preds = %dtable_check100, %dtable_skip98
  %dtable_ref101 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteWriter", i32 0, i32 2), %dtable_skip98 ], [ %next_dtable_ref103, %dtable_check100 ]
  %dtable_ptr102 = load ptr, ptr %dtable_ref101, align 8
  %31 = icmp eq ptr %dtable_ptr102, null
  %next_dtable_ref103 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr102, i32 0, i32 2
  br i1 %31, label %dtable_found104, label %dtable_check100

dtable_found104:                                  ; preds = %dtable_check100
  store ptr @"$ct.dyn.std.io.ByteWriter.write", ptr %dtable_ref101, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.write", i32 0, i32 2), align 8
  br label %dtable_skip105

dtable_skip105:                                   ; preds = %dtable_found104, %dtable_skip98
  %next_val106 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.write_byte", i32 0, i32 2), align 8
  %32 = icmp eq ptr %next_val106, inttoptr (i64 -1 to ptr)
  br i1 %32, label %dtable_check107, label %dtable_skip112

dtable_check107:                                  ; preds = %dtable_check107, %dtable_skip105
  %dtable_ref108 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteWriter", i32 0, i32 2), %dtable_skip105 ], [ %next_dtable_ref110, %dtable_check107 ]
  %dtable_ptr109 = load ptr, ptr %dtable_ref108, align 8
  %33 = icmp eq ptr %dtable_ptr109, null
  %next_dtable_ref110 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr109, i32 0, i32 2
  br i1 %33, label %dtable_found111, label %dtable_check107

dtable_found111:                                  ; preds = %dtable_check107
  store ptr @"$ct.dyn.std.io.ByteWriter.write_byte", ptr %dtable_ref108, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.write_byte", i32 0, i32 2), align 8
  br label %dtable_skip112

dtable_skip112:                                   ; preds = %dtable_found111, %dtable_skip105
  %next_val113 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.read_from", i32 0, i32 2), align 8
  %34 = icmp eq ptr %next_val113, inttoptr (i64 -1 to ptr)
  br i1 %34, label %dtable_check114, label %dtable_skip119

dtable_check114:                                  ; preds = %dtable_check114, %dtable_skip112
  %dtable_ref115 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteWriter", i32 0, i32 2), %dtable_skip112 ], [ %next_dtable_ref117, %dtable_check114 ]
  %dtable_ptr116 = load ptr, ptr %dtable_ref115, align 8
  %35 = icmp eq ptr %dtable_ptr116, null
  %next_dtable_ref117 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr116, i32 0, i32 2
  br i1 %35, label %dtable_found118, label %dtable_check114

dtable_found118:                                  ; preds = %dtable_check114
  store ptr @"$ct.dyn.std.io.ByteWriter.read_from", ptr %dtable_ref115, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.read_from", i32 0, i32 2), align 8
  br label %dtable_skip119

dtable_skip119:                                   ; preds = %dtable_found118, %dtable_skip112
  %next_val120 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.write", i32 0, i32 2), align 8
  %36 = icmp eq ptr %next_val120, inttoptr (i64 -1 to ptr)
  br i1 %36, label %dtable_check121, label %dtable_skip126

dtable_check121:                                  ; preds = %dtable_check121, %dtable_skip119
  %dtable_ref122 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip119 ], [ %next_dtable_ref124, %dtable_check121 ]
  %dtable_ptr123 = load ptr, ptr %dtable_ref122, align 8
  %37 = icmp eq ptr %dtable_ptr123, null
  %next_dtable_ref124 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr123, i32 0, i32 2
  br i1 %37, label %dtable_found125, label %dtable_check121

dtable_found125:                                  ; preds = %dtable_check121
  store ptr @"$ct.dyn.std.io.ByteBuffer.write", ptr %dtable_ref122, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.write", i32 0, i32 2), align 8
  br label %dtable_skip126

dtable_skip126:                                   ; preds = %dtable_found125, %dtable_skip119
  %next_val127 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.write_byte", i32 0, i32 2), align 8
  %38 = icmp eq ptr %next_val127, inttoptr (i64 -1 to ptr)
  br i1 %38, label %dtable_check128, label %dtable_skip133

dtable_check128:                                  ; preds = %dtable_check128, %dtable_skip126
  %dtable_ref129 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip126 ], [ %next_dtable_ref131, %dtable_check128 ]
  %dtable_ptr130 = load ptr, ptr %dtable_ref129, align 8
  %39 = icmp eq ptr %dtable_ptr130, null
  %next_dtable_ref131 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr130, i32 0, i32 2
  br i1 %39, label %dtable_found132, label %dtable_check128

dtable_found132:                                  ; preds = %dtable_check128
  store ptr @"$ct.dyn.std.io.ByteBuffer.write_byte", ptr %dtable_ref129, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.write_byte", i32 0, i32 2), align 8
  br label %dtable_skip133

dtable_skip133:                                   ; preds = %dtable_found132, %dtable_skip126
  %next_val134 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.read", i32 0, i32 2), align 8
  %40 = icmp eq ptr %next_val134, inttoptr (i64 -1 to ptr)
  br i1 %40, label %dtable_check135, label %dtable_skip140

dtable_check135:                                  ; preds = %dtable_check135, %dtable_skip133
  %dtable_ref136 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip133 ], [ %next_dtable_ref138, %dtable_check135 ]
  %dtable_ptr137 = load ptr, ptr %dtable_ref136, align 8
  %41 = icmp eq ptr %dtable_ptr137, null
  %next_dtable_ref138 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr137, i32 0, i32 2
  br i1 %41, label %dtable_found139, label %dtable_check135

dtable_found139:                                  ; preds = %dtable_check135
  store ptr @"$ct.dyn.std.io.ByteBuffer.read", ptr %dtable_ref136, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.read", i32 0, i32 2), align 8
  br label %dtable_skip140

dtable_skip140:                                   ; preds = %dtable_found139, %dtable_skip133
  %next_val141 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.read_byte", i32 0, i32 2), align 8
  %42 = icmp eq ptr %next_val141, inttoptr (i64 -1 to ptr)
  br i1 %42, label %dtable_check142, label %dtable_skip147

dtable_check142:                                  ; preds = %dtable_check142, %dtable_skip140
  %dtable_ref143 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip140 ], [ %next_dtable_ref145, %dtable_check142 ]
  %dtable_ptr144 = load ptr, ptr %dtable_ref143, align 8
  %43 = icmp eq ptr %dtable_ptr144, null
  %next_dtable_ref145 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr144, i32 0, i32 2
  br i1 %43, label %dtable_found146, label %dtable_check142

dtable_found146:                                  ; preds = %dtable_check142
  store ptr @"$ct.dyn.std.io.ByteBuffer.read_byte", ptr %dtable_ref143, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip147

dtable_skip147:                                   ; preds = %dtable_found146, %dtable_skip140
  %next_val148 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.pushback_byte", i32 0, i32 2), align 8
  %44 = icmp eq ptr %next_val148, inttoptr (i64 -1 to ptr)
  br i1 %44, label %dtable_check149, label %dtable_skip154

dtable_check149:                                  ; preds = %dtable_check149, %dtable_skip147
  %dtable_ref150 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip147 ], [ %next_dtable_ref152, %dtable_check149 ]
  %dtable_ptr151 = load ptr, ptr %dtable_ref150, align 8
  %45 = icmp eq ptr %dtable_ptr151, null
  %next_dtable_ref152 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr151, i32 0, i32 2
  br i1 %45, label %dtable_found153, label %dtable_check149

dtable_found153:                                  ; preds = %dtable_check149
  store ptr @"$ct.dyn.std.io.ByteBuffer.pushback_byte", ptr %dtable_ref150, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.pushback_byte", i32 0, i32 2), align 8
  br label %dtable_skip154

dtable_skip154:                                   ; preds = %dtable_found153, %dtable_skip147
  %next_val155 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.seek", i32 0, i32 2), align 8
  %46 = icmp eq ptr %next_val155, inttoptr (i64 -1 to ptr)
  br i1 %46, label %dtable_check156, label %dtable_skip161

dtable_check156:                                  ; preds = %dtable_check156, %dtable_skip154
  %dtable_ref157 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip154 ], [ %next_dtable_ref159, %dtable_check156 ]
  %dtable_ptr158 = load ptr, ptr %dtable_ref157, align 8
  %47 = icmp eq ptr %dtable_ptr158, null
  %next_dtable_ref159 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr158, i32 0, i32 2
  br i1 %47, label %dtable_found160, label %dtable_check156

dtable_found160:                                  ; preds = %dtable_check156
  store ptr @"$ct.dyn.std.io.ByteBuffer.seek", ptr %dtable_ref157, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.seek", i32 0, i32 2), align 8
  br label %dtable_skip161

dtable_skip161:                                   ; preds = %dtable_found160, %dtable_skip154
  %next_val162 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.available", i32 0, i32 2), align 8
  %48 = icmp eq ptr %next_val162, inttoptr (i64 -1 to ptr)
  br i1 %48, label %dtable_check163, label %dtable_skip168

dtable_check163:                                  ; preds = %dtable_check163, %dtable_skip161
  %dtable_ref164 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip161 ], [ %next_dtable_ref166, %dtable_check163 ]
  %dtable_ptr165 = load ptr, ptr %dtable_ref164, align 8
  %49 = icmp eq ptr %dtable_ptr165, null
  %next_dtable_ref166 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr165, i32 0, i32 2
  br i1 %49, label %dtable_found167, label %dtable_check163

dtable_found167:                                  ; preds = %dtable_check163
  store ptr @"$ct.dyn.std.io.ByteBuffer.available", ptr %dtable_ref164, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.available", i32 0, i32 2), align 8
  br label %dtable_skip168

dtable_skip168:                                   ; preds = %dtable_found167, %dtable_skip161
  %next_val169 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.TeeReader.read", i32 0, i32 2), align 8
  %50 = icmp eq ptr %next_val169, inttoptr (i64 -1 to ptr)
  br i1 %50, label %dtable_check170, label %dtable_skip175

dtable_check170:                                  ; preds = %dtable_check170, %dtable_skip168
  %dtable_ref171 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.TeeReader", i32 0, i32 2), %dtable_skip168 ], [ %next_dtable_ref173, %dtable_check170 ]
  %dtable_ptr172 = load ptr, ptr %dtable_ref171, align 8
  %51 = icmp eq ptr %dtable_ptr172, null
  %next_dtable_ref173 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr172, i32 0, i32 2
  br i1 %51, label %dtable_found174, label %dtable_check170

dtable_found174:                                  ; preds = %dtable_check170
  store ptr @"$ct.dyn.std.io.TeeReader.read", ptr %dtable_ref171, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.TeeReader.read", i32 0, i32 2), align 8
  br label %dtable_skip175

dtable_skip175:                                   ; preds = %dtable_found174, %dtable_skip168
  %next_val176 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.TeeReader.read_byte", i32 0, i32 2), align 8
  %52 = icmp eq ptr %next_val176, inttoptr (i64 -1 to ptr)
  br i1 %52, label %dtable_check177, label %dtable_skip182

dtable_check177:                                  ; preds = %dtable_check177, %dtable_skip175
  %dtable_ref178 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.TeeReader", i32 0, i32 2), %dtable_skip175 ], [ %next_dtable_ref180, %dtable_check177 ]
  %dtable_ptr179 = load ptr, ptr %dtable_ref178, align 8
  %53 = icmp eq ptr %dtable_ptr179, null
  %next_dtable_ref180 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr179, i32 0, i32 2
  br i1 %53, label %dtable_found181, label %dtable_check177

dtable_found181:                                  ; preds = %dtable_check177
  store ptr @"$ct.dyn.std.io.TeeReader.read_byte", ptr %dtable_ref178, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.TeeReader.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip182

dtable_skip182:                                   ; preds = %dtable_found181, %dtable_skip175
  %next_val183 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiWriter.write", i32 0, i32 2), align 8
  %54 = icmp eq ptr %next_val183, inttoptr (i64 -1 to ptr)
  br i1 %54, label %dtable_check184, label %dtable_skip189

dtable_check184:                                  ; preds = %dtable_check184, %dtable_skip182
  %dtable_ref185 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.MultiWriter", i32 0, i32 2), %dtable_skip182 ], [ %next_dtable_ref187, %dtable_check184 ]
  %dtable_ptr186 = load ptr, ptr %dtable_ref185, align 8
  %55 = icmp eq ptr %dtable_ptr186, null
  %next_dtable_ref187 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr186, i32 0, i32 2
  br i1 %55, label %dtable_found188, label %dtable_check184

dtable_found188:                                  ; preds = %dtable_check184
  store ptr @"$ct.dyn.std.io.MultiWriter.write", ptr %dtable_ref185, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiWriter.write", i32 0, i32 2), align 8
  br label %dtable_skip189

dtable_skip189:                                   ; preds = %dtable_found188, %dtable_skip182
  %next_val190 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiWriter.write_byte", i32 0, i32 2), align 8
  %56 = icmp eq ptr %next_val190, inttoptr (i64 -1 to ptr)
  br i1 %56, label %dtable_check191, label %dtable_skip196

dtable_check191:                                  ; preds = %dtable_check191, %dtable_skip189
  %dtable_ref192 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.MultiWriter", i32 0, i32 2), %dtable_skip189 ], [ %next_dtable_ref194, %dtable_check191 ]
  %dtable_ptr193 = load ptr, ptr %dtable_ref192, align 8
  %57 = icmp eq ptr %dtable_ptr193, null
  %next_dtable_ref194 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr193, i32 0, i32 2
  br i1 %57, label %dtable_found195, label %dtable_check191

dtable_found195:                                  ; preds = %dtable_check191
  store ptr @"$ct.dyn.std.io.MultiWriter.write_byte", ptr %dtable_ref192, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiWriter.write_byte", i32 0, i32 2), align 8
  br label %dtable_skip196

dtable_skip196:                                   ; preds = %dtable_found195, %dtable_skip189
  %next_val197 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.flush", i32 0, i32 2), align 8
  %58 = icmp eq ptr %next_val197, inttoptr (i64 -1 to ptr)
  br i1 %58, label %dtable_check198, label %dtable_skip203

dtable_check198:                                  ; preds = %dtable_check198, %dtable_skip196
  %dtable_ref199 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.Scanner", i32 0, i32 2), %dtable_skip196 ], [ %next_dtable_ref201, %dtable_check198 ]
  %dtable_ptr200 = load ptr, ptr %dtable_ref199, align 8
  %59 = icmp eq ptr %dtable_ptr200, null
  %next_dtable_ref201 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr200, i32 0, i32 2
  br i1 %59, label %dtable_found202, label %dtable_check198

dtable_found202:                                  ; preds = %dtable_check198
  store ptr @"$ct.dyn.std.io.Scanner.flush", ptr %dtable_ref199, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.flush", i32 0, i32 2), align 8
  br label %dtable_skip203

dtable_skip203:                                   ; preds = %dtable_found202, %dtable_skip196
  %next_val204 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.close", i32 0, i32 2), align 8
  %60 = icmp eq ptr %next_val204, inttoptr (i64 -1 to ptr)
  br i1 %60, label %dtable_check205, label %dtable_skip210

dtable_check205:                                  ; preds = %dtable_check205, %dtable_skip203
  %dtable_ref206 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.Scanner", i32 0, i32 2), %dtable_skip203 ], [ %next_dtable_ref208, %dtable_check205 ]
  %dtable_ptr207 = load ptr, ptr %dtable_ref206, align 8
  %61 = icmp eq ptr %dtable_ptr207, null
  %next_dtable_ref208 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr207, i32 0, i32 2
  br i1 %61, label %dtable_found209, label %dtable_check205

dtable_found209:                                  ; preds = %dtable_check205
  store ptr @"$ct.dyn.std.io.Scanner.close", ptr %dtable_ref206, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.close", i32 0, i32 2), align 8
  br label %dtable_skip210

dtable_skip210:                                   ; preds = %dtable_found209, %dtable_skip203
  %next_val211 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.read", i32 0, i32 2), align 8
  %62 = icmp eq ptr %next_val211, inttoptr (i64 -1 to ptr)
  br i1 %62, label %dtable_check212, label %dtable_skip217

dtable_check212:                                  ; preds = %dtable_check212, %dtable_skip210
  %dtable_ref213 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.Scanner", i32 0, i32 2), %dtable_skip210 ], [ %next_dtable_ref215, %dtable_check212 ]
  %dtable_ptr214 = load ptr, ptr %dtable_ref213, align 8
  %63 = icmp eq ptr %dtable_ptr214, null
  %next_dtable_ref215 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr214, i32 0, i32 2
  br i1 %63, label %dtable_found216, label %dtable_check212

dtable_found216:                                  ; preds = %dtable_check212
  store ptr @"$ct.dyn.std.io.Scanner.read", ptr %dtable_ref213, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.read", i32 0, i32 2), align 8
  br label %dtable_skip217

dtable_skip217:                                   ; preds = %dtable_found216, %dtable_skip210
  %next_val218 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.read_byte", i32 0, i32 2), align 8
  %64 = icmp eq ptr %next_val218, inttoptr (i64 -1 to ptr)
  br i1 %64, label %dtable_check219, label %dtable_skip224

dtable_check219:                                  ; preds = %dtable_check219, %dtable_skip217
  %dtable_ref220 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.Scanner", i32 0, i32 2), %dtable_skip217 ], [ %next_dtable_ref222, %dtable_check219 ]
  %dtable_ptr221 = load ptr, ptr %dtable_ref220, align 8
  %65 = icmp eq ptr %dtable_ptr221, null
  %next_dtable_ref222 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr221, i32 0, i32 2
  br i1 %65, label %dtable_found223, label %dtable_check219

dtable_found223:                                  ; preds = %dtable_check219
  store ptr @"$ct.dyn.std.io.Scanner.read_byte", ptr %dtable_ref220, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip224

dtable_skip224:                                   ; preds = %dtable_found223, %dtable_skip217
  %next_val225 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiReader.read", i32 0, i32 2), align 8
  %66 = icmp eq ptr %next_val225, inttoptr (i64 -1 to ptr)
  br i1 %66, label %dtable_check226, label %dtable_skip231

dtable_check226:                                  ; preds = %dtable_check226, %dtable_skip224
  %dtable_ref227 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.MultiReader", i32 0, i32 2), %dtable_skip224 ], [ %next_dtable_ref229, %dtable_check226 ]
  %dtable_ptr228 = load ptr, ptr %dtable_ref227, align 8
  %67 = icmp eq ptr %dtable_ptr228, null
  %next_dtable_ref229 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr228, i32 0, i32 2
  br i1 %67, label %dtable_found230, label %dtable_check226

dtable_found230:                                  ; preds = %dtable_check226
  store ptr @"$ct.dyn.std.io.MultiReader.read", ptr %dtable_ref227, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiReader.read", i32 0, i32 2), align 8
  br label %dtable_skip231

dtable_skip231:                                   ; preds = %dtable_found230, %dtable_skip224
  %next_val232 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiReader.read_byte", i32 0, i32 2), align 8
  %68 = icmp eq ptr %next_val232, inttoptr (i64 -1 to ptr)
  br i1 %68, label %dtable_check233, label %dtable_skip238

dtable_check233:                                  ; preds = %dtable_check233, %dtable_skip231
  %dtable_ref234 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.MultiReader", i32 0, i32 2), %dtable_skip231 ], [ %next_dtable_ref236, %dtable_check233 ]
  %dtable_ptr235 = load ptr, ptr %dtable_ref234, align 8
  %69 = icmp eq ptr %dtable_ptr235, null
  %next_dtable_ref236 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr235, i32 0, i32 2
  br i1 %69, label %dtable_found237, label %dtable_check233

dtable_found237:                                  ; preds = %dtable_check233
  store ptr @"$ct.dyn.std.io.MultiReader.read_byte", ptr %dtable_ref234, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiReader.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip238

dtable_skip238:                                   ; preds = %dtable_found237, %dtable_skip231
  %next_val239 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.close", i32 0, i32 2), align 8
  %70 = icmp eq ptr %next_val239, inttoptr (i64 -1 to ptr)
  br i1 %70, label %dtable_check240, label %dtable_skip245

dtable_check240:                                  ; preds = %dtable_check240, %dtable_skip238
  %dtable_ref241 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.LimitReader", i32 0, i32 2), %dtable_skip238 ], [ %next_dtable_ref243, %dtable_check240 ]
  %dtable_ptr242 = load ptr, ptr %dtable_ref241, align 8
  %71 = icmp eq ptr %dtable_ptr242, null
  %next_dtable_ref243 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr242, i32 0, i32 2
  br i1 %71, label %dtable_found244, label %dtable_check240

dtable_found244:                                  ; preds = %dtable_check240
  store ptr @"$ct.dyn.std.io.LimitReader.close", ptr %dtable_ref241, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.close", i32 0, i32 2), align 8
  br label %dtable_skip245

dtable_skip245:                                   ; preds = %dtable_found244, %dtable_skip238
  %next_val246 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.read", i32 0, i32 2), align 8
  %72 = icmp eq ptr %next_val246, inttoptr (i64 -1 to ptr)
  br i1 %72, label %dtable_check247, label %dtable_skip252

dtable_check247:                                  ; preds = %dtable_check247, %dtable_skip245
  %dtable_ref248 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.LimitReader", i32 0, i32 2), %dtable_skip245 ], [ %next_dtable_ref250, %dtable_check247 ]
  %dtable_ptr249 = load ptr, ptr %dtable_ref248, align 8
  %73 = icmp eq ptr %dtable_ptr249, null
  %next_dtable_ref250 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr249, i32 0, i32 2
  br i1 %73, label %dtable_found251, label %dtable_check247

dtable_found251:                                  ; preds = %dtable_check247
  store ptr @"$ct.dyn.std.io.LimitReader.read", ptr %dtable_ref248, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.read", i32 0, i32 2), align 8
  br label %dtable_skip252

dtable_skip252:                                   ; preds = %dtable_found251, %dtable_skip245
  %next_val253 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.read_byte", i32 0, i32 2), align 8
  %74 = icmp eq ptr %next_val253, inttoptr (i64 -1 to ptr)
  br i1 %74, label %dtable_check254, label %dtable_skip259

dtable_check254:                                  ; preds = %dtable_check254, %dtable_skip252
  %dtable_ref255 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.LimitReader", i32 0, i32 2), %dtable_skip252 ], [ %next_dtable_ref257, %dtable_check254 ]
  %dtable_ptr256 = load ptr, ptr %dtable_ref255, align 8
  %75 = icmp eq ptr %dtable_ptr256, null
  %next_dtable_ref257 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr256, i32 0, i32 2
  br i1 %75, label %dtable_found258, label %dtable_check254

dtable_found258:                                  ; preds = %dtable_check254
  store ptr @"$ct.dyn.std.io.LimitReader.read_byte", ptr %dtable_ref255, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip259

dtable_skip259:                                   ; preds = %dtable_found258, %dtable_skip252
  %next_val260 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.available", i32 0, i32 2), align 8
  %76 = icmp eq ptr %next_val260, inttoptr (i64 -1 to ptr)
  br i1 %76, label %dtable_check261, label %dtable_skip266

dtable_check261:                                  ; preds = %dtable_check261, %dtable_skip259
  %dtable_ref262 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.LimitReader", i32 0, i32 2), %dtable_skip259 ], [ %next_dtable_ref264, %dtable_check261 ]
  %dtable_ptr263 = load ptr, ptr %dtable_ref262, align 8
  %77 = icmp eq ptr %dtable_ptr263, null
  %next_dtable_ref264 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr263, i32 0, i32 2
  br i1 %77, label %dtable_found265, label %dtable_check261

dtable_found265:                                  ; preds = %dtable_check261
  store ptr @"$ct.dyn.std.io.LimitReader.available", ptr %dtable_ref262, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.available", i32 0, i32 2), align 8
  br label %dtable_skip266

dtable_skip266:                                   ; preds = %dtable_found265, %dtable_skip259
  %next_val267 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.ReflectedParam.to_format", i32 0, i32 2), align 8
  %78 = icmp eq ptr %next_val267, inttoptr (i64 -1 to ptr)
  br i1 %78, label %dtable_check268, label %dtable_skip273

dtable_check268:                                  ; preds = %dtable_check268, %dtable_skip266
  %dtable_ref269 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.ReflectedParam", i32 0, i32 2), %dtable_skip266 ], [ %next_dtable_ref271, %dtable_check268 ]
  %dtable_ptr270 = load ptr, ptr %dtable_ref269, align 8
  %79 = icmp eq ptr %dtable_ptr270, null
  %next_dtable_ref271 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr270, i32 0, i32 2
  br i1 %79, label %dtable_found272, label %dtable_check268

dtable_found272:                                  ; preds = %dtable_check268
  store ptr @"$ct.dyn.std.core.ReflectedParam.to_format", ptr %dtable_ref269, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.ReflectedParam.to_format", i32 0, i32 2), align 8
  br label %dtable_skip273

dtable_skip273:                                   ; preds = %dtable_found272, %dtable_skip266
  ret void
}

attributes #0 = { nounwind ssp uwtable "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #3 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { noreturn }
attributes #6 = { alwaysinline }

!llvm.module.flags = !{!36, !37, !38, !39, !40, !41, !42}
!llvm.dbg.cu = !{!43}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "WRITER_BITS", linkageName: "std.io.WRITER_BITS", scope: !2, file: !2, line: 50, type: !3, isLocal: false, isDefinition: true, align: 4)
!2 = !DIFile(filename: "bits.c3", directory: "/usr/local/lib/c3/std/io")
!3 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!4 = !DIGlobalVariableExpression(var: !5, expr: !DIExpression())
!5 = distinct !DIGlobalVariable(name: "PRINTF_NTOA_BUFFER_SIZE", linkageName: "std.io.PRINTF_NTOA_BUFFER_SIZE", scope: !6, file: !6, line: 5, type: !3, isLocal: false, isDefinition: true, align: 4)
!6 = !DIFile(filename: "formatter.c3", directory: "/usr/local/lib/c3/std/io")
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(name: "MAX_VARS", linkageName: "std.io.MAX_VARS", scope: !9, file: !9, line: 211, type: !10, isLocal: true, isDefinition: true, align: 1)
!9 = !DIFile(filename: "stream.c3", directory: "/usr/local/lib/c3/std/io")
!10 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 72, align: 8, elements: !12)
!11 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_unsigned_char)
!12 = !{!13}
!13 = !DISubrange(count: 9, lowerBound: 0)
!14 = !DIGlobalVariableExpression(var: !15, expr: !DIExpression())
!15 = distinct !DIGlobalVariable(name: "file", linkageName: "stdout.file", scope: !16, file: !16, line: 363, type: !17, isLocal: true, isDefinition: true, align: 8)
!16 = !DIFile(filename: "io.c3", directory: "/usr/local/lib/c3/std/io")
!17 = !DICompositeType(tag: DW_TAG_structure_type, name: "File", scope: !16, file: !16, line: 4, size: 64, align: 64, elements: !18, identifier: "std.io.File")
!18 = !{!19}
!19 = !DIDerivedType(tag: DW_TAG_member, name: "file", scope: !17, file: !16, line: 6, baseType: !20, size: 64, align: 64)
!20 = !DIDerivedType(tag: DW_TAG_typedef, name: "CFile", scope: !16, file: !16, line: 357, baseType: !21, align: 8)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "void*", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!22 = !DIGlobalVariableExpression(var: !23, expr: !DIExpression())
!23 = distinct !DIGlobalVariable(name: "file", linkageName: "stderr.file", scope: !16, file: !16, line: 375, type: !17, isLocal: true, isDefinition: true, align: 8)
!24 = !DIGlobalVariableExpression(var: !25, expr: !DIExpression())
!25 = distinct !DIGlobalVariable(name: "file", linkageName: "stdin.file", scope: !16, file: !16, line: 387, type: !17, isLocal: true, isDefinition: true, align: 8)
!26 = !DIGlobalVariableExpression(var: !27, expr: !DIExpression())
!27 = distinct !DIGlobalVariable(name: "XDIGITS_H", linkageName: "std.io.XDIGITS_H", scope: !28, file: !28, line: 4, type: !29, isLocal: false, isDefinition: true, align: 16)
!28 = !DIFile(filename: "formatter_private.c3", directory: "/usr/local/lib/c3/std/io")
!29 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 128, align: 8, elements: !30)
!30 = !{!31}
!31 = !DISubrange(count: 16, lowerBound: 0)
!32 = !DIGlobalVariableExpression(var: !33, expr: !DIExpression())
!33 = distinct !DIGlobalVariable(name: "XDIGITS_L", linkageName: "std.io.XDIGITS_L", scope: !28, file: !28, line: 5, type: !29, isLocal: false, isDefinition: true, align: 16)
!34 = !DIGlobalVariableExpression(var: !35, expr: !DIExpression())
!35 = distinct !DIGlobalVariable(name: "BUF_SIZE", linkageName: "floatformat.BUF_SIZE", scope: !28, file: !28, line: 216, type: !3, isLocal: true, isDefinition: true, align: 4)
!36 = !{i32 2, !"Dwarf Version", i32 4}
!37 = !{i32 2, !"Debug Info Version", i32 3}
!38 = !{i32 2, !"wchar_size", i32 4}
!39 = !{i32 4, !"PIE Level", i32 2}
!40 = !{i32 4, !"PIC Level", i32 2}
!41 = !{i32 1, !"uwtable", i32 2}
!42 = !{i32 2, !"frame-pointer", i32 2}
!43 = distinct !DICompileUnit(language: DW_LANG_C11, file: !2, producer: "c3c", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !44, globals: !80, splitDebugInlining: false)
!44 = !{!45, !51, !57}
!45 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "Seek", scope: !46, file: !46, line: 7, baseType: !3, size: 32, align: 32, elements: !47)
!46 = !DIFile(filename: "bytereader.c3", directory: "/usr/local/lib/c3/std/io/stream")
!47 = !{!48, !49, !50}
!48 = !DIEnumerator(name: "SET", value: 0)
!49 = !DIEnumerator(name: "CURSOR", value: 1)
!50 = !DIEnumerator(name: "END", value: 2)
!51 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "FloatFormatting", scope: !28, file: !28, line: 200, baseType: !3, size: 32, align: 32, elements: !52)
!52 = !{!53, !54, !55, !56}
!53 = !DIEnumerator(name: "FLOAT", value: 0)
!54 = !DIEnumerator(name: "EXPONENTIAL", value: 1)
!55 = !DIEnumerator(name: "ADAPTIVE", value: 2)
!56 = !DIEnumerator(name: "HEX", value: 3)
!57 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "TypeKind", scope: !6, file: !6, line: 349, baseType: !11, size: 8, align: 8, elements: !58)
!58 = !{!59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79}
!59 = !DIEnumerator(name: "VOID", value: 0, isUnsigned: true)
!60 = !DIEnumerator(name: "BOOL", value: 1, isUnsigned: true)
!61 = !DIEnumerator(name: "SIGNED_INT", value: 2, isUnsigned: true)
!62 = !DIEnumerator(name: "UNSIGNED_INT", value: 3, isUnsigned: true)
!63 = !DIEnumerator(name: "FLOAT", value: 4, isUnsigned: true)
!64 = !DIEnumerator(name: "TYPEID", value: 5, isUnsigned: true)
!65 = !DIEnumerator(name: "ANYFAULT", value: 6, isUnsigned: true)
!66 = !DIEnumerator(name: "ANY", value: 7, isUnsigned: true)
!67 = !DIEnumerator(name: "ENUM", value: 8, isUnsigned: true)
!68 = !DIEnumerator(name: "FAULT", value: 9, isUnsigned: true)
!69 = !DIEnumerator(name: "STRUCT", value: 10, isUnsigned: true)
!70 = !DIEnumerator(name: "UNION", value: 11, isUnsigned: true)
!71 = !DIEnumerator(name: "BITSTRUCT", value: 12, isUnsigned: true)
!72 = !DIEnumerator(name: "FUNC", value: 13, isUnsigned: true)
!73 = !DIEnumerator(name: "OPTIONAL", value: 14, isUnsigned: true)
!74 = !DIEnumerator(name: "ARRAY", value: 15, isUnsigned: true)
!75 = !DIEnumerator(name: "SLICE", value: 16, isUnsigned: true)
!76 = !DIEnumerator(name: "VECTOR", value: 17, isUnsigned: true)
!77 = !DIEnumerator(name: "DISTINCT", value: 18, isUnsigned: true)
!78 = !DIEnumerator(name: "POINTER", value: 19, isUnsigned: true)
!79 = !DIEnumerator(name: "INTERFACE", value: 20, isUnsigned: true)
!80 = !{!0, !4, !7, !14, !22, !24, !26, !32, !34}
!81 = distinct !DISubprogram(name: "init", linkageName: "std.io.BitReader.init", scope: !2, file: !2, line: 10, type: !82, scopeLine: 10, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!82 = !DISubroutineType(types: !83)
!83 = !{null, !84, !88}
!84 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "BitReader*", baseType: !85, size: 64, align: 64, dwarfAddressSpace: 0)
!85 = !DICompositeType(tag: DW_TAG_structure_type, name: "BitReader", scope: !2, file: !2, line: 3, size: 192, align: 64, elements: !86, identifier: "std.io.BitReader")
!86 = !{!87, !93, !95}
!87 = !DIDerivedType(tag: DW_TAG_member, name: "reader", scope: !85, file: !2, line: 5, baseType: !88, size: 128, align: 64)
!88 = !DICompositeType(tag: DW_TAG_structure_type, name: "InStream", size: 128, align: 64, elements: !89, identifier: "InStream")
!89 = !{!90, !91}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !88, baseType: !21, size: 64, align: 64)
!91 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !88, baseType: !92, size: 64, align: 64, offset: 64)
!92 = !DIBasicType(name: "typeid", size: 64, encoding: DW_ATE_address)
!93 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !85, file: !2, line: 6, baseType: !94, size: 32, align: 32, offset: 128)
!94 = !DIBasicType(name: "uint", size: 32, encoding: DW_ATE_unsigned)
!95 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !85, file: !2, line: 7, baseType: !94, size: 32, align: 32, offset: 160)
!96 = !{}
!97 = !DILocation(line: 11, column: 1, scope: !81)
!98 = !DILocalVariable(name: "self", arg: 1, scope: !81, file: !2, line: 10, type: !84)
!99 = !DILocation(line: 10, column: 24, scope: !81)
!100 = !DILocalVariable(name: "byte_reader", arg: 2, scope: !81, file: !2, line: 10, type: !88)
!101 = !DILocation(line: 10, column: 40, scope: !81)
!102 = !DILocation(line: 12, column: 3, scope: !81)
!103 = !DILocation(line: 12, column: 22, scope: !81)
!104 = distinct !DISubprogram(name: "clear", linkageName: "std.io.BitReader.clear", scope: !2, file: !2, line: 15, type: !105, scopeLine: 15, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!105 = !DISubroutineType(types: !106)
!106 = !{null, !84}
!107 = !DILocation(line: 16, column: 1, scope: !104)
!108 = !DILocalVariable(name: "self", arg: 1, scope: !104, file: !2, line: 15, type: !84)
!109 = !DILocation(line: 15, column: 25, scope: !104)
!110 = !DILocation(line: 17, column: 2, scope: !104)
!111 = !DILocation(line: 17, column: 13, scope: !104)
!112 = distinct !DISubprogram(name: "read_bits", linkageName: "std.io.BitReader.read_bits", scope: !2, file: !2, line: 24, type: !113, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!113 = !DISubroutineType(types: !114)
!114 = !{!115, !117, !84, !94}
!115 = !DIDerivedType(tag: DW_TAG_typedef, name: "anyfault", baseType: !116)
!116 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!117 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "char*", baseType: !11, size: 64, align: 64, dwarfAddressSpace: 0)
!118 = !DILocation(line: 25, column: 1, scope: !112)
!119 = !DILocalVariable(name: "self", arg: 1, scope: !112, file: !2, line: 24, type: !84)
!120 = !DILocation(line: 24, column: 30, scope: !112)
!121 = !DILocalVariable(name: "nbits", arg: 2, scope: !112, file: !2, line: 24, type: !94)
!122 = !DILocation(line: 24, column: 42, scope: !112)
!123 = !DILocation(line: 21, column: 11, scope: !124)
!124 = distinct !DILexicalBlock(scope: !112, file: !2, line: 25, column: 1)
!125 = !DILocation(line: 22, column: 11, scope: !124)
!126 = !DILocation(line: 22, column: 22, scope: !124)
!127 = !DILocalVariable(name: "bits", scope: !112, file: !2, line: 26, type: !94, align: 4)
!128 = !DILocation(line: 26, column: 7, scope: !112)
!129 = !DILocation(line: 26, column: 14, scope: !112)
!130 = !DILocation(line: 27, column: 6, scope: !112)
!131 = !DILocation(line: 27, column: 17, scope: !112)
!132 = !DILocalVariable(name: "c", scope: !133, file: !2, line: 30, type: !11, align: 1)
!133 = distinct !DILexicalBlock(scope: !112, file: !2, line: 28, column: 2)
!134 = !DILocation(line: 30, column: 8, scope: !133)
!135 = !DILocation(line: 30, column: 12, scope: !133)
!136 = !DILocation(line: 31, column: 3, scope: !133)
!137 = !DILocation(line: 32, column: 3, scope: !133)
!138 = !DILocation(line: 32, column: 11, scope: !133)
!139 = !DILocation(line: 33, column: 3, scope: !133)
!140 = !DILocation(line: 33, column: 15, scope: !133)
!141 = !DILocation(line: 34, column: 3, scope: !133)
!142 = !DILocation(line: 36, column: 2, scope: !112)
!143 = !DILocation(line: 36, column: 14, scope: !112)
!144 = !DILocalVariable(name: "mask", scope: !112, file: !2, line: 37, type: !94, align: 4)
!145 = !DILocation(line: 37, column: 7, scope: !112)
!146 = !DILocation(line: 37, column: 20, scope: !112)
!147 = !DILocation(line: 37, column: 15, scope: !112)
!148 = !DILocation(line: 38, column: 17, scope: !112)
!149 = !DILocation(line: 38, column: 25, scope: !112)
!150 = !DILocation(line: 38, column: 37, scope: !112)
!151 = !DILocation(line: 38, column: 10, scope: !112)
!152 = distinct !DISubprogram(name: "init", linkageName: "std.io.BitWriter.init", scope: !2, file: !2, line: 52, type: !153, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!153 = !DISubroutineType(types: !154)
!154 = !{null, !155, !159}
!155 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "BitWriter*", baseType: !156, size: 64, align: 64, dwarfAddressSpace: 0)
!156 = !DICompositeType(tag: DW_TAG_structure_type, name: "BitWriter", scope: !2, file: !2, line: 41, size: 192, align: 64, elements: !157, identifier: "std.io.BitWriter")
!157 = !{!158, !163, !164}
!158 = !DIDerivedType(tag: DW_TAG_member, name: "writer", scope: !156, file: !2, line: 43, baseType: !159, size: 128, align: 64)
!159 = !DICompositeType(tag: DW_TAG_structure_type, name: "OutStream", size: 128, align: 64, elements: !160, identifier: "OutStream")
!160 = !{!161, !162}
!161 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !159, baseType: !21, size: 64, align: 64)
!162 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !159, baseType: !92, size: 64, align: 64, offset: 64)
!163 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !156, file: !2, line: 44, baseType: !94, size: 32, align: 32, offset: 128)
!164 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !156, file: !2, line: 45, baseType: !94, size: 32, align: 32, offset: 160)
!165 = !DILocation(line: 53, column: 1, scope: !152)
!166 = !DILocalVariable(name: "self", arg: 1, scope: !152, file: !2, line: 52, type: !155)
!167 = !DILocation(line: 52, column: 24, scope: !152)
!168 = !DILocalVariable(name: "byte_writer", arg: 2, scope: !152, file: !2, line: 52, type: !159)
!169 = !DILocation(line: 52, column: 41, scope: !152)
!170 = !DILocation(line: 54, column: 3, scope: !152)
!171 = !DILocation(line: 54, column: 22, scope: !152)
!172 = distinct !DISubprogram(name: "flush", linkageName: "std.io.BitWriter.flush", scope: !2, file: !2, line: 57, type: !173, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!173 = !DISubroutineType(types: !174)
!174 = !{!115, !21, !155}
!175 = !DILocation(line: 58, column: 1, scope: !172)
!176 = !DILocalVariable(name: "self", arg: 1, scope: !172, file: !2, line: 57, type: !155)
!177 = !DILocation(line: 57, column: 26, scope: !172)
!178 = !DILocation(line: 59, column: 6, scope: !172)
!179 = !DILocalVariable(name: "padding", scope: !172, file: !2, line: 61, type: !3, align: 4)
!180 = !DILocation(line: 61, column: 6, scope: !172)
!181 = !DILocation(line: 61, column: 42, scope: !172)
!182 = !DILocation(line: 61, column: 17, scope: !172)
!183 = !DILocalVariable(name: "bits", scope: !172, file: !2, line: 62, type: !94, align: 4)
!184 = !DILocation(line: 62, column: 7, scope: !172)
!185 = !DILocation(line: 62, column: 14, scope: !172)
!186 = !DILocation(line: 62, column: 27, scope: !172)
!187 = !DILocalVariable(name: "n", scope: !172, file: !2, line: 63, type: !94, align: 4)
!188 = !DILocation(line: 63, column: 7, scope: !172)
!189 = !DILocation(line: 63, column: 12, scope: !172)
!190 = !DILocalVariable(name: "buffer", scope: !172, file: !2, line: 64, type: !191, align: 1)
!191 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 32, align: 8, elements: !192)
!192 = !{!193}
!193 = !DISubrange(count: 4, lowerBound: 0)
!194 = !DILocation(line: 64, column: 10, scope: !172)
!195 = !DILocation(line: 172, column: 11, scope: !196, inlinedAt: !198)
!196 = distinct !DISubprogram(name: "is_arrayptr_or_slice_of_char", linkageName: "is_arrayptr_or_slice_of_char", scope: !197, file: !197, line: 165, scopeLine: 165, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!197 = !DIFile(filename: "bitorder.c3", directory: "/usr/local/lib/c3/std/core")
!198 = !DILocation(line: 107, column: 11, scope: !199, inlinedAt: !201)
!199 = distinct !DILexicalBlock(scope: !200, file: !197, line: 111, column: 1)
!200 = distinct !DISubprogram(name: "write", linkageName: "write", scope: !197, file: !197, line: 110, scopeLine: 110, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!201 = !DILocation(line: 65, column: 2, scope: !172)
!202 = !DILocalVariable(name: "s", scope: !200, file: !2, line: 112, type: !203, align: 8)
!203 = !DICompositeType(tag: DW_TAG_structure_type, name: "char[]", size: 128, align: 64, elements: !204, identifier: "char[]")
!204 = !{!205, !206}
!205 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !203, baseType: !117, size: 64, align: 64)
!206 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !203, baseType: !207, size: 64, align: 64, offset: 64)
!207 = !DIDerivedType(tag: DW_TAG_typedef, name: "usz", baseType: !208)
!208 = !DIBasicType(name: "ulong", size: 64, encoding: DW_ATE_unsigned)
!209 = !DILocation(line: 112, column: 9, scope: !200, inlinedAt: !201)
!210 = !DILocation(line: 115, column: 9, scope: !200, inlinedAt: !201)
!211 = !DILocation(line: 119, column: 16, scope: !200, inlinedAt: !201)
!212 = !DILocation(line: 119, column: 4, scope: !200, inlinedAt: !201)
!213 = !DILocation(line: 212, column: 20, scope: !214, inlinedAt: !216)
!214 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !215, file: !215, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!215 = !DIFile(filename: "builtin.c3", directory: "/usr/local/lib/c3/std/core")
!216 = !DILocation(line: 119, column: 24, scope: !200, inlinedAt: !201)
!217 = !DILocation(line: 212, column: 12, scope: !214, inlinedAt: !216)
!218 = !DILocation(line: 66, column: 16, scope: !172)
!219 = !DILocation(line: 66, column: 37, scope: !172)
!220 = !DILocation(line: 66, column: 29, scope: !172)
!221 = !DILocation(line: 101, column: 6, scope: !222, inlinedAt: !223)
!222 = distinct !DISubprogram(name: "write_all", linkageName: "write_all", scope: !9, file: !9, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!223 = !DILocation(line: 66, column: 2, scope: !172)
!224 = !DILocation(line: 101, column: 30, scope: !222, inlinedAt: !223)
!225 = !DILocalVariable(name: "n", scope: !222, file: !2, line: 102, type: !207, align: 8)
!226 = !DILocation(line: 102, column: 6, scope: !222, inlinedAt: !223)
!227 = !DILocation(line: 102, column: 23, scope: !222, inlinedAt: !223)
!228 = !DILocation(line: 102, column: 10, scope: !222, inlinedAt: !223)
!229 = !DILocation(line: 103, column: 6, scope: !222, inlinedAt: !223)
!230 = !DILocation(line: 103, column: 11, scope: !222, inlinedAt: !223)
!231 = !DILocation(line: 103, column: 30, scope: !222, inlinedAt: !223)
!232 = !DILocation(line: 104, column: 9, scope: !222, inlinedAt: !223)
!233 = !DILocation(line: 67, column: 2, scope: !172)
!234 = !DILocation(line: 67, column: 13, scope: !172)
!235 = distinct !DISubprogram(name: "write_bits", linkageName: "std.io.BitWriter.write_bits", scope: !2, file: !2, line: 73, type: !236, scopeLine: 73, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!236 = !DISubroutineType(types: !237)
!237 = !{!115, !21, !155, !94, !94}
!238 = !DILocation(line: 74, column: 1, scope: !235)
!239 = !DILocalVariable(name: "self", arg: 1, scope: !235, file: !2, line: 73, type: !155)
!240 = !DILocation(line: 73, column: 31, scope: !235)
!241 = !DILocalVariable(name: "bits", arg: 2, scope: !235, file: !2, line: 73, type: !94)
!242 = !DILocation(line: 73, column: 43, scope: !235)
!243 = !DILocalVariable(name: "nbits", arg: 3, scope: !235, file: !2, line: 73, type: !94)
!244 = !DILocation(line: 73, column: 54, scope: !235)
!245 = !DILocation(line: 71, column: 11, scope: !246)
!246 = distinct !DILexicalBlock(scope: !235, file: !2, line: 74, column: 1)
!247 = !DILocation(line: 75, column: 6, scope: !235)
!248 = !DILocation(line: 76, column: 2, scope: !235)
!249 = !DILocation(line: 76, column: 9, scope: !250)
!250 = distinct !DILexicalBlock(scope: !235, file: !2, line: 76, column: 2)
!251 = !DILocation(line: 76, column: 20, scope: !250)
!252 = !DILocalVariable(name: "to_push", scope: !253, file: !2, line: 78, type: !94, align: 4)
!253 = distinct !DILexicalBlock(scope: !250, file: !2, line: 77, column: 2)
!254 = !DILocation(line: 78, column: 8, scope: !253)
!255 = !DILocation(line: 78, column: 32, scope: !253)
!256 = !DILocation(line: 78, column: 18, scope: !253)
!257 = !DILocalVariable(name: "bits_to_push", scope: !253, file: !2, line: 79, type: !94, align: 4)
!258 = !DILocation(line: 79, column: 8, scope: !253)
!259 = !DILocation(line: 79, column: 24, scope: !253)
!260 = !DILocation(line: 79, column: 33, scope: !253)
!261 = !DILocation(line: 79, column: 41, scope: !253)
!262 = !DILocation(line: 79, column: 60, scope: !253)
!263 = !DILocation(line: 79, column: 55, scope: !253)
!264 = !DILocation(line: 81, column: 3, scope: !253)
!265 = !DILocation(line: 81, column: 17, scope: !253)
!266 = !DILocation(line: 82, column: 3, scope: !253)
!267 = !DILocation(line: 82, column: 16, scope: !253)
!268 = !DILocation(line: 83, column: 3, scope: !253)
!269 = !DILocation(line: 83, column: 15, scope: !253)
!270 = !DILocation(line: 84, column: 3, scope: !253)
!271 = !DILocation(line: 84, column: 12, scope: !253)
!272 = !DILocation(line: 86, column: 3, scope: !253)
!273 = !DILocation(line: 89, column: 6, scope: !235)
!274 = !DILocation(line: 91, column: 2, scope: !235)
!275 = !DILocation(line: 91, column: 16, scope: !235)
!276 = !DILocation(line: 92, column: 2, scope: !235)
!277 = !DILocation(line: 92, column: 15, scope: !235)
!278 = !DILocation(line: 92, column: 29, scope: !235)
!279 = !DILocation(line: 92, column: 24, scope: !235)
!280 = !DILocation(line: 93, column: 2, scope: !235)
!281 = !DILocation(line: 93, column: 14, scope: !235)
!282 = distinct !DISubprogram(name: "len", linkageName: "std.io.ByteReader.len", scope: !46, file: !46, line: 9, type: !283, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!283 = !DISubroutineType(types: !284)
!284 = !{!207, !285}
!285 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ByteReader*", baseType: !286, size: 64, align: 64, dwarfAddressSpace: 0)
!286 = !DICompositeType(tag: DW_TAG_structure_type, name: "ByteReader", scope: !46, file: !46, line: 3, size: 192, align: 64, elements: !287, identifier: "std.io.ByteReader")
!287 = !{!288, !289}
!288 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !286, file: !46, line: 5, baseType: !203, size: 128, align: 64)
!289 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !286, file: !46, line: 6, baseType: !207, size: 64, align: 64, offset: 128)
!290 = !DILocation(line: 10, column: 1, scope: !282)
!291 = !DILocalVariable(name: "self", arg: 1, scope: !282, file: !46, line: 9, type: !285)
!292 = !DILocation(line: 9, column: 23, scope: !282)
!293 = !DILocation(line: 11, column: 9, scope: !282)
!294 = distinct !DISubprogram(name: "init", linkageName: "std.io.ByteReader.init", scope: !46, file: !46, line: 14, type: !295, scopeLine: 14, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!295 = !DISubroutineType(types: !296)
!296 = !{!285, !285, !203}
!297 = !DILocation(line: 15, column: 1, scope: !294)
!298 = !DILocalVariable(name: "self", arg: 1, scope: !294, file: !46, line: 14, type: !285)
!299 = !DILocation(line: 14, column: 32, scope: !294)
!300 = !DILocalVariable(name: "bytes", arg: 2, scope: !294, file: !46, line: 14, type: !203)
!301 = !DILocation(line: 14, column: 46, scope: !294)
!302 = !DILocation(line: 16, column: 3, scope: !294)
!303 = !DILocation(line: 16, column: 21, scope: !294)
!304 = !DILocation(line: 17, column: 9, scope: !294)
!305 = distinct !DISubprogram(name: "read", linkageName: "std.io.ByteReader.read", scope: !46, file: !46, line: 20, type: !306, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!306 = !DISubroutineType(types: !307)
!307 = !{!115, !308, !285, !203}
!308 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "usz*", baseType: !207, size: 64, align: 64, dwarfAddressSpace: 0)
!309 = !DILocation(line: 21, column: 1, scope: !305)
!310 = !DILocalVariable(name: "self", arg: 1, scope: !305, file: !46, line: 20, type: !285)
!311 = !DILocation(line: 20, column: 25, scope: !305)
!312 = !DILocalVariable(name: "bytes", arg: 2, scope: !305, file: !46, line: 20, type: !203)
!313 = !DILocation(line: 20, column: 39, scope: !305)
!314 = !DILocation(line: 22, column: 6, scope: !305)
!315 = !DILocation(line: 22, column: 20, scope: !305)
!316 = !DILocation(line: 22, column: 43, scope: !305)
!317 = !DILocalVariable(name: "len", scope: !305, file: !46, line: 23, type: !207, align: 8)
!318 = !DILocation(line: 23, column: 6, scope: !305)
!319 = !DILocation(line: 23, column: 16, scope: !305)
!320 = !DILocation(line: 23, column: 33, scope: !305)
!321 = !DILocation(line: 23, column: 45, scope: !305)
!322 = !DILocation(line: 17, column: 10, scope: !323, inlinedAt: !325)
!323 = distinct !DISubprogram(name: "less", linkageName: "less", scope: !324, file: !324, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!324 = !DIFile(filename: "builtin_comparison.c3", directory: "/usr/local/lib/c3/std/core")
!325 = !DILocation(line: 100, column: 10, scope: !326, inlinedAt: !327)
!326 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !324, file: !324, line: 97, scopeLine: 97, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!327 = !DILocation(line: 23, column: 12, scope: !305)
!328 = !DILocation(line: 17, column: 14, scope: !323, inlinedAt: !325)
!329 = !DILocation(line: 100, column: 31, scope: !326, inlinedAt: !327)
!330 = !DILocation(line: 100, column: 35, scope: !326, inlinedAt: !327)
!331 = !DILocation(line: 24, column: 6, scope: !305)
!332 = !DILocation(line: 24, column: 23, scope: !305)
!333 = !DILocation(line: 25, column: 12, scope: !305)
!334 = !DILocation(line: 25, column: 24, scope: !305)
!335 = !DILocation(line: 25, column: 35, scope: !305)
!336 = !DILocation(line: 324, column: 11, scope: !337, inlinedAt: !340)
!337 = distinct !DILexicalBlock(scope: !339, file: !338, line: 327, column: 1)
!338 = !DIFile(filename: "mem.c3", directory: "/usr/local/lib/c3/std/core")
!339 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !338, file: !338, line: 326, scopeLine: 326, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!340 = !DILocation(line: 25, column: 2, scope: !305)
!341 = !DILocation(line: 324, column: 23, scope: !337, inlinedAt: !340)
!342 = !DILocation(line: 324, column: 29, scope: !337, inlinedAt: !340)
!343 = !DILocation(line: 324, column: 36, scope: !337, inlinedAt: !340)
!344 = !DILocation(line: 324, column: 43, scope: !337, inlinedAt: !340)
!345 = !DILocation(line: 324, column: 49, scope: !337, inlinedAt: !340)
!346 = !DILocation(line: 324, column: 56, scope: !337, inlinedAt: !340)
!347 = !DILocation(line: 328, column: 11, scope: !339, inlinedAt: !340)
!348 = !DILocation(line: 328, column: 16, scope: !339, inlinedAt: !340)
!349 = !DILocation(line: 328, column: 21, scope: !339, inlinedAt: !340)
!350 = !DILocation(line: 328, column: 26, scope: !339, inlinedAt: !340)
!351 = !DILocation(line: 26, column: 2, scope: !305)
!352 = !DILocation(line: 26, column: 16, scope: !305)
!353 = !DILocation(line: 27, column: 9, scope: !305)
!354 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.ByteReader.read_byte", scope: !46, file: !46, line: 30, type: !355, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!355 = !DISubroutineType(types: !356)
!356 = !{!115, !117, !285}
!357 = !DILocation(line: 31, column: 1, scope: !354)
!358 = !DILocalVariable(name: "self", arg: 1, scope: !354, file: !46, line: 30, type: !285)
!359 = !DILocation(line: 30, column: 31, scope: !354)
!360 = !DILocation(line: 32, column: 6, scope: !354)
!361 = !DILocation(line: 32, column: 20, scope: !354)
!362 = !DILocation(line: 32, column: 43, scope: !354)
!363 = !DILocation(line: 33, column: 9, scope: !354)
!364 = !DILocation(line: 33, column: 20, scope: !354)
!365 = distinct !DISubprogram(name: "pushback_byte", linkageName: "std.io.ByteReader.pushback_byte", scope: !46, file: !46, line: 36, type: !366, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!366 = !DISubroutineType(types: !367)
!367 = !{!115, !21, !285}
!368 = !DILocation(line: 37, column: 1, scope: !365)
!369 = !DILocalVariable(name: "self", arg: 1, scope: !365, file: !46, line: 36, type: !285)
!370 = !DILocation(line: 36, column: 35, scope: !365)
!371 = !DILocation(line: 38, column: 7, scope: !365)
!372 = !DILocation(line: 38, column: 26, scope: !365)
!373 = !DILocation(line: 39, column: 2, scope: !365)
!374 = distinct !DISubprogram(name: "seek", linkageName: "std.io.ByteReader.seek", scope: !46, file: !46, line: 42, type: !375, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!375 = !DISubroutineType(types: !376)
!376 = !{!115, !308, !285, !116, !45}
!377 = !DILocation(line: 43, column: 1, scope: !374)
!378 = !DILocalVariable(name: "self", arg: 1, scope: !374, file: !46, line: 42, type: !285)
!379 = !DILocation(line: 42, column: 25, scope: !374)
!380 = !DILocalVariable(name: "offset", arg: 2, scope: !374, file: !46, line: 42, type: !381)
!381 = !DIDerivedType(tag: DW_TAG_typedef, name: "isz", baseType: !116)
!382 = !DILocation(line: 42, column: 36, scope: !374)
!383 = !DILocalVariable(name: "seek", arg: 3, scope: !374, file: !46, line: 42, type: !45)
!384 = !DILocation(line: 42, column: 49, scope: !374)
!385 = !DILocalVariable(name: "new_index", scope: !374, file: !46, line: 44, type: !381, align: 8)
!386 = !DILocation(line: 44, column: 6, scope: !374)
!387 = !DILocation(line: 47, column: 25, scope: !388)
!388 = distinct !DILexicalBlock(scope: !389, file: !46, line: 47, column: 13)
!389 = distinct !DILexicalBlock(scope: !374, file: !46, line: 45, column: 2)
!390 = !DILocation(line: 48, column: 28, scope: !391)
!391 = distinct !DILexicalBlock(scope: !389, file: !46, line: 48, column: 16)
!392 = !DILocation(line: 48, column: 41, scope: !391)
!393 = !DILocation(line: 49, column: 25, scope: !394)
!394 = distinct !DILexicalBlock(scope: !389, file: !46, line: 49, column: 13)
!395 = !DILocation(line: 49, column: 42, scope: !394)
!396 = !DILocation(line: 51, column: 6, scope: !374)
!397 = !DILocation(line: 51, column: 28, scope: !374)
!398 = !DILocation(line: 52, column: 2, scope: !374)
!399 = !DILocation(line: 52, column: 15, scope: !374)
!400 = !DILocation(line: 53, column: 9, scope: !374)
!401 = distinct !DISubprogram(name: "write_to", linkageName: "std.io.ByteReader.write_to", scope: !46, file: !46, line: 56, type: !402, scopeLine: 56, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!402 = !DISubroutineType(types: !403)
!403 = !{!115, !308, !285, !159}
!404 = !DILocation(line: 57, column: 1, scope: !401)
!405 = !DILocalVariable(name: "self", arg: 1, scope: !401, file: !46, line: 56, type: !285)
!406 = !DILocation(line: 56, column: 29, scope: !401)
!407 = !DILocalVariable(name: "writer", arg: 2, scope: !401, file: !46, line: 56, type: !159)
!408 = !DILocation(line: 56, column: 46, scope: !401)
!409 = !DILocation(line: 58, column: 6, scope: !401)
!410 = !DILocation(line: 58, column: 20, scope: !401)
!411 = !DILocation(line: 58, column: 43, scope: !401)
!412 = !DILocalVariable(name: "written", scope: !401, file: !46, line: 59, type: !207, align: 8)
!413 = !DILocation(line: 59, column: 6, scope: !401)
!414 = !DILocation(line: 59, column: 29, scope: !401)
!415 = !DILocation(line: 59, column: 40, scope: !401)
!416 = !DILocation(line: 59, column: 16, scope: !401)
!417 = !DILocation(line: 60, column: 2, scope: !401)
!418 = !DILocation(line: 60, column: 16, scope: !401)
!419 = !DILocation(line: 61, column: 9, scope: !401)
!420 = !DILocation(line: 61, column: 23, scope: !401)
!421 = !DILocation(line: 62, column: 9, scope: !401)
!422 = distinct !DISubprogram(name: "available", linkageName: "std.io.ByteReader.available", scope: !46, file: !46, line: 65, type: !423, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!423 = !DISubroutineType(types: !424)
!424 = !{!115, !308, !285}
!425 = !DILocation(line: 66, column: 1, scope: !422)
!426 = !DILocalVariable(name: "self", arg: 1, scope: !422, file: !46, line: 65, type: !285)
!427 = !DILocation(line: 65, column: 30, scope: !422)
!428 = !DILocation(line: 67, column: 16, scope: !422)
!429 = !DILocation(line: 67, column: 33, scope: !422)
!430 = !DILocation(line: 47, column: 10, scope: !431, inlinedAt: !432)
!431 = distinct !DISubprogram(name: "greater", linkageName: "greater", scope: !324, file: !324, line: 39, scopeLine: 39, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!432 = !DILocation(line: 116, column: 10, scope: !433, inlinedAt: !434)
!433 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !324, file: !324, line: 113, scopeLine: 113, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!434 = !DILocation(line: 67, column: 9, scope: !422)
!435 = !DILocation(line: 47, column: 14, scope: !431, inlinedAt: !432)
!436 = !DILocation(line: 116, column: 34, scope: !433, inlinedAt: !434)
!437 = !DILocation(line: 116, column: 38, scope: !433, inlinedAt: !434)
!438 = distinct !DISubprogram(name: "init", linkageName: "std.io.ReadBuffer.init", scope: !439, file: !439, line: 17, type: !440, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!439 = !DIFile(filename: "buffer.c3", directory: "/usr/local/lib/c3/std/io/stream")
!440 = !DISubroutineType(types: !441)
!441 = !{!442, !442, !88, !203}
!442 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ReadBuffer*", baseType: !443, size: 64, align: 64, dwarfAddressSpace: 0)
!443 = !DICompositeType(tag: DW_TAG_structure_type, name: "ReadBuffer", scope: !439, file: !439, line: 3, size: 384, align: 64, elements: !444, identifier: "std.io.ReadBuffer")
!444 = !{!445, !446, !447, !448}
!445 = !DIDerivedType(tag: DW_TAG_member, name: "wrapped_stream", scope: !443, file: !439, line: 5, baseType: !88, size: 128, align: 64)
!446 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !443, file: !439, line: 6, baseType: !203, size: 128, align: 64, offset: 128)
!447 = !DIDerivedType(tag: DW_TAG_member, name: "read_idx", scope: !443, file: !439, line: 7, baseType: !207, size: 64, align: 64, offset: 256)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "write_idx", scope: !443, file: !439, line: 8, baseType: !207, size: 64, align: 64, offset: 320)
!449 = !DILocation(line: 18, column: 1, scope: !438)
!450 = !DILocalVariable(name: "self", arg: 1, scope: !438, file: !439, line: 17, type: !442)
!451 = !DILocation(line: 17, column: 32, scope: !438)
!452 = !DILocalVariable(name: "wrapped_stream", arg: 2, scope: !438, file: !439, line: 17, type: !88)
!453 = !DILocation(line: 17, column: 48, scope: !438)
!454 = !DILocalVariable(name: "bytes", arg: 3, scope: !438, file: !439, line: 17, type: !203)
!455 = !DILocation(line: 17, column: 71, scope: !438)
!456 = !DILocation(line: 14, column: 11, scope: !457)
!457 = distinct !DILexicalBlock(scope: !438, file: !439, line: 18, column: 1)
!458 = !DILocation(line: 15, column: 11, scope: !457)
!459 = !DILocation(line: 19, column: 3, scope: !438)
!460 = !DILocation(line: 19, column: 30, scope: !438)
!461 = !DILocation(line: 19, column: 55, scope: !438)
!462 = !DILocation(line: 20, column: 9, scope: !438)
!463 = distinct !DISubprogram(name: "str_view", linkageName: "std.io.ReadBuffer.str_view", scope: !439, file: !439, line: 22, type: !464, scopeLine: 22, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!464 = !DISubroutineType(types: !465)
!465 = !{!466, !442}
!466 = !DIDerivedType(tag: DW_TAG_typedef, name: "String", baseType: !203)
!467 = !DILocation(line: 23, column: 1, scope: !463)
!468 = !DILocalVariable(name: "self", arg: 1, scope: !463, file: !439, line: 22, type: !442)
!469 = !DILocation(line: 22, column: 31, scope: !463)
!470 = !DILocation(line: 24, column: 17, scope: !463)
!471 = !DILocation(line: 24, column: 28, scope: !463)
!472 = !DILocation(line: 24, column: 42, scope: !463)
!473 = !DILocation(line: 24, column: 59, scope: !463)
!474 = !DILocation(line: 24, column: 10, scope: !463)
!475 = distinct !DISubprogram(name: "close", linkageName: "std.io.ReadBuffer.close", scope: !439, file: !439, line: 27, type: !476, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!476 = !DISubroutineType(types: !477)
!477 = !{!115, !21, !442}
!478 = !DILocation(line: 28, column: 1, scope: !475)
!479 = !DILocalVariable(name: "self", arg: 1, scope: !475, file: !439, line: 27, type: !442)
!480 = !DILocation(line: 27, column: 27, scope: !475)
!481 = !DILocation(line: 29, column: 7, scope: !475)
!482 = !DILocation(line: 29, column: 34, scope: !475)
!483 = distinct !DISubprogram(name: "read", linkageName: "std.io.ReadBuffer.read", scope: !439, file: !439, line: 32, type: !484, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!484 = !DISubroutineType(types: !485)
!485 = !{!115, !308, !442, !203}
!486 = !DILocation(line: 33, column: 1, scope: !483)
!487 = !DILocalVariable(name: "self", arg: 1, scope: !483, file: !439, line: 32, type: !442)
!488 = !DILocation(line: 32, column: 25, scope: !483)
!489 = !DILocalVariable(name: "bytes", arg: 2, scope: !483, file: !439, line: 32, type: !203)
!490 = !DILocation(line: 32, column: 39, scope: !483)
!491 = !DILocation(line: 34, column: 6, scope: !483)
!492 = !DILocation(line: 34, column: 23, scope: !483)
!493 = !DILocation(line: 36, column: 7, scope: !494)
!494 = distinct !DILexicalBlock(scope: !483, file: !439, line: 35, column: 2)
!495 = !DILocation(line: 36, column: 29, scope: !494)
!496 = !DILocation(line: 36, column: 42, scope: !494)
!497 = !DILocation(line: 39, column: 11, scope: !498)
!498 = distinct !DILexicalBlock(scope: !494, file: !439, line: 37, column: 3)
!499 = !DILocation(line: 39, column: 36, scope: !498)
!500 = !DILocation(line: 41, column: 3, scope: !494)
!501 = !DILocalVariable(name: "n", scope: !483, file: !439, line: 43, type: !207, align: 8)
!502 = !DILocation(line: 43, column: 6, scope: !483)
!503 = !DILocation(line: 43, column: 14, scope: !483)
!504 = !DILocation(line: 43, column: 31, scope: !483)
!505 = !DILocation(line: 43, column: 46, scope: !483)
!506 = !DILocation(line: 17, column: 10, scope: !507, inlinedAt: !508)
!507 = distinct !DISubprogram(name: "less", linkageName: "less", scope: !324, file: !324, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!508 = !DILocation(line: 100, column: 10, scope: !509, inlinedAt: !510)
!509 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !324, file: !324, line: 97, scopeLine: 97, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!510 = !DILocation(line: 43, column: 10, scope: !483)
!511 = !DILocation(line: 17, column: 14, scope: !507, inlinedAt: !508)
!512 = !DILocation(line: 100, column: 31, scope: !509, inlinedAt: !510)
!513 = !DILocation(line: 100, column: 35, scope: !509, inlinedAt: !510)
!514 = !DILocation(line: 44, column: 14, scope: !483)
!515 = !DILocation(line: 44, column: 25, scope: !483)
!516 = !DILocation(line: 44, column: 39, scope: !483)
!517 = !DILocation(line: 44, column: 2, scope: !483)
!518 = !DILocation(line: 44, column: 8, scope: !483)
!519 = !DILocation(line: 44, column: 9, scope: !483)
!520 = !DILocation(line: 45, column: 2, scope: !483)
!521 = !DILocation(line: 45, column: 19, scope: !483)
!522 = !DILocation(line: 46, column: 9, scope: !483)
!523 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.ReadBuffer.read_byte", scope: !439, file: !439, line: 49, type: !524, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!524 = !DISubroutineType(types: !525)
!525 = !{!115, !117, !442}
!526 = !DILocation(line: 50, column: 1, scope: !523)
!527 = !DILocalVariable(name: "self", arg: 1, scope: !523, file: !439, line: 49, type: !442)
!528 = !DILocation(line: 49, column: 31, scope: !523)
!529 = !DILocation(line: 51, column: 6, scope: !523)
!530 = !DILocation(line: 51, column: 23, scope: !523)
!531 = !DILocation(line: 51, column: 39, scope: !523)
!532 = !DILocation(line: 52, column: 6, scope: !523)
!533 = !DILocation(line: 52, column: 23, scope: !523)
!534 = !DILocation(line: 52, column: 46, scope: !523)
!535 = !DILocalVariable(name: "c", scope: !523, file: !439, line: 53, type: !11, align: 1)
!536 = !DILocation(line: 53, column: 7, scope: !523)
!537 = !DILocation(line: 53, column: 11, scope: !523)
!538 = !DILocation(line: 53, column: 22, scope: !523)
!539 = !DILocation(line: 54, column: 2, scope: !523)
!540 = !DILocation(line: 55, column: 9, scope: !523)
!541 = distinct !DISubprogram(name: "refill", linkageName: "std.io.ReadBuffer.refill", scope: !439, file: !439, line: 58, type: !476, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!542 = !DILocation(line: 59, column: 1, scope: !541)
!543 = !DILocalVariable(name: "self", arg: 1, scope: !541, file: !439, line: 58, type: !442)
!544 = !DILocation(line: 58, column: 28, scope: !541)
!545 = !DILocation(line: 60, column: 2, scope: !541)
!546 = !DILocation(line: 60, column: 18, scope: !541)
!547 = !DILocation(line: 61, column: 2, scope: !541)
!548 = !DILocation(line: 61, column: 19, scope: !541)
!549 = !DILocation(line: 61, column: 44, scope: !541)
!550 = distinct !DISubprogram(name: "init", linkageName: "std.io.WriteBuffer.init", scope: !439, file: !439, line: 77, type: !551, scopeLine: 77, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!551 = !DISubroutineType(types: !552)
!552 = !{!553, !553, !159, !203}
!553 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "WriteBuffer*", baseType: !554, size: 64, align: 64, dwarfAddressSpace: 0)
!554 = !DICompositeType(tag: DW_TAG_structure_type, name: "WriteBuffer", scope: !439, file: !439, line: 64, size: 320, align: 64, elements: !555, identifier: "std.io.WriteBuffer")
!555 = !{!556, !557, !558}
!556 = !DIDerivedType(tag: DW_TAG_member, name: "wrapped_stream", scope: !554, file: !439, line: 66, baseType: !159, size: 128, align: 64)
!557 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !554, file: !439, line: 67, baseType: !203, size: 128, align: 64, offset: 128)
!558 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !554, file: !439, line: 68, baseType: !207, size: 64, align: 64, offset: 256)
!559 = !DILocation(line: 78, column: 1, scope: !550)
!560 = !DILocalVariable(name: "self", arg: 1, scope: !550, file: !439, line: 77, type: !553)
!561 = !DILocation(line: 77, column: 34, scope: !550)
!562 = !DILocalVariable(name: "wrapped_stream", arg: 2, scope: !550, file: !439, line: 77, type: !159)
!563 = !DILocation(line: 77, column: 51, scope: !550)
!564 = !DILocalVariable(name: "bytes", arg: 3, scope: !550, file: !439, line: 77, type: !203)
!565 = !DILocation(line: 77, column: 74, scope: !550)
!566 = !DILocation(line: 74, column: 11, scope: !567)
!567 = distinct !DILexicalBlock(scope: !550, file: !439, line: 78, column: 1)
!568 = !DILocation(line: 75, column: 11, scope: !567)
!569 = !DILocation(line: 79, column: 3, scope: !550)
!570 = !DILocation(line: 79, column: 30, scope: !550)
!571 = !DILocation(line: 79, column: 55, scope: !550)
!572 = !DILocation(line: 80, column: 9, scope: !550)
!573 = distinct !DISubprogram(name: "str_view", linkageName: "std.io.WriteBuffer.str_view", scope: !439, file: !439, line: 83, type: !574, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!574 = !DISubroutineType(types: !575)
!575 = !{!466, !553}
!576 = !DILocation(line: 84, column: 1, scope: !573)
!577 = !DILocalVariable(name: "self", arg: 1, scope: !573, file: !439, line: 83, type: !553)
!578 = !DILocation(line: 83, column: 32, scope: !573)
!579 = !DILocation(line: 85, column: 17, scope: !573)
!580 = !DILocation(line: 85, column: 28, scope: !573)
!581 = !DILocation(line: 85, column: 29, scope: !573)
!582 = !DILocation(line: 85, column: 10, scope: !573)
!583 = distinct !DISubprogram(name: "close", linkageName: "std.io.WriteBuffer.close", scope: !439, file: !439, line: 88, type: !584, scopeLine: 88, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!584 = !DISubroutineType(types: !585)
!585 = !{!115, !21, !553}
!586 = !DILocation(line: 89, column: 1, scope: !583)
!587 = !DILocalVariable(name: "self", arg: 1, scope: !583, file: !439, line: 88, type: !553)
!588 = !DILocation(line: 88, column: 28, scope: !583)
!589 = !DILocation(line: 90, column: 7, scope: !583)
!590 = !DILocation(line: 90, column: 41, scope: !583)
!591 = distinct !DISubprogram(name: "flush", linkageName: "std.io.WriteBuffer.flush", scope: !439, file: !439, line: 93, type: !584, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!592 = !DILocation(line: 94, column: 1, scope: !591)
!593 = !DILocalVariable(name: "self", arg: 1, scope: !591, file: !439, line: 93, type: !553)
!594 = !DILocation(line: 93, column: 28, scope: !591)
!595 = !DILocation(line: 95, column: 2, scope: !591)
!596 = !DILocation(line: 96, column: 7, scope: !591)
!597 = !DILocation(line: 96, column: 34, scope: !591)
!598 = distinct !DISubprogram(name: "write", linkageName: "std.io.WriteBuffer.write", scope: !439, file: !439, line: 99, type: !599, scopeLine: 99, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!599 = !DISubroutineType(types: !600)
!600 = !{!115, !308, !553, !203}
!601 = !DILocation(line: 100, column: 1, scope: !598)
!602 = !DILocalVariable(name: "self", arg: 1, scope: !598, file: !439, line: 99, type: !553)
!603 = !DILocation(line: 99, column: 27, scope: !598)
!604 = !DILocalVariable(name: "bytes", arg: 2, scope: !598, file: !439, line: 99, type: !203)
!605 = !DILocation(line: 99, column: 41, scope: !598)
!606 = !DILocalVariable(name: "n", scope: !598, file: !439, line: 101, type: !207, align: 8)
!607 = !DILocation(line: 101, column: 6, scope: !598)
!608 = !DILocation(line: 101, column: 10, scope: !598)
!609 = !DILocation(line: 101, column: 27, scope: !598)
!610 = !DILocation(line: 102, column: 6, scope: !598)
!611 = !DILocation(line: 102, column: 18, scope: !598)
!612 = !DILocation(line: 105, column: 38, scope: !613)
!613 = distinct !DILexicalBlock(scope: !598, file: !439, line: 103, column: 2)
!614 = !DILocation(line: 105, column: 44, scope: !613)
!615 = !DILocation(line: 105, column: 3, scope: !613)
!616 = !DILocation(line: 105, column: 14, scope: !613)
!617 = !DILocation(line: 105, column: 25, scope: !613)
!618 = !DILocation(line: 106, column: 3, scope: !613)
!619 = !DILocation(line: 106, column: 17, scope: !613)
!620 = !DILocation(line: 107, column: 10, scope: !613)
!621 = !DILocation(line: 109, column: 2, scope: !598)
!622 = !DILocation(line: 110, column: 6, scope: !598)
!623 = !DILocation(line: 110, column: 19, scope: !598)
!624 = !DILocation(line: 113, column: 10, scope: !625)
!625 = distinct !DILexicalBlock(scope: !598, file: !439, line: 111, column: 2)
!626 = !DILocation(line: 113, column: 36, scope: !625)
!627 = !DILocation(line: 116, column: 27, scope: !598)
!628 = !DILocation(line: 116, column: 33, scope: !598)
!629 = !DILocation(line: 116, column: 2, scope: !598)
!630 = !DILocation(line: 116, column: 13, scope: !598)
!631 = !DILocation(line: 116, column: 14, scope: !598)
!632 = !DILocation(line: 117, column: 2, scope: !598)
!633 = !DILocation(line: 117, column: 15, scope: !598)
!634 = !DILocation(line: 118, column: 9, scope: !598)
!635 = distinct !DISubprogram(name: "write_byte", linkageName: "std.io.WriteBuffer.write_byte", scope: !439, file: !439, line: 121, type: !636, scopeLine: 121, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!636 = !DISubroutineType(types: !637)
!637 = !{!115, !21, !553, !11}
!638 = !DILocation(line: 122, column: 1, scope: !635)
!639 = !DILocalVariable(name: "self", arg: 1, scope: !635, file: !439, line: 121, type: !553)
!640 = !DILocation(line: 121, column: 33, scope: !635)
!641 = !DILocalVariable(name: "c", arg: 2, scope: !635, file: !439, line: 121, type: !11)
!642 = !DILocation(line: 121, column: 45, scope: !635)
!643 = !DILocalVariable(name: "n", scope: !635, file: !439, line: 123, type: !207, align: 8)
!644 = !DILocation(line: 123, column: 6, scope: !635)
!645 = !DILocation(line: 123, column: 10, scope: !635)
!646 = !DILocation(line: 123, column: 27, scope: !635)
!647 = !DILocation(line: 124, column: 6, scope: !635)
!648 = !DILocation(line: 126, column: 3, scope: !649)
!649 = distinct !DILexicalBlock(scope: !635, file: !439, line: 125, column: 2)
!650 = !DILocation(line: 128, column: 2, scope: !635)
!651 = !DILocation(line: 128, column: 13, scope: !635)
!652 = !DILocation(line: 128, column: 27, scope: !635)
!653 = !DILocation(line: 129, column: 2, scope: !635)
!654 = distinct !DISubprogram(name: "write_pending", linkageName: "std.io.WriteBuffer.write_pending", scope: !439, file: !439, line: 132, type: !584, scopeLine: 132, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!655 = !DILocation(line: 133, column: 1, scope: !654)
!656 = !DILocalVariable(name: "self", arg: 1, scope: !654, file: !439, line: 132, type: !553)
!657 = !DILocation(line: 132, column: 36, scope: !654)
!658 = !DILocation(line: 134, column: 2, scope: !654)
!659 = !DILocation(line: 134, column: 16, scope: !654)
!660 = !DILocation(line: 134, column: 42, scope: !654)
!661 = !DILocation(line: 134, column: 53, scope: !654)
!662 = !DILocation(line: 134, column: 54, scope: !654)
!663 = !DILocation(line: 135, column: 6, scope: !654)
!664 = !DILocation(line: 135, column: 30, scope: !654)
!665 = distinct !DISubprogram(name: "new_init", linkageName: "std.io.ByteWriter.new_init", scope: !666, file: !666, line: 17, type: !667, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!666 = !DIFile(filename: "bytewriter.c3", directory: "/usr/local/lib/c3/std/io/stream")
!667 = !DISubroutineType(types: !668)
!668 = !{!669, !669, !675}
!669 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ByteWriter*", baseType: !670, size: 64, align: 64, dwarfAddressSpace: 0)
!670 = !DICompositeType(tag: DW_TAG_structure_type, name: "ByteWriter", scope: !666, file: !666, line: 4, size: 320, align: 64, elements: !671, identifier: "std.io.ByteWriter")
!671 = !{!672, !673, !674}
!672 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !670, file: !666, line: 6, baseType: !203, size: 128, align: 64)
!673 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !670, file: !666, line: 7, baseType: !207, size: 64, align: 64, offset: 128)
!674 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !670, file: !666, line: 8, baseType: !675, size: 128, align: 64, offset: 192)
!675 = !DICompositeType(tag: DW_TAG_structure_type, name: "Allocator", size: 128, align: 64, elements: !676, identifier: "Allocator")
!676 = !{!677, !678}
!677 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !675, baseType: !21, size: 64, align: 64)
!678 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !675, baseType: !92, size: 64, align: 64, offset: 64)
!679 = !DILocation(line: 18, column: 1, scope: !665)
!680 = !DILocalVariable(name: "self", arg: 1, scope: !665, file: !666, line: 17, type: !669)
!681 = !DILocation(line: 17, column: 36, scope: !665)
!682 = !DILocalVariable(name: "allocator", arg: 2, scope: !665, file: !666, line: 17, type: !675)
!683 = !DILocation(line: 17, column: 53, scope: !665)
!684 = !DILocation(line: 14, column: 11, scope: !685)
!685 = distinct !DILexicalBlock(scope: !665, file: !666, line: 18, column: 1)
!686 = !DILocation(line: 19, column: 3, scope: !665)
!687 = !DILocation(line: 19, column: 21, scope: !665)
!688 = !DILocation(line: 19, column: 38, scope: !665)
!689 = !DILocation(line: 20, column: 9, scope: !665)
!690 = !DILocation(line: 15, column: 11, scope: !665)
!691 = !DILocation(line: 15, column: 27, scope: !665)
!692 = distinct !DISubprogram(name: "temp_init", linkageName: "std.io.ByteWriter.temp_init", scope: !666, file: !666, line: 28, type: !693, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!693 = !DISubroutineType(types: !694)
!694 = !{!669, !669}
!695 = !DILocation(line: 29, column: 1, scope: !692)
!696 = !DILocalVariable(name: "self", arg: 1, scope: !692, file: !666, line: 28, type: !669)
!697 = !DILocation(line: 28, column: 37, scope: !692)
!698 = !DILocation(line: 25, column: 11, scope: !699)
!699 = distinct !DILexicalBlock(scope: !692, file: !666, line: 29, column: 1)
!700 = !DILocation(line: 396, column: 6, scope: !701, inlinedAt: !703)
!701 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !702, file: !702, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!702 = !DIFile(filename: "mem_allocator.c3", directory: "/usr/local/lib/c3/std/core")
!703 = !DILocation(line: 30, column: 23, scope: !692)
!704 = !DILocation(line: 398, column: 3, scope: !705, inlinedAt: !703)
!705 = distinct !DILexicalBlock(scope: !701, file: !702, line: 397, column: 2)
!706 = !DILocation(line: 400, column: 9, scope: !701, inlinedAt: !703)
!707 = !DILocation(line: 30, column: 9, scope: !692)
!708 = !DILocation(line: 26, column: 10, scope: !692)
!709 = distinct !DISubprogram(name: "init_with_buffer", linkageName: "std.io.ByteWriter.init_with_buffer", scope: !666, file: !666, line: 33, type: !710, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!710 = !DISubroutineType(types: !711)
!711 = !{!669, !669, !203}
!712 = !DILocation(line: 34, column: 1, scope: !709)
!713 = !DILocalVariable(name: "self", arg: 1, scope: !709, file: !666, line: 33, type: !669)
!714 = !DILocation(line: 33, column: 44, scope: !709)
!715 = !DILocalVariable(name: "data", arg: 2, scope: !709, file: !666, line: 33, type: !203)
!716 = !DILocation(line: 33, column: 58, scope: !709)
!717 = !DILocation(line: 35, column: 3, scope: !709)
!718 = !DILocation(line: 35, column: 21, scope: !709)
!719 = !DILocation(line: 35, column: 40, scope: !709)
!720 = !DILocation(line: 36, column: 9, scope: !709)
!721 = distinct !DISubprogram(name: "destroy", linkageName: "std.io.ByteWriter.destroy", scope: !666, file: !666, line: 39, type: !722, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!722 = !DISubroutineType(types: !723)
!723 = !{!115, !21, !669}
!724 = !DILocation(line: 40, column: 1, scope: !721)
!725 = !DILocalVariable(name: "self", arg: 1, scope: !721, file: !666, line: 39, type: !669)
!726 = !DILocation(line: 39, column: 29, scope: !721)
!727 = !DILocation(line: 41, column: 7, scope: !721)
!728 = !DILocalVariable(name: "ptr", scope: !721, file: !666, line: 42, type: !21, align: 8)
!729 = !DILocation(line: 42, column: 12, scope: !721)
!730 = !DILocation(line: 42, column: 18, scope: !721)
!731 = !DILocation(line: 42, column: 50, scope: !721)
!732 = !DILocation(line: 101, column: 6, scope: !733, inlinedAt: !734)
!733 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !702, file: !702, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!734 = !DILocation(line: 42, column: 34, scope: !721)
!735 = !DILocation(line: 101, column: 18, scope: !733, inlinedAt: !734)
!736 = !DILocation(line: 105, column: 25, scope: !733, inlinedAt: !734)
!737 = !DILocation(line: 105, column: 2, scope: !733, inlinedAt: !734)
!738 = !DILocation(line: 43, column: 3, scope: !721)
!739 = distinct !DISubprogram(name: "str_view", linkageName: "std.io.ByteWriter.str_view", scope: !666, file: !666, line: 46, type: !740, scopeLine: 46, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!740 = !DISubroutineType(types: !741)
!741 = !{!466, !669}
!742 = !DILocation(line: 47, column: 1, scope: !739)
!743 = !DILocalVariable(name: "self", arg: 1, scope: !739, file: !666, line: 46, type: !669)
!744 = !DILocation(line: 46, column: 31, scope: !739)
!745 = !DILocation(line: 48, column: 17, scope: !739)
!746 = !DILocation(line: 48, column: 28, scope: !739)
!747 = !DILocation(line: 48, column: 29, scope: !739)
!748 = !DILocation(line: 48, column: 10, scope: !739)
!749 = distinct !DISubprogram(name: "ensure_capacity", linkageName: "std.io.ByteWriter.ensure_capacity", scope: !666, file: !666, line: 51, type: !750, scopeLine: 51, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!750 = !DISubroutineType(types: !751)
!751 = !{!115, !21, !669, !208}
!752 = !DILocation(line: 52, column: 1, scope: !749)
!753 = !DILocalVariable(name: "self", arg: 1, scope: !749, file: !666, line: 51, type: !669)
!754 = !DILocation(line: 51, column: 37, scope: !749)
!755 = !DILocalVariable(name: "len", arg: 2, scope: !749, file: !666, line: 51, type: !207)
!756 = !DILocation(line: 51, column: 48, scope: !749)
!757 = !DILocation(line: 53, column: 6, scope: !749)
!758 = !DILocation(line: 53, column: 23, scope: !749)
!759 = !DILocation(line: 54, column: 7, scope: !749)
!760 = !DILocation(line: 54, column: 30, scope: !749)
!761 = !DILocation(line: 55, column: 6, scope: !749)
!762 = !DILocation(line: 55, column: 22, scope: !749)
!763 = !DILocalVariable(name: "new_capacity", scope: !749, file: !666, line: 56, type: !207, align: 8)
!764 = !DILocation(line: 56, column: 6, scope: !749)
!765 = !DILocalVariable(name: "y", scope: !766, file: !666, line: 1026, type: !207, align: 8)
!766 = distinct !DISubprogram(name: "next_power_of_2", linkageName: "next_power_of_2", scope: !767, file: !767, line: 1024, scopeLine: 1024, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!767 = !DIFile(filename: "math.c3", directory: "/usr/local/lib/c3/std/math")
!768 = !DILocation(line: 1026, column: 13, scope: !766, inlinedAt: !769)
!769 = !DILocation(line: 56, column: 21, scope: !749)
!770 = !DILocation(line: 1026, column: 17, scope: !766, inlinedAt: !769)
!771 = !DILocation(line: 1027, column: 2, scope: !766, inlinedAt: !769)
!772 = !DILocation(line: 1027, column: 9, scope: !773, inlinedAt: !769)
!773 = distinct !DILexicalBlock(scope: !766, file: !767, line: 1027, column: 2)
!774 = !DILocation(line: 1027, column: 13, scope: !773, inlinedAt: !769)
!775 = !DILocation(line: 1027, column: 16, scope: !773, inlinedAt: !769)
!776 = !DILocation(line: 1027, column: 21, scope: !773, inlinedAt: !769)
!777 = !DILocation(line: 1028, column: 9, scope: !766, inlinedAt: !769)
!778 = !DILocalVariable(name: "new_ptr", scope: !749, file: !666, line: 57, type: !117, align: 8)
!779 = !DILocation(line: 57, column: 8, scope: !749)
!780 = !DILocation(line: 57, column: 41, scope: !749)
!781 = !DILocation(line: 57, column: 57, scope: !749)
!782 = !DILocation(line: 90, column: 6, scope: !783, inlinedAt: !784)
!783 = distinct !DISubprogram(name: "realloc_try", linkageName: "realloc_try", scope: !702, file: !702, line: 88, scopeLine: 88, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!784 = !DILocation(line: 57, column: 18, scope: !749)
!785 = !DILocation(line: 101, column: 6, scope: !786, inlinedAt: !787)
!786 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !702, file: !702, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!787 = !DILocation(line: 92, column: 3, scope: !788, inlinedAt: !784)
!788 = distinct !DILexicalBlock(scope: !783, file: !702, line: 91, column: 2)
!789 = !DILocation(line: 101, column: 18, scope: !786, inlinedAt: !787)
!790 = !DILocation(line: 105, column: 25, scope: !786, inlinedAt: !787)
!791 = !DILocation(line: 105, column: 2, scope: !786, inlinedAt: !787)
!792 = !DILocation(line: 93, column: 10, scope: !788, inlinedAt: !784)
!793 = !DILocation(line: 95, column: 6, scope: !783, inlinedAt: !784)
!794 = !DILocation(line: 28, column: 71, scope: !795, inlinedAt: !796)
!795 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !702, file: !702, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!796 = !DILocation(line: 95, column: 19, scope: !783, inlinedAt: !784)
!797 = !DILocation(line: 35, column: 60, scope: !798, inlinedAt: !799)
!798 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !702, file: !702, line: 35, scopeLine: 35, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!799 = !DILocation(line: 96, column: 9, scope: !783, inlinedAt: !784)
!800 = !DILocation(line: 58, column: 2, scope: !749)
!801 = !DILocation(line: 58, column: 15, scope: !749)
!802 = !DILocation(line: 58, column: 24, scope: !749)
!803 = distinct !DISubprogram(name: "write", linkageName: "std.io.ByteWriter.write", scope: !666, file: !666, line: 61, type: !804, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!804 = !DISubroutineType(types: !805)
!805 = !{!115, !308, !669, !203}
!806 = !DILocation(line: 62, column: 1, scope: !803)
!807 = !DILocalVariable(name: "self", arg: 1, scope: !803, file: !666, line: 61, type: !669)
!808 = !DILocation(line: 61, column: 26, scope: !803)
!809 = !DILocalVariable(name: "bytes", arg: 2, scope: !803, file: !666, line: 61, type: !203)
!810 = !DILocation(line: 61, column: 40, scope: !803)
!811 = !DILocation(line: 63, column: 23, scope: !803)
!812 = !DILocation(line: 63, column: 36, scope: !803)
!813 = !DILocation(line: 63, column: 2, scope: !803)
!814 = !DILocation(line: 64, column: 13, scope: !803)
!815 = !DILocation(line: 64, column: 24, scope: !803)
!816 = !DILocation(line: 64, column: 37, scope: !803)
!817 = !DILocation(line: 64, column: 48, scope: !803)
!818 = !DILocation(line: 324, column: 11, scope: !819, inlinedAt: !821)
!819 = distinct !DILexicalBlock(scope: !820, file: !338, line: 327, column: 1)
!820 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !338, file: !338, line: 326, scopeLine: 326, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!821 = !DILocation(line: 64, column: 2, scope: !803)
!822 = !DILocation(line: 324, column: 23, scope: !819, inlinedAt: !821)
!823 = !DILocation(line: 324, column: 29, scope: !819, inlinedAt: !821)
!824 = !DILocation(line: 324, column: 36, scope: !819, inlinedAt: !821)
!825 = !DILocation(line: 324, column: 43, scope: !819, inlinedAt: !821)
!826 = !DILocation(line: 324, column: 49, scope: !819, inlinedAt: !821)
!827 = !DILocation(line: 324, column: 56, scope: !819, inlinedAt: !821)
!828 = !DILocation(line: 328, column: 11, scope: !820, inlinedAt: !821)
!829 = !DILocation(line: 328, column: 16, scope: !820, inlinedAt: !821)
!830 = !DILocation(line: 328, column: 21, scope: !820, inlinedAt: !821)
!831 = !DILocation(line: 328, column: 26, scope: !820, inlinedAt: !821)
!832 = !DILocation(line: 65, column: 2, scope: !803)
!833 = !DILocation(line: 65, column: 16, scope: !803)
!834 = !DILocation(line: 66, column: 9, scope: !803)
!835 = distinct !DISubprogram(name: "write_byte", linkageName: "std.io.ByteWriter.write_byte", scope: !666, file: !666, line: 69, type: !836, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!836 = !DISubroutineType(types: !837)
!837 = !{!115, !21, !669, !11}
!838 = !DILocation(line: 70, column: 1, scope: !835)
!839 = !DILocalVariable(name: "self", arg: 1, scope: !835, file: !666, line: 69, type: !669)
!840 = !DILocation(line: 69, column: 32, scope: !835)
!841 = !DILocalVariable(name: "c", arg: 2, scope: !835, file: !666, line: 69, type: !11)
!842 = !DILocation(line: 69, column: 44, scope: !835)
!843 = !DILocation(line: 71, column: 23, scope: !835)
!844 = !DILocation(line: 71, column: 2, scope: !835)
!845 = !DILocation(line: 72, column: 2, scope: !835)
!846 = !DILocation(line: 72, column: 13, scope: !835)
!847 = !DILocation(line: 72, column: 29, scope: !835)
!848 = distinct !DISubprogram(name: "read_from", linkageName: "std.io.ByteWriter.read_from", scope: !666, file: !666, line: 79, type: !849, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!849 = !DISubroutineType(types: !850)
!850 = !{!115, !308, !669, !88}
!851 = !DILocation(line: 80, column: 1, scope: !848)
!852 = !DILocalVariable(name: "self", arg: 1, scope: !848, file: !666, line: 79, type: !669)
!853 = !DILocation(line: 79, column: 30, scope: !848)
!854 = !DILocalVariable(name: "reader", arg: 2, scope: !848, file: !666, line: 79, type: !88)
!855 = !DILocation(line: 79, column: 46, scope: !848)
!856 = !DILocalVariable(name: "start_index", scope: !848, file: !666, line: 81, type: !207, align: 8)
!857 = !DILocation(line: 81, column: 6, scope: !848)
!858 = !DILocation(line: 81, column: 20, scope: !848)
!859 = !DILocation(line: 82, column: 7, scope: !848)
!860 = !DILocation(line: 84, column: 3, scope: !861)
!861 = distinct !DILexicalBlock(scope: !848, file: !666, line: 83, column: 2)
!862 = !DILocalVariable(name: "available", scope: !863, file: !666, line: 84, type: !207, align: 8)
!863 = distinct !DILexicalBlock(scope: !861, file: !666, line: 84, column: 3)
!864 = !DILocation(line: 84, column: 14, scope: !863)
!865 = !DILocation(line: 84, column: 26, scope: !863)
!866 = !DILocation(line: 86, column: 25, scope: !867)
!867 = distinct !DILexicalBlock(scope: !863, file: !666, line: 85, column: 3)
!868 = !DILocation(line: 86, column: 38, scope: !867)
!869 = !DILocation(line: 86, column: 4, scope: !867)
!870 = !DILocalVariable(name: "read", scope: !867, file: !666, line: 87, type: !207, align: 8)
!871 = !DILocation(line: 87, column: 8, scope: !867)
!872 = !DILocation(line: 87, column: 27, scope: !867)
!873 = !DILocation(line: 87, column: 38, scope: !867)
!874 = !DILocation(line: 87, column: 15, scope: !867)
!875 = !DILocation(line: 88, column: 4, scope: !867)
!876 = !DILocation(line: 88, column: 18, scope: !867)
!877 = !DILocation(line: 90, column: 10, scope: !861)
!878 = !DILocation(line: 90, column: 23, scope: !861)
!879 = !DILocation(line: 92, column: 6, scope: !848)
!880 = !DILocation(line: 94, column: 24, scope: !881)
!881 = distinct !DILexicalBlock(scope: !848, file: !666, line: 93, column: 2)
!882 = !DILocation(line: 94, column: 3, scope: !881)
!883 = !DILocation(line: 96, column: 2, scope: !848)
!884 = !DILocalVariable(name: "len_to_read", scope: !885, file: !666, line: 99, type: !207, align: 8)
!885 = distinct !DILexicalBlock(scope: !886, file: !666, line: 97, column: 2)
!886 = distinct !DILexicalBlock(scope: !848, file: !666, line: 96, column: 2)
!887 = !DILocation(line: 99, column: 7, scope: !885)
!888 = !DILocation(line: 99, column: 21, scope: !885)
!889 = !DILocation(line: 99, column: 38, scope: !885)
!890 = !DILocation(line: 101, column: 7, scope: !885)
!891 = !DILocation(line: 103, column: 25, scope: !892)
!892 = distinct !DILexicalBlock(scope: !885, file: !666, line: 102, column: 3)
!893 = !DILocation(line: 103, column: 4, scope: !892)
!894 = !DILocation(line: 104, column: 18, scope: !892)
!895 = !DILocation(line: 104, column: 35, scope: !892)
!896 = !DILocalVariable(name: "read", scope: !885, file: !666, line: 107, type: !207, align: 8)
!897 = !DILocation(line: 107, column: 7, scope: !885)
!898 = !DILocation(line: 107, column: 26, scope: !885)
!899 = !DILocation(line: 107, column: 37, scope: !885)
!900 = !DILocation(line: 107, column: 14, scope: !885)
!901 = !DILocation(line: 108, column: 3, scope: !885)
!902 = !DILocation(line: 108, column: 17, scope: !885)
!903 = !DILocation(line: 110, column: 7, scope: !885)
!904 = !DILocation(line: 110, column: 14, scope: !885)
!905 = !DILocation(line: 110, column: 34, scope: !885)
!906 = !DILocation(line: 110, column: 47, scope: !885)
!907 = distinct !DISubprogram(name: "new_init", linkageName: "std.io.ByteBuffer.new_init", scope: !908, file: !908, line: 19, type: !909, scopeLine: 19, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!908 = !DIFile(filename: "bytebuffer.c3", directory: "/usr/local/lib/c3/std/io/stream")
!909 = !DISubroutineType(types: !910)
!910 = !{!911, !911, !208, !208, !675}
!911 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ByteBuffer*", baseType: !912, size: 64, align: 64, dwarfAddressSpace: 0)
!912 = !DICompositeType(tag: DW_TAG_structure_type, name: "ByteBuffer", scope: !908, file: !908, line: 4, size: 512, align: 64, elements: !913, identifier: "std.io.ByteBuffer")
!913 = !{!914, !915, !916, !917, !918, !919}
!914 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !912, file: !908, line: 6, baseType: !675, size: 128, align: 64)
!915 = !DIDerivedType(tag: DW_TAG_member, name: "max_read", scope: !912, file: !908, line: 7, baseType: !207, size: 64, align: 64, offset: 128)
!916 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !912, file: !908, line: 8, baseType: !203, size: 128, align: 64, offset: 192)
!917 = !DIDerivedType(tag: DW_TAG_member, name: "read_idx", scope: !912, file: !908, line: 9, baseType: !207, size: 64, align: 64, offset: 320)
!918 = !DIDerivedType(tag: DW_TAG_member, name: "write_idx", scope: !912, file: !908, line: 10, baseType: !207, size: 64, align: 64, offset: 384)
!919 = !DIDerivedType(tag: DW_TAG_member, name: "has_last", scope: !912, file: !908, line: 11, baseType: !920, size: 8, align: 8, offset: 448)
!920 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!921 = !DILocation(line: 20, column: 1, scope: !907)
!922 = !DILocalVariable(name: "self", arg: 1, scope: !907, file: !908, line: 19, type: !911)
!923 = !DILocation(line: 19, column: 36, scope: !907)
!924 = !DILocalVariable(name: "max_read", arg: 2, scope: !907, file: !908, line: 19, type: !207)
!925 = !DILocation(line: 19, column: 47, scope: !907)
!926 = !DILocalVariable(name: "initial_capacity", arg: 3, scope: !907, file: !908, line: 19, type: !207)
!927 = !DILocation(line: 19, column: 61, scope: !907)
!928 = !DILocalVariable(name: "allocator", arg: 4, scope: !907, file: !908, line: 19, type: !675)
!929 = !DILocation(line: 19, column: 94, scope: !907)
!930 = !DILocation(line: 17, column: 11, scope: !931)
!931 = distinct !DILexicalBlock(scope: !907, file: !908, line: 20, column: 1)
!932 = !DILocation(line: 21, column: 3, scope: !907)
!933 = !DILocation(line: 21, column: 25, scope: !907)
!934 = !DILocation(line: 21, column: 48, scope: !907)
!935 = !DILocation(line: 47, column: 10, scope: !936, inlinedAt: !937)
!936 = distinct !DISubprogram(name: "greater", linkageName: "greater", scope: !324, file: !324, line: 39, scopeLine: 39, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!937 = !DILocation(line: 116, column: 10, scope: !938, inlinedAt: !939)
!938 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !324, file: !324, line: 113, scopeLine: 113, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!939 = !DILocation(line: 22, column: 21, scope: !907)
!940 = !DILocation(line: 47, column: 14, scope: !936, inlinedAt: !937)
!941 = !DILocation(line: 116, column: 34, scope: !938, inlinedAt: !939)
!942 = !DILocation(line: 116, column: 38, scope: !938, inlinedAt: !939)
!943 = !DILocation(line: 23, column: 12, scope: !907)
!944 = !DILocation(line: 23, column: 2, scope: !907)
!945 = !DILocation(line: 24, column: 9, scope: !907)
!946 = distinct !DISubprogram(name: "temp_init", linkageName: "std.io.ByteBuffer.temp_init", scope: !908, file: !908, line: 27, type: !947, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!947 = !DISubroutineType(types: !948)
!948 = !{!911, !911, !208, !208}
!949 = !DILocation(line: 28, column: 1, scope: !946)
!950 = !DILocalVariable(name: "self", arg: 1, scope: !946, file: !908, line: 27, type: !911)
!951 = !DILocation(line: 27, column: 37, scope: !946)
!952 = !DILocalVariable(name: "max_read", arg: 2, scope: !946, file: !908, line: 27, type: !207)
!953 = !DILocation(line: 27, column: 48, scope: !946)
!954 = !DILocalVariable(name: "initial_capacity", arg: 3, scope: !946, file: !908, line: 27, type: !207)
!955 = !DILocation(line: 27, column: 62, scope: !946)
!956 = !DILocation(line: 396, column: 6, scope: !957, inlinedAt: !958)
!957 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !702, file: !702, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!958 = !DILocation(line: 29, column: 51, scope: !946)
!959 = !DILocation(line: 398, column: 3, scope: !960, inlinedAt: !958)
!960 = distinct !DILexicalBlock(scope: !957, file: !702, line: 397, column: 2)
!961 = !DILocation(line: 400, column: 9, scope: !957, inlinedAt: !958)
!962 = !DILocation(line: 29, column: 9, scope: !946)
!963 = distinct !DISubprogram(name: "init_with_buffer", linkageName: "std.io.ByteBuffer.init_with_buffer", scope: !908, file: !908, line: 36, type: !964, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!964 = !DISubroutineType(types: !965)
!965 = !{!911, !911, !203}
!966 = !DILocation(line: 37, column: 1, scope: !963)
!967 = !DILocalVariable(name: "self", arg: 1, scope: !963, file: !908, line: 36, type: !911)
!968 = !DILocation(line: 36, column: 44, scope: !963)
!969 = !DILocalVariable(name: "buf", arg: 2, scope: !963, file: !908, line: 36, type: !203)
!970 = !DILocation(line: 36, column: 58, scope: !963)
!971 = !DILocation(line: 33, column: 11, scope: !972)
!972 = distinct !DILexicalBlock(scope: !963, file: !908, line: 37, column: 1)
!973 = !DILocation(line: 34, column: 11, scope: !972)
!974 = !DILocation(line: 38, column: 3, scope: !963)
!975 = !DILocation(line: 38, column: 24, scope: !963)
!976 = !DILocation(line: 38, column: 42, scope: !963)
!977 = !DILocation(line: 39, column: 9, scope: !963)
!978 = distinct !DISubprogram(name: "free", linkageName: "std.io.ByteBuffer.free", scope: !908, file: !908, line: 42, type: !979, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!979 = !DISubroutineType(types: !980)
!980 = !{null, !911}
!981 = !DILocation(line: 43, column: 1, scope: !978)
!982 = !DILocalVariable(name: "self", arg: 1, scope: !978, file: !908, line: 42, type: !911)
!983 = !DILocation(line: 42, column: 25, scope: !978)
!984 = !DILocation(line: 44, column: 6, scope: !978)
!985 = !DILocation(line: 44, column: 38, scope: !978)
!986 = !DILocation(line: 44, column: 54, scope: !978)
!987 = !DILocation(line: 101, column: 6, scope: !988, inlinedAt: !989)
!988 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !702, file: !702, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!989 = !DILocation(line: 44, column: 22, scope: !978)
!990 = !DILocation(line: 101, column: 18, scope: !988, inlinedAt: !989)
!991 = !DILocation(line: 105, column: 25, scope: !988, inlinedAt: !989)
!992 = !DILocation(line: 105, column: 2, scope: !988, inlinedAt: !989)
!993 = !DILocation(line: 45, column: 3, scope: !978)
!994 = distinct !DISubprogram(name: "write", linkageName: "std.io.ByteBuffer.write", scope: !908, file: !908, line: 48, type: !995, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!995 = !DISubroutineType(types: !996)
!996 = !{!115, !308, !911, !203}
!997 = !DILocation(line: 49, column: 1, scope: !994)
!998 = !DILocalVariable(name: "self", arg: 1, scope: !994, file: !908, line: 48, type: !911)
!999 = !DILocation(line: 48, column: 26, scope: !994)
!1000 = !DILocalVariable(name: "bytes", arg: 2, scope: !994, file: !908, line: 48, type: !203)
!1001 = !DILocation(line: 48, column: 40, scope: !994)
!1002 = !DILocalVariable(name: "cap", scope: !994, file: !908, line: 50, type: !207, align: 8)
!1003 = !DILocation(line: 50, column: 6, scope: !994)
!1004 = !DILocation(line: 50, column: 12, scope: !994)
!1005 = !DILocation(line: 50, column: 29, scope: !994)
!1006 = !DILocation(line: 51, column: 6, scope: !994)
!1007 = !DILocation(line: 51, column: 12, scope: !994)
!1008 = !DILocation(line: 51, column: 33, scope: !994)
!1009 = !DILocation(line: 51, column: 23, scope: !994)
!1010 = !DILocation(line: 52, column: 41, scope: !994)
!1011 = !DILocation(line: 52, column: 47, scope: !994)
!1012 = !DILocation(line: 52, column: 2, scope: !994)
!1013 = !DILocation(line: 52, column: 13, scope: !994)
!1014 = !DILocation(line: 52, column: 28, scope: !994)
!1015 = !DILocation(line: 53, column: 2, scope: !994)
!1016 = !DILocation(line: 53, column: 20, scope: !994)
!1017 = !DILocation(line: 54, column: 9, scope: !994)
!1018 = distinct !DISubprogram(name: "write_byte", linkageName: "std.io.ByteBuffer.write_byte", scope: !908, file: !908, line: 57, type: !1019, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1019 = !DISubroutineType(types: !1020)
!1020 = !{!115, !21, !911, !11}
!1021 = !DILocation(line: 58, column: 1, scope: !1018)
!1022 = !DILocalVariable(name: "self", arg: 1, scope: !1018, file: !908, line: 57, type: !911)
!1023 = !DILocation(line: 57, column: 32, scope: !1018)
!1024 = !DILocalVariable(name: "c", arg: 2, scope: !1018, file: !908, line: 57, type: !11)
!1025 = !DILocation(line: 57, column: 44, scope: !1018)
!1026 = !DILocalVariable(name: "cap", scope: !1018, file: !908, line: 59, type: !207, align: 8)
!1027 = !DILocation(line: 59, column: 6, scope: !1018)
!1028 = !DILocation(line: 59, column: 12, scope: !1018)
!1029 = !DILocation(line: 59, column: 29, scope: !1018)
!1030 = !DILocation(line: 60, column: 6, scope: !1018)
!1031 = !DILocation(line: 60, column: 26, scope: !1018)
!1032 = !DILocation(line: 60, column: 16, scope: !1018)
!1033 = !DILocation(line: 61, column: 2, scope: !1018)
!1034 = !DILocation(line: 61, column: 13, scope: !1018)
!1035 = !DILocation(line: 61, column: 31, scope: !1018)
!1036 = !DILocation(line: 62, column: 2, scope: !1018)
!1037 = distinct !DISubprogram(name: "read", linkageName: "std.io.ByteBuffer.read", scope: !908, file: !908, line: 65, type: !995, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1038 = !DILocation(line: 66, column: 1, scope: !1037)
!1039 = !DILocalVariable(name: "self", arg: 1, scope: !1037, file: !908, line: 65, type: !911)
!1040 = !DILocation(line: 65, column: 25, scope: !1037)
!1041 = !DILocalVariable(name: "bytes", arg: 2, scope: !1037, file: !908, line: 65, type: !203)
!1042 = !DILocation(line: 65, column: 39, scope: !1037)
!1043 = !DILocalVariable(name: "readable", scope: !1037, file: !908, line: 67, type: !207, align: 8)
!1044 = !DILocation(line: 67, column: 6, scope: !1037)
!1045 = !DILocation(line: 67, column: 17, scope: !1037)
!1046 = !DILocation(line: 67, column: 34, scope: !1037)
!1047 = !DILocation(line: 68, column: 6, scope: !1037)
!1048 = !DILocation(line: 70, column: 3, scope: !1049)
!1049 = distinct !DILexicalBlock(scope: !1037, file: !908, line: 69, column: 2)
!1050 = !DILocation(line: 70, column: 19, scope: !1049)
!1051 = !DILocation(line: 71, column: 10, scope: !1049)
!1052 = !DILocalVariable(name: "n", scope: !1037, file: !908, line: 73, type: !207, align: 8)
!1053 = !DILocation(line: 73, column: 6, scope: !1037)
!1054 = !DILocation(line: 73, column: 24, scope: !1037)
!1055 = !DILocation(line: 17, column: 10, scope: !1056, inlinedAt: !1057)
!1056 = distinct !DISubprogram(name: "less", linkageName: "less", scope: !324, file: !324, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1057 = !DILocation(line: 100, column: 10, scope: !1058, inlinedAt: !1059)
!1058 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !324, file: !324, line: 97, scopeLine: 97, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1059 = !DILocation(line: 73, column: 10, scope: !1037)
!1060 = !DILocation(line: 17, column: 14, scope: !1056, inlinedAt: !1057)
!1061 = !DILocation(line: 100, column: 31, scope: !1058, inlinedAt: !1059)
!1062 = !DILocation(line: 100, column: 35, scope: !1058, inlinedAt: !1059)
!1063 = !DILocation(line: 74, column: 14, scope: !1037)
!1064 = !DILocation(line: 74, column: 25, scope: !1037)
!1065 = !DILocation(line: 74, column: 39, scope: !1037)
!1066 = !DILocation(line: 74, column: 2, scope: !1037)
!1067 = !DILocation(line: 74, column: 8, scope: !1037)
!1068 = !DILocation(line: 74, column: 9, scope: !1037)
!1069 = !DILocation(line: 75, column: 2, scope: !1037)
!1070 = !DILocation(line: 75, column: 19, scope: !1037)
!1071 = !DILocation(line: 76, column: 2, scope: !1037)
!1072 = !DILocation(line: 76, column: 18, scope: !1037)
!1073 = !DILocation(line: 140, column: 6, scope: !1074, inlinedAt: !1075)
!1074 = distinct !DISubprogram(name: "shrink", linkageName: "shrink", scope: !908, file: !908, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1075 = !DILocation(line: 77, column: 2, scope: !1037)
!1076 = !DILocation(line: 140, column: 23, scope: !1074, inlinedAt: !1075)
!1077 = !DILocalVariable(name: "readable", scope: !1078, file: !908, line: 143, type: !207, align: 8)
!1078 = distinct !DILexicalBlock(scope: !1074, file: !908, line: 141, column: 2)
!1079 = !DILocation(line: 143, column: 7, scope: !1078, inlinedAt: !1075)
!1080 = !DILocation(line: 143, column: 18, scope: !1078, inlinedAt: !1075)
!1081 = !DILocation(line: 143, column: 35, scope: !1078, inlinedAt: !1075)
!1082 = !DILocation(line: 144, column: 31, scope: !1078, inlinedAt: !1075)
!1083 = !DILocation(line: 144, column: 42, scope: !1078, inlinedAt: !1075)
!1084 = !DILocation(line: 144, column: 64, scope: !1078, inlinedAt: !1075)
!1085 = !DILocation(line: 144, column: 60, scope: !1078, inlinedAt: !1075)
!1086 = !DILocation(line: 144, column: 3, scope: !1078, inlinedAt: !1075)
!1087 = !DILocation(line: 144, column: 14, scope: !1078, inlinedAt: !1075)
!1088 = !DILocation(line: 144, column: 19, scope: !1078, inlinedAt: !1075)
!1089 = !DILocation(line: 144, column: 15, scope: !1078, inlinedAt: !1075)
!1090 = !DILocation(line: 145, column: 3, scope: !1078, inlinedAt: !1075)
!1091 = !DILocation(line: 145, column: 24, scope: !1078, inlinedAt: !1075)
!1092 = !DILocation(line: 145, column: 20, scope: !1078, inlinedAt: !1075)
!1093 = !DILocation(line: 146, column: 3, scope: !1078, inlinedAt: !1075)
!1094 = !DILocation(line: 146, column: 19, scope: !1078, inlinedAt: !1075)
!1095 = !DILocation(line: 78, column: 9, scope: !1037)
!1096 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.ByteBuffer.read_byte", scope: !908, file: !908, line: 81, type: !1097, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1097 = !DISubroutineType(types: !1098)
!1098 = !{!115, !117, !911}
!1099 = !DILocation(line: 82, column: 1, scope: !1096)
!1100 = !DILocalVariable(name: "self", arg: 1, scope: !1096, file: !908, line: 81, type: !911)
!1101 = !DILocation(line: 81, column: 31, scope: !1096)
!1102 = !DILocalVariable(name: "readable", scope: !1096, file: !908, line: 83, type: !207, align: 8)
!1103 = !DILocation(line: 83, column: 6, scope: !1096)
!1104 = !DILocation(line: 83, column: 17, scope: !1096)
!1105 = !DILocation(line: 83, column: 34, scope: !1096)
!1106 = !DILocation(line: 84, column: 6, scope: !1096)
!1107 = !DILocation(line: 86, column: 3, scope: !1108)
!1108 = distinct !DILexicalBlock(scope: !1096, file: !908, line: 85, column: 2)
!1109 = !DILocation(line: 86, column: 19, scope: !1108)
!1110 = !DILocation(line: 87, column: 10, scope: !1108)
!1111 = !DILocalVariable(name: "c", scope: !1096, file: !908, line: 89, type: !11, align: 1)
!1112 = !DILocation(line: 89, column: 7, scope: !1096)
!1113 = !DILocation(line: 89, column: 11, scope: !1096)
!1114 = !DILocation(line: 89, column: 22, scope: !1096)
!1115 = !DILocation(line: 90, column: 2, scope: !1096)
!1116 = !DILocation(line: 91, column: 2, scope: !1096)
!1117 = !DILocation(line: 91, column: 18, scope: !1096)
!1118 = !DILocation(line: 140, column: 6, scope: !1119, inlinedAt: !1120)
!1119 = distinct !DISubprogram(name: "shrink", linkageName: "shrink", scope: !908, file: !908, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1120 = !DILocation(line: 92, column: 2, scope: !1096)
!1121 = !DILocation(line: 140, column: 23, scope: !1119, inlinedAt: !1120)
!1122 = !DILocalVariable(name: "readable", scope: !1123, file: !908, line: 143, type: !207, align: 8)
!1123 = distinct !DILexicalBlock(scope: !1119, file: !908, line: 141, column: 2)
!1124 = !DILocation(line: 143, column: 7, scope: !1123, inlinedAt: !1120)
!1125 = !DILocation(line: 143, column: 18, scope: !1123, inlinedAt: !1120)
!1126 = !DILocation(line: 143, column: 35, scope: !1123, inlinedAt: !1120)
!1127 = !DILocation(line: 144, column: 31, scope: !1123, inlinedAt: !1120)
!1128 = !DILocation(line: 144, column: 42, scope: !1123, inlinedAt: !1120)
!1129 = !DILocation(line: 144, column: 64, scope: !1123, inlinedAt: !1120)
!1130 = !DILocation(line: 144, column: 60, scope: !1123, inlinedAt: !1120)
!1131 = !DILocation(line: 144, column: 3, scope: !1123, inlinedAt: !1120)
!1132 = !DILocation(line: 144, column: 14, scope: !1123, inlinedAt: !1120)
!1133 = !DILocation(line: 144, column: 19, scope: !1123, inlinedAt: !1120)
!1134 = !DILocation(line: 144, column: 15, scope: !1123, inlinedAt: !1120)
!1135 = !DILocation(line: 145, column: 3, scope: !1123, inlinedAt: !1120)
!1136 = !DILocation(line: 145, column: 24, scope: !1123, inlinedAt: !1120)
!1137 = !DILocation(line: 145, column: 20, scope: !1123, inlinedAt: !1120)
!1138 = !DILocation(line: 146, column: 3, scope: !1123, inlinedAt: !1120)
!1139 = !DILocation(line: 146, column: 19, scope: !1123, inlinedAt: !1120)
!1140 = !DILocation(line: 93, column: 9, scope: !1096)
!1141 = distinct !DISubprogram(name: "pushback_byte", linkageName: "std.io.ByteBuffer.pushback_byte", scope: !908, file: !908, line: 99, type: !1142, scopeLine: 99, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1142 = !DISubroutineType(types: !1143)
!1143 = !{!115, !21, !911}
!1144 = !DILocation(line: 100, column: 1, scope: !1141)
!1145 = !DILocalVariable(name: "self", arg: 1, scope: !1141, file: !908, line: 99, type: !911)
!1146 = !DILocation(line: 99, column: 35, scope: !1141)
!1147 = !DILocation(line: 101, column: 7, scope: !1141)
!1148 = !DILocation(line: 101, column: 29, scope: !1141)
!1149 = !DILocation(line: 102, column: 9, scope: !1141)
!1150 = !DILocation(line: 103, column: 2, scope: !1141)
!1151 = !DILocation(line: 104, column: 2, scope: !1141)
!1152 = !DILocation(line: 104, column: 18, scope: !1141)
!1153 = distinct !DISubprogram(name: "seek", linkageName: "std.io.ByteBuffer.seek", scope: !908, file: !908, line: 107, type: !1154, scopeLine: 107, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1154 = !DISubroutineType(types: !1155)
!1155 = !{!115, !308, !911, !116, !45}
!1156 = !DILocation(line: 108, column: 1, scope: !1153)
!1157 = !DILocalVariable(name: "self", arg: 1, scope: !1153, file: !908, line: 107, type: !911)
!1158 = !DILocation(line: 107, column: 25, scope: !1153)
!1159 = !DILocalVariable(name: "offset", arg: 2, scope: !1153, file: !908, line: 107, type: !381)
!1160 = !DILocation(line: 107, column: 36, scope: !1153)
!1161 = !DILocalVariable(name: "seek", arg: 3, scope: !1153, file: !908, line: 107, type: !45)
!1162 = !DILocation(line: 107, column: 49, scope: !1153)
!1163 = !DILocation(line: 112, column: 8, scope: !1164)
!1164 = distinct !DILexicalBlock(scope: !1165, file: !908, line: 112, column: 4)
!1165 = distinct !DILexicalBlock(scope: !1153, file: !908, line: 109, column: 2)
!1166 = !DILocation(line: 112, column: 22, scope: !1164)
!1167 = !DILocation(line: 112, column: 31, scope: !1164)
!1168 = !DILocation(line: 112, column: 54, scope: !1164)
!1169 = !DILocation(line: 113, column: 4, scope: !1164)
!1170 = !DILocation(line: 113, column: 20, scope: !1164)
!1171 = !DILocation(line: 114, column: 11, scope: !1164)
!1172 = !DILocation(line: 116, column: 9, scope: !1173)
!1173 = distinct !DILexicalBlock(scope: !1165, file: !908, line: 116, column: 4)
!1174 = !DILocation(line: 116, column: 23, scope: !1173)
!1175 = !DILocation(line: 116, column: 40, scope: !1173)
!1176 = !DILocation(line: 117, column: 6, scope: !1173)
!1177 = !DILocation(line: 117, column: 20, scope: !1173)
!1178 = !DILocation(line: 117, column: 36, scope: !1173)
!1179 = !DILocation(line: 117, column: 45, scope: !1173)
!1180 = !DILocation(line: 117, column: 69, scope: !1173)
!1181 = !DILocation(line: 118, column: 4, scope: !1173)
!1182 = !DILocation(line: 118, column: 21, scope: !1173)
!1183 = !DILocation(line: 120, column: 8, scope: !1184)
!1184 = distinct !DILexicalBlock(scope: !1165, file: !908, line: 120, column: 4)
!1185 = !DILocation(line: 120, column: 22, scope: !1184)
!1186 = !DILocation(line: 120, column: 31, scope: !1184)
!1187 = !DILocation(line: 120, column: 54, scope: !1184)
!1188 = !DILocation(line: 121, column: 4, scope: !1184)
!1189 = !DILocation(line: 121, column: 20, scope: !1184)
!1190 = !DILocation(line: 121, column: 37, scope: !1184)
!1191 = !DILocation(line: 123, column: 9, scope: !1153)
!1192 = distinct !DISubprogram(name: "available", linkageName: "std.io.ByteBuffer.available", scope: !908, file: !908, line: 126, type: !1193, scopeLine: 126, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1193 = !DISubroutineType(types: !1194)
!1194 = !{!115, !308, !911}
!1195 = !DILocation(line: 127, column: 1, scope: !1192)
!1196 = !DILocalVariable(name: "self", arg: 1, scope: !1192, file: !908, line: 126, type: !911)
!1197 = !DILocation(line: 126, column: 30, scope: !1192)
!1198 = !DILocation(line: 128, column: 9, scope: !1192)
!1199 = !DILocation(line: 128, column: 26, scope: !1192)
!1200 = distinct !DISubprogram(name: "grow", linkageName: "std.io.ByteBuffer.grow", scope: !908, file: !908, line: 131, type: !1201, scopeLine: 131, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1201 = !DISubroutineType(types: !1202)
!1202 = !{null, !911, !208}
!1203 = !DILocation(line: 132, column: 1, scope: !1200)
!1204 = !DILocalVariable(name: "self", arg: 1, scope: !1200, file: !908, line: 131, type: !911)
!1205 = !DILocation(line: 131, column: 25, scope: !1200)
!1206 = !DILocalVariable(name: "n", arg: 2, scope: !1200, file: !908, line: 131, type: !207)
!1207 = !DILocation(line: 131, column: 36, scope: !1200)
!1208 = !DILocalVariable(name: "y", scope: !1209, file: !908, line: 1026, type: !207, align: 8)
!1209 = distinct !DISubprogram(name: "next_power_of_2", linkageName: "next_power_of_2", scope: !767, file: !767, line: 1024, scopeLine: 1024, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1210 = !DILocation(line: 1026, column: 13, scope: !1209, inlinedAt: !1211)
!1211 = !DILocation(line: 133, column: 6, scope: !1200)
!1212 = !DILocation(line: 1026, column: 17, scope: !1209, inlinedAt: !1211)
!1213 = !DILocation(line: 1027, column: 2, scope: !1209, inlinedAt: !1211)
!1214 = !DILocation(line: 1027, column: 9, scope: !1215, inlinedAt: !1211)
!1215 = distinct !DILexicalBlock(scope: !1209, file: !767, line: 1027, column: 2)
!1216 = !DILocation(line: 1027, column: 13, scope: !1215, inlinedAt: !1211)
!1217 = !DILocation(line: 1027, column: 16, scope: !1215, inlinedAt: !1211)
!1218 = !DILocation(line: 1027, column: 21, scope: !1215, inlinedAt: !1211)
!1219 = !DILocation(line: 1028, column: 9, scope: !1209, inlinedAt: !1211)
!1220 = !DILocalVariable(name: "p", scope: !1200, file: !908, line: 134, type: !117, align: 8)
!1221 = !DILocation(line: 134, column: 8, scope: !1200)
!1222 = !DILocation(line: 134, column: 31, scope: !1200)
!1223 = !DILocation(line: 134, column: 47, scope: !1200)
!1224 = !DILocation(line: 90, column: 6, scope: !1225, inlinedAt: !1226)
!1225 = distinct !DISubprogram(name: "realloc_try", linkageName: "realloc_try", scope: !702, file: !702, line: 88, scopeLine: 88, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1226 = !DILocation(line: 85, column: 9, scope: !1227, inlinedAt: !1228)
!1227 = distinct !DISubprogram(name: "realloc", linkageName: "realloc", scope: !702, file: !702, line: 83, scopeLine: 83, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1228 = !DILocation(line: 134, column: 12, scope: !1200)
!1229 = !DILocation(line: 101, column: 6, scope: !1230, inlinedAt: !1231)
!1230 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !702, file: !702, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1231 = !DILocation(line: 92, column: 3, scope: !1232, inlinedAt: !1226)
!1232 = distinct !DILexicalBlock(scope: !1225, file: !702, line: 91, column: 2)
!1233 = !DILocation(line: 101, column: 18, scope: !1230, inlinedAt: !1231)
!1234 = !DILocation(line: 105, column: 25, scope: !1230, inlinedAt: !1231)
!1235 = !DILocation(line: 105, column: 2, scope: !1230, inlinedAt: !1231)
!1236 = !DILocation(line: 93, column: 10, scope: !1232, inlinedAt: !1226)
!1237 = !DILocation(line: 95, column: 6, scope: !1225, inlinedAt: !1226)
!1238 = !DILocation(line: 28, column: 71, scope: !1239, inlinedAt: !1240)
!1239 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !702, file: !702, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1240 = !DILocation(line: 95, column: 19, scope: !1225, inlinedAt: !1226)
!1241 = !DILocation(line: 35, column: 60, scope: !1242, inlinedAt: !1243)
!1242 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !702, file: !702, line: 35, scopeLine: 35, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1243 = !DILocation(line: 96, column: 9, scope: !1225, inlinedAt: !1226)
!1244 = !DILocation(line: 135, column: 2, scope: !1200)
!1245 = !DILocation(line: 135, column: 15, scope: !1200)
!1246 = !DILocation(line: 135, column: 18, scope: !1200)
!1247 = distinct !DISubprogram(name: "init", linkageName: "std.io.TeeReader.init", scope: !1248, file: !1248, line: 22, type: !1249, scopeLine: 22, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1248 = !DIFile(filename: "teereader.c3", directory: "/usr/local/lib/c3/std/io/stream")
!1249 = !DISubroutineType(types: !1250)
!1250 = !{!1251, !1251, !88, !159}
!1251 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TeeReader*", baseType: !1252, size: 64, align: 64, dwarfAddressSpace: 0)
!1252 = !DICompositeType(tag: DW_TAG_structure_type, name: "TeeReader", scope: !1248, file: !1248, line: 3, size: 256, align: 64, elements: !1253, identifier: "std.io.TeeReader")
!1253 = !{!1254, !1255}
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1252, file: !1248, line: 5, baseType: !88, size: 128, align: 64)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "w", scope: !1252, file: !1248, line: 6, baseType: !159, size: 128, align: 64, offset: 128)
!1256 = !DILocation(line: 23, column: 1, scope: !1247)
!1257 = !DILocalVariable(name: "self", arg: 1, scope: !1247, file: !1248, line: 22, type: !1251)
!1258 = !DILocation(line: 22, column: 30, scope: !1247)
!1259 = !DILocalVariable(name: "r", arg: 2, scope: !1247, file: !1248, line: 22, type: !88)
!1260 = !DILocation(line: 22, column: 46, scope: !1247)
!1261 = !DILocalVariable(name: "w", arg: 3, scope: !1247, file: !1248, line: 22, type: !159)
!1262 = !DILocation(line: 22, column: 59, scope: !1247)
!1263 = !DILocation(line: 24, column: 3, scope: !1247)
!1264 = !DILocation(line: 15, column: 58, scope: !1265, inlinedAt: !1266)
!1265 = distinct !DISubprogram(name: "tee_reader", linkageName: "tee_reader", scope: !1248, file: !1248, line: 15, scopeLine: 15, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1266 = !DILocation(line: 24, column: 10, scope: !1247)
!1267 = !DILocation(line: 15, column: 61, scope: !1265, inlinedAt: !1266)
!1268 = !DILocation(line: 25, column: 9, scope: !1247)
!1269 = distinct !DISubprogram(name: "read", linkageName: "std.io.TeeReader.read", scope: !1248, file: !1248, line: 28, type: !1270, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1270 = !DISubroutineType(types: !1271)
!1271 = !{!115, !308, !1251, !203}
!1272 = !DILocation(line: 29, column: 1, scope: !1269)
!1273 = !DILocalVariable(name: "self", arg: 1, scope: !1269, file: !1248, line: 28, type: !1251)
!1274 = !DILocation(line: 28, column: 24, scope: !1269)
!1275 = !DILocalVariable(name: "bytes", arg: 2, scope: !1269, file: !1248, line: 28, type: !203)
!1276 = !DILocation(line: 28, column: 38, scope: !1269)
!1277 = !DILocalVariable(name: "nr", scope: !1269, file: !1248, line: 30, type: !207, align: 8)
!1278 = !DILocation(line: 30, column: 6, scope: !1269)
!1279 = !DILocalVariable(name: "nw", scope: !1269, file: !1248, line: 30, type: !207, align: 8)
!1280 = !DILocation(line: 30, column: 10, scope: !1269)
!1281 = !DILocation(line: 31, column: 7, scope: !1269)
!1282 = !DILocation(line: 31, column: 19, scope: !1269)
!1283 = !DILocation(line: 32, column: 7, scope: !1269)
!1284 = !DILocation(line: 32, column: 20, scope: !1269)
!1285 = !DILocation(line: 32, column: 26, scope: !1269)
!1286 = !DILocation(line: 32, column: 27, scope: !1269)
!1287 = !DILocation(line: 33, column: 6, scope: !1269)
!1288 = !DILocation(line: 33, column: 12, scope: !1269)
!1289 = !DILocation(line: 33, column: 23, scope: !1269)
!1290 = !DILocation(line: 34, column: 9, scope: !1269)
!1291 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.TeeReader.read_byte", scope: !1248, file: !1248, line: 37, type: !1292, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1292 = !DISubroutineType(types: !1293)
!1293 = !{!115, !117, !1251}
!1294 = !DILocation(line: 38, column: 1, scope: !1291)
!1295 = !DILocalVariable(name: "self", arg: 1, scope: !1291, file: !1248, line: 37, type: !1251)
!1296 = !DILocation(line: 37, column: 30, scope: !1291)
!1297 = !DILocalVariable(name: "data", scope: !1291, file: !1248, line: 39, type: !1298, align: 1)
!1298 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 8, align: 8, elements: !1299)
!1299 = !{!1300}
!1300 = !DISubrange(count: 1, lowerBound: 0)
!1301 = !DILocation(line: 39, column: 10, scope: !1291)
!1302 = !DILocation(line: 40, column: 12, scope: !1291)
!1303 = !DILocation(line: 40, column: 2, scope: !1291)
!1304 = !DILocation(line: 41, column: 14, scope: !1291)
!1305 = distinct !DISubprogram(name: "new_init", linkageName: "std.io.MultiWriter.new_init", scope: !1306, file: !1306, line: 18, type: !1307, scopeLine: 18, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1306 = !DIFile(filename: "multiwriter.c3", directory: "/usr/local/lib/c3/std/io/stream")
!1307 = !DISubroutineType(types: !1308)
!1308 = !{!1309, !1309, !1313, !675}
!1309 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "MultiWriter*", baseType: !1310, size: 64, align: 64, dwarfAddressSpace: 0)
!1310 = !DICompositeType(tag: DW_TAG_structure_type, name: "MultiWriter", scope: !1306, file: !1306, line: 6, size: 256, align: 64, elements: !1311, identifier: "std.io.MultiWriter")
!1311 = !{!1312, !1318}
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "writers", scope: !1310, file: !1306, line: 8, baseType: !1313, size: 128, align: 64)
!1313 = !DICompositeType(tag: DW_TAG_structure_type, name: "OutStream[]", size: 128, align: 64, elements: !1314, identifier: "OutStream[]")
!1314 = !{!1315, !1317}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !1313, baseType: !1316, size: 64, align: 64)
!1316 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "OutStream*", baseType: !159, size: 64, align: 64, dwarfAddressSpace: 0)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1313, baseType: !207, size: 64, align: 64, offset: 64)
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !1310, file: !1306, line: 9, baseType: !675, size: 128, align: 64, offset: 128)
!1319 = !DILocation(line: 19, column: 1, scope: !1305)
!1320 = !DILocalVariable(name: "self", arg: 1, scope: !1305, file: !1306, line: 18, type: !1309)
!1321 = !DILocation(line: 18, column: 38, scope: !1305)
!1322 = !DILocalVariable(name: "writers", arg: 2, scope: !1305, file: !1306, line: 18, type: !1313)
!1323 = !DILocation(line: 18, column: 58, scope: !1305)
!1324 = !DILocalVariable(name: "allocator", arg: 3, scope: !1305, file: !1306, line: 18, type: !675)
!1325 = !DILocation(line: 18, column: 77, scope: !1305)
!1326 = !DILocation(line: 15, column: 11, scope: !1327)
!1327 = distinct !DILexicalBlock(scope: !1305, file: !1306, line: 19, column: 1)
!1328 = !DILocation(line: 16, column: 11, scope: !1327)
!1329 = !DILocalVariable(name: "copy", scope: !1305, file: !1306, line: 20, type: !1313, align: 8)
!1330 = !DILocation(line: 20, column: 14, scope: !1305)
!1331 = !DILocation(line: 20, column: 64, scope: !1305)
!1332 = !DILocation(line: 252, column: 55, scope: !1333, inlinedAt: !1334)
!1333 = distinct !DISubprogram(name: "new_array_try", linkageName: "new_array_try", scope: !702, file: !702, line: 250, scopeLine: 250, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1334 = !DILocation(line: 244, column: 9, scope: !1335, inlinedAt: !1336)
!1335 = distinct !DISubprogram(name: "new_array", linkageName: "new_array", scope: !702, file: !702, line: 242, scopeLine: 242, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1336 = !DILocation(line: 20, column: 21, scope: !1305)
!1337 = !DILocation(line: 252, column: 40, scope: !1333, inlinedAt: !1334)
!1338 = !DILocation(line: 79, column: 6, scope: !1339, inlinedAt: !1340)
!1339 = distinct !DISubprogram(name: "calloc_try", linkageName: "calloc_try", scope: !702, file: !702, line: 77, scopeLine: 77, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1340 = !DILocation(line: 252, column: 18, scope: !1333, inlinedAt: !1334)
!1341 = !DILocation(line: 79, column: 20, scope: !1339, inlinedAt: !1340)
!1342 = !DILocation(line: 28, column: 71, scope: !1343, inlinedAt: !1344)
!1343 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !702, file: !702, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1344 = !DILocation(line: 80, column: 9, scope: !1339, inlinedAt: !1340)
!1345 = !DILocation(line: 252, column: 67, scope: !1333, inlinedAt: !1334)
!1346 = !DILocation(line: 21, column: 13, scope: !1305)
!1347 = !DILocation(line: 21, column: 21, scope: !1305)
!1348 = !DILocation(line: 21, column: 2, scope: !1305)
!1349 = !DILocation(line: 21, column: 7, scope: !1305)
!1350 = !DILocation(line: 22, column: 3, scope: !1305)
!1351 = !DILocation(line: 22, column: 23, scope: !1305)
!1352 = !DILocation(line: 22, column: 42, scope: !1305)
!1353 = !DILocation(line: 23, column: 9, scope: !1305)
!1354 = distinct !DISubprogram(name: "temp_init", linkageName: "std.io.MultiWriter.temp_init", scope: !1306, file: !1306, line: 31, type: !1355, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1355 = !DISubroutineType(types: !1356)
!1356 = !{!1309, !1309, !1313}
!1357 = !DILocation(line: 32, column: 1, scope: !1354)
!1358 = !DILocalVariable(name: "self", arg: 1, scope: !1354, file: !1306, line: 31, type: !1309)
!1359 = !DILocation(line: 31, column: 39, scope: !1354)
!1360 = !DILocalVariable(name: "writers", arg: 2, scope: !1354, file: !1306, line: 31, type: !1313)
!1361 = !DILocation(line: 31, column: 59, scope: !1354)
!1362 = !DILocation(line: 28, column: 11, scope: !1363)
!1363 = distinct !DILexicalBlock(scope: !1354, file: !1306, line: 32, column: 1)
!1364 = !DILocation(line: 29, column: 11, scope: !1363)
!1365 = !DILocation(line: 396, column: 6, scope: !1366, inlinedAt: !1367)
!1366 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !702, file: !702, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1367 = !DILocation(line: 33, column: 46, scope: !1354)
!1368 = !DILocation(line: 398, column: 3, scope: !1369, inlinedAt: !1367)
!1369 = distinct !DILexicalBlock(scope: !1366, file: !702, line: 397, column: 2)
!1370 = !DILocation(line: 400, column: 9, scope: !1366, inlinedAt: !1367)
!1371 = !DILocation(line: 33, column: 9, scope: !1354)
!1372 = distinct !DISubprogram(name: "free", linkageName: "std.io.MultiWriter.free", scope: !1306, file: !1306, line: 36, type: !1373, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1373 = !DISubroutineType(types: !1374)
!1374 = !{null, !1309}
!1375 = !DILocation(line: 37, column: 1, scope: !1372)
!1376 = !DILocalVariable(name: "self", arg: 1, scope: !1372, file: !1306, line: 36, type: !1309)
!1377 = !DILocation(line: 36, column: 26, scope: !1372)
!1378 = !DILocation(line: 38, column: 7, scope: !1372)
!1379 = !DILocation(line: 38, column: 29, scope: !1372)
!1380 = !DILocation(line: 39, column: 18, scope: !1372)
!1381 = !DILocation(line: 39, column: 34, scope: !1372)
!1382 = !DILocation(line: 101, column: 6, scope: !1383, inlinedAt: !1384)
!1383 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !702, file: !702, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1384 = !DILocation(line: 39, column: 2, scope: !1372)
!1385 = !DILocation(line: 101, column: 18, scope: !1383, inlinedAt: !1384)
!1386 = !DILocation(line: 105, column: 25, scope: !1383, inlinedAt: !1384)
!1387 = !DILocation(line: 105, column: 2, scope: !1383, inlinedAt: !1384)
!1388 = !DILocation(line: 40, column: 3, scope: !1372)
!1389 = distinct !DISubprogram(name: "write", linkageName: "std.io.MultiWriter.write", scope: !1306, file: !1306, line: 43, type: !1390, scopeLine: 43, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1390 = !DISubroutineType(types: !1391)
!1391 = !{!115, !308, !1309, !203}
!1392 = !DILocation(line: 44, column: 1, scope: !1389)
!1393 = !DILocalVariable(name: "self", arg: 1, scope: !1389, file: !1306, line: 43, type: !1309)
!1394 = !DILocation(line: 43, column: 27, scope: !1389)
!1395 = !DILocalVariable(name: "bytes", arg: 2, scope: !1389, file: !1306, line: 43, type: !203)
!1396 = !DILocation(line: 43, column: 41, scope: !1389)
!1397 = !DILocalVariable(name: "n", scope: !1389, file: !1306, line: 45, type: !207, align: 8)
!1398 = !DILocation(line: 45, column: 6, scope: !1389)
!1399 = !DILocation(line: 46, column: 15, scope: !1400)
!1400 = distinct !DILexicalBlock(scope: !1389, file: !1306, line: 46, column: 2)
!1401 = !DILocalVariable(name: ".temp", scope: !1400, file: !1306, line: 46, type: !207, align: 8)
!1402 = !DILocalVariable(name: "w", scope: !1403, file: !1306, line: 46, type: !159, align: 8)
!1403 = distinct !DILexicalBlock(scope: !1400, file: !1306, line: 47, column: 2)
!1404 = !DILocation(line: 46, column: 11, scope: !1403)
!1405 = !DILocation(line: 46, column: 15, scope: !1403)
!1406 = !DILocation(line: 48, column: 15, scope: !1407)
!1407 = distinct !DILexicalBlock(scope: !1403, file: !1306, line: 47, column: 2)
!1408 = !DILocation(line: 48, column: 7, scope: !1407)
!1409 = !DILocation(line: 49, column: 7, scope: !1407)
!1410 = !DILocation(line: 49, column: 12, scope: !1407)
!1411 = !DILocation(line: 49, column: 30, scope: !1407)
!1412 = !DILocation(line: 51, column: 9, scope: !1389)
!1413 = distinct !DISubprogram(name: "write_byte", linkageName: "std.io.MultiWriter.write_byte", scope: !1306, file: !1306, line: 54, type: !1414, scopeLine: 54, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1414 = !DISubroutineType(types: !1415)
!1415 = !{!115, !21, !1309, !11}
!1416 = !DILocation(line: 55, column: 1, scope: !1413)
!1417 = !DILocalVariable(name: "self", arg: 1, scope: !1413, file: !1306, line: 54, type: !1309)
!1418 = !DILocation(line: 54, column: 33, scope: !1413)
!1419 = !DILocalVariable(name: "c", arg: 2, scope: !1413, file: !1306, line: 54, type: !11)
!1420 = !DILocation(line: 54, column: 45, scope: !1413)
!1421 = !DILocalVariable(name: "data", scope: !1413, file: !1306, line: 56, type: !1298, align: 1)
!1422 = !DILocation(line: 56, column: 10, scope: !1413)
!1423 = !DILocation(line: 57, column: 12, scope: !1413)
!1424 = !DILocation(line: 58, column: 13, scope: !1413)
!1425 = !DILocation(line: 58, column: 2, scope: !1413)
!1426 = distinct !DISubprogram(name: "init", linkageName: "std.io.Scanner.init", scope: !1427, file: !1427, line: 19, type: !1428, scopeLine: 19, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1427 = !DIFile(filename: "scanner.c3", directory: "/usr/local/lib/c3/std/io/stream")
!1428 = !DISubroutineType(types: !1429)
!1429 = !{null, !1430, !88, !203}
!1430 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Scanner*", baseType: !1431, size: 64, align: 64, dwarfAddressSpace: 0)
!1431 = !DICompositeType(tag: DW_TAG_structure_type, name: "Scanner", scope: !1427, file: !1427, line: 3, size: 384, align: 64, elements: !1432, identifier: "std.io.Scanner")
!1432 = !{!1433, !1434, !1435, !1436}
!1433 = !DIDerivedType(tag: DW_TAG_member, name: "wrapped_stream", scope: !1431, file: !1427, line: 5, baseType: !88, size: 128, align: 64)
!1434 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !1431, file: !1427, line: 6, baseType: !203, size: 128, align: 64, offset: 128)
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "pattern_idx", scope: !1431, file: !1427, line: 7, baseType: !207, size: 64, align: 64, offset: 256)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "read_idx", scope: !1431, file: !1427, line: 8, baseType: !207, size: 64, align: 64, offset: 320)
!1437 = !DILocation(line: 20, column: 1, scope: !1426)
!1438 = !DILocalVariable(name: "self", arg: 1, scope: !1426, file: !1427, line: 19, type: !1430)
!1439 = !DILocation(line: 19, column: 22, scope: !1426)
!1440 = !DILocalVariable(name: "stream", arg: 2, scope: !1426, file: !1427, line: 19, type: !88)
!1441 = !DILocation(line: 19, column: 38, scope: !1426)
!1442 = !DILocalVariable(name: "buffer", arg: 3, scope: !1426, file: !1427, line: 19, type: !203)
!1443 = !DILocation(line: 19, column: 53, scope: !1426)
!1444 = !DILocation(line: 17, column: 11, scope: !1445)
!1445 = distinct !DILexicalBlock(scope: !1426, file: !1427, line: 20, column: 1)
!1446 = !DILocation(line: 21, column: 3, scope: !1426)
!1447 = !DILocation(line: 21, column: 30, scope: !1426)
!1448 = !DILocation(line: 21, column: 45, scope: !1426)
!1449 = distinct !DISubprogram(name: "flush", linkageName: "std.io.Scanner.flush", scope: !1427, file: !1427, line: 28, type: !1450, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1450 = !DISubroutineType(types: !1451)
!1451 = !{!203, !1430}
!1452 = !DILocation(line: 29, column: 1, scope: !1449)
!1453 = !DILocalVariable(name: "self", arg: 1, scope: !1449, file: !1427, line: 28, type: !1430)
!1454 = !DILocation(line: 28, column: 25, scope: !1449)
!1455 = !DILocation(line: 30, column: 9, scope: !1449)
!1456 = !DILocation(line: 30, column: 26, scope: !1449)
!1457 = !DILocalVariable(name: "n", scope: !1449, file: !1427, line: 31, type: !207, align: 8)
!1458 = !DILocation(line: 31, column: 6, scope: !1449)
!1459 = !DILocation(line: 31, column: 10, scope: !1449)
!1460 = !DILocation(line: 31, column: 26, scope: !1449)
!1461 = !DILocalVariable(name: "buf", scope: !1449, file: !1427, line: 32, type: !203, align: 8)
!1462 = !DILocation(line: 32, column: 9, scope: !1449)
!1463 = !DILocation(line: 32, column: 15, scope: !1449)
!1464 = !DILocation(line: 32, column: 24, scope: !1449)
!1465 = !DILocation(line: 32, column: 41, scope: !1449)
!1466 = !DILocation(line: 33, column: 2, scope: !1449)
!1467 = !DILocation(line: 33, column: 21, scope: !1449)
!1468 = !DILocation(line: 34, column: 2, scope: !1449)
!1469 = !DILocation(line: 34, column: 18, scope: !1449)
!1470 = !DILocation(line: 35, column: 9, scope: !1449)
!1471 = distinct !DISubprogram(name: "close", linkageName: "std.io.Scanner.close", scope: !1427, file: !1427, line: 38, type: !1472, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1472 = !DISubroutineType(types: !1473)
!1473 = !{!115, !21, !1430}
!1474 = !DILocation(line: 39, column: 1, scope: !1471)
!1475 = !DILocalVariable(name: "self", arg: 1, scope: !1471, file: !1427, line: 38, type: !1430)
!1476 = !DILocation(line: 38, column: 24, scope: !1471)
!1477 = !DILocation(line: 40, column: 7, scope: !1471)
!1478 = !DILocation(line: 40, column: 41, scope: !1471)
!1479 = distinct !DISubprogram(name: "scan", linkageName: "std.io.Scanner.scan", scope: !1427, file: !1427, line: 48, type: !1480, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1480 = !DISubroutineType(types: !1481)
!1481 = !{!115, !1482, !1430, !466}
!1482 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "char[]*", baseType: !203, size: 64, align: 64, dwarfAddressSpace: 0)
!1483 = !DILocation(line: 49, column: 1, scope: !1479)
!1484 = !DILocalVariable(name: "self", arg: 1, scope: !1479, file: !1427, line: 48, type: !1430)
!1485 = !DILocation(line: 48, column: 25, scope: !1479)
!1486 = !DILocalVariable(name: "pattern", arg: 2, scope: !1479, file: !1427, line: 48, type: !466)
!1487 = !DILocation(line: 48, column: 39, scope: !1479)
!1488 = !DILocation(line: 45, column: 11, scope: !1489)
!1489 = distinct !DILexicalBlock(scope: !1479, file: !1427, line: 49, column: 1)
!1490 = !DILocation(line: 46, column: 11, scope: !1489)
!1491 = !DILocation(line: 46, column: 26, scope: !1489)
!1492 = !DILocation(line: 50, column: 6, scope: !1479)
!1493 = !DILocation(line: 53, column: 3, scope: !1494)
!1494 = distinct !DILexicalBlock(scope: !1479, file: !1427, line: 51, column: 2)
!1495 = !DILocation(line: 53, column: 31, scope: !1494)
!1496 = !DILocalVariable(name: "n", scope: !1497, file: !1427, line: 92, type: !208, align: 8)
!1497 = distinct !DISubprogram(name: "refill", linkageName: "refill", scope: !1427, file: !1427, line: 90, scopeLine: 90, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1498 = !DILocation(line: 92, column: 7, scope: !1497, inlinedAt: !1499)
!1499 = !DILocation(line: 53, column: 19, scope: !1494)
!1500 = !DILocation(line: 92, column: 11, scope: !1497, inlinedAt: !1499)
!1501 = !DILocation(line: 92, column: 36, scope: !1497, inlinedAt: !1499)
!1502 = !DILocalVariable(name: "err", scope: !1497, file: !1427, line: 93, type: !115, align: 8)
!1503 = !DILocation(line: 93, column: 12, scope: !1497, inlinedAt: !1499)
!1504 = !DILocation(line: 93, column: 18, scope: !1497, inlinedAt: !1499)
!1505 = !DILocation(line: 95, column: 8, scope: !1497, inlinedAt: !1499)
!1506 = !DILocation(line: 96, column: 11, scope: !1507, inlinedAt: !1499)
!1507 = distinct !DILexicalBlock(scope: !1497, file: !1427, line: 96, column: 4)
!1508 = !DILocation(line: 98, column: 11, scope: !1509, inlinedAt: !1499)
!1509 = distinct !DILexicalBlock(scope: !1497, file: !1427, line: 98, column: 4)
!1510 = !DILocation(line: 100, column: 9, scope: !1497, inlinedAt: !1499)
!1511 = !DILocation(line: 54, column: 3, scope: !1494)
!1512 = !DILocation(line: 54, column: 22, scope: !1494)
!1513 = !DILocation(line: 56, column: 9, scope: !1479)
!1514 = !DILocation(line: 56, column: 26, scope: !1479)
!1515 = !DILocalVariable(name: "n", scope: !1479, file: !1427, line: 57, type: !207, align: 8)
!1516 = !DILocation(line: 57, column: 6, scope: !1479)
!1517 = !DILocation(line: 57, column: 10, scope: !1479)
!1518 = !DILocation(line: 57, column: 26, scope: !1479)
!1519 = !DILocalVariable(name: "buf", scope: !1479, file: !1427, line: 58, type: !203, align: 8)
!1520 = !DILocation(line: 58, column: 9, scope: !1479)
!1521 = !DILocation(line: 58, column: 15, scope: !1479)
!1522 = !DILocation(line: 58, column: 24, scope: !1479)
!1523 = !DILocation(line: 58, column: 41, scope: !1479)
!1524 = !DILocalVariable(name: "i", scope: !1479, file: !1427, line: 59, type: !207, align: 8)
!1525 = !DILocation(line: 59, column: 10, scope: !1479)
!1526 = !DILocation(line: 87, column: 11, scope: !1527, inlinedAt: !1528)
!1527 = distinct !DISubprogram(name: "find", linkageName: "find", scope: !1427, file: !1427, line: 85, scopeLine: 85, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1528 = !DILocation(line: 59, column: 14, scope: !1479)
!1529 = !DILocation(line: 61, column: 3, scope: !1530)
!1530 = distinct !DILexicalBlock(scope: !1479, file: !1427, line: 60, column: 2)
!1531 = !DILocation(line: 61, column: 23, scope: !1530)
!1532 = !DILocation(line: 61, column: 27, scope: !1530)
!1533 = !DILocation(line: 62, column: 10, scope: !1530)
!1534 = !DILocation(line: 62, column: 14, scope: !1530)
!1535 = !DILocation(line: 62, column: 15, scope: !1530)
!1536 = !DILocation(line: 64, column: 6, scope: !1479)
!1537 = !DILocation(line: 64, column: 31, scope: !1479)
!1538 = !DILocation(line: 64, column: 47, scope: !1479)
!1539 = !DILocation(line: 68, column: 10, scope: !1540)
!1540 = distinct !DILexicalBlock(scope: !1479, file: !1427, line: 65, column: 2)
!1541 = !DILocation(line: 71, column: 17, scope: !1479)
!1542 = !DILocation(line: 71, column: 21, scope: !1479)
!1543 = !DILocation(line: 71, column: 2, scope: !1479)
!1544 = !DILocation(line: 71, column: 11, scope: !1479)
!1545 = !DILocation(line: 71, column: 12, scope: !1479)
!1546 = !DILocation(line: 72, column: 2, scope: !1479)
!1547 = !DILocation(line: 72, column: 21, scope: !1479)
!1548 = !DILocation(line: 74, column: 8, scope: !1479)
!1549 = !DILocation(line: 74, column: 17, scope: !1479)
!1550 = !DILocalVariable(name: "p", scope: !1479, file: !1427, line: 75, type: !207, align: 8)
!1551 = !DILocation(line: 75, column: 6, scope: !1479)
!1552 = !DILocalVariable(name: "n", scope: !1553, file: !1427, line: 92, type: !208, align: 8)
!1553 = distinct !DISubprogram(name: "refill", linkageName: "refill", scope: !1427, file: !1427, line: 90, scopeLine: 90, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1554 = !DILocation(line: 92, column: 7, scope: !1553, inlinedAt: !1555)
!1555 = !DILocation(line: 75, column: 10, scope: !1479)
!1556 = !DILocation(line: 92, column: 11, scope: !1553, inlinedAt: !1555)
!1557 = !DILocation(line: 92, column: 36, scope: !1553, inlinedAt: !1555)
!1558 = !DILocalVariable(name: "err", scope: !1553, file: !1427, line: 93, type: !115, align: 8)
!1559 = !DILocation(line: 93, column: 12, scope: !1553, inlinedAt: !1555)
!1560 = !DILocation(line: 93, column: 18, scope: !1553, inlinedAt: !1555)
!1561 = !DILocation(line: 95, column: 8, scope: !1553, inlinedAt: !1555)
!1562 = !DILocation(line: 96, column: 11, scope: !1563, inlinedAt: !1555)
!1563 = distinct !DILexicalBlock(scope: !1553, file: !1427, line: 96, column: 4)
!1564 = !DILocation(line: 98, column: 11, scope: !1565, inlinedAt: !1555)
!1565 = distinct !DILexicalBlock(scope: !1553, file: !1427, line: 98, column: 4)
!1566 = !DILocation(line: 100, column: 9, scope: !1553, inlinedAt: !1555)
!1567 = !DILocation(line: 76, column: 2, scope: !1479)
!1568 = !DILocation(line: 76, column: 18, scope: !1479)
!1569 = !DILocation(line: 76, column: 22, scope: !1479)
!1570 = !DILocation(line: 78, column: 8, scope: !1479)
!1571 = !DILocation(line: 78, column: 12, scope: !1479)
!1572 = !DILocation(line: 78, column: 13, scope: !1479)
!1573 = !DILocalVariable(name: "i", scope: !1479, file: !1427, line: 79, type: !207, align: 8)
!1574 = !DILocation(line: 79, column: 6, scope: !1479)
!1575 = !DILocation(line: 87, column: 11, scope: !1576, inlinedAt: !1577)
!1576 = distinct !DISubprogram(name: "find", linkageName: "find", scope: !1427, file: !1427, line: 85, scopeLine: 85, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1577 = !DILocation(line: 79, column: 10, scope: !1479)
!1578 = !DILocation(line: 80, column: 2, scope: !1479)
!1579 = !DILocation(line: 80, column: 21, scope: !1479)
!1580 = !DILocation(line: 80, column: 25, scope: !1479)
!1581 = !DILocation(line: 80, column: 29, scope: !1479)
!1582 = !DILocation(line: 82, column: 9, scope: !1479)
!1583 = !DILocation(line: 82, column: 18, scope: !1479)
!1584 = !DILocation(line: 82, column: 19, scope: !1479)
!1585 = !DILocation(line: 82, column: 23, scope: !1479)
!1586 = distinct !DISubprogram(name: "read", linkageName: "std.io.Scanner.read", scope: !1427, file: !1427, line: 103, type: !1587, scopeLine: 103, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1587 = !DISubroutineType(types: !1588)
!1588 = !{!115, !308, !1430, !203}
!1589 = !DILocation(line: 104, column: 1, scope: !1586)
!1590 = !DILocalVariable(name: "self", arg: 1, scope: !1586, file: !1427, line: 103, type: !1430)
!1591 = !DILocation(line: 103, column: 22, scope: !1586)
!1592 = !DILocalVariable(name: "bytes", arg: 2, scope: !1586, file: !1427, line: 103, type: !203)
!1593 = !DILocation(line: 103, column: 36, scope: !1586)
!1594 = !DILocalVariable(name: "n", scope: !1586, file: !1427, line: 105, type: !207, align: 8)
!1595 = !DILocation(line: 105, column: 6, scope: !1586)
!1596 = !DILocation(line: 106, column: 6, scope: !1586)
!1597 = !DILocation(line: 106, column: 25, scope: !1586)
!1598 = !DILocation(line: 108, column: 11, scope: !1599)
!1599 = distinct !DILexicalBlock(scope: !1586, file: !1427, line: 107, column: 2)
!1600 = !DILocation(line: 108, column: 22, scope: !1599)
!1601 = !DILocation(line: 108, column: 38, scope: !1599)
!1602 = !DILocation(line: 17, column: 10, scope: !1603, inlinedAt: !1604)
!1603 = distinct !DISubprogram(name: "less", linkageName: "less", scope: !324, file: !324, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1604 = !DILocation(line: 100, column: 10, scope: !1605, inlinedAt: !1606)
!1605 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !324, file: !324, line: 97, scopeLine: 97, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1606 = !DILocation(line: 108, column: 7, scope: !1599)
!1607 = !DILocation(line: 17, column: 14, scope: !1603, inlinedAt: !1604)
!1608 = !DILocation(line: 100, column: 31, scope: !1605, inlinedAt: !1606)
!1609 = !DILocation(line: 100, column: 35, scope: !1605, inlinedAt: !1606)
!1610 = !DILocation(line: 109, column: 15, scope: !1599)
!1611 = !DILocation(line: 109, column: 24, scope: !1599)
!1612 = !DILocation(line: 109, column: 41, scope: !1599)
!1613 = !DILocation(line: 109, column: 3, scope: !1599)
!1614 = !DILocation(line: 109, column: 9, scope: !1599)
!1615 = !DILocation(line: 109, column: 10, scope: !1599)
!1616 = !DILocation(line: 110, column: 3, scope: !1599)
!1617 = !DILocation(line: 110, column: 23, scope: !1599)
!1618 = !DILocation(line: 111, column: 11, scope: !1599)
!1619 = !DILocation(line: 111, column: 17, scope: !1599)
!1620 = !DILocation(line: 113, column: 2, scope: !1586)
!1621 = !DILocation(line: 113, column: 7, scope: !1586)
!1622 = !DILocation(line: 113, column: 32, scope: !1586)
!1623 = !DILocation(line: 114, column: 9, scope: !1586)
!1624 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.Scanner.read_byte", scope: !1427, file: !1427, line: 117, type: !1625, scopeLine: 117, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1625 = !DISubroutineType(types: !1626)
!1626 = !{!115, !117, !1430}
!1627 = !DILocation(line: 118, column: 1, scope: !1624)
!1628 = !DILocalVariable(name: "self", arg: 1, scope: !1624, file: !1427, line: 117, type: !1430)
!1629 = !DILocation(line: 117, column: 28, scope: !1624)
!1630 = !DILocation(line: 119, column: 6, scope: !1624)
!1631 = !DILocation(line: 119, column: 25, scope: !1624)
!1632 = !DILocation(line: 121, column: 10, scope: !1633)
!1633 = distinct !DILexicalBlock(scope: !1624, file: !1427, line: 120, column: 2)
!1634 = !DILocation(line: 121, column: 19, scope: !1633)
!1635 = !DILocation(line: 123, column: 9, scope: !1624)
!1636 = distinct !DISubprogram(name: "new_init", linkageName: "std.io.MultiReader.new_init", scope: !1637, file: !1637, line: 21, type: !1638, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1637 = !DIFile(filename: "multireader.c3", directory: "/usr/local/lib/c3/std/io/stream")
!1638 = !DISubroutineType(types: !1639)
!1639 = !{!1640, !1640, !1644, !675}
!1640 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "MultiReader*", baseType: !1641, size: 64, align: 64, dwarfAddressSpace: 0)
!1641 = !DICompositeType(tag: DW_TAG_structure_type, name: "MultiReader", scope: !1637, file: !1637, line: 7, size: 320, align: 64, elements: !1642, identifier: "std.io.MultiReader")
!1642 = !{!1643, !1649, !1650}
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "readers", scope: !1641, file: !1637, line: 9, baseType: !1644, size: 128, align: 64)
!1644 = !DICompositeType(tag: DW_TAG_structure_type, name: "InStream[]", size: 128, align: 64, elements: !1645, identifier: "InStream[]")
!1645 = !{!1646, !1648}
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !1644, baseType: !1647, size: 64, align: 64)
!1647 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "InStream*", baseType: !88, size: 64, align: 64, dwarfAddressSpace: 0)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1644, baseType: !207, size: 64, align: 64, offset: 64)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1641, file: !1637, line: 10, baseType: !207, size: 64, align: 64, offset: 128)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !1641, file: !1637, line: 11, baseType: !675, size: 128, align: 64, offset: 192)
!1651 = !DILocation(line: 22, column: 1, scope: !1636)
!1652 = !DILocalVariable(name: "self", arg: 1, scope: !1636, file: !1637, line: 21, type: !1640)
!1653 = !DILocation(line: 21, column: 38, scope: !1636)
!1654 = !DILocalVariable(name: "readers", arg: 2, scope: !1636, file: !1637, line: 21, type: !1644)
!1655 = !DILocation(line: 21, column: 57, scope: !1636)
!1656 = !DILocalVariable(name: "allocator", arg: 3, scope: !1636, file: !1637, line: 21, type: !675)
!1657 = !DILocation(line: 21, column: 76, scope: !1636)
!1658 = !DILocation(line: 18, column: 11, scope: !1659)
!1659 = distinct !DILexicalBlock(scope: !1636, file: !1637, line: 22, column: 1)
!1660 = !DILocalVariable(name: "copy", scope: !1636, file: !1637, line: 23, type: !1644, align: 8)
!1661 = !DILocation(line: 23, column: 13, scope: !1636)
!1662 = !DILocation(line: 23, column: 62, scope: !1636)
!1663 = !DILocation(line: 252, column: 55, scope: !1664, inlinedAt: !1665)
!1664 = distinct !DISubprogram(name: "new_array_try", linkageName: "new_array_try", scope: !702, file: !702, line: 250, scopeLine: 250, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1665 = !DILocation(line: 244, column: 9, scope: !1666, inlinedAt: !1667)
!1666 = distinct !DISubprogram(name: "new_array", linkageName: "new_array", scope: !702, file: !702, line: 242, scopeLine: 242, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1667 = !DILocation(line: 23, column: 20, scope: !1636)
!1668 = !DILocation(line: 252, column: 40, scope: !1664, inlinedAt: !1665)
!1669 = !DILocation(line: 79, column: 6, scope: !1670, inlinedAt: !1671)
!1670 = distinct !DISubprogram(name: "calloc_try", linkageName: "calloc_try", scope: !702, file: !702, line: 77, scopeLine: 77, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1671 = !DILocation(line: 252, column: 18, scope: !1664, inlinedAt: !1665)
!1672 = !DILocation(line: 79, column: 20, scope: !1670, inlinedAt: !1671)
!1673 = !DILocation(line: 28, column: 71, scope: !1674, inlinedAt: !1675)
!1674 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !702, file: !702, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1675 = !DILocation(line: 80, column: 9, scope: !1670, inlinedAt: !1671)
!1676 = !DILocation(line: 252, column: 67, scope: !1664, inlinedAt: !1665)
!1677 = !DILocation(line: 24, column: 13, scope: !1636)
!1678 = !DILocation(line: 24, column: 21, scope: !1636)
!1679 = !DILocation(line: 24, column: 2, scope: !1636)
!1680 = !DILocation(line: 24, column: 7, scope: !1636)
!1681 = !DILocation(line: 25, column: 3, scope: !1636)
!1682 = !DILocation(line: 25, column: 23, scope: !1636)
!1683 = !DILocation(line: 25, column: 42, scope: !1636)
!1684 = !DILocation(line: 26, column: 9, scope: !1636)
!1685 = !DILocation(line: 19, column: 10, scope: !1636)
!1686 = distinct !DISubprogram(name: "temp_init", linkageName: "std.io.MultiReader.temp_init", scope: !1637, file: !1637, line: 34, type: !1687, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1687 = !DISubroutineType(types: !1688)
!1688 = !{!1640, !1640, !1644}
!1689 = !DILocation(line: 35, column: 1, scope: !1686)
!1690 = !DILocalVariable(name: "self", arg: 1, scope: !1686, file: !1637, line: 34, type: !1640)
!1691 = !DILocation(line: 34, column: 39, scope: !1686)
!1692 = !DILocalVariable(name: "readers", arg: 2, scope: !1686, file: !1637, line: 34, type: !1644)
!1693 = !DILocation(line: 34, column: 58, scope: !1686)
!1694 = !DILocation(line: 31, column: 11, scope: !1695)
!1695 = distinct !DILexicalBlock(scope: !1686, file: !1637, line: 35, column: 1)
!1696 = !DILocation(line: 396, column: 6, scope: !1697, inlinedAt: !1698)
!1697 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !702, file: !702, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1698 = !DILocation(line: 36, column: 46, scope: !1686)
!1699 = !DILocation(line: 398, column: 3, scope: !1700, inlinedAt: !1698)
!1700 = distinct !DILexicalBlock(scope: !1697, file: !702, line: 397, column: 2)
!1701 = !DILocation(line: 400, column: 9, scope: !1697, inlinedAt: !1698)
!1702 = !DILocation(line: 36, column: 9, scope: !1686)
!1703 = !DILocation(line: 32, column: 10, scope: !1686)
!1704 = distinct !DISubprogram(name: "free", linkageName: "std.io.MultiReader.free", scope: !1637, file: !1637, line: 39, type: !1705, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1705 = !DISubroutineType(types: !1706)
!1706 = !{null, !1640}
!1707 = !DILocation(line: 40, column: 1, scope: !1704)
!1708 = !DILocalVariable(name: "self", arg: 1, scope: !1704, file: !1637, line: 39, type: !1640)
!1709 = !DILocation(line: 39, column: 26, scope: !1704)
!1710 = !DILocation(line: 41, column: 7, scope: !1704)
!1711 = !DILocation(line: 41, column: 29, scope: !1704)
!1712 = !DILocation(line: 42, column: 18, scope: !1704)
!1713 = !DILocation(line: 42, column: 34, scope: !1704)
!1714 = !DILocation(line: 101, column: 6, scope: !1715, inlinedAt: !1716)
!1715 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !702, file: !702, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1716 = !DILocation(line: 42, column: 2, scope: !1704)
!1717 = !DILocation(line: 101, column: 18, scope: !1715, inlinedAt: !1716)
!1718 = !DILocation(line: 105, column: 25, scope: !1715, inlinedAt: !1716)
!1719 = !DILocation(line: 105, column: 2, scope: !1715, inlinedAt: !1716)
!1720 = !DILocation(line: 43, column: 3, scope: !1704)
!1721 = distinct !DISubprogram(name: "read", linkageName: "std.io.MultiReader.read", scope: !1637, file: !1637, line: 46, type: !1722, scopeLine: 46, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1722 = !DISubroutineType(types: !1723)
!1723 = !{!115, !308, !1640, !203}
!1724 = !DILocation(line: 47, column: 1, scope: !1721)
!1725 = !DILocalVariable(name: "self", arg: 1, scope: !1721, file: !1637, line: 46, type: !1640)
!1726 = !DILocation(line: 46, column: 26, scope: !1721)
!1727 = !DILocalVariable(name: "bytes", arg: 2, scope: !1721, file: !1637, line: 46, type: !203)
!1728 = !DILocation(line: 46, column: 40, scope: !1721)
!1729 = !DILocalVariable(name: "r", scope: !1721, file: !1637, line: 48, type: !88, align: 8)
!1730 = !DILocation(line: 48, column: 11, scope: !1721)
!1731 = !DILocation(line: 48, column: 15, scope: !1721)
!1732 = !DILocation(line: 48, column: 28, scope: !1721)
!1733 = !DILocalVariable(name: "n", scope: !1721, file: !1637, line: 49, type: !208, align: 8)
!1734 = !DILocation(line: 49, column: 7, scope: !1721)
!1735 = !DILocation(line: 49, column: 18, scope: !1721)
!1736 = !DILocation(line: 49, column: 11, scope: !1721)
!1737 = !DILocalVariable(name: "err", scope: !1721, file: !1637, line: 50, type: !115, align: 8)
!1738 = !DILocation(line: 50, column: 12, scope: !1721)
!1739 = !DILocation(line: 50, column: 18, scope: !1721)
!1740 = !DILocation(line: 52, column: 8, scope: !1721)
!1741 = !DILocation(line: 53, column: 4, scope: !1742)
!1742 = distinct !DILexicalBlock(scope: !1721, file: !1637, line: 53, column: 4)
!1743 = !DILocation(line: 54, column: 8, scope: !1742)
!1744 = !DILocation(line: 54, column: 22, scope: !1742)
!1745 = !DILocation(line: 56, column: 12, scope: !1746)
!1746 = distinct !DILexicalBlock(scope: !1742, file: !1637, line: 55, column: 4)
!1747 = !DILocation(line: 58, column: 11, scope: !1742)
!1748 = !DILocation(line: 60, column: 11, scope: !1749)
!1749 = distinct !DILexicalBlock(scope: !1721, file: !1637, line: 60, column: 4)
!1750 = !DILocation(line: 62, column: 9, scope: !1721)
!1751 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.MultiReader.read_byte", scope: !1637, file: !1637, line: 65, type: !1752, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1752 = !DISubroutineType(types: !1753)
!1753 = !{!115, !117, !1640}
!1754 = !DILocation(line: 66, column: 1, scope: !1751)
!1755 = !DILocalVariable(name: "self", arg: 1, scope: !1751, file: !1637, line: 65, type: !1640)
!1756 = !DILocation(line: 65, column: 32, scope: !1751)
!1757 = !DILocalVariable(name: "data", scope: !1751, file: !1637, line: 67, type: !1298, align: 1)
!1758 = !DILocation(line: 67, column: 10, scope: !1751)
!1759 = !DILocation(line: 68, column: 12, scope: !1751)
!1760 = !DILocation(line: 68, column: 2, scope: !1751)
!1761 = !DILocation(line: 69, column: 14, scope: !1751)
!1762 = distinct !DISubprogram(name: "init", linkageName: "std.io.LimitReader.init", scope: !1763, file: !1763, line: 13, type: !1764, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1763 = !DIFile(filename: "limitreader.c3", directory: "/usr/local/lib/c3/std/io/stream")
!1764 = !DISubroutineType(types: !1765)
!1765 = !{!1766, !1766, !88, !208}
!1766 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "LimitReader*", baseType: !1767, size: 64, align: 64, dwarfAddressSpace: 0)
!1767 = !DICompositeType(tag: DW_TAG_structure_type, name: "LimitReader", scope: !1763, file: !1763, line: 3, size: 192, align: 64, elements: !1768, identifier: "std.io.LimitReader")
!1768 = !{!1769, !1770}
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "wrapped_stream", scope: !1767, file: !1763, line: 5, baseType: !88, size: 128, align: 64)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1767, file: !1763, line: 6, baseType: !207, size: 64, align: 64, offset: 128)
!1771 = !DILocation(line: 14, column: 1, scope: !1762)
!1772 = !DILocalVariable(name: "self", arg: 1, scope: !1762, file: !1763, line: 13, type: !1766)
!1773 = !DILocation(line: 13, column: 34, scope: !1762)
!1774 = !DILocalVariable(name: "wrapped_stream", arg: 2, scope: !1762, file: !1763, line: 13, type: !88)
!1775 = !DILocation(line: 13, column: 50, scope: !1762)
!1776 = !DILocalVariable(name: "limit", arg: 3, scope: !1762, file: !1763, line: 13, type: !207)
!1777 = !DILocation(line: 13, column: 70, scope: !1762)
!1778 = !DILocation(line: 15, column: 3, scope: !1762)
!1779 = !DILocation(line: 15, column: 30, scope: !1762)
!1780 = !DILocation(line: 15, column: 55, scope: !1762)
!1781 = !DILocation(line: 16, column: 9, scope: !1762)
!1782 = distinct !DISubprogram(name: "close", linkageName: "std.io.LimitReader.close", scope: !1763, file: !1763, line: 19, type: !1783, scopeLine: 19, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1783 = !DISubroutineType(types: !1784)
!1784 = !{!115, !21, !1766}
!1785 = !DILocation(line: 20, column: 1, scope: !1782)
!1786 = !DILocalVariable(name: "self", arg: 1, scope: !1782, file: !1763, line: 19, type: !1766)
!1787 = !DILocation(line: 19, column: 28, scope: !1782)
!1788 = !DILocation(line: 21, column: 7, scope: !1782)
!1789 = !DILocation(line: 21, column: 41, scope: !1782)
!1790 = distinct !DISubprogram(name: "read", linkageName: "std.io.LimitReader.read", scope: !1763, file: !1763, line: 25, type: !1791, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1791 = !DISubroutineType(types: !1792)
!1792 = !{!115, !308, !1766, !203}
!1793 = !DILocation(line: 26, column: 1, scope: !1790)
!1794 = !DILocalVariable(name: "self", arg: 1, scope: !1790, file: !1763, line: 25, type: !1766)
!1795 = !DILocation(line: 25, column: 26, scope: !1790)
!1796 = !DILocalVariable(name: "bytes", arg: 2, scope: !1790, file: !1763, line: 25, type: !203)
!1797 = !DILocation(line: 25, column: 40, scope: !1790)
!1798 = !DILocation(line: 27, column: 6, scope: !1790)
!1799 = !DILocation(line: 27, column: 30, scope: !1790)
!1800 = !DILocalVariable(name: "m", scope: !1790, file: !1763, line: 28, type: !207, align: 8)
!1801 = !DILocation(line: 28, column: 6, scope: !1790)
!1802 = !DILocation(line: 28, column: 14, scope: !1790)
!1803 = !DILocation(line: 28, column: 25, scope: !1790)
!1804 = !DILocation(line: 17, column: 10, scope: !1805, inlinedAt: !1806)
!1805 = distinct !DISubprogram(name: "less", linkageName: "less", scope: !324, file: !324, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1806 = !DILocation(line: 100, column: 10, scope: !1807, inlinedAt: !1808)
!1807 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !324, file: !324, line: 97, scopeLine: 97, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1808 = !DILocation(line: 28, column: 10, scope: !1790)
!1809 = !DILocation(line: 17, column: 14, scope: !1805, inlinedAt: !1806)
!1810 = !DILocation(line: 100, column: 31, scope: !1807, inlinedAt: !1808)
!1811 = !DILocation(line: 100, column: 35, scope: !1807, inlinedAt: !1808)
!1812 = !DILocalVariable(name: "n", scope: !1790, file: !1763, line: 29, type: !207, align: 8)
!1813 = !DILocation(line: 29, column: 6, scope: !1790)
!1814 = !DILocation(line: 29, column: 10, scope: !1790)
!1815 = !DILocation(line: 29, column: 35, scope: !1790)
!1816 = !DILocation(line: 29, column: 41, scope: !1790)
!1817 = !DILocation(line: 29, column: 42, scope: !1790)
!1818 = !DILocation(line: 30, column: 2, scope: !1790)
!1819 = !DILocation(line: 30, column: 16, scope: !1790)
!1820 = !DILocation(line: 31, column: 9, scope: !1790)
!1821 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.LimitReader.read_byte", scope: !1763, file: !1763, line: 34, type: !1822, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1822 = !DISubroutineType(types: !1823)
!1823 = !{!115, !117, !1766}
!1824 = !DILocation(line: 35, column: 1, scope: !1821)
!1825 = !DILocalVariable(name: "self", arg: 1, scope: !1821, file: !1763, line: 34, type: !1766)
!1826 = !DILocation(line: 34, column: 32, scope: !1821)
!1827 = !DILocation(line: 36, column: 6, scope: !1821)
!1828 = !DILocation(line: 36, column: 30, scope: !1821)
!1829 = !DILocation(line: 38, column: 9, scope: !1821)
!1830 = !DILocation(line: 37, column: 12, scope: !1831)
!1831 = distinct !DILexicalBlock(scope: !1821, file: !1763, line: 37, column: 12)
!1832 = distinct !DISubprogram(name: "available", linkageName: "std.io.LimitReader.available", scope: !1763, file: !1763, line: 41, type: !1833, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1833 = !DISubroutineType(types: !1834)
!1834 = !{!115, !308, !1766}
!1835 = !DILocation(line: 42, column: 1, scope: !1832)
!1836 = !DILocalVariable(name: "self", arg: 1, scope: !1832, file: !1763, line: 41, type: !1766)
!1837 = !DILocation(line: 41, column: 31, scope: !1832)
!1838 = !DILocation(line: 43, column: 9, scope: !1832)
!1839 = distinct !DISubprogram(name: "to_format", linkageName: "std.core.ReflectedParam.to_format", scope: !6, file: !6, line: 61, type: !1840, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1840 = !DISubroutineType(types: !1841)
!1841 = !{!115, !308, !1842, !1847}
!1842 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ReflectedParam*", baseType: !1843, size: 64, align: 64, dwarfAddressSpace: 0)
!1843 = !DICompositeType(tag: DW_TAG_structure_type, name: "ReflectedParam", scope: !6, file: !6, line: 1, size: 192, align: 64, elements: !1844, identifier: "ReflectedParam")
!1844 = !{!1845, !1846}
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1843, file: !6, baseType: !466, size: 128, align: 64)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1843, file: !6, baseType: !92, size: 64, align: 64, offset: 128)
!1847 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Formatter*", baseType: !1848, size: 64, align: 64, dwarfAddressSpace: 0)
!1848 = !DICompositeType(tag: DW_TAG_structure_type, name: "Formatter", scope: !6, file: !6, line: 71, size: 384, align: 64, elements: !1849, identifier: "std.io.Formatter")
!1849 = !{!1850, !1851, !1856}
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1848, file: !6, line: 73, baseType: !21, size: 64, align: 64)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "out_fn", scope: !1848, file: !6, line: 74, baseType: !1852, size: 64, align: 64, offset: 64)
!1852 = !DIDerivedType(tag: DW_TAG_typedef, name: "OutputFn", scope: !6, file: !6, line: 23, baseType: !1853, align: 8)
!1853 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "OutputFn", baseType: !1854, size: 64, align: 64, dwarfAddressSpace: 0)
!1854 = !DISubroutineType(types: !1855)
!1855 = !{!115, !21, !21, !11}
!1856 = !DIDerivedType(tag: DW_TAG_member, scope: !1848, file: !6, line: 75, baseType: !1857, size: 256, align: 64, offset: 128)
!1857 = !DICompositeType(tag: DW_TAG_structure_type, name: "$anon", scope: !1848, file: !6, line: 75, size: 256, align: 64, elements: !1858)
!1858 = !{!1859, !1860, !1861, !1862, !1863}
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1857, file: !6, line: 77, baseType: !94, size: 32, align: 32)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !1857, file: !6, line: 78, baseType: !94, size: 32, align: 32, offset: 32)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "prec", scope: !1857, file: !6, line: 79, baseType: !94, size: 32, align: 32, offset: 64)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "idx", scope: !1857, file: !6, line: 80, baseType: !207, size: 64, align: 64, offset: 128)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "first_fault", scope: !1857, file: !6, line: 81, baseType: !115, size: 64, align: 64, offset: 192)
!1864 = !DILocation(line: 62, column: 1, scope: !1839)
!1865 = !DILocalVariable(name: "self", arg: 1, scope: !1839, file: !6, line: 61, type: !1842)
!1866 = !DILocation(line: 61, column: 34, scope: !1839)
!1867 = !DILocalVariable(name: "f", arg: 2, scope: !1839, file: !6, line: 61, type: !1847)
!1868 = !DILocation(line: 61, column: 52, scope: !1839)
!1869 = !DILocation(line: 63, column: 38, scope: !1839)
!1870 = !DILocation(line: 63, column: 9, scope: !1839)
!1871 = distinct !DISubprogram(name: "printf", linkageName: "std.io.Formatter.printf", scope: !6, file: !6, line: 66, type: !1872, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1872 = !DISubroutineType(types: !1873)
!1873 = !{!115, !308, !1847, !466, !1874}
!1874 = !DICompositeType(tag: DW_TAG_structure_type, name: "any[]", size: 128, align: 64, elements: !1875, identifier: "any[]")
!1875 = !{!1876, !1882}
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !1874, baseType: !1877, size: 64, align: 64)
!1877 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "any*", baseType: !1878, size: 64, align: 64, dwarfAddressSpace: 0)
!1878 = !DICompositeType(tag: DW_TAG_structure_type, name: "any", size: 128, align: 64, elements: !1879, identifier: "any")
!1879 = !{!1880, !1881}
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !1878, baseType: !21, size: 64, align: 64)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1878, baseType: !92, size: 64, align: 64, offset: 64)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1874, baseType: !207, size: 64, align: 64, offset: 64)
!1883 = !DILocation(line: 67, column: 1, scope: !1871)
!1884 = !DILocalVariable(name: "self", arg: 1, scope: !1871, file: !6, line: 66, type: !1847)
!1885 = !DILocation(line: 66, column: 26, scope: !1871)
!1886 = !DILocalVariable(name: "format", arg: 2, scope: !1871, file: !6, line: 66, type: !466)
!1887 = !DILocation(line: 66, column: 40, scope: !1871)
!1888 = !DILocalVariable(name: "args", arg: 3, scope: !1871, file: !6, line: 66, type: !1874)
!1889 = !DILocation(line: 66, column: 48, scope: !1871)
!1890 = !DILocation(line: 68, column: 9, scope: !1871)
!1891 = distinct !DISubprogram(name: "init", linkageName: "std.io.Formatter.init", scope: !6, file: !6, line: 96, type: !1892, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1892 = !DISubroutineType(types: !1893)
!1893 = !{null, !1847, !1853, !21}
!1894 = !DILocation(line: 97, column: 1, scope: !1891)
!1895 = !DILocalVariable(name: "self", arg: 1, scope: !1891, file: !6, line: 96, type: !1847)
!1896 = !DILocation(line: 96, column: 24, scope: !1891)
!1897 = !DILocalVariable(name: "out_fn", arg: 2, scope: !1891, file: !6, line: 96, type: !1852)
!1898 = !DILocation(line: 96, column: 40, scope: !1891)
!1899 = !DILocalVariable(name: "data", arg: 3, scope: !1891, file: !6, line: 96, type: !21)
!1900 = !DILocation(line: 96, column: 54, scope: !1891)
!1901 = !DILocation(line: 98, column: 3, scope: !1891)
!1902 = !DILocation(line: 98, column: 20, scope: !1891)
!1903 = !DILocation(line: 98, column: 36, scope: !1891)
!1904 = distinct !DISubprogram(name: "out", linkageName: "std.io.Formatter.out", scope: !6, file: !6, line: 101, type: !1905, scopeLine: 101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1905 = !DISubroutineType(types: !1906)
!1906 = !{!115, !308, !1847, !11}
!1907 = !DILocation(line: 102, column: 1, scope: !1904)
!1908 = !DILocalVariable(name: "self", arg: 1, scope: !1904, file: !6, line: 101, type: !1847)
!1909 = !DILocation(line: 101, column: 23, scope: !1904)
!1910 = !DILocalVariable(name: "c", arg: 2, scope: !1904, file: !6, line: 101, type: !11)
!1911 = !DILocation(line: 101, column: 35, scope: !1904)
!1912 = !DILocalVariable(name: "err", scope: !1904, file: !6, line: 103, type: !115, align: 8)
!1913 = !DILocation(line: 103, column: 12, scope: !1904)
!1914 = !DILocation(line: 103, column: 18, scope: !1904)
!1915 = !DILocation(line: 103, column: 30, scope: !1904)
!1916 = !DILocation(line: 103, column: 41, scope: !1904)
!1917 = !DILocation(line: 105, column: 7, scope: !1918)
!1918 = distinct !DILexicalBlock(scope: !1904, file: !6, line: 104, column: 2)
!1919 = !DILocation(line: 105, column: 32, scope: !1918)
!1920 = !DILocation(line: 106, column: 3, scope: !1918)
!1921 = !DILocation(line: 106, column: 22, scope: !1918)
!1922 = !DILocation(line: 107, column: 10, scope: !1918)
!1923 = !DILocation(line: 109, column: 9, scope: !1904)
!1924 = distinct !DISubprogram(name: "print_with_function", linkageName: "std.io.Formatter.print_with_function", scope: !6, file: !6, line: 112, type: !1925, scopeLine: 112, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1925 = !DISubroutineType(types: !1926)
!1926 = !{!115, !308, !1847, !1927}
!1927 = !DICompositeType(tag: DW_TAG_structure_type, name: "Printable", size: 128, align: 64, elements: !1928, identifier: "Printable")
!1928 = !{!1929, !1930}
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !1927, baseType: !21, size: 64, align: 64)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1927, baseType: !92, size: 64, align: 64, offset: 64)
!1931 = !DILocation(line: 113, column: 1, scope: !1924)
!1932 = !DILocalVariable(name: "self", arg: 1, scope: !1924, file: !6, line: 112, type: !1847)
!1933 = !DILocation(line: 112, column: 39, scope: !1924)
!1934 = !DILocalVariable(name: "arg", arg: 2, scope: !1924, file: !6, line: 112, type: !1927)
!1935 = !DILocation(line: 112, column: 56, scope: !1924)
!1936 = !DILocation(line: 114, column: 7, scope: !1924)
!1937 = !DILocalVariable(name: "old", scope: !1938, file: !6, line: 116, type: !94, align: 4)
!1938 = distinct !DILexicalBlock(scope: !1924, file: !6, line: 115, column: 2)
!1939 = !DILocation(line: 116, column: 14, scope: !1938)
!1940 = !DILocation(line: 116, column: 20, scope: !1938)
!1941 = !DILocalVariable(name: "old_width", scope: !1938, file: !6, line: 117, type: !94, align: 4)
!1942 = !DILocation(line: 117, column: 8, scope: !1938)
!1943 = !DILocation(line: 117, column: 20, scope: !1938)
!1944 = !DILocalVariable(name: "old_prec", scope: !1938, file: !6, line: 118, type: !94, align: 4)
!1945 = !DILocation(line: 118, column: 8, scope: !1938)
!1946 = !DILocation(line: 118, column: 19, scope: !1938)
!1947 = !DILocation(line: 125, column: 7, scope: !1938)
!1948 = !DILocation(line: 125, column: 20, scope: !1938)
!1949 = !DILocation(line: 121, column: 4, scope: !1950)
!1950 = distinct !DILexicalBlock(scope: !1938, file: !6, line: 120, column: 3)
!1951 = !DILocation(line: 121, column: 17, scope: !1950)
!1952 = !DILocation(line: 122, column: 4, scope: !1950)
!1953 = !DILocation(line: 122, column: 17, scope: !1950)
!1954 = !DILocation(line: 123, column: 4, scope: !1950)
!1955 = !DILocation(line: 123, column: 16, scope: !1950)
!1956 = !DILocation(line: 121, column: 4, scope: !1957)
!1957 = distinct !DILexicalBlock(scope: !1938, file: !6, line: 120, column: 3)
!1958 = !DILocation(line: 121, column: 17, scope: !1957)
!1959 = !DILocation(line: 122, column: 4, scope: !1957)
!1960 = !DILocation(line: 122, column: 17, scope: !1957)
!1961 = !DILocation(line: 123, column: 4, scope: !1957)
!1962 = !DILocation(line: 123, column: 16, scope: !1957)
!1963 = !DILocation(line: 126, column: 24, scope: !1938)
!1964 = !DILocation(line: 126, column: 10, scope: !1938)
!1965 = !DILocation(line: 121, column: 4, scope: !1966)
!1966 = distinct !DILexicalBlock(scope: !1938, file: !6, line: 120, column: 3)
!1967 = !DILocation(line: 121, column: 17, scope: !1966)
!1968 = !DILocation(line: 122, column: 4, scope: !1966)
!1969 = !DILocation(line: 122, column: 17, scope: !1966)
!1970 = !DILocation(line: 123, column: 4, scope: !1966)
!1971 = !DILocation(line: 123, column: 16, scope: !1966)
!1972 = !DILocation(line: 121, column: 4, scope: !1973)
!1973 = distinct !DILexicalBlock(scope: !1938, file: !6, line: 120, column: 3)
!1974 = !DILocation(line: 121, column: 17, scope: !1973)
!1975 = !DILocation(line: 122, column: 4, scope: !1973)
!1976 = !DILocation(line: 122, column: 17, scope: !1973)
!1977 = !DILocation(line: 123, column: 4, scope: !1973)
!1978 = !DILocation(line: 123, column: 16, scope: !1973)
!1979 = !DILocation(line: 128, column: 7, scope: !1924)
!1980 = !DILocalVariable(name: "old", scope: !1981, file: !6, line: 130, type: !94, align: 4)
!1981 = distinct !DILexicalBlock(scope: !1924, file: !6, line: 129, column: 2)
!1982 = !DILocation(line: 130, column: 14, scope: !1981)
!1983 = !DILocation(line: 130, column: 20, scope: !1981)
!1984 = !DILocalVariable(name: "old_width", scope: !1981, file: !6, line: 131, type: !94, align: 4)
!1985 = !DILocation(line: 131, column: 8, scope: !1981)
!1986 = !DILocation(line: 131, column: 20, scope: !1981)
!1987 = !DILocalVariable(name: "old_prec", scope: !1981, file: !6, line: 132, type: !94, align: 4)
!1988 = !DILocation(line: 132, column: 8, scope: !1981)
!1989 = !DILocation(line: 132, column: 19, scope: !1981)
!1990 = !DILocation(line: 139, column: 7, scope: !1981)
!1991 = !DILocation(line: 139, column: 20, scope: !1981)
!1992 = !DILocation(line: 135, column: 4, scope: !1993)
!1993 = distinct !DILexicalBlock(scope: !1981, file: !6, line: 134, column: 3)
!1994 = !DILocation(line: 135, column: 17, scope: !1993)
!1995 = !DILocation(line: 136, column: 4, scope: !1993)
!1996 = !DILocation(line: 136, column: 17, scope: !1993)
!1997 = !DILocation(line: 137, column: 4, scope: !1993)
!1998 = !DILocation(line: 137, column: 16, scope: !1993)
!1999 = !DILocation(line: 135, column: 4, scope: !2000)
!2000 = distinct !DILexicalBlock(scope: !1981, file: !6, line: 134, column: 3)
!2001 = !DILocation(line: 135, column: 17, scope: !2000)
!2002 = !DILocation(line: 136, column: 4, scope: !2000)
!2003 = !DILocation(line: 136, column: 17, scope: !2000)
!2004 = !DILocation(line: 137, column: 4, scope: !2000)
!2005 = !DILocation(line: 137, column: 16, scope: !2000)
!2006 = !DILocalVariable(name: "buffer", scope: !2007, file: !6, line: 537, type: !2008, align: 16)
!2007 = distinct !DISubprogram(name: "@stack_mem", linkageName: "@stack_mem", scope: !338, file: !338, line: 535, scopeLine: 535, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2008 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 8192, align: 8, elements: !2009)
!2009 = !{!2010}
!2010 = !DISubrange(count: 1024, lowerBound: 0)
!2011 = !DILocation(line: 537, column: 14, scope: !2007, inlinedAt: !2012)
!2012 = !DILocation(line: 140, column: 3, scope: !1981)
!2013 = !DILocalVariable(name: "allocator", scope: !2007, file: !6, line: 538, type: !2014, align: 8)
!2014 = !DICompositeType(tag: DW_TAG_structure_type, name: "OnStackAllocator", scope: !6, file: !6, line: 3, size: 384, align: 64, elements: !2015, identifier: "std.core.mem.allocator.OnStackAllocator")
!2015 = !{!2016, !2017, !2018, !2019}
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "backing_allocator", scope: !2014, file: !6, line: 5, baseType: !675, size: 128, align: 64)
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2014, file: !6, line: 6, baseType: !203, size: 128, align: 64, offset: 128)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2014, file: !6, line: 7, baseType: !207, size: 64, align: 64, offset: 256)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !2014, file: !6, line: 8, baseType: !2020, size: 64, align: 64, offset: 320)
!2020 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "OnStackAllocatorExtraChunk*", baseType: !2021, size: 64, align: 64, dwarfAddressSpace: 0)
!2021 = !DICompositeType(tag: DW_TAG_structure_type, name: "OnStackAllocatorExtraChunk", scope: !6, file: !6, line: 12, size: 192, align: 64, elements: !2022, identifier: "std.core.mem.allocator.OnStackAllocatorExtraChunk")
!2022 = !{!2023, !2024, !2025}
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "is_aligned", scope: !2021, file: !6, line: 14, baseType: !920, size: 8, align: 8)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2021, file: !6, line: 15, baseType: !2020, size: 64, align: 64, offset: 64)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2021, file: !6, line: 16, baseType: !21, size: 64, align: 64, offset: 128)
!2026 = !DILocation(line: 538, column: 19, scope: !2007, inlinedAt: !2012)
!2027 = !DILocation(line: 539, column: 18, scope: !2007, inlinedAt: !2012)
!2028 = !DILocation(line: 392, column: 27, scope: !2029, inlinedAt: !2030)
!2029 = distinct !DISubprogram(name: "heap", linkageName: "heap", scope: !702, file: !702, line: 392, scopeLine: 392, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2030 = !DILocation(line: 539, column: 26, scope: !2007, inlinedAt: !2012)
!2031 = !DILocation(line: 539, column: 2, scope: !2007, inlinedAt: !2012)
!2032 = !DILocalVariable(name: "mem", scope: !1981, file: !6, line: 140, type: !675, align: 8)
!2033 = !DILocation(line: 140, column: 30, scope: !1981)
!2034 = !DILocation(line: 541, column: 8, scope: !2035, inlinedAt: !2012)
!2035 = distinct !DILexicalBlock(scope: !2007, file: !338, line: 541, column: 2)
!2036 = !DILocation(line: 142, column: 41, scope: !2037)
!2037 = distinct !DILexicalBlock(scope: !1981, file: !6, line: 141, column: 3)
!2038 = !DILocation(line: 142, column: 27, scope: !2037)
!2039 = !DILocation(line: 142, column: 11, scope: !2037)
!2040 = !DILocation(line: 540, column: 8, scope: !2041, inlinedAt: !2012)
!2041 = distinct !DILexicalBlock(scope: !2007, file: !338, line: 540, column: 8)
!2042 = !DILocation(line: 135, column: 4, scope: !2043)
!2043 = distinct !DILexicalBlock(scope: !1981, file: !6, line: 134, column: 3)
!2044 = !DILocation(line: 135, column: 17, scope: !2043)
!2045 = !DILocation(line: 136, column: 4, scope: !2043)
!2046 = !DILocation(line: 136, column: 17, scope: !2043)
!2047 = !DILocation(line: 137, column: 4, scope: !2043)
!2048 = !DILocation(line: 137, column: 16, scope: !2043)
!2049 = !DILocation(line: 540, column: 8, scope: !2050, inlinedAt: !2012)
!2050 = distinct !DILexicalBlock(scope: !2007, file: !338, line: 540, column: 8)
!2051 = !DILocation(line: 135, column: 4, scope: !2052)
!2052 = distinct !DILexicalBlock(scope: !1981, file: !6, line: 134, column: 3)
!2053 = !DILocation(line: 135, column: 17, scope: !2052)
!2054 = !DILocation(line: 136, column: 4, scope: !2052)
!2055 = !DILocation(line: 136, column: 17, scope: !2052)
!2056 = !DILocation(line: 137, column: 4, scope: !2052)
!2057 = !DILocation(line: 137, column: 16, scope: !2052)
!2058 = !DILocation(line: 145, column: 9, scope: !1924)
!2059 = distinct !DISubprogram(name: "out_str", linkageName: "std.io.Formatter.out_str", scope: !6, file: !6, line: 149, type: !2060, scopeLine: 149, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2060 = !DISubroutineType(types: !2061)
!2061 = !{!115, !308, !1847, !1878}
!2062 = !DILocation(line: 150, column: 1, scope: !2059)
!2063 = !DILocalVariable(name: "self", arg: 1, scope: !2059, file: !6, line: 149, type: !1847)
!2064 = !DILocation(line: 149, column: 27, scope: !2059)
!2065 = !DILocalVariable(name: "arg", arg: 2, scope: !2059, file: !6, line: 149, type: !1878)
!2066 = !DILocation(line: 149, column: 38, scope: !2059)
!2067 = !DILocation(line: 151, column: 10, scope: !2068)
!2068 = distinct !DILexicalBlock(scope: !2059, file: !6, line: 151, column: 2)
!2069 = !DILocation(line: 154, column: 11, scope: !2070)
!2070 = distinct !DILexicalBlock(scope: !2068, file: !6, line: 154, column: 4)
!2071 = !DILocation(line: 156, column: 11, scope: !2072)
!2072 = distinct !DILexicalBlock(scope: !2068, file: !6, line: 156, column: 4)
!2073 = !DILocation(line: 159, column: 40, scope: !2074)
!2074 = distinct !DILexicalBlock(scope: !2068, file: !6, line: 159, column: 4)
!2075 = !DILocation(line: 159, column: 30, scope: !2074)
!2076 = !DILocation(line: 159, column: 11, scope: !2074)
!2077 = !DILocation(line: 162, column: 26, scope: !2078)
!2078 = distinct !DILexicalBlock(scope: !2068, file: !6, line: 162, column: 4)
!2079 = !DILocation(line: 162, column: 11, scope: !2078)
!2080 = !DILocation(line: 164, column: 33, scope: !2081, inlinedAt: !2082)
!2081 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !215, file: !215, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2082 = !DILocation(line: 164, column: 4, scope: !2083)
!2083 = distinct !DILexicalBlock(scope: !2068, file: !6, line: 164, column: 4)
!2084 = !DILocation(line: 164, column: 2, scope: !2081, inlinedAt: !2082)
!2085 = !DILocation(line: 166, column: 2, scope: !2081, inlinedAt: !2082)
!2086 = !DILocalVariable(name: "flags", scope: !2087, file: !6, line: 167, type: !94, align: 4)
!2087 = distinct !DILexicalBlock(scope: !2068, file: !6, line: 167, column: 4)
!2088 = !DILocation(line: 167, column: 15, scope: !2087)
!2089 = !DILocation(line: 167, column: 23, scope: !2087)
!2090 = !DILocalVariable(name: "width", scope: !2087, file: !6, line: 168, type: !94, align: 4)
!2091 = !DILocation(line: 168, column: 9, scope: !2087)
!2092 = !DILocation(line: 168, column: 17, scope: !2087)
!2093 = !DILocation(line: 174, column: 4, scope: !2087)
!2094 = !DILocation(line: 175, column: 4, scope: !2087)
!2095 = !DILocation(line: 175, column: 17, scope: !2087)
!2096 = !DILocation(line: 176, column: 11, scope: !2087)
!2097 = !DILocation(line: 176, column: 37, scope: !2087)
!2098 = !DILocation(line: 171, column: 5, scope: !2099)
!2099 = distinct !DILexicalBlock(scope: !2087, file: !6, line: 170, column: 4)
!2100 = !DILocation(line: 171, column: 18, scope: !2099)
!2101 = !DILocation(line: 172, column: 5, scope: !2099)
!2102 = !DILocation(line: 172, column: 18, scope: !2099)
!2103 = !DILocation(line: 171, column: 5, scope: !2104)
!2104 = distinct !DILexicalBlock(scope: !2087, file: !6, line: 170, column: 4)
!2105 = !DILocation(line: 171, column: 18, scope: !2104)
!2106 = !DILocation(line: 172, column: 5, scope: !2104)
!2107 = !DILocation(line: 172, column: 18, scope: !2104)
!2108 = !DILocalVariable(name: "flags", scope: !2109, file: !6, line: 178, type: !94, align: 4)
!2109 = distinct !DILexicalBlock(scope: !2068, file: !6, line: 178, column: 4)
!2110 = !DILocation(line: 178, column: 15, scope: !2109)
!2111 = !DILocation(line: 178, column: 23, scope: !2109)
!2112 = !DILocalVariable(name: "width", scope: !2109, file: !6, line: 179, type: !94, align: 4)
!2113 = !DILocation(line: 179, column: 9, scope: !2109)
!2114 = !DILocation(line: 179, column: 17, scope: !2109)
!2115 = !DILocation(line: 185, column: 4, scope: !2109)
!2116 = !DILocation(line: 186, column: 4, scope: !2109)
!2117 = !DILocation(line: 186, column: 17, scope: !2109)
!2118 = !DILocation(line: 187, column: 21, scope: !2109)
!2119 = !DILocation(line: 187, column: 11, scope: !2109)
!2120 = !DILocation(line: 187, column: 45, scope: !2109)
!2121 = !DILocation(line: 182, column: 5, scope: !2122)
!2122 = distinct !DILexicalBlock(scope: !2109, file: !6, line: 181, column: 4)
!2123 = !DILocation(line: 182, column: 18, scope: !2122)
!2124 = !DILocation(line: 183, column: 5, scope: !2122)
!2125 = !DILocation(line: 183, column: 18, scope: !2122)
!2126 = !DILocation(line: 182, column: 5, scope: !2127)
!2127 = distinct !DILexicalBlock(scope: !2109, file: !6, line: 181, column: 4)
!2128 = !DILocation(line: 182, column: 18, scope: !2127)
!2129 = !DILocation(line: 183, column: 5, scope: !2127)
!2130 = !DILocation(line: 183, column: 18, scope: !2127)
!2131 = !DILocation(line: 189, column: 35, scope: !2132)
!2132 = distinct !DILexicalBlock(scope: !2068, file: !6, line: 189, column: 4)
!2133 = !DILocation(line: 189, column: 29, scope: !2132)
!2134 = !DILocation(line: 189, column: 54, scope: !2132)
!2135 = !DILocation(line: 189, column: 11, scope: !2132)
!2136 = !DILocalVariable(name: "n", scope: !2059, file: !6, line: 192, type: !208, align: 8)
!2137 = !DILocation(line: 192, column: 7, scope: !2059)
!2138 = !DILocation(line: 192, column: 47, scope: !2059)
!2139 = !DILocation(line: 192, column: 11, scope: !2059)
!2140 = !DILocation(line: 193, column: 6, scope: !2059)
!2141 = !DILocation(line: 193, column: 20, scope: !2059)
!2142 = !DILocalVariable(name: "f", scope: !2143, file: !6, line: 353, type: !115, align: 8)
!2143 = distinct !DISubprogram(name: "@catch", linkageName: "@catch", scope: !215, file: !215, line: 351, scopeLine: 351, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2144 = !DILocation(line: 353, column: 12, scope: !2143, inlinedAt: !2145)
!2145 = !DILocation(line: 194, column: 6, scope: !2059)
!2146 = !DILocation(line: 353, column: 16, scope: !2143, inlinedAt: !2145)
!2147 = !DILocation(line: 353, column: 30, scope: !2143, inlinedAt: !2145)
!2148 = !DILocation(line: 354, column: 9, scope: !2143, inlinedAt: !2145)
!2149 = !DILocation(line: 194, column: 41, scope: !2059)
!2150 = !DILocation(line: 195, column: 10, scope: !2151)
!2151 = distinct !DILexicalBlock(scope: !2059, file: !6, line: 195, column: 2)
!2152 = !DILocalVariable(name: "i", scope: !2153, file: !6, line: 198, type: !207, align: 8)
!2153 = distinct !DILexicalBlock(scope: !2151, file: !6, line: 198, column: 4)
!2154 = !DILocation(line: 198, column: 8, scope: !2153)
!2155 = !DILocation(line: 13, column: 11, scope: !2156, inlinedAt: !2159)
!2156 = distinct !DILexicalBlock(scope: !2158, file: !2157, line: 17, column: 1)
!2157 = !DIFile(filename: "types.c3", directory: "/usr/local/lib/c3/std/core")
!2158 = distinct !DISubprogram(name: "any_to_enum_ordinal", linkageName: "any_to_enum_ordinal", scope: !2157, file: !2157, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2159 = !DILocation(line: 198, column: 12, scope: !2153)
!2160 = !DILocation(line: 14, column: 11, scope: !2156, inlinedAt: !2159)
!2161 = !DILocation(line: 199, column: 20, scope: !2162, inlinedAt: !2163)
!2162 = distinct !DISubprogram(name: "as_inner", linkageName: "as_inner", scope: !215, file: !215, line: 197, scopeLine: 197, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2163 = !DILocation(line: 18, column: 20, scope: !2158, inlinedAt: !2159)
!2164 = !DILocation(line: 199, column: 30, scope: !2162, inlinedAt: !2163)
!2165 = !DILocation(line: 22, column: 11, scope: !2166, inlinedAt: !2168)
!2166 = distinct !DILexicalBlock(scope: !2167, file: !2157, line: 26, column: 1)
!2167 = distinct !DISubprogram(name: "any_to_int", linkageName: "any_to_int", scope: !2157, file: !2157, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2168 = !DILocation(line: 18, column: 9, scope: !2158, inlinedAt: !2159)
!2169 = !DILocation(line: 23, column: 11, scope: !2166, inlinedAt: !2168)
!2170 = !DILocalVariable(name: "any_type", scope: !2167, file: !6, line: 27, type: !92, align: 8)
!2171 = !DILocation(line: 27, column: 9, scope: !2167, inlinedAt: !2168)
!2172 = !DILocation(line: 27, column: 20, scope: !2167, inlinedAt: !2168)
!2173 = !DILocalVariable(name: "kind", scope: !2167, file: !6, line: 28, type: !57, align: 1)
!2174 = !DILocation(line: 28, column: 11, scope: !2167, inlinedAt: !2168)
!2175 = !DILocation(line: 28, column: 18, scope: !2167, inlinedAt: !2168)
!2176 = !DILocalVariable(name: "is_mixed_signed", scope: !2167, file: !6, line: 29, type: !920, align: 1)
!2177 = !DILocation(line: 29, column: 7, scope: !2167, inlinedAt: !2168)
!2178 = !DILocation(line: 29, column: 41, scope: !2167, inlinedAt: !2168)
!2179 = !DILocation(line: 29, column: 25, scope: !2167, inlinedAt: !2168)
!2180 = !DILocalVariable(name: "max", scope: !2167, file: !6, line: 30, type: !207, align: 8)
!2181 = !DILocation(line: 30, column: 8, scope: !2167, inlinedAt: !2168)
!2182 = !DILocation(line: 30, column: 14, scope: !2167, inlinedAt: !2168)
!2183 = !DILocalVariable(name: "min", scope: !2167, file: !6, line: 31, type: !207, align: 8)
!2184 = !DILocation(line: 31, column: 8, scope: !2167, inlinedAt: !2168)
!2185 = !DILocation(line: 31, column: 14, scope: !2167, inlinedAt: !2168)
!2186 = !DILocation(line: 34, column: 8, scope: !2187, inlinedAt: !2168)
!2187 = distinct !DILexicalBlock(scope: !2167, file: !2157, line: 32, column: 2)
!2188 = !DILocalVariable(name: "c", scope: !2189, file: !6, line: 35, type: !2190, align: 1)
!2189 = distinct !DILexicalBlock(scope: !2187, file: !2157, line: 35, column: 4)
!2190 = !DIBasicType(name: "ichar", size: 8, encoding: DW_ATE_signed_char)
!2191 = !DILocation(line: 35, column: 10, scope: !2189, inlinedAt: !2168)
!2192 = !DILocation(line: 35, column: 22, scope: !2189, inlinedAt: !2168)
!2193 = !DILocation(line: 35, column: 16, scope: !2189, inlinedAt: !2168)
!2194 = !DILocation(line: 36, column: 8, scope: !2189, inlinedAt: !2168)
!2195 = !DILocation(line: 36, column: 27, scope: !2189, inlinedAt: !2168)
!2196 = !DILocation(line: 36, column: 41, scope: !2189, inlinedAt: !2168)
!2197 = !DILocation(line: 37, column: 12, scope: !2189, inlinedAt: !2168)
!2198 = !DILocation(line: 38, column: 8, scope: !2187, inlinedAt: !2168)
!2199 = !DILocalVariable(name: "s", scope: !2200, file: !6, line: 39, type: !2201, align: 2)
!2200 = distinct !DILexicalBlock(scope: !2187, file: !2157, line: 39, column: 4)
!2201 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!2202 = !DILocation(line: 39, column: 10, scope: !2200, inlinedAt: !2168)
!2203 = !DILocation(line: 39, column: 23, scope: !2200, inlinedAt: !2168)
!2204 = !DILocation(line: 39, column: 16, scope: !2200, inlinedAt: !2168)
!2205 = !DILocation(line: 40, column: 8, scope: !2200, inlinedAt: !2168)
!2206 = !DILocation(line: 40, column: 27, scope: !2200, inlinedAt: !2168)
!2207 = !DILocation(line: 40, column: 41, scope: !2200, inlinedAt: !2168)
!2208 = !DILocation(line: 41, column: 8, scope: !2200, inlinedAt: !2168)
!2209 = !DILocation(line: 41, column: 12, scope: !2200, inlinedAt: !2168)
!2210 = !DILocation(line: 41, column: 19, scope: !2200, inlinedAt: !2168)
!2211 = !DILocation(line: 41, column: 23, scope: !2200, inlinedAt: !2168)
!2212 = !DILocation(line: 41, column: 35, scope: !2200, inlinedAt: !2168)
!2213 = !DILocation(line: 42, column: 12, scope: !2200, inlinedAt: !2168)
!2214 = !DILocation(line: 43, column: 8, scope: !2187, inlinedAt: !2168)
!2215 = !DILocalVariable(name: "i", scope: !2216, file: !6, line: 44, type: !3, align: 4)
!2216 = distinct !DILexicalBlock(scope: !2187, file: !2157, line: 44, column: 4)
!2217 = !DILocation(line: 44, column: 8, scope: !2216, inlinedAt: !2168)
!2218 = !DILocation(line: 44, column: 19, scope: !2216, inlinedAt: !2168)
!2219 = !DILocation(line: 44, column: 14, scope: !2216, inlinedAt: !2168)
!2220 = !DILocation(line: 45, column: 8, scope: !2216, inlinedAt: !2168)
!2221 = !DILocation(line: 45, column: 27, scope: !2216, inlinedAt: !2168)
!2222 = !DILocation(line: 45, column: 41, scope: !2216, inlinedAt: !2168)
!2223 = !DILocation(line: 46, column: 8, scope: !2216, inlinedAt: !2168)
!2224 = !DILocation(line: 46, column: 12, scope: !2216, inlinedAt: !2168)
!2225 = !DILocation(line: 46, column: 19, scope: !2216, inlinedAt: !2168)
!2226 = !DILocation(line: 46, column: 23, scope: !2216, inlinedAt: !2168)
!2227 = !DILocation(line: 46, column: 35, scope: !2216, inlinedAt: !2168)
!2228 = !DILocation(line: 47, column: 12, scope: !2216, inlinedAt: !2168)
!2229 = !DILocation(line: 48, column: 8, scope: !2187, inlinedAt: !2168)
!2230 = !DILocalVariable(name: "l", scope: !2231, file: !6, line: 49, type: !116, align: 8)
!2231 = distinct !DILexicalBlock(scope: !2187, file: !2157, line: 49, column: 4)
!2232 = !DILocation(line: 49, column: 9, scope: !2231, inlinedAt: !2168)
!2233 = !DILocation(line: 49, column: 21, scope: !2231, inlinedAt: !2168)
!2234 = !DILocation(line: 49, column: 15, scope: !2231, inlinedAt: !2168)
!2235 = !DILocation(line: 50, column: 8, scope: !2231, inlinedAt: !2168)
!2236 = !DILocation(line: 50, column: 27, scope: !2231, inlinedAt: !2168)
!2237 = !DILocation(line: 50, column: 41, scope: !2231, inlinedAt: !2168)
!2238 = !DILocation(line: 51, column: 8, scope: !2231, inlinedAt: !2168)
!2239 = !DILocation(line: 51, column: 12, scope: !2231, inlinedAt: !2168)
!2240 = !DILocation(line: 51, column: 19, scope: !2231, inlinedAt: !2168)
!2241 = !DILocation(line: 51, column: 23, scope: !2231, inlinedAt: !2168)
!2242 = !DILocation(line: 51, column: 35, scope: !2231, inlinedAt: !2168)
!2243 = !DILocation(line: 52, column: 12, scope: !2231, inlinedAt: !2168)
!2244 = !DILocation(line: 53, column: 8, scope: !2187, inlinedAt: !2168)
!2245 = !DILocalVariable(name: "i", scope: !2246, file: !6, line: 54, type: !2247, align: 16)
!2246 = distinct !DILexicalBlock(scope: !2187, file: !2157, line: 54, column: 4)
!2247 = !DIBasicType(name: "int128", size: 128, encoding: DW_ATE_signed)
!2248 = !DILocation(line: 54, column: 11, scope: !2246, inlinedAt: !2168)
!2249 = !DILocation(line: 54, column: 25, scope: !2246, inlinedAt: !2168)
!2250 = !DILocation(line: 54, column: 17, scope: !2246, inlinedAt: !2168)
!2251 = !DILocation(line: 55, column: 8, scope: !2246, inlinedAt: !2168)
!2252 = !DILocation(line: 55, column: 27, scope: !2246, inlinedAt: !2168)
!2253 = !DILocation(line: 55, column: 41, scope: !2246, inlinedAt: !2168)
!2254 = !DILocation(line: 56, column: 8, scope: !2246, inlinedAt: !2168)
!2255 = !DILocation(line: 56, column: 12, scope: !2246, inlinedAt: !2168)
!2256 = !DILocation(line: 56, column: 19, scope: !2246, inlinedAt: !2168)
!2257 = !DILocation(line: 56, column: 23, scope: !2246, inlinedAt: !2168)
!2258 = !DILocation(line: 56, column: 35, scope: !2246, inlinedAt: !2168)
!2259 = !DILocation(line: 57, column: 12, scope: !2246, inlinedAt: !2168)
!2260 = !DILocation(line: 58, column: 8, scope: !2187, inlinedAt: !2168)
!2261 = !DILocalVariable(name: "c", scope: !2262, file: !6, line: 59, type: !11, align: 1)
!2262 = distinct !DILexicalBlock(scope: !2187, file: !2157, line: 59, column: 4)
!2263 = !DILocation(line: 59, column: 9, scope: !2262, inlinedAt: !2168)
!2264 = !DILocation(line: 59, column: 21, scope: !2262, inlinedAt: !2168)
!2265 = !DILocation(line: 59, column: 15, scope: !2262, inlinedAt: !2168)
!2266 = !DILocation(line: 60, column: 8, scope: !2262, inlinedAt: !2168)
!2267 = !DILocation(line: 60, column: 12, scope: !2262, inlinedAt: !2168)
!2268 = !DILocation(line: 60, column: 24, scope: !2262, inlinedAt: !2168)
!2269 = !DILocation(line: 61, column: 12, scope: !2262, inlinedAt: !2168)
!2270 = !DILocation(line: 62, column: 8, scope: !2187, inlinedAt: !2168)
!2271 = !DILocalVariable(name: "s", scope: !2272, file: !6, line: 63, type: !2273, align: 2)
!2272 = distinct !DILexicalBlock(scope: !2187, file: !2157, line: 63, column: 4)
!2273 = !DIBasicType(name: "ushort", size: 16, encoding: DW_ATE_unsigned)
!2274 = !DILocation(line: 63, column: 11, scope: !2272, inlinedAt: !2168)
!2275 = !DILocation(line: 63, column: 25, scope: !2272, inlinedAt: !2168)
!2276 = !DILocation(line: 63, column: 17, scope: !2272, inlinedAt: !2168)
!2277 = !DILocation(line: 64, column: 8, scope: !2272, inlinedAt: !2168)
!2278 = !DILocation(line: 64, column: 12, scope: !2272, inlinedAt: !2168)
!2279 = !DILocation(line: 64, column: 19, scope: !2272, inlinedAt: !2168)
!2280 = !DILocation(line: 64, column: 23, scope: !2272, inlinedAt: !2168)
!2281 = !DILocation(line: 64, column: 35, scope: !2272, inlinedAt: !2168)
!2282 = !DILocation(line: 65, column: 12, scope: !2272, inlinedAt: !2168)
!2283 = !DILocation(line: 66, column: 8, scope: !2187, inlinedAt: !2168)
!2284 = !DILocalVariable(name: "i", scope: !2285, file: !6, line: 67, type: !94, align: 4)
!2285 = distinct !DILexicalBlock(scope: !2187, file: !2157, line: 67, column: 4)
!2286 = !DILocation(line: 67, column: 9, scope: !2285, inlinedAt: !2168)
!2287 = !DILocation(line: 67, column: 21, scope: !2285, inlinedAt: !2168)
!2288 = !DILocation(line: 67, column: 15, scope: !2285, inlinedAt: !2168)
!2289 = !DILocation(line: 68, column: 8, scope: !2285, inlinedAt: !2168)
!2290 = !DILocation(line: 68, column: 12, scope: !2285, inlinedAt: !2168)
!2291 = !DILocation(line: 68, column: 19, scope: !2285, inlinedAt: !2168)
!2292 = !DILocation(line: 68, column: 23, scope: !2285, inlinedAt: !2168)
!2293 = !DILocation(line: 68, column: 35, scope: !2285, inlinedAt: !2168)
!2294 = !DILocation(line: 69, column: 12, scope: !2285, inlinedAt: !2168)
!2295 = !DILocation(line: 70, column: 8, scope: !2187, inlinedAt: !2168)
!2296 = !DILocalVariable(name: "l", scope: !2297, file: !6, line: 71, type: !208, align: 8)
!2297 = distinct !DILexicalBlock(scope: !2187, file: !2157, line: 71, column: 4)
!2298 = !DILocation(line: 71, column: 10, scope: !2297, inlinedAt: !2168)
!2299 = !DILocation(line: 71, column: 23, scope: !2297, inlinedAt: !2168)
!2300 = !DILocation(line: 71, column: 16, scope: !2297, inlinedAt: !2168)
!2301 = !DILocation(line: 72, column: 8, scope: !2297, inlinedAt: !2168)
!2302 = !DILocation(line: 72, column: 12, scope: !2297, inlinedAt: !2168)
!2303 = !DILocation(line: 72, column: 19, scope: !2297, inlinedAt: !2168)
!2304 = !DILocation(line: 72, column: 23, scope: !2297, inlinedAt: !2168)
!2305 = !DILocation(line: 72, column: 35, scope: !2297, inlinedAt: !2168)
!2306 = !DILocation(line: 73, column: 12, scope: !2297, inlinedAt: !2168)
!2307 = !DILocation(line: 74, column: 8, scope: !2187, inlinedAt: !2168)
!2308 = !DILocalVariable(name: "i", scope: !2309, file: !6, line: 75, type: !2310, align: 16)
!2309 = distinct !DILexicalBlock(scope: !2187, file: !2157, line: 75, column: 4)
!2310 = !DIBasicType(name: "uint128", size: 128, encoding: DW_ATE_unsigned)
!2311 = !DILocation(line: 75, column: 12, scope: !2309, inlinedAt: !2168)
!2312 = !DILocation(line: 75, column: 27, scope: !2309, inlinedAt: !2168)
!2313 = !DILocation(line: 75, column: 18, scope: !2309, inlinedAt: !2168)
!2314 = !DILocation(line: 76, column: 8, scope: !2309, inlinedAt: !2168)
!2315 = !DILocation(line: 76, column: 12, scope: !2309, inlinedAt: !2168)
!2316 = !DILocation(line: 76, column: 19, scope: !2309, inlinedAt: !2168)
!2317 = !DILocation(line: 76, column: 23, scope: !2309, inlinedAt: !2168)
!2318 = !DILocation(line: 76, column: 35, scope: !2309, inlinedAt: !2168)
!2319 = !DILocation(line: 77, column: 12, scope: !2309, inlinedAt: !2168)
!2320 = !DILocation(line: 164, column: 33, scope: !2321, inlinedAt: !2322)
!2321 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !215, file: !215, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2322 = !DILocation(line: 79, column: 4, scope: !2323, inlinedAt: !2168)
!2323 = distinct !DILexicalBlock(scope: !2187, file: !2157, line: 79, column: 4)
!2324 = !DILocation(line: 164, column: 2, scope: !2321, inlinedAt: !2322)
!2325 = !DILocation(line: 166, column: 2, scope: !2321, inlinedAt: !2322)
!2326 = !DILocation(line: 199, column: 11, scope: !2153)
!2327 = !DILocation(line: 199, column: 15, scope: !2153)
!2328 = !DILocation(line: 199, column: 88, scope: !2153)
!2329 = !DILocation(line: 200, column: 27, scope: !2153)
!2330 = !DILocation(line: 200, column: 42, scope: !2153)
!2331 = !DILocation(line: 200, column: 11, scope: !2153)
!2332 = !DILocation(line: 202, column: 11, scope: !2333)
!2333 = distinct !DILexicalBlock(scope: !2151, file: !6, line: 202, column: 4)
!2334 = !DILocation(line: 204, column: 11, scope: !2335)
!2335 = distinct !DILexicalBlock(scope: !2151, file: !6, line: 204, column: 4)
!2336 = !DILocation(line: 206, column: 11, scope: !2337)
!2337 = distinct !DILexicalBlock(scope: !2151, file: !6, line: 206, column: 4)
!2338 = !DILocation(line: 208, column: 11, scope: !2339)
!2339 = distinct !DILexicalBlock(scope: !2151, file: !6, line: 208, column: 4)
!2340 = !DILocation(line: 210, column: 8, scope: !2341)
!2341 = distinct !DILexicalBlock(scope: !2151, file: !6, line: 210, column: 4)
!2342 = !DILocation(line: 212, column: 30, scope: !2343)
!2343 = distinct !DILexicalBlock(scope: !2341, file: !6, line: 211, column: 4)
!2344 = !DILocation(line: 212, column: 12, scope: !2343)
!2345 = !DILocation(line: 214, column: 8, scope: !2341)
!2346 = !DILocation(line: 216, column: 30, scope: !2347)
!2347 = distinct !DILexicalBlock(scope: !2341, file: !6, line: 215, column: 4)
!2348 = !DILocation(line: 216, column: 47, scope: !2347)
!2349 = !DILocation(line: 216, column: 74, scope: !2347)
!2350 = !DILocation(line: 216, column: 12, scope: !2347)
!2351 = !DILocation(line: 218, column: 8, scope: !2341)
!2352 = !DILocation(line: 220, column: 30, scope: !2353)
!2353 = distinct !DILexicalBlock(scope: !2341, file: !6, line: 219, column: 4)
!2354 = !DILocation(line: 220, column: 47, scope: !2353)
!2355 = !DILocation(line: 220, column: 74, scope: !2353)
!2356 = !DILocation(line: 220, column: 12, scope: !2353)
!2357 = !DILocation(line: 199, column: 20, scope: !2358, inlinedAt: !2359)
!2358 = distinct !DISubprogram(name: "as_inner", linkageName: "as_inner", scope: !215, file: !215, line: 197, scopeLine: 197, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2359 = !DILocation(line: 222, column: 24, scope: !2341)
!2360 = !DILocation(line: 199, column: 30, scope: !2358, inlinedAt: !2359)
!2361 = !DILocation(line: 222, column: 11, scope: !2341)
!2362 = !DILocalVariable(name: "inner", scope: !2363, file: !6, line: 224, type: !92, align: 8)
!2363 = distinct !DILexicalBlock(scope: !2151, file: !6, line: 224, column: 4)
!2364 = !DILocation(line: 224, column: 11, scope: !2363)
!2365 = !DILocation(line: 224, column: 19, scope: !2363)
!2366 = !DILocalVariable(name: "pointer", scope: !2363, file: !6, line: 225, type: !2367, align: 8)
!2367 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "void**", baseType: !21, size: 64, align: 64, dwarfAddressSpace: 0)
!2368 = !DILocation(line: 225, column: 11, scope: !2363)
!2369 = !DILocation(line: 225, column: 21, scope: !2363)
!2370 = !DILocation(line: 226, column: 8, scope: !2363)
!2371 = !DILocalVariable(name: "deref", scope: !2372, file: !6, line: 228, type: !1878, align: 8)
!2372 = distinct !DILexicalBlock(scope: !2363, file: !6, line: 227, column: 4)
!2373 = !DILocation(line: 228, column: 9, scope: !2372)
!2374 = !DILocation(line: 228, column: 27, scope: !2372)
!2375 = !DILocation(line: 189, column: 20, scope: !2376, inlinedAt: !2377)
!2376 = distinct !DISubprogram(name: "any_make", linkageName: "any_make", scope: !215, file: !215, line: 187, scopeLine: 187, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2377 = !DILocation(line: 228, column: 17, scope: !2372)
!2378 = !DILocation(line: 189, column: 25, scope: !2376, inlinedAt: !2377)
!2379 = !DILocation(line: 229, column: 45, scope: !2372)
!2380 = !DILocation(line: 229, column: 9, scope: !2372)
!2381 = !DILocation(line: 230, column: 9, scope: !2372)
!2382 = !DILocation(line: 230, column: 23, scope: !2372)
!2383 = !DILocalVariable(name: "f", scope: !2384, file: !6, line: 353, type: !115, align: 8)
!2384 = distinct !DISubprogram(name: "@catch", linkageName: "@catch", scope: !215, file: !215, line: 351, scopeLine: 351, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2385 = !DILocation(line: 353, column: 12, scope: !2384, inlinedAt: !2386)
!2386 = !DILocation(line: 231, column: 9, scope: !2372)
!2387 = !DILocation(line: 353, column: 16, scope: !2384, inlinedAt: !2386)
!2388 = !DILocation(line: 353, column: 30, scope: !2384, inlinedAt: !2386)
!2389 = !DILocation(line: 354, column: 9, scope: !2384, inlinedAt: !2386)
!2390 = !DILocation(line: 231, column: 44, scope: !2372)
!2391 = !DILocalVariable(name: "flags", scope: !2363, file: !6, line: 233, type: !94, align: 4)
!2392 = !DILocation(line: 233, column: 15, scope: !2363)
!2393 = !DILocation(line: 233, column: 23, scope: !2363)
!2394 = !DILocalVariable(name: "width", scope: !2363, file: !6, line: 234, type: !94, align: 4)
!2395 = !DILocation(line: 234, column: 9, scope: !2363)
!2396 = !DILocation(line: 234, column: 17, scope: !2363)
!2397 = !DILocation(line: 240, column: 4, scope: !2363)
!2398 = !DILocation(line: 240, column: 17, scope: !2363)
!2399 = !DILocation(line: 241, column: 11, scope: !2363)
!2400 = !DILocation(line: 237, column: 5, scope: !2401)
!2401 = distinct !DILexicalBlock(scope: !2363, file: !6, line: 236, column: 4)
!2402 = !DILocation(line: 237, column: 18, scope: !2401)
!2403 = !DILocation(line: 238, column: 5, scope: !2401)
!2404 = !DILocation(line: 238, column: 18, scope: !2401)
!2405 = !DILocation(line: 241, column: 36, scope: !2363)
!2406 = !DILocation(line: 237, column: 5, scope: !2407)
!2407 = distinct !DILexicalBlock(scope: !2363, file: !6, line: 236, column: 4)
!2408 = !DILocation(line: 237, column: 18, scope: !2407)
!2409 = !DILocation(line: 238, column: 5, scope: !2407)
!2410 = !DILocation(line: 238, column: 18, scope: !2407)
!2411 = !DILocation(line: 237, column: 5, scope: !2412)
!2412 = distinct !DILexicalBlock(scope: !2363, file: !6, line: 236, column: 4)
!2413 = !DILocation(line: 237, column: 18, scope: !2412)
!2414 = !DILocation(line: 238, column: 5, scope: !2412)
!2415 = !DILocation(line: 238, column: 18, scope: !2412)
!2416 = !DILocalVariable(name: "flags", scope: !2417, file: !6, line: 244, type: !94, align: 4)
!2417 = distinct !DILexicalBlock(scope: !2151, file: !6, line: 244, column: 4)
!2418 = !DILocation(line: 244, column: 15, scope: !2417)
!2419 = !DILocation(line: 244, column: 23, scope: !2417)
!2420 = !DILocalVariable(name: "width", scope: !2417, file: !6, line: 245, type: !94, align: 4)
!2421 = !DILocation(line: 245, column: 9, scope: !2417)
!2422 = !DILocation(line: 245, column: 17, scope: !2417)
!2423 = !DILocation(line: 251, column: 4, scope: !2417)
!2424 = !DILocation(line: 252, column: 4, scope: !2417)
!2425 = !DILocation(line: 252, column: 17, scope: !2417)
!2426 = !DILocalVariable(name: "inner", scope: !2417, file: !6, line: 253, type: !92, align: 8)
!2427 = !DILocation(line: 253, column: 11, scope: !2417)
!2428 = !DILocation(line: 253, column: 19, scope: !2417)
!2429 = !DILocalVariable(name: "size", scope: !2417, file: !6, line: 254, type: !207, align: 8)
!2430 = !DILocation(line: 254, column: 8, scope: !2417)
!2431 = !DILocation(line: 254, column: 15, scope: !2417)
!2432 = !DILocalVariable(name: "alen", scope: !2417, file: !6, line: 255, type: !207, align: 8)
!2433 = !DILocation(line: 255, column: 8, scope: !2417)
!2434 = !DILocation(line: 255, column: 15, scope: !2417)
!2435 = !DILocalVariable(name: "ptr", scope: !2417, file: !6, line: 257, type: !21, align: 8)
!2436 = !DILocation(line: 257, column: 10, scope: !2417)
!2437 = !DILocation(line: 257, column: 17, scope: !2417)
!2438 = !DILocalVariable(name: "len", scope: !2417, file: !6, line: 258, type: !207, align: 8)
!2439 = !DILocation(line: 258, column: 8, scope: !2417)
!2440 = !DILocation(line: 258, column: 14, scope: !2417)
!2441 = !DILocation(line: 248, column: 5, scope: !2442)
!2442 = distinct !DILexicalBlock(scope: !2417, file: !6, line: 247, column: 4)
!2443 = !DILocation(line: 248, column: 18, scope: !2442)
!2444 = !DILocation(line: 249, column: 5, scope: !2442)
!2445 = !DILocation(line: 249, column: 18, scope: !2442)
!2446 = !DILocalVariable(name: "i", scope: !2447, file: !6, line: 259, type: !207, align: 8)
!2447 = distinct !DILexicalBlock(scope: !2417, file: !6, line: 259, column: 4)
!2448 = !DILocation(line: 259, column: 13, scope: !2447)
!2449 = !DILocation(line: 259, column: 17, scope: !2447)
!2450 = !DILocation(line: 259, column: 20, scope: !2447)
!2451 = !DILocation(line: 259, column: 24, scope: !2447)
!2452 = !DILocation(line: 261, column: 9, scope: !2453)
!2453 = distinct !DILexicalBlock(scope: !2447, file: !6, line: 260, column: 4)
!2454 = !DILocation(line: 261, column: 17, scope: !2453)
!2455 = !DILocation(line: 261, column: 24, scope: !2453)
!2456 = !DILocation(line: 248, column: 5, scope: !2457)
!2457 = distinct !DILexicalBlock(scope: !2417, file: !6, line: 247, column: 4)
!2458 = !DILocation(line: 248, column: 18, scope: !2457)
!2459 = !DILocation(line: 249, column: 5, scope: !2457)
!2460 = !DILocation(line: 249, column: 18, scope: !2457)
!2461 = !DILocation(line: 262, column: 5, scope: !2453)
!2462 = !DILocation(line: 189, column: 20, scope: !2463, inlinedAt: !2464)
!2463 = distinct !DISubprogram(name: "any_make", linkageName: "any_make", scope: !215, file: !215, line: 187, scopeLine: 187, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2464 = !DILocation(line: 262, column: 25, scope: !2453)
!2465 = !DILocation(line: 189, column: 25, scope: !2463, inlinedAt: !2464)
!2466 = !DILocation(line: 262, column: 12, scope: !2453)
!2467 = !DILocation(line: 248, column: 5, scope: !2468)
!2468 = distinct !DILexicalBlock(scope: !2417, file: !6, line: 247, column: 4)
!2469 = !DILocation(line: 248, column: 18, scope: !2468)
!2470 = !DILocation(line: 249, column: 5, scope: !2468)
!2471 = !DILocation(line: 249, column: 18, scope: !2468)
!2472 = !DILocation(line: 263, column: 5, scope: !2453)
!2473 = !DILocation(line: 263, column: 12, scope: !2453)
!2474 = !DILocation(line: 259, column: 30, scope: !2447)
!2475 = !DILocation(line: 265, column: 4, scope: !2417)
!2476 = !DILocation(line: 265, column: 11, scope: !2417)
!2477 = !DILocation(line: 248, column: 5, scope: !2478)
!2478 = distinct !DILexicalBlock(scope: !2417, file: !6, line: 247, column: 4)
!2479 = !DILocation(line: 248, column: 18, scope: !2478)
!2480 = !DILocation(line: 249, column: 5, scope: !2478)
!2481 = !DILocation(line: 249, column: 18, scope: !2478)
!2482 = !DILocation(line: 266, column: 11, scope: !2417)
!2483 = !DILocation(line: 248, column: 5, scope: !2484)
!2484 = distinct !DILexicalBlock(scope: !2417, file: !6, line: 247, column: 4)
!2485 = !DILocation(line: 248, column: 18, scope: !2484)
!2486 = !DILocation(line: 249, column: 5, scope: !2484)
!2487 = !DILocation(line: 249, column: 18, scope: !2484)
!2488 = !DILocalVariable(name: "flags", scope: !2489, file: !6, line: 268, type: !94, align: 4)
!2489 = distinct !DILexicalBlock(scope: !2151, file: !6, line: 268, column: 4)
!2490 = !DILocation(line: 268, column: 15, scope: !2489)
!2491 = !DILocation(line: 268, column: 23, scope: !2489)
!2492 = !DILocalVariable(name: "width", scope: !2489, file: !6, line: 269, type: !94, align: 4)
!2493 = !DILocation(line: 269, column: 9, scope: !2489)
!2494 = !DILocation(line: 269, column: 17, scope: !2489)
!2495 = !DILocation(line: 275, column: 4, scope: !2489)
!2496 = !DILocation(line: 276, column: 4, scope: !2489)
!2497 = !DILocation(line: 276, column: 17, scope: !2489)
!2498 = !DILocalVariable(name: "inner", scope: !2489, file: !6, line: 278, type: !92, align: 8)
!2499 = !DILocation(line: 278, column: 11, scope: !2489)
!2500 = !DILocation(line: 278, column: 19, scope: !2489)
!2501 = !DILocalVariable(name: "size", scope: !2489, file: !6, line: 279, type: !207, align: 8)
!2502 = !DILocation(line: 279, column: 8, scope: !2489)
!2503 = !DILocation(line: 279, column: 15, scope: !2489)
!2504 = !DILocalVariable(name: "vlen", scope: !2489, file: !6, line: 280, type: !207, align: 8)
!2505 = !DILocation(line: 280, column: 8, scope: !2489)
!2506 = !DILocation(line: 280, column: 15, scope: !2489)
!2507 = !DILocalVariable(name: "ptr", scope: !2489, file: !6, line: 282, type: !21, align: 8)
!2508 = !DILocation(line: 282, column: 10, scope: !2489)
!2509 = !DILocation(line: 282, column: 17, scope: !2489)
!2510 = !DILocalVariable(name: "len", scope: !2489, file: !6, line: 283, type: !207, align: 8)
!2511 = !DILocation(line: 283, column: 8, scope: !2489)
!2512 = !DILocation(line: 283, column: 14, scope: !2489)
!2513 = !DILocation(line: 272, column: 5, scope: !2514)
!2514 = distinct !DILexicalBlock(scope: !2489, file: !6, line: 271, column: 4)
!2515 = !DILocation(line: 272, column: 18, scope: !2514)
!2516 = !DILocation(line: 273, column: 5, scope: !2514)
!2517 = !DILocation(line: 273, column: 18, scope: !2514)
!2518 = !DILocalVariable(name: "i", scope: !2519, file: !6, line: 284, type: !207, align: 8)
!2519 = distinct !DILexicalBlock(scope: !2489, file: !6, line: 284, column: 4)
!2520 = !DILocation(line: 284, column: 13, scope: !2519)
!2521 = !DILocation(line: 284, column: 17, scope: !2519)
!2522 = !DILocation(line: 284, column: 20, scope: !2519)
!2523 = !DILocation(line: 284, column: 24, scope: !2519)
!2524 = !DILocation(line: 286, column: 9, scope: !2525)
!2525 = distinct !DILexicalBlock(scope: !2519, file: !6, line: 285, column: 4)
!2526 = !DILocation(line: 286, column: 17, scope: !2525)
!2527 = !DILocation(line: 286, column: 24, scope: !2525)
!2528 = !DILocation(line: 272, column: 5, scope: !2529)
!2529 = distinct !DILexicalBlock(scope: !2489, file: !6, line: 271, column: 4)
!2530 = !DILocation(line: 272, column: 18, scope: !2529)
!2531 = !DILocation(line: 273, column: 5, scope: !2529)
!2532 = !DILocation(line: 273, column: 18, scope: !2529)
!2533 = !DILocation(line: 287, column: 5, scope: !2525)
!2534 = !DILocation(line: 189, column: 20, scope: !2535, inlinedAt: !2536)
!2535 = distinct !DISubprogram(name: "any_make", linkageName: "any_make", scope: !215, file: !215, line: 187, scopeLine: 187, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2536 = !DILocation(line: 287, column: 25, scope: !2525)
!2537 = !DILocation(line: 189, column: 25, scope: !2535, inlinedAt: !2536)
!2538 = !DILocation(line: 287, column: 12, scope: !2525)
!2539 = !DILocation(line: 272, column: 5, scope: !2540)
!2540 = distinct !DILexicalBlock(scope: !2489, file: !6, line: 271, column: 4)
!2541 = !DILocation(line: 272, column: 18, scope: !2540)
!2542 = !DILocation(line: 273, column: 5, scope: !2540)
!2543 = !DILocation(line: 273, column: 18, scope: !2540)
!2544 = !DILocation(line: 288, column: 5, scope: !2525)
!2545 = !DILocation(line: 288, column: 12, scope: !2525)
!2546 = !DILocation(line: 284, column: 30, scope: !2519)
!2547 = !DILocation(line: 290, column: 4, scope: !2489)
!2548 = !DILocation(line: 290, column: 11, scope: !2489)
!2549 = !DILocation(line: 272, column: 5, scope: !2550)
!2550 = distinct !DILexicalBlock(scope: !2489, file: !6, line: 271, column: 4)
!2551 = !DILocation(line: 272, column: 18, scope: !2550)
!2552 = !DILocation(line: 273, column: 5, scope: !2550)
!2553 = !DILocation(line: 273, column: 18, scope: !2550)
!2554 = !DILocation(line: 291, column: 11, scope: !2489)
!2555 = !DILocation(line: 272, column: 5, scope: !2556)
!2556 = distinct !DILexicalBlock(scope: !2489, file: !6, line: 271, column: 4)
!2557 = !DILocation(line: 272, column: 18, scope: !2556)
!2558 = !DILocation(line: 273, column: 5, scope: !2556)
!2559 = !DILocation(line: 273, column: 18, scope: !2556)
!2560 = !DILocalVariable(name: "inner", scope: !2561, file: !6, line: 294, type: !92, align: 8)
!2561 = distinct !DILexicalBlock(scope: !2151, file: !6, line: 294, column: 4)
!2562 = !DILocation(line: 294, column: 11, scope: !2561)
!2563 = !DILocation(line: 294, column: 19, scope: !2561)
!2564 = !DILocation(line: 295, column: 8, scope: !2561)
!2565 = !DILocation(line: 295, column: 38, scope: !2561)
!2566 = !DILocalVariable(name: "flags", scope: !2561, file: !6, line: 296, type: !94, align: 4)
!2567 = !DILocation(line: 296, column: 15, scope: !2561)
!2568 = !DILocation(line: 296, column: 23, scope: !2561)
!2569 = !DILocalVariable(name: "width", scope: !2561, file: !6, line: 297, type: !94, align: 4)
!2570 = !DILocation(line: 297, column: 9, scope: !2561)
!2571 = !DILocation(line: 297, column: 17, scope: !2561)
!2572 = !DILocation(line: 303, column: 4, scope: !2561)
!2573 = !DILocation(line: 304, column: 4, scope: !2561)
!2574 = !DILocation(line: 304, column: 17, scope: !2561)
!2575 = !DILocalVariable(name: "size", scope: !2561, file: !6, line: 305, type: !207, align: 8)
!2576 = !DILocation(line: 305, column: 8, scope: !2561)
!2577 = !DILocation(line: 305, column: 15, scope: !2561)
!2578 = !DILocalVariable(name: "temp", scope: !2561, file: !6, line: 307, type: !2579, align: 8)
!2579 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "String*", baseType: !466, size: 64, align: 64, dwarfAddressSpace: 0)
!2580 = !DILocation(line: 307, column: 12, scope: !2561)
!2581 = !DILocation(line: 307, column: 20, scope: !2561)
!2582 = !DILocalVariable(name: "ptr", scope: !2561, file: !6, line: 308, type: !21, align: 8)
!2583 = !DILocation(line: 308, column: 10, scope: !2561)
!2584 = !DILocation(line: 308, column: 23, scope: !2561)
!2585 = !DILocalVariable(name: "slen", scope: !2561, file: !6, line: 309, type: !207, align: 8)
!2586 = !DILocation(line: 309, column: 8, scope: !2561)
!2587 = !DILocation(line: 309, column: 15, scope: !2561)
!2588 = !DILocalVariable(name: "len", scope: !2561, file: !6, line: 310, type: !207, align: 8)
!2589 = !DILocation(line: 310, column: 8, scope: !2561)
!2590 = !DILocation(line: 310, column: 14, scope: !2561)
!2591 = !DILocation(line: 300, column: 5, scope: !2592)
!2592 = distinct !DILexicalBlock(scope: !2561, file: !6, line: 299, column: 4)
!2593 = !DILocation(line: 300, column: 18, scope: !2592)
!2594 = !DILocation(line: 301, column: 5, scope: !2592)
!2595 = !DILocation(line: 301, column: 18, scope: !2592)
!2596 = !DILocalVariable(name: "i", scope: !2597, file: !6, line: 311, type: !207, align: 8)
!2597 = distinct !DILexicalBlock(scope: !2561, file: !6, line: 311, column: 4)
!2598 = !DILocation(line: 311, column: 13, scope: !2597)
!2599 = !DILocation(line: 311, column: 17, scope: !2597)
!2600 = !DILocation(line: 311, column: 20, scope: !2597)
!2601 = !DILocation(line: 311, column: 24, scope: !2597)
!2602 = !DILocation(line: 313, column: 9, scope: !2603)
!2603 = distinct !DILexicalBlock(scope: !2597, file: !6, line: 312, column: 4)
!2604 = !DILocation(line: 313, column: 17, scope: !2603)
!2605 = !DILocation(line: 313, column: 24, scope: !2603)
!2606 = !DILocation(line: 300, column: 5, scope: !2607)
!2607 = distinct !DILexicalBlock(scope: !2561, file: !6, line: 299, column: 4)
!2608 = !DILocation(line: 300, column: 18, scope: !2607)
!2609 = !DILocation(line: 301, column: 5, scope: !2607)
!2610 = !DILocation(line: 301, column: 18, scope: !2607)
!2611 = !DILocation(line: 314, column: 5, scope: !2603)
!2612 = !DILocation(line: 189, column: 20, scope: !2613, inlinedAt: !2614)
!2613 = distinct !DISubprogram(name: "any_make", linkageName: "any_make", scope: !215, file: !215, line: 187, scopeLine: 187, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2614 = !DILocation(line: 314, column: 25, scope: !2603)
!2615 = !DILocation(line: 189, column: 25, scope: !2613, inlinedAt: !2614)
!2616 = !DILocation(line: 314, column: 12, scope: !2603)
!2617 = !DILocation(line: 300, column: 5, scope: !2618)
!2618 = distinct !DILexicalBlock(scope: !2561, file: !6, line: 299, column: 4)
!2619 = !DILocation(line: 300, column: 18, scope: !2618)
!2620 = !DILocation(line: 301, column: 5, scope: !2618)
!2621 = !DILocation(line: 301, column: 18, scope: !2618)
!2622 = !DILocation(line: 315, column: 5, scope: !2603)
!2623 = !DILocation(line: 315, column: 12, scope: !2603)
!2624 = !DILocation(line: 311, column: 30, scope: !2597)
!2625 = !DILocation(line: 317, column: 4, scope: !2561)
!2626 = !DILocation(line: 317, column: 11, scope: !2561)
!2627 = !DILocation(line: 300, column: 5, scope: !2628)
!2628 = distinct !DILexicalBlock(scope: !2561, file: !6, line: 299, column: 4)
!2629 = !DILocation(line: 300, column: 18, scope: !2628)
!2630 = !DILocation(line: 301, column: 5, scope: !2628)
!2631 = !DILocation(line: 301, column: 18, scope: !2628)
!2632 = !DILocation(line: 318, column: 11, scope: !2561)
!2633 = !DILocation(line: 300, column: 5, scope: !2634)
!2634 = distinct !DILexicalBlock(scope: !2561, file: !6, line: 299, column: 4)
!2635 = !DILocation(line: 300, column: 18, scope: !2634)
!2636 = !DILocation(line: 301, column: 5, scope: !2634)
!2637 = !DILocation(line: 301, column: 18, scope: !2634)
!2638 = !DILocation(line: 164, column: 33, scope: !2639, inlinedAt: !2640)
!2639 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !215, file: !215, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2640 = !DILocation(line: 321, column: 4, scope: !2641)
!2641 = distinct !DILexicalBlock(scope: !2151, file: !6, line: 321, column: 4)
!2642 = !DILocation(line: 164, column: 2, scope: !2639, inlinedAt: !2640)
!2643 = !DILocation(line: 166, column: 2, scope: !2639, inlinedAt: !2640)
!2644 = !DILocation(line: 324, column: 9, scope: !2059)
!2645 = distinct !DISubprogram(name: "vprintf", linkageName: "std.io.Formatter.vprintf", scope: !6, file: !6, line: 356, type: !1872, scopeLine: 356, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2646 = !DILocation(line: 357, column: 1, scope: !2645)
!2647 = !DILocalVariable(name: "self", arg: 1, scope: !2645, file: !6, line: 356, type: !1847)
!2648 = !DILocation(line: 356, column: 27, scope: !2645)
!2649 = !DILocalVariable(name: "format", arg: 2, scope: !2645, file: !6, line: 356, type: !466)
!2650 = !DILocation(line: 356, column: 41, scope: !2645)
!2651 = !DILocalVariable(name: "anys", arg: 3, scope: !2645, file: !6, line: 356, type: !1874)
!2652 = !DILocation(line: 356, column: 55, scope: !2645)
!2653 = !DILocation(line: 358, column: 2, scope: !2645)
!2654 = !DILocation(line: 358, column: 21, scope: !2645)
!2655 = !DILocation(line: 359, column: 7, scope: !2645)
!2656 = !DILocation(line: 362, column: 3, scope: !2657)
!2657 = distinct !DILexicalBlock(scope: !2645, file: !6, line: 360, column: 2)
!2658 = !DILocation(line: 362, column: 18, scope: !2657)
!2659 = !DILocalVariable(name: "total_len", scope: !2645, file: !6, line: 364, type: !207, align: 8)
!2660 = !DILocation(line: 364, column: 6, scope: !2645)
!2661 = !DILocalVariable(name: "format_len", scope: !2645, file: !6, line: 365, type: !207, align: 8)
!2662 = !DILocation(line: 365, column: 6, scope: !2645)
!2663 = !DILocation(line: 365, column: 19, scope: !2645)
!2664 = !DILocalVariable(name: "variant_index", scope: !2645, file: !6, line: 366, type: !207, align: 8)
!2665 = !DILocation(line: 366, column: 6, scope: !2645)
!2666 = !DILocation(line: 366, column: 22, scope: !2645)
!2667 = !DILocalVariable(name: "i", scope: !2668, file: !6, line: 367, type: !207, align: 8)
!2668 = distinct !DILexicalBlock(scope: !2645, file: !6, line: 367, column: 2)
!2669 = !DILocation(line: 367, column: 11, scope: !2668)
!2670 = !DILocation(line: 367, column: 15, scope: !2668)
!2671 = !DILocation(line: 367, column: 18, scope: !2668)
!2672 = !DILocation(line: 367, column: 22, scope: !2668)
!2673 = !DILocalVariable(name: "c", scope: !2674, file: !6, line: 370, type: !11, align: 1)
!2674 = distinct !DILexicalBlock(scope: !2668, file: !6, line: 368, column: 2)
!2675 = !DILocation(line: 370, column: 8, scope: !2674)
!2676 = !DILocation(line: 370, column: 12, scope: !2674)
!2677 = !DILocation(line: 370, column: 19, scope: !2674)
!2678 = !DILocation(line: 371, column: 7, scope: !2674)
!2679 = !DILocation(line: 374, column: 4, scope: !2680)
!2680 = distinct !DILexicalBlock(scope: !2674, file: !6, line: 372, column: 3)
!2681 = !DILocation(line: 374, column: 17, scope: !2680)
!2682 = !DILocation(line: 375, column: 4, scope: !2680)
!2683 = !DILocation(line: 377, column: 3, scope: !2674)
!2684 = !DILocation(line: 378, column: 7, scope: !2674)
!2685 = !DILocation(line: 378, column: 12, scope: !2674)
!2686 = !DILocation(line: 336, column: 3, scope: !2687, inlinedAt: !2688)
!2687 = distinct !DISubprogram(name: "@report_fault", linkageName: "@report_fault", scope: !6, file: !6, line: 334, scopeLine: 334, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2688 = !DILocation(line: 378, column: 31, scope: !2674)
!2689 = !DILocation(line: 337, column: 9, scope: !2687, inlinedAt: !2688)
!2690 = !DILocation(line: 379, column: 7, scope: !2674)
!2691 = !DILocation(line: 379, column: 14, scope: !2674)
!2692 = !DILocation(line: 380, column: 7, scope: !2674)
!2693 = !DILocation(line: 382, column: 4, scope: !2694)
!2694 = distinct !DILexicalBlock(scope: !2674, file: !6, line: 381, column: 3)
!2695 = !DILocation(line: 382, column: 17, scope: !2694)
!2696 = !DILocation(line: 383, column: 4, scope: !2694)
!2697 = !DILocation(line: 386, column: 3, scope: !2674)
!2698 = !DILocation(line: 387, column: 3, scope: !2674)
!2699 = !DILocation(line: 391, column: 15, scope: !2700)
!2700 = distinct !DILexicalBlock(scope: !2701, file: !6, line: 391, column: 15)
!2701 = distinct !DILexicalBlock(scope: !2702, file: !6, line: 389, column: 4)
!2702 = distinct !DILexicalBlock(scope: !2703, file: !6, line: 388, column: 3)
!2703 = distinct !DILexicalBlock(scope: !2674, file: !6, line: 387, column: 3)
!2704 = !DILocation(line: 391, column: 36, scope: !2700)
!2705 = !DILocation(line: 392, column: 15, scope: !2706)
!2706 = distinct !DILexicalBlock(scope: !2701, file: !6, line: 392, column: 15)
!2707 = !DILocation(line: 392, column: 33, scope: !2706)
!2708 = !DILocation(line: 393, column: 15, scope: !2709)
!2709 = distinct !DILexicalBlock(scope: !2701, file: !6, line: 393, column: 15)
!2710 = !DILocation(line: 393, column: 33, scope: !2709)
!2711 = !DILocation(line: 394, column: 15, scope: !2712)
!2712 = distinct !DILexicalBlock(scope: !2701, file: !6, line: 394, column: 15)
!2713 = !DILocation(line: 394, column: 34, scope: !2712)
!2714 = !DILocation(line: 395, column: 15, scope: !2715)
!2715 = distinct !DILexicalBlock(scope: !2701, file: !6, line: 395, column: 15)
!2716 = !DILocation(line: 395, column: 33, scope: !2715)
!2717 = !DILocation(line: 396, column: 14, scope: !2718)
!2718 = distinct !DILexicalBlock(scope: !2701, file: !6, line: 396, column: 14)
!2719 = !DILocation(line: 398, column: 10, scope: !2702)
!2720 = !DILocation(line: 398, column: 15, scope: !2702)
!2721 = !DILocation(line: 398, column: 8, scope: !2702)
!2722 = !DILocation(line: 336, column: 3, scope: !2723, inlinedAt: !2724)
!2723 = distinct !DISubprogram(name: "@report_fault", linkageName: "@report_fault", scope: !6, file: !6, line: 334, scopeLine: 334, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2724 = !DILocation(line: 398, column: 34, scope: !2702)
!2725 = !DILocation(line: 337, column: 9, scope: !2723, inlinedAt: !2724)
!2726 = !DILocation(line: 399, column: 8, scope: !2702)
!2727 = !DILocation(line: 399, column: 15, scope: !2702)
!2728 = !DILocalVariable(name: "w", scope: !2674, file: !6, line: 402, type: !3, align: 4)
!2729 = !DILocation(line: 402, column: 8, scope: !2674)
!2730 = !DILocation(line: 402, column: 48, scope: !2674)
!2731 = !DILocation(line: 402, column: 86, scope: !2674)
!2732 = !DILocation(line: 402, column: 12, scope: !2674)
!2733 = !DILocation(line: 403, column: 13, scope: !2674)
!2734 = !DILocation(line: 336, column: 3, scope: !2735, inlinedAt: !2736)
!2735 = distinct !DISubprogram(name: "@report_fault", linkageName: "@report_fault", scope: !6, file: !6, line: 334, scopeLine: 334, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2736 = !DILocation(line: 403, column: 23, scope: !2674)
!2737 = !DILocation(line: 337, column: 9, scope: !2735, inlinedAt: !2736)
!2738 = !DILocation(line: 404, column: 7, scope: !2674)
!2739 = !DILocation(line: 404, column: 14, scope: !2674)
!2740 = !DILocation(line: 405, column: 7, scope: !2674)
!2741 = !DILocation(line: 407, column: 4, scope: !2742)
!2742 = distinct !DILexicalBlock(scope: !2674, file: !6, line: 406, column: 3)
!2743 = !DILocation(line: 407, column: 22, scope: !2742)
!2744 = !DILocation(line: 408, column: 9, scope: !2742)
!2745 = !DILocation(line: 410, column: 3, scope: !2674)
!2746 = !DILocation(line: 410, column: 16, scope: !2674)
!2747 = !DILocation(line: 412, column: 3, scope: !2674)
!2748 = !DILocation(line: 412, column: 15, scope: !2674)
!2749 = !DILocation(line: 413, column: 7, scope: !2674)
!2750 = !DILocation(line: 415, column: 4, scope: !2751)
!2751 = distinct !DILexicalBlock(scope: !2674, file: !6, line: 414, column: 3)
!2752 = !DILocation(line: 415, column: 27, scope: !2751)
!2753 = !DILocation(line: 416, column: 10, scope: !2751)
!2754 = !DILocation(line: 416, column: 15, scope: !2751)
!2755 = !DILocation(line: 416, column: 8, scope: !2751)
!2756 = !DILocation(line: 336, column: 3, scope: !2757, inlinedAt: !2758)
!2757 = distinct !DISubprogram(name: "@report_fault", linkageName: "@report_fault", scope: !6, file: !6, line: 334, scopeLine: 334, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2758 = !DILocation(line: 416, column: 34, scope: !2751)
!2759 = !DILocation(line: 337, column: 9, scope: !2757, inlinedAt: !2758)
!2760 = !DILocalVariable(name: "prec", scope: !2751, file: !6, line: 417, type: !3, align: 4)
!2761 = !DILocation(line: 417, column: 9, scope: !2751)
!2762 = !DILocation(line: 417, column: 52, scope: !2751)
!2763 = !DILocation(line: 417, column: 90, scope: !2751)
!2764 = !DILocation(line: 417, column: 16, scope: !2751)
!2765 = !DILocation(line: 418, column: 14, scope: !2751)
!2766 = !DILocation(line: 336, column: 3, scope: !2767, inlinedAt: !2768)
!2767 = distinct !DISubprogram(name: "@report_fault", linkageName: "@report_fault", scope: !6, file: !6, line: 334, scopeLine: 334, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2768 = !DILocation(line: 418, column: 27, scope: !2751)
!2769 = !DILocation(line: 337, column: 9, scope: !2767, inlinedAt: !2768)
!2770 = !DILocation(line: 419, column: 4, scope: !2751)
!2771 = !DILocation(line: 419, column: 16, scope: !2751)
!2772 = !DILocation(line: 419, column: 27, scope: !2751)
!2773 = !DILocation(line: 419, column: 31, scope: !2751)
!2774 = !DILocation(line: 420, column: 8, scope: !2751)
!2775 = !DILocation(line: 420, column: 15, scope: !2751)
!2776 = !DILocalVariable(name: "base", scope: !2674, file: !6, line: 424, type: !94, align: 4)
!2777 = !DILocation(line: 424, column: 8, scope: !2674)
!2778 = !DILocation(line: 424, column: 15, scope: !2674)
!2779 = !DILocation(line: 425, column: 7, scope: !2674)
!2780 = !DILocation(line: 425, column: 24, scope: !2674)
!2781 = !DILocation(line: 30, column: 6, scope: !2782, inlinedAt: !2783)
!2782 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !28, file: !28, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2783 = !DILocation(line: 427, column: 4, scope: !2784)
!2784 = distinct !DILexicalBlock(scope: !2674, file: !6, line: 426, column: 3)
!2785 = !DILocation(line: 30, column: 31, scope: !2782, inlinedAt: !2783)
!2786 = !DILocation(line: 31, column: 2, scope: !2782, inlinedAt: !2783)
!2787 = !DILocation(line: 31, column: 21, scope: !2782, inlinedAt: !2783)
!2788 = !DILocation(line: 32, column: 9, scope: !2782, inlinedAt: !2783)
!2789 = !DILocation(line: 428, column: 4, scope: !2784)
!2790 = !DILocation(line: 428, column: 17, scope: !2784)
!2791 = !DILocation(line: 429, column: 4, scope: !2784)
!2792 = !DILocalVariable(name: "current", scope: !2674, file: !6, line: 431, type: !1878, align: 8)
!2793 = !DILocation(line: 431, column: 7, scope: !2674)
!2794 = !DILocation(line: 431, column: 17, scope: !2674)
!2795 = !DILocation(line: 431, column: 22, scope: !2674)
!2796 = !DILocation(line: 435, column: 12, scope: !2797)
!2797 = distinct !DILexicalBlock(scope: !2798, file: !6, line: 435, column: 5)
!2798 = distinct !DILexicalBlock(scope: !2674, file: !6, line: 432, column: 3)
!2799 = !DILocation(line: 436, column: 5, scope: !2797)
!2800 = !DILocation(line: 436, column: 23, scope: !2797)
!2801 = !DILocation(line: 438, column: 5, scope: !2802)
!2802 = distinct !DILexicalBlock(scope: !2798, file: !6, line: 438, column: 5)
!2803 = !DILocation(line: 438, column: 28, scope: !2802)
!2804 = !DILocation(line: 439, column: 5, scope: !2802)
!2805 = !DILocation(line: 441, column: 12, scope: !2806)
!2806 = distinct !DILexicalBlock(scope: !2798, file: !6, line: 441, column: 5)
!2807 = !DILocation(line: 443, column: 5, scope: !2808)
!2808 = distinct !DILexicalBlock(scope: !2798, file: !6, line: 443, column: 5)
!2809 = !DILocation(line: 443, column: 28, scope: !2808)
!2810 = !DILocation(line: 444, column: 5, scope: !2808)
!2811 = !DILocation(line: 446, column: 12, scope: !2812)
!2812 = distinct !DILexicalBlock(scope: !2798, file: !6, line: 446, column: 5)
!2813 = !DILocation(line: 448, column: 5, scope: !2814)
!2814 = distinct !DILexicalBlock(scope: !2798, file: !6, line: 448, column: 5)
!2815 = !DILocation(line: 448, column: 28, scope: !2814)
!2816 = !DILocation(line: 449, column: 5, scope: !2814)
!2817 = !DILocation(line: 451, column: 12, scope: !2818)
!2818 = distinct !DILexicalBlock(scope: !2798, file: !6, line: 451, column: 5)
!2819 = !DILocation(line: 453, column: 5, scope: !2820)
!2820 = distinct !DILexicalBlock(scope: !2798, file: !6, line: 453, column: 5)
!2821 = !DILocation(line: 453, column: 28, scope: !2820)
!2822 = !DILocation(line: 454, column: 5, scope: !2820)
!2823 = !DILocation(line: 456, column: 5, scope: !2824)
!2824 = distinct !DILexicalBlock(scope: !2798, file: !6, line: 456, column: 5)
!2825 = !DILocalVariable(name: "len", scope: !2826, file: !6, line: 342, type: !208, align: 8)
!2826 = distinct !DISubprogram(name: "@wrap_bad", linkageName: "@wrap_bad", scope: !6, file: !6, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2827 = !DILocation(line: 342, column: 7, scope: !2826, inlinedAt: !2828)
!2828 = !DILocation(line: 456, column: 18, scope: !2824)
!2829 = !DILocation(line: 456, column: 44, scope: !2826, inlinedAt: !2828)
!2830 = !DILocation(line: 342, column: 13, scope: !2826, inlinedAt: !2828)
!2831 = !DILocalVariable(name: "err", scope: !2826, file: !6, line: 343, type: !115, align: 8)
!2832 = !DILocation(line: 343, column: 12, scope: !2826, inlinedAt: !2828)
!2833 = !DILocation(line: 343, column: 18, scope: !2826, inlinedAt: !2828)
!2834 = !DILocation(line: 345, column: 8, scope: !2826, inlinedAt: !2828)
!2835 = !DILocation(line: 346, column: 8, scope: !2826, inlinedAt: !2828)
!2836 = !DILocation(line: 30, column: 6, scope: !2837, inlinedAt: !2838)
!2837 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !28, file: !28, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2838 = !DILocation(line: 347, column: 11, scope: !2839, inlinedAt: !2828)
!2839 = distinct !DILexicalBlock(scope: !2826, file: !6, line: 347, column: 4)
!2840 = !DILocation(line: 30, column: 31, scope: !2837, inlinedAt: !2838)
!2841 = !DILocation(line: 31, column: 2, scope: !2837, inlinedAt: !2838)
!2842 = !DILocation(line: 31, column: 21, scope: !2837, inlinedAt: !2838)
!2843 = !DILocation(line: 32, column: 9, scope: !2837, inlinedAt: !2838)
!2844 = !DILocation(line: 30, column: 6, scope: !2845, inlinedAt: !2846)
!2845 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !28, file: !28, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2846 = !DILocation(line: 349, column: 10, scope: !2847, inlinedAt: !2828)
!2847 = distinct !DILexicalBlock(scope: !2826, file: !6, line: 349, column: 4)
!2848 = !DILocation(line: 30, column: 31, scope: !2845, inlinedAt: !2846)
!2849 = !DILocation(line: 31, column: 2, scope: !2845, inlinedAt: !2846)
!2850 = !DILocation(line: 31, column: 21, scope: !2845, inlinedAt: !2846)
!2851 = !DILocation(line: 32, column: 9, scope: !2845, inlinedAt: !2846)
!2852 = !DILocation(line: 350, column: 4, scope: !2847, inlinedAt: !2828)
!2853 = !DILocation(line: 351, column: 11, scope: !2847, inlinedAt: !2828)
!2854 = !DILocation(line: 353, column: 9, scope: !2826, inlinedAt: !2828)
!2855 = !DILocation(line: 457, column: 5, scope: !2824)
!2856 = !DILocation(line: 459, column: 5, scope: !2857)
!2857 = distinct !DILexicalBlock(scope: !2798, file: !6, line: 459, column: 5)
!2858 = !DILocation(line: 459, column: 28, scope: !2857)
!2859 = !DILocation(line: 460, column: 5, scope: !2857)
!2860 = !DILocation(line: 462, column: 5, scope: !2861)
!2861 = distinct !DILexicalBlock(scope: !2798, file: !6, line: 462, column: 5)
!2862 = !DILocalVariable(name: "len", scope: !2863, file: !6, line: 342, type: !208, align: 8)
!2863 = distinct !DISubprogram(name: "@wrap_bad", linkageName: "@wrap_bad", scope: !6, file: !6, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2864 = !DILocation(line: 342, column: 7, scope: !2863, inlinedAt: !2865)
!2865 = !DILocation(line: 462, column: 18, scope: !2861)
!2866 = !DILocation(line: 462, column: 44, scope: !2863, inlinedAt: !2865)
!2867 = !DILocation(line: 342, column: 13, scope: !2863, inlinedAt: !2865)
!2868 = !DILocalVariable(name: "err", scope: !2863, file: !6, line: 343, type: !115, align: 8)
!2869 = !DILocation(line: 343, column: 12, scope: !2863, inlinedAt: !2865)
!2870 = !DILocation(line: 343, column: 18, scope: !2863, inlinedAt: !2865)
!2871 = !DILocation(line: 345, column: 8, scope: !2863, inlinedAt: !2865)
!2872 = !DILocation(line: 346, column: 8, scope: !2863, inlinedAt: !2865)
!2873 = !DILocation(line: 30, column: 6, scope: !2874, inlinedAt: !2875)
!2874 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !28, file: !28, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2875 = !DILocation(line: 347, column: 11, scope: !2876, inlinedAt: !2865)
!2876 = distinct !DILexicalBlock(scope: !2863, file: !6, line: 347, column: 4)
!2877 = !DILocation(line: 30, column: 31, scope: !2874, inlinedAt: !2875)
!2878 = !DILocation(line: 31, column: 2, scope: !2874, inlinedAt: !2875)
!2879 = !DILocation(line: 31, column: 21, scope: !2874, inlinedAt: !2875)
!2880 = !DILocation(line: 32, column: 9, scope: !2874, inlinedAt: !2875)
!2881 = !DILocation(line: 30, column: 6, scope: !2882, inlinedAt: !2883)
!2882 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !28, file: !28, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2883 = !DILocation(line: 349, column: 10, scope: !2884, inlinedAt: !2865)
!2884 = distinct !DILexicalBlock(scope: !2863, file: !6, line: 349, column: 4)
!2885 = !DILocation(line: 30, column: 31, scope: !2882, inlinedAt: !2883)
!2886 = !DILocation(line: 31, column: 2, scope: !2882, inlinedAt: !2883)
!2887 = !DILocation(line: 31, column: 21, scope: !2882, inlinedAt: !2883)
!2888 = !DILocation(line: 32, column: 9, scope: !2882, inlinedAt: !2883)
!2889 = !DILocation(line: 350, column: 4, scope: !2884, inlinedAt: !2865)
!2890 = !DILocation(line: 351, column: 11, scope: !2884, inlinedAt: !2865)
!2891 = !DILocation(line: 353, column: 9, scope: !2863, inlinedAt: !2865)
!2892 = !DILocation(line: 463, column: 5, scope: !2861)
!2893 = !DILocation(line: 465, column: 5, scope: !2894)
!2894 = distinct !DILexicalBlock(scope: !2798, file: !6, line: 465, column: 5)
!2895 = !DILocation(line: 465, column: 28, scope: !2894)
!2896 = !DILocation(line: 466, column: 5, scope: !2894)
!2897 = !DILocation(line: 468, column: 5, scope: !2898)
!2898 = distinct !DILexicalBlock(scope: !2798, file: !6, line: 468, column: 5)
!2899 = !DILocalVariable(name: "len", scope: !2900, file: !6, line: 342, type: !208, align: 8)
!2900 = distinct !DISubprogram(name: "@wrap_bad", linkageName: "@wrap_bad", scope: !6, file: !6, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2901 = !DILocation(line: 342, column: 7, scope: !2900, inlinedAt: !2902)
!2902 = !DILocation(line: 468, column: 18, scope: !2898)
!2903 = !DILocation(line: 468, column: 44, scope: !2900, inlinedAt: !2902)
!2904 = !DILocation(line: 342, column: 13, scope: !2900, inlinedAt: !2902)
!2905 = !DILocalVariable(name: "err", scope: !2900, file: !6, line: 343, type: !115, align: 8)
!2906 = !DILocation(line: 343, column: 12, scope: !2900, inlinedAt: !2902)
!2907 = !DILocation(line: 343, column: 18, scope: !2900, inlinedAt: !2902)
!2908 = !DILocation(line: 345, column: 8, scope: !2900, inlinedAt: !2902)
!2909 = !DILocation(line: 346, column: 8, scope: !2900, inlinedAt: !2902)
!2910 = !DILocation(line: 30, column: 6, scope: !2911, inlinedAt: !2912)
!2911 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !28, file: !28, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2912 = !DILocation(line: 347, column: 11, scope: !2913, inlinedAt: !2902)
!2913 = distinct !DILexicalBlock(scope: !2900, file: !6, line: 347, column: 4)
!2914 = !DILocation(line: 30, column: 31, scope: !2911, inlinedAt: !2912)
!2915 = !DILocation(line: 31, column: 2, scope: !2911, inlinedAt: !2912)
!2916 = !DILocation(line: 31, column: 21, scope: !2911, inlinedAt: !2912)
!2917 = !DILocation(line: 32, column: 9, scope: !2911, inlinedAt: !2912)
!2918 = !DILocation(line: 30, column: 6, scope: !2919, inlinedAt: !2920)
!2919 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !28, file: !28, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2920 = !DILocation(line: 349, column: 10, scope: !2921, inlinedAt: !2902)
!2921 = distinct !DILexicalBlock(scope: !2900, file: !6, line: 349, column: 4)
!2922 = !DILocation(line: 30, column: 31, scope: !2919, inlinedAt: !2920)
!2923 = !DILocation(line: 31, column: 2, scope: !2919, inlinedAt: !2920)
!2924 = !DILocation(line: 31, column: 21, scope: !2919, inlinedAt: !2920)
!2925 = !DILocation(line: 32, column: 9, scope: !2919, inlinedAt: !2920)
!2926 = !DILocation(line: 350, column: 4, scope: !2921, inlinedAt: !2902)
!2927 = !DILocation(line: 351, column: 11, scope: !2921, inlinedAt: !2902)
!2928 = !DILocation(line: 353, column: 9, scope: !2900, inlinedAt: !2902)
!2929 = !DILocation(line: 469, column: 5, scope: !2898)
!2930 = !DILocation(line: 471, column: 5, scope: !2931)
!2931 = distinct !DILexicalBlock(scope: !2798, file: !6, line: 471, column: 5)
!2932 = !DILocation(line: 471, column: 28, scope: !2931)
!2933 = !DILocation(line: 472, column: 5, scope: !2931)
!2934 = !DILocation(line: 474, column: 5, scope: !2935)
!2935 = distinct !DILexicalBlock(scope: !2798, file: !6, line: 474, column: 5)
!2936 = !DILocalVariable(name: "len", scope: !2937, file: !6, line: 342, type: !208, align: 8)
!2937 = distinct !DISubprogram(name: "@wrap_bad", linkageName: "@wrap_bad", scope: !6, file: !6, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2938 = !DILocation(line: 342, column: 7, scope: !2937, inlinedAt: !2939)
!2939 = !DILocation(line: 474, column: 18, scope: !2935)
!2940 = !DILocation(line: 474, column: 44, scope: !2937, inlinedAt: !2939)
!2941 = !DILocation(line: 342, column: 13, scope: !2937, inlinedAt: !2939)
!2942 = !DILocalVariable(name: "err", scope: !2937, file: !6, line: 343, type: !115, align: 8)
!2943 = !DILocation(line: 343, column: 12, scope: !2937, inlinedAt: !2939)
!2944 = !DILocation(line: 343, column: 18, scope: !2937, inlinedAt: !2939)
!2945 = !DILocation(line: 345, column: 8, scope: !2937, inlinedAt: !2939)
!2946 = !DILocation(line: 346, column: 8, scope: !2937, inlinedAt: !2939)
!2947 = !DILocation(line: 30, column: 6, scope: !2948, inlinedAt: !2949)
!2948 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !28, file: !28, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2949 = !DILocation(line: 347, column: 11, scope: !2950, inlinedAt: !2939)
!2950 = distinct !DILexicalBlock(scope: !2937, file: !6, line: 347, column: 4)
!2951 = !DILocation(line: 30, column: 31, scope: !2948, inlinedAt: !2949)
!2952 = !DILocation(line: 31, column: 2, scope: !2948, inlinedAt: !2949)
!2953 = !DILocation(line: 31, column: 21, scope: !2948, inlinedAt: !2949)
!2954 = !DILocation(line: 32, column: 9, scope: !2948, inlinedAt: !2949)
!2955 = !DILocation(line: 30, column: 6, scope: !2956, inlinedAt: !2957)
!2956 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !28, file: !28, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2957 = !DILocation(line: 349, column: 10, scope: !2958, inlinedAt: !2939)
!2958 = distinct !DILexicalBlock(scope: !2937, file: !6, line: 349, column: 4)
!2959 = !DILocation(line: 30, column: 31, scope: !2956, inlinedAt: !2957)
!2960 = !DILocation(line: 31, column: 2, scope: !2956, inlinedAt: !2957)
!2961 = !DILocation(line: 31, column: 21, scope: !2956, inlinedAt: !2957)
!2962 = !DILocation(line: 32, column: 9, scope: !2956, inlinedAt: !2957)
!2963 = !DILocation(line: 350, column: 4, scope: !2958, inlinedAt: !2939)
!2964 = !DILocation(line: 351, column: 11, scope: !2958, inlinedAt: !2939)
!2965 = !DILocation(line: 353, column: 9, scope: !2937, inlinedAt: !2939)
!2966 = !DILocation(line: 475, column: 5, scope: !2935)
!2967 = !DILocation(line: 477, column: 5, scope: !2968)
!2968 = distinct !DILexicalBlock(scope: !2798, file: !6, line: 477, column: 5)
!2969 = !DILocation(line: 477, column: 18, scope: !2968)
!2970 = !DILocation(line: 478, column: 5, scope: !2968)
!2971 = !DILocation(line: 480, column: 5, scope: !2972)
!2972 = distinct !DILexicalBlock(scope: !2798, file: !6, line: 480, column: 5)
!2973 = !DILocation(line: 480, column: 28, scope: !2972)
!2974 = !DILocation(line: 481, column: 5, scope: !2972)
!2975 = !DILocalVariable(name: "out", scope: !2976, file: !6, line: 483, type: !203, align: 8)
!2976 = distinct !DILexicalBlock(scope: !2798, file: !6, line: 483, column: 14)
!2977 = !DILocation(line: 483, column: 21, scope: !2976)
!2978 = !DILocation(line: 484, column: 13, scope: !2979)
!2979 = distinct !DILexicalBlock(scope: !2976, file: !6, line: 484, column: 5)
!2980 = !DILocation(line: 486, column: 11, scope: !2979)
!2981 = !DILocalVariable(name: "current", scope: !2982, file: !6, line: 431, type: !1482, align: 8)
!2982 = distinct !DILexicalBlock(scope: !2979, file: !6, line: 487, column: 7)
!2983 = !DILocation(line: 431, column: 7, scope: !2982)
!2984 = !DILocation(line: 487, column: 14, scope: !2982)
!2985 = !DILocation(line: 488, column: 11, scope: !2979)
!2986 = !DILocalVariable(name: "current", scope: !2987, file: !6, line: 431, type: !2988, align: 8)
!2987 = distinct !DILexicalBlock(scope: !2979, file: !6, line: 489, column: 7)
!2988 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ichar[]*", baseType: !2989, size: 64, align: 64, dwarfAddressSpace: 0)
!2989 = !DICompositeType(tag: DW_TAG_structure_type, name: "ichar[]", size: 128, align: 64, elements: !2990, identifier: "ichar[]")
!2990 = !{!2991, !2993}
!2991 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2989, baseType: !2992, size: 64, align: 64)
!2992 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ichar*", baseType: !2190, size: 64, align: 64, dwarfAddressSpace: 0)
!2993 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !2989, baseType: !207, size: 64, align: 64, offset: 64)
!2994 = !DILocation(line: 431, column: 7, scope: !2987)
!2995 = !DILocation(line: 489, column: 23, scope: !2987)
!2996 = !DILocation(line: 489, column: 15, scope: !2987)
!2997 = !DILocation(line: 491, column: 11, scope: !2998)
!2998 = distinct !DILexicalBlock(scope: !2979, file: !6, line: 491, column: 7)
!2999 = !DILocation(line: 491, column: 44, scope: !2998)
!3000 = !DILocation(line: 491, column: 81, scope: !2998)
!3001 = !DILocation(line: 493, column: 22, scope: !3002)
!3002 = distinct !DILexicalBlock(scope: !2998, file: !6, line: 492, column: 7)
!3003 = !DILocation(line: 493, column: 36, scope: !3002)
!3004 = !DILocation(line: 494, column: 8, scope: !3002)
!3005 = !DILocation(line: 496, column: 7, scope: !2998)
!3006 = !DILocation(line: 496, column: 20, scope: !2998)
!3007 = !DILocation(line: 497, column: 7, scope: !2998)
!3008 = !DILocation(line: 499, column: 9, scope: !2976)
!3009 = !DILocalVariable(name: "len", scope: !3010, file: !6, line: 501, type: !207, align: 8)
!3010 = distinct !DILexicalBlock(scope: !2976, file: !6, line: 500, column: 5)
!3011 = !DILocation(line: 501, column: 10, scope: !3010)
!3012 = !DILocation(line: 501, column: 43, scope: !3010)
!3013 = !DILocation(line: 501, column: 16, scope: !3010)
!3014 = !DILocation(line: 502, column: 6, scope: !3010)
!3015 = !DILocation(line: 502, column: 19, scope: !3010)
!3016 = !DILocation(line: 503, column: 6, scope: !3010)
!3017 = !DILocation(line: 503, column: 33, scope: !3010)
!3018 = !DILocation(line: 503, column: 45, scope: !3010)
!3019 = !DILocation(line: 503, column: 19, scope: !3010)
!3020 = !DILocation(line: 504, column: 6, scope: !3010)
!3021 = !DILocation(line: 506, column: 9, scope: !2976)
!3022 = !DILocation(line: 508, column: 6, scope: !3023)
!3023 = distinct !DILexicalBlock(scope: !2976, file: !6, line: 507, column: 5)
!3024 = !DILocation(line: 508, column: 33, scope: !3023)
!3025 = !DILocation(line: 508, column: 45, scope: !3023)
!3026 = !DILocation(line: 508, column: 19, scope: !3023)
!3027 = !DILocation(line: 510, column: 5, scope: !2976)
!3028 = !DILocation(line: 510, column: 45, scope: !2976)
!3029 = !DILocation(line: 510, column: 18, scope: !2976)
!3030 = !DILocation(line: 511, column: 5, scope: !2976)
!3031 = !DILocation(line: 513, column: 9, scope: !3032)
!3032 = distinct !DILexicalBlock(scope: !2798, file: !6, line: 513, column: 5)
!3033 = !DILocalVariable(name: "len", scope: !3034, file: !6, line: 515, type: !207, align: 8)
!3034 = distinct !DILexicalBlock(scope: !3032, file: !6, line: 514, column: 5)
!3035 = !DILocation(line: 515, column: 10, scope: !3034)
!3036 = !DILocation(line: 515, column: 16, scope: !3034)
!3037 = !DILocation(line: 516, column: 6, scope: !3034)
!3038 = !DILocation(line: 516, column: 19, scope: !3034)
!3039 = !DILocation(line: 517, column: 6, scope: !3034)
!3040 = !DILocation(line: 517, column: 33, scope: !3034)
!3041 = !DILocation(line: 517, column: 45, scope: !3034)
!3042 = !DILocation(line: 517, column: 19, scope: !3034)
!3043 = !DILocation(line: 518, column: 6, scope: !3034)
!3044 = !DILocation(line: 520, column: 9, scope: !3032)
!3045 = !DILocalVariable(name: "out_fn", scope: !3046, file: !6, line: 522, type: !1852, align: 8)
!3046 = distinct !DILexicalBlock(scope: !3032, file: !6, line: 521, column: 5)
!3047 = !DILocation(line: 522, column: 15, scope: !3046)
!3048 = !DILocation(line: 522, column: 24, scope: !3046)
!3049 = !DILocation(line: 523, column: 6, scope: !3046)
!3050 = !DILocation(line: 523, column: 31, scope: !3046)
!3051 = !DILocalVariable(name: "len", scope: !3046, file: !6, line: 524, type: !207, align: 8)
!3052 = !DILocation(line: 524, column: 10, scope: !3046)
!3053 = !DILocation(line: 524, column: 16, scope: !3046)
!3054 = !DILocation(line: 525, column: 6, scope: !3046)
!3055 = !DILocation(line: 525, column: 20, scope: !3046)
!3056 = !DILocation(line: 526, column: 6, scope: !3046)
!3057 = !DILocation(line: 526, column: 33, scope: !3046)
!3058 = !DILocation(line: 526, column: 45, scope: !3046)
!3059 = !DILocation(line: 526, column: 19, scope: !3046)
!3060 = !DILocation(line: 528, column: 5, scope: !3032)
!3061 = !DILocation(line: 528, column: 18, scope: !3032)
!3062 = !DILocation(line: 529, column: 5, scope: !3032)
!3063 = !DILocation(line: 531, column: 5, scope: !3064)
!3064 = distinct !DILexicalBlock(scope: !2798, file: !6, line: 531, column: 5)
!3065 = !DILocation(line: 531, column: 26, scope: !3064)
!3066 = !DILocation(line: 532, column: 5, scope: !3064)
!3067 = !DILocation(line: 532, column: 23, scope: !3064)
!3068 = !DILocation(line: 533, column: 12, scope: !3064)
!3069 = !DILocation(line: 30, column: 6, scope: !3070, inlinedAt: !3071)
!3070 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !28, file: !28, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3071 = !DILocation(line: 535, column: 5, scope: !3072)
!3072 = distinct !DILexicalBlock(scope: !2798, file: !6, line: 535, column: 5)
!3073 = !DILocation(line: 30, column: 31, scope: !3070, inlinedAt: !3071)
!3074 = !DILocation(line: 31, column: 2, scope: !3070, inlinedAt: !3071)
!3075 = !DILocation(line: 31, column: 21, scope: !3070, inlinedAt: !3071)
!3076 = !DILocation(line: 32, column: 9, scope: !3070, inlinedAt: !3071)
!3077 = !DILocation(line: 536, column: 5, scope: !3072)
!3078 = !DILocation(line: 536, column: 18, scope: !3072)
!3079 = !DILocation(line: 537, column: 5, scope: !3072)
!3080 = !DILocation(line: 539, column: 7, scope: !2674)
!3081 = !DILocation(line: 541, column: 4, scope: !3082)
!3082 = distinct !DILexicalBlock(scope: !2674, file: !6, line: 540, column: 3)
!3083 = !DILocation(line: 541, column: 22, scope: !3082)
!3084 = !DILocation(line: 542, column: 4, scope: !3082)
!3085 = !DILocation(line: 542, column: 23, scope: !3082)
!3086 = !DILocation(line: 545, column: 7, scope: !2674)
!3087 = !DILocation(line: 545, column: 29, scope: !2674)
!3088 = !DILocation(line: 545, column: 50, scope: !2674)
!3089 = !DILocalVariable(name: "is_neg", scope: !2674, file: !6, line: 547, type: !920, align: 1)
!3090 = !DILocation(line: 547, column: 8, scope: !2674)
!3091 = !DILocation(line: 548, column: 3, scope: !2674)
!3092 = !DILocalVariable(name: "len", scope: !3093, file: !6, line: 342, type: !208, align: 8)
!3093 = distinct !DISubprogram(name: "@wrap_bad", linkageName: "@wrap_bad", scope: !6, file: !6, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3094 = !DILocation(line: 342, column: 7, scope: !3093, inlinedAt: !3095)
!3095 = !DILocation(line: 548, column: 16, scope: !2674)
!3096 = !DILocation(line: 548, column: 42, scope: !3093, inlinedAt: !3095)
!3097 = !DILocation(line: 342, column: 13, scope: !3093, inlinedAt: !3095)
!3098 = !DILocalVariable(name: "err", scope: !3093, file: !6, line: 343, type: !115, align: 8)
!3099 = !DILocation(line: 343, column: 12, scope: !3093, inlinedAt: !3095)
!3100 = !DILocation(line: 343, column: 18, scope: !3093, inlinedAt: !3095)
!3101 = !DILocation(line: 345, column: 8, scope: !3093, inlinedAt: !3095)
!3102 = !DILocation(line: 346, column: 8, scope: !3093, inlinedAt: !3095)
!3103 = !DILocation(line: 30, column: 6, scope: !3104, inlinedAt: !3105)
!3104 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !28, file: !28, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3105 = !DILocation(line: 347, column: 11, scope: !3106, inlinedAt: !3095)
!3106 = distinct !DILexicalBlock(scope: !3093, file: !6, line: 347, column: 4)
!3107 = !DILocation(line: 30, column: 31, scope: !3104, inlinedAt: !3105)
!3108 = !DILocation(line: 31, column: 2, scope: !3104, inlinedAt: !3105)
!3109 = !DILocation(line: 31, column: 21, scope: !3104, inlinedAt: !3105)
!3110 = !DILocation(line: 32, column: 9, scope: !3104, inlinedAt: !3105)
!3111 = !DILocation(line: 30, column: 6, scope: !3112, inlinedAt: !3113)
!3112 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !28, file: !28, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3113 = !DILocation(line: 349, column: 10, scope: !3114, inlinedAt: !3095)
!3114 = distinct !DILexicalBlock(scope: !3093, file: !6, line: 349, column: 4)
!3115 = !DILocation(line: 30, column: 31, scope: !3112, inlinedAt: !3113)
!3116 = !DILocation(line: 31, column: 2, scope: !3112, inlinedAt: !3113)
!3117 = !DILocation(line: 31, column: 21, scope: !3112, inlinedAt: !3113)
!3118 = !DILocation(line: 32, column: 9, scope: !3112, inlinedAt: !3113)
!3119 = !DILocation(line: 350, column: 4, scope: !3114, inlinedAt: !3095)
!3120 = !DILocation(line: 351, column: 11, scope: !3114, inlinedAt: !3095)
!3121 = !DILocation(line: 353, column: 9, scope: !3093, inlinedAt: !3095)
!3122 = !DILocation(line: 367, column: 34, scope: !2668)
!3123 = !DILocation(line: 554, column: 6, scope: !2645)
!3124 = !DILocation(line: 554, column: 31, scope: !2645)
!3125 = !DILocation(line: 555, column: 9, scope: !2645)
!3126 = distinct !DISubprogram(name: "print", linkageName: "std.io.Formatter.print", scope: !6, file: !6, line: 559, type: !3127, scopeLine: 559, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3127 = !DISubroutineType(types: !3128)
!3128 = !{!115, !308, !1847, !466}
!3129 = !DILocation(line: 560, column: 1, scope: !3126)
!3130 = !DILocalVariable(name: "self", arg: 1, scope: !3126, file: !6, line: 559, type: !1847)
!3131 = !DILocation(line: 559, column: 25, scope: !3126)
!3132 = !DILocalVariable(name: "str", arg: 2, scope: !3126, file: !6, line: 559, type: !466)
!3133 = !DILocation(line: 559, column: 39, scope: !3126)
!3134 = !DILocation(line: 561, column: 7, scope: !3126)
!3135 = !DILocation(line: 564, column: 3, scope: !3136)
!3136 = distinct !DILexicalBlock(scope: !3126, file: !6, line: 562, column: 2)
!3137 = !DILocation(line: 564, column: 18, scope: !3136)
!3138 = !DILocation(line: 566, column: 15, scope: !3139)
!3139 = distinct !DILexicalBlock(scope: !3126, file: !6, line: 566, column: 2)
!3140 = !DILocalVariable(name: ".temp", scope: !3139, file: !6, line: 566, type: !207, align: 8)
!3141 = !DILocalVariable(name: "c", scope: !3142, file: !6, line: 566, type: !11, align: 1)
!3142 = distinct !DILexicalBlock(scope: !3139, file: !6, line: 566, column: 20)
!3143 = !DILocation(line: 566, column: 11, scope: !3142)
!3144 = !DILocation(line: 566, column: 15, scope: !3142)
!3145 = !DILocation(line: 566, column: 20, scope: !3142)
!3146 = !DILocation(line: 567, column: 9, scope: !3126)
!3147 = distinct !DISubprogram(name: "out_null_fn", linkageName: "std.io.out_null_fn", scope: !6, file: !6, line: 330, type: !1854, scopeLine: 330, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3148 = !DILocalVariable(name: "data", arg: 1, scope: !3147, file: !6, line: 330, type: !21)
!3149 = !DILocation(line: 330, column: 28, scope: !3147)
!3150 = !DILocalVariable(name: "c", arg: 2, scope: !3147, file: !6, line: 330, type: !11)
!3151 = !DILocation(line: 330, column: 47, scope: !3147)
!3152 = distinct !DISubprogram(name: "available", linkageName: "std.io.available", scope: !9, file: !9, line: 27, type: !3153, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3153 = !DISubroutineType(types: !3154)
!3154 = !{!115, !308, !88}
!3155 = !DILocalVariable(name: "s", arg: 1, scope: !3152, file: !9, line: 27, type: !88)
!3156 = !DILocation(line: 27, column: 28, scope: !3152)
!3157 = !DILocation(line: 29, column: 7, scope: !3152)
!3158 = !DILocation(line: 29, column: 27, scope: !3152)
!3159 = !DILocation(line: 30, column: 7, scope: !3152)
!3160 = !DILocalVariable(name: "curr", scope: !3161, file: !9, line: 32, type: !207, align: 8)
!3161 = distinct !DILexicalBlock(scope: !3152, file: !9, line: 31, column: 2)
!3162 = !DILocation(line: 32, column: 7, scope: !3161)
!3163 = !DILocation(line: 32, column: 24, scope: !3161)
!3164 = !DILocation(line: 32, column: 14, scope: !3161)
!3165 = !DILocalVariable(name: "len", scope: !3161, file: !9, line: 33, type: !207, align: 8)
!3166 = !DILocation(line: 33, column: 7, scope: !3161)
!3167 = !DILocation(line: 33, column: 23, scope: !3161)
!3168 = !DILocation(line: 33, column: 13, scope: !3161)
!3169 = !DILocation(line: 34, column: 10, scope: !3161)
!3170 = !DILocation(line: 34, column: 16, scope: !3161)
!3171 = !DILocation(line: 34, column: 3, scope: !3161)
!3172 = !DILocation(line: 35, column: 10, scope: !3161)
!3173 = !DILocation(line: 35, column: 16, scope: !3161)
!3174 = !DILocation(line: 37, column: 9, scope: !3152)
!3175 = distinct !DISubprogram(name: "copy_to", linkageName: "std.io.copy_to", scope: !9, file: !9, line: 177, type: !3176, scopeLine: 177, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3176 = !DISubroutineType(types: !3177)
!3177 = !{!115, !308, !88, !159, !203}
!3178 = !DILocalVariable(name: "in", arg: 1, scope: !3175, file: !9, line: 177, type: !88)
!3179 = !DILocation(line: 177, column: 26, scope: !3175)
!3180 = !DILocalVariable(name: "dst", arg: 2, scope: !3175, file: !9, line: 177, type: !159)
!3181 = !DILocation(line: 177, column: 40, scope: !3175)
!3182 = !DILocalVariable(name: "buffer", arg: 3, scope: !3175, file: !9, line: 177, type: !203)
!3183 = !DILocation(line: 177, column: 52, scope: !3175)
!3184 = !DILocation(line: 179, column: 6, scope: !3175)
!3185 = !DILocalVariable(name: "total_copied", scope: !3186, file: !9, line: 195, type: !207, align: 8)
!3186 = distinct !DISubprogram(name: "copy_through_buffer", linkageName: "copy_through_buffer", scope: !9, file: !9, line: 193, scopeLine: 193, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3187 = !DILocation(line: 195, column: 6, scope: !3186, inlinedAt: !3188)
!3188 = !DILocation(line: 179, column: 25, scope: !3175)
!3189 = !DILocation(line: 196, column: 2, scope: !3186, inlinedAt: !3188)
!3190 = !DILocalVariable(name: "len", scope: !3191, file: !9, line: 198, type: !208, align: 8)
!3191 = distinct !DILexicalBlock(scope: !3192, file: !9, line: 197, column: 2)
!3192 = distinct !DILexicalBlock(scope: !3186, file: !9, line: 196, column: 2)
!3193 = !DILocation(line: 198, column: 8, scope: !3191, inlinedAt: !3188)
!3194 = !DILocation(line: 198, column: 22, scope: !3191, inlinedAt: !3188)
!3195 = !DILocation(line: 198, column: 14, scope: !3191, inlinedAt: !3188)
!3196 = !DILocalVariable(name: "err", scope: !3191, file: !9, line: 199, type: !115, align: 8)
!3197 = !DILocation(line: 199, column: 13, scope: !3191, inlinedAt: !3188)
!3198 = !DILocation(line: 199, column: 19, scope: !3191, inlinedAt: !3188)
!3199 = !DILocation(line: 201, column: 9, scope: !3191, inlinedAt: !3188)
!3200 = !DILocation(line: 201, column: 29, scope: !3201, inlinedAt: !3188)
!3201 = distinct !DILexicalBlock(scope: !3191, file: !9, line: 201, column: 22)
!3202 = !DILocation(line: 202, column: 20, scope: !3203, inlinedAt: !3188)
!3203 = distinct !DILexicalBlock(scope: !3191, file: !9, line: 202, column: 13)
!3204 = !DILocation(line: 204, column: 7, scope: !3191, inlinedAt: !3188)
!3205 = !DILocation(line: 204, column: 20, scope: !3191, inlinedAt: !3188)
!3206 = !DILocalVariable(name: "written", scope: !3191, file: !9, line: 205, type: !207, align: 8)
!3207 = !DILocation(line: 205, column: 7, scope: !3191, inlinedAt: !3188)
!3208 = !DILocation(line: 205, column: 27, scope: !3191, inlinedAt: !3188)
!3209 = !DILocation(line: 205, column: 34, scope: !3191, inlinedAt: !3188)
!3210 = !DILocation(line: 205, column: 35, scope: !3191, inlinedAt: !3188)
!3211 = !DILocation(line: 205, column: 17, scope: !3191, inlinedAt: !3188)
!3212 = !DILocation(line: 206, column: 3, scope: !3191, inlinedAt: !3188)
!3213 = !DILocation(line: 206, column: 19, scope: !3191, inlinedAt: !3188)
!3214 = !DILocation(line: 207, column: 7, scope: !3191, inlinedAt: !3188)
!3215 = !DILocation(line: 207, column: 18, scope: !3191, inlinedAt: !3188)
!3216 = !DILocation(line: 207, column: 30, scope: !3191, inlinedAt: !3188)
!3217 = !DILocation(line: 180, column: 7, scope: !3175)
!3218 = !DILocation(line: 180, column: 39, scope: !3175)
!3219 = !DILocation(line: 180, column: 27, scope: !3175)
!3220 = !DILocation(line: 181, column: 7, scope: !3175)
!3221 = !DILocation(line: 181, column: 39, scope: !3175)
!3222 = !DILocation(line: 181, column: 27, scope: !3175)
!3223 = !DILocalVariable(name: "total_copied", scope: !3224, file: !9, line: 195, type: !207, align: 8)
!3224 = distinct !DISubprogram(name: "copy_through_buffer", linkageName: "copy_through_buffer", scope: !9, file: !9, line: 193, scopeLine: 193, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3225 = !DILocation(line: 195, column: 6, scope: !3224, inlinedAt: !3226)
!3226 = !DILocation(line: 184, column: 11, scope: !3175)
!3227 = !DILocation(line: 196, column: 2, scope: !3224, inlinedAt: !3226)
!3228 = !DILocalVariable(name: "len", scope: !3229, file: !9, line: 198, type: !208, align: 8)
!3229 = distinct !DILexicalBlock(scope: !3230, file: !9, line: 197, column: 2)
!3230 = distinct !DILexicalBlock(scope: !3224, file: !9, line: 196, column: 2)
!3231 = !DILocation(line: 198, column: 8, scope: !3229, inlinedAt: !3226)
!3232 = !DILocation(line: 198, column: 22, scope: !3229, inlinedAt: !3226)
!3233 = !DILocation(line: 198, column: 14, scope: !3229, inlinedAt: !3226)
!3234 = !DILocalVariable(name: "err", scope: !3229, file: !9, line: 199, type: !115, align: 8)
!3235 = !DILocation(line: 199, column: 13, scope: !3229, inlinedAt: !3226)
!3236 = !DILocation(line: 199, column: 19, scope: !3229, inlinedAt: !3226)
!3237 = !DILocation(line: 201, column: 9, scope: !3229, inlinedAt: !3226)
!3238 = !DILocation(line: 201, column: 29, scope: !3239, inlinedAt: !3226)
!3239 = distinct !DILexicalBlock(scope: !3229, file: !9, line: 201, column: 22)
!3240 = !DILocation(line: 202, column: 20, scope: !3241, inlinedAt: !3226)
!3241 = distinct !DILexicalBlock(scope: !3229, file: !9, line: 202, column: 13)
!3242 = !DILocation(line: 204, column: 7, scope: !3229, inlinedAt: !3226)
!3243 = !DILocation(line: 204, column: 20, scope: !3229, inlinedAt: !3226)
!3244 = !DILocalVariable(name: "written", scope: !3229, file: !9, line: 205, type: !207, align: 8)
!3245 = !DILocation(line: 205, column: 7, scope: !3229, inlinedAt: !3226)
!3246 = !DILocation(line: 205, column: 27, scope: !3229, inlinedAt: !3226)
!3247 = !DILocation(line: 205, column: 34, scope: !3229, inlinedAt: !3226)
!3248 = !DILocation(line: 205, column: 35, scope: !3229, inlinedAt: !3226)
!3249 = !DILocation(line: 205, column: 17, scope: !3229, inlinedAt: !3226)
!3250 = !DILocation(line: 206, column: 3, scope: !3229, inlinedAt: !3226)
!3251 = !DILocation(line: 206, column: 19, scope: !3229, inlinedAt: !3226)
!3252 = !DILocation(line: 207, column: 7, scope: !3229, inlinedAt: !3226)
!3253 = !DILocation(line: 207, column: 18, scope: !3229, inlinedAt: !3226)
!3254 = !DILocation(line: 207, column: 30, scope: !3229, inlinedAt: !3226)
!3255 = distinct !DISubprogram(name: "wrap_bytes", linkageName: "std.io.wrap_bytes", scope: !9, file: !9, line: 466, type: !3256, scopeLine: 466, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3256 = !DISubroutineType(types: !3257)
!3257 = !{!286, !203}
!3258 = !DILocalVariable(name: "bytes", arg: 1, scope: !3255, file: !9, line: 466, type: !203)
!3259 = !DILocation(line: 466, column: 33, scope: !3255)
!3260 = !DILocation(line: 468, column: 11, scope: !3255)
!3261 = !DILocation(line: 468, column: 18, scope: !3255)
!3262 = distinct !DISubprogram(name: "fprintf", linkageName: "std.io.fprintf", scope: !16, file: !16, line: 144, type: !3263, scopeLine: 144, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3263 = !DISubroutineType(types: !3264)
!3264 = !{!115, !308, !159, !466, !1874}
!3265 = !DILocalVariable(name: "out", arg: 1, scope: !3262, file: !16, line: 144, type: !159)
!3266 = !DILocation(line: 144, column: 27, scope: !3262)
!3267 = !DILocalVariable(name: "format", arg: 2, scope: !3262, file: !16, line: 144, type: !466)
!3268 = !DILocation(line: 144, column: 39, scope: !3262)
!3269 = !DILocalVariable(name: "args", arg: 3, scope: !3262, file: !16, line: 144, type: !1874)
!3270 = !DILocation(line: 144, column: 47, scope: !3262)
!3271 = !DILocalVariable(name: "formatter", scope: !3262, file: !16, line: 146, type: !1848, align: 8)
!3272 = !DILocation(line: 146, column: 12, scope: !3262)
!3273 = !DILocation(line: 147, column: 2, scope: !3262)
!3274 = !DILocation(line: 148, column: 9, scope: !3262)
!3275 = distinct !DISubprogram(name: "fprintfn", linkageName: "std.io.fprintfn", scope: !16, file: !16, line: 159, type: !3263, scopeLine: 159, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3276 = !DILocalVariable(name: "out", arg: 1, scope: !3275, file: !16, line: 159, type: !159)
!3277 = !DILocation(line: 159, column: 28, scope: !3275)
!3278 = !DILocalVariable(name: "format", arg: 2, scope: !3275, file: !16, line: 159, type: !466)
!3279 = !DILocation(line: 159, column: 40, scope: !3275)
!3280 = !DILocalVariable(name: "args", arg: 3, scope: !3275, file: !16, line: 159, type: !1874)
!3281 = !DILocation(line: 159, column: 48, scope: !3275)
!3282 = !DILocalVariable(name: "formatter", scope: !3275, file: !16, line: 161, type: !1848, align: 8)
!3283 = !DILocation(line: 161, column: 12, scope: !3275)
!3284 = !DILocation(line: 162, column: 2, scope: !3275)
!3285 = !DILocalVariable(name: "len", scope: !3275, file: !16, line: 163, type: !207, align: 8)
!3286 = !DILocation(line: 163, column: 6, scope: !3275)
!3287 = !DILocation(line: 163, column: 12, scope: !3275)
!3288 = !DILocation(line: 164, column: 17, scope: !3275)
!3289 = !DILocation(line: 164, column: 2, scope: !3275)
!3290 = !DILocation(line: 165, column: 7, scope: !3275)
!3291 = !DILocation(line: 165, column: 18, scope: !3275)
!3292 = !DILocation(line: 166, column: 9, scope: !3275)
!3293 = distinct !DISubprogram(name: "out_putstream_fn", linkageName: "std.io.out_putstream_fn", scope: !16, file: !16, line: 222, type: !1854, scopeLine: 222, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3294 = !DILocalVariable(name: "data", arg: 1, scope: !3293, file: !16, line: 222, type: !21)
!3295 = !DILocation(line: 222, column: 33, scope: !3293)
!3296 = !DILocalVariable(name: "c", arg: 2, scope: !3293, file: !16, line: 222, type: !11)
!3297 = !DILocation(line: 222, column: 44, scope: !3293)
!3298 = !DILocalVariable(name: "stream", scope: !3293, file: !16, line: 224, type: !1316, align: 8)
!3299 = !DILocation(line: 224, column: 13, scope: !3293)
!3300 = !DILocation(line: 224, column: 22, scope: !3293)
!3301 = !DILocation(line: 225, column: 11, scope: !3293)
!3302 = !DILocation(line: 225, column: 30, scope: !3293)
!3303 = !DILocation(line: 225, column: 10, scope: !3293)
!3304 = distinct !DISubprogram(name: "out_putchar_fn", linkageName: "std.io.out_putchar_fn", scope: !16, file: !16, line: 228, type: !1854, scopeLine: 228, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3305 = !DILocalVariable(name: "data", arg: 1, scope: !3304, file: !16, line: 228, type: !21)
!3306 = !DILocation(line: 228, column: 31, scope: !3304)
!3307 = !DILocalVariable(name: "c", arg: 2, scope: !3304, file: !16, line: 228, type: !11)
!3308 = !DILocation(line: 228, column: 50, scope: !3304)
!3309 = !DILocation(line: 236, column: 17, scope: !3304)
!3310 = !DILocation(line: 236, column: 3, scope: !3304)
!3311 = distinct !DISubprogram(name: "printf", linkageName: "std.io.printf", scope: !16, file: !16, line: 254, type: !3312, scopeLine: 254, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3312 = !DISubroutineType(types: !3313)
!3313 = !{!115, !308, !466, !1874}
!3314 = !DILocalVariable(name: "format", arg: 1, scope: !3311, file: !16, line: 254, type: !466)
!3315 = !DILocation(line: 254, column: 23, scope: !3311)
!3316 = !DILocalVariable(name: "args", arg: 2, scope: !3311, file: !16, line: 254, type: !1874)
!3317 = !DILocation(line: 254, column: 31, scope: !3311)
!3318 = !DILocalVariable(name: "formatter", scope: !3311, file: !16, line: 256, type: !1848, align: 8)
!3319 = !DILocation(line: 256, column: 12, scope: !3311)
!3320 = !DILocation(line: 257, column: 2, scope: !3311)
!3321 = !DILocation(line: 258, column: 9, scope: !3311)
!3322 = distinct !DISubprogram(name: "printfn", linkageName: "std.io.printfn", scope: !16, file: !16, line: 268, type: !3312, scopeLine: 268, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3323 = !DILocalVariable(name: "format", arg: 1, scope: !3322, file: !16, line: 268, type: !466)
!3324 = !DILocation(line: 268, column: 24, scope: !3322)
!3325 = !DILocalVariable(name: "args", arg: 2, scope: !3322, file: !16, line: 268, type: !1874)
!3326 = !DILocation(line: 268, column: 32, scope: !3322)
!3327 = !DILocalVariable(name: "formatter", scope: !3322, file: !16, line: 270, type: !1848, align: 8)
!3328 = !DILocation(line: 270, column: 12, scope: !3322)
!3329 = !DILocation(line: 271, column: 2, scope: !3322)
!3330 = !DILocalVariable(name: "len", scope: !3322, file: !16, line: 272, type: !208, align: 8)
!3331 = !DILocation(line: 272, column: 7, scope: !3322)
!3332 = !DILocation(line: 272, column: 13, scope: !3322)
!3333 = !DILocation(line: 273, column: 2, scope: !3322)
!3334 = !DILocation(line: 274, column: 2, scope: !3322)
!3335 = !DILocation(line: 275, column: 9, scope: !3322)
!3336 = distinct !DISubprogram(name: "eprintf", linkageName: "std.io.eprintf", scope: !16, file: !16, line: 285, type: !3312, scopeLine: 285, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3337 = !DILocalVariable(name: "format", arg: 1, scope: !3336, file: !16, line: 285, type: !466)
!3338 = !DILocation(line: 285, column: 24, scope: !3336)
!3339 = !DILocalVariable(name: "args", arg: 2, scope: !3336, file: !16, line: 285, type: !1874)
!3340 = !DILocation(line: 285, column: 32, scope: !3336)
!3341 = !DILocalVariable(name: "formatter", scope: !3336, file: !16, line: 287, type: !1848, align: 8)
!3342 = !DILocation(line: 287, column: 12, scope: !3336)
!3343 = !DILocalVariable(name: "stream", scope: !3336, file: !16, line: 288, type: !159, align: 8)
!3344 = !DILocation(line: 288, column: 12, scope: !3336)
!3345 = !DILocation(line: 288, column: 21, scope: !3336)
!3346 = !DILocation(line: 289, column: 2, scope: !3336)
!3347 = !DILocation(line: 290, column: 9, scope: !3336)
!3348 = distinct !DISubprogram(name: "eprintfn", linkageName: "std.io.eprintfn", scope: !16, file: !16, line: 301, type: !3312, scopeLine: 301, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3349 = !DILocalVariable(name: "format", arg: 1, scope: !3348, file: !16, line: 301, type: !466)
!3350 = !DILocation(line: 301, column: 25, scope: !3348)
!3351 = !DILocalVariable(name: "args", arg: 2, scope: !3348, file: !16, line: 301, type: !1874)
!3352 = !DILocation(line: 301, column: 33, scope: !3348)
!3353 = !DILocalVariable(name: "formatter", scope: !3348, file: !16, line: 303, type: !1848, align: 8)
!3354 = !DILocation(line: 303, column: 12, scope: !3348)
!3355 = !DILocalVariable(name: "stream", scope: !3348, file: !16, line: 304, type: !159, align: 8)
!3356 = !DILocation(line: 304, column: 12, scope: !3348)
!3357 = !DILocation(line: 304, column: 21, scope: !3348)
!3358 = !DILocation(line: 305, column: 2, scope: !3348)
!3359 = !DILocalVariable(name: "len", scope: !3348, file: !16, line: 306, type: !208, align: 8)
!3360 = !DILocation(line: 306, column: 7, scope: !3348)
!3361 = !DILocation(line: 306, column: 13, scope: !3348)
!3362 = !DILocation(line: 307, column: 2, scope: !3348)
!3363 = !DILocation(line: 308, column: 2, scope: !3348)
!3364 = !DILocation(line: 309, column: 9, scope: !3348)
!3365 = distinct !DISubprogram(name: "bprintf", linkageName: "std.io.bprintf", scope: !16, file: !16, line: 320, type: !3366, scopeLine: 320, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3366 = !DISubroutineType(types: !3367)
!3367 = !{!115, !1482, !203, !466, !1874}
!3368 = !DILocalVariable(name: "buffer", arg: 1, scope: !3365, file: !16, line: 320, type: !203)
!3369 = !DILocation(line: 320, column: 27, scope: !3365)
!3370 = !DILocalVariable(name: "format", arg: 2, scope: !3365, file: !16, line: 320, type: !466)
!3371 = !DILocation(line: 320, column: 42, scope: !3365)
!3372 = !DILocalVariable(name: "args", arg: 3, scope: !3365, file: !16, line: 320, type: !1874)
!3373 = !DILocation(line: 320, column: 50, scope: !3365)
!3374 = !DILocalVariable(name: "formatter", scope: !3365, file: !16, line: 322, type: !1848, align: 8)
!3375 = !DILocation(line: 322, column: 12, scope: !3365)
!3376 = !DILocalVariable(name: "data", scope: !3365, file: !16, line: 323, type: !3377, align: 8)
!3377 = !DICompositeType(tag: DW_TAG_structure_type, name: "BufferData", scope: !16, file: !16, line: 338, size: 192, align: 64, elements: !3378, identifier: "std.io.BufferData")
!3378 = !{!3379, !3380}
!3379 = !DIDerivedType(tag: DW_TAG_member, name: "buffer", scope: !3377, file: !16, line: 340, baseType: !203, size: 128, align: 64)
!3380 = !DIDerivedType(tag: DW_TAG_member, name: "written", scope: !3377, file: !16, line: 341, baseType: !207, size: 64, align: 64, offset: 128)
!3381 = !DILocation(line: 323, column: 13, scope: !3365)
!3382 = !DILocation(line: 323, column: 32, scope: !3365)
!3383 = !DILocation(line: 324, column: 2, scope: !3365)
!3384 = !DILocalVariable(name: "size", scope: !3365, file: !16, line: 325, type: !207, align: 8)
!3385 = !DILocation(line: 325, column: 6, scope: !3365)
!3386 = !DILocation(line: 325, column: 13, scope: !3365)
!3387 = !DILocation(line: 326, column: 9, scope: !3365)
!3388 = !DILocation(line: 326, column: 16, scope: !3365)
!3389 = !DILocation(line: 326, column: 17, scope: !3365)
!3390 = distinct !DISubprogram(name: "out_buffer_fn", linkageName: "std.io.out_buffer_fn", scope: !16, file: !16, line: 330, type: !1854, scopeLine: 330, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3391 = !DILocalVariable(name: "data", arg: 1, scope: !3390, file: !16, line: 330, type: !21)
!3392 = !DILocation(line: 330, column: 30, scope: !3390)
!3393 = !DILocalVariable(name: "c", arg: 2, scope: !3390, file: !16, line: 330, type: !11)
!3394 = !DILocation(line: 330, column: 41, scope: !3390)
!3395 = !DILocalVariable(name: "buffer_data", scope: !3390, file: !16, line: 332, type: !3396, align: 8)
!3396 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "BufferData*", baseType: !3377, size: 64, align: 64, dwarfAddressSpace: 0)
!3397 = !DILocation(line: 332, column: 14, scope: !3390)
!3398 = !DILocation(line: 332, column: 28, scope: !3390)
!3399 = !DILocation(line: 333, column: 6, scope: !3390)
!3400 = !DILocation(line: 333, column: 29, scope: !3390)
!3401 = !DILocation(line: 333, column: 60, scope: !3390)
!3402 = !DILocation(line: 334, column: 2, scope: !3390)
!3403 = !DILocation(line: 334, column: 21, scope: !3390)
!3404 = !DILocation(line: 334, column: 46, scope: !3390)
!3405 = distinct !DISubprogram(name: "putchar", linkageName: "std.io.putchar", scope: !16, file: !16, line: 351, type: !3406, scopeLine: 351, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3406 = !DISubroutineType(types: !3407)
!3407 = !{null, !11}
!3408 = !DILocalVariable(name: "c", arg: 1, scope: !3405, file: !16, line: 351, type: !11)
!3409 = !DILocation(line: 351, column: 22, scope: !3405)
!3410 = !DILocation(line: 353, column: 16, scope: !3405)
!3411 = !DILocation(line: 353, column: 2, scope: !3405)
!3412 = distinct !DISubprogram(name: "stdout", linkageName: "std.io.stdout", scope: !16, file: !16, line: 361, type: !3413, scopeLine: 361, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43)
!3413 = !DISubroutineType(types: !3414)
!3414 = !{!3415}
!3415 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "File*", baseType: !17, size: 64, align: 64, dwarfAddressSpace: 0)
!3416 = !DILocation(line: 364, column: 7, scope: !3412)
!3417 = !DILocation(line: 199, column: 25, scope: !3418, inlinedAt: !3420)
!3418 = distinct !DISubprogram(name: "stdout", linkageName: "stdout", scope: !3419, file: !3419, line: 199, scopeLine: 199, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3419 = !DIFile(filename: "libc.c3", directory: "/usr/local/lib/c3/std/libc")
!3420 = !DILocation(line: 364, column: 43, scope: !3412)
!3421 = !DILocation(line: 364, column: 25, scope: !3412)
!3422 = !DILocation(line: 365, column: 9, scope: !3412)
!3423 = distinct !DISubprogram(name: "stderr", linkageName: "std.io.stderr", scope: !16, file: !16, line: 373, type: !3413, scopeLine: 373, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43)
!3424 = !DILocation(line: 376, column: 7, scope: !3423)
!3425 = !DILocation(line: 200, column: 25, scope: !3426, inlinedAt: !3427)
!3426 = distinct !DISubprogram(name: "stderr", linkageName: "stderr", scope: !3419, file: !3419, line: 200, scopeLine: 200, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3427 = !DILocation(line: 376, column: 43, scope: !3423)
!3428 = !DILocation(line: 376, column: 25, scope: !3423)
!3429 = !DILocation(line: 377, column: 9, scope: !3423)
!3430 = distinct !DISubprogram(name: "stdin", linkageName: "std.io.stdin", scope: !16, file: !16, line: 385, type: !3413, scopeLine: 385, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43)
!3431 = !DILocation(line: 388, column: 7, scope: !3430)
!3432 = !DILocation(line: 198, column: 24, scope: !3433, inlinedAt: !3434)
!3433 = distinct !DISubprogram(name: "stdin", linkageName: "stdin", scope: !3419, file: !3419, line: 198, scopeLine: 198, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3434 = !DILocation(line: 388, column: 43, scope: !3430)
!3435 = !DILocation(line: 388, column: 25, scope: !3430)
!3436 = !DILocation(line: 389, column: 9, scope: !3430)
!3437 = distinct !DISubprogram(name: "adjust", linkageName: "std.io.Formatter.adjust", scope: !28, file: !28, line: 35, type: !3438, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3438 = !DISubroutineType(types: !3439)
!3439 = !{!115, !308, !1847, !208}
!3440 = !DILocation(line: 36, column: 1, scope: !3437)
!3441 = !DILocalVariable(name: "self", arg: 1, scope: !3437, file: !28, line: 35, type: !1847)
!3442 = !DILocation(line: 35, column: 26, scope: !3437)
!3443 = !DILocalVariable(name: "len", arg: 2, scope: !3437, file: !28, line: 35, type: !207)
!3444 = !DILocation(line: 35, column: 37, scope: !3437)
!3445 = !DILocation(line: 37, column: 7, scope: !3437)
!3446 = !DILocation(line: 37, column: 31, scope: !3437)
!3447 = !DILocation(line: 38, column: 23, scope: !3437)
!3448 = !DILocation(line: 38, column: 35, scope: !3437)
!3449 = !DILocation(line: 38, column: 9, scope: !3437)
!3450 = distinct !DISubprogram(name: "out_substr", linkageName: "std.io.Formatter.out_substr", scope: !28, file: !28, line: 161, type: !3127, scopeLine: 161, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3451 = !DILocation(line: 162, column: 1, scope: !3450)
!3452 = !DILocalVariable(name: "self", arg: 1, scope: !3450, file: !28, line: 161, type: !1847)
!3453 = !DILocation(line: 161, column: 30, scope: !3450)
!3454 = !DILocalVariable(name: "str", arg: 2, scope: !3450, file: !28, line: 161, type: !466)
!3455 = !DILocation(line: 161, column: 44, scope: !3450)
!3456 = !DILocalVariable(name: "l", scope: !3450, file: !28, line: 163, type: !207, align: 8)
!3457 = !DILocation(line: 163, column: 6, scope: !3450)
!3458 = !DILocation(line: 163, column: 32, scope: !3450)
!3459 = !DILocation(line: 163, column: 10, scope: !3450)
!3460 = !DILocalVariable(name: "prec", scope: !3450, file: !28, line: 164, type: !94, align: 4)
!3461 = !DILocation(line: 164, column: 7, scope: !3450)
!3462 = !DILocation(line: 164, column: 14, scope: !3450)
!3463 = !DILocation(line: 165, column: 6, scope: !3450)
!3464 = !DILocation(line: 165, column: 30, scope: !3450)
!3465 = !DILocation(line: 165, column: 34, scope: !3450)
!3466 = !DILocation(line: 165, column: 44, scope: !3450)
!3467 = !DILocalVariable(name: "index", scope: !3450, file: !28, line: 166, type: !207, align: 8)
!3468 = !DILocation(line: 166, column: 6, scope: !3450)
!3469 = !DILocation(line: 166, column: 14, scope: !3450)
!3470 = !DILocalVariable(name: "chars", scope: !3450, file: !28, line: 167, type: !207, align: 8)
!3471 = !DILocation(line: 167, column: 6, scope: !3450)
!3472 = !DILocation(line: 167, column: 14, scope: !3450)
!3473 = !DILocalVariable(name: "ptr", scope: !3450, file: !28, line: 168, type: !117, align: 8)
!3474 = !DILocation(line: 168, column: 8, scope: !3450)
!3475 = !DILocation(line: 168, column: 14, scope: !3450)
!3476 = !DILocation(line: 169, column: 2, scope: !3450)
!3477 = !DILocation(line: 169, column: 9, scope: !3478)
!3478 = distinct !DILexicalBlock(scope: !3450, file: !28, line: 169, column: 2)
!3479 = !DILocation(line: 169, column: 17, scope: !3478)
!3480 = !DILocalVariable(name: "c", scope: !3481, file: !28, line: 171, type: !11, align: 1)
!3481 = distinct !DILexicalBlock(scope: !3478, file: !28, line: 170, column: 2)
!3482 = !DILocation(line: 171, column: 8, scope: !3481)
!3483 = !DILocation(line: 171, column: 12, scope: !3481)
!3484 = !DILocation(line: 171, column: 16, scope: !3481)
!3485 = !DILocation(line: 173, column: 7, scope: !3481)
!3486 = !DILocation(line: 173, column: 27, scope: !3481)
!3487 = !DILocation(line: 173, column: 52, scope: !3481)
!3488 = !DILocation(line: 173, column: 60, scope: !3481)
!3489 = !DILocation(line: 174, column: 3, scope: !3481)
!3490 = !DILocation(line: 175, column: 3, scope: !3481)
!3491 = !DILocation(line: 177, column: 9, scope: !3450)
!3492 = distinct !DISubprogram(name: "pad", linkageName: "std.io.Formatter.pad", scope: !28, file: !28, line: 180, type: !3493, scopeLine: 180, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3493 = !DISubroutineType(types: !3494)
!3494 = !{!115, !308, !1847, !11, !116, !116}
!3495 = !DILocation(line: 181, column: 1, scope: !3492)
!3496 = !DILocalVariable(name: "self", arg: 1, scope: !3492, file: !28, line: 180, type: !1847)
!3497 = !DILocation(line: 180, column: 23, scope: !3492)
!3498 = !DILocalVariable(name: "c", arg: 2, scope: !3492, file: !28, line: 180, type: !11)
!3499 = !DILocation(line: 180, column: 35, scope: !3492)
!3500 = !DILocalVariable(name: "width", arg: 3, scope: !3492, file: !28, line: 180, type: !381)
!3501 = !DILocation(line: 180, column: 42, scope: !3492)
!3502 = !DILocalVariable(name: "len", arg: 4, scope: !3492, file: !28, line: 180, type: !381)
!3503 = !DILocation(line: 180, column: 53, scope: !3492)
!3504 = !DILocalVariable(name: "delta", scope: !3492, file: !28, line: 182, type: !381, align: 8)
!3505 = !DILocation(line: 182, column: 6, scope: !3492)
!3506 = !DILocation(line: 182, column: 14, scope: !3492)
!3507 = !DILocation(line: 182, column: 22, scope: !3492)
!3508 = !DILocalVariable(name: "i", scope: !3509, file: !28, line: 183, type: !381, align: 8)
!3509 = distinct !DILexicalBlock(scope: !3492, file: !28, line: 183, column: 2)
!3510 = !DILocation(line: 183, column: 11, scope: !3509)
!3511 = !DILocation(line: 183, column: 15, scope: !3509)
!3512 = !DILocation(line: 183, column: 18, scope: !3509)
!3513 = !DILocation(line: 183, column: 22, scope: !3509)
!3514 = !DILocation(line: 183, column: 34, scope: !3509)
!3515 = !DILocation(line: 183, column: 29, scope: !3509)
!3516 = !DILocation(line: 47, column: 10, scope: !3517, inlinedAt: !3518)
!3517 = distinct !DISubprogram(name: "greater", linkageName: "greater", scope: !324, file: !324, line: 39, scopeLine: 39, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3518 = !DILocation(line: 116, column: 10, scope: !3519, inlinedAt: !3520)
!3519 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !324, file: !324, line: 113, scopeLine: 113, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3520 = !DILocation(line: 184, column: 9, scope: !3492)
!3521 = !DILocation(line: 47, column: 14, scope: !3517, inlinedAt: !3518)
!3522 = !DILocation(line: 116, column: 34, scope: !3519, inlinedAt: !3520)
!3523 = !DILocation(line: 116, column: 38, scope: !3519, inlinedAt: !3520)
!3524 = distinct !DISubprogram(name: "out_chars", linkageName: "std.io.Formatter.out_chars", scope: !28, file: !28, line: 194, type: !3525, scopeLine: 194, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3525 = !DISubroutineType(types: !3526)
!3526 = !{!115, !308, !1847, !203}
!3527 = !DILocation(line: 195, column: 1, scope: !3524)
!3528 = !DILocalVariable(name: "self", arg: 1, scope: !3524, file: !28, line: 194, type: !1847)
!3529 = !DILocation(line: 194, column: 29, scope: !3524)
!3530 = !DILocalVariable(name: "s", arg: 2, scope: !3524, file: !28, line: 194, type: !203)
!3531 = !DILocation(line: 194, column: 43, scope: !3524)
!3532 = !DILocation(line: 196, column: 15, scope: !3533)
!3533 = distinct !DILexicalBlock(scope: !3524, file: !28, line: 196, column: 2)
!3534 = !DILocalVariable(name: ".temp", scope: !3533, file: !28, line: 196, type: !207, align: 8)
!3535 = !DILocalVariable(name: "c", scope: !3536, file: !28, line: 196, type: !11, align: 1)
!3536 = distinct !DILexicalBlock(scope: !3533, file: !28, line: 196, column: 18)
!3537 = !DILocation(line: 196, column: 11, scope: !3536)
!3538 = !DILocation(line: 196, column: 15, scope: !3536)
!3539 = !DILocation(line: 196, column: 18, scope: !3536)
!3540 = !DILocation(line: 197, column: 9, scope: !3524)
!3541 = distinct !DISubprogram(name: "etoa", linkageName: "std.io.Formatter.etoa", scope: !28, file: !28, line: 208, type: !3542, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3542 = !DISubroutineType(types: !3543)
!3543 = !{!115, !308, !1847, !3544}
!3544 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!3545 = !DILocation(line: 208, column: 44, scope: !3541)
!3546 = !DILocalVariable(name: "self", arg: 1, scope: !3541, file: !28, line: 208, type: !1847)
!3547 = !DILocation(line: 208, column: 24, scope: !3541)
!3548 = !DILocalVariable(name: "y", arg: 2, scope: !3541, file: !28, line: 208, type: !3544)
!3549 = !DILocation(line: 208, column: 38, scope: !3541)
!3550 = distinct !DISubprogram(name: "ftoa", linkageName: "std.io.Formatter.ftoa", scope: !28, file: !28, line: 209, type: !3542, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3551 = !DILocation(line: 209, column: 44, scope: !3550)
!3552 = !DILocalVariable(name: "self", arg: 1, scope: !3550, file: !28, line: 209, type: !1847)
!3553 = !DILocation(line: 209, column: 24, scope: !3550)
!3554 = !DILocalVariable(name: "y", arg: 2, scope: !3550, file: !28, line: 209, type: !3544)
!3555 = !DILocation(line: 209, column: 38, scope: !3550)
!3556 = distinct !DISubprogram(name: "gtoa", linkageName: "std.io.Formatter.gtoa", scope: !28, file: !28, line: 210, type: !3542, scopeLine: 210, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3557 = !DILocation(line: 210, column: 44, scope: !3556)
!3558 = !DILocalVariable(name: "self", arg: 1, scope: !3556, file: !28, line: 210, type: !1847)
!3559 = !DILocation(line: 210, column: 24, scope: !3556)
!3560 = !DILocalVariable(name: "y", arg: 2, scope: !3556, file: !28, line: 210, type: !3544)
!3561 = !DILocation(line: 210, column: 38, scope: !3556)
!3562 = distinct !DISubprogram(name: "atoa", linkageName: "std.io.Formatter.atoa", scope: !28, file: !28, line: 211, type: !3542, scopeLine: 211, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3563 = !DILocation(line: 211, column: 44, scope: !3562)
!3564 = !DILocalVariable(name: "self", arg: 1, scope: !3562, file: !28, line: 211, type: !1847)
!3565 = !DILocation(line: 211, column: 24, scope: !3562)
!3566 = !DILocalVariable(name: "y", arg: 2, scope: !3562, file: !28, line: 211, type: !3544)
!3567 = !DILocation(line: 211, column: 38, scope: !3562)
!3568 = distinct !DISubprogram(name: "floatformat", linkageName: "std.io.Formatter.floatformat", scope: !28, file: !28, line: 213, type: !3569, scopeLine: 213, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3569 = !DISubroutineType(types: !3570)
!3570 = !{!115, !308, !1847, !51, !3544}
!3571 = !DILocation(line: 214, column: 1, scope: !3568)
!3572 = !DILocalVariable(name: "self", arg: 1, scope: !3568, file: !28, line: 213, type: !1847)
!3573 = !DILocation(line: 213, column: 31, scope: !3568)
!3574 = !DILocalVariable(name: "formatting", arg: 2, scope: !3568, file: !28, line: 213, type: !51)
!3575 = !DILocation(line: 213, column: 54, scope: !3568)
!3576 = !DILocalVariable(name: "y", arg: 3, scope: !3568, file: !28, line: 213, type: !3544)
!3577 = !DILocation(line: 213, column: 73, scope: !3568)
!3578 = !DILocalVariable(name: "big", scope: !3568, file: !28, line: 218, type: !3579, align: 16)
!3579 = !DICompositeType(tag: DW_TAG_array_type, baseType: !94, size: 4032, align: 32, elements: !3580)
!3580 = !{!3581}
!3581 = !DISubrange(count: 126, lowerBound: 0)
!3582 = !DILocation(line: 218, column: 17, scope: !3568)
!3583 = !DILocalVariable(name: "is_neg", scope: !3568, file: !28, line: 219, type: !920, align: 1)
!3584 = !DILocation(line: 219, column: 7, scope: !3568)
!3585 = !DILocation(line: 219, column: 16, scope: !3568)
!3586 = !DILocation(line: 212, column: 20, scope: !3587, inlinedAt: !3588)
!3587 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !215, file: !215, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3588 = !DILocation(line: 480, column: 16, scope: !3589, inlinedAt: !3590)
!3589 = distinct !DISubprogram(name: "signbit", linkageName: "signbit", scope: !767, file: !767, line: 473, scopeLine: 473, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3590 = !DILocation(line: 220, column: 6, scope: !3568)
!3591 = !DILocation(line: 212, column: 12, scope: !3587, inlinedAt: !3588)
!3592 = !DILocation(line: 480, column: 11, scope: !3589, inlinedAt: !3590)
!3593 = !DILocation(line: 222, column: 12, scope: !3594)
!3594 = distinct !DILexicalBlock(scope: !3568, file: !28, line: 221, column: 2)
!3595 = !DILocation(line: 223, column: 8, scope: !3594)
!3596 = !DILocalVariable(name: "pl", scope: !3568, file: !28, line: 225, type: !381, align: 8)
!3597 = !DILocation(line: 225, column: 6, scope: !3568)
!3598 = !DILocation(line: 225, column: 11, scope: !3568)
!3599 = !DILocation(line: 225, column: 21, scope: !3568)
!3600 = !DILocation(line: 225, column: 43, scope: !3568)
!3601 = !DILocation(line: 212, column: 20, scope: !3602, inlinedAt: !3603)
!3602 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !215, file: !215, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3603 = !DILocation(line: 565, column: 11, scope: !3604, inlinedAt: !3605)
!3604 = distinct !DISubprogram(name: "is_finite", linkageName: "is_finite", scope: !767, file: !767, line: 558, scopeLine: 558, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3605 = !DILocation(line: 227, column: 7, scope: !3568)
!3606 = !DILocation(line: 212, column: 12, scope: !3602, inlinedAt: !3603)
!3607 = !DILocalVariable(name: "len", scope: !3608, file: !28, line: 229, type: !207, align: 8)
!3608 = distinct !DILexicalBlock(scope: !3568, file: !28, line: 228, column: 2)
!3609 = !DILocation(line: 229, column: 7, scope: !3608)
!3610 = !DILocation(line: 231, column: 8, scope: !3608)
!3611 = !DILocation(line: 231, column: 25, scope: !3608)
!3612 = !DILocation(line: 231, column: 46, scope: !3608)
!3613 = !DILocation(line: 231, column: 62, scope: !3608)
!3614 = !DILocation(line: 231, column: 58, scope: !3608)
!3615 = !DILocation(line: 231, column: 32, scope: !3608)
!3616 = !DILocalVariable(name: "s", scope: !3608, file: !28, line: 232, type: !466, align: 8)
!3617 = !DILocation(line: 232, column: 10, scope: !3608)
!3618 = !DILocation(line: 232, column: 14, scope: !3608)
!3619 = !DILocation(line: 232, column: 45, scope: !3608)
!3620 = !DILocation(line: 212, column: 20, scope: !3621, inlinedAt: !3622)
!3621 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !215, file: !215, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3622 = !DILocation(line: 579, column: 10, scope: !3623, inlinedAt: !3624)
!3623 = distinct !DISubprogram(name: "is_nan", linkageName: "is_nan", scope: !767, file: !767, line: 572, scopeLine: 572, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3624 = !DILocation(line: 233, column: 7, scope: !3608)
!3625 = !DILocation(line: 212, column: 12, scope: !3621, inlinedAt: !3622)
!3626 = !DILocation(line: 233, column: 28, scope: !3608)
!3627 = !DILocation(line: 233, column: 59, scope: !3608)
!3628 = !DILocation(line: 234, column: 7, scope: !3608)
!3629 = !DILocation(line: 234, column: 11, scope: !3608)
!3630 = !DILocation(line: 234, column: 27, scope: !3608)
!3631 = !DILocation(line: 234, column: 42, scope: !3608)
!3632 = !DILocation(line: 234, column: 18, scope: !3608)
!3633 = !DILocation(line: 235, column: 3, scope: !3608)
!3634 = !DILocation(line: 235, column: 10, scope: !3608)
!3635 = !DILocation(line: 236, column: 7, scope: !3608)
!3636 = !DILocation(line: 236, column: 24, scope: !3608)
!3637 = !DILocation(line: 236, column: 45, scope: !3608)
!3638 = !DILocation(line: 236, column: 61, scope: !3608)
!3639 = !DILocation(line: 236, column: 57, scope: !3608)
!3640 = !DILocation(line: 236, column: 31, scope: !3608)
!3641 = !DILocation(line: 237, column: 10, scope: !3608)
!3642 = !DILocalVariable(name: "e2", scope: !3568, file: !28, line: 240, type: !3, align: 4)
!3643 = !DILocation(line: 240, column: 6, scope: !3568)
!3644 = !DILocation(line: 466, column: 28, scope: !3645, inlinedAt: !3646)
!3645 = distinct !DISubprogram(name: "frexp", linkageName: "frexp", scope: !767, file: !767, line: 459, scopeLine: 459, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3646 = !DILocation(line: 242, column: 6, scope: !3568)
!3647 = !DILocation(line: 466, column: 10, scope: !3645, inlinedAt: !3646)
!3648 = !DILocation(line: 243, column: 6, scope: !3568)
!3649 = !DILocation(line: 243, column: 9, scope: !3568)
!3650 = !DILocalVariable(name: "ebuf0", scope: !3568, file: !28, line: 244, type: !3651, align: 1)
!3651 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 96, align: 8, elements: !3652)
!3652 = !{!3653}
!3653 = !DISubrange(count: 12, lowerBound: 0)
!3654 = !DILocation(line: 244, column: 11, scope: !3568)
!3655 = !DILocalVariable(name: "ebuf", scope: !3568, file: !28, line: 245, type: !117, align: 8)
!3656 = !DILocation(line: 245, column: 8, scope: !3568)
!3657 = !DILocation(line: 245, column: 15, scope: !3568)
!3658 = !DILocalVariable(name: "buf_array", scope: !3568, file: !28, line: 246, type: !3659, align: 16)
!3659 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 176, align: 8, elements: !3660)
!3660 = !{!3661}
!3661 = !DISubrange(count: 22, lowerBound: 0)
!3662 = !DILocation(line: 246, column: 38, scope: !3568)
!3663 = !DILocalVariable(name: "buf", scope: !3568, file: !28, line: 247, type: !117, align: 8)
!3664 = !DILocation(line: 247, column: 8, scope: !3568)
!3665 = !DILocation(line: 247, column: 15, scope: !3568)
!3666 = !DILocalVariable(name: "p", scope: !3568, file: !28, line: 248, type: !381, align: 8)
!3667 = !DILocation(line: 248, column: 6, scope: !3568)
!3668 = !DILocation(line: 248, column: 10, scope: !3568)
!3669 = !DILocation(line: 248, column: 33, scope: !3568)
!3670 = !DILocation(line: 248, column: 45, scope: !3568)
!3671 = !DILocation(line: 249, column: 6, scope: !3568)
!3672 = !DILocalVariable(name: "round", scope: !3673, file: !28, line: 251, type: !3544, align: 8)
!3673 = distinct !DILexicalBlock(scope: !3568, file: !28, line: 250, column: 2)
!3674 = !DILocation(line: 251, column: 10, scope: !3673)
!3675 = !DILocation(line: 251, column: 18, scope: !3673)
!3676 = !DILocation(line: 253, column: 3, scope: !3673)
!3677 = !DILocation(line: 254, column: 7, scope: !3673)
!3678 = !DILocation(line: 254, column: 16, scope: !3673)
!3679 = !DILocalVariable(name: "re", scope: !3680, file: !28, line: 256, type: !3, align: 4)
!3680 = distinct !DILexicalBlock(scope: !3673, file: !28, line: 255, column: 3)
!3681 = !DILocation(line: 256, column: 8, scope: !3680)
!3682 = !DILocation(line: 256, column: 46, scope: !3680)
!3683 = !DILocation(line: 256, column: 13, scope: !3680)
!3684 = !DILocation(line: 257, column: 4, scope: !3680)
!3685 = !DILocation(line: 258, column: 4, scope: !3680)
!3686 = !DILocation(line: 258, column: 11, scope: !3687)
!3687 = distinct !DILexicalBlock(scope: !3680, file: !28, line: 258, column: 4)
!3688 = !DILocation(line: 258, column: 17, scope: !3687)
!3689 = !DILocation(line: 259, column: 8, scope: !3680)
!3690 = !DILocation(line: 261, column: 10, scope: !3691)
!3691 = distinct !DILexicalBlock(scope: !3680, file: !28, line: 260, column: 4)
!3692 = !DILocation(line: 262, column: 5, scope: !3691)
!3693 = !DILocation(line: 262, column: 10, scope: !3691)
!3694 = !DILocation(line: 263, column: 5, scope: !3691)
!3695 = !DILocation(line: 263, column: 10, scope: !3691)
!3696 = !DILocation(line: 264, column: 10, scope: !3691)
!3697 = !DILocation(line: 268, column: 5, scope: !3698)
!3698 = distinct !DILexicalBlock(scope: !3680, file: !28, line: 267, column: 4)
!3699 = !DILocation(line: 268, column: 10, scope: !3698)
!3700 = !DILocation(line: 269, column: 5, scope: !3698)
!3701 = !DILocation(line: 269, column: 10, scope: !3698)
!3702 = !DILocalVariable(name: "estr", scope: !3673, file: !28, line: 273, type: !117, align: 8)
!3703 = !DILocation(line: 273, column: 9, scope: !3673)
!3704 = !DILocation(line: 273, column: 22, scope: !3673)
!3705 = !DILocation(line: 273, column: 40, scope: !3673)
!3706 = !DILocation(line: 273, column: 46, scope: !3673)
!3707 = !DILocation(line: 273, column: 16, scope: !3673)
!3708 = !DILocation(line: 274, column: 7, scope: !3673)
!3709 = !DILocation(line: 274, column: 15, scope: !3673)
!3710 = !DILocation(line: 274, column: 24, scope: !3673)
!3711 = !DILocation(line: 274, column: 31, scope: !3673)
!3712 = !DILocation(line: 275, column: 6, scope: !3673)
!3713 = !DILocation(line: 275, column: 14, scope: !3673)
!3714 = !DILocation(line: 275, column: 29, scope: !3673)
!3715 = !DILocation(line: 276, column: 6, scope: !3673)
!3716 = !DILocation(line: 276, column: 13, scope: !3673)
!3717 = !DILocation(line: 276, column: 42, scope: !3673)
!3718 = !DILocalVariable(name: "s", scope: !3673, file: !28, line: 277, type: !117, align: 8)
!3719 = !DILocation(line: 277, column: 9, scope: !3673)
!3720 = !DILocation(line: 277, column: 13, scope: !3673)
!3721 = !DILocalVariable(name: "xdigits", scope: !3673, file: !28, line: 278, type: !117, align: 8)
!3722 = !DILocation(line: 278, column: 9, scope: !3673)
!3723 = !DILocation(line: 278, column: 19, scope: !3673)
!3724 = !DILocation(line: 278, column: 55, scope: !3673)
!3725 = !DILocation(line: 279, column: 3, scope: !3673)
!3726 = !DILocation(line: 285, column: 12, scope: !3727)
!3727 = distinct !DILexicalBlock(scope: !3673, file: !28, line: 279, column: 3)
!3728 = !DILocalVariable(name: "x", scope: !3729, file: !28, line: 281, type: !3, align: 4)
!3729 = distinct !DILexicalBlock(scope: !3727, file: !28, line: 280, column: 3)
!3730 = !DILocation(line: 281, column: 8, scope: !3729)
!3731 = !DILocation(line: 281, column: 13, scope: !3729)
!3732 = !DILocation(line: 282, column: 5, scope: !3729)
!3733 = !DILocation(line: 282, column: 11, scope: !3729)
!3734 = !DILocation(line: 282, column: 19, scope: !3729)
!3735 = !DILocation(line: 283, column: 14, scope: !3729)
!3736 = !DILocation(line: 283, column: 18, scope: !3729)
!3737 = !DILocation(line: 283, column: 8, scope: !3729)
!3738 = !DILocation(line: 284, column: 8, scope: !3729)
!3739 = !DILocation(line: 284, column: 12, scope: !3729)
!3740 = !DILocation(line: 284, column: 25, scope: !3729)
!3741 = !DILocation(line: 284, column: 30, scope: !3729)
!3742 = !DILocation(line: 284, column: 39, scope: !3729)
!3743 = !DILocation(line: 284, column: 58, scope: !3729)
!3744 = !DILocation(line: 284, column: 64, scope: !3729)
!3745 = !DILocalVariable(name: "outlen", scope: !3673, file: !28, line: 286, type: !381, align: 8)
!3746 = !DILocation(line: 286, column: 7, scope: !3673)
!3747 = !DILocation(line: 286, column: 16, scope: !3673)
!3748 = !DILocation(line: 286, column: 20, scope: !3673)
!3749 = !DILocalVariable(name: "explen", scope: !3673, file: !28, line: 287, type: !381, align: 8)
!3750 = !DILocation(line: 287, column: 7, scope: !3673)
!3751 = !DILocation(line: 287, column: 16, scope: !3673)
!3752 = !DILocation(line: 287, column: 23, scope: !3673)
!3753 = !DILocation(line: 288, column: 7, scope: !3673)
!3754 = !DILocation(line: 288, column: 25, scope: !3673)
!3755 = !DILocation(line: 288, column: 11, scope: !3673)
!3756 = !DILocation(line: 288, column: 34, scope: !3673)
!3757 = !DILocation(line: 288, column: 45, scope: !3673)
!3758 = !DILocalVariable(name: "len", scope: !3673, file: !28, line: 289, type: !207, align: 8)
!3759 = !DILocation(line: 289, column: 7, scope: !3673)
!3760 = !DILocalVariable(name: "l", scope: !3673, file: !28, line: 290, type: !207, align: 8)
!3761 = !DILocation(line: 290, column: 7, scope: !3673)
!3762 = !DILocation(line: 290, column: 11, scope: !3673)
!3763 = !DILocation(line: 290, column: 16, scope: !3673)
!3764 = !DILocation(line: 290, column: 29, scope: !3673)
!3765 = !DILocation(line: 291, column: 7, scope: !3673)
!3766 = !DILocation(line: 291, column: 15, scope: !3673)
!3767 = !DILocation(line: 292, column: 7, scope: !3673)
!3768 = !DILocation(line: 292, column: 16, scope: !3673)
!3769 = !DILocation(line: 293, column: 8, scope: !3673)
!3770 = !DILocation(line: 293, column: 28, scope: !3673)
!3771 = !DILocation(line: 293, column: 48, scope: !3673)
!3772 = !DILocation(line: 293, column: 69, scope: !3673)
!3773 = !DILocation(line: 293, column: 81, scope: !3673)
!3774 = !DILocation(line: 293, column: 86, scope: !3673)
!3775 = !DILocation(line: 293, column: 55, scope: !3673)
!3776 = !DILocation(line: 294, column: 7, scope: !3673)
!3777 = !DILocation(line: 294, column: 17, scope: !3673)
!3778 = !DILocation(line: 294, column: 34, scope: !3673)
!3779 = !DILocation(line: 294, column: 50, scope: !3673)
!3780 = !DILocation(line: 294, column: 65, scope: !3673)
!3781 = !DILocation(line: 294, column: 41, scope: !3673)
!3782 = !DILocation(line: 295, column: 3, scope: !3673)
!3783 = !DILocation(line: 295, column: 25, scope: !3673)
!3784 = !DILocation(line: 295, column: 55, scope: !3673)
!3785 = !DILocation(line: 295, column: 10, scope: !3673)
!3786 = !DILocation(line: 296, column: 7, scope: !3673)
!3787 = !DILocation(line: 296, column: 27, scope: !3673)
!3788 = !DILocation(line: 296, column: 48, scope: !3673)
!3789 = !DILocation(line: 296, column: 60, scope: !3673)
!3790 = !DILocation(line: 296, column: 65, scope: !3673)
!3791 = !DILocation(line: 296, column: 34, scope: !3673)
!3792 = !DILocation(line: 297, column: 3, scope: !3673)
!3793 = !DILocation(line: 297, column: 25, scope: !3673)
!3794 = !DILocation(line: 297, column: 30, scope: !3673)
!3795 = !DILocation(line: 297, column: 10, scope: !3673)
!3796 = !DILocation(line: 298, column: 3, scope: !3673)
!3797 = !DILocation(line: 298, column: 24, scope: !3673)
!3798 = !DILocation(line: 298, column: 28, scope: !3673)
!3799 = !DILocation(line: 298, column: 37, scope: !3673)
!3800 = !DILocation(line: 298, column: 10, scope: !3673)
!3801 = !DILocation(line: 299, column: 3, scope: !3673)
!3802 = !DILocation(line: 299, column: 25, scope: !3673)
!3803 = !DILocation(line: 299, column: 31, scope: !3673)
!3804 = !DILocation(line: 299, column: 10, scope: !3673)
!3805 = !DILocation(line: 300, column: 7, scope: !3673)
!3806 = !DILocation(line: 300, column: 24, scope: !3673)
!3807 = !DILocation(line: 300, column: 45, scope: !3673)
!3808 = !DILocation(line: 300, column: 57, scope: !3673)
!3809 = !DILocation(line: 300, column: 62, scope: !3673)
!3810 = !DILocation(line: 300, column: 31, scope: !3673)
!3811 = !DILocation(line: 301, column: 10, scope: !3673)
!3812 = !DILocation(line: 303, column: 6, scope: !3568)
!3813 = !DILocation(line: 303, column: 17, scope: !3568)
!3814 = !DILocation(line: 304, column: 6, scope: !3568)
!3815 = !DILocation(line: 306, column: 3, scope: !3816)
!3816 = distinct !DILexicalBlock(scope: !3568, file: !28, line: 305, column: 2)
!3817 = !DILocation(line: 307, column: 3, scope: !3816)
!3818 = !DILocalVariable(name: "a", scope: !3568, file: !28, line: 310, type: !3819, align: 8)
!3819 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint*", baseType: !94, size: 64, align: 64, dwarfAddressSpace: 0)
!3820 = !DILocation(line: 310, column: 8, scope: !3568)
!3821 = !DILocalVariable(name: "z", scope: !3568, file: !28, line: 310, type: !3819, align: 8)
!3822 = !DILocation(line: 310, column: 11, scope: !3568)
!3823 = !DILocalVariable(name: "r", scope: !3568, file: !28, line: 310, type: !3819, align: 8)
!3824 = !DILocation(line: 310, column: 14, scope: !3568)
!3825 = !DILocation(line: 311, column: 6, scope: !3568)
!3826 = !DILocation(line: 313, column: 16, scope: !3827)
!3827 = distinct !DILexicalBlock(scope: !3568, file: !28, line: 312, column: 2)
!3828 = !DILocation(line: 317, column: 16, scope: !3829)
!3829 = distinct !DILexicalBlock(scope: !3568, file: !28, line: 316, column: 2)
!3830 = !DILocation(line: 320, column: 2, scope: !3568)
!3831 = !DILocation(line: 324, column: 11, scope: !3832)
!3832 = distinct !DILexicalBlock(scope: !3568, file: !28, line: 320, column: 2)
!3833 = !DILocalVariable(name: "v", scope: !3834, file: !28, line: 322, type: !94, align: 4)
!3834 = distinct !DILexicalBlock(scope: !3832, file: !28, line: 321, column: 2)
!3835 = !DILocation(line: 322, column: 8, scope: !3834)
!3836 = !DILocation(line: 322, column: 12, scope: !3834)
!3837 = !DILocation(line: 322, column: 22, scope: !3834)
!3838 = !DILocation(line: 323, column: 21, scope: !3834)
!3839 = !DILocation(line: 323, column: 25, scope: !3834)
!3840 = !DILocation(line: 323, column: 7, scope: !3834)
!3841 = !DILocation(line: 326, column: 2, scope: !3568)
!3842 = !DILocation(line: 326, column: 9, scope: !3843)
!3843 = distinct !DILexicalBlock(scope: !3568, file: !28, line: 326, column: 2)
!3844 = !DILocalVariable(name: "carry", scope: !3845, file: !28, line: 328, type: !94, align: 4)
!3845 = distinct !DILexicalBlock(scope: !3843, file: !28, line: 327, column: 2)
!3846 = !DILocation(line: 328, column: 8, scope: !3845)
!3847 = !DILocation(line: 328, column: 16, scope: !3845)
!3848 = !DILocalVariable(name: "sh", scope: !3845, file: !28, line: 329, type: !3, align: 4)
!3849 = !DILocation(line: 329, column: 7, scope: !3845)
!3850 = !DILocation(line: 422, column: 16, scope: !3851, inlinedAt: !3852)
!3851 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !767, file: !767, line: 419, scopeLine: 419, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3852 = !DILocation(line: 329, column: 12, scope: !3845)
!3853 = !DILocation(line: 422, column: 19, scope: !3851, inlinedAt: !3852)
!3854 = !DILocalVariable(name: "d", scope: !3855, file: !28, line: 330, type: !3819, align: 8)
!3855 = distinct !DILexicalBlock(scope: !3845, file: !28, line: 330, column: 3)
!3856 = !DILocation(line: 330, column: 14, scope: !3855)
!3857 = !DILocation(line: 330, column: 18, scope: !3855)
!3858 = !DILocation(line: 330, column: 22, scope: !3855)
!3859 = !DILocation(line: 330, column: 25, scope: !3855)
!3860 = !DILocation(line: 330, column: 30, scope: !3855)
!3861 = !DILocalVariable(name: "x", scope: !3862, file: !28, line: 332, type: !208, align: 8)
!3862 = distinct !DILexicalBlock(scope: !3855, file: !28, line: 331, column: 3)
!3863 = !DILocation(line: 332, column: 10, scope: !3862)
!3864 = !DILocation(line: 332, column: 22, scope: !3862)
!3865 = !DILocation(line: 332, column: 27, scope: !3862)
!3866 = !DILocation(line: 332, column: 15, scope: !3862)
!3867 = !DILocation(line: 332, column: 32, scope: !3862)
!3868 = !DILocation(line: 333, column: 5, scope: !3862)
!3869 = !DILocation(line: 333, column: 16, scope: !3862)
!3870 = !DILocation(line: 333, column: 10, scope: !3862)
!3871 = !DILocation(line: 334, column: 19, scope: !3862)
!3872 = !DILocation(line: 334, column: 13, scope: !3862)
!3873 = !DILocation(line: 330, column: 33, scope: !3855)
!3874 = !DILocation(line: 336, column: 7, scope: !3845)
!3875 = !DILocation(line: 336, column: 17, scope: !3845)
!3876 = !DILocation(line: 336, column: 15, scope: !3845)
!3877 = !DILocation(line: 336, column: 21, scope: !3845)
!3878 = !DILocation(line: 337, column: 3, scope: !3845)
!3879 = !DILocation(line: 337, column: 10, scope: !3880)
!3880 = distinct !DILexicalBlock(scope: !3845, file: !28, line: 337, column: 3)
!3881 = !DILocation(line: 337, column: 14, scope: !3880)
!3882 = !DILocation(line: 337, column: 20, scope: !3880)
!3883 = !DILocation(line: 337, column: 22, scope: !3880)
!3884 = !DILocation(line: 337, column: 27, scope: !3880)
!3885 = !DILocation(line: 338, column: 3, scope: !3845)
!3886 = !DILocation(line: 338, column: 9, scope: !3845)
!3887 = !DILocation(line: 341, column: 2, scope: !3568)
!3888 = !DILocation(line: 341, column: 9, scope: !3889)
!3889 = distinct !DILexicalBlock(scope: !3568, file: !28, line: 341, column: 2)
!3890 = !DILocalVariable(name: "carry", scope: !3891, file: !28, line: 343, type: !94, align: 4)
!3891 = distinct !DILexicalBlock(scope: !3889, file: !28, line: 342, column: 2)
!3892 = !DILocation(line: 343, column: 8, scope: !3891)
!3893 = !DILocation(line: 343, column: 16, scope: !3891)
!3894 = !DILocalVariable(name: "b", scope: !3891, file: !28, line: 344, type: !3819, align: 8)
!3895 = !DILocation(line: 344, column: 9, scope: !3891)
!3896 = !DILocalVariable(name: "sh", scope: !3891, file: !28, line: 345, type: !3, align: 4)
!3897 = !DILocation(line: 345, column: 7, scope: !3891)
!3898 = !DILocation(line: 345, column: 26, scope: !3891)
!3899 = !DILocation(line: 422, column: 16, scope: !3900, inlinedAt: !3901)
!3900 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !767, file: !767, line: 419, scopeLine: 419, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3901 = !DILocation(line: 345, column: 12, scope: !3891)
!3902 = !DILocation(line: 422, column: 19, scope: !3900, inlinedAt: !3901)
!3903 = !DILocalVariable(name: "need", scope: !3891, file: !28, line: 346, type: !3, align: 4)
!3904 = !DILocation(line: 346, column: 7, scope: !3891)
!3905 = !DILocation(line: 346, column: 25, scope: !3891)
!3906 = !DILocation(line: 346, column: 15, scope: !3891)
!3907 = !DILocalVariable(name: "d", scope: !3908, file: !28, line: 347, type: !3819, align: 8)
!3908 = distinct !DILexicalBlock(scope: !3891, file: !28, line: 347, column: 3)
!3909 = !DILocation(line: 347, column: 14, scope: !3908)
!3910 = !DILocation(line: 347, column: 18, scope: !3908)
!3911 = !DILocation(line: 347, column: 21, scope: !3908)
!3912 = !DILocation(line: 347, column: 25, scope: !3908)
!3913 = !DILocalVariable(name: "rm", scope: !3914, file: !28, line: 350, type: !94, align: 4)
!3914 = distinct !DILexicalBlock(scope: !3908, file: !28, line: 348, column: 3)
!3915 = !DILocation(line: 350, column: 9, scope: !3914)
!3916 = !DILocation(line: 350, column: 15, scope: !3914)
!3917 = !DILocation(line: 350, column: 26, scope: !3914)
!3918 = !DILocation(line: 350, column: 21, scope: !3914)
!3919 = !DILocation(line: 350, column: 14, scope: !3914)
!3920 = !DILocation(line: 351, column: 5, scope: !3914)
!3921 = !DILocation(line: 351, column: 11, scope: !3914)
!3922 = !DILocation(line: 351, column: 16, scope: !3914)
!3923 = !DILocation(line: 351, column: 10, scope: !3914)
!3924 = !DILocation(line: 351, column: 22, scope: !3914)
!3925 = !DILocation(line: 352, column: 27, scope: !3914)
!3926 = !DILocation(line: 352, column: 13, scope: !3914)
!3927 = !DILocation(line: 352, column: 33, scope: !3914)
!3928 = !DILocation(line: 347, column: 28, scope: !3908)
!3929 = !DILocation(line: 354, column: 8, scope: !3891)
!3930 = !DILocation(line: 354, column: 10, scope: !3891)
!3931 = !DILocation(line: 354, column: 14, scope: !3891)
!3932 = !DILocation(line: 355, column: 7, scope: !3891)
!3933 = !DILocation(line: 355, column: 14, scope: !3891)
!3934 = !DILocation(line: 355, column: 23, scope: !3891)
!3935 = !DILocation(line: 357, column: 7, scope: !3891)
!3936 = !DILocation(line: 357, column: 29, scope: !3891)
!3937 = !DILocation(line: 357, column: 33, scope: !3891)
!3938 = !DILocation(line: 358, column: 7, scope: !3891)
!3939 = !DILocation(line: 358, column: 11, scope: !3891)
!3940 = !DILocation(line: 358, column: 15, scope: !3891)
!3941 = !DILocation(line: 358, column: 25, scope: !3891)
!3942 = !DILocation(line: 358, column: 29, scope: !3891)
!3943 = !DILocation(line: 359, column: 3, scope: !3891)
!3944 = !DILocation(line: 359, column: 9, scope: !3891)
!3945 = !DILocalVariable(name: "e", scope: !3568, file: !28, line: 362, type: !3, align: 4)
!3946 = !DILocation(line: 362, column: 6, scope: !3568)
!3947 = !DILocation(line: 363, column: 6, scope: !3568)
!3948 = !DILocation(line: 363, column: 10, scope: !3568)
!3949 = !DILocalVariable(name: "i", scope: !3950, file: !28, line: 365, type: !3, align: 4)
!3950 = distinct !DILexicalBlock(scope: !3951, file: !28, line: 365, column: 3)
!3951 = distinct !DILexicalBlock(scope: !3568, file: !28, line: 364, column: 2)
!3952 = !DILocation(line: 365, column: 12, scope: !3950)
!3953 = !DILocation(line: 365, column: 16, scope: !3950)
!3954 = !DILocation(line: 365, column: 35, scope: !3950)
!3955 = !DILocation(line: 365, column: 39, scope: !3950)
!3956 = !DILocation(line: 365, column: 25, scope: !3950)
!3957 = !DILocation(line: 365, column: 45, scope: !3950)
!3958 = !DILocation(line: 365, column: 50, scope: !3950)
!3959 = !DILocation(line: 365, column: 44, scope: !3950)
!3960 = !DILocation(line: 365, column: 53, scope: !3950)
!3961 = !DILocation(line: 365, column: 62, scope: !3950)
!3962 = !DILocalVariable(name: "j", scope: !3568, file: !28, line: 369, type: !3, align: 4)
!3963 = !DILocation(line: 369, column: 6, scope: !3568)
!3964 = !DILocation(line: 369, column: 16, scope: !3568)
!3965 = !DILocation(line: 369, column: 26, scope: !3568)
!3966 = !DILocation(line: 369, column: 48, scope: !3568)
!3967 = !DILocation(line: 369, column: 52, scope: !3568)
!3968 = !DILocation(line: 369, column: 62, scope: !3568)
!3969 = !DILocation(line: 369, column: 88, scope: !3568)
!3970 = !DILocation(line: 369, column: 11, scope: !3568)
!3971 = !DILocation(line: 370, column: 6, scope: !3568)
!3972 = !DILocation(line: 370, column: 15, scope: !3568)
!3973 = !DILocation(line: 370, column: 19, scope: !3568)
!3974 = !DILocation(line: 370, column: 10, scope: !3568)
!3975 = !DILocalVariable(name: "x", scope: !3976, file: !28, line: 372, type: !94, align: 4)
!3976 = distinct !DILexicalBlock(scope: !3568, file: !28, line: 371, column: 2)
!3977 = !DILocation(line: 372, column: 8, scope: !3976)
!3978 = !DILocalVariable(name: "d", scope: !3976, file: !28, line: 374, type: !3819, align: 8)
!3979 = !DILocation(line: 374, column: 9, scope: !3976)
!3980 = !DILocation(line: 374, column: 13, scope: !3976)
!3981 = !DILocation(line: 374, column: 23, scope: !3976)
!3982 = !DILocation(line: 375, column: 3, scope: !3976)
!3983 = !DILocation(line: 376, column: 3, scope: !3976)
!3984 = !DILocalVariable(name: "i", scope: !3976, file: !28, line: 377, type: !3, align: 4)
!3985 = !DILocation(line: 377, column: 7, scope: !3976)
!3986 = !DILocation(line: 378, column: 12, scope: !3987)
!3987 = distinct !DILexicalBlock(scope: !3976, file: !28, line: 378, column: 3)
!3988 = !DILocation(line: 378, column: 16, scope: !3987)
!3989 = !DILocation(line: 378, column: 21, scope: !3987)
!3990 = !DILocation(line: 378, column: 28, scope: !3987)
!3991 = !DILocation(line: 378, column: 37, scope: !3987)
!3992 = !DILocation(line: 379, column: 8, scope: !3976)
!3993 = !DILocation(line: 379, column: 12, scope: !3976)
!3994 = !DILocation(line: 379, column: 7, scope: !3976)
!3995 = !DILocation(line: 381, column: 7, scope: !3976)
!3996 = !DILocation(line: 381, column: 13, scope: !3976)
!3997 = !DILocation(line: 381, column: 17, scope: !3976)
!3998 = !DILocation(line: 381, column: 23, scope: !3976)
!3999 = !DILocalVariable(name: "round", scope: !4000, file: !28, line: 383, type: !3544, align: 8)
!4000 = distinct !DILexicalBlock(scope: !3976, file: !28, line: 382, column: 3)
!4001 = !DILocation(line: 383, column: 11, scope: !4000)
!4002 = !DILocation(line: 383, column: 19, scope: !4000)
!4003 = !DILocalVariable(name: "small", scope: !4000, file: !28, line: 384, type: !3544, align: 8)
!4004 = !DILocation(line: 384, column: 11, scope: !4000)
!4005 = !DILocation(line: 385, column: 11, scope: !4000)
!4006 = !DILocation(line: 385, column: 15, scope: !4000)
!4007 = !DILocation(line: 385, column: 10, scope: !4000)
!4008 = !DILocation(line: 385, column: 27, scope: !4000)
!4009 = !DILocation(line: 385, column: 46, scope: !4000)
!4010 = !DILocation(line: 385, column: 50, scope: !4000)
!4011 = !DILocation(line: 385, column: 56, scope: !4000)
!4012 = !DILocation(line: 385, column: 58, scope: !4000)
!4013 = !DILocation(line: 387, column: 5, scope: !4014)
!4014 = distinct !DILexicalBlock(scope: !4000, file: !28, line: 386, column: 4)
!4015 = !DILocation(line: 391, column: 10, scope: !4016)
!4016 = distinct !DILexicalBlock(scope: !4000, file: !28, line: 389, column: 4)
!4017 = !DILocation(line: 391, column: 14, scope: !4016)
!4018 = !DILocation(line: 392, column: 14, scope: !4019)
!4019 = distinct !DILexicalBlock(scope: !4016, file: !28, line: 392, column: 6)
!4020 = !DILocation(line: 393, column: 10, scope: !4016)
!4021 = !DILocation(line: 393, column: 15, scope: !4016)
!4022 = !DILocation(line: 393, column: 24, scope: !4016)
!4023 = !DILocation(line: 393, column: 28, scope: !4016)
!4024 = !DILocation(line: 393, column: 33, scope: !4016)
!4025 = !DILocation(line: 394, column: 14, scope: !4026)
!4026 = distinct !DILexicalBlock(scope: !4016, file: !28, line: 394, column: 6)
!4027 = !DILocation(line: 396, column: 14, scope: !4028)
!4028 = distinct !DILexicalBlock(scope: !4016, file: !28, line: 396, column: 6)
!4029 = !DILocation(line: 398, column: 8, scope: !4000)
!4030 = !DILocation(line: 398, column: 14, scope: !4000)
!4031 = !DILocation(line: 400, column: 5, scope: !4032)
!4032 = distinct !DILexicalBlock(scope: !4000, file: !28, line: 399, column: 4)
!4033 = !DILocation(line: 401, column: 5, scope: !4032)
!4034 = !DILocation(line: 403, column: 5, scope: !4000)
!4035 = !DILocation(line: 403, column: 10, scope: !4000)
!4036 = !DILocation(line: 403, column: 4, scope: !4000)
!4037 = !DILocation(line: 405, column: 8, scope: !4000)
!4038 = !DILocation(line: 405, column: 16, scope: !4000)
!4039 = !DILocation(line: 405, column: 25, scope: !4000)
!4040 = !DILocation(line: 407, column: 6, scope: !4041)
!4041 = distinct !DILexicalBlock(scope: !4000, file: !28, line: 406, column: 4)
!4042 = !DILocation(line: 407, column: 11, scope: !4041)
!4043 = !DILocation(line: 407, column: 15, scope: !4041)
!4044 = !DILocation(line: 407, column: 10, scope: !4041)
!4045 = !DILocation(line: 408, column: 5, scope: !4041)
!4046 = !DILocation(line: 408, column: 13, scope: !4047)
!4047 = distinct !DILexicalBlock(scope: !4041, file: !28, line: 408, column: 5)
!4048 = !DILocation(line: 408, column: 12, scope: !4047)
!4049 = !DILocation(line: 410, column: 7, scope: !4050)
!4050 = distinct !DILexicalBlock(scope: !4047, file: !28, line: 409, column: 5)
!4051 = !DILocation(line: 410, column: 13, scope: !4050)
!4052 = !DILocation(line: 411, column: 10, scope: !4050)
!4053 = !DILocation(line: 411, column: 14, scope: !4050)
!4054 = !DILocation(line: 411, column: 20, scope: !4050)
!4055 = !DILocation(line: 411, column: 18, scope: !4050)
!4056 = !DILocation(line: 411, column: 24, scope: !4050)
!4057 = !DILocation(line: 412, column: 8, scope: !4050)
!4058 = !DILocation(line: 412, column: 7, scope: !4050)
!4059 = !DILocation(line: 414, column: 14, scope: !4060)
!4060 = distinct !DILexicalBlock(scope: !4041, file: !28, line: 414, column: 5)
!4061 = !DILocation(line: 414, column: 33, scope: !4060)
!4062 = !DILocation(line: 414, column: 37, scope: !4060)
!4063 = !DILocation(line: 414, column: 23, scope: !4060)
!4064 = !DILocation(line: 414, column: 43, scope: !4060)
!4065 = !DILocation(line: 414, column: 48, scope: !4060)
!4066 = !DILocation(line: 414, column: 42, scope: !4060)
!4067 = !DILocation(line: 414, column: 51, scope: !4060)
!4068 = !DILocation(line: 414, column: 60, scope: !4060)
!4069 = !DILocation(line: 417, column: 7, scope: !3976)
!4070 = !DILocation(line: 417, column: 11, scope: !3976)
!4071 = !DILocation(line: 417, column: 15, scope: !3976)
!4072 = !DILocation(line: 417, column: 22, scope: !3976)
!4073 = !DILocation(line: 417, column: 26, scope: !3976)
!4074 = !DILocation(line: 419, column: 2, scope: !3568)
!4075 = !DILocation(line: 419, column: 9, scope: !4076)
!4076 = distinct !DILexicalBlock(scope: !3568, file: !28, line: 419, column: 2)
!4077 = !DILocation(line: 419, column: 11, scope: !4076)
!4078 = !DILocation(line: 419, column: 17, scope: !4076)
!4079 = !DILocation(line: 419, column: 19, scope: !4076)
!4080 = !DILocation(line: 419, column: 24, scope: !4076)
!4081 = !DILocation(line: 421, column: 6, scope: !3568)
!4082 = !DILocation(line: 423, column: 7, scope: !4083)
!4083 = distinct !DILexicalBlock(scope: !3568, file: !28, line: 422, column: 2)
!4084 = !DILocation(line: 423, column: 11, scope: !4083)
!4085 = !DILocation(line: 424, column: 7, scope: !4083)
!4086 = !DILocation(line: 424, column: 11, scope: !4083)
!4087 = !DILocation(line: 424, column: 16, scope: !4083)
!4088 = !DILocation(line: 426, column: 17, scope: !4089)
!4089 = distinct !DILexicalBlock(scope: !4083, file: !28, line: 425, column: 3)
!4090 = !DILocation(line: 427, column: 4, scope: !4089)
!4091 = !DILocation(line: 427, column: 10, scope: !4089)
!4092 = !DILocation(line: 431, column: 17, scope: !4093)
!4093 = distinct !DILexicalBlock(scope: !4083, file: !28, line: 430, column: 3)
!4094 = !DILocation(line: 432, column: 4, scope: !4093)
!4095 = !DILocation(line: 434, column: 8, scope: !4083)
!4096 = !DILocation(line: 437, column: 8, scope: !4097)
!4097 = distinct !DILexicalBlock(scope: !4083, file: !28, line: 435, column: 3)
!4098 = !DILocation(line: 437, column: 12, scope: !4097)
!4099 = !DILocation(line: 437, column: 17, scope: !4097)
!4100 = !DILocation(line: 437, column: 19, scope: !4097)
!4101 = !DILocalVariable(name: "i", scope: !4102, file: !28, line: 439, type: !3, align: 4)
!4102 = distinct !DILexicalBlock(scope: !4103, file: !28, line: 439, column: 5)
!4103 = distinct !DILexicalBlock(scope: !4097, file: !28, line: 438, column: 4)
!4104 = !DILocation(line: 439, column: 14, scope: !4102)
!4105 = !DILocation(line: 439, column: 18, scope: !4102)
!4106 = !DILocation(line: 439, column: 26, scope: !4102)
!4107 = !DILocation(line: 439, column: 29, scope: !4102)
!4108 = !DILocation(line: 439, column: 31, scope: !4102)
!4109 = !DILocation(line: 439, column: 37, scope: !4102)
!4110 = !DILocation(line: 439, column: 45, scope: !4102)
!4111 = !DILocation(line: 439, column: 54, scope: !4102)
!4112 = !DILocation(line: 443, column: 9, scope: !4113)
!4113 = distinct !DILexicalBlock(scope: !4097, file: !28, line: 442, column: 4)
!4114 = !DILocation(line: 445, column: 8, scope: !4097)
!4115 = !DILocation(line: 447, column: 45, scope: !4116)
!4116 = distinct !DILexicalBlock(scope: !4097, file: !28, line: 446, column: 4)
!4117 = !DILocation(line: 447, column: 49, scope: !4116)
!4118 = !DILocation(line: 447, column: 40, scope: !4116)
!4119 = !DILocation(line: 447, column: 58, scope: !4116)
!4120 = !DILocation(line: 405, column: 16, scope: !4121, inlinedAt: !4122)
!4121 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !767, file: !767, line: 402, scopeLine: 402, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!4122 = !DILocation(line: 447, column: 22, scope: !4116)
!4123 = !DILocation(line: 405, column: 19, scope: !4121, inlinedAt: !4122)
!4124 = !DILocation(line: 422, column: 16, scope: !4125, inlinedAt: !4126)
!4125 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !767, file: !767, line: 419, scopeLine: 419, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!4126 = !DILocation(line: 447, column: 9, scope: !4116)
!4127 = !DILocation(line: 422, column: 19, scope: !4125, inlinedAt: !4126)
!4128 = !DILocation(line: 451, column: 45, scope: !4129)
!4129 = distinct !DILexicalBlock(scope: !4097, file: !28, line: 450, column: 4)
!4130 = !DILocation(line: 451, column: 49, scope: !4129)
!4131 = !DILocation(line: 451, column: 40, scope: !4129)
!4132 = !DILocation(line: 451, column: 58, scope: !4129)
!4133 = !DILocation(line: 451, column: 62, scope: !4129)
!4134 = !DILocation(line: 405, column: 16, scope: !4135, inlinedAt: !4136)
!4135 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !767, file: !767, line: 402, scopeLine: 402, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!4136 = !DILocation(line: 451, column: 22, scope: !4129)
!4137 = !DILocation(line: 405, column: 19, scope: !4135, inlinedAt: !4136)
!4138 = !DILocation(line: 422, column: 16, scope: !4139, inlinedAt: !4140)
!4139 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !767, file: !767, line: 419, scopeLine: 419, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!4140 = !DILocation(line: 451, column: 9, scope: !4129)
!4141 = !DILocation(line: 422, column: 19, scope: !4139, inlinedAt: !4140)
!4142 = !DILocation(line: 456, column: 6, scope: !3568)
!4143 = !DILocation(line: 456, column: 30, scope: !3568)
!4144 = !DILocation(line: 456, column: 35, scope: !3568)
!4145 = !DILocation(line: 456, column: 10, scope: !3568)
!4146 = !DILocation(line: 456, column: 60, scope: !3568)
!4147 = !DILocalVariable(name: "l", scope: !3568, file: !28, line: 457, type: !3, align: 4)
!4148 = !DILocation(line: 457, column: 6, scope: !3568)
!4149 = !DILocation(line: 457, column: 20, scope: !3568)
!4150 = !DILocation(line: 457, column: 16, scope: !3568)
!4151 = !DILocation(line: 457, column: 30, scope: !3568)
!4152 = !DILocation(line: 457, column: 35, scope: !3568)
!4153 = !DILocation(line: 457, column: 11, scope: !3568)
!4154 = !DILocalVariable(name: "estr", scope: !3568, file: !28, line: 458, type: !117, align: 8)
!4155 = !DILocation(line: 458, column: 8, scope: !3568)
!4156 = !DILocation(line: 459, column: 6, scope: !3568)
!4157 = !DILocation(line: 461, column: 7, scope: !4158)
!4158 = distinct !DILexicalBlock(scope: !3568, file: !28, line: 460, column: 2)
!4159 = !DILocation(line: 461, column: 21, scope: !4158)
!4160 = !DILocation(line: 461, column: 11, scope: !4158)
!4161 = !DILocation(line: 461, column: 31, scope: !4158)
!4162 = !DILocation(line: 462, column: 7, scope: !4158)
!4163 = !DILocation(line: 462, column: 14, scope: !4158)
!4164 = !DILocation(line: 462, column: 19, scope: !4158)
!4165 = !DILocation(line: 466, column: 26, scope: !4166)
!4166 = distinct !DILexicalBlock(scope: !3568, file: !28, line: 465, column: 2)
!4167 = !DILocation(line: 466, column: 35, scope: !4166)
!4168 = !DILocation(line: 466, column: 39, scope: !4166)
!4169 = !DILocation(line: 466, column: 10, scope: !4166)
!4170 = !DILocation(line: 467, column: 3, scope: !4166)
!4171 = !DILocation(line: 467, column: 10, scope: !4172)
!4172 = distinct !DILexicalBlock(scope: !4166, file: !28, line: 467, column: 3)
!4173 = !DILocation(line: 467, column: 17, scope: !4172)
!4174 = !DILocation(line: 467, column: 30, scope: !4172)
!4175 = !DILocation(line: 467, column: 41, scope: !4172)
!4176 = !DILocation(line: 468, column: 6, scope: !4166)
!4177 = !DILocation(line: 468, column: 14, scope: !4166)
!4178 = !DILocation(line: 468, column: 28, scope: !4166)
!4179 = !DILocation(line: 469, column: 6, scope: !4166)
!4180 = !DILocation(line: 469, column: 13, scope: !4166)
!4181 = !DILocation(line: 469, column: 42, scope: !4166)
!4182 = !DILocation(line: 470, column: 7, scope: !4166)
!4183 = !DILocation(line: 470, column: 14, scope: !4166)
!4184 = !DILocation(line: 470, column: 36, scope: !4166)
!4185 = !DILocation(line: 470, column: 22, scope: !4166)
!4186 = !DILocation(line: 470, column: 46, scope: !4166)
!4187 = !DILocation(line: 471, column: 3, scope: !4166)
!4188 = !DILocation(line: 471, column: 14, scope: !4166)
!4189 = !DILocation(line: 471, column: 21, scope: !4166)
!4190 = !DILocation(line: 471, column: 9, scope: !4166)
!4191 = !DILocation(line: 473, column: 6, scope: !3568)
!4192 = !DILocation(line: 473, column: 20, scope: !3568)
!4193 = !DILocation(line: 473, column: 10, scope: !3568)
!4194 = !DILocation(line: 473, column: 31, scope: !3568)
!4195 = !DILocalVariable(name: "len", scope: !3568, file: !28, line: 474, type: !207, align: 8)
!4196 = !DILocation(line: 474, column: 6, scope: !3568)
!4197 = !DILocation(line: 475, column: 7, scope: !3568)
!4198 = !DILocation(line: 475, column: 27, scope: !3568)
!4199 = !DILocation(line: 475, column: 47, scope: !3568)
!4200 = !DILocation(line: 475, column: 68, scope: !3568)
!4201 = !DILocation(line: 475, column: 80, scope: !3568)
!4202 = !DILocation(line: 475, column: 85, scope: !3568)
!4203 = !DILocation(line: 475, column: 54, scope: !3568)
!4204 = !DILocation(line: 476, column: 6, scope: !3568)
!4205 = !DILocation(line: 476, column: 16, scope: !3568)
!4206 = !DILocation(line: 476, column: 33, scope: !3568)
!4207 = !DILocation(line: 476, column: 49, scope: !3568)
!4208 = !DILocation(line: 476, column: 64, scope: !3568)
!4209 = !DILocation(line: 476, column: 40, scope: !3568)
!4210 = !DILocation(line: 477, column: 6, scope: !3568)
!4211 = !DILocation(line: 477, column: 26, scope: !3568)
!4212 = !DILocation(line: 477, column: 47, scope: !3568)
!4213 = !DILocation(line: 477, column: 59, scope: !3568)
!4214 = !DILocation(line: 477, column: 64, scope: !3568)
!4215 = !DILocation(line: 477, column: 33, scope: !3568)
!4216 = !DILocation(line: 478, column: 6, scope: !3568)
!4217 = !DILocation(line: 480, column: 7, scope: !4218)
!4218 = distinct !DILexicalBlock(scope: !3568, file: !28, line: 479, column: 2)
!4219 = !DILocation(line: 480, column: 11, scope: !4218)
!4220 = !DILocation(line: 480, column: 18, scope: !4218)
!4221 = !DILocalVariable(name: "d", scope: !4218, file: !28, line: 481, type: !3819, align: 8)
!4222 = !DILocation(line: 481, column: 9, scope: !4218)
!4223 = !DILocation(line: 481, column: 13, scope: !4218)
!4224 = !DILocation(line: 482, column: 3, scope: !4218)
!4225 = !DILocation(line: 482, column: 10, scope: !4226)
!4226 = distinct !DILexicalBlock(scope: !4218, file: !28, line: 482, column: 3)
!4227 = !DILocation(line: 482, column: 15, scope: !4226)
!4228 = !DILocalVariable(name: "s", scope: !4229, file: !28, line: 484, type: !117, align: 8)
!4229 = distinct !DILexicalBlock(scope: !4226, file: !28, line: 483, column: 3)
!4230 = !DILocation(line: 484, column: 10, scope: !4229)
!4231 = !DILocation(line: 484, column: 21, scope: !4229)
!4232 = !DILocation(line: 484, column: 24, scope: !4229)
!4233 = !DILocation(line: 484, column: 30, scope: !4229)
!4234 = !DILocation(line: 484, column: 14, scope: !4229)
!4235 = !DILocation(line: 487, column: 10, scope: !4236)
!4236 = distinct !DILexicalBlock(scope: !4229, file: !28, line: 485, column: 4)
!4237 = !DILocation(line: 487, column: 15, scope: !4236)
!4238 = !DILocation(line: 488, column: 6, scope: !4239)
!4239 = distinct !DILexicalBlock(scope: !4236, file: !28, line: 488, column: 6)
!4240 = !DILocation(line: 488, column: 13, scope: !4241)
!4241 = distinct !DILexicalBlock(scope: !4239, file: !28, line: 488, column: 6)
!4242 = !DILocation(line: 488, column: 17, scope: !4241)
!4243 = !DILocation(line: 488, column: 25, scope: !4241)
!4244 = !DILocation(line: 488, column: 33, scope: !4241)
!4245 = !DILocation(line: 489, column: 10, scope: !4236)
!4246 = !DILocation(line: 489, column: 15, scope: !4236)
!4247 = !DILocation(line: 489, column: 21, scope: !4236)
!4248 = !DILocation(line: 490, column: 9, scope: !4249)
!4249 = distinct !DILexicalBlock(scope: !4236, file: !28, line: 490, column: 6)
!4250 = !DILocation(line: 490, column: 13, scope: !4249)
!4251 = !DILocation(line: 492, column: 4, scope: !4229)
!4252 = !DILocation(line: 492, column: 26, scope: !4229)
!4253 = !DILocation(line: 492, column: 29, scope: !4229)
!4254 = !DILocation(line: 492, column: 35, scope: !4229)
!4255 = !DILocation(line: 492, column: 39, scope: !4229)
!4256 = !DILocation(line: 492, column: 11, scope: !4229)
!4257 = !DILocation(line: 482, column: 18, scope: !4226)
!4258 = !DILocation(line: 494, column: 7, scope: !4218)
!4259 = !DILocation(line: 494, column: 12, scope: !4218)
!4260 = !DILocation(line: 494, column: 29, scope: !4218)
!4261 = !DILocation(line: 494, column: 36, scope: !4218)
!4262 = !DILocation(line: 495, column: 3, scope: !4218)
!4263 = !DILocation(line: 495, column: 10, scope: !4264)
!4264 = distinct !DILexicalBlock(scope: !4218, file: !28, line: 495, column: 3)
!4265 = !DILocation(line: 495, column: 14, scope: !4264)
!4266 = !DILocation(line: 495, column: 19, scope: !4264)
!4267 = !DILocalVariable(name: "s", scope: !4268, file: !28, line: 497, type: !117, align: 8)
!4268 = distinct !DILexicalBlock(scope: !4264, file: !28, line: 496, column: 3)
!4269 = !DILocation(line: 497, column: 10, scope: !4268)
!4270 = !DILocation(line: 497, column: 21, scope: !4268)
!4271 = !DILocation(line: 497, column: 24, scope: !4268)
!4272 = !DILocation(line: 497, column: 30, scope: !4268)
!4273 = !DILocation(line: 497, column: 14, scope: !4268)
!4274 = !DILocation(line: 498, column: 4, scope: !4268)
!4275 = !DILocation(line: 498, column: 11, scope: !4276)
!4276 = distinct !DILexicalBlock(scope: !4268, file: !28, line: 498, column: 4)
!4277 = !DILocation(line: 498, column: 15, scope: !4276)
!4278 = !DILocation(line: 498, column: 23, scope: !4276)
!4279 = !DILocation(line: 498, column: 27, scope: !4276)
!4280 = !DILocation(line: 499, column: 4, scope: !4268)
!4281 = !DILocation(line: 499, column: 26, scope: !4268)
!4282 = !DILocation(line: 422, column: 16, scope: !4283, inlinedAt: !4284)
!4283 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !767, file: !767, line: 419, scopeLine: 419, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!4284 = !DILocation(line: 499, column: 29, scope: !4268)
!4285 = !DILocation(line: 422, column: 19, scope: !4283, inlinedAt: !4284)
!4286 = !DILocation(line: 499, column: 11, scope: !4268)
!4287 = !DILocation(line: 495, column: 26, scope: !4264)
!4288 = !DILocation(line: 495, column: 31, scope: !4264)
!4289 = !DILocation(line: 501, column: 3, scope: !4218)
!4290 = !DILocation(line: 501, column: 24, scope: !4218)
!4291 = !DILocation(line: 501, column: 10, scope: !4218)
!4292 = !DILocation(line: 505, column: 7, scope: !4293)
!4293 = distinct !DILexicalBlock(scope: !3568, file: !28, line: 504, column: 2)
!4294 = !DILocation(line: 505, column: 12, scope: !4293)
!4295 = !DILocation(line: 505, column: 19, scope: !4293)
!4296 = !DILocation(line: 505, column: 23, scope: !4293)
!4297 = !DILocalVariable(name: "d", scope: !4298, file: !28, line: 506, type: !3819, align: 8)
!4298 = distinct !DILexicalBlock(scope: !4293, file: !28, line: 506, column: 3)
!4299 = !DILocation(line: 506, column: 14, scope: !4298)
!4300 = !DILocation(line: 506, column: 18, scope: !4298)
!4301 = !DILocation(line: 506, column: 21, scope: !4298)
!4302 = !DILocation(line: 506, column: 25, scope: !4298)
!4303 = !DILocation(line: 506, column: 30, scope: !4298)
!4304 = !DILocalVariable(name: "s", scope: !4305, file: !28, line: 508, type: !117, align: 8)
!4305 = distinct !DILexicalBlock(scope: !4298, file: !28, line: 507, column: 3)
!4306 = !DILocation(line: 508, column: 10, scope: !4305)
!4307 = !DILocation(line: 508, column: 21, scope: !4305)
!4308 = !DILocation(line: 508, column: 24, scope: !4305)
!4309 = !DILocation(line: 508, column: 30, scope: !4305)
!4310 = !DILocation(line: 508, column: 14, scope: !4305)
!4311 = !DILocation(line: 509, column: 8, scope: !4305)
!4312 = !DILocation(line: 509, column: 13, scope: !4305)
!4313 = !DILocation(line: 509, column: 19, scope: !4305)
!4314 = !DILocation(line: 509, column: 25, scope: !4305)
!4315 = !DILocation(line: 509, column: 33, scope: !4305)
!4316 = !DILocation(line: 510, column: 8, scope: !4305)
!4317 = !DILocation(line: 510, column: 13, scope: !4305)
!4318 = !DILocation(line: 512, column: 5, scope: !4319)
!4319 = distinct !DILexicalBlock(scope: !4305, file: !28, line: 511, column: 4)
!4320 = !DILocation(line: 512, column: 12, scope: !4321)
!4321 = distinct !DILexicalBlock(scope: !4319, file: !28, line: 512, column: 5)
!4322 = !DILocation(line: 512, column: 16, scope: !4321)
!4323 = !DILocation(line: 512, column: 24, scope: !4321)
!4324 = !DILocation(line: 512, column: 32, scope: !4321)
!4325 = !DILocation(line: 516, column: 5, scope: !4326)
!4326 = distinct !DILexicalBlock(scope: !4305, file: !28, line: 515, column: 4)
!4327 = !DILocation(line: 516, column: 21, scope: !4326)
!4328 = !DILocation(line: 516, column: 12, scope: !4326)
!4329 = !DILocation(line: 517, column: 9, scope: !4326)
!4330 = !DILocation(line: 517, column: 18, scope: !4326)
!4331 = !DILocation(line: 517, column: 35, scope: !4326)
!4332 = !DILocation(line: 517, column: 42, scope: !4326)
!4333 = !DILocation(line: 519, column: 4, scope: !4305)
!4334 = !DILocation(line: 519, column: 26, scope: !4305)
!4335 = !DILocation(line: 519, column: 39, scope: !4305)
!4336 = !DILocation(line: 519, column: 45, scope: !4305)
!4337 = !DILocation(line: 519, column: 49, scope: !4305)
!4338 = !DILocation(line: 422, column: 16, scope: !4339, inlinedAt: !4340)
!4339 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !767, file: !767, line: 419, scopeLine: 419, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!4340 = !DILocation(line: 519, column: 29, scope: !4305)
!4341 = !DILocation(line: 422, column: 19, scope: !4339, inlinedAt: !4340)
!4342 = !DILocation(line: 519, column: 11, scope: !4305)
!4343 = !DILocation(line: 520, column: 4, scope: !4305)
!4344 = !DILocation(line: 520, column: 9, scope: !4305)
!4345 = !DILocation(line: 520, column: 15, scope: !4305)
!4346 = !DILocation(line: 520, column: 19, scope: !4305)
!4347 = !DILocation(line: 506, column: 38, scope: !4298)
!4348 = !DILocation(line: 522, column: 3, scope: !4293)
!4349 = !DILocation(line: 522, column: 24, scope: !4293)
!4350 = !DILocation(line: 522, column: 10, scope: !4293)
!4351 = !DILocation(line: 523, column: 3, scope: !4293)
!4352 = !DILocation(line: 523, column: 25, scope: !4293)
!4353 = !DILocation(line: 523, column: 31, scope: !4293)
!4354 = !DILocation(line: 523, column: 38, scope: !4293)
!4355 = !DILocation(line: 523, column: 10, scope: !4293)
!4356 = !DILocation(line: 526, column: 6, scope: !3568)
!4357 = !DILocation(line: 526, column: 23, scope: !3568)
!4358 = !DILocation(line: 526, column: 44, scope: !3568)
!4359 = !DILocation(line: 526, column: 56, scope: !3568)
!4360 = !DILocation(line: 526, column: 61, scope: !3568)
!4361 = !DILocation(line: 526, column: 30, scope: !3568)
!4362 = !DILocation(line: 528, column: 9, scope: !3568)
!4363 = !DILocation(line: 274, column: 22, scope: !3673)
!4364 = !DILocation(line: 275, column: 4, scope: !3673)
!4365 = !DILocation(line: 276, column: 4, scope: !3673)
!4366 = !DILocation(line: 468, column: 4, scope: !4166)
!4367 = !DILocation(line: 469, column: 4, scope: !4166)
!4368 = !DILocation(line: 490, column: 7, scope: !4249)
!4369 = !DILocation(line: 498, column: 21, scope: !4276)
!4370 = distinct !DISubprogram(name: "ntoa", linkageName: "std.io.Formatter.ntoa", scope: !28, file: !28, line: 531, type: !4371, scopeLine: 531, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!4371 = !DISubroutineType(types: !4372)
!4372 = !{!115, !308, !1847, !2310, !920, !94}
!4373 = !DILocation(line: 532, column: 1, scope: !4370)
!4374 = !DILocalVariable(name: "self", arg: 1, scope: !4370, file: !28, line: 531, type: !1847)
!4375 = !DILocation(line: 531, column: 24, scope: !4370)
!4376 = !DILocalVariable(name: "value", arg: 2, scope: !4370, file: !28, line: 531, type: !2310)
!4377 = !DILocation(line: 531, column: 39, scope: !4370)
!4378 = !DILocalVariable(name: "negative", arg: 3, scope: !4370, file: !28, line: 531, type: !920)
!4379 = !DILocation(line: 531, column: 51, scope: !4370)
!4380 = !DILocalVariable(name: "base", arg: 4, scope: !4370, file: !28, line: 531, type: !94)
!4381 = !DILocation(line: 531, column: 66, scope: !4370)
!4382 = !DILocalVariable(name: "buf", scope: !4370, file: !28, line: 533, type: !4383, align: 16)
!4383 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 2048, align: 8, elements: !4384)
!4384 = !{!4385}
!4385 = !DISubrange(count: 256, lowerBound: 0)
!4386 = !DILocation(line: 533, column: 32, scope: !4370)
!4387 = !DILocalVariable(name: "len", scope: !4370, file: !28, line: 534, type: !207, align: 8)
!4388 = !DILocation(line: 534, column: 6, scope: !4370)
!4389 = !DILocation(line: 537, column: 6, scope: !4370)
!4390 = !DILocation(line: 537, column: 14, scope: !4370)
!4391 = !DILocation(line: 537, column: 32, scope: !4370)
!4392 = !DILocation(line: 540, column: 7, scope: !4370)
!4393 = !DILocation(line: 540, column: 31, scope: !4370)
!4394 = !DILocalVariable(name: "past_10", scope: !4395, file: !28, line: 542, type: !11, align: 1)
!4395 = distinct !DILexicalBlock(scope: !4370, file: !28, line: 541, column: 2)
!4396 = !DILocation(line: 542, column: 8, scope: !4395)
!4397 = !DILocation(line: 542, column: 19, scope: !4395)
!4398 = !DILocation(line: 542, column: 48, scope: !4395)
!4399 = !DILocation(line: 543, column: 3, scope: !4395)
!4400 = !DILocation(line: 550, column: 10, scope: !4401)
!4401 = distinct !DILexicalBlock(scope: !4395, file: !28, line: 543, column: 3)
!4402 = !DILocation(line: 545, column: 8, scope: !4403)
!4403 = distinct !DILexicalBlock(scope: !4401, file: !28, line: 544, column: 3)
!4404 = !DILocation(line: 545, column: 47, scope: !4403)
!4405 = !DILocalVariable(name: "digit", scope: !4403, file: !28, line: 546, type: !11, align: 1)
!4406 = !DILocation(line: 546, column: 9, scope: !4403)
!4407 = !DILocation(line: 546, column: 24, scope: !4403)
!4408 = !DILocation(line: 546, column: 32, scope: !4403)
!4409 = !DILocation(line: 546, column: 18, scope: !4403)
!4410 = !DILocation(line: 547, column: 8, scope: !4403)
!4411 = !DILocation(line: 547, column: 17, scope: !4403)
!4412 = !DILocation(line: 547, column: 26, scope: !4403)
!4413 = !DILocation(line: 547, column: 39, scope: !4403)
!4414 = !DILocation(line: 547, column: 45, scope: !4403)
!4415 = !DILocation(line: 548, column: 4, scope: !4403)
!4416 = !DILocation(line: 548, column: 13, scope: !4403)
!4417 = !DILocation(line: 552, column: 34, scope: !4370)
!4418 = !DILocation(line: 552, column: 9, scope: !4370)
!4419 = distinct !DISubprogram(name: "ntoa_format", linkageName: "std.io.Formatter.ntoa_format", scope: !28, file: !28, line: 555, type: !4420, scopeLine: 555, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!4420 = !DISubroutineType(types: !4421)
!4421 = !{!115, !308, !1847, !466, !208, !920, !94}
!4422 = !DILocation(line: 556, column: 1, scope: !4419)
!4423 = !DILocalVariable(name: "self", arg: 1, scope: !4419, file: !28, line: 555, type: !1847)
!4424 = !DILocation(line: 555, column: 31, scope: !4419)
!4425 = !DILocalVariable(name: "buf", arg: 2, scope: !4419, file: !28, line: 555, type: !466)
!4426 = !DILocation(line: 555, column: 45, scope: !4419)
!4427 = !DILocalVariable(name: "len", arg: 3, scope: !4419, file: !28, line: 555, type: !207)
!4428 = !DILocation(line: 555, column: 54, scope: !4419)
!4429 = !DILocalVariable(name: "negative", arg: 4, scope: !4419, file: !28, line: 555, type: !920)
!4430 = !DILocation(line: 555, column: 64, scope: !4419)
!4431 = !DILocalVariable(name: "base", arg: 5, scope: !4419, file: !28, line: 555, type: !94)
!4432 = !DILocation(line: 555, column: 79, scope: !4419)
!4433 = !DILocation(line: 558, column: 7, scope: !4419)
!4434 = !DILocation(line: 560, column: 7, scope: !4435)
!4435 = distinct !DILexicalBlock(scope: !4419, file: !28, line: 559, column: 2)
!4436 = !DILocation(line: 560, column: 21, scope: !4435)
!4437 = !DILocation(line: 560, column: 44, scope: !4435)
!4438 = !DILocation(line: 560, column: 56, scope: !4435)
!4439 = !DILocation(line: 560, column: 75, scope: !4435)
!4440 = !DILocation(line: 560, column: 94, scope: !4435)
!4441 = !DILocation(line: 561, column: 3, scope: !4435)
!4442 = !DILocation(line: 561, column: 10, scope: !4443)
!4443 = distinct !DILexicalBlock(scope: !4435, file: !28, line: 561, column: 3)
!4444 = !DILocation(line: 561, column: 16, scope: !4443)
!4445 = !DILocation(line: 563, column: 8, scope: !4446)
!4446 = distinct !DILexicalBlock(scope: !4443, file: !28, line: 562, column: 3)
!4447 = !DILocation(line: 563, column: 15, scope: !4446)
!4448 = !DILocation(line: 563, column: 31, scope: !4446)
!4449 = !DILocation(line: 564, column: 4, scope: !4446)
!4450 = !DILocation(line: 564, column: 8, scope: !4446)
!4451 = !DILocation(line: 564, column: 17, scope: !4446)
!4452 = !DILocation(line: 566, column: 3, scope: !4435)
!4453 = !DILocation(line: 566, column: 10, scope: !4454)
!4454 = distinct !DILexicalBlock(scope: !4435, file: !28, line: 566, column: 3)
!4455 = !DILocation(line: 566, column: 32, scope: !4454)
!4456 = !DILocation(line: 566, column: 38, scope: !4454)
!4457 = !DILocation(line: 568, column: 8, scope: !4458)
!4458 = distinct !DILexicalBlock(scope: !4454, file: !28, line: 567, column: 3)
!4459 = !DILocation(line: 568, column: 15, scope: !4458)
!4460 = !DILocation(line: 568, column: 31, scope: !4458)
!4461 = !DILocation(line: 569, column: 4, scope: !4458)
!4462 = !DILocation(line: 569, column: 8, scope: !4458)
!4463 = !DILocation(line: 569, column: 17, scope: !4458)
!4464 = !DILocation(line: 574, column: 6, scope: !4419)
!4465 = !DILocation(line: 574, column: 25, scope: !4419)
!4466 = !DILocation(line: 576, column: 8, scope: !4467)
!4467 = distinct !DILexicalBlock(scope: !4419, file: !28, line: 575, column: 2)
!4468 = !DILocation(line: 576, column: 32, scope: !4467)
!4469 = !DILocation(line: 576, column: 39, scope: !4467)
!4470 = !DILocation(line: 576, column: 46, scope: !4467)
!4471 = !DILocation(line: 576, column: 59, scope: !4467)
!4472 = !DILocation(line: 576, column: 66, scope: !4467)
!4473 = !DILocation(line: 578, column: 4, scope: !4474)
!4474 = distinct !DILexicalBlock(scope: !4467, file: !28, line: 577, column: 3)
!4475 = !DILocation(line: 579, column: 8, scope: !4474)
!4476 = !DILocation(line: 579, column: 13, scope: !4474)
!4477 = !DILocation(line: 581, column: 7, scope: !4467)
!4478 = !DILocation(line: 583, column: 8, scope: !4479)
!4479 = distinct !DILexicalBlock(scope: !4467, file: !28, line: 582, column: 3)
!4480 = !DILocation(line: 583, column: 19, scope: !4479)
!4481 = !DILocation(line: 583, column: 35, scope: !4479)
!4482 = !DILocation(line: 587, column: 6, scope: !4483)
!4483 = distinct !DILexicalBlock(scope: !4484, file: !28, line: 587, column: 6)
!4484 = distinct !DILexicalBlock(scope: !4479, file: !28, line: 584, column: 4)
!4485 = !DILocation(line: 587, column: 10, scope: !4483)
!4486 = !DILocation(line: 587, column: 19, scope: !4483)
!4487 = !DILocation(line: 587, column: 48, scope: !4483)
!4488 = !DILocation(line: 589, column: 6, scope: !4489)
!4489 = distinct !DILexicalBlock(scope: !4484, file: !28, line: 589, column: 6)
!4490 = !DILocation(line: 589, column: 10, scope: !4489)
!4491 = !DILocation(line: 589, column: 19, scope: !4489)
!4492 = !DILocation(line: 589, column: 48, scope: !4489)
!4493 = !DILocation(line: 591, column: 6, scope: !4494)
!4494 = distinct !DILexicalBlock(scope: !4484, file: !28, line: 591, column: 6)
!4495 = !DILocation(line: 591, column: 10, scope: !4494)
!4496 = !DILocation(line: 591, column: 19, scope: !4494)
!4497 = !DILocation(line: 591, column: 48, scope: !4494)
!4498 = !DILocation(line: 164, column: 33, scope: !4499, inlinedAt: !4500)
!4499 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !215, file: !215, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!4500 = !DILocation(line: 593, column: 6, scope: !4501)
!4501 = distinct !DILexicalBlock(scope: !4484, file: !28, line: 593, column: 6)
!4502 = !DILocation(line: 164, column: 2, scope: !4499, inlinedAt: !4500)
!4503 = !DILocation(line: 166, column: 2, scope: !4499, inlinedAt: !4500)
!4504 = !DILocation(line: 595, column: 4, scope: !4479)
!4505 = !DILocation(line: 595, column: 8, scope: !4479)
!4506 = !DILocation(line: 595, column: 17, scope: !4479)
!4507 = !DILocation(line: 601, column: 8, scope: !4508)
!4508 = distinct !DILexicalBlock(scope: !4419, file: !28, line: 599, column: 2)
!4509 = !DILocation(line: 602, column: 8, scope: !4510)
!4510 = distinct !DILexicalBlock(scope: !4508, file: !28, line: 602, column: 4)
!4511 = !DILocation(line: 602, column: 15, scope: !4510)
!4512 = !DILocation(line: 602, column: 31, scope: !4510)
!4513 = !DILocation(line: 603, column: 4, scope: !4510)
!4514 = !DILocation(line: 603, column: 8, scope: !4510)
!4515 = !DILocation(line: 603, column: 17, scope: !4510)
!4516 = !DILocation(line: 604, column: 8, scope: !4508)
!4517 = !DILocation(line: 605, column: 8, scope: !4518)
!4518 = distinct !DILexicalBlock(scope: !4508, file: !28, line: 605, column: 4)
!4519 = !DILocation(line: 605, column: 15, scope: !4518)
!4520 = !DILocation(line: 605, column: 31, scope: !4518)
!4521 = !DILocation(line: 606, column: 4, scope: !4518)
!4522 = !DILocation(line: 606, column: 8, scope: !4518)
!4523 = !DILocation(line: 606, column: 17, scope: !4518)
!4524 = !DILocation(line: 607, column: 8, scope: !4508)
!4525 = !DILocation(line: 608, column: 8, scope: !4526)
!4526 = distinct !DILexicalBlock(scope: !4508, file: !28, line: 608, column: 4)
!4527 = !DILocation(line: 608, column: 15, scope: !4526)
!4528 = !DILocation(line: 608, column: 31, scope: !4526)
!4529 = !DILocation(line: 609, column: 4, scope: !4526)
!4530 = !DILocation(line: 609, column: 8, scope: !4526)
!4531 = !DILocation(line: 609, column: 17, scope: !4526)
!4532 = !DILocation(line: 611, column: 6, scope: !4419)
!4533 = !DILocation(line: 611, column: 28, scope: !4419)
!4534 = !DILocation(line: 611, column: 32, scope: !4419)
!4535 = !DILocation(line: 611, column: 33, scope: !4419)
!4536 = !DILocation(line: 611, column: 11, scope: !4419)
!4537 = !DILocation(line: 612, column: 9, scope: !4419)
!4538 = distinct !DISubprogram(name: "ntoa_any", linkageName: "std.io.Formatter.ntoa_any", scope: !28, file: !28, line: 616, type: !4539, scopeLine: 616, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!4539 = !DISubroutineType(types: !4540)
!4540 = !{!115, !308, !1847, !1878, !94}
!4541 = !DILocation(line: 617, column: 1, scope: !4538)
!4542 = !DILocalVariable(name: "self", arg: 1, scope: !4538, file: !28, line: 616, type: !1847)
!4543 = !DILocation(line: 616, column: 28, scope: !4538)
!4544 = !DILocalVariable(name: "arg", arg: 2, scope: !4538, file: !28, line: 616, type: !1878)
!4545 = !DILocation(line: 616, column: 39, scope: !4538)
!4546 = !DILocalVariable(name: "base", arg: 3, scope: !4538, file: !28, line: 616, type: !94)
!4547 = !DILocation(line: 616, column: 49, scope: !4538)
!4548 = !DILocalVariable(name: "is_neg", scope: !4538, file: !28, line: 618, type: !920, align: 1)
!4549 = !DILocation(line: 618, column: 7, scope: !4538)
!4550 = !DILocation(line: 619, column: 19, scope: !4538)
!4551 = !DILocation(line: 619, column: 9, scope: !4538)
!4552 = distinct !DISubprogram(name: "out_char", linkageName: "std.io.Formatter.out_char", scope: !28, file: !28, line: 622, type: !2060, scopeLine: 622, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!4553 = !DILocation(line: 623, column: 1, scope: !4552)
!4554 = !DILocalVariable(name: "self", arg: 1, scope: !4552, file: !28, line: 622, type: !1847)
!4555 = !DILocation(line: 622, column: 28, scope: !4552)
!4556 = !DILocalVariable(name: "arg", arg: 2, scope: !4552, file: !28, line: 622, type: !1878)
!4557 = !DILocation(line: 622, column: 39, scope: !4552)
!4558 = !DILocation(line: 624, column: 7, scope: !4552)
!4559 = !DILocation(line: 626, column: 10, scope: !4560)
!4560 = distinct !DILexicalBlock(scope: !4552, file: !28, line: 625, column: 2)
!4561 = !DILocalVariable(name: "len", scope: !4552, file: !28, line: 628, type: !207, align: 8)
!4562 = !DILocation(line: 628, column: 6, scope: !4552)
!4563 = !DILocation(line: 628, column: 12, scope: !4552)
!4564 = !DILocalVariable(name: "l", scope: !4552, file: !28, line: 629, type: !94, align: 4)
!4565 = !DILocation(line: 629, column: 7, scope: !4552)
!4566 = !DILocation(line: 629, column: 11, scope: !4552)
!4567 = !DILocation(line: 631, column: 2, scope: !4552)
!4568 = !DILocation(line: 631, column: 21, scope: !4552)
!4569 = !DILocation(line: 631, column: 9, scope: !4552)
!4570 = !DILocalVariable(name: "c", scope: !4552, file: !28, line: 633, type: !4571, align: 4)
!4571 = !DIDerivedType(tag: DW_TAG_typedef, name: "Char32", scope: !28, file: !28, line: 8, baseType: !94, align: 4)
!4572 = !DILocation(line: 633, column: 9, scope: !4552)
!4573 = !DILocation(line: 22, column: 11, scope: !4574, inlinedAt: !4576)
!4574 = distinct !DILexicalBlock(scope: !4575, file: !2157, line: 26, column: 1)
!4575 = distinct !DISubprogram(name: "any_to_int", linkageName: "any_to_int", scope: !2157, file: !2157, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!4576 = !DILocation(line: 633, column: 13, scope: !4552)
!4577 = !DILocation(line: 23, column: 11, scope: !4574, inlinedAt: !4576)
!4578 = !DILocalVariable(name: "any_type", scope: !4575, file: !28, line: 27, type: !92, align: 8)
!4579 = !DILocation(line: 27, column: 9, scope: !4575, inlinedAt: !4576)
!4580 = !DILocation(line: 27, column: 20, scope: !4575, inlinedAt: !4576)
!4581 = !DILocalVariable(name: "kind", scope: !4575, file: !28, line: 28, type: !57, align: 1)
!4582 = !DILocation(line: 28, column: 11, scope: !4575, inlinedAt: !4576)
!4583 = !DILocation(line: 28, column: 18, scope: !4575, inlinedAt: !4576)
!4584 = !DILocalVariable(name: "is_mixed_signed", scope: !4575, file: !28, line: 29, type: !920, align: 1)
!4585 = !DILocation(line: 29, column: 7, scope: !4575, inlinedAt: !4576)
!4586 = !DILocation(line: 29, column: 41, scope: !4575, inlinedAt: !4576)
!4587 = !DILocation(line: 29, column: 25, scope: !4575, inlinedAt: !4576)
!4588 = !DILocalVariable(name: "max", scope: !4575, file: !28, line: 30, type: !94, align: 4)
!4589 = !DILocation(line: 30, column: 8, scope: !4575, inlinedAt: !4576)
!4590 = !DILocation(line: 30, column: 14, scope: !4575, inlinedAt: !4576)
!4591 = !DILocalVariable(name: "min", scope: !4575, file: !28, line: 31, type: !94, align: 4)
!4592 = !DILocation(line: 31, column: 8, scope: !4575, inlinedAt: !4576)
!4593 = !DILocation(line: 31, column: 14, scope: !4575, inlinedAt: !4576)
!4594 = !DILocation(line: 34, column: 8, scope: !4595, inlinedAt: !4576)
!4595 = distinct !DILexicalBlock(scope: !4575, file: !2157, line: 32, column: 2)
!4596 = !DILocalVariable(name: "c", scope: !4597, file: !28, line: 35, type: !2190, align: 1)
!4597 = distinct !DILexicalBlock(scope: !4595, file: !2157, line: 35, column: 4)
!4598 = !DILocation(line: 35, column: 10, scope: !4597, inlinedAt: !4576)
!4599 = !DILocation(line: 35, column: 22, scope: !4597, inlinedAt: !4576)
!4600 = !DILocation(line: 35, column: 16, scope: !4597, inlinedAt: !4576)
!4601 = !DILocation(line: 36, column: 8, scope: !4597, inlinedAt: !4576)
!4602 = !DILocation(line: 36, column: 27, scope: !4597, inlinedAt: !4576)
!4603 = !DILocation(line: 36, column: 41, scope: !4597, inlinedAt: !4576)
!4604 = !DILocation(line: 37, column: 12, scope: !4597, inlinedAt: !4576)
!4605 = !DILocation(line: 38, column: 8, scope: !4595, inlinedAt: !4576)
!4606 = !DILocalVariable(name: "s", scope: !4607, file: !28, line: 39, type: !2201, align: 2)
!4607 = distinct !DILexicalBlock(scope: !4595, file: !2157, line: 39, column: 4)
!4608 = !DILocation(line: 39, column: 10, scope: !4607, inlinedAt: !4576)
!4609 = !DILocation(line: 39, column: 23, scope: !4607, inlinedAt: !4576)
!4610 = !DILocation(line: 39, column: 16, scope: !4607, inlinedAt: !4576)
!4611 = !DILocation(line: 40, column: 8, scope: !4607, inlinedAt: !4576)
!4612 = !DILocation(line: 40, column: 27, scope: !4607, inlinedAt: !4576)
!4613 = !DILocation(line: 40, column: 41, scope: !4607, inlinedAt: !4576)
!4614 = !DILocation(line: 41, column: 8, scope: !4607, inlinedAt: !4576)
!4615 = !DILocation(line: 41, column: 12, scope: !4607, inlinedAt: !4576)
!4616 = !DILocation(line: 41, column: 19, scope: !4607, inlinedAt: !4576)
!4617 = !DILocation(line: 41, column: 23, scope: !4607, inlinedAt: !4576)
!4618 = !DILocation(line: 41, column: 35, scope: !4607, inlinedAt: !4576)
!4619 = !DILocation(line: 42, column: 12, scope: !4607, inlinedAt: !4576)
!4620 = !DILocation(line: 43, column: 8, scope: !4595, inlinedAt: !4576)
!4621 = !DILocalVariable(name: "i", scope: !4622, file: !28, line: 44, type: !3, align: 4)
!4622 = distinct !DILexicalBlock(scope: !4595, file: !2157, line: 44, column: 4)
!4623 = !DILocation(line: 44, column: 8, scope: !4622, inlinedAt: !4576)
!4624 = !DILocation(line: 44, column: 19, scope: !4622, inlinedAt: !4576)
!4625 = !DILocation(line: 44, column: 14, scope: !4622, inlinedAt: !4576)
!4626 = !DILocation(line: 45, column: 8, scope: !4622, inlinedAt: !4576)
!4627 = !DILocation(line: 45, column: 27, scope: !4622, inlinedAt: !4576)
!4628 = !DILocation(line: 45, column: 41, scope: !4622, inlinedAt: !4576)
!4629 = !DILocation(line: 46, column: 8, scope: !4622, inlinedAt: !4576)
!4630 = !DILocation(line: 46, column: 12, scope: !4622, inlinedAt: !4576)
!4631 = !DILocation(line: 46, column: 19, scope: !4622, inlinedAt: !4576)
!4632 = !DILocation(line: 46, column: 23, scope: !4622, inlinedAt: !4576)
!4633 = !DILocation(line: 46, column: 35, scope: !4622, inlinedAt: !4576)
!4634 = !DILocation(line: 47, column: 12, scope: !4622, inlinedAt: !4576)
!4635 = !DILocation(line: 48, column: 8, scope: !4595, inlinedAt: !4576)
!4636 = !DILocalVariable(name: "l", scope: !4637, file: !28, line: 49, type: !116, align: 8)
!4637 = distinct !DILexicalBlock(scope: !4595, file: !2157, line: 49, column: 4)
!4638 = !DILocation(line: 49, column: 9, scope: !4637, inlinedAt: !4576)
!4639 = !DILocation(line: 49, column: 21, scope: !4637, inlinedAt: !4576)
!4640 = !DILocation(line: 49, column: 15, scope: !4637, inlinedAt: !4576)
!4641 = !DILocation(line: 50, column: 8, scope: !4637, inlinedAt: !4576)
!4642 = !DILocation(line: 50, column: 27, scope: !4637, inlinedAt: !4576)
!4643 = !DILocation(line: 50, column: 41, scope: !4637, inlinedAt: !4576)
!4644 = !DILocation(line: 51, column: 8, scope: !4637, inlinedAt: !4576)
!4645 = !DILocation(line: 51, column: 12, scope: !4637, inlinedAt: !4576)
!4646 = !DILocation(line: 51, column: 19, scope: !4637, inlinedAt: !4576)
!4647 = !DILocation(line: 51, column: 23, scope: !4637, inlinedAt: !4576)
!4648 = !DILocation(line: 51, column: 35, scope: !4637, inlinedAt: !4576)
!4649 = !DILocation(line: 52, column: 12, scope: !4637, inlinedAt: !4576)
!4650 = !DILocation(line: 53, column: 8, scope: !4595, inlinedAt: !4576)
!4651 = !DILocalVariable(name: "i", scope: !4652, file: !28, line: 54, type: !2247, align: 16)
!4652 = distinct !DILexicalBlock(scope: !4595, file: !2157, line: 54, column: 4)
!4653 = !DILocation(line: 54, column: 11, scope: !4652, inlinedAt: !4576)
!4654 = !DILocation(line: 54, column: 25, scope: !4652, inlinedAt: !4576)
!4655 = !DILocation(line: 54, column: 17, scope: !4652, inlinedAt: !4576)
!4656 = !DILocation(line: 55, column: 8, scope: !4652, inlinedAt: !4576)
!4657 = !DILocation(line: 55, column: 27, scope: !4652, inlinedAt: !4576)
!4658 = !DILocation(line: 55, column: 41, scope: !4652, inlinedAt: !4576)
!4659 = !DILocation(line: 56, column: 8, scope: !4652, inlinedAt: !4576)
!4660 = !DILocation(line: 56, column: 12, scope: !4652, inlinedAt: !4576)
!4661 = !DILocation(line: 56, column: 19, scope: !4652, inlinedAt: !4576)
!4662 = !DILocation(line: 56, column: 23, scope: !4652, inlinedAt: !4576)
!4663 = !DILocation(line: 56, column: 35, scope: !4652, inlinedAt: !4576)
!4664 = !DILocation(line: 57, column: 12, scope: !4652, inlinedAt: !4576)
!4665 = !DILocation(line: 58, column: 8, scope: !4595, inlinedAt: !4576)
!4666 = !DILocalVariable(name: "c", scope: !4667, file: !28, line: 59, type: !11, align: 1)
!4667 = distinct !DILexicalBlock(scope: !4595, file: !2157, line: 59, column: 4)
!4668 = !DILocation(line: 59, column: 9, scope: !4667, inlinedAt: !4576)
!4669 = !DILocation(line: 59, column: 21, scope: !4667, inlinedAt: !4576)
!4670 = !DILocation(line: 59, column: 15, scope: !4667, inlinedAt: !4576)
!4671 = !DILocation(line: 60, column: 8, scope: !4667, inlinedAt: !4576)
!4672 = !DILocation(line: 60, column: 12, scope: !4667, inlinedAt: !4576)
!4673 = !DILocation(line: 60, column: 24, scope: !4667, inlinedAt: !4576)
!4674 = !DILocation(line: 61, column: 12, scope: !4667, inlinedAt: !4576)
!4675 = !DILocation(line: 62, column: 8, scope: !4595, inlinedAt: !4576)
!4676 = !DILocalVariable(name: "s", scope: !4677, file: !28, line: 63, type: !2273, align: 2)
!4677 = distinct !DILexicalBlock(scope: !4595, file: !2157, line: 63, column: 4)
!4678 = !DILocation(line: 63, column: 11, scope: !4677, inlinedAt: !4576)
!4679 = !DILocation(line: 63, column: 25, scope: !4677, inlinedAt: !4576)
!4680 = !DILocation(line: 63, column: 17, scope: !4677, inlinedAt: !4576)
!4681 = !DILocation(line: 64, column: 8, scope: !4677, inlinedAt: !4576)
!4682 = !DILocation(line: 64, column: 12, scope: !4677, inlinedAt: !4576)
!4683 = !DILocation(line: 64, column: 19, scope: !4677, inlinedAt: !4576)
!4684 = !DILocation(line: 64, column: 23, scope: !4677, inlinedAt: !4576)
!4685 = !DILocation(line: 64, column: 35, scope: !4677, inlinedAt: !4576)
!4686 = !DILocation(line: 65, column: 12, scope: !4677, inlinedAt: !4576)
!4687 = !DILocation(line: 66, column: 8, scope: !4595, inlinedAt: !4576)
!4688 = !DILocalVariable(name: "i", scope: !4689, file: !28, line: 67, type: !94, align: 4)
!4689 = distinct !DILexicalBlock(scope: !4595, file: !2157, line: 67, column: 4)
!4690 = !DILocation(line: 67, column: 9, scope: !4689, inlinedAt: !4576)
!4691 = !DILocation(line: 67, column: 21, scope: !4689, inlinedAt: !4576)
!4692 = !DILocation(line: 67, column: 15, scope: !4689, inlinedAt: !4576)
!4693 = !DILocation(line: 68, column: 8, scope: !4689, inlinedAt: !4576)
!4694 = !DILocation(line: 68, column: 12, scope: !4689, inlinedAt: !4576)
!4695 = !DILocation(line: 68, column: 19, scope: !4689, inlinedAt: !4576)
!4696 = !DILocation(line: 68, column: 23, scope: !4689, inlinedAt: !4576)
!4697 = !DILocation(line: 68, column: 35, scope: !4689, inlinedAt: !4576)
!4698 = !DILocation(line: 69, column: 12, scope: !4689, inlinedAt: !4576)
!4699 = !DILocation(line: 70, column: 8, scope: !4595, inlinedAt: !4576)
!4700 = !DILocalVariable(name: "l", scope: !4701, file: !28, line: 71, type: !208, align: 8)
!4701 = distinct !DILexicalBlock(scope: !4595, file: !2157, line: 71, column: 4)
!4702 = !DILocation(line: 71, column: 10, scope: !4701, inlinedAt: !4576)
!4703 = !DILocation(line: 71, column: 23, scope: !4701, inlinedAt: !4576)
!4704 = !DILocation(line: 71, column: 16, scope: !4701, inlinedAt: !4576)
!4705 = !DILocation(line: 72, column: 8, scope: !4701, inlinedAt: !4576)
!4706 = !DILocation(line: 72, column: 12, scope: !4701, inlinedAt: !4576)
!4707 = !DILocation(line: 72, column: 19, scope: !4701, inlinedAt: !4576)
!4708 = !DILocation(line: 72, column: 23, scope: !4701, inlinedAt: !4576)
!4709 = !DILocation(line: 72, column: 35, scope: !4701, inlinedAt: !4576)
!4710 = !DILocation(line: 73, column: 12, scope: !4701, inlinedAt: !4576)
!4711 = !DILocation(line: 74, column: 8, scope: !4595, inlinedAt: !4576)
!4712 = !DILocalVariable(name: "i", scope: !4713, file: !28, line: 75, type: !2310, align: 16)
!4713 = distinct !DILexicalBlock(scope: !4595, file: !2157, line: 75, column: 4)
!4714 = !DILocation(line: 75, column: 12, scope: !4713, inlinedAt: !4576)
!4715 = !DILocation(line: 75, column: 27, scope: !4713, inlinedAt: !4576)
!4716 = !DILocation(line: 75, column: 18, scope: !4713, inlinedAt: !4576)
!4717 = !DILocation(line: 76, column: 8, scope: !4713, inlinedAt: !4576)
!4718 = !DILocation(line: 76, column: 12, scope: !4713, inlinedAt: !4576)
!4719 = !DILocation(line: 76, column: 19, scope: !4713, inlinedAt: !4576)
!4720 = !DILocation(line: 76, column: 23, scope: !4713, inlinedAt: !4576)
!4721 = !DILocation(line: 76, column: 35, scope: !4713, inlinedAt: !4576)
!4722 = !DILocation(line: 77, column: 12, scope: !4713, inlinedAt: !4576)
!4723 = !DILocation(line: 164, column: 33, scope: !4724, inlinedAt: !4725)
!4724 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !215, file: !215, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!4725 = !DILocation(line: 79, column: 4, scope: !4726, inlinedAt: !4576)
!4726 = distinct !DILexicalBlock(scope: !4595, file: !2157, line: 79, column: 4)
!4727 = !DILocation(line: 164, column: 2, scope: !4724, inlinedAt: !4725)
!4728 = !DILocation(line: 166, column: 2, scope: !4724, inlinedAt: !4725)
!4729 = !DILocation(line: 633, column: 45, scope: !4552)
!4730 = !DILocation(line: 636, column: 8, scope: !4731)
!4731 = distinct !DILexicalBlock(scope: !4552, file: !28, line: 634, column: 2)
!4732 = !DILocation(line: 637, column: 14, scope: !4733)
!4733 = distinct !DILexicalBlock(scope: !4731, file: !28, line: 637, column: 4)
!4734 = !DILocation(line: 637, column: 4, scope: !4733)
!4735 = !DILocation(line: 638, column: 8, scope: !4731)
!4736 = !DILocation(line: 639, column: 27, scope: !4737)
!4737 = distinct !DILexicalBlock(scope: !4731, file: !28, line: 639, column: 4)
!4738 = !DILocation(line: 639, column: 14, scope: !4737)
!4739 = !DILocation(line: 639, column: 4, scope: !4737)
!4740 = !DILocation(line: 640, column: 28, scope: !4737)
!4741 = !DILocation(line: 640, column: 14, scope: !4737)
!4742 = !DILocation(line: 640, column: 4, scope: !4737)
!4743 = !DILocation(line: 641, column: 8, scope: !4731)
!4744 = !DILocation(line: 642, column: 27, scope: !4745)
!4745 = distinct !DILexicalBlock(scope: !4731, file: !28, line: 642, column: 4)
!4746 = !DILocation(line: 642, column: 14, scope: !4745)
!4747 = !DILocation(line: 642, column: 4, scope: !4745)
!4748 = !DILocation(line: 643, column: 28, scope: !4745)
!4749 = !DILocation(line: 643, column: 14, scope: !4745)
!4750 = !DILocation(line: 643, column: 4, scope: !4745)
!4751 = !DILocation(line: 644, column: 28, scope: !4745)
!4752 = !DILocation(line: 644, column: 14, scope: !4745)
!4753 = !DILocation(line: 644, column: 4, scope: !4745)
!4754 = !DILocation(line: 646, column: 27, scope: !4755)
!4755 = distinct !DILexicalBlock(scope: !4731, file: !28, line: 646, column: 4)
!4756 = !DILocation(line: 646, column: 14, scope: !4755)
!4757 = !DILocation(line: 646, column: 4, scope: !4755)
!4758 = !DILocation(line: 647, column: 28, scope: !4755)
!4759 = !DILocation(line: 647, column: 14, scope: !4755)
!4760 = !DILocation(line: 647, column: 4, scope: !4755)
!4761 = !DILocation(line: 648, column: 28, scope: !4755)
!4762 = !DILocation(line: 648, column: 14, scope: !4755)
!4763 = !DILocation(line: 648, column: 4, scope: !4755)
!4764 = !DILocation(line: 649, column: 28, scope: !4755)
!4765 = !DILocation(line: 649, column: 14, scope: !4755)
!4766 = !DILocation(line: 649, column: 4, scope: !4755)
!4767 = !DILocation(line: 651, column: 2, scope: !4552)
!4768 = !DILocation(line: 651, column: 21, scope: !4552)
!4769 = !DILocation(line: 651, column: 9, scope: !4552)
!4770 = !DILocation(line: 652, column: 9, scope: !4552)
!4771 = distinct !DISubprogram(name: "out_reverse", linkageName: "std.io.Formatter.out_reverse", scope: !28, file: !28, line: 656, type: !3525, scopeLine: 656, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!4772 = !DILocation(line: 657, column: 1, scope: !4771)
!4773 = !DILocalVariable(name: "self", arg: 1, scope: !4771, file: !28, line: 656, type: !1847)
!4774 = !DILocation(line: 656, column: 31, scope: !4771)
!4775 = !DILocalVariable(name: "buf", arg: 2, scope: !4771, file: !28, line: 656, type: !203)
!4776 = !DILocation(line: 656, column: 45, scope: !4771)
!4777 = !DILocalVariable(name: "n", scope: !4771, file: !28, line: 658, type: !207, align: 8)
!4778 = !DILocation(line: 658, column: 6, scope: !4771)
!4779 = !DILocalVariable(name: "buffer_start_idx", scope: !4771, file: !28, line: 659, type: !207, align: 8)
!4780 = !DILocation(line: 659, column: 6, scope: !4771)
!4781 = !DILocation(line: 659, column: 25, scope: !4771)
!4782 = !DILocalVariable(name: "len", scope: !4771, file: !28, line: 660, type: !207, align: 8)
!4783 = !DILocation(line: 660, column: 6, scope: !4771)
!4784 = !DILocation(line: 660, column: 12, scope: !4771)
!4785 = !DILocation(line: 662, column: 7, scope: !4771)
!4786 = !DILocation(line: 662, column: 30, scope: !4771)
!4787 = !DILocation(line: 664, column: 3, scope: !4788)
!4788 = distinct !DILexicalBlock(scope: !4771, file: !28, line: 663, column: 2)
!4789 = !DILocation(line: 664, column: 22, scope: !4788)
!4790 = !DILocation(line: 664, column: 34, scope: !4788)
!4791 = !DILocation(line: 664, column: 8, scope: !4788)
!4792 = !DILocation(line: 667, column: 2, scope: !4771)
!4793 = !DILocation(line: 667, column: 9, scope: !4794)
!4794 = distinct !DILexicalBlock(scope: !4771, file: !28, line: 667, column: 2)
!4795 = !DILocation(line: 667, column: 14, scope: !4794)
!4796 = !DILocation(line: 667, column: 28, scope: !4794)
!4797 = !DILocation(line: 667, column: 34, scope: !4794)
!4798 = !DILocation(line: 667, column: 32, scope: !4794)
!4799 = !DILocation(line: 667, column: 19, scope: !4794)
!4800 = !DILocation(line: 670, column: 2, scope: !4771)
!4801 = !DILocation(line: 670, column: 7, scope: !4771)
!4802 = !DILocation(line: 671, column: 9, scope: !4771)
!4803 = distinct !DISubprogram(name: "print_hex_chars", linkageName: "std.io.print_hex_chars", scope: !28, file: !28, line: 12, type: !4804, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!4804 = !DISubroutineType(types: !4805)
!4805 = !{!115, !308, !1847, !203, !920}
!4806 = !DILocalVariable(name: "f", arg: 1, scope: !4803, file: !28, line: 12, type: !1847)
!4807 = !DILocation(line: 12, column: 36, scope: !4803)
!4808 = !DILocalVariable(name: "out", arg: 2, scope: !4803, file: !28, line: 12, type: !203)
!4809 = !DILocation(line: 12, column: 46, scope: !4803)
!4810 = !DILocalVariable(name: "uppercase", arg: 3, scope: !4803, file: !28, line: 12, type: !920)
!4811 = !DILocation(line: 12, column: 56, scope: !4803)
!4812 = !DILocalVariable(name: "past_10", scope: !4803, file: !28, line: 14, type: !11, align: 1)
!4813 = !DILocation(line: 14, column: 7, scope: !4803)
!4814 = !DILocation(line: 14, column: 18, scope: !4803)
!4815 = !DILocation(line: 14, column: 36, scope: !4803)
!4816 = !DILocalVariable(name: "len", scope: !4803, file: !28, line: 15, type: !207, align: 8)
!4817 = !DILocation(line: 15, column: 6, scope: !4803)
!4818 = !DILocation(line: 15, column: 12, scope: !4803)
!4819 = !DILocation(line: 16, column: 15, scope: !4820)
!4820 = distinct !DILexicalBlock(scope: !4803, file: !28, line: 16, column: 2)
!4821 = !DILocalVariable(name: ".temp", scope: !4820, file: !28, line: 16, type: !207, align: 8)
!4822 = !DILocalVariable(name: "c", scope: !4823, file: !28, line: 16, type: !11, align: 1)
!4823 = distinct !DILexicalBlock(scope: !4820, file: !28, line: 17, column: 2)
!4824 = !DILocation(line: 16, column: 11, scope: !4823)
!4825 = !DILocation(line: 16, column: 15, scope: !4823)
!4826 = !DILocalVariable(name: "digit", scope: !4827, file: !28, line: 18, type: !11, align: 1)
!4827 = distinct !DILexicalBlock(scope: !4823, file: !28, line: 17, column: 2)
!4828 = !DILocation(line: 18, column: 8, scope: !4827)
!4829 = !DILocation(line: 18, column: 16, scope: !4827)
!4830 = !DILocation(line: 19, column: 9, scope: !4827)
!4831 = !DILocation(line: 19, column: 18, scope: !4827)
!4832 = !DILocation(line: 19, column: 31, scope: !4827)
!4833 = !DILocation(line: 19, column: 37, scope: !4827)
!4834 = !DILocation(line: 19, column: 3, scope: !4827)
!4835 = !DILocation(line: 20, column: 3, scope: !4827)
!4836 = !DILocation(line: 21, column: 11, scope: !4827)
!4837 = !DILocation(line: 22, column: 9, scope: !4827)
!4838 = !DILocation(line: 22, column: 18, scope: !4827)
!4839 = !DILocation(line: 22, column: 31, scope: !4827)
!4840 = !DILocation(line: 22, column: 37, scope: !4827)
!4841 = !DILocation(line: 22, column: 3, scope: !4827)
!4842 = !DILocation(line: 23, column: 3, scope: !4827)
!4843 = !DILocation(line: 25, column: 9, scope: !4803)
!4844 = distinct !DISubprogram(name: "int_from_any", linkageName: "std.io.int_from_any", scope: !28, file: !28, line: 41, type: !4845, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!4845 = !DISubroutineType(types: !4846)
!4846 = !{!115, !4847, !1878, !4848}
!4847 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint128*", baseType: !2310, size: 64, align: 64, dwarfAddressSpace: 0)
!4848 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "bool*", baseType: !920, size: 64, align: 64, dwarfAddressSpace: 0)
!4849 = !DILocalVariable(name: "arg", arg: 1, scope: !4844, file: !28, line: 41, type: !1878)
!4850 = !DILocation(line: 41, column: 30, scope: !4844)
!4851 = !DILocalVariable(name: "is_neg", arg: 2, scope: !4844, file: !28, line: 41, type: !4848)
!4852 = !DILocation(line: 41, column: 41, scope: !4844)
!4853 = !DILocation(line: 43, column: 10, scope: !4854)
!4854 = distinct !DILexicalBlock(scope: !4844, file: !28, line: 43, column: 2)
!4855 = !DILocation(line: 46, column: 5, scope: !4856)
!4856 = distinct !DILexicalBlock(scope: !4854, file: !28, line: 46, column: 4)
!4857 = !DILocation(line: 46, column: 14, scope: !4856)
!4858 = !DILocation(line: 47, column: 35, scope: !4856)
!4859 = !DILocation(line: 47, column: 28, scope: !4856)
!4860 = !DILocation(line: 199, column: 20, scope: !4861, inlinedAt: !4862)
!4861 = distinct !DISubprogram(name: "as_inner", linkageName: "as_inner", scope: !215, file: !215, line: 197, scopeLine: 197, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!4862 = !DILocation(line: 50, column: 24, scope: !4863)
!4863 = distinct !DILexicalBlock(scope: !4854, file: !28, line: 50, column: 4)
!4864 = !DILocation(line: 199, column: 30, scope: !4861, inlinedAt: !4862)
!4865 = !DILocation(line: 50, column: 11, scope: !4863)
!4866 = !DILocation(line: 52, column: 4, scope: !4867)
!4867 = distinct !DILexicalBlock(scope: !4854, file: !28, line: 52, column: 4)
!4868 = !DILocation(line: 54, column: 3, scope: !4844)
!4869 = !DILocation(line: 54, column: 12, scope: !4844)
!4870 = !DILocation(line: 55, column: 10, scope: !4871)
!4871 = distinct !DILexicalBlock(scope: !4844, file: !28, line: 55, column: 2)
!4872 = !DILocation(line: 57, column: 8, scope: !4871)
!4873 = !DILocalVariable(name: "arg", scope: !4874, file: !28, line: 41, type: !4848, align: 8)
!4874 = distinct !DILexicalBlock(scope: !4871, file: !28, line: 58, column: 4)
!4875 = !DILocation(line: 41, column: 30, scope: !4874)
!4876 = !DILocation(line: 58, column: 21, scope: !4874)
!4877 = !DILocation(line: 59, column: 8, scope: !4871)
!4878 = !DILocalVariable(name: "arg", scope: !4879, file: !28, line: 41, type: !2992, align: 8)
!4879 = distinct !DILexicalBlock(scope: !4871, file: !28, line: 60, column: 4)
!4880 = !DILocation(line: 41, column: 30, scope: !4879)
!4881 = !DILocalVariable(name: "val", scope: !4879, file: !28, line: 60, type: !3, align: 4)
!4882 = !DILocation(line: 60, column: 8, scope: !4879)
!4883 = !DILocation(line: 60, column: 15, scope: !4879)
!4884 = !DILocation(line: 61, column: 13, scope: !4879)
!4885 = !DILocation(line: 61, column: 22, scope: !4879)
!4886 = !DILocation(line: 61, column: 36, scope: !4879)
!4887 = !DILocation(line: 61, column: 34, scope: !4879)
!4888 = !DILocation(line: 61, column: 56, scope: !4879)
!4889 = !DILocation(line: 62, column: 8, scope: !4871)
!4890 = !DILocalVariable(name: "arg", scope: !4891, file: !28, line: 41, type: !4892, align: 8)
!4891 = distinct !DILexicalBlock(scope: !4871, file: !28, line: 63, column: 4)
!4892 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "short*", baseType: !2201, size: 64, align: 64, dwarfAddressSpace: 0)
!4893 = !DILocation(line: 41, column: 30, scope: !4891)
!4894 = !DILocalVariable(name: "val", scope: !4891, file: !28, line: 63, type: !3, align: 4)
!4895 = !DILocation(line: 63, column: 8, scope: !4891)
!4896 = !DILocation(line: 63, column: 15, scope: !4891)
!4897 = !DILocation(line: 64, column: 13, scope: !4891)
!4898 = !DILocation(line: 64, column: 22, scope: !4891)
!4899 = !DILocation(line: 64, column: 36, scope: !4891)
!4900 = !DILocation(line: 64, column: 34, scope: !4891)
!4901 = !DILocation(line: 64, column: 56, scope: !4891)
!4902 = !DILocation(line: 65, column: 8, scope: !4871)
!4903 = !DILocalVariable(name: "arg", scope: !4904, file: !28, line: 41, type: !4905, align: 8)
!4904 = distinct !DILexicalBlock(scope: !4871, file: !28, line: 66, column: 4)
!4905 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "int*", baseType: !3, size: 64, align: 64, dwarfAddressSpace: 0)
!4906 = !DILocation(line: 41, column: 30, scope: !4904)
!4907 = !DILocalVariable(name: "val", scope: !4904, file: !28, line: 66, type: !3, align: 4)
!4908 = !DILocation(line: 66, column: 8, scope: !4904)
!4909 = !DILocation(line: 66, column: 15, scope: !4904)
!4910 = !DILocation(line: 67, column: 13, scope: !4904)
!4911 = !DILocation(line: 67, column: 22, scope: !4904)
!4912 = !DILocation(line: 67, column: 36, scope: !4904)
!4913 = !DILocation(line: 67, column: 34, scope: !4904)
!4914 = !DILocation(line: 67, column: 56, scope: !4904)
!4915 = !DILocation(line: 68, column: 8, scope: !4871)
!4916 = !DILocalVariable(name: "arg", scope: !4917, file: !28, line: 41, type: !4918, align: 8)
!4917 = distinct !DILexicalBlock(scope: !4871, file: !28, line: 69, column: 4)
!4918 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "long*", baseType: !116, size: 64, align: 64, dwarfAddressSpace: 0)
!4919 = !DILocation(line: 41, column: 30, scope: !4917)
!4920 = !DILocalVariable(name: "val", scope: !4917, file: !28, line: 69, type: !116, align: 8)
!4921 = !DILocation(line: 69, column: 9, scope: !4917)
!4922 = !DILocation(line: 69, column: 16, scope: !4917)
!4923 = !DILocation(line: 70, column: 13, scope: !4917)
!4924 = !DILocation(line: 70, column: 22, scope: !4917)
!4925 = !DILocation(line: 70, column: 36, scope: !4917)
!4926 = !DILocation(line: 70, column: 34, scope: !4917)
!4927 = !DILocation(line: 70, column: 56, scope: !4917)
!4928 = !DILocation(line: 71, column: 8, scope: !4871)
!4929 = !DILocalVariable(name: "arg", scope: !4930, file: !28, line: 41, type: !4931, align: 8)
!4930 = distinct !DILexicalBlock(scope: !4871, file: !28, line: 72, column: 4)
!4931 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "int128*", baseType: !2247, size: 64, align: 64, dwarfAddressSpace: 0)
!4932 = !DILocation(line: 41, column: 30, scope: !4930)
!4933 = !DILocalVariable(name: "val", scope: !4930, file: !28, line: 72, type: !2247, align: 16)
!4934 = !DILocation(line: 72, column: 11, scope: !4930)
!4935 = !DILocation(line: 72, column: 18, scope: !4930)
!4936 = !DILocation(line: 73, column: 13, scope: !4930)
!4937 = !DILocation(line: 73, column: 22, scope: !4930)
!4938 = !DILocation(line: 73, column: 36, scope: !4930)
!4939 = !DILocation(line: 73, column: 34, scope: !4930)
!4940 = !DILocation(line: 73, column: 56, scope: !4930)
!4941 = !DILocation(line: 74, column: 8, scope: !4871)
!4942 = !DILocalVariable(name: "arg", scope: !4943, file: !28, line: 41, type: !117, align: 8)
!4943 = distinct !DILexicalBlock(scope: !4871, file: !28, line: 75, column: 4)
!4944 = !DILocation(line: 41, column: 30, scope: !4943)
!4945 = !DILocation(line: 75, column: 12, scope: !4943)
!4946 = !DILocation(line: 76, column: 8, scope: !4871)
!4947 = !DILocalVariable(name: "arg", scope: !4948, file: !28, line: 41, type: !4949, align: 8)
!4948 = distinct !DILexicalBlock(scope: !4871, file: !28, line: 77, column: 4)
!4949 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ushort*", baseType: !2273, size: 64, align: 64, dwarfAddressSpace: 0)
!4950 = !DILocation(line: 41, column: 30, scope: !4948)
!4951 = !DILocation(line: 77, column: 12, scope: !4948)
!4952 = !DILocation(line: 78, column: 8, scope: !4871)
!4953 = !DILocalVariable(name: "arg", scope: !4954, file: !28, line: 41, type: !3819, align: 8)
!4954 = distinct !DILexicalBlock(scope: !4871, file: !28, line: 79, column: 4)
!4955 = !DILocation(line: 41, column: 30, scope: !4954)
!4956 = !DILocation(line: 79, column: 12, scope: !4954)
!4957 = !DILocation(line: 80, column: 8, scope: !4871)
!4958 = !DILocalVariable(name: "arg", scope: !4959, file: !28, line: 41, type: !4960, align: 8)
!4959 = distinct !DILexicalBlock(scope: !4871, file: !28, line: 81, column: 4)
!4960 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ulong*", baseType: !208, size: 64, align: 64, dwarfAddressSpace: 0)
!4961 = !DILocation(line: 41, column: 30, scope: !4959)
!4962 = !DILocation(line: 81, column: 12, scope: !4959)
!4963 = !DILocation(line: 82, column: 8, scope: !4871)
!4964 = !DILocalVariable(name: "arg", scope: !4965, file: !28, line: 41, type: !4847, align: 8)
!4965 = distinct !DILexicalBlock(scope: !4871, file: !28, line: 83, column: 4)
!4966 = !DILocation(line: 41, column: 30, scope: !4965)
!4967 = !DILocation(line: 83, column: 12, scope: !4965)
!4968 = !DILocation(line: 84, column: 8, scope: !4871)
!4969 = !DILocalVariable(name: "arg", scope: !4970, file: !28, line: 41, type: !4971, align: 8)
!4970 = distinct !DILexicalBlock(scope: !4871, file: !28, line: 85, column: 4)
!4971 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "float*", baseType: !4972, size: 64, align: 64, dwarfAddressSpace: 0)
!4972 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!4973 = !DILocation(line: 41, column: 30, scope: !4970)
!4974 = !DILocalVariable(name: "f", scope: !4970, file: !28, line: 85, type: !4972, align: 4)
!4975 = !DILocation(line: 85, column: 10, scope: !4970)
!4976 = !DILocation(line: 85, column: 15, scope: !4970)
!4977 = !DILocation(line: 86, column: 23, scope: !4970)
!4978 = !DILocation(line: 86, column: 32, scope: !4970)
!4979 = !DILocation(line: 86, column: 42, scope: !4970)
!4980 = !DILocation(line: 86, column: 46, scope: !4970)
!4981 = !DILocation(line: 87, column: 8, scope: !4871)
!4982 = !DILocalVariable(name: "arg", scope: !4983, file: !28, line: 41, type: !4984, align: 8)
!4983 = distinct !DILexicalBlock(scope: !4871, file: !28, line: 88, column: 4)
!4984 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "double*", baseType: !3544, size: 64, align: 64, dwarfAddressSpace: 0)
!4985 = !DILocation(line: 41, column: 30, scope: !4983)
!4986 = !DILocalVariable(name: "d", scope: !4983, file: !28, line: 88, type: !3544, align: 8)
!4987 = !DILocation(line: 88, column: 11, scope: !4983)
!4988 = !DILocation(line: 88, column: 16, scope: !4983)
!4989 = !DILocation(line: 89, column: 23, scope: !4983)
!4990 = !DILocation(line: 89, column: 32, scope: !4983)
!4991 = !DILocation(line: 89, column: 42, scope: !4983)
!4992 = !DILocation(line: 89, column: 46, scope: !4983)
!4993 = !DILocation(line: 91, column: 11, scope: !4994)
!4994 = distinct !DILexicalBlock(scope: !4871, file: !28, line: 91, column: 4)
!4995 = distinct !DISubprogram(name: "float_from_any", linkageName: "std.io.float_from_any", scope: !28, file: !28, line: 95, type: !4996, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!4996 = !DISubroutineType(types: !4997)
!4997 = !{!115, !4998, !1878}
!4998 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "FloatType*", baseType: !4999, size: 64, align: 64, dwarfAddressSpace: 0)
!4999 = !DIDerivedType(tag: DW_TAG_typedef, name: "FloatType", scope: !28, file: !28, line: 24, baseType: !3544, align: 8)
!5000 = !DILocalVariable(name: "arg", arg: 1, scope: !4995, file: !28, line: 95, type: !1878)
!5001 = !DILocation(line: 95, column: 34, scope: !4995)
!5002 = !DILocation(line: 100, column: 6, scope: !4995)
!5003 = !DILocation(line: 199, column: 20, scope: !5004, inlinedAt: !5005)
!5004 = distinct !DISubprogram(name: "as_inner", linkageName: "as_inner", scope: !215, file: !215, line: 197, scopeLine: 197, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!5005 = !DILocation(line: 102, column: 25, scope: !5006)
!5006 = distinct !DILexicalBlock(scope: !4995, file: !28, line: 101, column: 2)
!5007 = !DILocation(line: 199, column: 30, scope: !5004, inlinedAt: !5005)
!5008 = !DILocation(line: 102, column: 10, scope: !5006)
!5009 = !DILocation(line: 104, column: 10, scope: !5010)
!5010 = distinct !DILexicalBlock(scope: !4995, file: !28, line: 104, column: 2)
!5011 = !DILocation(line: 106, column: 8, scope: !5010)
!5012 = !DILocalVariable(name: "arg", scope: !5013, file: !28, line: 95, type: !4848, align: 8)
!5013 = distinct !DILexicalBlock(scope: !5010, file: !28, line: 107, column: 4)
!5014 = !DILocation(line: 95, column: 34, scope: !5013)
!5015 = !DILocation(line: 107, column: 23, scope: !5013)
!5016 = !DILocation(line: 108, column: 8, scope: !5010)
!5017 = !DILocalVariable(name: "arg", scope: !5018, file: !28, line: 95, type: !2992, align: 8)
!5018 = distinct !DILexicalBlock(scope: !5010, file: !28, line: 109, column: 4)
!5019 = !DILocation(line: 95, column: 34, scope: !5018)
!5020 = !DILocation(line: 109, column: 12, scope: !5018)
!5021 = !DILocation(line: 110, column: 8, scope: !5010)
!5022 = !DILocalVariable(name: "arg", scope: !5023, file: !28, line: 95, type: !4892, align: 8)
!5023 = distinct !DILexicalBlock(scope: !5010, file: !28, line: 111, column: 4)
!5024 = !DILocation(line: 95, column: 34, scope: !5023)
!5025 = !DILocation(line: 111, column: 12, scope: !5023)
!5026 = !DILocation(line: 112, column: 8, scope: !5010)
!5027 = !DILocalVariable(name: "arg", scope: !5028, file: !28, line: 95, type: !4905, align: 8)
!5028 = distinct !DILexicalBlock(scope: !5010, file: !28, line: 113, column: 4)
!5029 = !DILocation(line: 95, column: 34, scope: !5028)
!5030 = !DILocation(line: 113, column: 12, scope: !5028)
!5031 = !DILocation(line: 114, column: 8, scope: !5010)
!5032 = !DILocalVariable(name: "arg", scope: !5033, file: !28, line: 95, type: !4918, align: 8)
!5033 = distinct !DILexicalBlock(scope: !5010, file: !28, line: 115, column: 4)
!5034 = !DILocation(line: 95, column: 34, scope: !5033)
!5035 = !DILocation(line: 115, column: 12, scope: !5033)
!5036 = !DILocation(line: 116, column: 8, scope: !5010)
!5037 = !DILocalVariable(name: "arg", scope: !5038, file: !28, line: 95, type: !4931, align: 8)
!5038 = distinct !DILexicalBlock(scope: !5010, file: !28, line: 117, column: 4)
!5039 = !DILocation(line: 95, column: 34, scope: !5038)
!5040 = !DILocation(line: 117, column: 12, scope: !5038)
!5041 = !DILocation(line: 118, column: 8, scope: !5010)
!5042 = !DILocalVariable(name: "arg", scope: !5043, file: !28, line: 95, type: !117, align: 8)
!5043 = distinct !DILexicalBlock(scope: !5010, file: !28, line: 119, column: 4)
!5044 = !DILocation(line: 95, column: 34, scope: !5043)
!5045 = !DILocation(line: 119, column: 12, scope: !5043)
!5046 = !DILocation(line: 120, column: 8, scope: !5010)
!5047 = !DILocalVariable(name: "arg", scope: !5048, file: !28, line: 95, type: !4949, align: 8)
!5048 = distinct !DILexicalBlock(scope: !5010, file: !28, line: 121, column: 4)
!5049 = !DILocation(line: 95, column: 34, scope: !5048)
!5050 = !DILocation(line: 121, column: 12, scope: !5048)
!5051 = !DILocation(line: 122, column: 8, scope: !5010)
!5052 = !DILocalVariable(name: "arg", scope: !5053, file: !28, line: 95, type: !3819, align: 8)
!5053 = distinct !DILexicalBlock(scope: !5010, file: !28, line: 123, column: 4)
!5054 = !DILocation(line: 95, column: 34, scope: !5053)
!5055 = !DILocation(line: 123, column: 12, scope: !5053)
!5056 = !DILocation(line: 124, column: 8, scope: !5010)
!5057 = !DILocalVariable(name: "arg", scope: !5058, file: !28, line: 95, type: !4960, align: 8)
!5058 = distinct !DILexicalBlock(scope: !5010, file: !28, line: 125, column: 4)
!5059 = !DILocation(line: 95, column: 34, scope: !5058)
!5060 = !DILocation(line: 125, column: 12, scope: !5058)
!5061 = !DILocation(line: 126, column: 8, scope: !5010)
!5062 = !DILocalVariable(name: "arg", scope: !5063, file: !28, line: 95, type: !4847, align: 8)
!5063 = distinct !DILexicalBlock(scope: !5010, file: !28, line: 127, column: 4)
!5064 = !DILocation(line: 95, column: 34, scope: !5063)
!5065 = !DILocation(line: 127, column: 12, scope: !5063)
!5066 = !DILocation(line: 128, column: 8, scope: !5010)
!5067 = !DILocalVariable(name: "arg", scope: !5068, file: !28, line: 95, type: !4971, align: 8)
!5068 = distinct !DILexicalBlock(scope: !5010, file: !28, line: 129, column: 4)
!5069 = !DILocation(line: 95, column: 34, scope: !5068)
!5070 = !DILocation(line: 129, column: 23, scope: !5068)
!5071 = !DILocation(line: 130, column: 8, scope: !5010)
!5072 = !DILocalVariable(name: "arg", scope: !5073, file: !28, line: 95, type: !4984, align: 8)
!5073 = distinct !DILexicalBlock(scope: !5010, file: !28, line: 131, column: 4)
!5074 = !DILocation(line: 95, column: 34, scope: !5073)
!5075 = !DILocation(line: 131, column: 23, scope: !5073)
!5076 = !DILocation(line: 133, column: 11, scope: !5077)
!5077 = distinct !DILexicalBlock(scope: !5010, file: !28, line: 133, column: 4)
!5078 = distinct !DISubprogram(name: "simple_atoi", linkageName: "std.io.simple_atoi", scope: !28, file: !28, line: 146, type: !5079, scopeLine: 146, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!5079 = !DISubroutineType(types: !5080)
!5080 = !{!94, !117, !208, !4960}
!5081 = !DILocalVariable(name: "buf", arg: 1, scope: !5078, file: !28, line: 146, type: !117)
!5082 = !DILocation(line: 146, column: 27, scope: !5078)
!5083 = !DILocalVariable(name: "maxlen", arg: 2, scope: !5078, file: !28, line: 146, type: !207)
!5084 = !DILocation(line: 146, column: 36, scope: !5078)
!5085 = !DILocalVariable(name: "len_ptr", arg: 3, scope: !5078, file: !28, line: 146, type: !308)
!5086 = !DILocation(line: 146, column: 49, scope: !5078)
!5087 = !DILocalVariable(name: "i", scope: !5078, file: !28, line: 148, type: !94, align: 4)
!5088 = !DILocation(line: 148, column: 7, scope: !5078)
!5089 = !DILocation(line: 148, column: 11, scope: !5078)
!5090 = !DILocalVariable(name: "len", scope: !5078, file: !28, line: 149, type: !207, align: 8)
!5091 = !DILocation(line: 149, column: 6, scope: !5078)
!5092 = !DILocation(line: 149, column: 13, scope: !5078)
!5093 = !DILocation(line: 150, column: 2, scope: !5078)
!5094 = !DILocation(line: 150, column: 9, scope: !5095)
!5095 = distinct !DILexicalBlock(scope: !5078, file: !28, line: 150, column: 2)
!5096 = !DILocation(line: 150, column: 15, scope: !5095)
!5097 = !DILocalVariable(name: "c", scope: !5098, file: !28, line: 152, type: !11, align: 1)
!5098 = distinct !DILexicalBlock(scope: !5095, file: !28, line: 151, column: 2)
!5099 = !DILocation(line: 152, column: 8, scope: !5098)
!5100 = !DILocation(line: 152, column: 12, scope: !5098)
!5101 = !DILocation(line: 152, column: 16, scope: !5098)
!5102 = !DILocation(line: 153, column: 8, scope: !5098)
!5103 = !DILocation(line: 153, column: 22, scope: !5098)
!5104 = !DILocation(line: 154, column: 7, scope: !5098)
!5105 = !DILocation(line: 154, column: 16, scope: !5098)
!5106 = !DILocation(line: 155, column: 3, scope: !5098)
!5107 = !DILocation(line: 157, column: 3, scope: !5078)
!5108 = !DILocation(line: 157, column: 13, scope: !5078)
!5109 = !DILocation(line: 158, column: 9, scope: !5078)
!5110 = distinct !DISubprogram(name: "fmt_u", linkageName: "std.io.fmt_u", scope: !28, file: !28, line: 187, type: !5111, scopeLine: 187, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!5111 = !DISubroutineType(types: !5112)
!5112 = !{!117, !2310, !117}
!5113 = !DILocalVariable(name: "x", arg: 1, scope: !5110, file: !28, line: 187, type: !2310)
!5114 = !DILocation(line: 187, column: 24, scope: !5110)
!5115 = !DILocalVariable(name: "s", arg: 2, scope: !5110, file: !28, line: 187, type: !117)
!5116 = !DILocation(line: 187, column: 33, scope: !5110)
!5117 = !DILocation(line: 189, column: 2, scope: !5110)
!5118 = !DILocation(line: 189, column: 9, scope: !5119)
!5119 = distinct !DILexicalBlock(scope: !5110, file: !28, line: 189, column: 2)
!5120 = !DILocation(line: 189, column: 36, scope: !5119)
!5121 = !DILocation(line: 189, column: 53, scope: !5119)
!5122 = !DILocation(line: 189, column: 47, scope: !5119)
!5123 = !DILocation(line: 189, column: 40, scope: !5119)
!5124 = !DILocation(line: 189, column: 24, scope: !5119)
!5125 = !DILocalVariable(name: "y", scope: !5126, file: !28, line: 190, type: !208, align: 8)
!5126 = distinct !DILexicalBlock(scope: !5110, file: !28, line: 190, column: 2)
!5127 = !DILocation(line: 190, column: 13, scope: !5126)
!5128 = !DILocation(line: 190, column: 18, scope: !5126)
!5129 = !DILocation(line: 190, column: 27, scope: !5126)
!5130 = !DILocation(line: 190, column: 42, scope: !5126)
!5131 = !DILocation(line: 190, column: 59, scope: !5126)
!5132 = !DILocation(line: 190, column: 53, scope: !5126)
!5133 = !DILocation(line: 190, column: 46, scope: !5126)
!5134 = !DILocation(line: 190, column: 30, scope: !5126)
!5135 = !DILocation(line: 191, column: 9, scope: !5110)
!5136 = !DILocation(line: 189, column: 34, scope: !5119)
!5137 = !DILocation(line: 190, column: 40, scope: !5126)
!5138 = distinct !DISubprogram(name: "printf_parse_format_field", linkageName: "std.io.printf_parse_format_field", scope: !28, file: !28, line: 675, type: !5139, scopeLine: 675, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!5139 = !DISubroutineType(types: !5140)
!5140 = !{!115, !4905, !1877, !208, !4960, !117, !208, !4960}
!5141 = !DILocalVariable(name: "args_ptr", arg: 1, scope: !5138, file: !28, line: 676, type: !1877)
!5142 = !DILocation(line: 676, column: 7, scope: !5138)
!5143 = !DILocalVariable(name: "args_len", arg: 2, scope: !5138, file: !28, line: 676, type: !207)
!5144 = !DILocation(line: 676, column: 21, scope: !5138)
!5145 = !DILocalVariable(name: "args_index_ptr", arg: 3, scope: !5138, file: !28, line: 676, type: !308)
!5146 = !DILocation(line: 676, column: 36, scope: !5138)
!5147 = !DILocalVariable(name: "format_ptr", arg: 4, scope: !5138, file: !28, line: 677, type: !117)
!5148 = !DILocation(line: 677, column: 8, scope: !5138)
!5149 = !DILocalVariable(name: "format_len", arg: 5, scope: !5138, file: !28, line: 677, type: !207)
!5150 = !DILocation(line: 677, column: 24, scope: !5138)
!5151 = !DILocalVariable(name: "index_ptr", arg: 6, scope: !5138, file: !28, line: 677, type: !308)
!5152 = !DILocation(line: 677, column: 41, scope: !5138)
!5153 = !DILocalVariable(name: "c", scope: !5138, file: !28, line: 679, type: !11, align: 1)
!5154 = !DILocation(line: 679, column: 7, scope: !5138)
!5155 = !DILocation(line: 679, column: 11, scope: !5138)
!5156 = !DILocation(line: 679, column: 23, scope: !5138)
!5157 = !DILocation(line: 680, column: 6, scope: !5138)
!5158 = !DILocation(line: 680, column: 63, scope: !5138)
!5159 = !DILocation(line: 680, column: 27, scope: !5138)
!5160 = !DILocation(line: 681, column: 6, scope: !5138)
!5161 = !DILocation(line: 681, column: 23, scope: !5138)
!5162 = !DILocalVariable(name: "len", scope: !5138, file: !28, line: 682, type: !207, align: 8)
!5163 = !DILocation(line: 682, column: 6, scope: !5138)
!5164 = !DILocation(line: 682, column: 16, scope: !5138)
!5165 = !DILocation(line: 682, column: 15, scope: !5138)
!5166 = !DILocation(line: 683, column: 6, scope: !5138)
!5167 = !DILocation(line: 683, column: 13, scope: !5138)
!5168 = !DILocation(line: 683, column: 32, scope: !5138)
!5169 = !DILocation(line: 684, column: 7, scope: !5138)
!5170 = !DILocation(line: 684, column: 25, scope: !5138)
!5171 = !DILocation(line: 684, column: 6, scope: !5138)
!5172 = !DILocation(line: 684, column: 42, scope: !5138)
!5173 = !DILocalVariable(name: "val", scope: !5138, file: !28, line: 685, type: !1878, align: 8)
!5174 = !DILocation(line: 685, column: 6, scope: !5138)
!5175 = !DILocation(line: 685, column: 12, scope: !5138)
!5176 = !DILocation(line: 685, column: 23, scope: !5138)
!5177 = !DILocation(line: 685, column: 22, scope: !5138)
!5178 = !DILocation(line: 686, column: 7, scope: !5138)
!5179 = !DILocation(line: 686, column: 40, scope: !5138)
!5180 = !DILocalVariable(name: "intval", scope: !5138, file: !28, line: 687, type: !94, align: 4)
!5181 = !DILocation(line: 687, column: 8, scope: !5138)
!5182 = !DILocation(line: 22, column: 11, scope: !5183, inlinedAt: !5185)
!5183 = distinct !DILexicalBlock(scope: !5184, file: !2157, line: 26, column: 1)
!5184 = distinct !DISubprogram(name: "any_to_int", linkageName: "any_to_int", scope: !2157, file: !2157, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!5185 = !DILocation(line: 687, column: 17, scope: !5138)
!5186 = !DILocation(line: 23, column: 11, scope: !5183, inlinedAt: !5185)
!5187 = !DILocalVariable(name: "any_type", scope: !5184, file: !28, line: 27, type: !92, align: 8)
!5188 = !DILocation(line: 27, column: 9, scope: !5184, inlinedAt: !5185)
!5189 = !DILocation(line: 27, column: 20, scope: !5184, inlinedAt: !5185)
!5190 = !DILocalVariable(name: "kind", scope: !5184, file: !28, line: 28, type: !57, align: 1)
!5191 = !DILocation(line: 28, column: 11, scope: !5184, inlinedAt: !5185)
!5192 = !DILocation(line: 28, column: 18, scope: !5184, inlinedAt: !5185)
!5193 = !DILocalVariable(name: "is_mixed_signed", scope: !5184, file: !28, line: 29, type: !920, align: 1)
!5194 = !DILocation(line: 29, column: 7, scope: !5184, inlinedAt: !5185)
!5195 = !DILocation(line: 29, column: 41, scope: !5184, inlinedAt: !5185)
!5196 = !DILocation(line: 29, column: 25, scope: !5184, inlinedAt: !5185)
!5197 = !DILocalVariable(name: "max", scope: !5184, file: !28, line: 30, type: !3, align: 4)
!5198 = !DILocation(line: 30, column: 8, scope: !5184, inlinedAt: !5185)
!5199 = !DILocation(line: 30, column: 14, scope: !5184, inlinedAt: !5185)
!5200 = !DILocalVariable(name: "min", scope: !5184, file: !28, line: 31, type: !3, align: 4)
!5201 = !DILocation(line: 31, column: 8, scope: !5184, inlinedAt: !5185)
!5202 = !DILocation(line: 31, column: 14, scope: !5184, inlinedAt: !5185)
!5203 = !DILocation(line: 34, column: 8, scope: !5204, inlinedAt: !5185)
!5204 = distinct !DILexicalBlock(scope: !5184, file: !2157, line: 32, column: 2)
!5205 = !DILocalVariable(name: "c", scope: !5206, file: !28, line: 35, type: !2190, align: 1)
!5206 = distinct !DILexicalBlock(scope: !5204, file: !2157, line: 35, column: 4)
!5207 = !DILocation(line: 35, column: 10, scope: !5206, inlinedAt: !5185)
!5208 = !DILocation(line: 35, column: 22, scope: !5206, inlinedAt: !5185)
!5209 = !DILocation(line: 35, column: 16, scope: !5206, inlinedAt: !5185)
!5210 = !DILocation(line: 36, column: 8, scope: !5206, inlinedAt: !5185)
!5211 = !DILocation(line: 36, column: 27, scope: !5206, inlinedAt: !5185)
!5212 = !DILocation(line: 36, column: 41, scope: !5206, inlinedAt: !5185)
!5213 = !DILocation(line: 37, column: 12, scope: !5206, inlinedAt: !5185)
!5214 = !DILocation(line: 38, column: 8, scope: !5204, inlinedAt: !5185)
!5215 = !DILocalVariable(name: "s", scope: !5216, file: !28, line: 39, type: !2201, align: 2)
!5216 = distinct !DILexicalBlock(scope: !5204, file: !2157, line: 39, column: 4)
!5217 = !DILocation(line: 39, column: 10, scope: !5216, inlinedAt: !5185)
!5218 = !DILocation(line: 39, column: 23, scope: !5216, inlinedAt: !5185)
!5219 = !DILocation(line: 39, column: 16, scope: !5216, inlinedAt: !5185)
!5220 = !DILocation(line: 40, column: 8, scope: !5216, inlinedAt: !5185)
!5221 = !DILocation(line: 40, column: 27, scope: !5216, inlinedAt: !5185)
!5222 = !DILocation(line: 40, column: 41, scope: !5216, inlinedAt: !5185)
!5223 = !DILocation(line: 41, column: 8, scope: !5216, inlinedAt: !5185)
!5224 = !DILocation(line: 41, column: 12, scope: !5216, inlinedAt: !5185)
!5225 = !DILocation(line: 41, column: 19, scope: !5216, inlinedAt: !5185)
!5226 = !DILocation(line: 41, column: 23, scope: !5216, inlinedAt: !5185)
!5227 = !DILocation(line: 41, column: 35, scope: !5216, inlinedAt: !5185)
!5228 = !DILocation(line: 42, column: 12, scope: !5216, inlinedAt: !5185)
!5229 = !DILocation(line: 43, column: 8, scope: !5204, inlinedAt: !5185)
!5230 = !DILocalVariable(name: "i", scope: !5231, file: !28, line: 44, type: !3, align: 4)
!5231 = distinct !DILexicalBlock(scope: !5204, file: !2157, line: 44, column: 4)
!5232 = !DILocation(line: 44, column: 8, scope: !5231, inlinedAt: !5185)
!5233 = !DILocation(line: 44, column: 19, scope: !5231, inlinedAt: !5185)
!5234 = !DILocation(line: 44, column: 14, scope: !5231, inlinedAt: !5185)
!5235 = !DILocation(line: 45, column: 8, scope: !5231, inlinedAt: !5185)
!5236 = !DILocation(line: 45, column: 27, scope: !5231, inlinedAt: !5185)
!5237 = !DILocation(line: 45, column: 41, scope: !5231, inlinedAt: !5185)
!5238 = !DILocation(line: 46, column: 8, scope: !5231, inlinedAt: !5185)
!5239 = !DILocation(line: 46, column: 12, scope: !5231, inlinedAt: !5185)
!5240 = !DILocation(line: 46, column: 19, scope: !5231, inlinedAt: !5185)
!5241 = !DILocation(line: 46, column: 23, scope: !5231, inlinedAt: !5185)
!5242 = !DILocation(line: 46, column: 35, scope: !5231, inlinedAt: !5185)
!5243 = !DILocation(line: 47, column: 12, scope: !5231, inlinedAt: !5185)
!5244 = !DILocation(line: 48, column: 8, scope: !5204, inlinedAt: !5185)
!5245 = !DILocalVariable(name: "l", scope: !5246, file: !28, line: 49, type: !116, align: 8)
!5246 = distinct !DILexicalBlock(scope: !5204, file: !2157, line: 49, column: 4)
!5247 = !DILocation(line: 49, column: 9, scope: !5246, inlinedAt: !5185)
!5248 = !DILocation(line: 49, column: 21, scope: !5246, inlinedAt: !5185)
!5249 = !DILocation(line: 49, column: 15, scope: !5246, inlinedAt: !5185)
!5250 = !DILocation(line: 50, column: 8, scope: !5246, inlinedAt: !5185)
!5251 = !DILocation(line: 50, column: 27, scope: !5246, inlinedAt: !5185)
!5252 = !DILocation(line: 50, column: 41, scope: !5246, inlinedAt: !5185)
!5253 = !DILocation(line: 51, column: 8, scope: !5246, inlinedAt: !5185)
!5254 = !DILocation(line: 51, column: 12, scope: !5246, inlinedAt: !5185)
!5255 = !DILocation(line: 51, column: 19, scope: !5246, inlinedAt: !5185)
!5256 = !DILocation(line: 51, column: 23, scope: !5246, inlinedAt: !5185)
!5257 = !DILocation(line: 51, column: 35, scope: !5246, inlinedAt: !5185)
!5258 = !DILocation(line: 52, column: 12, scope: !5246, inlinedAt: !5185)
!5259 = !DILocation(line: 53, column: 8, scope: !5204, inlinedAt: !5185)
!5260 = !DILocalVariable(name: "i", scope: !5261, file: !28, line: 54, type: !2247, align: 16)
!5261 = distinct !DILexicalBlock(scope: !5204, file: !2157, line: 54, column: 4)
!5262 = !DILocation(line: 54, column: 11, scope: !5261, inlinedAt: !5185)
!5263 = !DILocation(line: 54, column: 25, scope: !5261, inlinedAt: !5185)
!5264 = !DILocation(line: 54, column: 17, scope: !5261, inlinedAt: !5185)
!5265 = !DILocation(line: 55, column: 8, scope: !5261, inlinedAt: !5185)
!5266 = !DILocation(line: 55, column: 27, scope: !5261, inlinedAt: !5185)
!5267 = !DILocation(line: 55, column: 41, scope: !5261, inlinedAt: !5185)
!5268 = !DILocation(line: 56, column: 8, scope: !5261, inlinedAt: !5185)
!5269 = !DILocation(line: 56, column: 12, scope: !5261, inlinedAt: !5185)
!5270 = !DILocation(line: 56, column: 19, scope: !5261, inlinedAt: !5185)
!5271 = !DILocation(line: 56, column: 23, scope: !5261, inlinedAt: !5185)
!5272 = !DILocation(line: 56, column: 35, scope: !5261, inlinedAt: !5185)
!5273 = !DILocation(line: 57, column: 12, scope: !5261, inlinedAt: !5185)
!5274 = !DILocation(line: 58, column: 8, scope: !5204, inlinedAt: !5185)
!5275 = !DILocalVariable(name: "c", scope: !5276, file: !28, line: 59, type: !11, align: 1)
!5276 = distinct !DILexicalBlock(scope: !5204, file: !2157, line: 59, column: 4)
!5277 = !DILocation(line: 59, column: 9, scope: !5276, inlinedAt: !5185)
!5278 = !DILocation(line: 59, column: 21, scope: !5276, inlinedAt: !5185)
!5279 = !DILocation(line: 59, column: 15, scope: !5276, inlinedAt: !5185)
!5280 = !DILocation(line: 60, column: 8, scope: !5276, inlinedAt: !5185)
!5281 = !DILocation(line: 60, column: 12, scope: !5276, inlinedAt: !5185)
!5282 = !DILocation(line: 60, column: 24, scope: !5276, inlinedAt: !5185)
!5283 = !DILocation(line: 61, column: 12, scope: !5276, inlinedAt: !5185)
!5284 = !DILocation(line: 62, column: 8, scope: !5204, inlinedAt: !5185)
!5285 = !DILocalVariable(name: "s", scope: !5286, file: !28, line: 63, type: !2273, align: 2)
!5286 = distinct !DILexicalBlock(scope: !5204, file: !2157, line: 63, column: 4)
!5287 = !DILocation(line: 63, column: 11, scope: !5286, inlinedAt: !5185)
!5288 = !DILocation(line: 63, column: 25, scope: !5286, inlinedAt: !5185)
!5289 = !DILocation(line: 63, column: 17, scope: !5286, inlinedAt: !5185)
!5290 = !DILocation(line: 64, column: 8, scope: !5286, inlinedAt: !5185)
!5291 = !DILocation(line: 64, column: 12, scope: !5286, inlinedAt: !5185)
!5292 = !DILocation(line: 64, column: 19, scope: !5286, inlinedAt: !5185)
!5293 = !DILocation(line: 64, column: 23, scope: !5286, inlinedAt: !5185)
!5294 = !DILocation(line: 64, column: 35, scope: !5286, inlinedAt: !5185)
!5295 = !DILocation(line: 65, column: 12, scope: !5286, inlinedAt: !5185)
!5296 = !DILocation(line: 66, column: 8, scope: !5204, inlinedAt: !5185)
!5297 = !DILocalVariable(name: "i", scope: !5298, file: !28, line: 67, type: !94, align: 4)
!5298 = distinct !DILexicalBlock(scope: !5204, file: !2157, line: 67, column: 4)
!5299 = !DILocation(line: 67, column: 9, scope: !5298, inlinedAt: !5185)
!5300 = !DILocation(line: 67, column: 21, scope: !5298, inlinedAt: !5185)
!5301 = !DILocation(line: 67, column: 15, scope: !5298, inlinedAt: !5185)
!5302 = !DILocation(line: 68, column: 8, scope: !5298, inlinedAt: !5185)
!5303 = !DILocation(line: 68, column: 12, scope: !5298, inlinedAt: !5185)
!5304 = !DILocation(line: 68, column: 19, scope: !5298, inlinedAt: !5185)
!5305 = !DILocation(line: 68, column: 23, scope: !5298, inlinedAt: !5185)
!5306 = !DILocation(line: 68, column: 35, scope: !5298, inlinedAt: !5185)
!5307 = !DILocation(line: 69, column: 12, scope: !5298, inlinedAt: !5185)
!5308 = !DILocation(line: 70, column: 8, scope: !5204, inlinedAt: !5185)
!5309 = !DILocalVariable(name: "l", scope: !5310, file: !28, line: 71, type: !208, align: 8)
!5310 = distinct !DILexicalBlock(scope: !5204, file: !2157, line: 71, column: 4)
!5311 = !DILocation(line: 71, column: 10, scope: !5310, inlinedAt: !5185)
!5312 = !DILocation(line: 71, column: 23, scope: !5310, inlinedAt: !5185)
!5313 = !DILocation(line: 71, column: 16, scope: !5310, inlinedAt: !5185)
!5314 = !DILocation(line: 72, column: 8, scope: !5310, inlinedAt: !5185)
!5315 = !DILocation(line: 72, column: 12, scope: !5310, inlinedAt: !5185)
!5316 = !DILocation(line: 72, column: 19, scope: !5310, inlinedAt: !5185)
!5317 = !DILocation(line: 72, column: 23, scope: !5310, inlinedAt: !5185)
!5318 = !DILocation(line: 72, column: 35, scope: !5310, inlinedAt: !5185)
!5319 = !DILocation(line: 73, column: 12, scope: !5310, inlinedAt: !5185)
!5320 = !DILocation(line: 74, column: 8, scope: !5204, inlinedAt: !5185)
!5321 = !DILocalVariable(name: "i", scope: !5322, file: !28, line: 75, type: !2310, align: 16)
!5322 = distinct !DILexicalBlock(scope: !5204, file: !2157, line: 75, column: 4)
!5323 = !DILocation(line: 75, column: 12, scope: !5322, inlinedAt: !5185)
!5324 = !DILocation(line: 75, column: 27, scope: !5322, inlinedAt: !5185)
!5325 = !DILocation(line: 75, column: 18, scope: !5322, inlinedAt: !5185)
!5326 = !DILocation(line: 76, column: 8, scope: !5322, inlinedAt: !5185)
!5327 = !DILocation(line: 76, column: 12, scope: !5322, inlinedAt: !5185)
!5328 = !DILocation(line: 76, column: 19, scope: !5322, inlinedAt: !5185)
!5329 = !DILocation(line: 76, column: 23, scope: !5322, inlinedAt: !5185)
!5330 = !DILocation(line: 76, column: 35, scope: !5322, inlinedAt: !5185)
!5331 = !DILocation(line: 77, column: 12, scope: !5322, inlinedAt: !5185)
!5332 = !DILocation(line: 164, column: 33, scope: !5333, inlinedAt: !5334)
!5333 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !215, file: !215, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!5334 = !DILocation(line: 79, column: 4, scope: !5335, inlinedAt: !5185)
!5335 = distinct !DILexicalBlock(scope: !5204, file: !2157, line: 79, column: 4)
!5336 = !DILocation(line: 164, column: 2, scope: !5333, inlinedAt: !5334)
!5337 = !DILocation(line: 166, column: 2, scope: !5333, inlinedAt: !5334)
!5338 = !DILocation(line: 688, column: 9, scope: !5138)
!5339 = !DILocation(line: 688, column: 19, scope: !5138)
