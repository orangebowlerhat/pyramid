; ModuleID = 'std::core::string'
source_filename = "std::core::string"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%.introspect = type { i8, i64, ptr, i64, i64, i64, [0 x i64] }
%.fault = type { i64, %"char[]", i64 }
%"char[]" = type { ptr, i64 }
%any = type { ptr, i64 }
%"any[]" = type { ptr, i64 }
%"char[][]" = type { ptr, i64 }
%"ushort[]" = type { ptr, i64 }
%"uint[]" = type { ptr, i64 }
%StringIterator = type { %"char[]", i64 }
%Splitter = type { %"char[]", %"char[]", i64, i8, i32 }

$std.core.String.trim = comdat any

$std.core.String.trim_left = comdat any

$std.core.String.trim_right = comdat any

$std.core.String.starts_with = comdat any

$std.core.String.ends_with = comdat any

$std.core.String.strip = comdat any

$std.core.String.strip_end = comdat any

$std.core.String.split = comdat any

$std.core.String.new_split = comdat any

$std.core.String.tsplit = comdat any

$std.core.String.split_to_buffer = comdat any

$std.core.String.contains = comdat any

$std.core.String.index_of_char = comdat any

$std.core.String.index_of_chars = comdat any

$std.core.String.index_of_char_from = comdat any

$std.core.String.rindex_of_char = comdat any

$std.core.String.index_of = comdat any

$std.core.String.rindex_of = comdat any

$std.core.string.ZString.str_view = comdat any

$std.core.string.ZString.char_len = comdat any

$std.core.string.ZString.len = comdat any

$std.core.String.zstr_copy = comdat any

$std.core.String.concat = comdat any

$std.core.String.tconcat = comdat any

$std.core.String.zstr_tcopy = comdat any

$std.core.String.copy = comdat any

$std.core.String.free = comdat any

$std.core.String.tcopy = comdat any

$std.core.string.ZString.copy = comdat any

$std.core.string.ZString.tcopy = comdat any

$std.core.String.to_new_utf16 = comdat any

$std.core.String.to_temp_utf16 = comdat any

$std.core.String.to_wstring = comdat any

$std.core.String.to_temp_wstring = comdat any

$std.core.String.to_new_wstring = comdat any

$std.core.String.to_utf32 = comdat any

$std.core.String.to_new_utf32 = comdat any

$std.core.String.to_temp_utf32 = comdat any

$std.core.String.convert_ascii_to_lower = comdat any

$std.core.String.new_ascii_to_lower = comdat any

$std.core.String.temp_ascii_to_lower = comdat any

$std.core.String.convert_ascii_to_upper = comdat any

$std.core.String.new_ascii_to_upper = comdat any

$std.core.String.iterator = comdat any

$std.core.String.temp_ascii_to_upper = comdat any

$std.core.String.utf8_codepoints = comdat any

$std.core.String.to_int128 = comdat any

$std.core.String.to_long = comdat any

$std.core.String.to_int = comdat any

$std.core.String.to_short = comdat any

$std.core.String.to_ichar = comdat any

$std.core.String.to_uint128 = comdat any

$std.core.String.to_ulong = comdat any

$std.core.String.to_uint = comdat any

$std.core.String.to_ushort = comdat any

$std.core.String.to_uchar = comdat any

$std.core.String.to_double = comdat any

$std.core.String.to_float = comdat any

$std.core.String.splitter = comdat any

$std.core.String.tokenize = comdat any

$std.core.string.Splitter.reset = comdat any

$std.core.string.Splitter.next = comdat any

$std.core.string.tformat_zstr = comdat any

$std.core.string.format = comdat any

$std.core.string.new_format = comdat any

$std.core.string.tformat = comdat any

$std.core.string.new_format_zstr = comdat any

$std.core.string.join_new = comdat any

$std.core.string.new_from_utf32 = comdat any

$std.core.string.new_from_utf16 = comdat any

$std.core.string.new_from_wstring = comdat any

$std.core.string.temp_from_wstring = comdat any

$std.core.string.temp_from_utf16 = comdat any

$.dyn_search = comdat any

$"$ct.std.core.string.ZString" = comdat any

$"$ct.p$char" = comdat any

$"$ct.char" = comdat any

$"$ct.std.core.string.WString" = comdat any

$"$ct.p$ushort" = comdat any

$"$ct.ushort" = comdat any

$"std.core.string.UnicodeResult$INVALID_UTF8" = comdat any

$"std.core.string.UnicodeResult$INVALID_UTF16" = comdat any

$"std.core.string.UnicodeResult$CONVERSION_FAILED" = comdat any

$"$ct.std.core.string.UnicodeResult" = comdat any

$"std.core.string.NumberConversion$EMPTY_STRING" = comdat any

$"std.core.string.NumberConversion$NEGATIVE_VALUE" = comdat any

$"std.core.string.NumberConversion$MALFORMED_INTEGER" = comdat any

$"std.core.string.NumberConversion$INTEGER_OVERFLOW" = comdat any

$"std.core.string.NumberConversion$MALFORMED_FLOAT" = comdat any

$"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" = comdat any

$"$ct.std.core.string.NumberConversion" = comdat any

$"std.core.string.SplitResult$BUFFER_EXCEEDED" = comdat any

$"$ct.std.core.string.SplitResult" = comdat any

$"$ct.std.core.string.Splitter" = comdat any

$"$sel.acquire" = comdat any

$"$ct.anyfault" = comdat any

$"$ct.long" = comdat any

$"$ct.ulong" = comdat any

$"$sel.release" = comdat any

$"$ct.std.core.mem.allocator.TempAllocator" = comdat any

$"std.core.builtin.SearchResult$MISSING" = comdat any

$"$ct.std.core.builtin.SearchResult" = comdat any

$"$sel.resize" = comdat any

$"$ct.uint" = comdat any

$"$ct.int" = comdat any

$"std.core.builtin.IteratorResult$NO_MORE_ELEMENT" = comdat any

$"$ct.std.core.builtin.IteratorResult" = comdat any

$std.core.string.KMAX = comdat any

$std.core.string.MASK = comdat any

$std.core.string.B1B_DIG = comdat any

$std.core.string.B1B_MAX = comdat any

@"$ct.std.core.string.ZString" = linkonce global %.introspect { i8 18, i64 ptrtoint (ptr @"$ct.p$char" to i64), ptr null, i64 8, i64 ptrtoint (ptr @"$ct.p$char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.p$char" = linkonce global %.introspect { i8 19, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.char" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.string.WString" = linkonce global %.introspect { i8 18, i64 ptrtoint (ptr @"$ct.p$ushort" to i64), ptr null, i64 8, i64 ptrtoint (ptr @"$ct.p$ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.p$ushort" = linkonce global %.introspect { i8 19, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.ushort" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 2, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"std.core.string.UnicodeResult$INVALID_UTF8" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.UnicodeResult" to i64), %"char[]" { ptr @.fault, i64 12 }, i64 1 }, comdat, align 8
@.fault = internal constant [13 x i8] c"INVALID_UTF8\00", align 1
@"std.core.string.UnicodeResult$INVALID_UTF16" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.UnicodeResult" to i64), %"char[]" { ptr @.fault.1, i64 13 }, i64 2 }, comdat, align 8
@.fault.1 = internal constant [14 x i8] c"INVALID_UTF16\00", align 1
@"std.core.string.UnicodeResult$CONVERSION_FAILED" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.UnicodeResult" to i64), %"char[]" { ptr @.fault.2, i64 17 }, i64 3 }, comdat, align 8
@.fault.2 = internal constant [18 x i8] c"CONVERSION_FAILED\00", align 1
@"$ct.std.core.string.UnicodeResult" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"std.core.string.NumberConversion$EMPTY_STRING" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.NumberConversion" to i64), %"char[]" { ptr @.fault.3, i64 12 }, i64 1 }, comdat, align 8
@.fault.3 = internal constant [13 x i8] c"EMPTY_STRING\00", align 1
@"std.core.string.NumberConversion$NEGATIVE_VALUE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.NumberConversion" to i64), %"char[]" { ptr @.fault.4, i64 14 }, i64 2 }, comdat, align 8
@.fault.4 = internal constant [15 x i8] c"NEGATIVE_VALUE\00", align 1
@"std.core.string.NumberConversion$MALFORMED_INTEGER" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.NumberConversion" to i64), %"char[]" { ptr @.fault.5, i64 17 }, i64 3 }, comdat, align 8
@.fault.5 = internal constant [18 x i8] c"MALFORMED_INTEGER\00", align 1
@"std.core.string.NumberConversion$INTEGER_OVERFLOW" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.NumberConversion" to i64), %"char[]" { ptr @.fault.6, i64 16 }, i64 4 }, comdat, align 8
@.fault.6 = internal constant [17 x i8] c"INTEGER_OVERFLOW\00", align 1
@"std.core.string.NumberConversion$MALFORMED_FLOAT" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.NumberConversion" to i64), %"char[]" { ptr @.fault.7, i64 15 }, i64 5 }, comdat, align 8
@.fault.7 = internal constant [16 x i8] c"MALFORMED_FLOAT\00", align 1
@"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.NumberConversion" to i64), %"char[]" { ptr @.fault.8, i64 18 }, i64 6 }, comdat, align 8
@.fault.8 = internal constant [19 x i8] c"FLOAT_OUT_OF_RANGE\00", align 1
@"$ct.std.core.string.NumberConversion" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 6, [0 x i64] zeroinitializer }, comdat, align 8
@"std.core.string.SplitResult$BUFFER_EXCEEDED" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.SplitResult" to i64), %"char[]" { ptr @.fault.9, i64 15 }, i64 1 }, comdat, align 8
@.fault.9 = internal constant [16 x i8] c"BUFFER_EXCEEDED\00", align 1
@"$ct.std.core.string.SplitResult" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.string.Splitter" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 48, i64 0, i64 5, [0 x i64] zeroinitializer }, comdat, align 8
@std.core.string.SURROGATE_OFFSET = internal unnamed_addr constant i32 65536, align 4, !dbg !0
@std.core.string.SURROGATE_GENERIC_MASK = internal unnamed_addr constant i32 63488, align 4, !dbg !4
@std.core.string.SURROGATE_MASK = internal unnamed_addr constant i32 64512, align 4, !dbg !6
@std.core.string.SURROGATE_CODEPOINT_MASK = internal unnamed_addr constant i32 1023, align 4, !dbg !8
@std.core.string.SURROGATE_BITS = internal unnamed_addr constant i32 10, align 4, !dbg !10
@std.core.string.SURROGATE_LOW_VALUE = internal unnamed_addr constant i32 56320, align 4, !dbg !12
@std.core.string.SURROGATE_HIGH_VALUE = internal unnamed_addr constant i32 55296, align 4, !dbg !14
@std.core.mem.allocator.thread_temp_allocator = extern_weak thread_local global ptr, align 8
@std.core.mem.allocator.thread_allocator = extern_weak thread_local global %any, align 8
@"$sel.acquire" = linkonce_odr constant [8 x i8] c"acquire\00", comdat, align 1
@.panic_msg = internal constant [45 x i8] c"No method 'acquire' could be found on target\00", align 1
@.file = internal constant [17 x i8] c"mem_allocator.c3\00", align 1
@.func = internal constant [9 x i8] c"join_new\00", align 1
@std.core.builtin.panic = extern_weak global ptr, align 8
@"$ct.anyfault" = linkonce global %.introspect { i8 6, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.16 = internal constant [37 x i8] c"Unexpected fault '%s' was unwrapped!\00", align 1
@"$ct.long" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.17 = internal constant [62 x i8] c"Index exceeds array length (array had size %d, index was %d).\00", align 1
@.file.18 = internal constant [10 x i8] c"string.c3\00", align 1
@.panic_msg.19 = internal constant [61 x i8] c"End index out of bounds (end index of %d exceeds size of %d)\00", align 1
@"$ct.ulong" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.20 = internal constant [60 x i8] c"Array index out of bounds (array had size %d, index was %d)\00", align 1
@.panic_msg.21 = internal constant [45 x i8] c"Dereference of null pointer, 'str' was null.\00", align 1
@.panic_msg.22 = internal constant [95 x i8] c"Unaligned access: ptr %% %s = %s, use @unaligned_load / @unaligned_store for unaligned access.\00", align 1
@.panic_msg.23 = internal constant [48 x i8] c"Dereference of null pointer, 's[1..]' was null.\00", align 1
@.func.24 = internal constant [15 x i8] c"new_from_utf32\00", align 1
@.func.25 = internal constant [15 x i8] c"new_from_utf16\00", align 1
@"$sel.release" = linkonce_odr constant [8 x i8] c"release\00", comdat, align 1
@.panic_msg.26 = internal constant [45 x i8] c"No method 'release' could be found on target\00", align 1
@"$ct.std.core.mem.allocator.TempAllocator" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 5, [0 x i64] zeroinitializer }, comdat, align 8
@.func.27 = internal constant [10 x i8] c"trim_left\00", align 1
@.panic_msg.28 = internal constant [39 x i8] c"Negative array indexing (index was %d)\00", align 1
@.func.29 = internal constant [11 x i8] c"trim_right\00", align 1
@.func.30 = internal constant [12 x i8] c"starts_with\00", align 1
@.func.31 = internal constant [10 x i8] c"ends_with\00", align 1
@.func.32 = internal constant [6 x i8] c"strip\00", align 1
@.func.33 = internal constant [10 x i8] c"strip_end\00", align 1
@.panic_msg.34 = internal constant [84 x i8] c"@require \22needle.len > 0\22 violated: 'The needle must be at least 1 character long'.\00", align 1
@.func.35 = internal constant [6 x i8] c"split\00", align 1
@"std.core.builtin.SearchResult$MISSING" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.builtin.SearchResult" to i64), %"char[]" { ptr @.fault.36, i64 7 }, i64 1 }, comdat, align 8
@.fault.36 = internal constant [8 x i8] c"MISSING\00", align 1
@"$ct.std.core.builtin.SearchResult" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, comdat, align 8
@"$sel.resize" = linkonce_odr constant [7 x i8] c"resize\00", comdat, align 1
@.panic_msg.37 = internal constant [44 x i8] c"No method 'resize' could be found on target\00", align 1
@.panic_msg.38 = internal constant [35 x i8] c"@ensure \22return.len > 0\22 violated.\00", align 1
@.func.39 = internal constant [10 x i8] c"new_split\00", align 1
@.func.40 = internal constant [16 x i8] c"split_to_buffer\00", align 1
@.func.41 = internal constant [14 x i8] c"index_of_char\00", align 1
@.panic_msg.42 = internal constant [35 x i8] c"@ensure \22return < s.len\22 violated.\00", align 1
@.func.43 = internal constant [15 x i8] c"index_of_chars\00", align 1
@.func.44 = internal constant [19 x i8] c"index_of_char_from\00", align 1
@.func.45 = internal constant [15 x i8] c"rindex_of_char\00", align 1
@.panic_msg.46 = internal constant [72 x i8] c"@require \22needle.len > 0\22 violated: 'The needle must be len 1 or more'.\00", align 1
@.func.47 = internal constant [9 x i8] c"index_of\00", align 1
@.panic_msg.48 = internal constant [45 x i8] c"Negative size (start %d is less than end %d)\00", align 1
@.panic_msg.49 = internal constant [54 x i8] c"Dereference of null pointer, 's[..^needed]' was null.\00", align 1
@.func.50 = internal constant [10 x i8] c"rindex_of\00", align 1
@.func.51 = internal constant [10 x i8] c"zstr_copy\00", align 1
@.panic_msg.52 = internal constant [96 x i8] c"@require \22len == 0 || dst + len <= src || src + len <= dst\22 violated: 'Ranges may not overlap'.\00", align 1
@.file.53 = internal constant [7 x i8] c"mem.c3\00", align 1
@.func.54 = internal constant [7 x i8] c"concat\00", align 1
@.func.55 = internal constant [5 x i8] c"copy\00", align 1
@.panic_msg.56 = internal constant [60 x i8] c"Reference parameter 's' was passed a null pointer argument.\00", align 1
@.func.57 = internal constant [5 x i8] c"free\00", align 1
@.panic_msg.58 = internal constant [43 x i8] c"Dereference of null pointer, 's' was null.\00", align 1
@.func.59 = internal constant [13 x i8] c"to_new_utf16\00", align 1
@.func.60 = internal constant [9 x i8] c"to_utf32\00", align 1
@.func.61 = internal constant [23 x i8] c"convert_ascii_to_lower\00", align 1
@.panic_msg.62 = internal constant [43 x i8] c"Dereference of null pointer, 'c' was null.\00", align 1
@.func.63 = internal constant [23 x i8] c"convert_ascii_to_upper\00", align 1
@.func.64 = internal constant [16 x i8] c"utf8_codepoints\00", align 1
@.panic_msg.65 = internal constant [80 x i8] c"@require \22(base <= 10 && base > 1) || base == 16\22 violated: 'Unsupported base'.\00", align 1
@.func.66 = internal constant [10 x i8] c"to_int128\00", align 1
@.func.67 = internal constant [8 x i8] c"to_long\00", align 1
@.func.68 = internal constant [7 x i8] c"to_int\00", align 1
@.func.69 = internal constant [9 x i8] c"to_short\00", align 1
@.func.70 = internal constant [9 x i8] c"to_ichar\00", align 1
@.func.71 = internal constant [11 x i8] c"to_uint128\00", align 1
@.func.72 = internal constant [9 x i8] c"to_ulong\00", align 1
@.func.73 = internal constant [8 x i8] c"to_uint\00", align 1
@.func.74 = internal constant [10 x i8] c"to_ushort\00", align 1
@.func.75 = internal constant [9 x i8] c"to_uchar\00", align 1
@to_double.BITS = internal unnamed_addr constant i32 53, align 4, !dbg !16
@to_double.EMIN = internal unnamed_addr constant i32 -1074, align 4, !dbg !19
@.file.76 = internal constant [18 x i8] c"string_to_real.c3\00", align 1
@.func.77 = internal constant [10 x i8] c"to_double\00", align 1
@.str = private unnamed_addr constant [9 x i8] c"infinity\00", align 1
@.str.78 = private unnamed_addr constant [9 x i8] c"INFINITY\00", align 1
@.str.79 = private unnamed_addr constant [4 x i8] c"NAN\00", align 1
@.str.80 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.panic_msg.81 = internal constant [23 x i8] c"Negative indexing (%d)\00", align 1
@.panic_msg.82 = internal constant [35 x i8] c"@require \22chars.len > 0\22 violated.\00", align 1
@to_double.TH = internal unnamed_addr constant [2 x i32] [i32 9007199, i32 254740991], align 4, !dbg !21
@to_double.P10S = internal unnamed_addr constant [8 x i32] [i32 10, i32 100, i32 1000, i32 10000, i32 100000, i32 1000000, i32 10000000, i32 100000000], align 16, !dbg !26
@.panic_msg.83 = internal constant [17 x i8] c"Assert violation\00", align 1
@.panic_msg.84 = internal constant [18 x i8] c"Division by zero.\00", align 1
@"$ct.uint" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.85 = internal constant [36 x i8] c"Shift amount out of range (was %s).\00", align 1
@.panic_msg.86 = internal constant [11 x i8] c"% by zero.\00", align 1
@"$ct.int" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@to_float.BITS = internal unnamed_addr constant i32 24, align 4, !dbg !31
@to_float.EMIN = internal unnamed_addr constant i32 -149, align 4, !dbg !33
@.func.87 = internal constant [9 x i8] c"to_float\00", align 1
@.str.88 = private unnamed_addr constant [9 x i8] c"infinity\00", align 1
@.str.89 = private unnamed_addr constant [9 x i8] c"INFINITY\00", align 1
@.str.90 = private unnamed_addr constant [4 x i8] c"NAN\00", align 1
@.str.91 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@to_float.TH = internal unnamed_addr constant [2 x i32] [i32 9007199, i32 254740991], align 4, !dbg !35
@to_float.P10S = internal unnamed_addr constant [8 x i32] [i32 10, i32 100, i32 1000, i32 10000, i32 100000, i32 1000000, i32 10000000, i32 100000000], align 16, !dbg !37
@.panic_msg.92 = internal constant [63 x i8] c"Reference parameter 'self' was passed a null pointer argument.\00", align 1
@.func.93 = internal constant [6 x i8] c"reset\00", align 1
@.func.94 = internal constant [5 x i8] c"next\00", align 1
@"std.core.builtin.IteratorResult$NO_MORE_ELEMENT" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.builtin.IteratorResult" to i64), %"char[]" { ptr @.fault.95, i64 15 }, i64 1 }, comdat, align 8
@.fault.95 = internal constant [16 x i8] c"NO_MORE_ELEMENT\00", align 1
@"$ct.std.core.builtin.IteratorResult" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, comdat, align 8
@std.core.string.KMAX = weak local_unnamed_addr constant i32 128, comdat, align 4, !dbg !39
@std.core.string.MASK = weak local_unnamed_addr constant i32 127, comdat, align 4, !dbg !42
@std.core.string.B1B_DIG = weak local_unnamed_addr constant i32 2, comdat, align 4, !dbg !44
@std.core.string.B1B_MAX = weak local_unnamed_addr constant [2 x i32] [i32 9007199, i32 254740991], comdat, align 4, !dbg !46

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.trim(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !57 {
entry:
  %string = alloca %"char[]", align 8
  %to_trim = alloca %"char[]", align 8
  %result = alloca %"char[]", align 8
  %result12 = alloca %"char[]", align 8
  store ptr %0, ptr %string, align 8
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %string, !70, !DIExpression(), !71)
  store ptr %2, ptr %to_trim, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %to_trim, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %to_trim, !72, !DIExpression(), !73)
  %lo = load ptr, ptr %string, align 8, !dbg !74
  %ptradd2 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !74
  %hi = load i64, ptr %ptradd2, align 8, !dbg !74
  %lo3 = load ptr, ptr %to_trim, align 8, !dbg !74
  %ptradd4 = getelementptr inbounds i8, ptr %to_trim, i64 8, !dbg !74
  %hi5 = load i64, ptr %ptradd4, align 8, !dbg !74
  %4 = call { ptr, i64 } @std.core.String.trim_left(ptr %lo, i64 %hi, ptr %lo3, i64 %hi5), !dbg !75
  store { ptr, i64 } %4, ptr %result, align 8
  %lo6 = load ptr, ptr %result, align 8, !dbg !76
  %ptradd7 = getelementptr inbounds i8, ptr %result, i64 8, !dbg !76
  %hi8 = load i64, ptr %ptradd7, align 8, !dbg !76
  %lo9 = load ptr, ptr %to_trim, align 8, !dbg !76
  %ptradd10 = getelementptr inbounds i8, ptr %to_trim, i64 8, !dbg !76
  %hi11 = load i64, ptr %ptradd10, align 8, !dbg !76
  %5 = call { ptr, i64 } @std.core.String.trim_right(ptr %lo6, i64 %hi8, ptr %lo9, i64 %hi11), !dbg !75
  store { ptr, i64 } %5, ptr %result12, align 8
  %6 = load { ptr, i64 }, ptr %result12, align 8
  ret { ptr, i64 } %6
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.trim_left(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !77 {
entry:
  %string = alloca %"char[]", align 8
  %to_trim = alloca %"char[]", align 8
  %start = alloca i64, align 8
  %len = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %c = alloca i8, align 1
  %set = alloca %"char[]", align 8
  %blockret = alloca i8, align 1
  %.anon = alloca i64, align 8
  %ch = alloca i8, align 1
  %taddr13 = alloca i64, align 8
  %taddr14 = alloca i64, align 8
  %varargslots15 = alloca [2 x %any], align 16
  %indirectarg18 = alloca %"any[]", align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %varargslots48 = alloca [2 x %any], align 16
  %indirectarg51 = alloca %"any[]", align 8
  %taddr54 = alloca %"char[]", align 8
  store ptr %0, ptr %string, align 8
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %string, !78, !DIExpression(), !79)
  store ptr %2, ptr %to_trim, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %to_trim, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %to_trim, !80, !DIExpression(), !81)
    #dbg_declare(ptr %start, !82, !DIExpression(), !83)
  store i64 0, ptr %start, align 8, !dbg !84
    #dbg_declare(ptr %len, !85, !DIExpression(), !86)
  %ptradd2 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !87
  %4 = load i64, ptr %ptradd2, align 8, !dbg !87
  store i64 %4, ptr %len, align 8, !dbg !87
  br label %loop.cond, !dbg !88

loop.cond:                                        ; preds = %loop.body21, %entry
  %5 = load i64, ptr %start, align 8, !dbg !89
  %6 = load i64, ptr %len, align 8, !dbg !91
  %lt = icmp ult i64 %5, %6, !dbg !89
  br i1 %lt, label %and.rhs, label %and.phi, !dbg !89

and.rhs:                                          ; preds = %loop.cond
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !92
  %7 = load i64, ptr %ptradd3, align 8, !dbg !92
  %8 = load ptr, ptr %string, align 8, !dbg !92
  %9 = load i64, ptr %start, align 8, !dbg !93
  %ge = icmp uge i64 %9, %7, !dbg !93
  %10 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !93
  br i1 %10, label %panic, label %checkok, !dbg !93

checkok:                                          ; preds = %and.rhs
  %ptradd6 = getelementptr inbounds i8, ptr %8, i64 %9, !dbg !93
  %11 = load i8, ptr %ptradd6, align 1
  store i8 %11, ptr %c, align 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %set, ptr align 8 %to_trim, i32 16, i1 false)
  %ptradd7 = getelementptr inbounds i8, ptr %set, i64 8, !dbg !94
  %12 = load i64, ptr %ptradd7, align 8, !dbg !94
    #dbg_declare(ptr %.anon, !98, !DIExpression(), !94)
  store i64 0, ptr %.anon, align 8, !dbg !94
  br label %loop.cond8, !dbg !94

loop.cond8:                                       ; preds = %if.exit, %checkok
  %13 = load i64, ptr %.anon, align 8, !dbg !94
  %lt9 = icmp ult i64 %13, %12, !dbg !94
  br i1 %lt9, label %loop.body, label %loop.exit, !dbg !94

loop.body:                                        ; preds = %loop.cond8
    #dbg_declare(ptr %ch, !99, !DIExpression(), !101)
  %ptradd10 = getelementptr inbounds i8, ptr %set, i64 8, !dbg !102
  %14 = load i64, ptr %ptradd10, align 8, !dbg !102
  %15 = load ptr, ptr %set, align 8, !dbg !102
  %16 = load i64, ptr %.anon, align 8, !dbg !102
  %ge11 = icmp uge i64 %16, %14, !dbg !102
  %17 = call i1 @llvm.expect.i1(i1 %ge11, i1 false), !dbg !102
  br i1 %17, label %panic12, label %checkok19, !dbg !102

checkok19:                                        ; preds = %loop.body
  %ptradd20 = getelementptr inbounds i8, ptr %15, i64 %16, !dbg !102
  %18 = load i8, ptr %ptradd20, align 1, !dbg !102
  store i8 %18, ptr %ch, align 1, !dbg !102
  %19 = load i8, ptr %ch, align 1, !dbg !103
  %20 = load i8, ptr %c, align 1, !dbg !104
  %eq = icmp eq i8 %19, %20, !dbg !103
  br i1 %eq, label %if.then, label %if.exit, !dbg !103

if.then:                                          ; preds = %checkok19
  store i8 1, ptr %blockret, align 1, !dbg !105
  br label %expr_block.exit, !dbg !105

if.exit:                                          ; preds = %checkok19
  %21 = load i64, ptr %.anon, align 8, !dbg !94
  %addnuw = add nuw i64 %21, 1, !dbg !94
  store i64 %addnuw, ptr %.anon, align 8, !dbg !94
  br label %loop.cond8, !dbg !94

loop.exit:                                        ; preds = %loop.cond8
  store i8 0, ptr %blockret, align 1, !dbg !106
  br label %expr_block.exit, !dbg !106

expr_block.exit:                                  ; preds = %loop.exit, %if.then
  %22 = load i8, ptr %blockret, align 1, !dbg !106
  %23 = trunc i8 %22 to i1, !dbg !106
  br label %and.phi, !dbg !106

and.phi:                                          ; preds = %expr_block.exit, %loop.cond
  %val = phi i1 [ false, %loop.cond ], [ %23, %expr_block.exit ], !dbg !106
  br i1 %val, label %loop.body21, label %loop.exit22, !dbg !106

loop.body21:                                      ; preds = %and.phi
  %24 = load i64, ptr %start, align 8, !dbg !107
  %add = add i64 %24, 1, !dbg !107
  store i64 %add, ptr %start, align 8, !dbg !107
  br label %loop.cond, !dbg !107

loop.exit22:                                      ; preds = %and.phi
  %25 = load i64, ptr %start, align 8, !dbg !108
  %26 = load i64, ptr %len, align 8, !dbg !109
  %eq23 = icmp eq i64 %25, %26, !dbg !108
  br i1 %eq23, label %if.then24, label %if.exit43, !dbg !108

if.then24:                                        ; preds = %loop.exit22
  %27 = load %"char[]", ptr %string, align 8, !dbg !110
  %28 = extractvalue %"char[]" %27, 0, !dbg !110
  %29 = extractvalue %"char[]" %27, 1, !dbg !110
  %gt = icmp sgt i64 0, %29, !dbg !110
  %30 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !110
  br i1 %30, label %panic25, label %checkok32, !dbg !110

checkok32:                                        ; preds = %if.then24
  %lt33 = icmp slt i64 %29, 0, !dbg !110
  %31 = call i1 @llvm.expect.i1(i1 %lt33, i1 false), !dbg !110
  br i1 %31, label %panic34, label %checkok41, !dbg !110

checkok41:                                        ; preds = %checkok32
  %32 = insertvalue %"char[]" undef, ptr %28, 0, !dbg !110
  %33 = insertvalue %"char[]" %32, i64 0, 1, !dbg !110
  store %"char[]" %33, ptr %taddr42, align 8
  %34 = load { ptr, i64 }, ptr %taddr42, align 8
  ret { ptr, i64 } %34

if.exit43:                                        ; preds = %loop.exit22
  %35 = load %"char[]", ptr %string, align 8, !dbg !111
  %36 = extractvalue %"char[]" %35, 0, !dbg !111
  %37 = load i64, ptr %start, align 8, !dbg !112
  %38 = extractvalue %"char[]" %35, 1, !dbg !112
  %gt44 = icmp ugt i64 %37, %38, !dbg !112
  %39 = call i1 @llvm.expect.i1(i1 %gt44, i1 false), !dbg !112
  br i1 %39, label %panic45, label %checkok52, !dbg !112

checkok52:                                        ; preds = %if.exit43
  %size = sub i64 %38, %37, !dbg !111
  %ptradd53 = getelementptr inbounds i8, ptr %36, i64 %37, !dbg !111
  %40 = insertvalue %"char[]" undef, ptr %ptradd53, 0, !dbg !111
  %41 = insertvalue %"char[]" %40, i64 %size, 1, !dbg !111
  store %"char[]" %41, ptr %taddr54, align 8
  %42 = load { ptr, i64 }, ptr %taddr54, align 8
  ret { ptr, i64 } %42

panic:                                            ; preds = %and.rhs
  store i64 %7, ptr %taddr, align 8
  %43 = insertvalue %any undef, ptr %taddr, 0
  %44 = insertvalue %any %43, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr4, align 8
  %45 = insertvalue %any undef, ptr %taddr4, 0
  %46 = insertvalue %any %45, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %44, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %46, ptr %ptradd5, align 16
  %47 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %47, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.27, i64 9, i32 158, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !93
  unreachable, !dbg !93

panic12:                                          ; preds = %loop.body
  store i64 %14, ptr %taddr13, align 8
  %48 = insertvalue %any undef, ptr %taddr13, 0
  %49 = insertvalue %any %48, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %16, ptr %taddr14, align 8
  %50 = insertvalue %any undef, ptr %taddr14, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %49, ptr %varargslots15, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots15, i64 16
  store %any %51, ptr %ptradd16, align 16
  %52 = insertvalue %"any[]" undef, ptr %varargslots15, 0
  %"$$temp17" = insertvalue %"any[]" %52, i64 2, 1
  store %"any[]" %"$$temp17", ptr %indirectarg18, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.27, i64 9, i32 104, ptr byval(%"any[]") align 8 %indirectarg18) #5, !dbg !102
  unreachable, !dbg !102

panic25:                                          ; preds = %if.then24
  store i64 %29, ptr %taddr26, align 8
  %53 = insertvalue %any undef, ptr %taddr26, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr27, align 8
  %55 = insertvalue %any undef, ptr %taddr27, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %54, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %56, ptr %ptradd29, align 16
  %57 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %57, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 61, ptr @.file.18, i64 9, ptr @.func.27, i64 9, i32 159, ptr byval(%"any[]") align 8 %indirectarg31) #5, !dbg !110
  unreachable, !dbg !110

panic34:                                          ; preds = %checkok32
  store i64 -1, ptr %taddr35, align 8
  %58 = insertvalue %any undef, ptr %taddr35, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %29, ptr %taddr36, align 8
  %60 = insertvalue %any undef, ptr %taddr36, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %59, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %61, ptr %ptradd38, align 16
  %62 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %62, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 60, ptr @.file.18, i64 9, ptr @.func.27, i64 9, i32 159, ptr byval(%"any[]") align 8 %indirectarg40) #5, !dbg !110
  unreachable, !dbg !110

panic45:                                          ; preds = %if.exit43
  store i64 %38, ptr %taddr46, align 8
  %63 = insertvalue %any undef, ptr %taddr46, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr47, align 8
  %65 = insertvalue %any undef, ptr %taddr47, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %64, ptr %varargslots48, align 16
  %ptradd49 = getelementptr inbounds i8, ptr %varargslots48, i64 16
  store %any %66, ptr %ptradd49, align 16
  %67 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp50" = insertvalue %"any[]" %67, i64 2, 1
  store %"any[]" %"$$temp50", ptr %indirectarg51, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 61, ptr @.file.18, i64 9, ptr @.func.27, i64 9, i32 160, ptr byval(%"any[]") align 8 %indirectarg51) #5, !dbg !111
  unreachable, !dbg !111
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.trim_right(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !113 {
entry:
  %string = alloca %"char[]", align 8
  %to_trim = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %taddr = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots8 = alloca [2 x %any], align 16
  %indirectarg11 = alloca %"any[]", align 8
  %c = alloca i8, align 1
  %set = alloca %"char[]", align 8
  %blockret = alloca i8, align 1
  %.anon = alloca i64, align 8
  %ch = alloca i8, align 1
  %taddr20 = alloca i64, align 8
  %taddr21 = alloca i64, align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr32 = alloca i64, align 8
  %taddr33 = alloca i64, align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca i64, align 8
  %varargslots44 = alloca [2 x %any], align 16
  %indirectarg47 = alloca %"any[]", align 8
  %taddr49 = alloca %"char[]", align 8
  store ptr %0, ptr %string, align 8
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %string, !114, !DIExpression(), !115)
  store ptr %2, ptr %to_trim, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %to_trim, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %to_trim, !116, !DIExpression(), !117)
    #dbg_declare(ptr %len, !118, !DIExpression(), !119)
  %ptradd2 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !120
  %4 = load i64, ptr %ptradd2, align 8, !dbg !120
  store i64 %4, ptr %len, align 8, !dbg !120
  br label %loop.cond, !dbg !121

loop.cond:                                        ; preds = %loop.body28, %entry
  %5 = load i64, ptr %len, align 8, !dbg !122
  %lt = icmp ult i64 0, %5, !dbg !122
  br i1 %lt, label %and.rhs, label %and.phi, !dbg !122

and.rhs:                                          ; preds = %loop.cond
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !124
  %6 = load i64, ptr %ptradd3, align 8, !dbg !124
  %7 = load ptr, ptr %string, align 8, !dbg !124
  %8 = load i64, ptr %len, align 8, !dbg !125
  %sub = sub i64 %8, 1, !dbg !125
  %lt4 = icmp slt i64 %sub, 0, !dbg !125
  %9 = call i1 @llvm.expect.i1(i1 %lt4, i1 false), !dbg !125
  br i1 %9, label %panic, label %checkok, !dbg !125

checkok:                                          ; preds = %and.rhs
  %ge = icmp sge i64 %sub, %6, !dbg !125
  %10 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !125
  br i1 %10, label %panic5, label %checkok12, !dbg !125

checkok12:                                        ; preds = %checkok
  %ptradd13 = getelementptr inbounds i8, ptr %7, i64 %sub, !dbg !125
  %11 = load i8, ptr %ptradd13, align 1
  store i8 %11, ptr %c, align 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %set, ptr align 8 %to_trim, i32 16, i1 false)
  %ptradd14 = getelementptr inbounds i8, ptr %set, i64 8, !dbg !126
  %12 = load i64, ptr %ptradd14, align 8, !dbg !126
    #dbg_declare(ptr %.anon, !130, !DIExpression(), !126)
  store i64 0, ptr %.anon, align 8, !dbg !126
  br label %loop.cond15, !dbg !126

loop.cond15:                                      ; preds = %if.exit, %checkok12
  %13 = load i64, ptr %.anon, align 8, !dbg !126
  %lt16 = icmp ult i64 %13, %12, !dbg !126
  br i1 %lt16, label %loop.body, label %loop.exit, !dbg !126

loop.body:                                        ; preds = %loop.cond15
    #dbg_declare(ptr %ch, !131, !DIExpression(), !133)
  %ptradd17 = getelementptr inbounds i8, ptr %set, i64 8, !dbg !134
  %14 = load i64, ptr %ptradd17, align 8, !dbg !134
  %15 = load ptr, ptr %set, align 8, !dbg !134
  %16 = load i64, ptr %.anon, align 8, !dbg !134
  %ge18 = icmp uge i64 %16, %14, !dbg !134
  %17 = call i1 @llvm.expect.i1(i1 %ge18, i1 false), !dbg !134
  br i1 %17, label %panic19, label %checkok26, !dbg !134

checkok26:                                        ; preds = %loop.body
  %ptradd27 = getelementptr inbounds i8, ptr %15, i64 %16, !dbg !134
  %18 = load i8, ptr %ptradd27, align 1, !dbg !134
  store i8 %18, ptr %ch, align 1, !dbg !134
  %19 = load i8, ptr %ch, align 1, !dbg !135
  %20 = load i8, ptr %c, align 1, !dbg !136
  %eq = icmp eq i8 %19, %20, !dbg !135
  br i1 %eq, label %if.then, label %if.exit, !dbg !135

if.then:                                          ; preds = %checkok26
  store i8 1, ptr %blockret, align 1, !dbg !137
  br label %expr_block.exit, !dbg !137

if.exit:                                          ; preds = %checkok26
  %21 = load i64, ptr %.anon, align 8, !dbg !126
  %addnuw = add nuw i64 %21, 1, !dbg !126
  store i64 %addnuw, ptr %.anon, align 8, !dbg !126
  br label %loop.cond15, !dbg !126

loop.exit:                                        ; preds = %loop.cond15
  store i8 0, ptr %blockret, align 1, !dbg !138
  br label %expr_block.exit, !dbg !138

expr_block.exit:                                  ; preds = %loop.exit, %if.then
  %22 = load i8, ptr %blockret, align 1, !dbg !138
  %23 = trunc i8 %22 to i1, !dbg !138
  br label %and.phi, !dbg !138

and.phi:                                          ; preds = %expr_block.exit, %loop.cond
  %val = phi i1 [ false, %loop.cond ], [ %23, %expr_block.exit ], !dbg !138
  br i1 %val, label %loop.body28, label %loop.exit30, !dbg !138

loop.body28:                                      ; preds = %and.phi
  %24 = load i64, ptr %len, align 8, !dbg !139
  %sub29 = sub i64 %24, 1, !dbg !139
  store i64 %sub29, ptr %len, align 8, !dbg !139
  br label %loop.cond, !dbg !139

loop.exit30:                                      ; preds = %and.phi
  %25 = load %"char[]", ptr %string, align 8, !dbg !140
  %26 = extractvalue %"char[]" %25, 0, !dbg !140
  %27 = extractvalue %"char[]" %25, 1, !dbg !141
  %gt = icmp ugt i64 0, %27, !dbg !141
  %28 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !141
  br i1 %28, label %panic31, label %checkok38, !dbg !141

checkok38:                                        ; preds = %loop.exit30
  %29 = load i64, ptr %len, align 8, !dbg !142
  %add = add i64 0, %29, !dbg !142
  %lt39 = icmp ult i64 %27, %add, !dbg !142
  %sub40 = sub i64 %add, 1, !dbg !142
  %30 = call i1 @llvm.expect.i1(i1 %lt39, i1 false), !dbg !142
  br i1 %30, label %panic41, label %checkok48, !dbg !142

checkok48:                                        ; preds = %checkok38
  %size = sub i64 %add, 0, !dbg !140
  %31 = insertvalue %"char[]" undef, ptr %26, 0, !dbg !140
  %32 = insertvalue %"char[]" %31, i64 %size, 1, !dbg !140
  store %"char[]" %32, ptr %taddr49, align 8
  %33 = load { ptr, i64 }, ptr %taddr49, align 8
  ret { ptr, i64 } %33

panic:                                            ; preds = %and.rhs
  store i64 %sub, ptr %taddr, align 8
  %34 = insertvalue %any undef, ptr %taddr, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %35, ptr %varargslots, align 16
  %36 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %36, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.18, i64 9, ptr @.func.29, i64 10, i32 174, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !125
  unreachable, !dbg !125

panic5:                                           ; preds = %checkok
  store i64 %6, ptr %taddr6, align 8
  %37 = insertvalue %any undef, ptr %taddr6, 0
  %38 = insertvalue %any %37, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub, ptr %taddr7, align 8
  %39 = insertvalue %any undef, ptr %taddr7, 0
  %40 = insertvalue %any %39, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %38, ptr %varargslots8, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots8, i64 16
  store %any %40, ptr %ptradd9, align 16
  %41 = insertvalue %"any[]" undef, ptr %varargslots8, 0
  %"$$temp10" = insertvalue %"any[]" %41, i64 2, 1
  store %"any[]" %"$$temp10", ptr %indirectarg11, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.29, i64 10, i32 174, ptr byval(%"any[]") align 8 %indirectarg11) #5, !dbg !125
  unreachable, !dbg !125

panic19:                                          ; preds = %loop.body
  store i64 %14, ptr %taddr20, align 8
  %42 = insertvalue %any undef, ptr %taddr20, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %16, ptr %taddr21, align 8
  %44 = insertvalue %any undef, ptr %taddr21, 0
  %45 = insertvalue %any %44, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %43, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %45, ptr %ptradd23, align 16
  %46 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %46, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.29, i64 10, i32 104, ptr byval(%"any[]") align 8 %indirectarg25) #5, !dbg !134
  unreachable, !dbg !134

panic31:                                          ; preds = %loop.exit30
  store i64 %27, ptr %taddr32, align 8
  %47 = insertvalue %any undef, ptr %taddr32, 0
  %48 = insertvalue %any %47, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr33, align 8
  %49 = insertvalue %any undef, ptr %taddr33, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %48, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %50, ptr %ptradd35, align 16
  %51 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %51, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 61, ptr @.file.18, i64 9, ptr @.func.29, i64 10, i32 175, ptr byval(%"any[]") align 8 %indirectarg37) #5, !dbg !140
  unreachable, !dbg !140

panic41:                                          ; preds = %checkok38
  store i64 %sub40, ptr %taddr42, align 8
  %52 = insertvalue %any undef, ptr %taddr42, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %27, ptr %taddr43, align 8
  %54 = insertvalue %any undef, ptr %taddr43, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots44, align 16
  %ptradd45 = getelementptr inbounds i8, ptr %varargslots44, i64 16
  store %any %55, ptr %ptradd45, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots44, 0
  %"$$temp46" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp46", ptr %indirectarg47, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 60, ptr @.file.18, i64 9, ptr @.func.29, i64 10, i32 175, ptr byval(%"any[]") align 8 %indirectarg47) #5, !dbg !140
  unreachable, !dbg !140
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.core.String.starts_with(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !143 {
entry:
  %string = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  store ptr %0, ptr %string, align 8
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %string, !147, !DIExpression(), !148)
  store ptr %2, ptr %needle, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %needle, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %needle, !149, !DIExpression(), !150)
  %ptradd2 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !151
  %4 = load i64, ptr %ptradd2, align 8, !dbg !151
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !152
  %5 = load i64, ptr %ptradd3, align 8, !dbg !152
  %gt = icmp ugt i64 %4, %5, !dbg !151
  br i1 %gt, label %if.then, label %if.exit, !dbg !151

if.then:                                          ; preds = %entry
  ret i8 0, !dbg !153

if.exit:                                          ; preds = %entry
  %ptradd4 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !154
  %6 = load i64, ptr %ptradd4, align 8, !dbg !154
  %i2nb = icmp eq i64 %6, 0, !dbg !154
  br i1 %i2nb, label %if.then5, label %if.exit6, !dbg !154

if.then5:                                         ; preds = %if.exit
  ret i8 1, !dbg !155

if.exit6:                                         ; preds = %if.exit
  %7 = load %"char[]", ptr %string, align 8, !dbg !156
  %8 = extractvalue %"char[]" %7, 0, !dbg !156
  %9 = extractvalue %"char[]" %7, 1, !dbg !157
  %gt7 = icmp ugt i64 0, %9, !dbg !157
  %10 = call i1 @llvm.expect.i1(i1 %gt7, i1 false), !dbg !157
  br i1 %10, label %panic, label %checkok, !dbg !157

checkok:                                          ; preds = %if.exit6
  %ptradd10 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !158
  %11 = load i64, ptr %ptradd10, align 8, !dbg !158
  %add = add i64 0, %11, !dbg !158
  %lt = icmp ult i64 %9, %add, !dbg !158
  %sub = sub i64 %add, 1, !dbg !158
  %12 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !158
  br i1 %12, label %panic11, label %checkok18, !dbg !158

checkok18:                                        ; preds = %checkok
  %size = sub i64 %add, 0, !dbg !156
  %13 = insertvalue %"char[]" undef, ptr %8, 0, !dbg !156
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !156
  %15 = load %"char[]", ptr %needle, align 8, !dbg !159
  %16 = extractvalue %"char[]" %14, 1, !dbg !156
  %17 = extractvalue %"char[]" %15, 1, !dbg !156
  %18 = extractvalue %"char[]" %14, 0, !dbg !156
  %19 = extractvalue %"char[]" %15, 0, !dbg !156
  %eq = icmp eq i64 %16, %17, !dbg !156
  br i1 %eq, label %slice_cmp_values, label %slice_cmp_exit, !dbg !156

slice_cmp_values:                                 ; preds = %checkok18
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %20 = load i64, ptr %cmp.idx, align 8
  %lt19 = icmp slt i64 %20, %16
  br i1 %lt19, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd20 = getelementptr inbounds i8, ptr %18, i64 %20
  %ptradd21 = getelementptr inbounds i8, ptr %19, i64 %20
  %21 = load i8, ptr %ptradd20, align 1
  %22 = load i8, ptr %ptradd21, align 1
  %eq22 = icmp eq i8 %21, %22
  %23 = add i64 %20, 1
  store i64 %23, ptr %cmp.idx, align 8
  br i1 %eq22, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %checkok18
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %checkok18 ], [ false, %slice_loop_comparison ]
  %24 = zext i1 %slice_cmp_phi to i8
  ret i8 %24

panic:                                            ; preds = %if.exit6
  store i64 %9, ptr %taddr, align 8
  %25 = insertvalue %any undef, ptr %taddr, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr8, align 8
  %27 = insertvalue %any undef, ptr %taddr8, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %26, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %28, ptr %ptradd9, align 16
  %29 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %29, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 61, ptr @.file.18, i64 9, ptr @.func.30, i64 11, i32 190, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !156
  unreachable, !dbg !156

panic11:                                          ; preds = %checkok
  store i64 %sub, ptr %taddr12, align 8
  %30 = insertvalue %any undef, ptr %taddr12, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr13, align 8
  %32 = insertvalue %any undef, ptr %taddr13, 0
  %33 = insertvalue %any %32, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %31, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %33, ptr %ptradd15, align 16
  %34 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %34, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 60, ptr @.file.18, i64 9, ptr @.func.30, i64 11, i32 190, ptr byval(%"any[]") align 8 %indirectarg17) #5, !dbg !156
  unreachable, !dbg !156
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.core.String.ends_with(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !160 {
entry:
  %string = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  store ptr %0, ptr %string, align 8
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %string, !161, !DIExpression(), !162)
  store ptr %2, ptr %needle, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %needle, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %needle, !163, !DIExpression(), !164)
  %ptradd2 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !165
  %4 = load i64, ptr %ptradd2, align 8, !dbg !165
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !166
  %5 = load i64, ptr %ptradd3, align 8, !dbg !166
  %gt = icmp ugt i64 %4, %5, !dbg !165
  br i1 %gt, label %if.then, label %if.exit, !dbg !165

if.then:                                          ; preds = %entry
  ret i8 0, !dbg !167

if.exit:                                          ; preds = %entry
  %ptradd4 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !168
  %6 = load i64, ptr %ptradd4, align 8, !dbg !168
  %i2nb = icmp eq i64 %6, 0, !dbg !168
  br i1 %i2nb, label %if.then5, label %if.exit6, !dbg !168

if.then5:                                         ; preds = %if.exit
  ret i8 1, !dbg !169

if.exit6:                                         ; preds = %if.exit
  %7 = load %"char[]", ptr %string, align 8, !dbg !170
  %8 = extractvalue %"char[]" %7, 0, !dbg !170
  %ptradd7 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !171
  %9 = load i64, ptr %ptradd7, align 8, !dbg !171
  %10 = extractvalue %"char[]" %7, 1, !dbg !171
  %sub = sub i64 %10, %9, !dbg !171
  %gt8 = icmp ugt i64 %sub, %10, !dbg !171
  %11 = call i1 @llvm.expect.i1(i1 %gt8, i1 false), !dbg !171
  br i1 %11, label %panic, label %checkok, !dbg !171

checkok:                                          ; preds = %if.exit6
  %size = sub i64 %10, %sub, !dbg !170
  %ptradd11 = getelementptr inbounds i8, ptr %8, i64 %sub, !dbg !170
  %12 = insertvalue %"char[]" undef, ptr %ptradd11, 0, !dbg !170
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !170
  %14 = load %"char[]", ptr %needle, align 8, !dbg !172
  %15 = extractvalue %"char[]" %13, 1, !dbg !170
  %16 = extractvalue %"char[]" %14, 1, !dbg !170
  %17 = extractvalue %"char[]" %13, 0, !dbg !170
  %18 = extractvalue %"char[]" %14, 0, !dbg !170
  %eq = icmp eq i64 %15, %16, !dbg !170
  br i1 %eq, label %slice_cmp_values, label %slice_cmp_exit, !dbg !170

slice_cmp_values:                                 ; preds = %checkok
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %19 = load i64, ptr %cmp.idx, align 8
  %lt = icmp slt i64 %19, %15
  br i1 %lt, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd12 = getelementptr inbounds i8, ptr %17, i64 %19
  %ptradd13 = getelementptr inbounds i8, ptr %18, i64 %19
  %20 = load i8, ptr %ptradd12, align 1
  %21 = load i8, ptr %ptradd13, align 1
  %eq14 = icmp eq i8 %20, %21
  %22 = add i64 %19, 1
  store i64 %22, ptr %cmp.idx, align 8
  br i1 %eq14, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %checkok
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %checkok ], [ false, %slice_loop_comparison ]
  %23 = zext i1 %slice_cmp_phi to i8
  ret i8 %23

panic:                                            ; preds = %if.exit6
  store i64 %10, ptr %taddr, align 8
  %24 = insertvalue %any undef, ptr %taddr, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %sub, ptr %taddr9, align 8
  %26 = insertvalue %any undef, ptr %taddr9, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %25, ptr %varargslots, align 16
  %ptradd10 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %27, ptr %ptradd10, align 16
  %28 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %28, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 61, ptr @.file.18, i64 9, ptr @.func.31, i64 9, i32 205, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !170
  unreachable, !dbg !170
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.strip(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !173 {
entry:
  %string = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr11 = alloca %"char[]", align 8
  store ptr %0, ptr %string, align 8
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %string, !174, !DIExpression(), !175)
  store ptr %2, ptr %needle, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %needle, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %needle, !176, !DIExpression(), !177)
  %ptradd2 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !178
  %4 = load i64, ptr %ptradd2, align 8, !dbg !178
  %i2nb = icmp eq i64 %4, 0, !dbg !178
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !178

or.rhs:                                           ; preds = %entry
  %lo = load ptr, ptr %string, align 8, !dbg !179
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !179
  %hi = load i64, ptr %ptradd3, align 8, !dbg !179
  %lo4 = load ptr, ptr %needle, align 8, !dbg !179
  %ptradd5 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !179
  %hi6 = load i64, ptr %ptradd5, align 8, !dbg !179
  %5 = call i8 @std.core.String.starts_with(ptr %lo, i64 %hi, ptr %lo4, i64 %hi6), !dbg !180
  %6 = trunc i8 %5 to i1, !dbg !180
  %not = xor i1 %6, true, !dbg !180
  br label %or.phi, !dbg !180

or.phi:                                           ; preds = %or.rhs, %entry
  %val = phi i1 [ true, %entry ], [ %not, %or.rhs ], !dbg !180
  br i1 %val, label %if.then, label %if.exit, !dbg !180

if.then:                                          ; preds = %or.phi
  %7 = load { ptr, i64 }, ptr %string, align 8, !dbg !181
  ret { ptr, i64 } %7, !dbg !181

if.exit:                                          ; preds = %or.phi
  %8 = load %"char[]", ptr %string, align 8, !dbg !182
  %9 = extractvalue %"char[]" %8, 0, !dbg !182
  %ptradd7 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !183
  %10 = load i64, ptr %ptradd7, align 8, !dbg !183
  %11 = extractvalue %"char[]" %8, 1, !dbg !183
  %gt = icmp ugt i64 %10, %11, !dbg !183
  %12 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !183
  br i1 %12, label %panic, label %checkok, !dbg !183

checkok:                                          ; preds = %if.exit
  %size = sub i64 %11, %10, !dbg !182
  %ptradd10 = getelementptr inbounds i8, ptr %9, i64 %10, !dbg !182
  %13 = insertvalue %"char[]" undef, ptr %ptradd10, 0, !dbg !182
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !182
  store %"char[]" %14, ptr %taddr11, align 8
  %15 = load { ptr, i64 }, ptr %taddr11, align 8
  ret { ptr, i64 } %15

panic:                                            ; preds = %if.exit
  store i64 %11, ptr %taddr, align 8
  %16 = insertvalue %any undef, ptr %taddr, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr8, align 8
  %18 = insertvalue %any undef, ptr %taddr8, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %17, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd9, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 61, ptr @.file.18, i64 9, ptr @.func.32, i64 5, i32 219, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !182
  unreachable, !dbg !182
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.strip_end(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !184 {
entry:
  %string = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr13 = alloca i64, align 8
  %taddr14 = alloca i64, align 8
  %varargslots15 = alloca [2 x %any], align 16
  %indirectarg18 = alloca %"any[]", align 8
  %taddr20 = alloca %"char[]", align 8
  store ptr %0, ptr %string, align 8
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %string, !185, !DIExpression(), !186)
  store ptr %2, ptr %needle, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %needle, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %needle, !187, !DIExpression(), !188)
  %ptradd2 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !189
  %4 = load i64, ptr %ptradd2, align 8, !dbg !189
  %i2nb = icmp eq i64 %4, 0, !dbg !189
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !189

or.rhs:                                           ; preds = %entry
  %lo = load ptr, ptr %string, align 8, !dbg !190
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !190
  %hi = load i64, ptr %ptradd3, align 8, !dbg !190
  %lo4 = load ptr, ptr %needle, align 8, !dbg !190
  %ptradd5 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !190
  %hi6 = load i64, ptr %ptradd5, align 8, !dbg !190
  %5 = call i8 @std.core.String.ends_with(ptr %lo, i64 %hi, ptr %lo4, i64 %hi6), !dbg !191
  %6 = trunc i8 %5 to i1, !dbg !191
  %not = xor i1 %6, true, !dbg !191
  br label %or.phi, !dbg !191

or.phi:                                           ; preds = %or.rhs, %entry
  %val = phi i1 [ true, %entry ], [ %not, %or.rhs ], !dbg !191
  br i1 %val, label %if.then, label %if.exit, !dbg !191

if.then:                                          ; preds = %or.phi
  %7 = load { ptr, i64 }, ptr %string, align 8, !dbg !192
  ret { ptr, i64 } %7, !dbg !192

if.exit:                                          ; preds = %or.phi
  %8 = load %"char[]", ptr %string, align 8, !dbg !193
  %9 = extractvalue %"char[]" %8, 0, !dbg !193
  %10 = extractvalue %"char[]" %8, 1, !dbg !194
  %gt = icmp ugt i64 0, %10, !dbg !194
  %11 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !194
  br i1 %11, label %panic, label %checkok, !dbg !194

checkok:                                          ; preds = %if.exit
  %ptradd9 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !195
  %12 = load i64, ptr %ptradd9, align 8, !dbg !195
  %ptradd10 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !196
  %13 = load i64, ptr %ptradd10, align 8, !dbg !196
  %sub = sub i64 %12, %13, !dbg !195
  %add = add i64 0, %sub, !dbg !195
  %lt = icmp ult i64 %10, %add, !dbg !195
  %sub11 = sub i64 %add, 1, !dbg !195
  %14 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !195
  br i1 %14, label %panic12, label %checkok19, !dbg !195

checkok19:                                        ; preds = %checkok
  %size = sub i64 %add, 0, !dbg !193
  %15 = insertvalue %"char[]" undef, ptr %9, 0, !dbg !193
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !193
  store %"char[]" %16, ptr %taddr20, align 8
  %17 = load { ptr, i64 }, ptr %taddr20, align 8
  ret { ptr, i64 } %17

panic:                                            ; preds = %if.exit
  store i64 %10, ptr %taddr, align 8
  %18 = insertvalue %any undef, ptr %taddr, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %20 = insertvalue %any undef, ptr %taddr7, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %19, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %21, ptr %ptradd8, align 16
  %22 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %22, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 61, ptr @.file.18, i64 9, ptr @.func.33, i64 9, i32 234, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !193
  unreachable, !dbg !193

panic12:                                          ; preds = %checkok
  store i64 %sub11, ptr %taddr13, align 8
  %23 = insertvalue %any undef, ptr %taddr13, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr14, align 8
  %25 = insertvalue %any undef, ptr %taddr14, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %24, ptr %varargslots15, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots15, i64 16
  store %any %26, ptr %ptradd16, align 16
  %27 = insertvalue %"any[]" undef, ptr %varargslots15, 0
  %"$$temp17" = insertvalue %"any[]" %27, i64 2, 1
  store %"any[]" %"$$temp17", ptr %indirectarg18, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 60, ptr @.file.18, i64 9, ptr @.func.33, i64 9, i32 234, ptr byval(%"any[]") align 8 %indirectarg18) #5, !dbg !193
  unreachable, !dbg !193
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.split(ptr %0, i64 %1, ptr %2, i64 %3, i64 %4, ptr byval(%any) align 8 %5, i8 zeroext %6) #0 comdat !dbg !197 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %max = alloca i64, align 8
  %skip_empty = alloca i8, align 1
  %capacity = alloca i64, align 8
  %i = alloca i64, align 8
  %holder = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %elements = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator3 = alloca %any, align 8
  %elements4 = alloca i64, align 8
  %allocator5 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %no_more = alloca i8, align 1
  %index = alloca i64, align 8
  %index.f = alloca i64, align 8
  %retparam9 = alloca i64, align 8
  %res = alloca %"char[]", align 8
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %varargslots20 = alloca [2 x %any], align 16
  %indirectarg23 = alloca %"any[]", align 8
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %varargslots42 = alloca [2 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %allocator57 = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %new_size = alloca i64, align 8
  %error_var59 = alloca i64, align 8
  %allocator60 = alloca %any, align 8
  %ptr61 = alloca ptr, align 8
  %new_size62 = alloca i64, align 8
  %blockret63 = alloca ptr, align 8
  %allocator66 = alloca %any, align 8
  %ptr67 = alloca ptr, align 8
  %.inlinecache72 = alloca ptr, align 8
  %.cachedtype73 = alloca ptr, align 8
  %.inlinecache87 = alloca ptr, align 8
  %.cachedtype88 = alloca ptr, align 8
  %retparam97 = alloca ptr, align 8
  %.inlinecache103 = alloca ptr, align 8
  %.cachedtype104 = alloca ptr, align 8
  %retparam113 = alloca ptr, align 8
  %varargslots119 = alloca [1 x %any], align 16
  %indirectarg121 = alloca %"any[]", align 8
  %taddr130 = alloca %"char[][]", align 8
  store ptr null, ptr %.cachedtype104, align 8
  store ptr null, ptr %.cachedtype88, align 8
  store ptr null, ptr %.cachedtype73, align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !211, !DIExpression(), !212)
  store ptr %2, ptr %needle, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %needle, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %needle, !213, !DIExpression(), !214)
  store i64 %4, ptr %max, align 8
    #dbg_declare(ptr %max, !215, !DIExpression(), !216)
    #dbg_declare(ptr %5, !217, !DIExpression(), !218)
  store i8 %6, ptr %skip_empty, align 1
    #dbg_declare(ptr %skip_empty, !219, !DIExpression(), !220)
  %ptradd2 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !221
  %7 = load i64, ptr %ptradd2, align 8, !dbg !221
  %lt = icmp ult i64 0, %7, !dbg !221
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !221

assert_fail:                                      ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !221
  call void %8(ptr @.panic_msg.34, i64 83, ptr @.file.18, i64 9, ptr @.func.35, i64 5, i32 246) #5, !dbg !221
  unreachable, !dbg !221

assert_ok:                                        ; preds = %entry
    #dbg_declare(ptr %capacity, !223, !DIExpression(), !224)
  store i64 16, ptr %capacity, align 8, !dbg !225
    #dbg_declare(ptr %i, !226, !DIExpression(), !227)
  store i64 0, ptr %i, align 8, !dbg !228
    #dbg_declare(ptr %holder, !229, !DIExpression(), !230)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %5, i32 16, i1 false)
  %9 = load i64, ptr %capacity, align 8
  store i64 %9, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %10 = load i64, ptr %elements, align 8
  store i64 %10, ptr %elements4, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator5, ptr align 8 %allocator3, i32 16, i1 false)
  %11 = load i64, ptr %elements4, align 8, !dbg !231
  %mul = mul i64 16, %11, !dbg !237
  store i64 %mul, ptr %size, align 8
  %12 = load i64, ptr %size, align 8, !dbg !238
  %i2nb = icmp eq i64 %12, 0, !dbg !238
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !238

if.then:                                          ; preds = %assert_ok
  store ptr null, ptr %blockret, align 8, !dbg !241
  br label %expr_block.exit, !dbg !241

if.exit:                                          ; preds = %assert_ok
  %ptradd6 = getelementptr inbounds i8, ptr %allocator5, i64 8, !dbg !242
  %13 = load i64, ptr %ptradd6, align 8, !dbg !242
  %14 = inttoptr i64 %13 to ptr, !dbg !242
  %type = load ptr, ptr %.cachedtype, align 8
  %15 = icmp eq ptr %14, %type
  br i1 %15, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd7 = getelementptr inbounds i8, ptr %14, i64 16
  %16 = load ptr, ptr %ptradd7, align 8
  %17 = call ptr @.dyn_search(ptr %16, ptr @"$sel.acquire")
  store ptr %17, ptr %.inlinecache, align 8
  store ptr %14, ptr %.cachedtype, align 8
  br label %18

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %18

18:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %17, %cache_miss ]
  %19 = icmp eq ptr %fn_phi, null
  br i1 %19, label %missing_function, label %match

missing_function:                                 ; preds = %18
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !244
  call void %20(ptr @.panic_msg, i64 44, ptr @.file, i64 16, ptr @.func.35, i64 5, i32 68) #5, !dbg !244
  unreachable, !dbg !244

match:                                            ; preds = %18
  %21 = load ptr, ptr %allocator5, align 8
  %22 = load i64, ptr %size, align 8
  %23 = call i64 %fn_phi(ptr %retparam, ptr %21, i64 %22, i32 0, i64 0), !dbg !244
  %not_err = icmp eq i64 %23, 0, !dbg !244
  %24 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !244
  br i1 %24, label %after_check, label %assign_optional, !dbg !244

assign_optional:                                  ; preds = %match
  store i64 %23, ptr %error_var, align 8, !dbg !244
  br label %panic_block, !dbg !244

after_check:                                      ; preds = %match
  %25 = load ptr, ptr %retparam, align 8, !dbg !244
  store ptr %25, ptr %blockret, align 8, !dbg !244
  br label %expr_block.exit, !dbg !244

expr_block.exit:                                  ; preds = %after_check, %if.then
  %26 = load ptr, ptr %blockret, align 8, !dbg !244
  store ptr %26, ptr %taddr, align 8
  %27 = load ptr, ptr %taddr, align 8
  %28 = load i64, ptr %elements4, align 8, !dbg !245
  %add = add i64 0, %28, !dbg !245
  %size8 = sub i64 %add, 0, !dbg !245
  %29 = insertvalue %"char[][]" undef, ptr %27, 0, !dbg !245
  %30 = insertvalue %"char[][]" %29, i64 %size8, 1, !dbg !245
  br label %noerr_block, !dbg !245

panic_block:                                      ; preds = %assign_optional
  %31 = insertvalue %any undef, ptr %error_var, 0, !dbg !245
  %32 = insertvalue %any %31, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !245
  store %any %32, ptr %varargslots, align 16
  %33 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %33, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 36, ptr @.file, i64 16, ptr @.func.35, i64 5, i32 269, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !234
  unreachable, !dbg !234

noerr_block:                                      ; preds = %expr_block.exit
  %34 = extractvalue %"char[][]" %30, 0, !dbg !234
  store ptr %34, ptr %holder, align 8, !dbg !234
    #dbg_declare(ptr %no_more, !246, !DIExpression(), !247)
  store i8 0, ptr %no_more, align 1, !dbg !248
  br label %loop.cond, !dbg !249

loop.cond:                                        ; preds = %if.exit123, %if.then52, %noerr_block
  %35 = load i8, ptr %no_more, align 1, !dbg !250
  %36 = trunc i8 %35 to i1, !dbg !250
  %not = xor i1 %36, true, !dbg !250
  br i1 %not, label %loop.body, label %loop.exit, !dbg !250

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %index, !252, !DIExpression(), !254)
  %37 = load i64, ptr %i, align 8, !dbg !255
  %38 = load i64, ptr %max, align 8, !dbg !256
  %sub = sub i64 %38, 1, !dbg !256
  %eq = icmp eq i64 %sub, %37, !dbg !255
  %check = icmp sge i64 %sub, 0, !dbg !255
  %siui-eq = and i1 %check, %eq, !dbg !255
  br i1 %siui-eq, label %cond.lhs, label %cond.rhs, !dbg !255

cond.lhs:                                         ; preds = %loop.body
  store i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), ptr %index.f, align 8, !dbg !257
  br label %after_assign, !dbg !257

cond.rhs:                                         ; preds = %loop.body
  %lo = load ptr, ptr %s, align 8
  %ptradd10 = getelementptr inbounds i8, ptr %s, i64 8
  %hi = load i64, ptr %ptradd10, align 8
  %lo11 = load ptr, ptr %needle, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %needle, i64 8
  %hi13 = load i64, ptr %ptradd12, align 8
  %39 = call i64 @std.core.String.index_of(ptr %retparam9, ptr %lo, i64 %hi, ptr %lo11, i64 %hi13), !dbg !258
  %not_err14 = icmp eq i64 %39, 0, !dbg !258
  %40 = call i1 @llvm.expect.i1(i1 %not_err14, i1 true), !dbg !258
  br i1 %40, label %after_check16, label %assign_optional15, !dbg !258

assign_optional15:                                ; preds = %cond.rhs
  store i64 %39, ptr %index.f, align 8, !dbg !258
  br label %after_assign, !dbg !258

after_check16:                                    ; preds = %cond.rhs
  %41 = load i64, ptr %retparam9, align 8, !dbg !258
  br label %cond.phi, !dbg !258

cond.phi:                                         ; preds = %after_check16
  store i64 %41, ptr %index, align 8, !dbg !258
  store i64 0, ptr %index.f, align 8, !dbg !258
  br label %after_assign, !dbg !258

after_assign:                                     ; preds = %cond.phi, %assign_optional15, %cond.lhs
    #dbg_declare(ptr %res, !259, !DIExpression(), !260)
  %load.err = load i64, ptr %index.f, align 8, !dbg !261
  %result = icmp eq i64 %load.err, 0, !dbg !261
  br i1 %result, label %if.then17, label %if.else, !dbg !261

if.then17:                                        ; preds = %after_assign
  %42 = load %"char[]", ptr %s, align 8, !dbg !262
  %43 = extractvalue %"char[]" %42, 0, !dbg !262
  %44 = extractvalue %"char[]" %42, 1, !dbg !264
  %gt = icmp ugt i64 0, %44, !dbg !264
  %45 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !264
  br i1 %45, label %panic, label %checkok, !dbg !264

checkok:                                          ; preds = %if.then17
  %46 = load i64, ptr %index, align 8, !dbg !265
  %add24 = add i64 0, %46, !dbg !265
  %lt25 = icmp ult i64 %44, %add24, !dbg !265
  %sub26 = sub i64 %add24, 1, !dbg !265
  %47 = call i1 @llvm.expect.i1(i1 %lt25, i1 false), !dbg !265
  br i1 %47, label %panic27, label %checkok34, !dbg !265

checkok34:                                        ; preds = %checkok
  %size35 = sub i64 %add24, 0, !dbg !262
  %48 = insertvalue %"char[]" undef, ptr %43, 0, !dbg !262
  %49 = insertvalue %"char[]" %48, i64 %size35, 1, !dbg !262
  store %"char[]" %49, ptr %res, align 8, !dbg !262
  %50 = load %"char[]", ptr %s, align 8, !dbg !266
  %51 = extractvalue %"char[]" %50, 0, !dbg !266
  %52 = load i64, ptr %index, align 8, !dbg !267
  %ptradd36 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !268
  %53 = load i64, ptr %ptradd36, align 8, !dbg !268
  %add37 = add i64 %52, %53, !dbg !267
  %54 = extractvalue %"char[]" %50, 1, !dbg !267
  %gt38 = icmp ugt i64 %add37, %54, !dbg !267
  %55 = call i1 @llvm.expect.i1(i1 %gt38, i1 false), !dbg !267
  br i1 %55, label %panic39, label %checkok46, !dbg !267

checkok46:                                        ; preds = %checkok34
  %size47 = sub i64 %54, %add37, !dbg !266
  %ptradd48 = getelementptr inbounds i8, ptr %51, i64 %add37, !dbg !266
  %56 = insertvalue %"char[]" undef, ptr %ptradd48, 0, !dbg !266
  %57 = insertvalue %"char[]" %56, i64 %size47, 1, !dbg !266
  store %"char[]" %57, ptr %s, align 8, !dbg !266
  br label %if.exit49, !dbg !266

if.else:                                          ; preds = %after_assign
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %res, ptr align 8 %s, i32 16, i1 false), !dbg !269
  store i8 1, ptr %no_more, align 1, !dbg !271
  br label %if.exit49, !dbg !271

if.exit49:                                        ; preds = %if.else, %checkok46
  %ptradd50 = getelementptr inbounds i8, ptr %res, i64 8, !dbg !272
  %58 = load i64, ptr %ptradd50, align 8, !dbg !272
  %i2nb51 = icmp eq i64 %58, 0, !dbg !272
  br i1 %i2nb51, label %and.rhs, label %and.phi, !dbg !272

and.rhs:                                          ; preds = %if.exit49
  %59 = load i8, ptr %skip_empty, align 1, !dbg !273
  %60 = trunc i8 %59 to i1, !dbg !273
  br label %and.phi, !dbg !273

and.phi:                                          ; preds = %and.rhs, %if.exit49
  %val = phi i1 [ false, %if.exit49 ], [ %60, %and.rhs ], !dbg !273
  br i1 %val, label %if.then52, label %if.exit53, !dbg !273

if.then52:                                        ; preds = %and.phi
  br label %loop.cond, !dbg !274

if.exit53:                                        ; preds = %and.phi
  %61 = load i64, ptr %i, align 8, !dbg !276
  %62 = load i64, ptr %capacity, align 8, !dbg !277
  %eq54 = icmp eq i64 %61, %62, !dbg !276
  br i1 %eq54, label %if.then55, label %if.exit123, !dbg !276

if.then55:                                        ; preds = %if.exit53
  %63 = load i64, ptr %capacity, align 8, !dbg !278
  %mul56 = mul i64 %63, 2, !dbg !278
  store i64 %mul56, ptr %capacity, align 8, !dbg !278
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator57, ptr align 8 %5, i32 16, i1 false)
  %64 = load ptr, ptr %holder, align 8, !dbg !280
  store ptr %64, ptr %ptr, align 8
  %65 = load i64, ptr %capacity, align 8, !dbg !281
  %mul58 = mul i64 16, %65, !dbg !282
  store i64 %mul58, ptr %new_size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator60, ptr align 8 %allocator57, i32 16, i1 false)
  %66 = load ptr, ptr %ptr, align 8
  store ptr %66, ptr %ptr61, align 8
  %67 = load i64, ptr %new_size, align 8
  store i64 %67, ptr %new_size62, align 8
  %68 = load i64, ptr %new_size62, align 8, !dbg !283
  %i2nb64 = icmp eq i64 %68, 0, !dbg !283
  br i1 %i2nb64, label %if.then65, label %if.exit83, !dbg !283

if.then65:                                        ; preds = %if.then55
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator66, ptr align 8 %allocator60, i32 16, i1 false)
  %69 = load ptr, ptr %ptr61, align 8
  store ptr %69, ptr %ptr67, align 8
  %70 = load ptr, ptr %ptr67, align 8, !dbg !288
  %i2nb68 = icmp eq ptr %70, null, !dbg !288
  br i1 %i2nb68, label %if.then69, label %if.exit70, !dbg !288

if.then69:                                        ; preds = %if.then65
  br label %expr_block.exit82, !dbg !292

if.exit70:                                        ; preds = %if.then65
  %ptradd71 = getelementptr inbounds i8, ptr %allocator66, i64 8, !dbg !293
  %71 = load i64, ptr %ptradd71, align 8, !dbg !293
  %72 = inttoptr i64 %71 to ptr, !dbg !293
  %type74 = load ptr, ptr %.cachedtype73, align 8
  %73 = icmp eq ptr %72, %type74
  br i1 %73, label %cache_hit77, label %cache_miss75

cache_miss75:                                     ; preds = %if.exit70
  %ptradd76 = getelementptr inbounds i8, ptr %72, i64 16
  %74 = load ptr, ptr %ptradd76, align 8
  %75 = call ptr @.dyn_search(ptr %74, ptr @"$sel.release")
  store ptr %75, ptr %.inlinecache72, align 8
  store ptr %72, ptr %.cachedtype73, align 8
  br label %76

cache_hit77:                                      ; preds = %if.exit70
  %cache_hit_fn78 = load ptr, ptr %.inlinecache72, align 8
  br label %76

76:                                               ; preds = %cache_hit77, %cache_miss75
  %fn_phi79 = phi ptr [ %cache_hit_fn78, %cache_hit77 ], [ %75, %cache_miss75 ]
  %77 = icmp eq ptr %fn_phi79, null
  br i1 %77, label %missing_function80, label %match81

missing_function80:                               ; preds = %76
  %78 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !294
  call void %78(ptr @.panic_msg.26, i64 44, ptr @.file, i64 16, ptr @.func.35, i64 5, i32 105) #5, !dbg !294
  unreachable, !dbg !294

match81:                                          ; preds = %76
  %79 = load ptr, ptr %allocator66, align 8, !dbg !294
  %80 = load ptr, ptr %ptr67, align 8, !dbg !294
  call void %fn_phi79(ptr %79, ptr %80, i8 zeroext 0), !dbg !294
  br label %expr_block.exit82, !dbg !294

expr_block.exit82:                                ; preds = %match81, %if.then69
  store ptr null, ptr %blockret63, align 8, !dbg !295
  br label %expr_block.exit117, !dbg !295

if.exit83:                                        ; preds = %if.then55
  %81 = load ptr, ptr %ptr61, align 8, !dbg !296
  %i2nb84 = icmp eq ptr %81, null, !dbg !296
  br i1 %i2nb84, label %if.then85, label %if.exit101, !dbg !296

if.then85:                                        ; preds = %if.exit83
  %ptradd86 = getelementptr inbounds i8, ptr %allocator60, i64 8, !dbg !297
  %82 = load i64, ptr %ptradd86, align 8, !dbg !297
  %83 = inttoptr i64 %82 to ptr, !dbg !297
  %type89 = load ptr, ptr %.cachedtype88, align 8
  %84 = icmp eq ptr %83, %type89
  br i1 %84, label %cache_hit92, label %cache_miss90

cache_miss90:                                     ; preds = %if.then85
  %ptradd91 = getelementptr inbounds i8, ptr %83, i64 16
  %85 = load ptr, ptr %ptradd91, align 8
  %86 = call ptr @.dyn_search(ptr %85, ptr @"$sel.acquire")
  store ptr %86, ptr %.inlinecache87, align 8
  store ptr %83, ptr %.cachedtype88, align 8
  br label %87

cache_hit92:                                      ; preds = %if.then85
  %cache_hit_fn93 = load ptr, ptr %.inlinecache87, align 8
  br label %87

87:                                               ; preds = %cache_hit92, %cache_miss90
  %fn_phi94 = phi ptr [ %cache_hit_fn93, %cache_hit92 ], [ %86, %cache_miss90 ]
  %88 = icmp eq ptr %fn_phi94, null
  br i1 %88, label %missing_function95, label %match96

missing_function95:                               ; preds = %87
  %89 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !299
  call void %89(ptr @.panic_msg, i64 44, ptr @.file, i64 16, ptr @.func.35, i64 5, i32 95) #5, !dbg !299
  unreachable, !dbg !299

match96:                                          ; preds = %87
  %90 = load ptr, ptr %allocator60, align 8
  %91 = load i64, ptr %new_size62, align 8
  %92 = call i64 %fn_phi94(ptr %retparam97, ptr %90, i64 %91, i32 0, i64 0), !dbg !299
  %not_err98 = icmp eq i64 %92, 0, !dbg !299
  %93 = call i1 @llvm.expect.i1(i1 %not_err98, i1 true), !dbg !299
  br i1 %93, label %after_check100, label %assign_optional99, !dbg !299

assign_optional99:                                ; preds = %match96
  store i64 %92, ptr %error_var59, align 8, !dbg !299
  br label %panic_block118, !dbg !299

after_check100:                                   ; preds = %match96
  %94 = load ptr, ptr %retparam97, align 8, !dbg !299
  store ptr %94, ptr %blockret63, align 8, !dbg !299
  br label %expr_block.exit117, !dbg !299

if.exit101:                                       ; preds = %if.exit83
  %ptradd102 = getelementptr inbounds i8, ptr %allocator60, i64 8, !dbg !300
  %95 = load i64, ptr %ptradd102, align 8, !dbg !300
  %96 = inttoptr i64 %95 to ptr, !dbg !300
  %type105 = load ptr, ptr %.cachedtype104, align 8
  %97 = icmp eq ptr %96, %type105
  br i1 %97, label %cache_hit108, label %cache_miss106

cache_miss106:                                    ; preds = %if.exit101
  %ptradd107 = getelementptr inbounds i8, ptr %96, i64 16
  %98 = load ptr, ptr %ptradd107, align 8
  %99 = call ptr @.dyn_search(ptr %98, ptr @"$sel.resize")
  store ptr %99, ptr %.inlinecache103, align 8
  store ptr %96, ptr %.cachedtype104, align 8
  br label %100

cache_hit108:                                     ; preds = %if.exit101
  %cache_hit_fn109 = load ptr, ptr %.inlinecache103, align 8
  br label %100

100:                                              ; preds = %cache_hit108, %cache_miss106
  %fn_phi110 = phi ptr [ %cache_hit_fn109, %cache_hit108 ], [ %99, %cache_miss106 ]
  %101 = icmp eq ptr %fn_phi110, null
  br i1 %101, label %missing_function111, label %match112

missing_function111:                              ; preds = %100
  %102 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !302
  call void %102(ptr @.panic_msg.37, i64 43, ptr @.file, i64 16, ptr @.func.35, i64 5, i32 96) #5, !dbg !302
  unreachable, !dbg !302

match112:                                         ; preds = %100
  %103 = load ptr, ptr %allocator60, align 8
  %104 = load ptr, ptr %ptr61, align 8
  %105 = load i64, ptr %new_size62, align 8
  %106 = call i64 %fn_phi110(ptr %retparam113, ptr %103, ptr %104, i64 %105, i64 0), !dbg !302
  %not_err114 = icmp eq i64 %106, 0, !dbg !302
  %107 = call i1 @llvm.expect.i1(i1 %not_err114, i1 true), !dbg !302
  br i1 %107, label %after_check116, label %assign_optional115, !dbg !302

assign_optional115:                               ; preds = %match112
  store i64 %106, ptr %error_var59, align 8, !dbg !302
  br label %panic_block118, !dbg !302

after_check116:                                   ; preds = %match112
  %108 = load ptr, ptr %retparam113, align 8, !dbg !302
  store ptr %108, ptr %blockret63, align 8, !dbg !302
  br label %expr_block.exit117, !dbg !302

expr_block.exit117:                               ; preds = %after_check116, %after_check100, %expr_block.exit82
  br label %noerr_block122, !dbg !302

panic_block118:                                   ; preds = %assign_optional115, %assign_optional99
  %109 = insertvalue %any undef, ptr %error_var59, 0, !dbg !302
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !302
  store %any %110, ptr %varargslots119, align 16
  %111 = insertvalue %"any[]" undef, ptr %varargslots119, 0
  %"$$temp120" = insertvalue %"any[]" %111, i64 1, 1
  store %"any[]" %"$$temp120", ptr %indirectarg121, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 36, ptr @.file, i64 16, ptr @.func.35, i64 5, i32 85, ptr byval(%"any[]") align 8 %indirectarg121) #5, !dbg !285
  unreachable, !dbg !285

noerr_block122:                                   ; preds = %expr_block.exit117
  %112 = load ptr, ptr %blockret63, align 8, !dbg !285
  store ptr %112, ptr %holder, align 8, !dbg !285
  br label %if.exit123, !dbg !285

if.exit123:                                       ; preds = %noerr_block122, %if.exit53
  %113 = load ptr, ptr %holder, align 8, !dbg !303
  %114 = load i64, ptr %i, align 8, !dbg !304
  %add124 = add i64 %114, 1, !dbg !304
  store i64 %add124, ptr %i, align 8, !dbg !304
  %ptroffset = getelementptr inbounds [16 x i8], ptr %113, i64 %114, !dbg !304
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptroffset, ptr align 8 %res, i32 16, i1 false), !dbg !305
  br label %loop.cond, !dbg !305

loop.exit:                                        ; preds = %loop.cond
  %115 = load ptr, ptr %holder, align 8, !dbg !306
  %116 = load i64, ptr %i, align 8, !dbg !307
  %add125 = add i64 0, %116, !dbg !307
  %size126 = sub i64 %add125, 0, !dbg !307
  %117 = insertvalue %"char[][]" undef, ptr %115, 0, !dbg !307
  %118 = insertvalue %"char[][]" %117, i64 %size126, 1, !dbg !307
  %119 = extractvalue %"char[][]" %118, 1, !dbg !308
  %lt127 = icmp ult i64 0, %119, !dbg !308
  br i1 %lt127, label %assert_ok129, label %assert_fail128, !dbg !308

assert_fail128:                                   ; preds = %loop.exit
  %120 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !308
  call void %120(ptr @.panic_msg.38, i64 34, ptr @.file.18, i64 9, ptr @.func.35, i64 5, i32 247) #5, !dbg !308
  unreachable, !dbg !308

assert_ok129:                                     ; preds = %loop.exit
  store %"char[][]" %118, ptr %taddr130, align 8
  %121 = load { ptr, i64 }, ptr %taddr130, align 8
  ret { ptr, i64 } %121

panic:                                            ; preds = %if.then17
  store i64 %44, ptr %taddr18, align 8
  %122 = insertvalue %any undef, ptr %taddr18, 0
  %123 = insertvalue %any %122, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr19, align 8
  %124 = insertvalue %any undef, ptr %taddr19, 0
  %125 = insertvalue %any %124, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %123, ptr %varargslots20, align 16
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots20, i64 16
  store %any %125, ptr %ptradd21, align 16
  %126 = insertvalue %"any[]" undef, ptr %varargslots20, 0
  %"$$temp22" = insertvalue %"any[]" %126, i64 2, 1
  store %"any[]" %"$$temp22", ptr %indirectarg23, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 61, ptr @.file.18, i64 9, ptr @.func.35, i64 5, i32 261, ptr byval(%"any[]") align 8 %indirectarg23) #5, !dbg !262
  unreachable, !dbg !262

panic27:                                          ; preds = %checkok
  store i64 %sub26, ptr %taddr28, align 8
  %127 = insertvalue %any undef, ptr %taddr28, 0
  %128 = insertvalue %any %127, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %44, ptr %taddr29, align 8
  %129 = insertvalue %any undef, ptr %taddr29, 0
  %130 = insertvalue %any %129, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %128, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %130, ptr %ptradd31, align 16
  %131 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %131, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 60, ptr @.file.18, i64 9, ptr @.func.35, i64 5, i32 261, ptr byval(%"any[]") align 8 %indirectarg33) #5, !dbg !262
  unreachable, !dbg !262

panic39:                                          ; preds = %checkok34
  store i64 %54, ptr %taddr40, align 8
  %132 = insertvalue %any undef, ptr %taddr40, 0
  %133 = insertvalue %any %132, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add37, ptr %taddr41, align 8
  %134 = insertvalue %any undef, ptr %taddr41, 0
  %135 = insertvalue %any %134, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %133, ptr %varargslots42, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %135, ptr %ptradd43, align 16
  %136 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %136, i64 2, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 61, ptr @.file.18, i64 9, ptr @.func.35, i64 5, i32 262, ptr byval(%"any[]") align 8 %indirectarg45) #5, !dbg !266
  unreachable, !dbg !266
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.new_split(ptr %0, i64 %1, ptr %2, i64 %3, i64 %4, i8 zeroext %5) #0 comdat !dbg !309 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %max = alloca i64, align 8
  %skip_empty = alloca i8, align 1
  %result = alloca %"char[][]", align 8
  %taddr = alloca %"char[][]", align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !312, !DIExpression(), !313)
  store ptr %2, ptr %needle, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %needle, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %needle, !314, !DIExpression(), !315)
  store i64 %4, ptr %max, align 8
    #dbg_declare(ptr %max, !316, !DIExpression(), !317)
  store i8 %5, ptr %skip_empty, align 1
    #dbg_declare(ptr %skip_empty, !318, !DIExpression(), !319)
  %ptradd2 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !320
  %6 = load i64, ptr %ptradd2, align 8, !dbg !320
  %lt = icmp ult i64 0, %6, !dbg !320
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !320

assert_fail:                                      ; preds = %entry
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !320
  call void %7(ptr @.panic_msg.34, i64 83, ptr @.file.18, i64 9, ptr @.func.39, i64 9, i32 292) #5, !dbg !320
  unreachable, !dbg !320

assert_ok:                                        ; preds = %entry
  %lo = load ptr, ptr %s, align 8, !dbg !322
  %ptradd3 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !322
  %hi = load i64, ptr %ptradd3, align 8, !dbg !322
  %lo4 = load ptr, ptr %needle, align 8, !dbg !322
  %ptradd5 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !322
  %hi6 = load i64, ptr %ptradd5, align 8, !dbg !322
  %8 = load i64, ptr %max, align 8, !dbg !322
  %9 = load i8, ptr %skip_empty, align 1, !dbg !322
  %10 = call { ptr, i64 } @std.core.String.split(ptr %lo, i64 %hi, ptr %lo4, i64 %hi6, i64 %8, ptr byval(%any) align 8 @std.core.mem.allocator.thread_allocator, i8 zeroext %9) #6, !dbg !323
  store { ptr, i64 } %10, ptr %result, align 8
  %11 = load %"char[][]", ptr %result, align 8
  %ptradd7 = getelementptr inbounds i8, ptr %result, i64 8, !dbg !324
  %12 = load i64, ptr %ptradd7, align 8, !dbg !324
  %lt8 = icmp ult i64 0, %12, !dbg !324
  br i1 %lt8, label %assert_ok10, label %assert_fail9, !dbg !324

assert_fail9:                                     ; preds = %assert_ok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !324
  call void %13(ptr @.panic_msg.38, i64 34, ptr @.file.18, i64 9, ptr @.func.39, i64 9, i32 293) #5, !dbg !324
  unreachable, !dbg !324

assert_ok10:                                      ; preds = %assert_ok
  store %"char[][]" %11, ptr %taddr, align 8
  %14 = load { ptr, i64 }, ptr %taddr, align 8
  ret { ptr, i64 } %14
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.tsplit(ptr %0, i64 %1, ptr %2, i64 %3, i64 %4, i8 zeroext %5) #0 comdat !dbg !325 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %max = alloca i64, align 8
  %skip_empty = alloca i8, align 1
  %indirectarg = alloca %any, align 8
  %result = alloca %"char[][]", align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !326, !DIExpression(), !327)
  store ptr %2, ptr %needle, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %needle, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %needle, !328, !DIExpression(), !329)
  store i64 %4, ptr %max, align 8
    #dbg_declare(ptr %max, !330, !DIExpression(), !331)
  store i8 %5, ptr %skip_empty, align 1
    #dbg_declare(ptr %skip_empty, !332, !DIExpression(), !333)
  %6 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !334
  %i2nb = icmp eq ptr %6, null, !dbg !334
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !334

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !337
  br label %if.exit, !dbg !337

if.exit:                                          ; preds = %if.then, %entry
  %7 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !339
  %8 = insertvalue %any undef, ptr %7, 0, !dbg !336
  %9 = insertvalue %any %8, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !336
  %lo = load ptr, ptr %s, align 8, !dbg !340
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !340
  %hi = load i64, ptr %ptradd2, align 8, !dbg !340
  %lo3 = load ptr, ptr %needle, align 8, !dbg !340
  %ptradd4 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !340
  %hi5 = load i64, ptr %ptradd4, align 8, !dbg !340
  %10 = load i64, ptr %max, align 8, !dbg !340
  store %any %9, ptr %indirectarg, align 8
  %11 = load i8, ptr %skip_empty, align 1
  %12 = call { ptr, i64 } @std.core.String.split(ptr %lo, i64 %hi, ptr %lo3, i64 %hi5, i64 %10, ptr byval(%any) align 8 %indirectarg, i8 zeroext %11) #6, !dbg !341
  store { ptr, i64 } %12, ptr %result, align 8
  %13 = load { ptr, i64 }, ptr %result, align 8
  ret { ptr, i64 } %13
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.split_to_buffer(ptr %0, ptr %1, i64 %2, ptr %3, i64 %4, ptr byval(%"char[][]") align 8 %5, i64 %6, i8 zeroext %7) #0 comdat !dbg !342 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %max = alloca i64, align 8
  %skip_empty = alloca i8, align 1
  %max_capacity = alloca i64, align 8
  %i = alloca i64, align 8
  %no_more = alloca i8, align 1
  %index = alloca i64, align 8
  %index.f = alloca i64, align 8
  %retparam = alloca i64, align 8
  %res = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr13 = alloca i64, align 8
  %taddr14 = alloca i64, align 8
  %varargslots15 = alloca [2 x %any], align 16
  %indirectarg18 = alloca %"any[]", align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %varargslots26 = alloca [2 x %any], align 16
  %indirectarg29 = alloca %"any[]", align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca i64, align 8
  %varargslots44 = alloca [2 x %any], align 16
  %indirectarg47 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %taddr51 = alloca i64, align 8
  %taddr52 = alloca i64, align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr62 = alloca i64, align 8
  %taddr63 = alloca i64, align 8
  %varargslots64 = alloca [2 x %any], align 16
  %indirectarg67 = alloca %"any[]", align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !348, !DIExpression(), !349)
  store ptr %3, ptr %needle, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %needle, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %needle, !350, !DIExpression(), !351)
    #dbg_declare(ptr %5, !352, !DIExpression(), !353)
  store i64 %6, ptr %max, align 8
    #dbg_declare(ptr %max, !354, !DIExpression(), !355)
  store i8 %7, ptr %skip_empty, align 1
    #dbg_declare(ptr %skip_empty, !356, !DIExpression(), !357)
  %ptradd2 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !358
  %8 = load i64, ptr %ptradd2, align 8, !dbg !358
  %lt = icmp ult i64 0, %8, !dbg !358
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !358

assert_fail:                                      ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !358
  call void %9(ptr @.panic_msg.34, i64 83, ptr @.file.18, i64 9, ptr @.func.40, i64 15, i32 317) #5, !dbg !358
  unreachable, !dbg !358

assert_ok:                                        ; preds = %entry
    #dbg_declare(ptr %max_capacity, !360, !DIExpression(), !361)
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !362
  %10 = load i64, ptr %ptradd3, align 8, !dbg !362
  store i64 %10, ptr %max_capacity, align 8, !dbg !362
    #dbg_declare(ptr %i, !363, !DIExpression(), !364)
  store i64 0, ptr %i, align 8, !dbg !365
    #dbg_declare(ptr %no_more, !366, !DIExpression(), !367)
  store i8 0, ptr %no_more, align 1, !dbg !368
  br label %loop.cond, !dbg !369

loop.cond:                                        ; preds = %checkok48, %if.then34, %assert_ok
  %11 = load i8, ptr %no_more, align 1, !dbg !370
  %12 = trunc i8 %11 to i1, !dbg !370
  %not = xor i1 %12, true, !dbg !370
  br i1 %not, label %loop.body, label %loop.exit, !dbg !370

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %index, !372, !DIExpression(), !374)
  %13 = load i64, ptr %i, align 8, !dbg !375
  %14 = load i64, ptr %max, align 8, !dbg !376
  %sub = sub i64 %14, 1, !dbg !376
  %eq = icmp eq i64 %sub, %13, !dbg !375
  %check = icmp sge i64 %sub, 0, !dbg !375
  %siui-eq = and i1 %check, %eq, !dbg !375
  br i1 %siui-eq, label %cond.lhs, label %cond.rhs, !dbg !375

cond.lhs:                                         ; preds = %loop.body
  store i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), ptr %index.f, align 8, !dbg !377
  br label %after_assign, !dbg !377

cond.rhs:                                         ; preds = %loop.body
  %lo = load ptr, ptr %s, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %s, i64 8
  %hi = load i64, ptr %ptradd4, align 8
  %lo5 = load ptr, ptr %needle, align 8
  %ptradd6 = getelementptr inbounds i8, ptr %needle, i64 8
  %hi7 = load i64, ptr %ptradd6, align 8
  %15 = call i64 @std.core.String.index_of(ptr %retparam, ptr %lo, i64 %hi, ptr %lo5, i64 %hi7), !dbg !378
  %not_err = icmp eq i64 %15, 0, !dbg !378
  %16 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !378
  br i1 %16, label %after_check, label %assign_optional, !dbg !378

assign_optional:                                  ; preds = %cond.rhs
  store i64 %15, ptr %index.f, align 8, !dbg !378
  br label %after_assign, !dbg !378

after_check:                                      ; preds = %cond.rhs
  %17 = load i64, ptr %retparam, align 8, !dbg !378
  br label %cond.phi, !dbg !378

cond.phi:                                         ; preds = %after_check
  store i64 %17, ptr %index, align 8, !dbg !378
  store i64 0, ptr %index.f, align 8, !dbg !378
  br label %after_assign, !dbg !378

after_assign:                                     ; preds = %cond.phi, %assign_optional, %cond.lhs
    #dbg_declare(ptr %res, !379, !DIExpression(), !380)
  %load.err = load i64, ptr %index.f, align 8, !dbg !381
  %result = icmp eq i64 %load.err, 0, !dbg !381
  br i1 %result, label %if.then, label %if.else, !dbg !381

if.then:                                          ; preds = %after_assign
  %18 = load %"char[]", ptr %s, align 8, !dbg !382
  %19 = extractvalue %"char[]" %18, 0, !dbg !382
  %20 = extractvalue %"char[]" %18, 1, !dbg !384
  %gt = icmp ugt i64 0, %20, !dbg !384
  %21 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !384
  br i1 %21, label %panic, label %checkok, !dbg !384

checkok:                                          ; preds = %if.then
  %22 = load i64, ptr %index, align 8, !dbg !385
  %add = add i64 0, %22, !dbg !385
  %lt10 = icmp ult i64 %20, %add, !dbg !385
  %sub11 = sub i64 %add, 1, !dbg !385
  %23 = call i1 @llvm.expect.i1(i1 %lt10, i1 false), !dbg !385
  br i1 %23, label %panic12, label %checkok19, !dbg !385

checkok19:                                        ; preds = %checkok
  %size = sub i64 %add, 0, !dbg !382
  %24 = insertvalue %"char[]" undef, ptr %19, 0, !dbg !382
  %25 = insertvalue %"char[]" %24, i64 %size, 1, !dbg !382
  store %"char[]" %25, ptr %res, align 8, !dbg !382
  %26 = load %"char[]", ptr %s, align 8, !dbg !386
  %27 = extractvalue %"char[]" %26, 0, !dbg !386
  %28 = load i64, ptr %index, align 8, !dbg !387
  %ptradd20 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !388
  %29 = load i64, ptr %ptradd20, align 8, !dbg !388
  %add21 = add i64 %28, %29, !dbg !387
  %30 = extractvalue %"char[]" %26, 1, !dbg !387
  %gt22 = icmp ugt i64 %add21, %30, !dbg !387
  %31 = call i1 @llvm.expect.i1(i1 %gt22, i1 false), !dbg !387
  br i1 %31, label %panic23, label %checkok30, !dbg !387

checkok30:                                        ; preds = %checkok19
  %size31 = sub i64 %30, %add21, !dbg !386
  %ptradd32 = getelementptr inbounds i8, ptr %27, i64 %add21, !dbg !386
  %32 = insertvalue %"char[]" undef, ptr %ptradd32, 0, !dbg !386
  %33 = insertvalue %"char[]" %32, i64 %size31, 1, !dbg !386
  store %"char[]" %33, ptr %s, align 8, !dbg !386
  br label %if.exit, !dbg !386

if.else:                                          ; preds = %after_assign
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %res, ptr align 8 %s, i32 16, i1 false), !dbg !389
  store i8 1, ptr %no_more, align 1, !dbg !391
  br label %if.exit, !dbg !391

if.exit:                                          ; preds = %if.else, %checkok30
  %ptradd33 = getelementptr inbounds i8, ptr %res, i64 8, !dbg !392
  %34 = load i64, ptr %ptradd33, align 8, !dbg !392
  %i2nb = icmp eq i64 %34, 0, !dbg !392
  br i1 %i2nb, label %and.rhs, label %and.phi, !dbg !392

and.rhs:                                          ; preds = %if.exit
  %35 = load i8, ptr %skip_empty, align 1, !dbg !393
  %36 = trunc i8 %35 to i1, !dbg !393
  br label %and.phi, !dbg !393

and.phi:                                          ; preds = %and.rhs, %if.exit
  %val = phi i1 [ false, %if.exit ], [ %36, %and.rhs ], !dbg !393
  br i1 %val, label %if.then34, label %if.exit35, !dbg !393

if.then34:                                        ; preds = %and.phi
  br label %loop.cond, !dbg !394

if.exit35:                                        ; preds = %and.phi
  %37 = load i64, ptr %i, align 8, !dbg !396
  %38 = load i64, ptr %max_capacity, align 8, !dbg !397
  %eq36 = icmp eq i64 %37, %38, !dbg !396
  br i1 %eq36, label %if.then37, label %if.exit38, !dbg !396

if.then37:                                        ; preds = %if.exit35
  ret i64 ptrtoint (ptr @"std.core.string.SplitResult$BUFFER_EXCEEDED" to i64), !dbg !398

if.exit38:                                        ; preds = %if.exit35
  %ptradd39 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !400
  %39 = load i64, ptr %ptradd39, align 8, !dbg !400
  %40 = load ptr, ptr %5, align 8, !dbg !400
  %41 = load i64, ptr %i, align 8, !dbg !401
  %add40 = add i64 %41, 1, !dbg !401
  store i64 %add40, ptr %i, align 8, !dbg !401
  %ge = icmp uge i64 %41, %39, !dbg !401
  %42 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !401
  br i1 %42, label %panic41, label %checkok48, !dbg !401

checkok48:                                        ; preds = %if.exit38
  %ptroffset = getelementptr inbounds [16 x i8], ptr %40, i64 %41, !dbg !401
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptroffset, ptr align 8 %res, i32 16, i1 false), !dbg !402
  br label %loop.cond, !dbg !402

loop.exit:                                        ; preds = %loop.cond
  %43 = load %"char[][]", ptr %5, align 8, !dbg !403
  %44 = extractvalue %"char[][]" %43, 0, !dbg !403
  %45 = extractvalue %"char[][]" %43, 1, !dbg !404
  %gt49 = icmp ugt i64 0, %45, !dbg !404
  %46 = call i1 @llvm.expect.i1(i1 %gt49, i1 false), !dbg !404
  br i1 %46, label %panic50, label %checkok57, !dbg !404

checkok57:                                        ; preds = %loop.exit
  %47 = load i64, ptr %i, align 8, !dbg !405
  %add58 = add i64 0, %47, !dbg !405
  %lt59 = icmp ult i64 %45, %add58, !dbg !405
  %sub60 = sub i64 %add58, 1, !dbg !405
  %48 = call i1 @llvm.expect.i1(i1 %lt59, i1 false), !dbg !405
  br i1 %48, label %panic61, label %checkok68, !dbg !405

checkok68:                                        ; preds = %checkok57
  %size69 = sub i64 %add58, 0, !dbg !403
  %49 = insertvalue %"char[][]" undef, ptr %44, 0, !dbg !403
  %50 = insertvalue %"char[][]" %49, i64 %size69, 1, !dbg !403
  %51 = extractvalue %"char[][]" %50, 1, !dbg !406
  %lt70 = icmp ult i64 0, %51, !dbg !406
  br i1 %lt70, label %assert_ok72, label %assert_fail71, !dbg !406

assert_fail71:                                    ; preds = %checkok68
  %52 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !406
  call void %52(ptr @.panic_msg.38, i64 34, ptr @.file.18, i64 9, ptr @.func.40, i64 15, i32 318) #5, !dbg !406
  unreachable, !dbg !406

assert_ok72:                                      ; preds = %checkok68
  store %"char[][]" %50, ptr %0, align 8, !dbg !406
  ret i64 0, !dbg !406

panic:                                            ; preds = %if.then
  store i64 %20, ptr %taddr, align 8
  %53 = insertvalue %any undef, ptr %taddr, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr8, align 8
  %55 = insertvalue %any undef, ptr %taddr8, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %54, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %56, ptr %ptradd9, align 16
  %57 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %57, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 61, ptr @.file.18, i64 9, ptr @.func.40, i64 15, i32 332, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !382
  unreachable, !dbg !382

panic12:                                          ; preds = %checkok
  store i64 %sub11, ptr %taddr13, align 8
  %58 = insertvalue %any undef, ptr %taddr13, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %20, ptr %taddr14, align 8
  %60 = insertvalue %any undef, ptr %taddr14, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %59, ptr %varargslots15, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots15, i64 16
  store %any %61, ptr %ptradd16, align 16
  %62 = insertvalue %"any[]" undef, ptr %varargslots15, 0
  %"$$temp17" = insertvalue %"any[]" %62, i64 2, 1
  store %"any[]" %"$$temp17", ptr %indirectarg18, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 60, ptr @.file.18, i64 9, ptr @.func.40, i64 15, i32 332, ptr byval(%"any[]") align 8 %indirectarg18) #5, !dbg !382
  unreachable, !dbg !382

panic23:                                          ; preds = %checkok19
  store i64 %30, ptr %taddr24, align 8
  %63 = insertvalue %any undef, ptr %taddr24, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add21, ptr %taddr25, align 8
  %65 = insertvalue %any undef, ptr %taddr25, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %64, ptr %varargslots26, align 16
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %66, ptr %ptradd27, align 16
  %67 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %67, i64 2, 1
  store %"any[]" %"$$temp28", ptr %indirectarg29, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 61, ptr @.file.18, i64 9, ptr @.func.40, i64 15, i32 333, ptr byval(%"any[]") align 8 %indirectarg29) #5, !dbg !386
  unreachable, !dbg !386

panic41:                                          ; preds = %if.exit38
  store i64 %39, ptr %taddr42, align 8
  %68 = insertvalue %any undef, ptr %taddr42, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr43, align 8
  %70 = insertvalue %any undef, ptr %taddr43, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %69, ptr %varargslots44, align 16
  %ptradd45 = getelementptr inbounds i8, ptr %varargslots44, i64 16
  store %any %71, ptr %ptradd45, align 16
  %72 = insertvalue %"any[]" undef, ptr %varargslots44, 0
  %"$$temp46" = insertvalue %"any[]" %72, i64 2, 1
  store %"any[]" %"$$temp46", ptr %indirectarg47, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.40, i64 15, i32 348, ptr byval(%"any[]") align 8 %indirectarg47) #5, !dbg !401
  unreachable, !dbg !401

panic50:                                          ; preds = %loop.exit
  store i64 %45, ptr %taddr51, align 8
  %73 = insertvalue %any undef, ptr %taddr51, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr52, align 8
  %75 = insertvalue %any undef, ptr %taddr52, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %74, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %76, ptr %ptradd54, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 61, ptr @.file.18, i64 9, ptr @.func.40, i64 15, i32 350, ptr byval(%"any[]") align 8 %indirectarg56) #5, !dbg !403
  unreachable, !dbg !403

panic61:                                          ; preds = %checkok57
  store i64 %sub60, ptr %taddr62, align 8
  %78 = insertvalue %any undef, ptr %taddr62, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %45, ptr %taddr63, align 8
  %80 = insertvalue %any undef, ptr %taddr63, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %79, ptr %varargslots64, align 16
  %ptradd65 = getelementptr inbounds i8, ptr %varargslots64, i64 16
  store %any %81, ptr %ptradd65, align 16
  %82 = insertvalue %"any[]" undef, ptr %varargslots64, 0
  %"$$temp66" = insertvalue %"any[]" %82, i64 2, 1
  store %"any[]" %"$$temp66", ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 60, ptr @.file.18, i64 9, ptr @.func.40, i64 15, i32 350, ptr byval(%"any[]") align 8 %indirectarg67) #5, !dbg !403
  unreachable, !dbg !403
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.core.String.contains(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !407 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %blockret = alloca i8, align 1
  %temp_err = alloca i64, align 8
  %retparam = alloca i64, align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !408, !DIExpression(), !409)
  store ptr %2, ptr %needle, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %needle, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %needle, !410, !DIExpression(), !411)
  br label %testblock

testblock:                                        ; preds = %entry
  %lo = load ptr, ptr %s, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load ptr, ptr %needle, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %needle, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  %4 = call i64 @std.core.String.index_of(ptr %retparam, ptr %lo, i64 %hi, ptr %lo3, i64 %hi5), !dbg !412
  %not_err = icmp eq i64 %4, 0, !dbg !412
  %5 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !412
  br i1 %5, label %after_check, label %assign_optional, !dbg !412

assign_optional:                                  ; preds = %testblock
  store i64 %4, ptr %temp_err, align 8, !dbg !412
  br label %end_block, !dbg !412

after_check:                                      ; preds = %testblock
  store i64 0, ptr %temp_err, align 8, !dbg !412
  br label %end_block, !dbg !412

end_block:                                        ; preds = %after_check, %assign_optional
  %6 = load i64, ptr %temp_err, align 8, !dbg !412
  %i2b = icmp ne i64 %6, 0, !dbg !412
  br i1 %i2b, label %if.then, label %if.exit, !dbg !412

if.then:                                          ; preds = %end_block
  store i8 0, ptr %blockret, align 1, !dbg !416
  br label %expr_block.exit, !dbg !416

if.exit:                                          ; preds = %end_block
  store i8 1, ptr %blockret, align 1, !dbg !417
  br label %expr_block.exit, !dbg !417

expr_block.exit:                                  ; preds = %if.exit, %if.then
  %7 = load i8, ptr %blockret, align 1, !dbg !417
  ret i8 %7, !dbg !417
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.index_of_char(ptr %0, ptr %1, i64 %2, i8 zeroext %3) #0 comdat !dbg !418 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca i8, align 1
  %.anon = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !422, !DIExpression(), !423)
  store i8 %3, ptr %needle, align 1
    #dbg_declare(ptr %needle, !424, !DIExpression(), !425)
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !426
  %4 = load i64, ptr %ptradd1, align 8, !dbg !426
    #dbg_declare(ptr %.anon, !428, !DIExpression(), !429)
  store i64 0, ptr %.anon, align 8, !dbg !429
  br label %loop.cond, !dbg !429

loop.cond:                                        ; preds = %if.exit, %entry
  %5 = load i64, ptr %.anon, align 8, !dbg !429
  %lt = icmp ult i64 %5, %4, !dbg !429
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !429

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %i, !430, !DIExpression(), !432)
  %6 = load i64, ptr %.anon, align 8, !dbg !432
  store i64 %6, ptr %i, align 8, !dbg !432
    #dbg_declare(ptr %c, !433, !DIExpression(), !434)
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !435
  %7 = load i64, ptr %ptradd2, align 8, !dbg !435
  %8 = load ptr, ptr %s, align 8, !dbg !435
  %9 = load i64, ptr %.anon, align 8, !dbg !432
  %ge = icmp uge i64 %9, %7, !dbg !432
  %10 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !432
  br i1 %10, label %panic, label %checkok, !dbg !432

checkok:                                          ; preds = %loop.body
  %ptradd5 = getelementptr inbounds i8, ptr %8, i64 %9, !dbg !432
  %11 = load i8, ptr %ptradd5, align 1, !dbg !432
  store i8 %11, ptr %c, align 1, !dbg !432
  %12 = load i8, ptr %c, align 1, !dbg !436
  %13 = load i8, ptr %needle, align 1, !dbg !438
  %eq = icmp eq i8 %12, %13, !dbg !436
  br i1 %eq, label %if.then, label %if.exit, !dbg !436

if.then:                                          ; preds = %checkok
  %14 = load i64, ptr %i, align 8, !dbg !439
  %15 = load i64, ptr %i, align 8, !dbg !440
  %ptradd6 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !441
  %16 = load i64, ptr %ptradd6, align 8, !dbg !441
  %lt7 = icmp ult i64 %15, %16, !dbg !440
  br i1 %lt7, label %assert_ok, label %assert_fail, !dbg !440

assert_fail:                                      ; preds = %if.then
  %17 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !440
  call void %17(ptr @.panic_msg.42, i64 34, ptr @.file.18, i64 9, ptr @.func.41, i64 13, i32 372) #5, !dbg !440
  unreachable, !dbg !440

assert_ok:                                        ; preds = %if.then
  store i64 %14, ptr %0, align 8, !dbg !440
  ret i64 0, !dbg !440

if.exit:                                          ; preds = %checkok
  %18 = load i64, ptr %.anon, align 8, !dbg !429
  %addnuw = add nuw i64 %18, 1, !dbg !429
  store i64 %addnuw, ptr %.anon, align 8, !dbg !429
  br label %loop.cond, !dbg !429

loop.exit:                                        ; preds = %loop.cond
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !442

panic:                                            ; preds = %loop.body
  store i64 %7, ptr %taddr, align 8
  %19 = insertvalue %any undef, ptr %taddr, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr3, align 8
  %21 = insertvalue %any undef, ptr %taddr3, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %20, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %22, ptr %ptradd4, align 16
  %23 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %23, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.41, i64 13, i32 378, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !432
  unreachable, !dbg !432
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.index_of_chars(ptr %0, ptr %1, i64 %2, ptr %3, i64 %4) #0 comdat !dbg !443 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %.anon = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.anon8 = alloca i64, align 8
  %j = alloca i64, align 8
  %pin = alloca i8, align 1
  %taddr15 = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %varargslots17 = alloca [2 x %any], align 16
  %indirectarg20 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !446, !DIExpression(), !447)
  store ptr %3, ptr %needle, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %needle, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %needle, !448, !DIExpression(), !449)
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !450
  %5 = load i64, ptr %ptradd2, align 8, !dbg !450
    #dbg_declare(ptr %.anon, !452, !DIExpression(), !453)
  store i64 0, ptr %.anon, align 8, !dbg !453
  br label %loop.cond, !dbg !453

loop.cond:                                        ; preds = %loop.exit, %entry
  %6 = load i64, ptr %.anon, align 8, !dbg !453
  %lt = icmp ult i64 %6, %5, !dbg !453
  br i1 %lt, label %loop.body, label %loop.exit26, !dbg !453

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %i, !454, !DIExpression(), !456)
  %7 = load i64, ptr %.anon, align 8, !dbg !456
  store i64 %7, ptr %i, align 8, !dbg !456
    #dbg_declare(ptr %c, !457, !DIExpression(), !458)
  %ptradd3 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !459
  %8 = load i64, ptr %ptradd3, align 8, !dbg !459
  %9 = load ptr, ptr %s, align 8, !dbg !459
  %10 = load i64, ptr %.anon, align 8, !dbg !456
  %ge = icmp uge i64 %10, %8, !dbg !456
  %11 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !456
  br i1 %11, label %panic, label %checkok, !dbg !456

checkok:                                          ; preds = %loop.body
  %ptradd6 = getelementptr inbounds i8, ptr %9, i64 %10, !dbg !456
  %12 = load i8, ptr %ptradd6, align 1, !dbg !456
  store i8 %12, ptr %c, align 1, !dbg !456
  %ptradd7 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !460
  %13 = load i64, ptr %ptradd7, align 8, !dbg !460
    #dbg_declare(ptr %.anon8, !463, !DIExpression(), !464)
  store i64 0, ptr %.anon8, align 8, !dbg !464
  br label %loop.cond9, !dbg !464

loop.cond9:                                       ; preds = %if.exit, %checkok
  %14 = load i64, ptr %.anon8, align 8, !dbg !464
  %lt10 = icmp ult i64 %14, %13, !dbg !464
  br i1 %lt10, label %loop.body11, label %loop.exit, !dbg !464

loop.body11:                                      ; preds = %loop.cond9
    #dbg_declare(ptr %j, !465, !DIExpression(), !467)
  %15 = load i64, ptr %.anon8, align 8, !dbg !467
  store i64 %15, ptr %j, align 8, !dbg !467
    #dbg_declare(ptr %pin, !468, !DIExpression(), !469)
  %ptradd12 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !470
  %16 = load i64, ptr %ptradd12, align 8, !dbg !470
  %17 = load ptr, ptr %needle, align 8, !dbg !470
  %18 = load i64, ptr %.anon8, align 8, !dbg !467
  %ge13 = icmp uge i64 %18, %16, !dbg !467
  %19 = call i1 @llvm.expect.i1(i1 %ge13, i1 false), !dbg !467
  br i1 %19, label %panic14, label %checkok21, !dbg !467

checkok21:                                        ; preds = %loop.body11
  %ptradd22 = getelementptr inbounds i8, ptr %17, i64 %18, !dbg !467
  %20 = load i8, ptr %ptradd22, align 1, !dbg !467
  store i8 %20, ptr %pin, align 1, !dbg !467
  %21 = load i8, ptr %c, align 1, !dbg !471
  %22 = load i8, ptr %pin, align 1, !dbg !473
  %eq = icmp eq i8 %21, %22, !dbg !471
  br i1 %eq, label %if.then, label %if.exit, !dbg !471

if.then:                                          ; preds = %checkok21
  %23 = load i64, ptr %i, align 8, !dbg !474
  %24 = load i64, ptr %i, align 8, !dbg !475
  %ptradd23 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !476
  %25 = load i64, ptr %ptradd23, align 8, !dbg !476
  %lt24 = icmp ult i64 %24, %25, !dbg !475
  br i1 %lt24, label %assert_ok, label %assert_fail, !dbg !475

assert_fail:                                      ; preds = %if.then
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !475
  call void %26(ptr @.panic_msg.42, i64 34, ptr @.file.18, i64 9, ptr @.func.43, i64 14, i32 391) #5, !dbg !475
  unreachable, !dbg !475

assert_ok:                                        ; preds = %if.then
  store i64 %23, ptr %0, align 8, !dbg !475
  ret i64 0, !dbg !475

if.exit:                                          ; preds = %checkok21
  %27 = load i64, ptr %.anon8, align 8, !dbg !464
  %addnuw = add nuw i64 %27, 1, !dbg !464
  store i64 %addnuw, ptr %.anon8, align 8, !dbg !464
  br label %loop.cond9, !dbg !464

loop.exit:                                        ; preds = %loop.cond9
  %28 = load i64, ptr %.anon, align 8, !dbg !453
  %addnuw25 = add nuw i64 %28, 1, !dbg !453
  store i64 %addnuw25, ptr %.anon, align 8, !dbg !453
  br label %loop.cond, !dbg !453

loop.exit26:                                      ; preds = %loop.cond
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !477

panic:                                            ; preds = %loop.body
  store i64 %8, ptr %taddr, align 8
  %29 = insertvalue %any undef, ptr %taddr, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr4, align 8
  %31 = insertvalue %any undef, ptr %taddr4, 0
  %32 = insertvalue %any %31, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %30, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %32, ptr %ptradd5, align 16
  %33 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %33, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.43, i64 14, i32 397, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !456
  unreachable, !dbg !456

panic14:                                          ; preds = %loop.body11
  store i64 %16, ptr %taddr15, align 8
  %34 = insertvalue %any undef, ptr %taddr15, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %18, ptr %taddr16, align 8
  %36 = insertvalue %any undef, ptr %taddr16, 0
  %37 = insertvalue %any %36, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %35, ptr %varargslots17, align 16
  %ptradd18 = getelementptr inbounds i8, ptr %varargslots17, i64 16
  store %any %37, ptr %ptradd18, align 16
  %38 = insertvalue %"any[]" undef, ptr %varargslots17, 0
  %"$$temp19" = insertvalue %"any[]" %38, i64 2, 1
  store %"any[]" %"$$temp19", ptr %indirectarg20, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.43, i64 14, i32 399, ptr byval(%"any[]") align 8 %indirectarg20) #5, !dbg !467
  unreachable, !dbg !467
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.index_of_char_from(ptr %0, ptr %1, i64 %2, i8 zeroext %3, i64 %4) #0 comdat !dbg !478 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca i8, align 1
  %start_index = alloca i64, align 8
  %len = alloca i64, align 8
  %i = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !481, !DIExpression(), !482)
  store i8 %3, ptr %needle, align 1
    #dbg_declare(ptr %needle, !483, !DIExpression(), !484)
  store i64 %4, ptr %start_index, align 8
    #dbg_declare(ptr %start_index, !485, !DIExpression(), !486)
    #dbg_declare(ptr %len, !487, !DIExpression(), !488)
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !489
  %5 = load i64, ptr %ptradd1, align 8, !dbg !489
  store i64 %5, ptr %len, align 8, !dbg !489
  %6 = load i64, ptr %len, align 8, !dbg !490
  %7 = load i64, ptr %start_index, align 8, !dbg !491
  %le = icmp ule i64 %6, %7, !dbg !490
  br i1 %le, label %if.then, label %if.exit, !dbg !490

if.then:                                          ; preds = %entry
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !492

if.exit:                                          ; preds = %entry
    #dbg_declare(ptr %i, !493, !DIExpression(), !495)
  %8 = load i64, ptr %start_index, align 8, !dbg !496
  store i64 %8, ptr %i, align 8, !dbg !496
  br label %loop.cond, !dbg !496

loop.cond:                                        ; preds = %if.exit9, %if.exit
  %9 = load i64, ptr %i, align 8, !dbg !497
  %10 = load i64, ptr %len, align 8, !dbg !498
  %lt = icmp ult i64 %9, %10, !dbg !497
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !497

loop.body:                                        ; preds = %loop.cond
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !499
  %11 = load i64, ptr %ptradd2, align 8, !dbg !499
  %12 = load ptr, ptr %s, align 8, !dbg !499
  %13 = load i64, ptr %i, align 8, !dbg !501
  %ge = icmp uge i64 %13, %11, !dbg !501
  %14 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !501
  br i1 %14, label %panic, label %checkok, !dbg !501

checkok:                                          ; preds = %loop.body
  %ptradd5 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !501
  %15 = load i8, ptr %ptradd5, align 1, !dbg !501
  %16 = load i8, ptr %needle, align 1, !dbg !502
  %eq = icmp eq i8 %15, %16, !dbg !499
  br i1 %eq, label %if.then6, label %if.exit9, !dbg !499

if.then6:                                         ; preds = %checkok
  %17 = load i64, ptr %i, align 8, !dbg !503
  %18 = load i64, ptr %i, align 8, !dbg !504
  %ptradd7 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !505
  %19 = load i64, ptr %ptradd7, align 8, !dbg !505
  %lt8 = icmp ult i64 %18, %19, !dbg !504
  br i1 %lt8, label %assert_ok, label %assert_fail, !dbg !504

assert_fail:                                      ; preds = %if.then6
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !504
  call void %20(ptr @.panic_msg.42, i64 34, ptr @.file.18, i64 9, ptr @.func.44, i64 18, i32 415) #5, !dbg !504
  unreachable, !dbg !504

assert_ok:                                        ; preds = %if.then6
  store i64 %17, ptr %0, align 8, !dbg !504
  ret i64 0, !dbg !504

if.exit9:                                         ; preds = %checkok
  %21 = load i64, ptr %i, align 8, !dbg !506
  %add = add i64 %21, 1, !dbg !506
  store i64 %add, ptr %i, align 8, !dbg !506
  br label %loop.cond, !dbg !506

loop.exit:                                        ; preds = %loop.cond
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !507

panic:                                            ; preds = %loop.body
  store i64 %11, ptr %taddr, align 8
  %22 = insertvalue %any undef, ptr %taddr, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr3, align 8
  %24 = insertvalue %any undef, ptr %taddr3, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %23, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %25, ptr %ptradd4, align 16
  %26 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %26, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.44, i64 18, i32 425, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !501
  unreachable, !dbg !501
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.rindex_of_char(ptr %0, ptr %1, i64 %2, i8 zeroext %3) #0 comdat !dbg !508 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca i8, align 1
  %.anon = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !509, !DIExpression(), !510)
  store i8 %3, ptr %needle, align 1
    #dbg_declare(ptr %needle, !511, !DIExpression(), !512)
    #dbg_declare(ptr %.anon, !513, !DIExpression(), !515)
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !516
  %4 = load i64, ptr %ptradd1, align 8, !dbg !516
  store i64 %4, ptr %.anon, align 8, !dbg !516
  br label %loop.cond, !dbg !516

loop.cond:                                        ; preds = %if.exit, %entry
  %5 = load i64, ptr %.anon, align 8, !dbg !515
  %gt = icmp ugt i64 %5, 0, !dbg !515
  br i1 %gt, label %loop.body, label %loop.exit, !dbg !515

loop.body:                                        ; preds = %loop.cond
  %6 = load i64, ptr %.anon, align 8, !dbg !515
  %subnuw = sub nuw i64 %6, 1, !dbg !515
  store i64 %subnuw, ptr %.anon, align 8, !dbg !515
    #dbg_declare(ptr %i, !517, !DIExpression(), !519)
  %7 = load i64, ptr %.anon, align 8, !dbg !519
  store i64 %7, ptr %i, align 8, !dbg !519
    #dbg_declare(ptr %c, !520, !DIExpression(), !521)
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !522
  %8 = load i64, ptr %ptradd2, align 8, !dbg !522
  %9 = load ptr, ptr %s, align 8, !dbg !522
  %10 = load i64, ptr %.anon, align 8, !dbg !519
  %ge = icmp uge i64 %10, %8, !dbg !519
  %11 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !519
  br i1 %11, label %panic, label %checkok, !dbg !519

checkok:                                          ; preds = %loop.body
  %ptradd5 = getelementptr inbounds i8, ptr %9, i64 %10, !dbg !519
  %12 = load i8, ptr %ptradd5, align 1, !dbg !519
  store i8 %12, ptr %c, align 1, !dbg !519
  %13 = load i8, ptr %c, align 1, !dbg !523
  %14 = load i8, ptr %needle, align 1, !dbg !525
  %eq = icmp eq i8 %13, %14, !dbg !523
  br i1 %eq, label %if.then, label %if.exit, !dbg !523

if.then:                                          ; preds = %checkok
  %15 = load i64, ptr %i, align 8, !dbg !526
  %16 = load i64, ptr %i, align 8, !dbg !527
  %ptradd6 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !528
  %17 = load i64, ptr %ptradd6, align 8, !dbg !528
  %lt = icmp ult i64 %16, %17, !dbg !527
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !527

assert_fail:                                      ; preds = %if.then
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !527
  call void %18(ptr @.panic_msg.42, i64 34, ptr @.file.18, i64 9, ptr @.func.45, i64 14, i32 436) #5, !dbg !527
  unreachable, !dbg !527

assert_ok:                                        ; preds = %if.then
  store i64 %15, ptr %0, align 8, !dbg !527
  ret i64 0, !dbg !527

if.exit:                                          ; preds = %checkok
  br label %loop.cond, !dbg !527

loop.exit:                                        ; preds = %loop.cond
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !529

panic:                                            ; preds = %loop.body
  store i64 %8, ptr %taddr, align 8
  %19 = insertvalue %any undef, ptr %taddr, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr3, align 8
  %21 = insertvalue %any undef, ptr %taddr3, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %20, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %22, ptr %ptradd4, align 16
  %23 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %23, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.45, i64 14, i32 442, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !519
  unreachable, !dbg !519
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.index_of(ptr %0, ptr %1, i64 %2, ptr %3, i64 %4) #0 comdat !dbg !530 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %needed = alloca i64, align 8
  %first = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %varargslots13 = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %taddr20 = alloca i64, align 8
  %taddr21 = alloca i64, align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  %taddr35 = alloca %"char[]", align 8
  %taddr39 = alloca i64, align 8
  %taddr40 = alloca i64, align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %.anon = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr52 = alloca i64, align 8
  %taddr53 = alloca i64, align 8
  %varargslots54 = alloca [2 x %any], align 16
  %indirectarg57 = alloca %"any[]", align 8
  %taddr62 = alloca i64, align 8
  %taddr63 = alloca i64, align 8
  %varargslots64 = alloca [2 x %any], align 16
  %indirectarg67 = alloca %"any[]", align 8
  %taddr73 = alloca i64, align 8
  %taddr74 = alloca i64, align 8
  %varargslots75 = alloca [2 x %any], align 16
  %indirectarg78 = alloca %"any[]", align 8
  %taddr83 = alloca i64, align 8
  %taddr84 = alloca i64, align 8
  %varargslots85 = alloca [2 x %any], align 16
  %indirectarg88 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !533, !DIExpression(), !534)
  store ptr %3, ptr %needle, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %needle, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %needle, !535, !DIExpression(), !536)
  %ptradd2 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !537
  %5 = load i64, ptr %ptradd2, align 8, !dbg !537
  %lt = icmp ult i64 0, %5, !dbg !537
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !537

assert_fail:                                      ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !537
  call void %6(ptr @.panic_msg.46, i64 71, ptr @.file.18, i64 9, ptr @.func.47, i64 8, i32 456) #5, !dbg !537
  unreachable, !dbg !537

assert_ok:                                        ; preds = %entry
    #dbg_declare(ptr %needed, !539, !DIExpression(), !540)
  %ptradd3 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !541
  %7 = load i64, ptr %ptradd3, align 8, !dbg !541
  store i64 %7, ptr %needed, align 8, !dbg !541
  %8 = load i64, ptr %needed, align 8, !dbg !542
  %lt4 = icmp ult i64 0, %8, !dbg !542
  br i1 %lt4, label %and.rhs, label %and.phi, !dbg !542

and.rhs:                                          ; preds = %assert_ok
  %ptradd5 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !543
  %9 = load i64, ptr %ptradd5, align 8, !dbg !543
  %10 = load i64, ptr %needed, align 8, !dbg !544
  %ge = icmp uge i64 %9, %10, !dbg !543
  br label %and.phi, !dbg !543

and.phi:                                          ; preds = %and.rhs, %assert_ok
  %val = phi i1 [ false, %assert_ok ], [ %ge, %and.rhs ], !dbg !543
  br i1 %val, label %if.then, label %if.exit104, !dbg !543

if.then:                                          ; preds = %and.phi
    #dbg_declare(ptr %first, !545, !DIExpression(), !547)
  %ptradd6 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !548
  %11 = load i64, ptr %ptradd6, align 8, !dbg !548
  %12 = load ptr, ptr %needle, align 8, !dbg !548
  %ge7 = icmp sge i64 0, %11, !dbg !549
  %13 = call i1 @llvm.expect.i1(i1 %ge7, i1 false), !dbg !549
  br i1 %13, label %panic, label %checkok, !dbg !549

checkok:                                          ; preds = %if.then
  %14 = load i8, ptr %12, align 1, !dbg !549
  store i8 %14, ptr %first, align 1, !dbg !549
  %15 = load %"char[]", ptr %s, align 8, !dbg !550
  %16 = extractvalue %"char[]" %15, 0, !dbg !550
  %17 = extractvalue %"char[]" %15, 1, !dbg !552
  %gt = icmp ugt i64 0, %17, !dbg !552
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !552
  br i1 %18, label %panic10, label %checkok17, !dbg !552

checkok17:                                        ; preds = %checkok
  %19 = load i64, ptr %needed, align 8, !dbg !553
  %sub = sub i64 %17, %19, !dbg !553
  %gt18 = icmp ugt i64 0, %sub, !dbg !553
  %20 = call i1 @llvm.expect.i1(i1 %gt18, i1 false), !dbg !553
  br i1 %20, label %panic19, label %checkok26, !dbg !553

checkok26:                                        ; preds = %checkok17
  %le = icmp ule i64 %17, %sub, !dbg !550
  %21 = call i1 @llvm.expect.i1(i1 %le, i1 false), !dbg !550
  br i1 %21, label %panic27, label %checkok34, !dbg !550

checkok34:                                        ; preds = %checkok26
  %22 = add i64 %sub, 1, !dbg !550
  %size = sub i64 %22, 0, !dbg !550
  %23 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !550
  %24 = insertvalue %"char[]" %23, i64 %size, 1, !dbg !550
  store %"char[]" %24, ptr %taddr35, align 8
  %checknull = icmp eq ptr %taddr35, null, !dbg !550
  %25 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !550
  br i1 %25, label %panic36, label %checkok37, !dbg !550

checkok37:                                        ; preds = %checkok34
  %26 = ptrtoint ptr %taddr35 to i64, !dbg !550
  %27 = urem i64 %26, 8, !dbg !550
  %28 = icmp ne i64 %27, 0, !dbg !550
  %29 = call i1 @llvm.expect.i1(i1 %28, i1 false), !dbg !550
  br i1 %29, label %panic38, label %checkok45, !dbg !550

checkok45:                                        ; preds = %checkok37
  %ptradd46 = getelementptr inbounds i8, ptr %taddr35, i64 8, !dbg !550
  %30 = load i64, ptr %ptradd46, align 8, !dbg !550
    #dbg_declare(ptr %.anon, !554, !DIExpression(), !555)
  store i64 0, ptr %.anon, align 8, !dbg !555
  br label %loop.cond, !dbg !555

loop.cond:                                        ; preds = %if.exit, %checkok45
  %31 = load i64, ptr %.anon, align 8, !dbg !555
  %lt47 = icmp ult i64 %31, %30, !dbg !555
  br i1 %lt47, label %loop.body, label %loop.exit, !dbg !555

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %i, !556, !DIExpression(), !558)
  %32 = load i64, ptr %.anon, align 8, !dbg !558
  store i64 %32, ptr %i, align 8, !dbg !558
    #dbg_declare(ptr %c, !559, !DIExpression(), !560)
  %checknull48 = icmp eq ptr %taddr35, null, !dbg !561
  %33 = call i1 @llvm.expect.i1(i1 %checknull48, i1 false), !dbg !561
  br i1 %33, label %panic49, label %checkok50, !dbg !561

checkok50:                                        ; preds = %loop.body
  %34 = ptrtoint ptr %taddr35 to i64, !dbg !561
  %35 = urem i64 %34, 8, !dbg !561
  %36 = icmp ne i64 %35, 0, !dbg !561
  %37 = call i1 @llvm.expect.i1(i1 %36, i1 false), !dbg !561
  br i1 %37, label %panic51, label %checkok58, !dbg !561

checkok58:                                        ; preds = %checkok50
  %ptradd59 = getelementptr inbounds i8, ptr %taddr35, i64 8, !dbg !561
  %38 = load i64, ptr %ptradd59, align 8, !dbg !561
  %39 = load ptr, ptr %taddr35, align 8, !dbg !561
  %40 = load i64, ptr %.anon, align 8, !dbg !558
  %ge60 = icmp uge i64 %40, %38, !dbg !558
  %41 = call i1 @llvm.expect.i1(i1 %ge60, i1 false), !dbg !558
  br i1 %41, label %panic61, label %checkok68, !dbg !558

checkok68:                                        ; preds = %checkok58
  %ptradd69 = getelementptr inbounds i8, ptr %39, i64 %40, !dbg !558
  %42 = load i8, ptr %ptradd69, align 1, !dbg !558
  store i8 %42, ptr %c, align 1, !dbg !558
  %43 = load i8, ptr %c, align 1, !dbg !562
  %44 = load i8, ptr %first, align 1, !dbg !564
  %eq = icmp eq i8 %43, %44, !dbg !562
  br i1 %eq, label %and.rhs70, label %and.phi97, !dbg !562

and.rhs70:                                        ; preds = %checkok68
  %45 = load %"char[]", ptr %s, align 8, !dbg !565
  %46 = extractvalue %"char[]" %45, 0, !dbg !565
  %47 = load i64, ptr %i, align 8, !dbg !566
  %48 = extractvalue %"char[]" %45, 1, !dbg !566
  %gt71 = icmp ugt i64 %47, %48, !dbg !566
  %49 = call i1 @llvm.expect.i1(i1 %gt71, i1 false), !dbg !566
  br i1 %49, label %panic72, label %checkok79, !dbg !566

checkok79:                                        ; preds = %and.rhs70
  %50 = load i64, ptr %needed, align 8, !dbg !567
  %add = add i64 %47, %50, !dbg !567
  %lt80 = icmp ult i64 %48, %add, !dbg !567
  %sub81 = sub i64 %add, 1, !dbg !567
  %51 = call i1 @llvm.expect.i1(i1 %lt80, i1 false), !dbg !567
  br i1 %51, label %panic82, label %checkok89, !dbg !567

checkok89:                                        ; preds = %checkok79
  %size90 = sub i64 %add, %47, !dbg !565
  %ptradd91 = getelementptr inbounds i8, ptr %46, i64 %47, !dbg !565
  %52 = insertvalue %"char[]" undef, ptr %ptradd91, 0, !dbg !565
  %53 = insertvalue %"char[]" %52, i64 %size90, 1, !dbg !565
  %54 = load %"char[]", ptr %needle, align 8, !dbg !568
  %55 = extractvalue %"char[]" %53, 1, !dbg !565
  %56 = extractvalue %"char[]" %54, 1, !dbg !565
  %57 = extractvalue %"char[]" %53, 0, !dbg !565
  %58 = extractvalue %"char[]" %54, 0, !dbg !565
  %eq92 = icmp eq i64 %55, %56, !dbg !565
  br i1 %eq92, label %slice_cmp_values, label %slice_cmp_exit, !dbg !565

slice_cmp_values:                                 ; preds = %checkok89
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %59 = load i64, ptr %cmp.idx, align 8
  %lt93 = icmp slt i64 %59, %55
  br i1 %lt93, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd94 = getelementptr inbounds i8, ptr %57, i64 %59
  %ptradd95 = getelementptr inbounds i8, ptr %58, i64 %59
  %60 = load i8, ptr %ptradd94, align 1
  %61 = load i8, ptr %ptradd95, align 1
  %eq96 = icmp eq i8 %60, %61
  %62 = add i64 %59, 1
  store i64 %62, ptr %cmp.idx, align 8
  br i1 %eq96, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %checkok89
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %checkok89 ], [ false, %slice_loop_comparison ]
  br label %and.phi97

and.phi97:                                        ; preds = %slice_cmp_exit, %checkok68
  %val98 = phi i1 [ false, %checkok68 ], [ %slice_cmp_phi, %slice_cmp_exit ]
  br i1 %val98, label %if.then99, label %if.exit

if.then99:                                        ; preds = %and.phi97
  %63 = load i64, ptr %i, align 8, !dbg !569
  %64 = load i64, ptr %i, align 8, !dbg !570
  %ptradd100 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !571
  %65 = load i64, ptr %ptradd100, align 8, !dbg !571
  %lt101 = icmp ult i64 %64, %65, !dbg !570
  br i1 %lt101, label %assert_ok103, label %assert_fail102, !dbg !570

assert_fail102:                                   ; preds = %if.then99
  %66 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !570
  call void %66(ptr @.panic_msg.42, i64 34, ptr @.file.18, i64 9, ptr @.func.47, i64 8, i32 455) #5, !dbg !570
  unreachable, !dbg !570

assert_ok103:                                     ; preds = %if.then99
  store i64 %63, ptr %0, align 8, !dbg !570
  ret i64 0, !dbg !570

if.exit:                                          ; preds = %and.phi97
  %67 = load i64, ptr %.anon, align 8, !dbg !555
  %addnuw = add nuw i64 %67, 1, !dbg !555
  store i64 %addnuw, ptr %.anon, align 8, !dbg !555
  br label %loop.cond, !dbg !555

loop.exit:                                        ; preds = %loop.cond
  br label %if.exit104, !dbg !555

if.exit104:                                       ; preds = %loop.exit, %and.phi
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !572

panic:                                            ; preds = %if.then
  store i64 %11, ptr %taddr, align 8
  %68 = insertvalue %any undef, ptr %taddr, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr8, align 8
  %70 = insertvalue %any undef, ptr %taddr8, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %69, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %71, ptr %ptradd9, align 16
  %72 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %72, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.47, i64 8, i32 465, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !549
  unreachable, !dbg !549

panic10:                                          ; preds = %checkok
  store i64 %17, ptr %taddr11, align 8
  %73 = insertvalue %any undef, ptr %taddr11, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr12, align 8
  %75 = insertvalue %any undef, ptr %taddr12, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %74, ptr %varargslots13, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots13, i64 16
  store %any %76, ptr %ptradd14, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots13, 0
  %"$$temp15" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp15", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 61, ptr @.file.18, i64 9, ptr @.func.47, i64 8, i32 466, ptr byval(%"any[]") align 8 %indirectarg16) #5, !dbg !550
  unreachable, !dbg !550

panic19:                                          ; preds = %checkok17
  store i64 0, ptr %taddr20, align 8
  %78 = insertvalue %any undef, ptr %taddr20, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %sub, ptr %taddr21, align 8
  %80 = insertvalue %any undef, ptr %taddr21, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %79, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %81, ptr %ptradd23, align 16
  %82 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %82, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.48, i64 44, ptr @.file.18, i64 9, ptr @.func.47, i64 8, i32 466, ptr byval(%"any[]") align 8 %indirectarg25) #5, !dbg !550
  unreachable, !dbg !550

panic27:                                          ; preds = %checkok26
  store i64 %sub, ptr %taddr28, align 8
  %83 = insertvalue %any undef, ptr %taddr28, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %17, ptr %taddr29, align 8
  %85 = insertvalue %any undef, ptr %taddr29, 0
  %86 = insertvalue %any %85, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %84, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %86, ptr %ptradd31, align 16
  %87 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %87, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 60, ptr @.file.18, i64 9, ptr @.func.47, i64 8, i32 466, ptr byval(%"any[]") align 8 %indirectarg33) #5, !dbg !550
  unreachable, !dbg !550

panic36:                                          ; preds = %checkok34
  %88 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !550
  call void %88(ptr @.panic_msg.49, i64 53, ptr @.file.18, i64 9, ptr @.func.47, i64 8, i32 466) #5, !dbg !550
  unreachable, !dbg !550

panic38:                                          ; preds = %checkok37
  store i64 8, ptr %taddr39, align 8
  %89 = insertvalue %any undef, ptr %taddr39, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %27, ptr %taddr40, align 8
  %91 = insertvalue %any undef, ptr %taddr40, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %90, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %92, ptr %ptradd42, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 94, ptr @.file.18, i64 9, ptr @.func.47, i64 8, i32 466, ptr byval(%"any[]") align 8 %indirectarg44) #5, !dbg !550
  unreachable, !dbg !550

panic49:                                          ; preds = %loop.body
  %94 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !561
  call void %94(ptr @.panic_msg.49, i64 53, ptr @.file.18, i64 9, ptr @.func.47, i64 8, i32 466) #5, !dbg !561
  unreachable, !dbg !561

panic51:                                          ; preds = %checkok50
  store i64 8, ptr %taddr52, align 8
  %95 = insertvalue %any undef, ptr %taddr52, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %35, ptr %taddr53, align 8
  %97 = insertvalue %any undef, ptr %taddr53, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %96, ptr %varargslots54, align 16
  %ptradd55 = getelementptr inbounds i8, ptr %varargslots54, i64 16
  store %any %98, ptr %ptradd55, align 16
  %99 = insertvalue %"any[]" undef, ptr %varargslots54, 0
  %"$$temp56" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp56", ptr %indirectarg57, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 94, ptr @.file.18, i64 9, ptr @.func.47, i64 8, i32 466, ptr byval(%"any[]") align 8 %indirectarg57) #5, !dbg !561
  unreachable, !dbg !561

panic61:                                          ; preds = %checkok58
  store i64 %38, ptr %taddr62, align 8
  %100 = insertvalue %any undef, ptr %taddr62, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr63, align 8
  %102 = insertvalue %any undef, ptr %taddr63, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %101, ptr %varargslots64, align 16
  %ptradd65 = getelementptr inbounds i8, ptr %varargslots64, i64 16
  store %any %103, ptr %ptradd65, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots64, 0
  %"$$temp66" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp66", ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.47, i64 8, i32 466, ptr byval(%"any[]") align 8 %indirectarg67) #5, !dbg !558
  unreachable, !dbg !558

panic72:                                          ; preds = %and.rhs70
  store i64 %48, ptr %taddr73, align 8
  %105 = insertvalue %any undef, ptr %taddr73, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %47, ptr %taddr74, align 8
  %107 = insertvalue %any undef, ptr %taddr74, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %106, ptr %varargslots75, align 16
  %ptradd76 = getelementptr inbounds i8, ptr %varargslots75, i64 16
  store %any %108, ptr %ptradd76, align 16
  %109 = insertvalue %"any[]" undef, ptr %varargslots75, 0
  %"$$temp77" = insertvalue %"any[]" %109, i64 2, 1
  store %"any[]" %"$$temp77", ptr %indirectarg78, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 61, ptr @.file.18, i64 9, ptr @.func.47, i64 8, i32 468, ptr byval(%"any[]") align 8 %indirectarg78) #5, !dbg !565
  unreachable, !dbg !565

panic82:                                          ; preds = %checkok79
  store i64 %sub81, ptr %taddr83, align 8
  %110 = insertvalue %any undef, ptr %taddr83, 0
  %111 = insertvalue %any %110, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %48, ptr %taddr84, align 8
  %112 = insertvalue %any undef, ptr %taddr84, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %111, ptr %varargslots85, align 16
  %ptradd86 = getelementptr inbounds i8, ptr %varargslots85, i64 16
  store %any %113, ptr %ptradd86, align 16
  %114 = insertvalue %"any[]" undef, ptr %varargslots85, 0
  %"$$temp87" = insertvalue %"any[]" %114, i64 2, 1
  store %"any[]" %"$$temp87", ptr %indirectarg88, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 60, ptr @.file.18, i64 9, ptr @.func.47, i64 8, i32 468, ptr byval(%"any[]") align 8 %indirectarg88) #5, !dbg !565
  unreachable, !dbg !565
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.rindex_of(ptr %0, ptr %1, i64 %2, ptr %3, i64 %4) #0 comdat !dbg !573 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %needed = alloca i64, align 8
  %first = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %varargslots13 = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %taddr20 = alloca i64, align 8
  %taddr21 = alloca i64, align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  %taddr35 = alloca %"char[]", align 8
  %.anon = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %taddr40 = alloca i64, align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr52 = alloca i64, align 8
  %taddr53 = alloca i64, align 8
  %varargslots54 = alloca [2 x %any], align 16
  %indirectarg57 = alloca %"any[]", align 8
  %taddr62 = alloca i64, align 8
  %taddr63 = alloca i64, align 8
  %varargslots64 = alloca [2 x %any], align 16
  %indirectarg67 = alloca %"any[]", align 8
  %taddr73 = alloca i64, align 8
  %taddr74 = alloca i64, align 8
  %varargslots75 = alloca [2 x %any], align 16
  %indirectarg78 = alloca %"any[]", align 8
  %taddr83 = alloca i64, align 8
  %taddr84 = alloca i64, align 8
  %varargslots85 = alloca [2 x %any], align 16
  %indirectarg88 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !574, !DIExpression(), !575)
  store ptr %3, ptr %needle, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %needle, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %needle, !576, !DIExpression(), !577)
  %ptradd2 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !578
  %5 = load i64, ptr %ptradd2, align 8, !dbg !578
  %lt = icmp ult i64 0, %5, !dbg !578
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !578

assert_fail:                                      ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !578
  call void %6(ptr @.panic_msg.46, i64 71, ptr @.file.18, i64 9, ptr @.func.50, i64 9, i32 481) #5, !dbg !578
  unreachable, !dbg !578

assert_ok:                                        ; preds = %entry
    #dbg_declare(ptr %needed, !580, !DIExpression(), !581)
  %ptradd3 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !582
  %7 = load i64, ptr %ptradd3, align 8, !dbg !582
  store i64 %7, ptr %needed, align 8, !dbg !582
  %8 = load i64, ptr %needed, align 8, !dbg !583
  %lt4 = icmp ult i64 0, %8, !dbg !583
  br i1 %lt4, label %and.rhs, label %and.phi, !dbg !583

and.rhs:                                          ; preds = %assert_ok
  %ptradd5 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !584
  %9 = load i64, ptr %ptradd5, align 8, !dbg !584
  %10 = load i64, ptr %needed, align 8, !dbg !585
  %ge = icmp uge i64 %9, %10, !dbg !584
  br label %and.phi, !dbg !584

and.phi:                                          ; preds = %and.rhs, %assert_ok
  %val = phi i1 [ false, %assert_ok ], [ %ge, %and.rhs ], !dbg !584
  br i1 %val, label %if.then, label %if.exit104, !dbg !584

if.then:                                          ; preds = %and.phi
    #dbg_declare(ptr %first, !586, !DIExpression(), !588)
  %ptradd6 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !589
  %11 = load i64, ptr %ptradd6, align 8, !dbg !589
  %12 = load ptr, ptr %needle, align 8, !dbg !589
  %ge7 = icmp sge i64 0, %11, !dbg !590
  %13 = call i1 @llvm.expect.i1(i1 %ge7, i1 false), !dbg !590
  br i1 %13, label %panic, label %checkok, !dbg !590

checkok:                                          ; preds = %if.then
  %14 = load i8, ptr %12, align 1, !dbg !590
  store i8 %14, ptr %first, align 1, !dbg !590
  %15 = load %"char[]", ptr %s, align 8, !dbg !591
  %16 = extractvalue %"char[]" %15, 0, !dbg !591
  %17 = extractvalue %"char[]" %15, 1, !dbg !593
  %gt = icmp ugt i64 0, %17, !dbg !593
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !593
  br i1 %18, label %panic10, label %checkok17, !dbg !593

checkok17:                                        ; preds = %checkok
  %19 = load i64, ptr %needed, align 8, !dbg !594
  %sub = sub i64 %17, %19, !dbg !594
  %gt18 = icmp ugt i64 0, %sub, !dbg !594
  %20 = call i1 @llvm.expect.i1(i1 %gt18, i1 false), !dbg !594
  br i1 %20, label %panic19, label %checkok26, !dbg !594

checkok26:                                        ; preds = %checkok17
  %le = icmp ule i64 %17, %sub, !dbg !591
  %21 = call i1 @llvm.expect.i1(i1 %le, i1 false), !dbg !591
  br i1 %21, label %panic27, label %checkok34, !dbg !591

checkok34:                                        ; preds = %checkok26
  %22 = add i64 %sub, 1, !dbg !591
  %size = sub i64 %22, 0, !dbg !591
  %23 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !591
  %24 = insertvalue %"char[]" %23, i64 %size, 1, !dbg !591
  store %"char[]" %24, ptr %taddr35, align 8
    #dbg_declare(ptr %.anon, !595, !DIExpression(), !596)
  %checknull = icmp eq ptr %taddr35, null, !dbg !591
  %25 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !591
  br i1 %25, label %panic36, label %checkok37, !dbg !591

checkok37:                                        ; preds = %checkok34
  %26 = ptrtoint ptr %taddr35 to i64, !dbg !591
  %27 = urem i64 %26, 8, !dbg !591
  %28 = icmp ne i64 %27, 0, !dbg !591
  %29 = call i1 @llvm.expect.i1(i1 %28, i1 false), !dbg !591
  br i1 %29, label %panic38, label %checkok45, !dbg !591

checkok45:                                        ; preds = %checkok37
  %ptradd46 = getelementptr inbounds i8, ptr %taddr35, i64 8, !dbg !591
  %30 = load i64, ptr %ptradd46, align 8, !dbg !591
  store i64 %30, ptr %.anon, align 8, !dbg !591
  br label %loop.cond, !dbg !591

loop.cond:                                        ; preds = %if.exit, %checkok45
  %31 = load i64, ptr %.anon, align 8, !dbg !596
  %gt47 = icmp ugt i64 %31, 0, !dbg !596
  br i1 %gt47, label %loop.body, label %loop.exit, !dbg !596

loop.body:                                        ; preds = %loop.cond
  %32 = load i64, ptr %.anon, align 8, !dbg !596
  %subnuw = sub nuw i64 %32, 1, !dbg !596
  store i64 %subnuw, ptr %.anon, align 8, !dbg !596
    #dbg_declare(ptr %i, !597, !DIExpression(), !599)
  %33 = load i64, ptr %.anon, align 8, !dbg !599
  store i64 %33, ptr %i, align 8, !dbg !599
    #dbg_declare(ptr %c, !600, !DIExpression(), !601)
  %checknull48 = icmp eq ptr %taddr35, null, !dbg !602
  %34 = call i1 @llvm.expect.i1(i1 %checknull48, i1 false), !dbg !602
  br i1 %34, label %panic49, label %checkok50, !dbg !602

checkok50:                                        ; preds = %loop.body
  %35 = ptrtoint ptr %taddr35 to i64, !dbg !602
  %36 = urem i64 %35, 8, !dbg !602
  %37 = icmp ne i64 %36, 0, !dbg !602
  %38 = call i1 @llvm.expect.i1(i1 %37, i1 false), !dbg !602
  br i1 %38, label %panic51, label %checkok58, !dbg !602

checkok58:                                        ; preds = %checkok50
  %ptradd59 = getelementptr inbounds i8, ptr %taddr35, i64 8, !dbg !602
  %39 = load i64, ptr %ptradd59, align 8, !dbg !602
  %40 = load ptr, ptr %taddr35, align 8, !dbg !602
  %41 = load i64, ptr %.anon, align 8, !dbg !599
  %ge60 = icmp uge i64 %41, %39, !dbg !599
  %42 = call i1 @llvm.expect.i1(i1 %ge60, i1 false), !dbg !599
  br i1 %42, label %panic61, label %checkok68, !dbg !599

checkok68:                                        ; preds = %checkok58
  %ptradd69 = getelementptr inbounds i8, ptr %40, i64 %41, !dbg !599
  %43 = load i8, ptr %ptradd69, align 1, !dbg !599
  store i8 %43, ptr %c, align 1, !dbg !599
  %44 = load i8, ptr %c, align 1, !dbg !603
  %45 = load i8, ptr %first, align 1, !dbg !605
  %eq = icmp eq i8 %44, %45, !dbg !603
  br i1 %eq, label %and.rhs70, label %and.phi97, !dbg !603

and.rhs70:                                        ; preds = %checkok68
  %46 = load %"char[]", ptr %s, align 8, !dbg !606
  %47 = extractvalue %"char[]" %46, 0, !dbg !606
  %48 = load i64, ptr %i, align 8, !dbg !607
  %49 = extractvalue %"char[]" %46, 1, !dbg !607
  %gt71 = icmp ugt i64 %48, %49, !dbg !607
  %50 = call i1 @llvm.expect.i1(i1 %gt71, i1 false), !dbg !607
  br i1 %50, label %panic72, label %checkok79, !dbg !607

checkok79:                                        ; preds = %and.rhs70
  %51 = load i64, ptr %needed, align 8, !dbg !608
  %add = add i64 %48, %51, !dbg !608
  %lt80 = icmp ult i64 %49, %add, !dbg !608
  %sub81 = sub i64 %add, 1, !dbg !608
  %52 = call i1 @llvm.expect.i1(i1 %lt80, i1 false), !dbg !608
  br i1 %52, label %panic82, label %checkok89, !dbg !608

checkok89:                                        ; preds = %checkok79
  %size90 = sub i64 %add, %48, !dbg !606
  %ptradd91 = getelementptr inbounds i8, ptr %47, i64 %48, !dbg !606
  %53 = insertvalue %"char[]" undef, ptr %ptradd91, 0, !dbg !606
  %54 = insertvalue %"char[]" %53, i64 %size90, 1, !dbg !606
  %55 = load %"char[]", ptr %needle, align 8, !dbg !609
  %56 = extractvalue %"char[]" %54, 1, !dbg !606
  %57 = extractvalue %"char[]" %55, 1, !dbg !606
  %58 = extractvalue %"char[]" %54, 0, !dbg !606
  %59 = extractvalue %"char[]" %55, 0, !dbg !606
  %eq92 = icmp eq i64 %56, %57, !dbg !606
  br i1 %eq92, label %slice_cmp_values, label %slice_cmp_exit, !dbg !606

slice_cmp_values:                                 ; preds = %checkok89
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %60 = load i64, ptr %cmp.idx, align 8
  %lt93 = icmp slt i64 %60, %56
  br i1 %lt93, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd94 = getelementptr inbounds i8, ptr %58, i64 %60
  %ptradd95 = getelementptr inbounds i8, ptr %59, i64 %60
  %61 = load i8, ptr %ptradd94, align 1
  %62 = load i8, ptr %ptradd95, align 1
  %eq96 = icmp eq i8 %61, %62
  %63 = add i64 %60, 1
  store i64 %63, ptr %cmp.idx, align 8
  br i1 %eq96, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %checkok89
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %checkok89 ], [ false, %slice_loop_comparison ]
  br label %and.phi97

and.phi97:                                        ; preds = %slice_cmp_exit, %checkok68
  %val98 = phi i1 [ false, %checkok68 ], [ %slice_cmp_phi, %slice_cmp_exit ]
  br i1 %val98, label %if.then99, label %if.exit

if.then99:                                        ; preds = %and.phi97
  %64 = load i64, ptr %i, align 8, !dbg !610
  %65 = load i64, ptr %i, align 8, !dbg !611
  %ptradd100 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !612
  %66 = load i64, ptr %ptradd100, align 8, !dbg !612
  %lt101 = icmp ult i64 %65, %66, !dbg !611
  br i1 %lt101, label %assert_ok103, label %assert_fail102, !dbg !611

assert_fail102:                                   ; preds = %if.then99
  %67 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !611
  call void %67(ptr @.panic_msg.42, i64 34, ptr @.file.18, i64 9, ptr @.func.50, i64 9, i32 480) #5, !dbg !611
  unreachable, !dbg !611

assert_ok103:                                     ; preds = %if.then99
  store i64 %64, ptr %0, align 8, !dbg !611
  ret i64 0, !dbg !611

if.exit:                                          ; preds = %and.phi97
  br label %loop.cond, !dbg !611

loop.exit:                                        ; preds = %loop.cond
  br label %if.exit104, !dbg !611

if.exit104:                                       ; preds = %loop.exit, %and.phi
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !613

panic:                                            ; preds = %if.then
  store i64 %11, ptr %taddr, align 8
  %68 = insertvalue %any undef, ptr %taddr, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr8, align 8
  %70 = insertvalue %any undef, ptr %taddr8, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %69, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %71, ptr %ptradd9, align 16
  %72 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %72, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.50, i64 9, i32 490, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !590
  unreachable, !dbg !590

panic10:                                          ; preds = %checkok
  store i64 %17, ptr %taddr11, align 8
  %73 = insertvalue %any undef, ptr %taddr11, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr12, align 8
  %75 = insertvalue %any undef, ptr %taddr12, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %74, ptr %varargslots13, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots13, i64 16
  store %any %76, ptr %ptradd14, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots13, 0
  %"$$temp15" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp15", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 61, ptr @.file.18, i64 9, ptr @.func.50, i64 9, i32 491, ptr byval(%"any[]") align 8 %indirectarg16) #5, !dbg !591
  unreachable, !dbg !591

panic19:                                          ; preds = %checkok17
  store i64 0, ptr %taddr20, align 8
  %78 = insertvalue %any undef, ptr %taddr20, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %sub, ptr %taddr21, align 8
  %80 = insertvalue %any undef, ptr %taddr21, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %79, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %81, ptr %ptradd23, align 16
  %82 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %82, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.48, i64 44, ptr @.file.18, i64 9, ptr @.func.50, i64 9, i32 491, ptr byval(%"any[]") align 8 %indirectarg25) #5, !dbg !591
  unreachable, !dbg !591

panic27:                                          ; preds = %checkok26
  store i64 %sub, ptr %taddr28, align 8
  %83 = insertvalue %any undef, ptr %taddr28, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %17, ptr %taddr29, align 8
  %85 = insertvalue %any undef, ptr %taddr29, 0
  %86 = insertvalue %any %85, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %84, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %86, ptr %ptradd31, align 16
  %87 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %87, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 60, ptr @.file.18, i64 9, ptr @.func.50, i64 9, i32 491, ptr byval(%"any[]") align 8 %indirectarg33) #5, !dbg !591
  unreachable, !dbg !591

panic36:                                          ; preds = %checkok34
  %88 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !591
  call void %88(ptr @.panic_msg.49, i64 53, ptr @.file.18, i64 9, ptr @.func.50, i64 9, i32 491) #5, !dbg !591
  unreachable, !dbg !591

panic38:                                          ; preds = %checkok37
  store i64 8, ptr %taddr39, align 8
  %89 = insertvalue %any undef, ptr %taddr39, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %27, ptr %taddr40, align 8
  %91 = insertvalue %any undef, ptr %taddr40, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %90, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %92, ptr %ptradd42, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 94, ptr @.file.18, i64 9, ptr @.func.50, i64 9, i32 491, ptr byval(%"any[]") align 8 %indirectarg44) #5, !dbg !591
  unreachable, !dbg !591

panic49:                                          ; preds = %loop.body
  %94 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !602
  call void %94(ptr @.panic_msg.49, i64 53, ptr @.file.18, i64 9, ptr @.func.50, i64 9, i32 491) #5, !dbg !602
  unreachable, !dbg !602

panic51:                                          ; preds = %checkok50
  store i64 8, ptr %taddr52, align 8
  %95 = insertvalue %any undef, ptr %taddr52, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr53, align 8
  %97 = insertvalue %any undef, ptr %taddr53, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %96, ptr %varargslots54, align 16
  %ptradd55 = getelementptr inbounds i8, ptr %varargslots54, i64 16
  store %any %98, ptr %ptradd55, align 16
  %99 = insertvalue %"any[]" undef, ptr %varargslots54, 0
  %"$$temp56" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp56", ptr %indirectarg57, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 94, ptr @.file.18, i64 9, ptr @.func.50, i64 9, i32 491, ptr byval(%"any[]") align 8 %indirectarg57) #5, !dbg !602
  unreachable, !dbg !602

panic61:                                          ; preds = %checkok58
  store i64 %39, ptr %taddr62, align 8
  %100 = insertvalue %any undef, ptr %taddr62, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr63, align 8
  %102 = insertvalue %any undef, ptr %taddr63, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %101, ptr %varargslots64, align 16
  %ptradd65 = getelementptr inbounds i8, ptr %varargslots64, i64 16
  store %any %103, ptr %ptradd65, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots64, 0
  %"$$temp66" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp66", ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.50, i64 9, i32 491, ptr byval(%"any[]") align 8 %indirectarg67) #5, !dbg !599
  unreachable, !dbg !599

panic72:                                          ; preds = %and.rhs70
  store i64 %49, ptr %taddr73, align 8
  %105 = insertvalue %any undef, ptr %taddr73, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %48, ptr %taddr74, align 8
  %107 = insertvalue %any undef, ptr %taddr74, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %106, ptr %varargslots75, align 16
  %ptradd76 = getelementptr inbounds i8, ptr %varargslots75, i64 16
  store %any %108, ptr %ptradd76, align 16
  %109 = insertvalue %"any[]" undef, ptr %varargslots75, 0
  %"$$temp77" = insertvalue %"any[]" %109, i64 2, 1
  store %"any[]" %"$$temp77", ptr %indirectarg78, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 61, ptr @.file.18, i64 9, ptr @.func.50, i64 9, i32 493, ptr byval(%"any[]") align 8 %indirectarg78) #5, !dbg !606
  unreachable, !dbg !606

panic82:                                          ; preds = %checkok79
  store i64 %sub81, ptr %taddr83, align 8
  %110 = insertvalue %any undef, ptr %taddr83, 0
  %111 = insertvalue %any %110, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %49, ptr %taddr84, align 8
  %112 = insertvalue %any undef, ptr %taddr84, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %111, ptr %varargslots85, align 16
  %ptradd86 = getelementptr inbounds i8, ptr %varargslots85, i64 16
  store %any %113, ptr %ptradd86, align 16
  %114 = insertvalue %"any[]" undef, ptr %varargslots85, 0
  %"$$temp87" = insertvalue %"any[]" %114, i64 2, 1
  store %"any[]" %"$$temp87", ptr %indirectarg88, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 60, ptr @.file.18, i64 9, ptr @.func.50, i64 9, i32 493, ptr byval(%"any[]") align 8 %indirectarg88) #5, !dbg !606
  unreachable, !dbg !606
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.string.ZString.str_view(ptr %0) #0 comdat !dbg !614 {
entry:
  %str = alloca ptr, align 8
  %taddr = alloca %"char[]", align 8
  store ptr %0, ptr %str, align 8
    #dbg_declare(ptr %str, !618, !DIExpression(), !619)
  %1 = load ptr, ptr %str, align 8, !dbg !620
  %2 = load ptr, ptr %str, align 8, !dbg !621
  %3 = call i64 @std.core.string.ZString.len(ptr %2), !dbg !621
  %add = add i64 0, %3, !dbg !621
  %size = sub i64 %add, 0, !dbg !621
  %4 = insertvalue %"char[]" undef, ptr %1, 0, !dbg !621
  %5 = insertvalue %"char[]" %4, i64 %size, 1, !dbg !621
  store %"char[]" %5, ptr %taddr, align 8
  %6 = load { ptr, i64 }, ptr %taddr, align 8
  ret { ptr, i64 } %6
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.ZString.char_len(ptr %0) #0 comdat !dbg !622 {
entry:
  %str = alloca ptr, align 8
  %len = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  store ptr %0, ptr %str, align 8
    #dbg_declare(ptr %str, !625, !DIExpression(), !626)
    #dbg_declare(ptr %len, !627, !DIExpression(), !628)
  store i64 0, ptr %len, align 8, !dbg !629
    #dbg_declare(ptr %ptr, !630, !DIExpression(), !631)
  %1 = load ptr, ptr %str, align 8, !dbg !632
  store ptr %1, ptr %ptr, align 8, !dbg !632
  br label %loop.cond, !dbg !633

loop.cond:                                        ; preds = %if.exit, %entry
    #dbg_declare(ptr %c, !634, !DIExpression(), !636)
  %2 = load ptr, ptr %ptr, align 8, !dbg !637
  %ptradd_any = getelementptr i8, ptr %2, i8 1, !dbg !637
  store ptr %ptradd_any, ptr %ptr, align 8, !dbg !637
  %3 = load i8, ptr %2, align 1, !dbg !638
  store i8 %3, ptr %c, align 1, !dbg !638
  %i2b = icmp ne i8 %3, 0, !dbg !638
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !638

loop.body:                                        ; preds = %loop.cond
  %4 = load i8, ptr %c, align 1, !dbg !639
  %zext = zext i8 %4 to i32, !dbg !639
  %and = and i32 %zext, 192, !dbg !639
  %neq = icmp ne i32 %and, 128, !dbg !639
  br i1 %neq, label %if.then, label %if.exit, !dbg !639

if.then:                                          ; preds = %loop.body
  %5 = load i64, ptr %len, align 8, !dbg !641
  %add = add i64 %5, 1, !dbg !641
  store i64 %add, ptr %len, align 8, !dbg !641
  br label %if.exit, !dbg !641

if.exit:                                          ; preds = %if.then, %loop.body
  br label %loop.cond, !dbg !641

loop.exit:                                        ; preds = %loop.cond
  %6 = load i64, ptr %len, align 8, !dbg !642
  ret i64 %6, !dbg !642
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.ZString.len(ptr %0) #0 comdat !dbg !643 {
entry:
  %str = alloca ptr, align 8
  %len = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  store ptr %0, ptr %str, align 8
    #dbg_declare(ptr %str, !644, !DIExpression(), !645)
    #dbg_declare(ptr %len, !646, !DIExpression(), !647)
  store i64 0, ptr %len, align 8, !dbg !648
    #dbg_declare(ptr %ptr, !649, !DIExpression(), !650)
  %1 = load ptr, ptr %str, align 8, !dbg !651
  store ptr %1, ptr %ptr, align 8, !dbg !651
  br label %loop.cond, !dbg !652

loop.cond:                                        ; preds = %loop.body, %entry
    #dbg_declare(ptr %c, !653, !DIExpression(), !655)
  %2 = load ptr, ptr %ptr, align 8, !dbg !656
  %ptradd_any = getelementptr i8, ptr %2, i8 1, !dbg !656
  store ptr %ptradd_any, ptr %ptr, align 8, !dbg !656
  %3 = load i8, ptr %2, align 1, !dbg !657
  store i8 %3, ptr %c, align 1, !dbg !657
  %i2b = icmp ne i8 %3, 0, !dbg !657
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !657

loop.body:                                        ; preds = %loop.cond
  %4 = load i64, ptr %len, align 8, !dbg !658
  %add = add i64 %4, 1, !dbg !658
  store i64 %add, ptr %len, align 8, !dbg !658
  br label %loop.cond, !dbg !658

loop.exit:                                        ; preds = %loop.cond
  %5 = load i64, ptr %len, align 8, !dbg !659
  ret i64 %5, !dbg !659
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.core.String.zstr_copy(ptr %0, i64 %1, i64 %2, ptr %3) #0 comdat !dbg !660 {
entry:
  %s = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %len = alloca i64, align 8
  %str = alloca ptr, align 8
  %allocator3 = alloca %any, align 8
  %size = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator4 = alloca %any, align 8
  %size5 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len8 = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !663, !DIExpression(), !664)
  store i64 %2, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %allocator, !665, !DIExpression(), !666)
    #dbg_declare(ptr %len, !667, !DIExpression(), !668)
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !669
  %4 = load i64, ptr %ptradd2, align 8, !dbg !669
  store i64 %4, ptr %len, align 8, !dbg !669
    #dbg_declare(ptr %str, !670, !DIExpression(), !671)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %5 = load i64, ptr %len, align 8, !dbg !672
  %add = add i64 %5, 1, !dbg !672
  store i64 %add, ptr %size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator4, ptr align 8 %allocator3, i32 16, i1 false)
  %6 = load i64, ptr %size, align 8
  store i64 %6, ptr %size5, align 8
  %7 = load i64, ptr %size5, align 8, !dbg !673
  %i2nb = icmp eq i64 %7, 0, !dbg !673
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !673

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !678
  br label %expr_block.exit, !dbg !678

if.exit:                                          ; preds = %entry
  %ptradd6 = getelementptr inbounds i8, ptr %allocator4, i64 8, !dbg !679
  %8 = load i64, ptr %ptradd6, align 8, !dbg !679
  %9 = inttoptr i64 %8 to ptr, !dbg !679
  %type = load ptr, ptr %.cachedtype, align 8
  %10 = icmp eq ptr %9, %type
  br i1 %10, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd7 = getelementptr inbounds i8, ptr %9, i64 16
  %11 = load ptr, ptr %ptradd7, align 8
  %12 = call ptr @.dyn_search(ptr %11, ptr @"$sel.acquire")
  store ptr %12, ptr %.inlinecache, align 8
  store ptr %9, ptr %.cachedtype, align 8
  br label %13

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %13

13:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %12, %cache_miss ]
  %14 = icmp eq ptr %fn_phi, null
  br i1 %14, label %missing_function, label %match

missing_function:                                 ; preds = %13
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !681
  call void %15(ptr @.panic_msg, i64 44, ptr @.file, i64 16, ptr @.func.51, i64 9, i32 68) #5, !dbg !681
  unreachable, !dbg !681

match:                                            ; preds = %13
  %16 = load ptr, ptr %allocator4, align 8
  %17 = load i64, ptr %size5, align 8
  %18 = call i64 %fn_phi(ptr %retparam, ptr %16, i64 %17, i32 0, i64 0), !dbg !681
  %not_err = icmp eq i64 %18, 0, !dbg !681
  %19 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !681
  br i1 %19, label %after_check, label %assign_optional, !dbg !681

assign_optional:                                  ; preds = %match
  store i64 %18, ptr %error_var, align 8, !dbg !681
  br label %panic_block, !dbg !681

after_check:                                      ; preds = %match
  %20 = load ptr, ptr %retparam, align 8, !dbg !681
  store ptr %20, ptr %blockret, align 8, !dbg !681
  br label %expr_block.exit, !dbg !681

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !681

panic_block:                                      ; preds = %assign_optional
  %21 = insertvalue %any undef, ptr %error_var, 0, !dbg !681
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !681
  store %any %22, ptr %varargslots, align 16
  %23 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %23, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 36, ptr @.file, i64 16, ptr @.func.51, i64 9, i32 57, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !675
  unreachable, !dbg !675

noerr_block:                                      ; preds = %expr_block.exit
  %24 = load ptr, ptr %blockret, align 8, !dbg !675
  store ptr %24, ptr %str, align 8, !dbg !675
  %25 = load ptr, ptr %str, align 8, !dbg !682
  store ptr %25, ptr %dst, align 8
  %26 = load ptr, ptr %s, align 8, !dbg !683
  store ptr %26, ptr %src, align 8
  %27 = load i64, ptr %len, align 8
  store i64 %27, ptr %len8, align 8
  %28 = load i64, ptr %len8, align 8, !dbg !684
  %eq = icmp eq i64 0, %28, !dbg !684
  br i1 %eq, label %or.phi, label %or.rhs, !dbg !684

or.rhs:                                           ; preds = %noerr_block
  %29 = load ptr, ptr %dst, align 8, !dbg !689
  %30 = load i64, ptr %len8, align 8, !dbg !690
  %ptradd_any = getelementptr i8, ptr %29, i64 %30, !dbg !690
  %31 = load ptr, ptr %src, align 8, !dbg !691
  %le = icmp ule ptr %ptradd_any, %31, !dbg !689
  br label %or.phi, !dbg !689

or.phi:                                           ; preds = %or.rhs, %noerr_block
  %val = phi i1 [ true, %noerr_block ], [ %le, %or.rhs ], !dbg !689
  br i1 %val, label %or.phi12, label %or.rhs9, !dbg !689

or.rhs9:                                          ; preds = %or.phi
  %32 = load ptr, ptr %src, align 8, !dbg !692
  %33 = load i64, ptr %len8, align 8, !dbg !693
  %ptradd_any10 = getelementptr i8, ptr %32, i64 %33, !dbg !693
  %34 = load ptr, ptr %dst, align 8, !dbg !694
  %le11 = icmp ule ptr %ptradd_any10, %34, !dbg !692
  br label %or.phi12, !dbg !692

or.phi12:                                         ; preds = %or.rhs9, %or.phi
  %val13 = phi i1 [ true, %or.phi ], [ %le11, %or.rhs9 ], !dbg !692
  br i1 %val13, label %assert_ok, label %assert_fail, !dbg !692

assert_fail:                                      ; preds = %or.phi12
  %35 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !684
  call void %35(ptr @.panic_msg.52, i64 95, ptr @.file.53, i64 6, ptr @.func.51, i64 9, i32 324) #5, !dbg !684
  unreachable, !dbg !684

assert_ok:                                        ; preds = %or.phi12
  %36 = load ptr, ptr %dst, align 8, !dbg !695
  %37 = load ptr, ptr %src, align 8, !dbg !696
  %38 = load i64, ptr %len8, align 8, !dbg !697
  call void @llvm.memcpy.p0.p0.i64(ptr %36, ptr %37, i64 %38, i1 false), !dbg !698
  %39 = load ptr, ptr %str, align 8, !dbg !699
  %40 = load i64, ptr %len, align 8, !dbg !700
  %ptradd14 = getelementptr inbounds i8, ptr %39, i64 %40, !dbg !700
  store i8 0, ptr %ptradd14, align 1, !dbg !701
  %41 = load ptr, ptr %str, align 8, !dbg !702
  ret ptr %41, !dbg !702
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.concat(ptr %0, i64 %1, ptr %2, i64 %3, i64 %4, ptr %5) #0 comdat !dbg !703 {
entry:
  %s1 = alloca %"char[]", align 8
  %s2 = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %full_len = alloca i64, align 8
  %str = alloca ptr, align 8
  %allocator5 = alloca %any, align 8
  %size = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator7 = alloca %any, align 8
  %size8 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %s1_len = alloca i64, align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %dst18 = alloca ptr, align 8
  %src19 = alloca ptr, align 8
  %len21 = alloca i64, align 8
  %taddr = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %0, ptr %s1, align 8
  %ptradd = getelementptr inbounds i8, ptr %s1, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %s1, !706, !DIExpression(), !707)
  store ptr %2, ptr %s2, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %s2, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %s2, !708, !DIExpression(), !709)
  store i64 %4, ptr %allocator, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %5, ptr %ptradd2, align 8
    #dbg_declare(ptr %allocator, !710, !DIExpression(), !711)
    #dbg_declare(ptr %full_len, !712, !DIExpression(), !713)
  %ptradd3 = getelementptr inbounds i8, ptr %s1, i64 8, !dbg !714
  %6 = load i64, ptr %ptradd3, align 8, !dbg !714
  %ptradd4 = getelementptr inbounds i8, ptr %s2, i64 8, !dbg !715
  %7 = load i64, ptr %ptradd4, align 8, !dbg !715
  %add = add i64 %6, %7, !dbg !714
  store i64 %add, ptr %full_len, align 8, !dbg !714
    #dbg_declare(ptr %str, !716, !DIExpression(), !717)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator5, ptr align 8 %allocator, i32 16, i1 false)
  %8 = load i64, ptr %full_len, align 8, !dbg !718
  %add6 = add i64 %8, 1, !dbg !718
  store i64 %add6, ptr %size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator7, ptr align 8 %allocator5, i32 16, i1 false)
  %9 = load i64, ptr %size, align 8
  store i64 %9, ptr %size8, align 8
  %10 = load i64, ptr %size8, align 8, !dbg !719
  %i2nb = icmp eq i64 %10, 0, !dbg !719
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !719

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !724
  br label %expr_block.exit, !dbg !724

if.exit:                                          ; preds = %entry
  %ptradd9 = getelementptr inbounds i8, ptr %allocator7, i64 8, !dbg !725
  %11 = load i64, ptr %ptradd9, align 8, !dbg !725
  %12 = inttoptr i64 %11 to ptr, !dbg !725
  %type = load ptr, ptr %.cachedtype, align 8
  %13 = icmp eq ptr %12, %type
  br i1 %13, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd10 = getelementptr inbounds i8, ptr %12, i64 16
  %14 = load ptr, ptr %ptradd10, align 8
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.acquire")
  store ptr %15, ptr %.inlinecache, align 8
  store ptr %12, ptr %.cachedtype, align 8
  br label %16

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %16

16:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %15, %cache_miss ]
  %17 = icmp eq ptr %fn_phi, null
  br i1 %17, label %missing_function, label %match

missing_function:                                 ; preds = %16
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !727
  call void %18(ptr @.panic_msg, i64 44, ptr @.file, i64 16, ptr @.func.54, i64 6, i32 68) #5, !dbg !727
  unreachable, !dbg !727

match:                                            ; preds = %16
  %19 = load ptr, ptr %allocator7, align 8
  %20 = load i64, ptr %size8, align 8
  %21 = call i64 %fn_phi(ptr %retparam, ptr %19, i64 %20, i32 0, i64 0), !dbg !727
  %not_err = icmp eq i64 %21, 0, !dbg !727
  %22 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !727
  br i1 %22, label %after_check, label %assign_optional, !dbg !727

assign_optional:                                  ; preds = %match
  store i64 %21, ptr %error_var, align 8, !dbg !727
  br label %panic_block, !dbg !727

after_check:                                      ; preds = %match
  %23 = load ptr, ptr %retparam, align 8, !dbg !727
  store ptr %23, ptr %blockret, align 8, !dbg !727
  br label %expr_block.exit, !dbg !727

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !727

panic_block:                                      ; preds = %assign_optional
  %24 = insertvalue %any undef, ptr %error_var, 0, !dbg !727
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !727
  store %any %25, ptr %varargslots, align 16
  %26 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %26, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 36, ptr @.file, i64 16, ptr @.func.54, i64 6, i32 57, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !721
  unreachable, !dbg !721

noerr_block:                                      ; preds = %expr_block.exit
  %27 = load ptr, ptr %blockret, align 8, !dbg !721
  store ptr %27, ptr %str, align 8, !dbg !721
    #dbg_declare(ptr %s1_len, !728, !DIExpression(), !729)
  %ptradd11 = getelementptr inbounds i8, ptr %s1, i64 8, !dbg !730
  %28 = load i64, ptr %ptradd11, align 8, !dbg !730
  store i64 %28, ptr %s1_len, align 8, !dbg !730
  %29 = load ptr, ptr %str, align 8, !dbg !731
  store ptr %29, ptr %dst, align 8
  %30 = load ptr, ptr %s1, align 8, !dbg !732
  store ptr %30, ptr %src, align 8
  %31 = load i64, ptr %s1_len, align 8
  store i64 %31, ptr %len, align 8
  %32 = load i64, ptr %len, align 8, !dbg !733
  %eq = icmp eq i64 0, %32, !dbg !733
  br i1 %eq, label %or.phi, label %or.rhs, !dbg !733

or.rhs:                                           ; preds = %noerr_block
  %33 = load ptr, ptr %dst, align 8, !dbg !737
  %34 = load i64, ptr %len, align 8, !dbg !738
  %ptradd_any = getelementptr i8, ptr %33, i64 %34, !dbg !738
  %35 = load ptr, ptr %src, align 8, !dbg !739
  %le = icmp ule ptr %ptradd_any, %35, !dbg !737
  br label %or.phi, !dbg !737

or.phi:                                           ; preds = %or.rhs, %noerr_block
  %val = phi i1 [ true, %noerr_block ], [ %le, %or.rhs ], !dbg !737
  br i1 %val, label %or.phi15, label %or.rhs12, !dbg !737

or.rhs12:                                         ; preds = %or.phi
  %36 = load ptr, ptr %src, align 8, !dbg !740
  %37 = load i64, ptr %len, align 8, !dbg !741
  %ptradd_any13 = getelementptr i8, ptr %36, i64 %37, !dbg !741
  %38 = load ptr, ptr %dst, align 8, !dbg !742
  %le14 = icmp ule ptr %ptradd_any13, %38, !dbg !740
  br label %or.phi15, !dbg !740

or.phi15:                                         ; preds = %or.rhs12, %or.phi
  %val16 = phi i1 [ true, %or.phi ], [ %le14, %or.rhs12 ], !dbg !740
  br i1 %val16, label %assert_ok, label %assert_fail, !dbg !740

assert_fail:                                      ; preds = %or.phi15
  %39 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !733
  call void %39(ptr @.panic_msg.52, i64 95, ptr @.file.53, i64 6, ptr @.func.54, i64 6, i32 324) #5, !dbg !733
  unreachable, !dbg !733

assert_ok:                                        ; preds = %or.phi15
  %40 = load ptr, ptr %dst, align 8, !dbg !743
  %41 = load ptr, ptr %src, align 8, !dbg !744
  %42 = load i64, ptr %len, align 8, !dbg !745
  call void @llvm.memcpy.p0.p0.i64(ptr %40, ptr %41, i64 %42, i1 false), !dbg !746
  %43 = load ptr, ptr %str, align 8, !dbg !747
  %44 = load i64, ptr %s1_len, align 8, !dbg !748
  %ptradd_any17 = getelementptr i8, ptr %43, i64 %44, !dbg !748
  store ptr %ptradd_any17, ptr %dst18, align 8
  %45 = load ptr, ptr %s2, align 8, !dbg !749
  store ptr %45, ptr %src19, align 8
  %ptradd20 = getelementptr inbounds i8, ptr %s2, i64 8, !dbg !750
  %46 = load i64, ptr %ptradd20, align 8
  store i64 %46, ptr %len21, align 8
  %47 = load i64, ptr %len21, align 8, !dbg !751
  %eq22 = icmp eq i64 0, %47, !dbg !751
  br i1 %eq22, label %or.phi26, label %or.rhs23, !dbg !751

or.rhs23:                                         ; preds = %assert_ok
  %48 = load ptr, ptr %dst18, align 8, !dbg !755
  %49 = load i64, ptr %len21, align 8, !dbg !756
  %ptradd_any24 = getelementptr i8, ptr %48, i64 %49, !dbg !756
  %50 = load ptr, ptr %src19, align 8, !dbg !757
  %le25 = icmp ule ptr %ptradd_any24, %50, !dbg !755
  br label %or.phi26, !dbg !755

or.phi26:                                         ; preds = %or.rhs23, %assert_ok
  %val27 = phi i1 [ true, %assert_ok ], [ %le25, %or.rhs23 ], !dbg !755
  br i1 %val27, label %or.phi31, label %or.rhs28, !dbg !755

or.rhs28:                                         ; preds = %or.phi26
  %51 = load ptr, ptr %src19, align 8, !dbg !758
  %52 = load i64, ptr %len21, align 8, !dbg !759
  %ptradd_any29 = getelementptr i8, ptr %51, i64 %52, !dbg !759
  %53 = load ptr, ptr %dst18, align 8, !dbg !760
  %le30 = icmp ule ptr %ptradd_any29, %53, !dbg !758
  br label %or.phi31, !dbg !758

or.phi31:                                         ; preds = %or.rhs28, %or.phi26
  %val32 = phi i1 [ true, %or.phi26 ], [ %le30, %or.rhs28 ], !dbg !758
  br i1 %val32, label %assert_ok34, label %assert_fail33, !dbg !758

assert_fail33:                                    ; preds = %or.phi31
  %54 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !751
  call void %54(ptr @.panic_msg.52, i64 95, ptr @.file.53, i64 6, ptr @.func.54, i64 6, i32 324) #5, !dbg !751
  unreachable, !dbg !751

assert_ok34:                                      ; preds = %or.phi31
  %55 = load ptr, ptr %dst18, align 8, !dbg !761
  %56 = load ptr, ptr %src19, align 8, !dbg !762
  %57 = load i64, ptr %len21, align 8, !dbg !763
  call void @llvm.memcpy.p0.p0.i64(ptr %55, ptr %56, i64 %57, i1 false), !dbg !764
  %58 = load ptr, ptr %str, align 8, !dbg !765
  %59 = load i64, ptr %full_len, align 8, !dbg !766
  %ptradd35 = getelementptr inbounds i8, ptr %58, i64 %59, !dbg !766
  store i8 0, ptr %ptradd35, align 1, !dbg !767
  %60 = load ptr, ptr %str, align 8, !dbg !768
  %61 = load i64, ptr %full_len, align 8, !dbg !769
  %add36 = add i64 0, %61, !dbg !769
  %size37 = sub i64 %add36, 0, !dbg !769
  %62 = insertvalue %"char[]" undef, ptr %60, 0, !dbg !769
  %63 = insertvalue %"char[]" %62, i64 %size37, 1, !dbg !769
  store %"char[]" %63, ptr %taddr, align 8
  %64 = load { ptr, i64 }, ptr %taddr, align 8
  ret { ptr, i64 } %64
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.tconcat(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !770 {
entry:
  %s1 = alloca %"char[]", align 8
  %s2 = alloca %"char[]", align 8
  %taddr = alloca %any, align 8
  %result = alloca %"char[]", align 8
  store ptr %0, ptr %s1, align 8
  %ptradd = getelementptr inbounds i8, ptr %s1, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %s1, !771, !DIExpression(), !772)
  store ptr %2, ptr %s2, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %s2, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %s2, !773, !DIExpression(), !774)
  %4 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !775
  %i2nb = icmp eq ptr %4, null, !dbg !775
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !775

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !778
  br label %if.exit, !dbg !778

if.exit:                                          ; preds = %if.then, %entry
  %5 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !780
  %6 = insertvalue %any undef, ptr %5, 0, !dbg !777
  %7 = insertvalue %any %6, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !777
  %lo = load ptr, ptr %s1, align 8, !dbg !777
  %ptradd2 = getelementptr inbounds i8, ptr %s1, i64 8, !dbg !777
  %hi = load i64, ptr %ptradd2, align 8, !dbg !777
  %lo3 = load ptr, ptr %s2, align 8, !dbg !777
  %ptradd4 = getelementptr inbounds i8, ptr %s2, i64 8, !dbg !777
  %hi5 = load i64, ptr %ptradd4, align 8, !dbg !777
  store %any %7, ptr %taddr, align 8
  %lo6 = load i64, ptr %taddr, align 8
  %ptradd7 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi8 = load ptr, ptr %ptradd7, align 8
  %8 = call { ptr, i64 } @std.core.String.concat(ptr %lo, i64 %hi, ptr %lo3, i64 %hi5, i64 %lo6, ptr %hi8), !dbg !781
  store { ptr, i64 } %8, ptr %result, align 8
  %9 = load { ptr, i64 }, ptr %result, align 8
  ret { ptr, i64 } %9
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.core.String.zstr_tcopy(ptr %0, i64 %1) #0 comdat !dbg !782 {
entry:
  %s = alloca %"char[]", align 8
  %taddr = alloca %any, align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !785, !DIExpression(), !786)
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !787
  %i2nb = icmp eq ptr %2, null, !dbg !787
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !787

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !790
  br label %if.exit, !dbg !790

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !792
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !789
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !789
  %lo = load ptr, ptr %s, align 8, !dbg !789
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !789
  %hi = load i64, ptr %ptradd1, align 8, !dbg !789
  store %any %5, ptr %taddr, align 8
  %lo2 = load i64, ptr %taddr, align 8
  %ptradd3 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi4 = load ptr, ptr %ptradd3, align 8
  %6 = call ptr @std.core.String.zstr_copy(ptr %lo, i64 %hi, i64 %lo2, ptr %hi4) #6, !dbg !793
  ret ptr %6, !dbg !793
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.copy(ptr %0, i64 %1, i64 %2, ptr %3) #0 comdat !dbg !794 {
entry:
  %s = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %len = alloca i64, align 8
  %str = alloca ptr, align 8
  %allocator3 = alloca %any, align 8
  %size = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator4 = alloca %any, align 8
  %size5 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len8 = alloca i64, align 8
  %taddr = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !797, !DIExpression(), !798)
  store i64 %2, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %allocator, !799, !DIExpression(), !800)
    #dbg_declare(ptr %len, !801, !DIExpression(), !802)
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !803
  %4 = load i64, ptr %ptradd2, align 8, !dbg !803
  store i64 %4, ptr %len, align 8, !dbg !803
    #dbg_declare(ptr %str, !804, !DIExpression(), !805)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %5 = load i64, ptr %len, align 8, !dbg !806
  %add = add i64 %5, 1, !dbg !806
  store i64 %add, ptr %size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator4, ptr align 8 %allocator3, i32 16, i1 false)
  %6 = load i64, ptr %size, align 8
  store i64 %6, ptr %size5, align 8
  %7 = load i64, ptr %size5, align 8, !dbg !807
  %i2nb = icmp eq i64 %7, 0, !dbg !807
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !807

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !812
  br label %expr_block.exit, !dbg !812

if.exit:                                          ; preds = %entry
  %ptradd6 = getelementptr inbounds i8, ptr %allocator4, i64 8, !dbg !813
  %8 = load i64, ptr %ptradd6, align 8, !dbg !813
  %9 = inttoptr i64 %8 to ptr, !dbg !813
  %type = load ptr, ptr %.cachedtype, align 8
  %10 = icmp eq ptr %9, %type
  br i1 %10, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd7 = getelementptr inbounds i8, ptr %9, i64 16
  %11 = load ptr, ptr %ptradd7, align 8
  %12 = call ptr @.dyn_search(ptr %11, ptr @"$sel.acquire")
  store ptr %12, ptr %.inlinecache, align 8
  store ptr %9, ptr %.cachedtype, align 8
  br label %13

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %13

13:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %12, %cache_miss ]
  %14 = icmp eq ptr %fn_phi, null
  br i1 %14, label %missing_function, label %match

missing_function:                                 ; preds = %13
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !815
  call void %15(ptr @.panic_msg, i64 44, ptr @.file, i64 16, ptr @.func.55, i64 4, i32 68) #5, !dbg !815
  unreachable, !dbg !815

match:                                            ; preds = %13
  %16 = load ptr, ptr %allocator4, align 8
  %17 = load i64, ptr %size5, align 8
  %18 = call i64 %fn_phi(ptr %retparam, ptr %16, i64 %17, i32 0, i64 0), !dbg !815
  %not_err = icmp eq i64 %18, 0, !dbg !815
  %19 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !815
  br i1 %19, label %after_check, label %assign_optional, !dbg !815

assign_optional:                                  ; preds = %match
  store i64 %18, ptr %error_var, align 8, !dbg !815
  br label %panic_block, !dbg !815

after_check:                                      ; preds = %match
  %20 = load ptr, ptr %retparam, align 8, !dbg !815
  store ptr %20, ptr %blockret, align 8, !dbg !815
  br label %expr_block.exit, !dbg !815

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !815

panic_block:                                      ; preds = %assign_optional
  %21 = insertvalue %any undef, ptr %error_var, 0, !dbg !815
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !815
  store %any %22, ptr %varargslots, align 16
  %23 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %23, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 36, ptr @.file, i64 16, ptr @.func.55, i64 4, i32 57, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !809
  unreachable, !dbg !809

noerr_block:                                      ; preds = %expr_block.exit
  %24 = load ptr, ptr %blockret, align 8, !dbg !809
  store ptr %24, ptr %str, align 8, !dbg !809
  %25 = load ptr, ptr %str, align 8, !dbg !816
  store ptr %25, ptr %dst, align 8
  %26 = load ptr, ptr %s, align 8, !dbg !817
  store ptr %26, ptr %src, align 8
  %27 = load i64, ptr %len, align 8
  store i64 %27, ptr %len8, align 8
  %28 = load i64, ptr %len8, align 8, !dbg !818
  %eq = icmp eq i64 0, %28, !dbg !818
  br i1 %eq, label %or.phi, label %or.rhs, !dbg !818

or.rhs:                                           ; preds = %noerr_block
  %29 = load ptr, ptr %dst, align 8, !dbg !822
  %30 = load i64, ptr %len8, align 8, !dbg !823
  %ptradd_any = getelementptr i8, ptr %29, i64 %30, !dbg !823
  %31 = load ptr, ptr %src, align 8, !dbg !824
  %le = icmp ule ptr %ptradd_any, %31, !dbg !822
  br label %or.phi, !dbg !822

or.phi:                                           ; preds = %or.rhs, %noerr_block
  %val = phi i1 [ true, %noerr_block ], [ %le, %or.rhs ], !dbg !822
  br i1 %val, label %or.phi12, label %or.rhs9, !dbg !822

or.rhs9:                                          ; preds = %or.phi
  %32 = load ptr, ptr %src, align 8, !dbg !825
  %33 = load i64, ptr %len8, align 8, !dbg !826
  %ptradd_any10 = getelementptr i8, ptr %32, i64 %33, !dbg !826
  %34 = load ptr, ptr %dst, align 8, !dbg !827
  %le11 = icmp ule ptr %ptradd_any10, %34, !dbg !825
  br label %or.phi12, !dbg !825

or.phi12:                                         ; preds = %or.rhs9, %or.phi
  %val13 = phi i1 [ true, %or.phi ], [ %le11, %or.rhs9 ], !dbg !825
  br i1 %val13, label %assert_ok, label %assert_fail, !dbg !825

assert_fail:                                      ; preds = %or.phi12
  %35 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !818
  call void %35(ptr @.panic_msg.52, i64 95, ptr @.file.53, i64 6, ptr @.func.55, i64 4, i32 324) #5, !dbg !818
  unreachable, !dbg !818

assert_ok:                                        ; preds = %or.phi12
  %36 = load ptr, ptr %dst, align 8, !dbg !828
  %37 = load ptr, ptr %src, align 8, !dbg !829
  %38 = load i64, ptr %len8, align 8, !dbg !830
  call void @llvm.memcpy.p0.p0.i64(ptr %36, ptr %37, i64 %38, i1 false), !dbg !831
  %39 = load ptr, ptr %str, align 8, !dbg !832
  %40 = load i64, ptr %len, align 8, !dbg !833
  %ptradd14 = getelementptr inbounds i8, ptr %39, i64 %40, !dbg !833
  store i8 0, ptr %ptradd14, align 1, !dbg !834
  %41 = load ptr, ptr %str, align 8, !dbg !835
  %42 = load i64, ptr %len, align 8, !dbg !836
  %add15 = add i64 0, %42, !dbg !836
  %size16 = sub i64 %add15, 0, !dbg !836
  %43 = insertvalue %"char[]" undef, ptr %41, 0, !dbg !836
  %44 = insertvalue %"char[]" %43, i64 %size16, 1, !dbg !836
  store %"char[]" %44, ptr %taddr, align 8
  %45 = load { ptr, i64 }, ptr %taddr, align 8
  ret { ptr, i64 } %45
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.free(ptr %0, i64 %1, ptr %2) #0 comdat !dbg !837 {
entry:
  %s = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %allocator7 = alloca %any, align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %ptr = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !840
  %3 = icmp eq ptr %0, null, !dbg !840
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !840
  br i1 %4, label %panic, label %checkok, !dbg !840

checkok:                                          ; preds = %entry
  store ptr %0, ptr %s, align 8
    #dbg_declare(ptr %s, !841, !DIExpression(), !842)
  store i64 %1, ptr %allocator, align 8
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %allocator, !843, !DIExpression(), !844)
  %5 = load ptr, ptr %s, align 8, !dbg !845
  %checknull = icmp eq ptr %5, null, !dbg !845
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !845
  br i1 %6, label %panic1, label %checkok2, !dbg !845

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !845
  %8 = urem i64 %7, 8, !dbg !845
  %9 = icmp ne i64 %8, 0, !dbg !845
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !845
  br i1 %10, label %panic3, label %checkok6, !dbg !845

checkok6:                                         ; preds = %checkok2
  %11 = load ptr, ptr %5, align 8, !dbg !845
  %i2nb = icmp eq ptr %11, null, !dbg !845
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !845

if.then:                                          ; preds = %checkok6
  ret void, !dbg !846

if.exit:                                          ; preds = %checkok6
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator7, ptr align 8 %allocator, i32 16, i1 false)
  %12 = load ptr, ptr %s, align 8, !dbg !847
  %checknull8 = icmp eq ptr %12, null, !dbg !847
  %13 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !847
  br i1 %13, label %panic9, label %checkok10, !dbg !847

checkok10:                                        ; preds = %if.exit
  %14 = ptrtoint ptr %12 to i64, !dbg !847
  %15 = urem i64 %14, 8, !dbg !847
  %16 = icmp ne i64 %15, 0, !dbg !847
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !847
  br i1 %17, label %panic11, label %checkok18, !dbg !847

checkok18:                                        ; preds = %checkok10
  %18 = load ptr, ptr %12, align 8, !dbg !847
  store ptr %18, ptr %ptr, align 8
  %19 = load ptr, ptr %ptr, align 8, !dbg !848
  %i2nb19 = icmp eq ptr %19, null, !dbg !848
  br i1 %i2nb19, label %if.then20, label %if.exit21, !dbg !848

if.then20:                                        ; preds = %checkok18
  br label %expr_block.exit, !dbg !851

if.exit21:                                        ; preds = %checkok18
  %ptradd22 = getelementptr inbounds i8, ptr %allocator7, i64 8, !dbg !852
  %20 = load i64, ptr %ptradd22, align 8, !dbg !852
  %21 = inttoptr i64 %20 to ptr, !dbg !852
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !840
  %22 = icmp eq ptr %21, %type, !dbg !840
  br i1 %22, label %cache_hit, label %cache_miss, !dbg !840

cache_miss:                                       ; preds = %if.exit21
  %ptradd23 = getelementptr inbounds i8, ptr %21, i64 16, !dbg !840
  %23 = load ptr, ptr %ptradd23, align 8, !dbg !840
  %24 = call ptr @.dyn_search(ptr %23, ptr @"$sel.release"), !dbg !840
  store ptr %24, ptr %.inlinecache, align 8, !dbg !840
  store ptr %21, ptr %.cachedtype, align 8, !dbg !840
  br label %25, !dbg !840

cache_hit:                                        ; preds = %if.exit21
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !840
  br label %25, !dbg !840

25:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %24, %cache_miss ], !dbg !840
  %26 = icmp eq ptr %fn_phi, null, !dbg !840
  br i1 %26, label %missing_function, label %match, !dbg !840

missing_function:                                 ; preds = %25
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !853
  call void %27(ptr @.panic_msg.26, i64 44, ptr @.file, i64 16, ptr @.func.57, i64 4, i32 105) #5, !dbg !853
  unreachable, !dbg !853

match:                                            ; preds = %25
  %28 = load ptr, ptr %allocator7, align 8, !dbg !853
  %29 = load ptr, ptr %ptr, align 8, !dbg !853
  call void %fn_phi(ptr %28, ptr %29, i8 zeroext 0), !dbg !853
  br label %expr_block.exit, !dbg !853

expr_block.exit:                                  ; preds = %match, %if.then20
  %30 = load ptr, ptr %s, align 8, !dbg !854
  %checknull24 = icmp eq ptr %30, null, !dbg !854
  %31 = call i1 @llvm.expect.i1(i1 %checknull24, i1 false), !dbg !854
  br i1 %31, label %panic25, label %checkok26, !dbg !854

checkok26:                                        ; preds = %expr_block.exit
  %32 = ptrtoint ptr %30 to i64, !dbg !854
  %33 = urem i64 %32, 8, !dbg !854
  %34 = icmp ne i64 %33, 0, !dbg !854
  %35 = call i1 @llvm.expect.i1(i1 %34, i1 false), !dbg !854
  br i1 %35, label %panic27, label %checkok34, !dbg !854

checkok34:                                        ; preds = %checkok26
  store %"char[]" zeroinitializer, ptr %30, align 8, !dbg !855
  ret void, !dbg !855

panic:                                            ; preds = %entry
  %36 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !842
  call void %36(ptr @.panic_msg.56, i64 59, ptr @.file.18, i64 9, ptr @.func.57, i64 4, i32 563) #5, !dbg !842
  unreachable, !dbg !842

panic1:                                           ; preds = %checkok
  %37 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !845
  call void %37(ptr @.panic_msg.58, i64 42, ptr @.file.18, i64 9, ptr @.func.57, i64 4, i32 565) #5, !dbg !845
  unreachable, !dbg !845

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %38 = insertvalue %any undef, ptr %taddr, 0
  %39 = insertvalue %any %38, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %40 = insertvalue %any undef, ptr %taddr4, 0
  %41 = insertvalue %any %40, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %39, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %41, ptr %ptradd5, align 16
  %42 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %42, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 94, ptr @.file.18, i64 9, ptr @.func.57, i64 4, i32 565, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !845
  unreachable, !dbg !845

panic9:                                           ; preds = %if.exit
  %43 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !847
  call void %43(ptr @.panic_msg.58, i64 42, ptr @.file.18, i64 9, ptr @.func.57, i64 4, i32 566) #5, !dbg !847
  unreachable, !dbg !847

panic11:                                          ; preds = %checkok10
  store i64 8, ptr %taddr12, align 8
  %44 = insertvalue %any undef, ptr %taddr12, 0
  %45 = insertvalue %any %44, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr13, align 8
  %46 = insertvalue %any undef, ptr %taddr13, 0
  %47 = insertvalue %any %46, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %45, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %47, ptr %ptradd15, align 16
  %48 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %48, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 94, ptr @.file.18, i64 9, ptr @.func.57, i64 4, i32 566, ptr byval(%"any[]") align 8 %indirectarg17) #5, !dbg !847
  unreachable, !dbg !847

panic25:                                          ; preds = %expr_block.exit
  %49 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !854
  call void %49(ptr @.panic_msg.58, i64 42, ptr @.file.18, i64 9, ptr @.func.57, i64 4, i32 567) #5, !dbg !854
  unreachable, !dbg !854

panic27:                                          ; preds = %checkok26
  store i64 8, ptr %taddr28, align 8
  %50 = insertvalue %any undef, ptr %taddr28, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr29, align 8
  %52 = insertvalue %any undef, ptr %taddr29, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %51, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %53, ptr %ptradd31, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %54, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 94, ptr @.file.18, i64 9, ptr @.func.57, i64 4, i32 567, ptr byval(%"any[]") align 8 %indirectarg33) #5, !dbg !854
  unreachable, !dbg !854
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.tcopy(ptr %0, i64 %1) #0 comdat !dbg !856 {
entry:
  %s = alloca %"char[]", align 8
  %taddr = alloca %any, align 8
  %result = alloca %"char[]", align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !859, !DIExpression(), !860)
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !861
  %i2nb = icmp eq ptr %2, null, !dbg !861
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !861

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !864
  br label %if.exit, !dbg !864

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !866
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !863
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !863
  %lo = load ptr, ptr %s, align 8, !dbg !863
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !863
  %hi = load i64, ptr %ptradd1, align 8, !dbg !863
  store %any %5, ptr %taddr, align 8
  %lo2 = load i64, ptr %taddr, align 8
  %ptradd3 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi4 = load ptr, ptr %ptradd3, align 8
  %6 = call { ptr, i64 } @std.core.String.copy(ptr %lo, i64 %hi, i64 %lo2, ptr %hi4) #6, !dbg !867
  store { ptr, i64 } %6, ptr %result, align 8
  %7 = load { ptr, i64 }, ptr %result, align 8
  ret { ptr, i64 } %7
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.string.ZString.copy(ptr %0, i64 %1, ptr %2) #0 comdat !dbg !868 {
entry:
  %z = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %result = alloca %"char[]", align 8
  %result5 = alloca %"char[]", align 8
  store ptr %0, ptr %z, align 8
    #dbg_declare(ptr %z, !871, !DIExpression(), !872)
  store i64 %1, ptr %allocator, align 8
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %allocator, !873, !DIExpression(), !874)
  %3 = load ptr, ptr %z, align 8, !dbg !875
  %4 = call { ptr, i64 } @std.core.string.ZString.str_view(ptr %3), !dbg !875
  store { ptr, i64 } %4, ptr %result, align 8
  %lo = load ptr, ptr %result, align 8, !dbg !876
  %ptradd1 = getelementptr inbounds i8, ptr %result, i64 8, !dbg !876
  %hi = load i64, ptr %ptradd1, align 8, !dbg !876
  %lo2 = load i64, ptr %allocator, align 8, !dbg !876
  %ptradd3 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !876
  %hi4 = load ptr, ptr %ptradd3, align 8, !dbg !876
  %5 = call { ptr, i64 } @std.core.String.copy(ptr %lo, i64 %hi, i64 %lo2, ptr %hi4) #6, !dbg !875
  store { ptr, i64 } %5, ptr %result5, align 8
  %6 = load { ptr, i64 }, ptr %result5, align 8
  ret { ptr, i64 } %6
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.string.ZString.tcopy(ptr %0) #0 comdat !dbg !877 {
entry:
  %z = alloca ptr, align 8
  %result = alloca %"char[]", align 8
  %taddr = alloca %any, align 8
  %result4 = alloca %"char[]", align 8
  store ptr %0, ptr %z, align 8
    #dbg_declare(ptr %z, !878, !DIExpression(), !879)
  %1 = load ptr, ptr %z, align 8, !dbg !880
  %2 = call { ptr, i64 } @std.core.string.ZString.str_view(ptr %1), !dbg !880
  store { ptr, i64 } %2, ptr %result, align 8
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !881
  %i2nb = icmp eq ptr %3, null, !dbg !881
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !881

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !884
  br label %if.exit, !dbg !884

if.exit:                                          ; preds = %if.then, %entry
  %4 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !886
  %5 = insertvalue %any undef, ptr %4, 0, !dbg !883
  %6 = insertvalue %any %5, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !883
  %lo = load ptr, ptr %result, align 8, !dbg !883
  %ptradd = getelementptr inbounds i8, ptr %result, i64 8, !dbg !883
  %hi = load i64, ptr %ptradd, align 8, !dbg !883
  store %any %6, ptr %taddr, align 8
  %lo1 = load i64, ptr %taddr, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi3 = load ptr, ptr %ptradd2, align 8
  %7 = call { ptr, i64 } @std.core.String.copy(ptr %lo, i64 %hi, i64 %lo1, ptr %hi3) #6, !dbg !880
  store { ptr, i64 } %7, ptr %result4, align 8
  %8 = load { ptr, i64 }, ptr %result4, align 8
  ret { ptr, i64 } %8
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_new_utf16(ptr %0, ptr %1, i64 %2, i64 %3, ptr %4) #0 comdat !dbg !887 {
entry:
  %s = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %len16 = alloca i64, align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator3 = alloca %any, align 8
  %elements = alloca i64, align 8
  %allocator4 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %error_var9 = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !898, !DIExpression(), !899)
  store i64 %3, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %allocator, !900, !DIExpression(), !901)
    #dbg_declare(ptr %len16, !902, !DIExpression(), !903)
  %lo = load ptr, ptr %s, align 8, !dbg !904
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !904
  %hi = load i64, ptr %ptradd2, align 8, !dbg !904
  %5 = call i64 @std.core.string.conv.utf16len_for_utf8(ptr %lo, i64 %hi), !dbg !905
  store i64 %5, ptr %len16, align 8, !dbg !905
    #dbg_declare(ptr %data, !906, !DIExpression(), !907)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %6 = load i64, ptr %len16, align 8, !dbg !908
  %add = add i64 %6, 1, !dbg !908
  store i64 %add, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator4, ptr align 8 %allocator3, i32 16, i1 false)
  %7 = load i64, ptr %elements, align 8, !dbg !909
  %mul = mul i64 2, %7, !dbg !912
  store i64 %mul, ptr %size, align 8
  %8 = load i64, ptr %size, align 8, !dbg !913
  %i2nb = icmp eq i64 %8, 0, !dbg !913
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !913

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !916
  br label %expr_block.exit, !dbg !916

if.exit:                                          ; preds = %entry
  %ptradd5 = getelementptr inbounds i8, ptr %allocator4, i64 8, !dbg !917
  %9 = load i64, ptr %ptradd5, align 8, !dbg !917
  %10 = inttoptr i64 %9 to ptr, !dbg !917
  %type = load ptr, ptr %.cachedtype, align 8
  %11 = icmp eq ptr %10, %type
  br i1 %11, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd6 = getelementptr inbounds i8, ptr %10, i64 16
  %12 = load ptr, ptr %ptradd6, align 8
  %13 = call ptr @.dyn_search(ptr %12, ptr @"$sel.acquire")
  store ptr %13, ptr %.inlinecache, align 8
  store ptr %10, ptr %.cachedtype, align 8
  br label %14

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %14

14:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %13, %cache_miss ]
  %15 = icmp eq ptr %fn_phi, null
  br i1 %15, label %missing_function, label %match

missing_function:                                 ; preds = %14
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !919
  call void %16(ptr @.panic_msg, i64 44, ptr @.file, i64 16, ptr @.func.59, i64 12, i32 68) #5, !dbg !919
  unreachable, !dbg !919

match:                                            ; preds = %14
  %17 = load ptr, ptr %allocator4, align 8
  %18 = load i64, ptr %size, align 8
  %19 = call i64 %fn_phi(ptr %retparam, ptr %17, i64 %18, i32 0, i64 0), !dbg !919
  %not_err = icmp eq i64 %19, 0, !dbg !919
  %20 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !919
  br i1 %20, label %after_check, label %assign_optional, !dbg !919

assign_optional:                                  ; preds = %match
  store i64 %19, ptr %error_var, align 8, !dbg !919
  br label %guard_block, !dbg !919

after_check:                                      ; preds = %match
  %21 = load ptr, ptr %retparam, align 8, !dbg !919
  store ptr %21, ptr %blockret, align 8, !dbg !919
  br label %expr_block.exit, !dbg !919

expr_block.exit:                                  ; preds = %after_check, %if.then
  %22 = load ptr, ptr %blockret, align 8, !dbg !919
  store ptr %22, ptr %taddr, align 8
  %23 = load ptr, ptr %taddr, align 8
  %24 = load i64, ptr %elements, align 8, !dbg !920
  %add7 = add i64 0, %24, !dbg !920
  %size8 = sub i64 %add7, 0, !dbg !920
  %25 = insertvalue %"ushort[]" undef, ptr %23, 0, !dbg !920
  %26 = insertvalue %"ushort[]" %25, i64 %size8, 1, !dbg !920
  br label %noerr_block, !dbg !920

guard_block:                                      ; preds = %assign_optional
  %27 = load i64, ptr %error_var, align 8, !dbg !920
  ret i64 %27, !dbg !920

noerr_block:                                      ; preds = %expr_block.exit
  %28 = extractvalue %"ushort[]" %26, 0, !dbg !920
  store ptr %28, ptr %data, align 8, !dbg !920
  %lo10 = load ptr, ptr %s, align 8, !dbg !921
  %ptradd11 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !921
  %hi12 = load i64, ptr %ptradd11, align 8, !dbg !921
  %29 = load ptr, ptr %data, align 8, !dbg !921
  %30 = call i64 @std.core.string.conv.utf8to16_unsafe(ptr %lo10, i64 %hi12, ptr %29), !dbg !922
  %not_err13 = icmp eq i64 %30, 0, !dbg !922
  %31 = call i1 @llvm.expect.i1(i1 %not_err13, i1 true), !dbg !922
  br i1 %31, label %after_check15, label %assign_optional14, !dbg !922

assign_optional14:                                ; preds = %noerr_block
  store i64 %30, ptr %error_var9, align 8, !dbg !922
  br label %guard_block16, !dbg !922

after_check15:                                    ; preds = %noerr_block
  br label %noerr_block17, !dbg !922

guard_block16:                                    ; preds = %assign_optional14
  %32 = load i64, ptr %error_var9, align 8, !dbg !922
  ret i64 %32, !dbg !922

noerr_block17:                                    ; preds = %after_check15
  %33 = load ptr, ptr %data, align 8, !dbg !923
  %34 = load i64, ptr %len16, align 8, !dbg !924
  %ptroffset = getelementptr inbounds [2 x i8], ptr %33, i64 %34, !dbg !924
  store i16 0, ptr %ptroffset, align 2, !dbg !925
  %35 = load ptr, ptr %data, align 8, !dbg !926
  %36 = load i64, ptr %len16, align 8, !dbg !927
  %add18 = add i64 0, %36, !dbg !927
  %size19 = sub i64 %add18, 0, !dbg !927
  %37 = insertvalue %"ushort[]" undef, ptr %35, 0, !dbg !927
  %38 = insertvalue %"ushort[]" %37, i64 %size19, 1, !dbg !927
  store %"ushort[]" %38, ptr %0, align 8, !dbg !927
  ret i64 0, !dbg !927
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_temp_utf16(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !928 {
entry:
  %s = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"ushort[]", align 8
  %taddr = alloca %any, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !931, !DIExpression(), !932)
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !933
  %i2nb = icmp eq ptr %3, null, !dbg !933
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !933

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !936
  br label %if.exit, !dbg !936

if.exit:                                          ; preds = %if.then, %entry
  %4 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !938
  %5 = insertvalue %any undef, ptr %4, 0, !dbg !935
  %6 = insertvalue %any %5, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !935
  %lo = load ptr, ptr %s, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8
  %hi = load i64, ptr %ptradd1, align 8
  store %any %6, ptr %taddr, align 8
  %lo2 = load i64, ptr %taddr, align 8
  %ptradd3 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi4 = load ptr, ptr %ptradd3, align 8
  %7 = call i64 @std.core.String.to_new_utf16(ptr %retparam, ptr %lo, i64 %hi, i64 %lo2, ptr %hi4), !dbg !939
  %not_err = icmp eq i64 %7, 0, !dbg !939
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !939
  br i1 %8, label %after_check, label %assign_optional, !dbg !939

assign_optional:                                  ; preds = %if.exit
  store i64 %7, ptr %reterr, align 8, !dbg !939
  br label %err_retblock, !dbg !939

after_check:                                      ; preds = %if.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !939
  ret i64 0, !dbg !939

err_retblock:                                     ; preds = %assign_optional
  %9 = load i64, ptr %reterr, align 8, !dbg !939
  ret i64 %9, !dbg !939
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_wstring(ptr %0, ptr %1, i64 %2, i64 %3, ptr %4) #0 comdat !dbg !940 {
entry:
  %s = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"ushort[]", align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !946, !DIExpression(), !947)
  store i64 %3, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %allocator, !948, !DIExpression(), !949)
  %lo = load ptr, ptr %s, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load i64, ptr %allocator, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %allocator, i64 8
  %hi5 = load ptr, ptr %ptradd4, align 8
  %5 = call i64 @std.core.String.to_new_utf16(ptr %retparam, ptr %lo, i64 %hi, i64 %lo3, ptr %hi5), !dbg !950
  %not_err = icmp eq i64 %5, 0, !dbg !950
  %6 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !950
  br i1 %6, label %after_check, label %assign_optional, !dbg !950

assign_optional:                                  ; preds = %entry
  store i64 %5, ptr %reterr, align 8, !dbg !950
  br label %err_retblock, !dbg !950

after_check:                                      ; preds = %entry
  %7 = load ptr, ptr %retparam, align 8, !dbg !950
  store ptr %7, ptr %0, align 8, !dbg !950
  ret i64 0, !dbg !950

err_retblock:                                     ; preds = %assign_optional
  %8 = load i64, ptr %reterr, align 8, !dbg !950
  ret i64 %8, !dbg !950
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_temp_wstring(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !951 {
entry:
  %s = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca %any, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !954, !DIExpression(), !955)
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !956
  %i2nb = icmp eq ptr %3, null, !dbg !956
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !956

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !959
  br label %if.exit, !dbg !959

if.exit:                                          ; preds = %if.then, %entry
  %4 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !961
  %5 = insertvalue %any undef, ptr %4, 0, !dbg !958
  %6 = insertvalue %any %5, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !958
  %lo = load ptr, ptr %s, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8
  %hi = load i64, ptr %ptradd1, align 8
  store %any %6, ptr %taddr, align 8
  %lo2 = load i64, ptr %taddr, align 8
  %ptradd3 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi4 = load ptr, ptr %ptradd3, align 8
  %7 = call i64 @std.core.String.to_wstring(ptr %retparam, ptr %lo, i64 %hi, i64 %lo2, ptr %hi4), !dbg !962
  %not_err = icmp eq i64 %7, 0, !dbg !962
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !962
  br i1 %8, label %after_check, label %assign_optional, !dbg !962

assign_optional:                                  ; preds = %if.exit
  store i64 %7, ptr %reterr, align 8, !dbg !962
  br label %err_retblock, !dbg !962

after_check:                                      ; preds = %if.exit
  %9 = load ptr, ptr %retparam, align 8, !dbg !962
  store ptr %9, ptr %0, align 8, !dbg !962
  ret i64 0, !dbg !962

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !962
  ret i64 %10, !dbg !962
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_new_wstring(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !963 {
entry:
  %s = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca ptr, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !964, !DIExpression(), !965)
  %lo = load ptr, ptr %s, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8
  %hi = load i64, ptr %ptradd1, align 8
  %lo2 = load i64, ptr @std.core.mem.allocator.thread_allocator, align 8
  %hi3 = load ptr, ptr getelementptr inbounds (i8, ptr @std.core.mem.allocator.thread_allocator, i64 8), align 8
  %3 = call i64 @std.core.String.to_wstring(ptr %retparam, ptr %lo, i64 %hi, i64 %lo2, ptr %hi3), !dbg !966
  %not_err = icmp eq i64 %3, 0, !dbg !966
  %4 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !966
  br i1 %4, label %after_check, label %assign_optional, !dbg !966

assign_optional:                                  ; preds = %entry
  store i64 %3, ptr %reterr, align 8, !dbg !966
  br label %err_retblock, !dbg !966

after_check:                                      ; preds = %entry
  %5 = load ptr, ptr %retparam, align 8, !dbg !966
  store ptr %5, ptr %0, align 8, !dbg !966
  ret i64 0, !dbg !966

err_retblock:                                     ; preds = %assign_optional
  %6 = load i64, ptr %reterr, align 8, !dbg !966
  ret i64 %6, !dbg !966
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_utf32(ptr %0, ptr %1, i64 %2, i64 %3, ptr %4) #0 comdat !dbg !967 {
entry:
  %s = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %codepoints = alloca i64, align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator3 = alloca %any, align 8
  %elements = alloca i64, align 8
  %allocator4 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %error_var9 = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !977, !DIExpression(), !978)
  store i64 %3, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %allocator, !979, !DIExpression(), !980)
    #dbg_declare(ptr %codepoints, !981, !DIExpression(), !982)
  %lo = load ptr, ptr %s, align 8, !dbg !983
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !983
  %hi = load i64, ptr %ptradd2, align 8, !dbg !983
  %5 = call i64 @std.core.string.conv.utf8_codepoints(ptr %lo, i64 %hi), !dbg !984
  store i64 %5, ptr %codepoints, align 8, !dbg !984
    #dbg_declare(ptr %data, !985, !DIExpression(), !986)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %6 = load i64, ptr %codepoints, align 8, !dbg !987
  %add = add i64 %6, 1, !dbg !987
  store i64 %add, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator4, ptr align 8 %allocator3, i32 16, i1 false)
  %7 = load i64, ptr %elements, align 8, !dbg !988
  %mul = mul i64 4, %7, !dbg !991
  store i64 %mul, ptr %size, align 8
  %8 = load i64, ptr %size, align 8, !dbg !992
  %i2nb = icmp eq i64 %8, 0, !dbg !992
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !992

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !995
  br label %expr_block.exit, !dbg !995

if.exit:                                          ; preds = %entry
  %ptradd5 = getelementptr inbounds i8, ptr %allocator4, i64 8, !dbg !996
  %9 = load i64, ptr %ptradd5, align 8, !dbg !996
  %10 = inttoptr i64 %9 to ptr, !dbg !996
  %type = load ptr, ptr %.cachedtype, align 8
  %11 = icmp eq ptr %10, %type
  br i1 %11, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd6 = getelementptr inbounds i8, ptr %10, i64 16
  %12 = load ptr, ptr %ptradd6, align 8
  %13 = call ptr @.dyn_search(ptr %12, ptr @"$sel.acquire")
  store ptr %13, ptr %.inlinecache, align 8
  store ptr %10, ptr %.cachedtype, align 8
  br label %14

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %14

14:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %13, %cache_miss ]
  %15 = icmp eq ptr %fn_phi, null
  br i1 %15, label %missing_function, label %match

missing_function:                                 ; preds = %14
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !998
  call void %16(ptr @.panic_msg, i64 44, ptr @.file, i64 16, ptr @.func.60, i64 8, i32 68) #5, !dbg !998
  unreachable, !dbg !998

match:                                            ; preds = %14
  %17 = load ptr, ptr %allocator4, align 8
  %18 = load i64, ptr %size, align 8
  %19 = call i64 %fn_phi(ptr %retparam, ptr %17, i64 %18, i32 0, i64 0), !dbg !998
  %not_err = icmp eq i64 %19, 0, !dbg !998
  %20 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !998
  br i1 %20, label %after_check, label %assign_optional, !dbg !998

assign_optional:                                  ; preds = %match
  store i64 %19, ptr %error_var, align 8, !dbg !998
  br label %guard_block, !dbg !998

after_check:                                      ; preds = %match
  %21 = load ptr, ptr %retparam, align 8, !dbg !998
  store ptr %21, ptr %blockret, align 8, !dbg !998
  br label %expr_block.exit, !dbg !998

expr_block.exit:                                  ; preds = %after_check, %if.then
  %22 = load ptr, ptr %blockret, align 8, !dbg !998
  store ptr %22, ptr %taddr, align 8
  %23 = load ptr, ptr %taddr, align 8
  %24 = load i64, ptr %elements, align 8, !dbg !999
  %add7 = add i64 0, %24, !dbg !999
  %size8 = sub i64 %add7, 0, !dbg !999
  %25 = insertvalue %"uint[]" undef, ptr %23, 0, !dbg !999
  %26 = insertvalue %"uint[]" %25, i64 %size8, 1, !dbg !999
  br label %noerr_block, !dbg !999

guard_block:                                      ; preds = %assign_optional
  %27 = load i64, ptr %error_var, align 8, !dbg !999
  ret i64 %27, !dbg !999

noerr_block:                                      ; preds = %expr_block.exit
  %28 = extractvalue %"uint[]" %26, 0, !dbg !999
  store ptr %28, ptr %data, align 8, !dbg !999
  %lo10 = load ptr, ptr %s, align 8, !dbg !1000
  %ptradd11 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !1000
  %hi12 = load i64, ptr %ptradd11, align 8, !dbg !1000
  %29 = load ptr, ptr %data, align 8, !dbg !1000
  %30 = call i64 @std.core.string.conv.utf8to32_unsafe(ptr %lo10, i64 %hi12, ptr %29), !dbg !1001
  %not_err13 = icmp eq i64 %30, 0, !dbg !1001
  %31 = call i1 @llvm.expect.i1(i1 %not_err13, i1 true), !dbg !1001
  br i1 %31, label %after_check15, label %assign_optional14, !dbg !1001

assign_optional14:                                ; preds = %noerr_block
  store i64 %30, ptr %error_var9, align 8, !dbg !1001
  br label %guard_block16, !dbg !1001

after_check15:                                    ; preds = %noerr_block
  br label %noerr_block17, !dbg !1001

guard_block16:                                    ; preds = %assign_optional14
  %32 = load i64, ptr %error_var9, align 8, !dbg !1001
  ret i64 %32, !dbg !1001

noerr_block17:                                    ; preds = %after_check15
  %33 = load ptr, ptr %data, align 8, !dbg !1002
  %34 = load i64, ptr %codepoints, align 8, !dbg !1003
  %ptroffset = getelementptr inbounds [4 x i8], ptr %33, i64 %34, !dbg !1003
  store i32 0, ptr %ptroffset, align 4, !dbg !1004
  %35 = load ptr, ptr %data, align 8, !dbg !1005
  %36 = load i64, ptr %codepoints, align 8, !dbg !1006
  %add18 = add i64 0, %36, !dbg !1006
  %size19 = sub i64 %add18, 0, !dbg !1006
  %37 = insertvalue %"uint[]" undef, ptr %35, 0, !dbg !1006
  %38 = insertvalue %"uint[]" %37, i64 %size19, 1, !dbg !1006
  store %"uint[]" %38, ptr %0, align 8, !dbg !1006
  ret i64 0, !dbg !1006
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_new_utf32(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1007 {
entry:
  %s = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"uint[]", align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !1010, !DIExpression(), !1011)
  %lo = load ptr, ptr %s, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8
  %hi = load i64, ptr %ptradd1, align 8
  %lo2 = load i64, ptr @std.core.mem.allocator.thread_allocator, align 8
  %hi3 = load ptr, ptr getelementptr inbounds (i8, ptr @std.core.mem.allocator.thread_allocator, i64 8), align 8
  %3 = call i64 @std.core.String.to_utf32(ptr %retparam, ptr %lo, i64 %hi, i64 %lo2, ptr %hi3) #6, !dbg !1012
  %not_err = icmp eq i64 %3, 0, !dbg !1012
  %4 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1012
  br i1 %4, label %after_check, label %assign_optional, !dbg !1012

assign_optional:                                  ; preds = %entry
  store i64 %3, ptr %reterr, align 8, !dbg !1012
  br label %err_retblock, !dbg !1012

after_check:                                      ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !1012
  ret i64 0, !dbg !1012

err_retblock:                                     ; preds = %assign_optional
  %5 = load i64, ptr %reterr, align 8, !dbg !1012
  ret i64 %5, !dbg !1012
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_temp_utf32(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1013 {
entry:
  %s = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"uint[]", align 8
  %taddr = alloca %any, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !1014, !DIExpression(), !1015)
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !1016
  %i2nb = icmp eq ptr %3, null, !dbg !1016
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1016

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !1019
  br label %if.exit, !dbg !1019

if.exit:                                          ; preds = %if.then, %entry
  %4 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !1021
  %5 = insertvalue %any undef, ptr %4, 0, !dbg !1018
  %6 = insertvalue %any %5, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !1018
  %lo = load ptr, ptr %s, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8
  %hi = load i64, ptr %ptradd1, align 8
  store %any %6, ptr %taddr, align 8
  %lo2 = load i64, ptr %taddr, align 8
  %ptradd3 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi4 = load ptr, ptr %ptradd3, align 8
  %7 = call i64 @std.core.String.to_utf32(ptr %retparam, ptr %lo, i64 %hi, i64 %lo2, ptr %hi4) #6, !dbg !1022
  %not_err = icmp eq i64 %7, 0, !dbg !1022
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1022
  br i1 %8, label %after_check, label %assign_optional, !dbg !1022

assign_optional:                                  ; preds = %if.exit
  store i64 %7, ptr %reterr, align 8, !dbg !1022
  br label %err_retblock, !dbg !1022

after_check:                                      ; preds = %if.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !1022
  ret i64 0, !dbg !1022

err_retblock:                                     ; preds = %assign_optional
  %9 = load i64, ptr %reterr, align 8, !dbg !1022
  ret i64 %9, !dbg !1022
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.convert_ascii_to_lower(ptr %0, i64 %1) #0 comdat !dbg !1023 {
entry:
  %s = alloca %"char[]", align 8
  %.anon = alloca i64, align 8
  %c = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !1026, !DIExpression(), !1027)
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !1028
  %2 = load i64, ptr %ptradd1, align 8, !dbg !1028
    #dbg_declare(ptr %.anon, !1030, !DIExpression(), !1028)
  store i64 0, ptr %.anon, align 8, !dbg !1028
  br label %loop.cond, !dbg !1028

loop.cond:                                        ; preds = %if.exit, %entry
  %3 = load i64, ptr %.anon, align 8, !dbg !1028
  %lt = icmp ult i64 %3, %2, !dbg !1028
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1028

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !1031, !DIExpression(), !1033)
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !1034
  %4 = load i64, ptr %ptradd2, align 8, !dbg !1034
  %5 = load ptr, ptr %s, align 8, !dbg !1034
  %6 = load i64, ptr %.anon, align 8, !dbg !1034
  %ge = icmp uge i64 %6, %4, !dbg !1034
  %7 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1034
  br i1 %7, label %panic, label %checkok, !dbg !1034

checkok:                                          ; preds = %loop.body
  %ptradd5 = getelementptr inbounds i8, ptr %5, i64 %6, !dbg !1034
  store ptr %ptradd5, ptr %c, align 8, !dbg !1034
  %8 = load ptr, ptr %c, align 8, !dbg !1035
  %checknull = icmp eq ptr %8, null, !dbg !1035
  %9 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1035
  br i1 %9, label %panic6, label %checkok7, !dbg !1035

checkok7:                                         ; preds = %checkok
  %10 = load i8, ptr %8, align 1, !dbg !1035
  %11 = call i8 @std.ascii.char.is_upper(i8 zeroext %10), !dbg !1035
  %12 = trunc i8 %11 to i1, !dbg !1035
  br i1 %12, label %if.then, label %if.exit, !dbg !1035

if.then:                                          ; preds = %checkok7
  %13 = load ptr, ptr %c, align 8, !dbg !1036
  %checknull8 = icmp eq ptr %13, null, !dbg !1036
  %14 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !1036
  br i1 %14, label %panic9, label %checkok10, !dbg !1036

checkok10:                                        ; preds = %if.then
  %15 = load i8, ptr %13, align 1, !dbg !1036
  %add = add i8 %15, 32, !dbg !1037
  store i8 %add, ptr %13, align 1, !dbg !1037
  br label %if.exit, !dbg !1037

if.exit:                                          ; preds = %checkok10, %checkok7
  %16 = load i64, ptr %.anon, align 8, !dbg !1028
  %addnuw = add nuw i64 %16, 1, !dbg !1028
  store i64 %addnuw, ptr %.anon, align 8, !dbg !1028
  br label %loop.cond, !dbg !1028

loop.exit:                                        ; preds = %loop.cond
  ret void, !dbg !1028

panic:                                            ; preds = %loop.body
  store i64 %4, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr3, align 8
  %19 = insertvalue %any undef, ptr %taddr3, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %18, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd4, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.61, i64 22, i32 636, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1034
  unreachable, !dbg !1034

panic6:                                           ; preds = %checkok
  %22 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1035
  call void %22(ptr @.panic_msg.62, i64 42, ptr @.file.18, i64 9, ptr @.func.61, i64 22, i32 636) #5, !dbg !1035
  unreachable, !dbg !1035

panic9:                                           ; preds = %if.then
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1036
  call void %23(ptr @.panic_msg.62, i64 42, ptr @.file.18, i64 9, ptr @.func.61, i64 22, i32 636) #5, !dbg !1036
  unreachable, !dbg !1036
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.new_ascii_to_lower(ptr %0, i64 %1, i64 %2, ptr %3) #0 comdat !dbg !1038 {
entry:
  %s = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %copy = alloca %"char[]", align 8
  %result = alloca %"char[]", align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !1039, !DIExpression(), !1040)
  store i64 %2, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %allocator, !1041, !DIExpression(), !1042)
    #dbg_declare(ptr %copy, !1043, !DIExpression(), !1044)
  %lo = load ptr, ptr %s, align 8, !dbg !1045
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !1045
  %hi = load i64, ptr %ptradd2, align 8, !dbg !1045
  %lo3 = load i64, ptr %allocator, align 8, !dbg !1045
  %ptradd4 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !1045
  %hi5 = load ptr, ptr %ptradd4, align 8, !dbg !1045
  %4 = call { ptr, i64 } @std.core.String.copy(ptr %lo, i64 %hi, i64 %lo3, ptr %hi5), !dbg !1046
  store { ptr, i64 } %4, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %copy, ptr align 8 %result, i32 16, i1 false)
  %lo6 = load ptr, ptr %copy, align 8, !dbg !1047
  %ptradd7 = getelementptr inbounds i8, ptr %copy, i64 8, !dbg !1047
  %hi8 = load i64, ptr %ptradd7, align 8, !dbg !1047
  call void @std.core.String.convert_ascii_to_lower(ptr %lo6, i64 %hi8), !dbg !1047
  %5 = load { ptr, i64 }, ptr %copy, align 8, !dbg !1048
  ret { ptr, i64 } %5, !dbg !1048
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.temp_ascii_to_lower(ptr %0, i64 %1) #0 comdat !dbg !1049 {
entry:
  %s = alloca %"char[]", align 8
  %taddr = alloca %any, align 8
  %result = alloca %"char[]", align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !1050, !DIExpression(), !1051)
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !1052
  %i2nb = icmp eq ptr %2, null, !dbg !1052
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1052

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !1055
  br label %if.exit, !dbg !1055

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !1057
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !1054
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !1054
  %lo = load ptr, ptr %s, align 8, !dbg !1054
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !1054
  %hi = load i64, ptr %ptradd1, align 8, !dbg !1054
  store %any %5, ptr %taddr, align 8
  %lo2 = load i64, ptr %taddr, align 8
  %ptradd3 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi4 = load ptr, ptr %ptradd3, align 8
  %6 = call { ptr, i64 } @std.core.String.new_ascii_to_lower(ptr %lo, i64 %hi, i64 %lo2, ptr %hi4), !dbg !1058
  store { ptr, i64 } %6, ptr %result, align 8
  %7 = load { ptr, i64 }, ptr %result, align 8
  ret { ptr, i64 } %7
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.convert_ascii_to_upper(ptr %0, i64 %1) #0 comdat !dbg !1059 {
entry:
  %s = alloca %"char[]", align 8
  %.anon = alloca i64, align 8
  %c = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !1060, !DIExpression(), !1061)
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !1062
  %2 = load i64, ptr %ptradd1, align 8, !dbg !1062
    #dbg_declare(ptr %.anon, !1064, !DIExpression(), !1062)
  store i64 0, ptr %.anon, align 8, !dbg !1062
  br label %loop.cond, !dbg !1062

loop.cond:                                        ; preds = %if.exit, %entry
  %3 = load i64, ptr %.anon, align 8, !dbg !1062
  %lt = icmp ult i64 %3, %2, !dbg !1062
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1062

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !1065, !DIExpression(), !1067)
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !1068
  %4 = load i64, ptr %ptradd2, align 8, !dbg !1068
  %5 = load ptr, ptr %s, align 8, !dbg !1068
  %6 = load i64, ptr %.anon, align 8, !dbg !1068
  %ge = icmp uge i64 %6, %4, !dbg !1068
  %7 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1068
  br i1 %7, label %panic, label %checkok, !dbg !1068

checkok:                                          ; preds = %loop.body
  %ptradd5 = getelementptr inbounds i8, ptr %5, i64 %6, !dbg !1068
  store ptr %ptradd5, ptr %c, align 8, !dbg !1068
  %8 = load ptr, ptr %c, align 8, !dbg !1069
  %checknull = icmp eq ptr %8, null, !dbg !1069
  %9 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1069
  br i1 %9, label %panic6, label %checkok7, !dbg !1069

checkok7:                                         ; preds = %checkok
  %10 = load i8, ptr %8, align 1, !dbg !1069
  %11 = call i8 @std.ascii.char.is_lower(i8 zeroext %10), !dbg !1069
  %12 = trunc i8 %11 to i1, !dbg !1069
  br i1 %12, label %if.then, label %if.exit, !dbg !1069

if.then:                                          ; preds = %checkok7
  %13 = load ptr, ptr %c, align 8, !dbg !1070
  %checknull8 = icmp eq ptr %13, null, !dbg !1070
  %14 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !1070
  br i1 %14, label %panic9, label %checkok10, !dbg !1070

checkok10:                                        ; preds = %if.then
  %15 = load i8, ptr %13, align 1, !dbg !1070
  %sub = sub i8 %15, 32, !dbg !1071
  store i8 %sub, ptr %13, align 1, !dbg !1071
  br label %if.exit, !dbg !1071

if.exit:                                          ; preds = %checkok10, %checkok7
  %16 = load i64, ptr %.anon, align 8, !dbg !1062
  %addnuw = add nuw i64 %16, 1, !dbg !1062
  store i64 %addnuw, ptr %.anon, align 8, !dbg !1062
  br label %loop.cond, !dbg !1062

loop.exit:                                        ; preds = %loop.cond
  ret void, !dbg !1062

panic:                                            ; preds = %loop.body
  store i64 %4, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr3, align 8
  %19 = insertvalue %any undef, ptr %taddr3, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %18, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd4, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.63, i64 22, i32 659, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1068
  unreachable, !dbg !1068

panic6:                                           ; preds = %checkok
  %22 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1069
  call void %22(ptr @.panic_msg.62, i64 42, ptr @.file.18, i64 9, ptr @.func.63, i64 22, i32 659) #5, !dbg !1069
  unreachable, !dbg !1069

panic9:                                           ; preds = %if.then
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1070
  call void %23(ptr @.panic_msg.62, i64 42, ptr @.file.18, i64 9, ptr @.func.63, i64 22, i32 659) #5, !dbg !1070
  unreachable, !dbg !1070
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.new_ascii_to_upper(ptr %0, i64 %1, i64 %2, ptr %3) #0 comdat !dbg !1072 {
entry:
  %s = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %copy = alloca %"char[]", align 8
  %result = alloca %"char[]", align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !1073, !DIExpression(), !1074)
  store i64 %2, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %allocator, !1075, !DIExpression(), !1076)
    #dbg_declare(ptr %copy, !1077, !DIExpression(), !1078)
  %lo = load ptr, ptr %s, align 8, !dbg !1079
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !1079
  %hi = load i64, ptr %ptradd2, align 8, !dbg !1079
  %lo3 = load i64, ptr %allocator, align 8, !dbg !1079
  %ptradd4 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !1079
  %hi5 = load ptr, ptr %ptradd4, align 8, !dbg !1079
  %4 = call { ptr, i64 } @std.core.String.copy(ptr %lo, i64 %hi, i64 %lo3, ptr %hi5), !dbg !1080
  store { ptr, i64 } %4, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %copy, ptr align 8 %result, i32 16, i1 false)
  %lo6 = load ptr, ptr %copy, align 8, !dbg !1081
  %ptradd7 = getelementptr inbounds i8, ptr %copy, i64 8, !dbg !1081
  %hi8 = load i64, ptr %ptradd7, align 8, !dbg !1081
  call void @std.core.String.convert_ascii_to_upper(ptr %lo6, i64 %hi8), !dbg !1081
  %5 = load { ptr, i64 }, ptr %copy, align 8, !dbg !1082
  ret { ptr, i64 } %5, !dbg !1082
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.iterator(ptr noalias sret(%StringIterator) align 8 %0, ptr %1, i64 %2) #0 comdat !dbg !1083 {
entry:
  %s = alloca %"char[]", align 8
  %literal = alloca %StringIterator, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !1090, !DIExpression(), !1091)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 %s, i32 16, i1 false), !dbg !1092
  %ptradd1 = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !1092
  store i64 0, ptr %ptradd1, align 8, !dbg !1093
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 24, i1 false), !dbg !1093
  ret void, !dbg !1093
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.temp_ascii_to_upper(ptr %0, i64 %1) #0 comdat !dbg !1094 {
entry:
  %s = alloca %"char[]", align 8
  %taddr = alloca %any, align 8
  %result = alloca %"char[]", align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !1095, !DIExpression(), !1096)
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !1097
  %i2nb = icmp eq ptr %2, null, !dbg !1097
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1097

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !1100
  br label %if.exit, !dbg !1100

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !1102
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !1099
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !1099
  %lo = load ptr, ptr %s, align 8, !dbg !1099
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !1099
  %hi = load i64, ptr %ptradd1, align 8, !dbg !1099
  store %any %5, ptr %taddr, align 8
  %lo2 = load i64, ptr %taddr, align 8
  %ptradd3 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi4 = load ptr, ptr %ptradd3, align 8
  %6 = call { ptr, i64 } @std.core.String.new_ascii_to_upper(ptr %lo, i64 %hi, i64 %lo2, ptr %hi4), !dbg !1103
  store { ptr, i64 } %6, ptr %result, align 8
  %7 = load { ptr, i64 }, ptr %result, align 8
  ret { ptr, i64 } %7
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.utf8_codepoints(ptr %0, i64 %1) #0 comdat !dbg !1104 {
entry:
  %s = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %.anon = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !1107, !DIExpression(), !1108)
    #dbg_declare(ptr %len, !1109, !DIExpression(), !1110)
  store i64 0, ptr %len, align 8, !dbg !1111
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !1112
  %2 = load i64, ptr %ptradd1, align 8, !dbg !1112
    #dbg_declare(ptr %.anon, !1114, !DIExpression(), !1112)
  store i64 0, ptr %.anon, align 8, !dbg !1112
  br label %loop.cond, !dbg !1112

loop.cond:                                        ; preds = %if.exit, %entry
  %3 = load i64, ptr %.anon, align 8, !dbg !1112
  %lt = icmp ult i64 %3, %2, !dbg !1112
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1112

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !1115, !DIExpression(), !1117)
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !1118
  %4 = load i64, ptr %ptradd2, align 8, !dbg !1118
  %5 = load ptr, ptr %s, align 8, !dbg !1118
  %6 = load i64, ptr %.anon, align 8, !dbg !1118
  %ge = icmp uge i64 %6, %4, !dbg !1118
  %7 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1118
  br i1 %7, label %panic, label %checkok, !dbg !1118

checkok:                                          ; preds = %loop.body
  %ptradd5 = getelementptr inbounds i8, ptr %5, i64 %6, !dbg !1118
  %8 = load i8, ptr %ptradd5, align 1, !dbg !1118
  store i8 %8, ptr %c, align 1, !dbg !1118
  %9 = load i8, ptr %c, align 1, !dbg !1119
  %zext = zext i8 %9 to i32, !dbg !1119
  %and = and i32 %zext, 192, !dbg !1119
  %neq = icmp ne i32 %and, 128, !dbg !1119
  br i1 %neq, label %if.then, label %if.exit, !dbg !1119

if.then:                                          ; preds = %checkok
  %10 = load i64, ptr %len, align 8, !dbg !1121
  %add = add i64 %10, 1, !dbg !1121
  store i64 %add, ptr %len, align 8, !dbg !1121
  br label %if.exit, !dbg !1121

if.exit:                                          ; preds = %if.then, %checkok
  %11 = load i64, ptr %.anon, align 8, !dbg !1112
  %addnuw = add nuw i64 %11, 1, !dbg !1112
  store i64 %addnuw, ptr %.anon, align 8, !dbg !1112
  br label %loop.cond, !dbg !1112

loop.exit:                                        ; preds = %loop.cond
  %12 = load i64, ptr %len, align 8, !dbg !1122
  ret i64 %12, !dbg !1122

panic:                                            ; preds = %loop.body
  store i64 %4, ptr %taddr, align 8
  %13 = insertvalue %any undef, ptr %taddr, 0
  %14 = insertvalue %any %13, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr3, align 8
  %15 = insertvalue %any undef, ptr %taddr3, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %14, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %16, ptr %ptradd4, align 16
  %17 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %17, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.64, i64 15, i32 725, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1118
  unreachable, !dbg !1118
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_int128(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !1123 {
entry:
  %s = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i128, align 16
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i128, align 16
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %switch57 = alloca i8, align 1
  %value = alloca i128, align 16
  %c73 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret74 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %error_var115 = alloca i64, align 8
  %blockret116 = alloca i128, align 16
  %new_value = alloca i128, align 16
  %new_value124 = alloca i128, align 16
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !1128, !DIExpression(), !1129)
  store i32 %3, ptr %base, align 4
    #dbg_declare(ptr %base, !1130, !DIExpression(), !1131)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %s, i32 16, i1 false)
  %4 = load i32, ptr %base, align 4
  store i32 %4, ptr %base1, align 4
  %5 = load i32, ptr %base1, align 4, !dbg !1132
  %le = icmp sle i32 %5, 10, !dbg !1132
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1132

and.rhs:                                          ; preds = %entry
  %6 = load i32, ptr %base1, align 4, !dbg !1136
  %gt = icmp sgt i32 %6, 1, !dbg !1136
  br label %and.phi, !dbg !1136

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1136
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1136

or.rhs:                                           ; preds = %and.phi
  %7 = load i32, ptr %base1, align 4, !dbg !1137
  %eq = icmp eq i32 %7, 16, !dbg !1137
  br label %or.phi, !dbg !1137

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1137
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1137

assert_fail:                                      ; preds = %or.phi
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1132
  call void %8(ptr @.panic_msg.65, i64 79, ptr @.file.18, i64 9, ptr @.func.66, i64 9, i32 734) #5, !dbg !1132
  unreachable, !dbg !1132

assert_ok:                                        ; preds = %or.phi
    #dbg_declare(ptr %len, !1138, !DIExpression(), !1139)
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1140
  %9 = load i64, ptr %ptradd3, align 8, !dbg !1140
  store i64 %9, ptr %len, align 8, !dbg !1140
    #dbg_declare(ptr %index, !1141, !DIExpression(), !1142)
  store i64 0, ptr %index, align 8, !dbg !1143
    #dbg_declare(ptr %ptr, !1144, !DIExpression(), !1145)
  %10 = load ptr, ptr %string, align 8, !dbg !1146
  store ptr %10, ptr %ptr, align 8, !dbg !1146
  br label %loop.cond, !dbg !1147

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %11 = load i64, ptr %index, align 8, !dbg !1148
  %12 = load i64, ptr %len, align 8, !dbg !1150
  %lt = icmp ult i64 %11, %12, !dbg !1148
  br i1 %lt, label %and.rhs4, label %and.phi11, !dbg !1148

and.rhs4:                                         ; preds = %loop.cond
  %13 = load ptr, ptr %ptr, align 8, !dbg !1151
  %14 = load i64, ptr %index, align 8, !dbg !1152
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 %14, !dbg !1152
  %15 = load i8, ptr %ptradd5, align 1
  store i8 %15, ptr %c, align 1
  %16 = load i8, ptr %c, align 1, !dbg !1153
  %eq6 = icmp eq i8 %16, 32, !dbg !1153
  br i1 %eq6, label %or.phi9, label %or.rhs7, !dbg !1153

or.rhs7:                                          ; preds = %and.rhs4
  %17 = load i8, ptr %c, align 1, !dbg !1157
  %eq8 = icmp eq i8 %17, 9, !dbg !1157
  br label %or.phi9, !dbg !1157

or.phi9:                                          ; preds = %or.rhs7, %and.rhs4
  %val10 = phi i1 [ true, %and.rhs4 ], [ %eq8, %or.rhs7 ], !dbg !1157
  br label %and.phi11, !dbg !1157

and.phi11:                                        ; preds = %or.phi9, %loop.cond
  %val12 = phi i1 [ false, %loop.cond ], [ %val10, %or.phi9 ], !dbg !1157
  br i1 %val12, label %loop.body, label %loop.exit, !dbg !1157

loop.body:                                        ; preds = %and.phi11
  %18 = load i64, ptr %index, align 8, !dbg !1158
  %add = add i64 %18, 1, !dbg !1158
  store i64 %add, ptr %index, align 8, !dbg !1158
  br label %loop.cond, !dbg !1158

loop.exit:                                        ; preds = %and.phi11
  %19 = load i64, ptr %len, align 8, !dbg !1159
  %20 = load i64, ptr %index, align 8, !dbg !1160
  %eq13 = icmp eq i64 %19, %20, !dbg !1159
  br i1 %eq13, label %if.then, label %if.exit, !dbg !1159

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1161
  br label %err_retblock, !dbg !1161

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !1162, !DIExpression(), !1163)
  store i8 0, ptr %is_negative, align 1, !dbg !1163
  %ptradd14 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1164
  %21 = load i64, ptr %ptradd14, align 8, !dbg !1164
  %22 = load ptr, ptr %string, align 8, !dbg !1164
  %23 = load i64, ptr %index, align 8, !dbg !1166
  %ge = icmp uge i64 %23, %21, !dbg !1166
  %24 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1166
  br i1 %24, label %panic, label %checkok, !dbg !1166

checkok:                                          ; preds = %if.exit
  %ptradd17 = getelementptr inbounds i8, ptr %22, i64 %23, !dbg !1166
  %25 = load i8, ptr %ptradd17, align 1
  store i8 %25, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %26 = load i8, ptr %switch, align 1
  switch i8 %26, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case20
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit18, !dbg !1167

if.exit18:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1169
  %27 = load i64, ptr %index, align 8, !dbg !1170
  %add19 = add i64 %27, 1, !dbg !1170
  store i64 %add19, ptr %index, align 8, !dbg !1170
  br label %switch.exit, !dbg !1170

switch.case20:                                    ; preds = %switch.entry
  %28 = load i64, ptr %index, align 8, !dbg !1171
  %add21 = add i64 %28, 1, !dbg !1171
  store i64 %add21, ptr %index, align 8, !dbg !1171
  br label %switch.exit, !dbg !1171

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1173

switch.exit:                                      ; preds = %switch.default, %switch.case20, %if.exit18
  %29 = load i64, ptr %len, align 8, !dbg !1175
  %30 = load i64, ptr %index, align 8, !dbg !1176
  %eq22 = icmp eq i64 %29, %30, !dbg !1175
  br i1 %eq22, label %if.then23, label %if.exit24, !dbg !1175

if.then23:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1177
  br label %err_retblock, !dbg !1177

if.exit24:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !1178, !DIExpression(), !1179)
  %31 = load i32, ptr %base1, align 4, !dbg !1180
  %sext = sext i32 %31 to i128, !dbg !1180
  store i128 %sext, ptr %base_used, align 16, !dbg !1180
  %ptradd25 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1181
  %32 = load i64, ptr %ptradd25, align 8, !dbg !1181
  %33 = load ptr, ptr %string, align 8, !dbg !1181
  %34 = load i64, ptr %index, align 8, !dbg !1182
  %ge26 = icmp uge i64 %34, %32, !dbg !1182
  %35 = call i1 @llvm.expect.i1(i1 %ge26, i1 false), !dbg !1182
  br i1 %35, label %panic27, label %checkok34, !dbg !1182

checkok34:                                        ; preds = %if.exit24
  %ptradd35 = getelementptr inbounds i8, ptr %33, i64 %34, !dbg !1182
  %36 = load i8, ptr %ptradd35, align 1, !dbg !1182
  %eq36 = icmp eq i8 %36, 48, !dbg !1181
  br i1 %eq36, label %and.rhs37, label %and.phi39, !dbg !1181

and.rhs37:                                        ; preds = %checkok34
  %37 = load i32, ptr %base1, align 4, !dbg !1183
  %eq38 = icmp eq i32 %37, 10, !dbg !1183
  br label %and.phi39, !dbg !1183

and.phi39:                                        ; preds = %and.rhs37, %checkok34
  %val40 = phi i1 [ false, %checkok34 ], [ %eq38, %and.rhs37 ], !dbg !1183
  br i1 %val40, label %if.then41, label %if.exit70, !dbg !1183

if.then41:                                        ; preds = %and.phi39
  %38 = load i64, ptr %index, align 8, !dbg !1184
  %add42 = add i64 %38, 1, !dbg !1184
  store i64 %add42, ptr %index, align 8, !dbg !1184
  %39 = load i64, ptr %index, align 8, !dbg !1186
  %40 = load i64, ptr %len, align 8, !dbg !1187
  %eq43 = icmp eq i64 %39, %40, !dbg !1186
  br i1 %eq43, label %if.then44, label %if.exit45, !dbg !1186

if.then44:                                        ; preds = %if.then41
  store i128 0, ptr %blockret, align 16, !dbg !1188
  br label %expr_block.exit135, !dbg !1188

if.exit45:                                        ; preds = %if.then41
  %ptradd46 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1189
  %41 = load i64, ptr %ptradd46, align 8, !dbg !1189
  %42 = load ptr, ptr %string, align 8, !dbg !1189
  %43 = load i64, ptr %index, align 8, !dbg !1191
  %ge47 = icmp uge i64 %43, %41, !dbg !1191
  %44 = call i1 @llvm.expect.i1(i1 %ge47, i1 false), !dbg !1191
  br i1 %44, label %panic48, label %checkok55, !dbg !1191

checkok55:                                        ; preds = %if.exit45
  %ptradd56 = getelementptr inbounds i8, ptr %42, i64 %43, !dbg !1191
  %45 = load i8, ptr %ptradd56, align 1
  store i8 %45, ptr %switch57, align 1
  br label %switch.entry58

switch.entry58:                                   ; preds = %checkok55
  %46 = load i8, ptr %switch57, align 1
  switch i8 %46, label %switch.default65 [
    i8 120, label %switch.case59
    i8 88, label %switch.case59
    i8 98, label %switch.case61
    i8 66, label %switch.case61
    i8 111, label %switch.case63
    i8 79, label %switch.case63
  ]

switch.case59:                                    ; preds = %switch.entry58, %switch.entry58
  store i128 16, ptr %base_used, align 16, !dbg !1192
  %47 = load i64, ptr %index, align 8, !dbg !1194
  %add60 = add i64 %47, 1, !dbg !1194
  store i64 %add60, ptr %index, align 8, !dbg !1194
  br label %switch.exit66, !dbg !1194

switch.case61:                                    ; preds = %switch.entry58, %switch.entry58
  store i128 2, ptr %base_used, align 16, !dbg !1195
  %48 = load i64, ptr %index, align 8, !dbg !1197
  %add62 = add i64 %48, 1, !dbg !1197
  store i64 %add62, ptr %index, align 8, !dbg !1197
  br label %switch.exit66, !dbg !1197

switch.case63:                                    ; preds = %switch.entry58, %switch.entry58
  store i128 8, ptr %base_used, align 16, !dbg !1198
  %49 = load i64, ptr %index, align 8, !dbg !1200
  %add64 = add i64 %49, 1, !dbg !1200
  store i64 %add64, ptr %index, align 8, !dbg !1200
  br label %switch.exit66, !dbg !1200

switch.default65:                                 ; preds = %switch.entry58
  br label %switch.exit66, !dbg !1201

switch.exit66:                                    ; preds = %switch.default65, %switch.case63, %switch.case61, %switch.case59
  %50 = load i64, ptr %len, align 8, !dbg !1203
  %51 = load i64, ptr %index, align 8, !dbg !1204
  %eq67 = icmp eq i64 %50, %51, !dbg !1203
  br i1 %eq67, label %if.then68, label %if.exit69, !dbg !1203

if.then68:                                        ; preds = %switch.exit66
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1205
  br label %err_retblock, !dbg !1205

if.exit69:                                        ; preds = %switch.exit66
  br label %if.exit70, !dbg !1205

if.exit70:                                        ; preds = %if.exit69, %and.phi39
    #dbg_declare(ptr %value, !1206, !DIExpression(), !1207)
  store i128 0, ptr %value, align 16, !dbg !1208
  br label %loop.cond71, !dbg !1209

loop.cond71:                                      ; preds = %noerr_block133, %if.exit70
  %52 = load i64, ptr %index, align 8, !dbg !1210
  %53 = load i64, ptr %len, align 8, !dbg !1212
  %neq = icmp ne i64 %52, %53, !dbg !1210
  br i1 %neq, label %loop.body72, label %loop.exit134, !dbg !1210

loop.body72:                                      ; preds = %loop.cond71
    #dbg_declare(ptr %c73, !1213, !DIExpression(), !1215)
    #dbg_declare(ptr %ch, !1216, !DIExpression(), !1218)
  %ptradd75 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1219
  %54 = load i64, ptr %ptradd75, align 8, !dbg !1219
  %55 = load ptr, ptr %string, align 8, !dbg !1219
  %56 = load i64, ptr %index, align 8, !dbg !1220
  %add76 = add i64 %56, 1, !dbg !1220
  store i64 %add76, ptr %index, align 8, !dbg !1220
  %ge77 = icmp uge i64 %56, %54, !dbg !1220
  %57 = call i1 @llvm.expect.i1(i1 %ge77, i1 false), !dbg !1220
  br i1 %57, label %panic78, label %checkok85, !dbg !1220

checkok85:                                        ; preds = %loop.body72
  %ptradd86 = getelementptr inbounds i8, ptr %55, i64 %56, !dbg !1220
  %58 = load i8, ptr %ptradd86, align 1, !dbg !1220
  store i8 %58, ptr %ch, align 1, !dbg !1220
  %59 = load i128, ptr %base_used, align 16, !dbg !1221
  %neq87 = icmp ne i128 %59, 16, !dbg !1221
  br i1 %neq87, label %or.phi90, label %or.rhs88, !dbg !1221

or.rhs88:                                         ; preds = %checkok85
  %60 = load i8, ptr %ch, align 1, !dbg !1222
  %lt89 = icmp ult i8 %60, 65, !dbg !1222
  br label %or.phi90, !dbg !1222

or.phi90:                                         ; preds = %or.rhs88, %checkok85
  %val91 = phi i1 [ true, %checkok85 ], [ %lt89, %or.rhs88 ], !dbg !1222
  br i1 %val91, label %if.then92, label %if.exit93, !dbg !1222

if.then92:                                        ; preds = %or.phi90
  %61 = load i8, ptr %ch, align 1, !dbg !1223
  %zext = zext i8 %61 to i32, !dbg !1223
  %sub = sub i32 %zext, 48, !dbg !1224
  %trunc = trunc i32 %sub to i8, !dbg !1224
  store i8 %trunc, ptr %blockret74, align 1, !dbg !1224
  br label %expr_block.exit, !dbg !1224

if.exit93:                                        ; preds = %or.phi90
  %62 = load i8, ptr %ch, align 1, !dbg !1225
  %le94 = icmp ule i8 %62, 70, !dbg !1225
  br i1 %le94, label %if.then95, label %if.exit100, !dbg !1225

if.then95:                                        ; preds = %if.exit93
  %63 = load i8, ptr %ch, align 1, !dbg !1226
  %zext96 = zext i8 %63 to i32, !dbg !1226
  %sub97 = sub i32 %zext96, 65, !dbg !1226
  %add98 = add i32 %sub97, 10, !dbg !1227
  %trunc99 = trunc i32 %add98 to i8, !dbg !1227
  store i8 %trunc99, ptr %blockret74, align 1, !dbg !1227
  br label %expr_block.exit, !dbg !1227

if.exit100:                                       ; preds = %if.exit93
  %64 = load i8, ptr %ch, align 1, !dbg !1228
  %lt101 = icmp ult i8 %64, 97, !dbg !1228
  br i1 %lt101, label %if.then102, label %if.exit103, !dbg !1228

if.then102:                                       ; preds = %if.exit100
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1229
  br label %guard_block, !dbg !1229

if.exit103:                                       ; preds = %if.exit100
  %65 = load i8, ptr %ch, align 1, !dbg !1230
  %gt104 = icmp ugt i8 %65, 102, !dbg !1230
  br i1 %gt104, label %if.then105, label %if.exit106, !dbg !1230

if.then105:                                       ; preds = %if.exit103
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1231
  br label %guard_block, !dbg !1231

if.exit106:                                       ; preds = %if.exit103
  %66 = load i8, ptr %ch, align 1, !dbg !1232
  %zext107 = zext i8 %66 to i32, !dbg !1232
  %sub108 = sub i32 %zext107, 97, !dbg !1232
  %add109 = add i32 %sub108, 10, !dbg !1233
  %trunc110 = trunc i32 %add109 to i8, !dbg !1233
  store i8 %trunc110, ptr %blockret74, align 1, !dbg !1233
  br label %expr_block.exit, !dbg !1233

expr_block.exit:                                  ; preds = %if.exit106, %if.then95, %if.then92
  br label %noerr_block, !dbg !1233

guard_block:                                      ; preds = %if.then105, %if.then102
  %67 = load i64, ptr %error_var, align 8, !dbg !1233
  store i64 %67, ptr %reterr, align 8, !dbg !1233
  br label %err_retblock, !dbg !1233

noerr_block:                                      ; preds = %expr_block.exit
  %68 = load i8, ptr %blockret74, align 1, !dbg !1233
  store i8 %68, ptr %c73, align 1, !dbg !1233
  %69 = load i8, ptr %c73, align 1, !dbg !1234
  %zext111 = zext i8 %69 to i128, !dbg !1234
  %70 = load i128, ptr %base_used, align 16, !dbg !1235
  %le112 = icmp sle i128 %70, %zext111, !dbg !1234
  %check = icmp slt i128 %zext111, 0, !dbg !1234
  %siui-le = or i1 %check, %le112, !dbg !1234
  br i1 %siui-le, label %if.then113, label %if.exit114, !dbg !1234

if.then113:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1236
  br label %err_retblock, !dbg !1236

if.exit114:                                       ; preds = %noerr_block
  %71 = load i8, ptr %is_negative, align 1, !dbg !1237
  %72 = trunc i8 %71 to i1, !dbg !1237
  br i1 %72, label %if.then117, label %if.exit123, !dbg !1237

if.then117:                                       ; preds = %if.exit114
    #dbg_declare(ptr %new_value, !1239, !DIExpression(), !1241)
  %73 = load i128, ptr %value, align 16, !dbg !1242
  %74 = load i128, ptr %base_used, align 16, !dbg !1243
  %mul = mul i128 %73, %74, !dbg !1242
  %75 = load i8, ptr %c73, align 1, !dbg !1244
  %zext118 = zext i8 %75 to i128, !dbg !1244
  %sub119 = sub i128 %mul, %zext118, !dbg !1242
  store i128 %sub119, ptr %new_value, align 16, !dbg !1242
  %76 = load i128, ptr %new_value, align 16, !dbg !1245
  %77 = load i128, ptr %value, align 16, !dbg !1246
  %gt120 = icmp sgt i128 %76, %77, !dbg !1245
  br i1 %gt120, label %if.then121, label %if.exit122, !dbg !1245

if.then121:                                       ; preds = %if.then117
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var115, align 8, !dbg !1247
  br label %guard_block132, !dbg !1247

if.exit122:                                       ; preds = %if.then117
  %78 = load i128, ptr %new_value, align 16, !dbg !1248
  store i128 %78, ptr %blockret116, align 16, !dbg !1248
  br label %expr_block.exit131, !dbg !1248

if.exit123:                                       ; preds = %if.exit114
    #dbg_declare(ptr %new_value124, !1249, !DIExpression(), !1250)
  %79 = load i128, ptr %value, align 16, !dbg !1251
  %80 = load i128, ptr %base_used, align 16, !dbg !1252
  %mul125 = mul i128 %79, %80, !dbg !1251
  %81 = load i8, ptr %c73, align 1, !dbg !1253
  %zext126 = zext i8 %81 to i128, !dbg !1253
  %add127 = add i128 %mul125, %zext126, !dbg !1251
  store i128 %add127, ptr %new_value124, align 16, !dbg !1251
  %82 = load i128, ptr %new_value124, align 16, !dbg !1254
  %83 = load i128, ptr %value, align 16, !dbg !1255
  %lt128 = icmp slt i128 %82, %83, !dbg !1254
  br i1 %lt128, label %if.then129, label %if.exit130, !dbg !1254

if.then129:                                       ; preds = %if.exit123
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var115, align 8, !dbg !1256
  br label %guard_block132, !dbg !1256

if.exit130:                                       ; preds = %if.exit123
  %84 = load i128, ptr %new_value124, align 16, !dbg !1257
  store i128 %84, ptr %blockret116, align 16, !dbg !1257
  br label %expr_block.exit131, !dbg !1257

expr_block.exit131:                               ; preds = %if.exit130, %if.exit122
  br label %noerr_block133, !dbg !1257

guard_block132:                                   ; preds = %if.then129, %if.then121
  %85 = load i64, ptr %error_var115, align 8, !dbg !1257
  store i64 %85, ptr %reterr, align 8, !dbg !1257
  br label %err_retblock, !dbg !1257

noerr_block133:                                   ; preds = %expr_block.exit131
  %86 = load i128, ptr %blockret116, align 16, !dbg !1257
  store i128 %86, ptr %value, align 16, !dbg !1257
  br label %loop.cond71, !dbg !1257

loop.exit134:                                     ; preds = %loop.cond71
  %87 = load i128, ptr %value, align 16, !dbg !1258
  store i128 %87, ptr %blockret, align 16, !dbg !1258
  br label %expr_block.exit135, !dbg !1258

expr_block.exit135:                               ; preds = %loop.exit134, %if.then44
  %88 = load i128, ptr %blockret, align 16, !dbg !1258
  store i128 %88, ptr %0, align 16, !dbg !1258
  ret i64 0, !dbg !1258

err_retblock:                                     ; preds = %guard_block132, %if.then113, %guard_block, %if.then68, %if.then23, %if.then
  %89 = load i64, ptr %reterr, align 8, !dbg !1258
  ret i64 %89, !dbg !1258

panic:                                            ; preds = %if.exit
  store i64 %21, ptr %taddr, align 8
  %90 = insertvalue %any undef, ptr %taddr, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr15, align 8
  %92 = insertvalue %any undef, ptr %taddr15, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %91, ptr %varargslots, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %93, ptr %ptradd16, align 16
  %94 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %94, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.66, i64 9, i32 744, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1166
  unreachable, !dbg !1166

panic27:                                          ; preds = %if.exit24
  store i64 %32, ptr %taddr28, align 8
  %95 = insertvalue %any undef, ptr %taddr28, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %34, ptr %taddr29, align 8
  %97 = insertvalue %any undef, ptr %taddr29, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %96, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %98, ptr %ptradd31, align 16
  %99 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.66, i64 9, i32 757, ptr byval(%"any[]") align 8 %indirectarg33) #5, !dbg !1182
  unreachable, !dbg !1182

panic48:                                          ; preds = %if.exit45
  store i64 %41, ptr %taddr49, align 8
  %100 = insertvalue %any undef, ptr %taddr49, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %43, ptr %taddr50, align 8
  %102 = insertvalue %any undef, ptr %taddr50, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %101, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %103, ptr %ptradd52, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.66, i64 9, i32 761, ptr byval(%"any[]") align 8 %indirectarg54) #5, !dbg !1191
  unreachable, !dbg !1191

panic78:                                          ; preds = %loop.body72
  store i64 %54, ptr %taddr79, align 8
  %105 = insertvalue %any undef, ptr %taddr79, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %56, ptr %taddr80, align 8
  %107 = insertvalue %any undef, ptr %taddr80, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %106, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %108, ptr %ptradd82, align 16
  %109 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %109, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.66, i64 9, i32 784, ptr byval(%"any[]") align 8 %indirectarg84) #5, !dbg !1220
  unreachable, !dbg !1220
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_long(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !1259 {
entry:
  %s = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i64, align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i64, align 8
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %switch57 = alloca i8, align 1
  %value = alloca i64, align 8
  %c73 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret74 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %error_var115 = alloca i64, align 8
  %blockret116 = alloca i64, align 8
  %new_value = alloca i64, align 8
  %new_value124 = alloca i64, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !1263, !DIExpression(), !1264)
  store i32 %3, ptr %base, align 4
    #dbg_declare(ptr %base, !1265, !DIExpression(), !1266)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %s, i32 16, i1 false)
  %4 = load i32, ptr %base, align 4
  store i32 %4, ptr %base1, align 4
  %5 = load i32, ptr %base1, align 4, !dbg !1267
  %le = icmp sle i32 %5, 10, !dbg !1267
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1267

and.rhs:                                          ; preds = %entry
  %6 = load i32, ptr %base1, align 4, !dbg !1271
  %gt = icmp sgt i32 %6, 1, !dbg !1271
  br label %and.phi, !dbg !1271

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1271
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1271

or.rhs:                                           ; preds = %and.phi
  %7 = load i32, ptr %base1, align 4, !dbg !1272
  %eq = icmp eq i32 %7, 16, !dbg !1272
  br label %or.phi, !dbg !1272

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1272
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1272

assert_fail:                                      ; preds = %or.phi
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1267
  call void %8(ptr @.panic_msg.65, i64 79, ptr @.file.18, i64 9, ptr @.func.67, i64 7, i32 734) #5, !dbg !1267
  unreachable, !dbg !1267

assert_ok:                                        ; preds = %or.phi
    #dbg_declare(ptr %len, !1273, !DIExpression(), !1274)
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1275
  %9 = load i64, ptr %ptradd3, align 8, !dbg !1275
  store i64 %9, ptr %len, align 8, !dbg !1275
    #dbg_declare(ptr %index, !1276, !DIExpression(), !1277)
  store i64 0, ptr %index, align 8, !dbg !1278
    #dbg_declare(ptr %ptr, !1279, !DIExpression(), !1280)
  %10 = load ptr, ptr %string, align 8, !dbg !1281
  store ptr %10, ptr %ptr, align 8, !dbg !1281
  br label %loop.cond, !dbg !1282

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %11 = load i64, ptr %index, align 8, !dbg !1283
  %12 = load i64, ptr %len, align 8, !dbg !1285
  %lt = icmp ult i64 %11, %12, !dbg !1283
  br i1 %lt, label %and.rhs4, label %and.phi11, !dbg !1283

and.rhs4:                                         ; preds = %loop.cond
  %13 = load ptr, ptr %ptr, align 8, !dbg !1286
  %14 = load i64, ptr %index, align 8, !dbg !1287
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 %14, !dbg !1287
  %15 = load i8, ptr %ptradd5, align 1
  store i8 %15, ptr %c, align 1
  %16 = load i8, ptr %c, align 1, !dbg !1288
  %eq6 = icmp eq i8 %16, 32, !dbg !1288
  br i1 %eq6, label %or.phi9, label %or.rhs7, !dbg !1288

or.rhs7:                                          ; preds = %and.rhs4
  %17 = load i8, ptr %c, align 1, !dbg !1291
  %eq8 = icmp eq i8 %17, 9, !dbg !1291
  br label %or.phi9, !dbg !1291

or.phi9:                                          ; preds = %or.rhs7, %and.rhs4
  %val10 = phi i1 [ true, %and.rhs4 ], [ %eq8, %or.rhs7 ], !dbg !1291
  br label %and.phi11, !dbg !1291

and.phi11:                                        ; preds = %or.phi9, %loop.cond
  %val12 = phi i1 [ false, %loop.cond ], [ %val10, %or.phi9 ], !dbg !1291
  br i1 %val12, label %loop.body, label %loop.exit, !dbg !1291

loop.body:                                        ; preds = %and.phi11
  %18 = load i64, ptr %index, align 8, !dbg !1292
  %add = add i64 %18, 1, !dbg !1292
  store i64 %add, ptr %index, align 8, !dbg !1292
  br label %loop.cond, !dbg !1292

loop.exit:                                        ; preds = %and.phi11
  %19 = load i64, ptr %len, align 8, !dbg !1293
  %20 = load i64, ptr %index, align 8, !dbg !1294
  %eq13 = icmp eq i64 %19, %20, !dbg !1293
  br i1 %eq13, label %if.then, label %if.exit, !dbg !1293

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1295
  br label %err_retblock, !dbg !1295

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !1296, !DIExpression(), !1297)
  store i8 0, ptr %is_negative, align 1, !dbg !1297
  %ptradd14 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1298
  %21 = load i64, ptr %ptradd14, align 8, !dbg !1298
  %22 = load ptr, ptr %string, align 8, !dbg !1298
  %23 = load i64, ptr %index, align 8, !dbg !1300
  %ge = icmp uge i64 %23, %21, !dbg !1300
  %24 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1300
  br i1 %24, label %panic, label %checkok, !dbg !1300

checkok:                                          ; preds = %if.exit
  %ptradd17 = getelementptr inbounds i8, ptr %22, i64 %23, !dbg !1300
  %25 = load i8, ptr %ptradd17, align 1
  store i8 %25, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %26 = load i8, ptr %switch, align 1
  switch i8 %26, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case20
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit18, !dbg !1301

if.exit18:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1303
  %27 = load i64, ptr %index, align 8, !dbg !1304
  %add19 = add i64 %27, 1, !dbg !1304
  store i64 %add19, ptr %index, align 8, !dbg !1304
  br label %switch.exit, !dbg !1304

switch.case20:                                    ; preds = %switch.entry
  %28 = load i64, ptr %index, align 8, !dbg !1305
  %add21 = add i64 %28, 1, !dbg !1305
  store i64 %add21, ptr %index, align 8, !dbg !1305
  br label %switch.exit, !dbg !1305

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1307

switch.exit:                                      ; preds = %switch.default, %switch.case20, %if.exit18
  %29 = load i64, ptr %len, align 8, !dbg !1309
  %30 = load i64, ptr %index, align 8, !dbg !1310
  %eq22 = icmp eq i64 %29, %30, !dbg !1309
  br i1 %eq22, label %if.then23, label %if.exit24, !dbg !1309

if.then23:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1311
  br label %err_retblock, !dbg !1311

if.exit24:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !1312, !DIExpression(), !1313)
  %31 = load i32, ptr %base1, align 4, !dbg !1314
  %sext = sext i32 %31 to i64, !dbg !1314
  store i64 %sext, ptr %base_used, align 8, !dbg !1314
  %ptradd25 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1315
  %32 = load i64, ptr %ptradd25, align 8, !dbg !1315
  %33 = load ptr, ptr %string, align 8, !dbg !1315
  %34 = load i64, ptr %index, align 8, !dbg !1316
  %ge26 = icmp uge i64 %34, %32, !dbg !1316
  %35 = call i1 @llvm.expect.i1(i1 %ge26, i1 false), !dbg !1316
  br i1 %35, label %panic27, label %checkok34, !dbg !1316

checkok34:                                        ; preds = %if.exit24
  %ptradd35 = getelementptr inbounds i8, ptr %33, i64 %34, !dbg !1316
  %36 = load i8, ptr %ptradd35, align 1, !dbg !1316
  %eq36 = icmp eq i8 %36, 48, !dbg !1315
  br i1 %eq36, label %and.rhs37, label %and.phi39, !dbg !1315

and.rhs37:                                        ; preds = %checkok34
  %37 = load i32, ptr %base1, align 4, !dbg !1317
  %eq38 = icmp eq i32 %37, 10, !dbg !1317
  br label %and.phi39, !dbg !1317

and.phi39:                                        ; preds = %and.rhs37, %checkok34
  %val40 = phi i1 [ false, %checkok34 ], [ %eq38, %and.rhs37 ], !dbg !1317
  br i1 %val40, label %if.then41, label %if.exit70, !dbg !1317

if.then41:                                        ; preds = %and.phi39
  %38 = load i64, ptr %index, align 8, !dbg !1318
  %add42 = add i64 %38, 1, !dbg !1318
  store i64 %add42, ptr %index, align 8, !dbg !1318
  %39 = load i64, ptr %index, align 8, !dbg !1320
  %40 = load i64, ptr %len, align 8, !dbg !1321
  %eq43 = icmp eq i64 %39, %40, !dbg !1320
  br i1 %eq43, label %if.then44, label %if.exit45, !dbg !1320

if.then44:                                        ; preds = %if.then41
  store i64 0, ptr %blockret, align 8, !dbg !1322
  br label %expr_block.exit135, !dbg !1322

if.exit45:                                        ; preds = %if.then41
  %ptradd46 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1323
  %41 = load i64, ptr %ptradd46, align 8, !dbg !1323
  %42 = load ptr, ptr %string, align 8, !dbg !1323
  %43 = load i64, ptr %index, align 8, !dbg !1325
  %ge47 = icmp uge i64 %43, %41, !dbg !1325
  %44 = call i1 @llvm.expect.i1(i1 %ge47, i1 false), !dbg !1325
  br i1 %44, label %panic48, label %checkok55, !dbg !1325

checkok55:                                        ; preds = %if.exit45
  %ptradd56 = getelementptr inbounds i8, ptr %42, i64 %43, !dbg !1325
  %45 = load i8, ptr %ptradd56, align 1
  store i8 %45, ptr %switch57, align 1
  br label %switch.entry58

switch.entry58:                                   ; preds = %checkok55
  %46 = load i8, ptr %switch57, align 1
  switch i8 %46, label %switch.default65 [
    i8 120, label %switch.case59
    i8 88, label %switch.case59
    i8 98, label %switch.case61
    i8 66, label %switch.case61
    i8 111, label %switch.case63
    i8 79, label %switch.case63
  ]

switch.case59:                                    ; preds = %switch.entry58, %switch.entry58
  store i64 16, ptr %base_used, align 8, !dbg !1326
  %47 = load i64, ptr %index, align 8, !dbg !1328
  %add60 = add i64 %47, 1, !dbg !1328
  store i64 %add60, ptr %index, align 8, !dbg !1328
  br label %switch.exit66, !dbg !1328

switch.case61:                                    ; preds = %switch.entry58, %switch.entry58
  store i64 2, ptr %base_used, align 8, !dbg !1329
  %48 = load i64, ptr %index, align 8, !dbg !1331
  %add62 = add i64 %48, 1, !dbg !1331
  store i64 %add62, ptr %index, align 8, !dbg !1331
  br label %switch.exit66, !dbg !1331

switch.case63:                                    ; preds = %switch.entry58, %switch.entry58
  store i64 8, ptr %base_used, align 8, !dbg !1332
  %49 = load i64, ptr %index, align 8, !dbg !1334
  %add64 = add i64 %49, 1, !dbg !1334
  store i64 %add64, ptr %index, align 8, !dbg !1334
  br label %switch.exit66, !dbg !1334

switch.default65:                                 ; preds = %switch.entry58
  br label %switch.exit66, !dbg !1335

switch.exit66:                                    ; preds = %switch.default65, %switch.case63, %switch.case61, %switch.case59
  %50 = load i64, ptr %len, align 8, !dbg !1337
  %51 = load i64, ptr %index, align 8, !dbg !1338
  %eq67 = icmp eq i64 %50, %51, !dbg !1337
  br i1 %eq67, label %if.then68, label %if.exit69, !dbg !1337

if.then68:                                        ; preds = %switch.exit66
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1339
  br label %err_retblock, !dbg !1339

if.exit69:                                        ; preds = %switch.exit66
  br label %if.exit70, !dbg !1339

if.exit70:                                        ; preds = %if.exit69, %and.phi39
    #dbg_declare(ptr %value, !1340, !DIExpression(), !1341)
  store i64 0, ptr %value, align 8, !dbg !1342
  br label %loop.cond71, !dbg !1343

loop.cond71:                                      ; preds = %noerr_block133, %if.exit70
  %52 = load i64, ptr %index, align 8, !dbg !1344
  %53 = load i64, ptr %len, align 8, !dbg !1346
  %neq = icmp ne i64 %52, %53, !dbg !1344
  br i1 %neq, label %loop.body72, label %loop.exit134, !dbg !1344

loop.body72:                                      ; preds = %loop.cond71
    #dbg_declare(ptr %c73, !1347, !DIExpression(), !1349)
    #dbg_declare(ptr %ch, !1350, !DIExpression(), !1352)
  %ptradd75 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1353
  %54 = load i64, ptr %ptradd75, align 8, !dbg !1353
  %55 = load ptr, ptr %string, align 8, !dbg !1353
  %56 = load i64, ptr %index, align 8, !dbg !1354
  %add76 = add i64 %56, 1, !dbg !1354
  store i64 %add76, ptr %index, align 8, !dbg !1354
  %ge77 = icmp uge i64 %56, %54, !dbg !1354
  %57 = call i1 @llvm.expect.i1(i1 %ge77, i1 false), !dbg !1354
  br i1 %57, label %panic78, label %checkok85, !dbg !1354

checkok85:                                        ; preds = %loop.body72
  %ptradd86 = getelementptr inbounds i8, ptr %55, i64 %56, !dbg !1354
  %58 = load i8, ptr %ptradd86, align 1, !dbg !1354
  store i8 %58, ptr %ch, align 1, !dbg !1354
  %59 = load i64, ptr %base_used, align 8, !dbg !1355
  %neq87 = icmp ne i64 %59, 16, !dbg !1355
  br i1 %neq87, label %or.phi90, label %or.rhs88, !dbg !1355

or.rhs88:                                         ; preds = %checkok85
  %60 = load i8, ptr %ch, align 1, !dbg !1356
  %lt89 = icmp ult i8 %60, 65, !dbg !1356
  br label %or.phi90, !dbg !1356

or.phi90:                                         ; preds = %or.rhs88, %checkok85
  %val91 = phi i1 [ true, %checkok85 ], [ %lt89, %or.rhs88 ], !dbg !1356
  br i1 %val91, label %if.then92, label %if.exit93, !dbg !1356

if.then92:                                        ; preds = %or.phi90
  %61 = load i8, ptr %ch, align 1, !dbg !1357
  %zext = zext i8 %61 to i32, !dbg !1357
  %sub = sub i32 %zext, 48, !dbg !1358
  %trunc = trunc i32 %sub to i8, !dbg !1358
  store i8 %trunc, ptr %blockret74, align 1, !dbg !1358
  br label %expr_block.exit, !dbg !1358

if.exit93:                                        ; preds = %or.phi90
  %62 = load i8, ptr %ch, align 1, !dbg !1359
  %le94 = icmp ule i8 %62, 70, !dbg !1359
  br i1 %le94, label %if.then95, label %if.exit100, !dbg !1359

if.then95:                                        ; preds = %if.exit93
  %63 = load i8, ptr %ch, align 1, !dbg !1360
  %zext96 = zext i8 %63 to i32, !dbg !1360
  %sub97 = sub i32 %zext96, 65, !dbg !1360
  %add98 = add i32 %sub97, 10, !dbg !1361
  %trunc99 = trunc i32 %add98 to i8, !dbg !1361
  store i8 %trunc99, ptr %blockret74, align 1, !dbg !1361
  br label %expr_block.exit, !dbg !1361

if.exit100:                                       ; preds = %if.exit93
  %64 = load i8, ptr %ch, align 1, !dbg !1362
  %lt101 = icmp ult i8 %64, 97, !dbg !1362
  br i1 %lt101, label %if.then102, label %if.exit103, !dbg !1362

if.then102:                                       ; preds = %if.exit100
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1363
  br label %guard_block, !dbg !1363

if.exit103:                                       ; preds = %if.exit100
  %65 = load i8, ptr %ch, align 1, !dbg !1364
  %gt104 = icmp ugt i8 %65, 102, !dbg !1364
  br i1 %gt104, label %if.then105, label %if.exit106, !dbg !1364

if.then105:                                       ; preds = %if.exit103
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1365
  br label %guard_block, !dbg !1365

if.exit106:                                       ; preds = %if.exit103
  %66 = load i8, ptr %ch, align 1, !dbg !1366
  %zext107 = zext i8 %66 to i32, !dbg !1366
  %sub108 = sub i32 %zext107, 97, !dbg !1366
  %add109 = add i32 %sub108, 10, !dbg !1367
  %trunc110 = trunc i32 %add109 to i8, !dbg !1367
  store i8 %trunc110, ptr %blockret74, align 1, !dbg !1367
  br label %expr_block.exit, !dbg !1367

expr_block.exit:                                  ; preds = %if.exit106, %if.then95, %if.then92
  br label %noerr_block, !dbg !1367

guard_block:                                      ; preds = %if.then105, %if.then102
  %67 = load i64, ptr %error_var, align 8, !dbg !1367
  store i64 %67, ptr %reterr, align 8, !dbg !1367
  br label %err_retblock, !dbg !1367

noerr_block:                                      ; preds = %expr_block.exit
  %68 = load i8, ptr %blockret74, align 1, !dbg !1367
  store i8 %68, ptr %c73, align 1, !dbg !1367
  %69 = load i8, ptr %c73, align 1, !dbg !1368
  %zext111 = zext i8 %69 to i64, !dbg !1368
  %70 = load i64, ptr %base_used, align 8, !dbg !1369
  %le112 = icmp sle i64 %70, %zext111, !dbg !1368
  %check = icmp slt i64 %zext111, 0, !dbg !1368
  %siui-le = or i1 %check, %le112, !dbg !1368
  br i1 %siui-le, label %if.then113, label %if.exit114, !dbg !1368

if.then113:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1370
  br label %err_retblock, !dbg !1370

if.exit114:                                       ; preds = %noerr_block
  %71 = load i8, ptr %is_negative, align 1, !dbg !1371
  %72 = trunc i8 %71 to i1, !dbg !1371
  br i1 %72, label %if.then117, label %if.exit123, !dbg !1371

if.then117:                                       ; preds = %if.exit114
    #dbg_declare(ptr %new_value, !1373, !DIExpression(), !1375)
  %73 = load i64, ptr %value, align 8, !dbg !1376
  %74 = load i64, ptr %base_used, align 8, !dbg !1377
  %mul = mul i64 %73, %74, !dbg !1376
  %75 = load i8, ptr %c73, align 1, !dbg !1378
  %zext118 = zext i8 %75 to i64, !dbg !1378
  %sub119 = sub i64 %mul, %zext118, !dbg !1376
  store i64 %sub119, ptr %new_value, align 8, !dbg !1376
  %76 = load i64, ptr %new_value, align 8, !dbg !1379
  %77 = load i64, ptr %value, align 8, !dbg !1380
  %gt120 = icmp sgt i64 %76, %77, !dbg !1379
  br i1 %gt120, label %if.then121, label %if.exit122, !dbg !1379

if.then121:                                       ; preds = %if.then117
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var115, align 8, !dbg !1381
  br label %guard_block132, !dbg !1381

if.exit122:                                       ; preds = %if.then117
  %78 = load i64, ptr %new_value, align 8, !dbg !1382
  store i64 %78, ptr %blockret116, align 8, !dbg !1382
  br label %expr_block.exit131, !dbg !1382

if.exit123:                                       ; preds = %if.exit114
    #dbg_declare(ptr %new_value124, !1383, !DIExpression(), !1384)
  %79 = load i64, ptr %value, align 8, !dbg !1385
  %80 = load i64, ptr %base_used, align 8, !dbg !1386
  %mul125 = mul i64 %79, %80, !dbg !1385
  %81 = load i8, ptr %c73, align 1, !dbg !1387
  %zext126 = zext i8 %81 to i64, !dbg !1387
  %add127 = add i64 %mul125, %zext126, !dbg !1385
  store i64 %add127, ptr %new_value124, align 8, !dbg !1385
  %82 = load i64, ptr %new_value124, align 8, !dbg !1388
  %83 = load i64, ptr %value, align 8, !dbg !1389
  %lt128 = icmp slt i64 %82, %83, !dbg !1388
  br i1 %lt128, label %if.then129, label %if.exit130, !dbg !1388

if.then129:                                       ; preds = %if.exit123
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var115, align 8, !dbg !1390
  br label %guard_block132, !dbg !1390

if.exit130:                                       ; preds = %if.exit123
  %84 = load i64, ptr %new_value124, align 8, !dbg !1391
  store i64 %84, ptr %blockret116, align 8, !dbg !1391
  br label %expr_block.exit131, !dbg !1391

expr_block.exit131:                               ; preds = %if.exit130, %if.exit122
  br label %noerr_block133, !dbg !1391

guard_block132:                                   ; preds = %if.then129, %if.then121
  %85 = load i64, ptr %error_var115, align 8, !dbg !1391
  store i64 %85, ptr %reterr, align 8, !dbg !1391
  br label %err_retblock, !dbg !1391

noerr_block133:                                   ; preds = %expr_block.exit131
  %86 = load i64, ptr %blockret116, align 8, !dbg !1391
  store i64 %86, ptr %value, align 8, !dbg !1391
  br label %loop.cond71, !dbg !1391

loop.exit134:                                     ; preds = %loop.cond71
  %87 = load i64, ptr %value, align 8, !dbg !1392
  store i64 %87, ptr %blockret, align 8, !dbg !1392
  br label %expr_block.exit135, !dbg !1392

expr_block.exit135:                               ; preds = %loop.exit134, %if.then44
  %88 = load i64, ptr %blockret, align 8, !dbg !1392
  store i64 %88, ptr %0, align 8, !dbg !1392
  ret i64 0, !dbg !1392

err_retblock:                                     ; preds = %guard_block132, %if.then113, %guard_block, %if.then68, %if.then23, %if.then
  %89 = load i64, ptr %reterr, align 8, !dbg !1392
  ret i64 %89, !dbg !1392

panic:                                            ; preds = %if.exit
  store i64 %21, ptr %taddr, align 8
  %90 = insertvalue %any undef, ptr %taddr, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr15, align 8
  %92 = insertvalue %any undef, ptr %taddr15, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %91, ptr %varargslots, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %93, ptr %ptradd16, align 16
  %94 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %94, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.67, i64 7, i32 744, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1300
  unreachable, !dbg !1300

panic27:                                          ; preds = %if.exit24
  store i64 %32, ptr %taddr28, align 8
  %95 = insertvalue %any undef, ptr %taddr28, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %34, ptr %taddr29, align 8
  %97 = insertvalue %any undef, ptr %taddr29, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %96, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %98, ptr %ptradd31, align 16
  %99 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.67, i64 7, i32 757, ptr byval(%"any[]") align 8 %indirectarg33) #5, !dbg !1316
  unreachable, !dbg !1316

panic48:                                          ; preds = %if.exit45
  store i64 %41, ptr %taddr49, align 8
  %100 = insertvalue %any undef, ptr %taddr49, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %43, ptr %taddr50, align 8
  %102 = insertvalue %any undef, ptr %taddr50, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %101, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %103, ptr %ptradd52, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.67, i64 7, i32 761, ptr byval(%"any[]") align 8 %indirectarg54) #5, !dbg !1325
  unreachable, !dbg !1325

panic78:                                          ; preds = %loop.body72
  store i64 %54, ptr %taddr79, align 8
  %105 = insertvalue %any undef, ptr %taddr79, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %56, ptr %taddr80, align 8
  %107 = insertvalue %any undef, ptr %taddr80, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %106, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %108, ptr %ptradd82, align 16
  %109 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %109, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.67, i64 7, i32 784, ptr byval(%"any[]") align 8 %indirectarg84) #5, !dbg !1354
  unreachable, !dbg !1354
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_int(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !1393 {
entry:
  %s = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i32, align 4
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i32, align 4
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %switch57 = alloca i8, align 1
  %value = alloca i32, align 4
  %c73 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret74 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %error_var115 = alloca i64, align 8
  %blockret116 = alloca i32, align 4
  %new_value = alloca i32, align 4
  %new_value124 = alloca i32, align 4
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !1397, !DIExpression(), !1398)
  store i32 %3, ptr %base, align 4
    #dbg_declare(ptr %base, !1399, !DIExpression(), !1400)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %s, i32 16, i1 false)
  %4 = load i32, ptr %base, align 4
  store i32 %4, ptr %base1, align 4
  %5 = load i32, ptr %base1, align 4, !dbg !1401
  %le = icmp sle i32 %5, 10, !dbg !1401
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1401

and.rhs:                                          ; preds = %entry
  %6 = load i32, ptr %base1, align 4, !dbg !1405
  %gt = icmp sgt i32 %6, 1, !dbg !1405
  br label %and.phi, !dbg !1405

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1405
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1405

or.rhs:                                           ; preds = %and.phi
  %7 = load i32, ptr %base1, align 4, !dbg !1406
  %eq = icmp eq i32 %7, 16, !dbg !1406
  br label %or.phi, !dbg !1406

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1406
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1406

assert_fail:                                      ; preds = %or.phi
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1401
  call void %8(ptr @.panic_msg.65, i64 79, ptr @.file.18, i64 9, ptr @.func.68, i64 6, i32 734) #5, !dbg !1401
  unreachable, !dbg !1401

assert_ok:                                        ; preds = %or.phi
    #dbg_declare(ptr %len, !1407, !DIExpression(), !1408)
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1409
  %9 = load i64, ptr %ptradd3, align 8, !dbg !1409
  store i64 %9, ptr %len, align 8, !dbg !1409
    #dbg_declare(ptr %index, !1410, !DIExpression(), !1411)
  store i64 0, ptr %index, align 8, !dbg !1412
    #dbg_declare(ptr %ptr, !1413, !DIExpression(), !1414)
  %10 = load ptr, ptr %string, align 8, !dbg !1415
  store ptr %10, ptr %ptr, align 8, !dbg !1415
  br label %loop.cond, !dbg !1416

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %11 = load i64, ptr %index, align 8, !dbg !1417
  %12 = load i64, ptr %len, align 8, !dbg !1419
  %lt = icmp ult i64 %11, %12, !dbg !1417
  br i1 %lt, label %and.rhs4, label %and.phi11, !dbg !1417

and.rhs4:                                         ; preds = %loop.cond
  %13 = load ptr, ptr %ptr, align 8, !dbg !1420
  %14 = load i64, ptr %index, align 8, !dbg !1421
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 %14, !dbg !1421
  %15 = load i8, ptr %ptradd5, align 1
  store i8 %15, ptr %c, align 1
  %16 = load i8, ptr %c, align 1, !dbg !1422
  %eq6 = icmp eq i8 %16, 32, !dbg !1422
  br i1 %eq6, label %or.phi9, label %or.rhs7, !dbg !1422

or.rhs7:                                          ; preds = %and.rhs4
  %17 = load i8, ptr %c, align 1, !dbg !1425
  %eq8 = icmp eq i8 %17, 9, !dbg !1425
  br label %or.phi9, !dbg !1425

or.phi9:                                          ; preds = %or.rhs7, %and.rhs4
  %val10 = phi i1 [ true, %and.rhs4 ], [ %eq8, %or.rhs7 ], !dbg !1425
  br label %and.phi11, !dbg !1425

and.phi11:                                        ; preds = %or.phi9, %loop.cond
  %val12 = phi i1 [ false, %loop.cond ], [ %val10, %or.phi9 ], !dbg !1425
  br i1 %val12, label %loop.body, label %loop.exit, !dbg !1425

loop.body:                                        ; preds = %and.phi11
  %18 = load i64, ptr %index, align 8, !dbg !1426
  %add = add i64 %18, 1, !dbg !1426
  store i64 %add, ptr %index, align 8, !dbg !1426
  br label %loop.cond, !dbg !1426

loop.exit:                                        ; preds = %and.phi11
  %19 = load i64, ptr %len, align 8, !dbg !1427
  %20 = load i64, ptr %index, align 8, !dbg !1428
  %eq13 = icmp eq i64 %19, %20, !dbg !1427
  br i1 %eq13, label %if.then, label %if.exit, !dbg !1427

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1429
  br label %err_retblock, !dbg !1429

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !1430, !DIExpression(), !1431)
  store i8 0, ptr %is_negative, align 1, !dbg !1431
  %ptradd14 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1432
  %21 = load i64, ptr %ptradd14, align 8, !dbg !1432
  %22 = load ptr, ptr %string, align 8, !dbg !1432
  %23 = load i64, ptr %index, align 8, !dbg !1434
  %ge = icmp uge i64 %23, %21, !dbg !1434
  %24 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1434
  br i1 %24, label %panic, label %checkok, !dbg !1434

checkok:                                          ; preds = %if.exit
  %ptradd17 = getelementptr inbounds i8, ptr %22, i64 %23, !dbg !1434
  %25 = load i8, ptr %ptradd17, align 1
  store i8 %25, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %26 = load i8, ptr %switch, align 1
  switch i8 %26, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case20
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit18, !dbg !1435

if.exit18:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1437
  %27 = load i64, ptr %index, align 8, !dbg !1438
  %add19 = add i64 %27, 1, !dbg !1438
  store i64 %add19, ptr %index, align 8, !dbg !1438
  br label %switch.exit, !dbg !1438

switch.case20:                                    ; preds = %switch.entry
  %28 = load i64, ptr %index, align 8, !dbg !1439
  %add21 = add i64 %28, 1, !dbg !1439
  store i64 %add21, ptr %index, align 8, !dbg !1439
  br label %switch.exit, !dbg !1439

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1441

switch.exit:                                      ; preds = %switch.default, %switch.case20, %if.exit18
  %29 = load i64, ptr %len, align 8, !dbg !1443
  %30 = load i64, ptr %index, align 8, !dbg !1444
  %eq22 = icmp eq i64 %29, %30, !dbg !1443
  br i1 %eq22, label %if.then23, label %if.exit24, !dbg !1443

if.then23:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1445
  br label %err_retblock, !dbg !1445

if.exit24:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !1446, !DIExpression(), !1447)
  %31 = load i32, ptr %base1, align 4, !dbg !1448
  store i32 %31, ptr %base_used, align 4, !dbg !1448
  %ptradd25 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1449
  %32 = load i64, ptr %ptradd25, align 8, !dbg !1449
  %33 = load ptr, ptr %string, align 8, !dbg !1449
  %34 = load i64, ptr %index, align 8, !dbg !1450
  %ge26 = icmp uge i64 %34, %32, !dbg !1450
  %35 = call i1 @llvm.expect.i1(i1 %ge26, i1 false), !dbg !1450
  br i1 %35, label %panic27, label %checkok34, !dbg !1450

checkok34:                                        ; preds = %if.exit24
  %ptradd35 = getelementptr inbounds i8, ptr %33, i64 %34, !dbg !1450
  %36 = load i8, ptr %ptradd35, align 1, !dbg !1450
  %eq36 = icmp eq i8 %36, 48, !dbg !1449
  br i1 %eq36, label %and.rhs37, label %and.phi39, !dbg !1449

and.rhs37:                                        ; preds = %checkok34
  %37 = load i32, ptr %base1, align 4, !dbg !1451
  %eq38 = icmp eq i32 %37, 10, !dbg !1451
  br label %and.phi39, !dbg !1451

and.phi39:                                        ; preds = %and.rhs37, %checkok34
  %val40 = phi i1 [ false, %checkok34 ], [ %eq38, %and.rhs37 ], !dbg !1451
  br i1 %val40, label %if.then41, label %if.exit70, !dbg !1451

if.then41:                                        ; preds = %and.phi39
  %38 = load i64, ptr %index, align 8, !dbg !1452
  %add42 = add i64 %38, 1, !dbg !1452
  store i64 %add42, ptr %index, align 8, !dbg !1452
  %39 = load i64, ptr %index, align 8, !dbg !1454
  %40 = load i64, ptr %len, align 8, !dbg !1455
  %eq43 = icmp eq i64 %39, %40, !dbg !1454
  br i1 %eq43, label %if.then44, label %if.exit45, !dbg !1454

if.then44:                                        ; preds = %if.then41
  store i32 0, ptr %blockret, align 4, !dbg !1456
  br label %expr_block.exit135, !dbg !1456

if.exit45:                                        ; preds = %if.then41
  %ptradd46 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1457
  %41 = load i64, ptr %ptradd46, align 8, !dbg !1457
  %42 = load ptr, ptr %string, align 8, !dbg !1457
  %43 = load i64, ptr %index, align 8, !dbg !1459
  %ge47 = icmp uge i64 %43, %41, !dbg !1459
  %44 = call i1 @llvm.expect.i1(i1 %ge47, i1 false), !dbg !1459
  br i1 %44, label %panic48, label %checkok55, !dbg !1459

checkok55:                                        ; preds = %if.exit45
  %ptradd56 = getelementptr inbounds i8, ptr %42, i64 %43, !dbg !1459
  %45 = load i8, ptr %ptradd56, align 1
  store i8 %45, ptr %switch57, align 1
  br label %switch.entry58

switch.entry58:                                   ; preds = %checkok55
  %46 = load i8, ptr %switch57, align 1
  switch i8 %46, label %switch.default65 [
    i8 120, label %switch.case59
    i8 88, label %switch.case59
    i8 98, label %switch.case61
    i8 66, label %switch.case61
    i8 111, label %switch.case63
    i8 79, label %switch.case63
  ]

switch.case59:                                    ; preds = %switch.entry58, %switch.entry58
  store i32 16, ptr %base_used, align 4, !dbg !1460
  %47 = load i64, ptr %index, align 8, !dbg !1462
  %add60 = add i64 %47, 1, !dbg !1462
  store i64 %add60, ptr %index, align 8, !dbg !1462
  br label %switch.exit66, !dbg !1462

switch.case61:                                    ; preds = %switch.entry58, %switch.entry58
  store i32 2, ptr %base_used, align 4, !dbg !1463
  %48 = load i64, ptr %index, align 8, !dbg !1465
  %add62 = add i64 %48, 1, !dbg !1465
  store i64 %add62, ptr %index, align 8, !dbg !1465
  br label %switch.exit66, !dbg !1465

switch.case63:                                    ; preds = %switch.entry58, %switch.entry58
  store i32 8, ptr %base_used, align 4, !dbg !1466
  %49 = load i64, ptr %index, align 8, !dbg !1468
  %add64 = add i64 %49, 1, !dbg !1468
  store i64 %add64, ptr %index, align 8, !dbg !1468
  br label %switch.exit66, !dbg !1468

switch.default65:                                 ; preds = %switch.entry58
  br label %switch.exit66, !dbg !1469

switch.exit66:                                    ; preds = %switch.default65, %switch.case63, %switch.case61, %switch.case59
  %50 = load i64, ptr %len, align 8, !dbg !1471
  %51 = load i64, ptr %index, align 8, !dbg !1472
  %eq67 = icmp eq i64 %50, %51, !dbg !1471
  br i1 %eq67, label %if.then68, label %if.exit69, !dbg !1471

if.then68:                                        ; preds = %switch.exit66
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1473
  br label %err_retblock, !dbg !1473

if.exit69:                                        ; preds = %switch.exit66
  br label %if.exit70, !dbg !1473

if.exit70:                                        ; preds = %if.exit69, %and.phi39
    #dbg_declare(ptr %value, !1474, !DIExpression(), !1475)
  store i32 0, ptr %value, align 4, !dbg !1476
  br label %loop.cond71, !dbg !1477

loop.cond71:                                      ; preds = %noerr_block133, %if.exit70
  %52 = load i64, ptr %index, align 8, !dbg !1478
  %53 = load i64, ptr %len, align 8, !dbg !1480
  %neq = icmp ne i64 %52, %53, !dbg !1478
  br i1 %neq, label %loop.body72, label %loop.exit134, !dbg !1478

loop.body72:                                      ; preds = %loop.cond71
    #dbg_declare(ptr %c73, !1481, !DIExpression(), !1483)
    #dbg_declare(ptr %ch, !1484, !DIExpression(), !1486)
  %ptradd75 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1487
  %54 = load i64, ptr %ptradd75, align 8, !dbg !1487
  %55 = load ptr, ptr %string, align 8, !dbg !1487
  %56 = load i64, ptr %index, align 8, !dbg !1488
  %add76 = add i64 %56, 1, !dbg !1488
  store i64 %add76, ptr %index, align 8, !dbg !1488
  %ge77 = icmp uge i64 %56, %54, !dbg !1488
  %57 = call i1 @llvm.expect.i1(i1 %ge77, i1 false), !dbg !1488
  br i1 %57, label %panic78, label %checkok85, !dbg !1488

checkok85:                                        ; preds = %loop.body72
  %ptradd86 = getelementptr inbounds i8, ptr %55, i64 %56, !dbg !1488
  %58 = load i8, ptr %ptradd86, align 1, !dbg !1488
  store i8 %58, ptr %ch, align 1, !dbg !1488
  %59 = load i32, ptr %base_used, align 4, !dbg !1489
  %neq87 = icmp ne i32 %59, 16, !dbg !1489
  br i1 %neq87, label %or.phi90, label %or.rhs88, !dbg !1489

or.rhs88:                                         ; preds = %checkok85
  %60 = load i8, ptr %ch, align 1, !dbg !1490
  %lt89 = icmp ult i8 %60, 65, !dbg !1490
  br label %or.phi90, !dbg !1490

or.phi90:                                         ; preds = %or.rhs88, %checkok85
  %val91 = phi i1 [ true, %checkok85 ], [ %lt89, %or.rhs88 ], !dbg !1490
  br i1 %val91, label %if.then92, label %if.exit93, !dbg !1490

if.then92:                                        ; preds = %or.phi90
  %61 = load i8, ptr %ch, align 1, !dbg !1491
  %zext = zext i8 %61 to i32, !dbg !1491
  %sub = sub i32 %zext, 48, !dbg !1492
  %trunc = trunc i32 %sub to i8, !dbg !1492
  store i8 %trunc, ptr %blockret74, align 1, !dbg !1492
  br label %expr_block.exit, !dbg !1492

if.exit93:                                        ; preds = %or.phi90
  %62 = load i8, ptr %ch, align 1, !dbg !1493
  %le94 = icmp ule i8 %62, 70, !dbg !1493
  br i1 %le94, label %if.then95, label %if.exit100, !dbg !1493

if.then95:                                        ; preds = %if.exit93
  %63 = load i8, ptr %ch, align 1, !dbg !1494
  %zext96 = zext i8 %63 to i32, !dbg !1494
  %sub97 = sub i32 %zext96, 65, !dbg !1494
  %add98 = add i32 %sub97, 10, !dbg !1495
  %trunc99 = trunc i32 %add98 to i8, !dbg !1495
  store i8 %trunc99, ptr %blockret74, align 1, !dbg !1495
  br label %expr_block.exit, !dbg !1495

if.exit100:                                       ; preds = %if.exit93
  %64 = load i8, ptr %ch, align 1, !dbg !1496
  %lt101 = icmp ult i8 %64, 97, !dbg !1496
  br i1 %lt101, label %if.then102, label %if.exit103, !dbg !1496

if.then102:                                       ; preds = %if.exit100
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1497
  br label %guard_block, !dbg !1497

if.exit103:                                       ; preds = %if.exit100
  %65 = load i8, ptr %ch, align 1, !dbg !1498
  %gt104 = icmp ugt i8 %65, 102, !dbg !1498
  br i1 %gt104, label %if.then105, label %if.exit106, !dbg !1498

if.then105:                                       ; preds = %if.exit103
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1499
  br label %guard_block, !dbg !1499

if.exit106:                                       ; preds = %if.exit103
  %66 = load i8, ptr %ch, align 1, !dbg !1500
  %zext107 = zext i8 %66 to i32, !dbg !1500
  %sub108 = sub i32 %zext107, 97, !dbg !1500
  %add109 = add i32 %sub108, 10, !dbg !1501
  %trunc110 = trunc i32 %add109 to i8, !dbg !1501
  store i8 %trunc110, ptr %blockret74, align 1, !dbg !1501
  br label %expr_block.exit, !dbg !1501

expr_block.exit:                                  ; preds = %if.exit106, %if.then95, %if.then92
  br label %noerr_block, !dbg !1501

guard_block:                                      ; preds = %if.then105, %if.then102
  %67 = load i64, ptr %error_var, align 8, !dbg !1501
  store i64 %67, ptr %reterr, align 8, !dbg !1501
  br label %err_retblock, !dbg !1501

noerr_block:                                      ; preds = %expr_block.exit
  %68 = load i8, ptr %blockret74, align 1, !dbg !1501
  store i8 %68, ptr %c73, align 1, !dbg !1501
  %69 = load i8, ptr %c73, align 1, !dbg !1502
  %zext111 = zext i8 %69 to i32, !dbg !1502
  %70 = load i32, ptr %base_used, align 4, !dbg !1503
  %le112 = icmp sle i32 %70, %zext111, !dbg !1502
  %check = icmp slt i32 %zext111, 0, !dbg !1502
  %siui-le = or i1 %check, %le112, !dbg !1502
  br i1 %siui-le, label %if.then113, label %if.exit114, !dbg !1502

if.then113:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1504
  br label %err_retblock, !dbg !1504

if.exit114:                                       ; preds = %noerr_block
  %71 = load i8, ptr %is_negative, align 1, !dbg !1505
  %72 = trunc i8 %71 to i1, !dbg !1505
  br i1 %72, label %if.then117, label %if.exit123, !dbg !1505

if.then117:                                       ; preds = %if.exit114
    #dbg_declare(ptr %new_value, !1507, !DIExpression(), !1509)
  %73 = load i32, ptr %value, align 4, !dbg !1510
  %74 = load i32, ptr %base_used, align 4, !dbg !1511
  %mul = mul i32 %73, %74, !dbg !1510
  %75 = load i8, ptr %c73, align 1, !dbg !1512
  %zext118 = zext i8 %75 to i32, !dbg !1512
  %sub119 = sub i32 %mul, %zext118, !dbg !1510
  store i32 %sub119, ptr %new_value, align 4, !dbg !1510
  %76 = load i32, ptr %new_value, align 4, !dbg !1513
  %77 = load i32, ptr %value, align 4, !dbg !1514
  %gt120 = icmp sgt i32 %76, %77, !dbg !1513
  br i1 %gt120, label %if.then121, label %if.exit122, !dbg !1513

if.then121:                                       ; preds = %if.then117
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var115, align 8, !dbg !1515
  br label %guard_block132, !dbg !1515

if.exit122:                                       ; preds = %if.then117
  %78 = load i32, ptr %new_value, align 4, !dbg !1516
  store i32 %78, ptr %blockret116, align 4, !dbg !1516
  br label %expr_block.exit131, !dbg !1516

if.exit123:                                       ; preds = %if.exit114
    #dbg_declare(ptr %new_value124, !1517, !DIExpression(), !1518)
  %79 = load i32, ptr %value, align 4, !dbg !1519
  %80 = load i32, ptr %base_used, align 4, !dbg !1520
  %mul125 = mul i32 %79, %80, !dbg !1519
  %81 = load i8, ptr %c73, align 1, !dbg !1521
  %zext126 = zext i8 %81 to i32, !dbg !1521
  %add127 = add i32 %mul125, %zext126, !dbg !1519
  store i32 %add127, ptr %new_value124, align 4, !dbg !1519
  %82 = load i32, ptr %new_value124, align 4, !dbg !1522
  %83 = load i32, ptr %value, align 4, !dbg !1523
  %lt128 = icmp slt i32 %82, %83, !dbg !1522
  br i1 %lt128, label %if.then129, label %if.exit130, !dbg !1522

if.then129:                                       ; preds = %if.exit123
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var115, align 8, !dbg !1524
  br label %guard_block132, !dbg !1524

if.exit130:                                       ; preds = %if.exit123
  %84 = load i32, ptr %new_value124, align 4, !dbg !1525
  store i32 %84, ptr %blockret116, align 4, !dbg !1525
  br label %expr_block.exit131, !dbg !1525

expr_block.exit131:                               ; preds = %if.exit130, %if.exit122
  br label %noerr_block133, !dbg !1525

guard_block132:                                   ; preds = %if.then129, %if.then121
  %85 = load i64, ptr %error_var115, align 8, !dbg !1525
  store i64 %85, ptr %reterr, align 8, !dbg !1525
  br label %err_retblock, !dbg !1525

noerr_block133:                                   ; preds = %expr_block.exit131
  %86 = load i32, ptr %blockret116, align 4, !dbg !1525
  store i32 %86, ptr %value, align 4, !dbg !1525
  br label %loop.cond71, !dbg !1525

loop.exit134:                                     ; preds = %loop.cond71
  %87 = load i32, ptr %value, align 4, !dbg !1526
  store i32 %87, ptr %blockret, align 4, !dbg !1526
  br label %expr_block.exit135, !dbg !1526

expr_block.exit135:                               ; preds = %loop.exit134, %if.then44
  %88 = load i32, ptr %blockret, align 4, !dbg !1526
  store i32 %88, ptr %0, align 4, !dbg !1526
  ret i64 0, !dbg !1526

err_retblock:                                     ; preds = %guard_block132, %if.then113, %guard_block, %if.then68, %if.then23, %if.then
  %89 = load i64, ptr %reterr, align 8, !dbg !1526
  ret i64 %89, !dbg !1526

panic:                                            ; preds = %if.exit
  store i64 %21, ptr %taddr, align 8
  %90 = insertvalue %any undef, ptr %taddr, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr15, align 8
  %92 = insertvalue %any undef, ptr %taddr15, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %91, ptr %varargslots, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %93, ptr %ptradd16, align 16
  %94 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %94, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.68, i64 6, i32 744, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1434
  unreachable, !dbg !1434

panic27:                                          ; preds = %if.exit24
  store i64 %32, ptr %taddr28, align 8
  %95 = insertvalue %any undef, ptr %taddr28, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %34, ptr %taddr29, align 8
  %97 = insertvalue %any undef, ptr %taddr29, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %96, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %98, ptr %ptradd31, align 16
  %99 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.68, i64 6, i32 757, ptr byval(%"any[]") align 8 %indirectarg33) #5, !dbg !1450
  unreachable, !dbg !1450

panic48:                                          ; preds = %if.exit45
  store i64 %41, ptr %taddr49, align 8
  %100 = insertvalue %any undef, ptr %taddr49, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %43, ptr %taddr50, align 8
  %102 = insertvalue %any undef, ptr %taddr50, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %101, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %103, ptr %ptradd52, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.68, i64 6, i32 761, ptr byval(%"any[]") align 8 %indirectarg54) #5, !dbg !1459
  unreachable, !dbg !1459

panic78:                                          ; preds = %loop.body72
  store i64 %54, ptr %taddr79, align 8
  %105 = insertvalue %any undef, ptr %taddr79, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %56, ptr %taddr80, align 8
  %107 = insertvalue %any undef, ptr %taddr80, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %106, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %108, ptr %ptradd82, align 16
  %109 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %109, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.68, i64 6, i32 784, ptr byval(%"any[]") align 8 %indirectarg84) #5, !dbg !1488
  unreachable, !dbg !1488
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_short(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !1527 {
entry:
  %s = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i16, align 2
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i16, align 2
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %switch57 = alloca i8, align 1
  %value = alloca i16, align 2
  %c73 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret74 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %error_var116 = alloca i64, align 8
  %blockret117 = alloca i16, align 2
  %new_value = alloca i16, align 2
  %new_value128 = alloca i16, align 2
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !1532, !DIExpression(), !1533)
  store i32 %3, ptr %base, align 4
    #dbg_declare(ptr %base, !1534, !DIExpression(), !1535)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %s, i32 16, i1 false)
  %4 = load i32, ptr %base, align 4
  store i32 %4, ptr %base1, align 4
  %5 = load i32, ptr %base1, align 4, !dbg !1536
  %le = icmp sle i32 %5, 10, !dbg !1536
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1536

and.rhs:                                          ; preds = %entry
  %6 = load i32, ptr %base1, align 4, !dbg !1540
  %gt = icmp sgt i32 %6, 1, !dbg !1540
  br label %and.phi, !dbg !1540

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1540
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1540

or.rhs:                                           ; preds = %and.phi
  %7 = load i32, ptr %base1, align 4, !dbg !1541
  %eq = icmp eq i32 %7, 16, !dbg !1541
  br label %or.phi, !dbg !1541

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1541
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1541

assert_fail:                                      ; preds = %or.phi
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1536
  call void %8(ptr @.panic_msg.65, i64 79, ptr @.file.18, i64 9, ptr @.func.69, i64 8, i32 734) #5, !dbg !1536
  unreachable, !dbg !1536

assert_ok:                                        ; preds = %or.phi
    #dbg_declare(ptr %len, !1542, !DIExpression(), !1543)
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1544
  %9 = load i64, ptr %ptradd3, align 8, !dbg !1544
  store i64 %9, ptr %len, align 8, !dbg !1544
    #dbg_declare(ptr %index, !1545, !DIExpression(), !1546)
  store i64 0, ptr %index, align 8, !dbg !1547
    #dbg_declare(ptr %ptr, !1548, !DIExpression(), !1549)
  %10 = load ptr, ptr %string, align 8, !dbg !1550
  store ptr %10, ptr %ptr, align 8, !dbg !1550
  br label %loop.cond, !dbg !1551

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %11 = load i64, ptr %index, align 8, !dbg !1552
  %12 = load i64, ptr %len, align 8, !dbg !1554
  %lt = icmp ult i64 %11, %12, !dbg !1552
  br i1 %lt, label %and.rhs4, label %and.phi11, !dbg !1552

and.rhs4:                                         ; preds = %loop.cond
  %13 = load ptr, ptr %ptr, align 8, !dbg !1555
  %14 = load i64, ptr %index, align 8, !dbg !1556
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 %14, !dbg !1556
  %15 = load i8, ptr %ptradd5, align 1
  store i8 %15, ptr %c, align 1
  %16 = load i8, ptr %c, align 1, !dbg !1557
  %eq6 = icmp eq i8 %16, 32, !dbg !1557
  br i1 %eq6, label %or.phi9, label %or.rhs7, !dbg !1557

or.rhs7:                                          ; preds = %and.rhs4
  %17 = load i8, ptr %c, align 1, !dbg !1560
  %eq8 = icmp eq i8 %17, 9, !dbg !1560
  br label %or.phi9, !dbg !1560

or.phi9:                                          ; preds = %or.rhs7, %and.rhs4
  %val10 = phi i1 [ true, %and.rhs4 ], [ %eq8, %or.rhs7 ], !dbg !1560
  br label %and.phi11, !dbg !1560

and.phi11:                                        ; preds = %or.phi9, %loop.cond
  %val12 = phi i1 [ false, %loop.cond ], [ %val10, %or.phi9 ], !dbg !1560
  br i1 %val12, label %loop.body, label %loop.exit, !dbg !1560

loop.body:                                        ; preds = %and.phi11
  %18 = load i64, ptr %index, align 8, !dbg !1561
  %add = add i64 %18, 1, !dbg !1561
  store i64 %add, ptr %index, align 8, !dbg !1561
  br label %loop.cond, !dbg !1561

loop.exit:                                        ; preds = %and.phi11
  %19 = load i64, ptr %len, align 8, !dbg !1562
  %20 = load i64, ptr %index, align 8, !dbg !1563
  %eq13 = icmp eq i64 %19, %20, !dbg !1562
  br i1 %eq13, label %if.then, label %if.exit, !dbg !1562

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1564
  br label %err_retblock, !dbg !1564

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !1565, !DIExpression(), !1566)
  store i8 0, ptr %is_negative, align 1, !dbg !1566
  %ptradd14 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1567
  %21 = load i64, ptr %ptradd14, align 8, !dbg !1567
  %22 = load ptr, ptr %string, align 8, !dbg !1567
  %23 = load i64, ptr %index, align 8, !dbg !1569
  %ge = icmp uge i64 %23, %21, !dbg !1569
  %24 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1569
  br i1 %24, label %panic, label %checkok, !dbg !1569

checkok:                                          ; preds = %if.exit
  %ptradd17 = getelementptr inbounds i8, ptr %22, i64 %23, !dbg !1569
  %25 = load i8, ptr %ptradd17, align 1
  store i8 %25, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %26 = load i8, ptr %switch, align 1
  switch i8 %26, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case20
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit18, !dbg !1570

if.exit18:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1572
  %27 = load i64, ptr %index, align 8, !dbg !1573
  %add19 = add i64 %27, 1, !dbg !1573
  store i64 %add19, ptr %index, align 8, !dbg !1573
  br label %switch.exit, !dbg !1573

switch.case20:                                    ; preds = %switch.entry
  %28 = load i64, ptr %index, align 8, !dbg !1574
  %add21 = add i64 %28, 1, !dbg !1574
  store i64 %add21, ptr %index, align 8, !dbg !1574
  br label %switch.exit, !dbg !1574

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1576

switch.exit:                                      ; preds = %switch.default, %switch.case20, %if.exit18
  %29 = load i64, ptr %len, align 8, !dbg !1578
  %30 = load i64, ptr %index, align 8, !dbg !1579
  %eq22 = icmp eq i64 %29, %30, !dbg !1578
  br i1 %eq22, label %if.then23, label %if.exit24, !dbg !1578

if.then23:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1580
  br label %err_retblock, !dbg !1580

if.exit24:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !1581, !DIExpression(), !1582)
  %31 = load i32, ptr %base1, align 4, !dbg !1583
  %trunc = trunc i32 %31 to i16, !dbg !1583
  store i16 %trunc, ptr %base_used, align 2, !dbg !1583
  %ptradd25 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1584
  %32 = load i64, ptr %ptradd25, align 8, !dbg !1584
  %33 = load ptr, ptr %string, align 8, !dbg !1584
  %34 = load i64, ptr %index, align 8, !dbg !1585
  %ge26 = icmp uge i64 %34, %32, !dbg !1585
  %35 = call i1 @llvm.expect.i1(i1 %ge26, i1 false), !dbg !1585
  br i1 %35, label %panic27, label %checkok34, !dbg !1585

checkok34:                                        ; preds = %if.exit24
  %ptradd35 = getelementptr inbounds i8, ptr %33, i64 %34, !dbg !1585
  %36 = load i8, ptr %ptradd35, align 1, !dbg !1585
  %eq36 = icmp eq i8 %36, 48, !dbg !1584
  br i1 %eq36, label %and.rhs37, label %and.phi39, !dbg !1584

and.rhs37:                                        ; preds = %checkok34
  %37 = load i32, ptr %base1, align 4, !dbg !1586
  %eq38 = icmp eq i32 %37, 10, !dbg !1586
  br label %and.phi39, !dbg !1586

and.phi39:                                        ; preds = %and.rhs37, %checkok34
  %val40 = phi i1 [ false, %checkok34 ], [ %eq38, %and.rhs37 ], !dbg !1586
  br i1 %val40, label %if.then41, label %if.exit70, !dbg !1586

if.then41:                                        ; preds = %and.phi39
  %38 = load i64, ptr %index, align 8, !dbg !1587
  %add42 = add i64 %38, 1, !dbg !1587
  store i64 %add42, ptr %index, align 8, !dbg !1587
  %39 = load i64, ptr %index, align 8, !dbg !1589
  %40 = load i64, ptr %len, align 8, !dbg !1590
  %eq43 = icmp eq i64 %39, %40, !dbg !1589
  br i1 %eq43, label %if.then44, label %if.exit45, !dbg !1589

if.then44:                                        ; preds = %if.then41
  store i16 0, ptr %blockret, align 2, !dbg !1591
  br label %expr_block.exit142, !dbg !1591

if.exit45:                                        ; preds = %if.then41
  %ptradd46 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1592
  %41 = load i64, ptr %ptradd46, align 8, !dbg !1592
  %42 = load ptr, ptr %string, align 8, !dbg !1592
  %43 = load i64, ptr %index, align 8, !dbg !1594
  %ge47 = icmp uge i64 %43, %41, !dbg !1594
  %44 = call i1 @llvm.expect.i1(i1 %ge47, i1 false), !dbg !1594
  br i1 %44, label %panic48, label %checkok55, !dbg !1594

checkok55:                                        ; preds = %if.exit45
  %ptradd56 = getelementptr inbounds i8, ptr %42, i64 %43, !dbg !1594
  %45 = load i8, ptr %ptradd56, align 1
  store i8 %45, ptr %switch57, align 1
  br label %switch.entry58

switch.entry58:                                   ; preds = %checkok55
  %46 = load i8, ptr %switch57, align 1
  switch i8 %46, label %switch.default65 [
    i8 120, label %switch.case59
    i8 88, label %switch.case59
    i8 98, label %switch.case61
    i8 66, label %switch.case61
    i8 111, label %switch.case63
    i8 79, label %switch.case63
  ]

switch.case59:                                    ; preds = %switch.entry58, %switch.entry58
  store i16 16, ptr %base_used, align 2, !dbg !1595
  %47 = load i64, ptr %index, align 8, !dbg !1597
  %add60 = add i64 %47, 1, !dbg !1597
  store i64 %add60, ptr %index, align 8, !dbg !1597
  br label %switch.exit66, !dbg !1597

switch.case61:                                    ; preds = %switch.entry58, %switch.entry58
  store i16 2, ptr %base_used, align 2, !dbg !1598
  %48 = load i64, ptr %index, align 8, !dbg !1600
  %add62 = add i64 %48, 1, !dbg !1600
  store i64 %add62, ptr %index, align 8, !dbg !1600
  br label %switch.exit66, !dbg !1600

switch.case63:                                    ; preds = %switch.entry58, %switch.entry58
  store i16 8, ptr %base_used, align 2, !dbg !1601
  %49 = load i64, ptr %index, align 8, !dbg !1603
  %add64 = add i64 %49, 1, !dbg !1603
  store i64 %add64, ptr %index, align 8, !dbg !1603
  br label %switch.exit66, !dbg !1603

switch.default65:                                 ; preds = %switch.entry58
  br label %switch.exit66, !dbg !1604

switch.exit66:                                    ; preds = %switch.default65, %switch.case63, %switch.case61, %switch.case59
  %50 = load i64, ptr %len, align 8, !dbg !1606
  %51 = load i64, ptr %index, align 8, !dbg !1607
  %eq67 = icmp eq i64 %50, %51, !dbg !1606
  br i1 %eq67, label %if.then68, label %if.exit69, !dbg !1606

if.then68:                                        ; preds = %switch.exit66
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1608
  br label %err_retblock, !dbg !1608

if.exit69:                                        ; preds = %switch.exit66
  br label %if.exit70, !dbg !1608

if.exit70:                                        ; preds = %if.exit69, %and.phi39
    #dbg_declare(ptr %value, !1609, !DIExpression(), !1610)
  store i16 0, ptr %value, align 2, !dbg !1611
  br label %loop.cond71, !dbg !1612

loop.cond71:                                      ; preds = %noerr_block140, %if.exit70
  %52 = load i64, ptr %index, align 8, !dbg !1613
  %53 = load i64, ptr %len, align 8, !dbg !1615
  %neq = icmp ne i64 %52, %53, !dbg !1613
  br i1 %neq, label %loop.body72, label %loop.exit141, !dbg !1613

loop.body72:                                      ; preds = %loop.cond71
    #dbg_declare(ptr %c73, !1616, !DIExpression(), !1618)
    #dbg_declare(ptr %ch, !1619, !DIExpression(), !1621)
  %ptradd75 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1622
  %54 = load i64, ptr %ptradd75, align 8, !dbg !1622
  %55 = load ptr, ptr %string, align 8, !dbg !1622
  %56 = load i64, ptr %index, align 8, !dbg !1623
  %add76 = add i64 %56, 1, !dbg !1623
  store i64 %add76, ptr %index, align 8, !dbg !1623
  %ge77 = icmp uge i64 %56, %54, !dbg !1623
  %57 = call i1 @llvm.expect.i1(i1 %ge77, i1 false), !dbg !1623
  br i1 %57, label %panic78, label %checkok85, !dbg !1623

checkok85:                                        ; preds = %loop.body72
  %ptradd86 = getelementptr inbounds i8, ptr %55, i64 %56, !dbg !1623
  %58 = load i8, ptr %ptradd86, align 1, !dbg !1623
  store i8 %58, ptr %ch, align 1, !dbg !1623
  %59 = load i16, ptr %base_used, align 2, !dbg !1624
  %sext = sext i16 %59 to i32, !dbg !1624
  %neq87 = icmp ne i32 %sext, 16, !dbg !1624
  br i1 %neq87, label %or.phi90, label %or.rhs88, !dbg !1624

or.rhs88:                                         ; preds = %checkok85
  %60 = load i8, ptr %ch, align 1, !dbg !1625
  %lt89 = icmp ult i8 %60, 65, !dbg !1625
  br label %or.phi90, !dbg !1625

or.phi90:                                         ; preds = %or.rhs88, %checkok85
  %val91 = phi i1 [ true, %checkok85 ], [ %lt89, %or.rhs88 ], !dbg !1625
  br i1 %val91, label %if.then92, label %if.exit94, !dbg !1625

if.then92:                                        ; preds = %or.phi90
  %61 = load i8, ptr %ch, align 1, !dbg !1626
  %zext = zext i8 %61 to i32, !dbg !1626
  %sub = sub i32 %zext, 48, !dbg !1627
  %trunc93 = trunc i32 %sub to i8, !dbg !1627
  store i8 %trunc93, ptr %blockret74, align 1, !dbg !1627
  br label %expr_block.exit, !dbg !1627

if.exit94:                                        ; preds = %or.phi90
  %62 = load i8, ptr %ch, align 1, !dbg !1628
  %le95 = icmp ule i8 %62, 70, !dbg !1628
  br i1 %le95, label %if.then96, label %if.exit101, !dbg !1628

if.then96:                                        ; preds = %if.exit94
  %63 = load i8, ptr %ch, align 1, !dbg !1629
  %zext97 = zext i8 %63 to i32, !dbg !1629
  %sub98 = sub i32 %zext97, 65, !dbg !1629
  %add99 = add i32 %sub98, 10, !dbg !1630
  %trunc100 = trunc i32 %add99 to i8, !dbg !1630
  store i8 %trunc100, ptr %blockret74, align 1, !dbg !1630
  br label %expr_block.exit, !dbg !1630

if.exit101:                                       ; preds = %if.exit94
  %64 = load i8, ptr %ch, align 1, !dbg !1631
  %lt102 = icmp ult i8 %64, 97, !dbg !1631
  br i1 %lt102, label %if.then103, label %if.exit104, !dbg !1631

if.then103:                                       ; preds = %if.exit101
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1632
  br label %guard_block, !dbg !1632

if.exit104:                                       ; preds = %if.exit101
  %65 = load i8, ptr %ch, align 1, !dbg !1633
  %gt105 = icmp ugt i8 %65, 102, !dbg !1633
  br i1 %gt105, label %if.then106, label %if.exit107, !dbg !1633

if.then106:                                       ; preds = %if.exit104
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1634
  br label %guard_block, !dbg !1634

if.exit107:                                       ; preds = %if.exit104
  %66 = load i8, ptr %ch, align 1, !dbg !1635
  %zext108 = zext i8 %66 to i32, !dbg !1635
  %sub109 = sub i32 %zext108, 97, !dbg !1635
  %add110 = add i32 %sub109, 10, !dbg !1636
  %trunc111 = trunc i32 %add110 to i8, !dbg !1636
  store i8 %trunc111, ptr %blockret74, align 1, !dbg !1636
  br label %expr_block.exit, !dbg !1636

expr_block.exit:                                  ; preds = %if.exit107, %if.then96, %if.then92
  br label %noerr_block, !dbg !1636

guard_block:                                      ; preds = %if.then106, %if.then103
  %67 = load i64, ptr %error_var, align 8, !dbg !1636
  store i64 %67, ptr %reterr, align 8, !dbg !1636
  br label %err_retblock, !dbg !1636

noerr_block:                                      ; preds = %expr_block.exit
  %68 = load i8, ptr %blockret74, align 1, !dbg !1636
  store i8 %68, ptr %c73, align 1, !dbg !1636
  %69 = load i8, ptr %c73, align 1, !dbg !1637
  %zext112 = zext i8 %69 to i16, !dbg !1637
  %70 = load i16, ptr %base_used, align 2, !dbg !1638
  %le113 = icmp sle i16 %70, %zext112, !dbg !1637
  %check = icmp slt i16 %zext112, 0, !dbg !1637
  %siui-le = or i1 %check, %le113, !dbg !1637
  br i1 %siui-le, label %if.then114, label %if.exit115, !dbg !1637

if.then114:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1639
  br label %err_retblock, !dbg !1639

if.exit115:                                       ; preds = %noerr_block
  %71 = load i8, ptr %is_negative, align 1, !dbg !1640
  %72 = trunc i8 %71 to i1, !dbg !1640
  br i1 %72, label %if.then118, label %if.exit127, !dbg !1640

if.then118:                                       ; preds = %if.exit115
    #dbg_declare(ptr %new_value, !1642, !DIExpression(), !1644)
  %73 = load i16, ptr %value, align 2, !dbg !1645
  %sext119 = sext i16 %73 to i32, !dbg !1645
  %74 = load i16, ptr %base_used, align 2, !dbg !1646
  %sext120 = sext i16 %74 to i32, !dbg !1646
  %mul = mul i32 %sext119, %sext120, !dbg !1645
  %75 = load i8, ptr %c73, align 1, !dbg !1647
  %zext121 = zext i8 %75 to i32, !dbg !1647
  %sub122 = sub i32 %mul, %zext121, !dbg !1645
  %trunc123 = trunc i32 %sub122 to i16, !dbg !1645
  store i16 %trunc123, ptr %new_value, align 2, !dbg !1645
  %76 = load i16, ptr %new_value, align 2, !dbg !1648
  %77 = load i16, ptr %value, align 2, !dbg !1649
  %gt124 = icmp sgt i16 %76, %77, !dbg !1648
  br i1 %gt124, label %if.then125, label %if.exit126, !dbg !1648

if.then125:                                       ; preds = %if.then118
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var116, align 8, !dbg !1650
  br label %guard_block139, !dbg !1650

if.exit126:                                       ; preds = %if.then118
  %78 = load i16, ptr %new_value, align 2, !dbg !1651
  store i16 %78, ptr %blockret117, align 2, !dbg !1651
  br label %expr_block.exit138, !dbg !1651

if.exit127:                                       ; preds = %if.exit115
    #dbg_declare(ptr %new_value128, !1652, !DIExpression(), !1653)
  %79 = load i16, ptr %value, align 2, !dbg !1654
  %sext129 = sext i16 %79 to i32, !dbg !1654
  %80 = load i16, ptr %base_used, align 2, !dbg !1655
  %sext130 = sext i16 %80 to i32, !dbg !1655
  %mul131 = mul i32 %sext129, %sext130, !dbg !1654
  %81 = load i8, ptr %c73, align 1, !dbg !1656
  %zext132 = zext i8 %81 to i32, !dbg !1656
  %add133 = add i32 %mul131, %zext132, !dbg !1654
  %trunc134 = trunc i32 %add133 to i16, !dbg !1654
  store i16 %trunc134, ptr %new_value128, align 2, !dbg !1654
  %82 = load i16, ptr %new_value128, align 2, !dbg !1657
  %83 = load i16, ptr %value, align 2, !dbg !1658
  %lt135 = icmp slt i16 %82, %83, !dbg !1657
  br i1 %lt135, label %if.then136, label %if.exit137, !dbg !1657

if.then136:                                       ; preds = %if.exit127
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var116, align 8, !dbg !1659
  br label %guard_block139, !dbg !1659

if.exit137:                                       ; preds = %if.exit127
  %84 = load i16, ptr %new_value128, align 2, !dbg !1660
  store i16 %84, ptr %blockret117, align 2, !dbg !1660
  br label %expr_block.exit138, !dbg !1660

expr_block.exit138:                               ; preds = %if.exit137, %if.exit126
  br label %noerr_block140, !dbg !1660

guard_block139:                                   ; preds = %if.then136, %if.then125
  %85 = load i64, ptr %error_var116, align 8, !dbg !1660
  store i64 %85, ptr %reterr, align 8, !dbg !1660
  br label %err_retblock, !dbg !1660

noerr_block140:                                   ; preds = %expr_block.exit138
  %86 = load i16, ptr %blockret117, align 2, !dbg !1660
  store i16 %86, ptr %value, align 2, !dbg !1660
  br label %loop.cond71, !dbg !1660

loop.exit141:                                     ; preds = %loop.cond71
  %87 = load i16, ptr %value, align 2, !dbg !1661
  store i16 %87, ptr %blockret, align 2, !dbg !1661
  br label %expr_block.exit142, !dbg !1661

expr_block.exit142:                               ; preds = %loop.exit141, %if.then44
  %88 = load i16, ptr %blockret, align 2, !dbg !1661
  store i16 %88, ptr %0, align 2, !dbg !1661
  ret i64 0, !dbg !1661

err_retblock:                                     ; preds = %guard_block139, %if.then114, %guard_block, %if.then68, %if.then23, %if.then
  %89 = load i64, ptr %reterr, align 8, !dbg !1661
  ret i64 %89, !dbg !1661

panic:                                            ; preds = %if.exit
  store i64 %21, ptr %taddr, align 8
  %90 = insertvalue %any undef, ptr %taddr, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr15, align 8
  %92 = insertvalue %any undef, ptr %taddr15, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %91, ptr %varargslots, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %93, ptr %ptradd16, align 16
  %94 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %94, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.69, i64 8, i32 744, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1569
  unreachable, !dbg !1569

panic27:                                          ; preds = %if.exit24
  store i64 %32, ptr %taddr28, align 8
  %95 = insertvalue %any undef, ptr %taddr28, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %34, ptr %taddr29, align 8
  %97 = insertvalue %any undef, ptr %taddr29, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %96, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %98, ptr %ptradd31, align 16
  %99 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.69, i64 8, i32 757, ptr byval(%"any[]") align 8 %indirectarg33) #5, !dbg !1585
  unreachable, !dbg !1585

panic48:                                          ; preds = %if.exit45
  store i64 %41, ptr %taddr49, align 8
  %100 = insertvalue %any undef, ptr %taddr49, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %43, ptr %taddr50, align 8
  %102 = insertvalue %any undef, ptr %taddr50, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %101, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %103, ptr %ptradd52, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.69, i64 8, i32 761, ptr byval(%"any[]") align 8 %indirectarg54) #5, !dbg !1594
  unreachable, !dbg !1594

panic78:                                          ; preds = %loop.body72
  store i64 %54, ptr %taddr79, align 8
  %105 = insertvalue %any undef, ptr %taddr79, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %56, ptr %taddr80, align 8
  %107 = insertvalue %any undef, ptr %taddr80, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %106, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %108, ptr %ptradd82, align 16
  %109 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %109, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.69, i64 8, i32 784, ptr byval(%"any[]") align 8 %indirectarg84) #5, !dbg !1623
  unreachable, !dbg !1623
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_ichar(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !1662 {
entry:
  %s = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i8, align 1
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i8, align 1
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %switch57 = alloca i8, align 1
  %value = alloca i8, align 1
  %c73 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret74 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %error_var115 = alloca i64, align 8
  %blockret116 = alloca i8, align 1
  %new_value = alloca i8, align 1
  %new_value127 = alloca i8, align 1
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !1667, !DIExpression(), !1668)
  store i32 %3, ptr %base, align 4
    #dbg_declare(ptr %base, !1669, !DIExpression(), !1670)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %s, i32 16, i1 false)
  %4 = load i32, ptr %base, align 4
  store i32 %4, ptr %base1, align 4
  %5 = load i32, ptr %base1, align 4, !dbg !1671
  %le = icmp sle i32 %5, 10, !dbg !1671
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1671

and.rhs:                                          ; preds = %entry
  %6 = load i32, ptr %base1, align 4, !dbg !1675
  %gt = icmp sgt i32 %6, 1, !dbg !1675
  br label %and.phi, !dbg !1675

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1675
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1675

or.rhs:                                           ; preds = %and.phi
  %7 = load i32, ptr %base1, align 4, !dbg !1676
  %eq = icmp eq i32 %7, 16, !dbg !1676
  br label %or.phi, !dbg !1676

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1676
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1676

assert_fail:                                      ; preds = %or.phi
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1671
  call void %8(ptr @.panic_msg.65, i64 79, ptr @.file.18, i64 9, ptr @.func.70, i64 8, i32 734) #5, !dbg !1671
  unreachable, !dbg !1671

assert_ok:                                        ; preds = %or.phi
    #dbg_declare(ptr %len, !1677, !DIExpression(), !1678)
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1679
  %9 = load i64, ptr %ptradd3, align 8, !dbg !1679
  store i64 %9, ptr %len, align 8, !dbg !1679
    #dbg_declare(ptr %index, !1680, !DIExpression(), !1681)
  store i64 0, ptr %index, align 8, !dbg !1682
    #dbg_declare(ptr %ptr, !1683, !DIExpression(), !1684)
  %10 = load ptr, ptr %string, align 8, !dbg !1685
  store ptr %10, ptr %ptr, align 8, !dbg !1685
  br label %loop.cond, !dbg !1686

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %11 = load i64, ptr %index, align 8, !dbg !1687
  %12 = load i64, ptr %len, align 8, !dbg !1689
  %lt = icmp ult i64 %11, %12, !dbg !1687
  br i1 %lt, label %and.rhs4, label %and.phi11, !dbg !1687

and.rhs4:                                         ; preds = %loop.cond
  %13 = load ptr, ptr %ptr, align 8, !dbg !1690
  %14 = load i64, ptr %index, align 8, !dbg !1691
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 %14, !dbg !1691
  %15 = load i8, ptr %ptradd5, align 1
  store i8 %15, ptr %c, align 1
  %16 = load i8, ptr %c, align 1, !dbg !1692
  %eq6 = icmp eq i8 %16, 32, !dbg !1692
  br i1 %eq6, label %or.phi9, label %or.rhs7, !dbg !1692

or.rhs7:                                          ; preds = %and.rhs4
  %17 = load i8, ptr %c, align 1, !dbg !1695
  %eq8 = icmp eq i8 %17, 9, !dbg !1695
  br label %or.phi9, !dbg !1695

or.phi9:                                          ; preds = %or.rhs7, %and.rhs4
  %val10 = phi i1 [ true, %and.rhs4 ], [ %eq8, %or.rhs7 ], !dbg !1695
  br label %and.phi11, !dbg !1695

and.phi11:                                        ; preds = %or.phi9, %loop.cond
  %val12 = phi i1 [ false, %loop.cond ], [ %val10, %or.phi9 ], !dbg !1695
  br i1 %val12, label %loop.body, label %loop.exit, !dbg !1695

loop.body:                                        ; preds = %and.phi11
  %18 = load i64, ptr %index, align 8, !dbg !1696
  %add = add i64 %18, 1, !dbg !1696
  store i64 %add, ptr %index, align 8, !dbg !1696
  br label %loop.cond, !dbg !1696

loop.exit:                                        ; preds = %and.phi11
  %19 = load i64, ptr %len, align 8, !dbg !1697
  %20 = load i64, ptr %index, align 8, !dbg !1698
  %eq13 = icmp eq i64 %19, %20, !dbg !1697
  br i1 %eq13, label %if.then, label %if.exit, !dbg !1697

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1699
  br label %err_retblock, !dbg !1699

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !1700, !DIExpression(), !1701)
  store i8 0, ptr %is_negative, align 1, !dbg !1701
  %ptradd14 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1702
  %21 = load i64, ptr %ptradd14, align 8, !dbg !1702
  %22 = load ptr, ptr %string, align 8, !dbg !1702
  %23 = load i64, ptr %index, align 8, !dbg !1704
  %ge = icmp uge i64 %23, %21, !dbg !1704
  %24 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1704
  br i1 %24, label %panic, label %checkok, !dbg !1704

checkok:                                          ; preds = %if.exit
  %ptradd17 = getelementptr inbounds i8, ptr %22, i64 %23, !dbg !1704
  %25 = load i8, ptr %ptradd17, align 1
  store i8 %25, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %26 = load i8, ptr %switch, align 1
  switch i8 %26, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case20
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit18, !dbg !1705

if.exit18:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1707
  %27 = load i64, ptr %index, align 8, !dbg !1708
  %add19 = add i64 %27, 1, !dbg !1708
  store i64 %add19, ptr %index, align 8, !dbg !1708
  br label %switch.exit, !dbg !1708

switch.case20:                                    ; preds = %switch.entry
  %28 = load i64, ptr %index, align 8, !dbg !1709
  %add21 = add i64 %28, 1, !dbg !1709
  store i64 %add21, ptr %index, align 8, !dbg !1709
  br label %switch.exit, !dbg !1709

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1711

switch.exit:                                      ; preds = %switch.default, %switch.case20, %if.exit18
  %29 = load i64, ptr %len, align 8, !dbg !1713
  %30 = load i64, ptr %index, align 8, !dbg !1714
  %eq22 = icmp eq i64 %29, %30, !dbg !1713
  br i1 %eq22, label %if.then23, label %if.exit24, !dbg !1713

if.then23:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1715
  br label %err_retblock, !dbg !1715

if.exit24:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !1716, !DIExpression(), !1717)
  %31 = load i32, ptr %base1, align 4, !dbg !1718
  %trunc = trunc i32 %31 to i8, !dbg !1718
  store i8 %trunc, ptr %base_used, align 1, !dbg !1718
  %ptradd25 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1719
  %32 = load i64, ptr %ptradd25, align 8, !dbg !1719
  %33 = load ptr, ptr %string, align 8, !dbg !1719
  %34 = load i64, ptr %index, align 8, !dbg !1720
  %ge26 = icmp uge i64 %34, %32, !dbg !1720
  %35 = call i1 @llvm.expect.i1(i1 %ge26, i1 false), !dbg !1720
  br i1 %35, label %panic27, label %checkok34, !dbg !1720

checkok34:                                        ; preds = %if.exit24
  %ptradd35 = getelementptr inbounds i8, ptr %33, i64 %34, !dbg !1720
  %36 = load i8, ptr %ptradd35, align 1, !dbg !1720
  %eq36 = icmp eq i8 %36, 48, !dbg !1719
  br i1 %eq36, label %and.rhs37, label %and.phi39, !dbg !1719

and.rhs37:                                        ; preds = %checkok34
  %37 = load i32, ptr %base1, align 4, !dbg !1721
  %eq38 = icmp eq i32 %37, 10, !dbg !1721
  br label %and.phi39, !dbg !1721

and.phi39:                                        ; preds = %and.rhs37, %checkok34
  %val40 = phi i1 [ false, %checkok34 ], [ %eq38, %and.rhs37 ], !dbg !1721
  br i1 %val40, label %if.then41, label %if.exit70, !dbg !1721

if.then41:                                        ; preds = %and.phi39
  %38 = load i64, ptr %index, align 8, !dbg !1722
  %add42 = add i64 %38, 1, !dbg !1722
  store i64 %add42, ptr %index, align 8, !dbg !1722
  %39 = load i64, ptr %index, align 8, !dbg !1724
  %40 = load i64, ptr %len, align 8, !dbg !1725
  %eq43 = icmp eq i64 %39, %40, !dbg !1724
  br i1 %eq43, label %if.then44, label %if.exit45, !dbg !1724

if.then44:                                        ; preds = %if.then41
  store i8 0, ptr %blockret, align 1, !dbg !1726
  br label %expr_block.exit141, !dbg !1726

if.exit45:                                        ; preds = %if.then41
  %ptradd46 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1727
  %41 = load i64, ptr %ptradd46, align 8, !dbg !1727
  %42 = load ptr, ptr %string, align 8, !dbg !1727
  %43 = load i64, ptr %index, align 8, !dbg !1729
  %ge47 = icmp uge i64 %43, %41, !dbg !1729
  %44 = call i1 @llvm.expect.i1(i1 %ge47, i1 false), !dbg !1729
  br i1 %44, label %panic48, label %checkok55, !dbg !1729

checkok55:                                        ; preds = %if.exit45
  %ptradd56 = getelementptr inbounds i8, ptr %42, i64 %43, !dbg !1729
  %45 = load i8, ptr %ptradd56, align 1
  store i8 %45, ptr %switch57, align 1
  br label %switch.entry58

switch.entry58:                                   ; preds = %checkok55
  %46 = load i8, ptr %switch57, align 1
  switch i8 %46, label %switch.default65 [
    i8 120, label %switch.case59
    i8 88, label %switch.case59
    i8 98, label %switch.case61
    i8 66, label %switch.case61
    i8 111, label %switch.case63
    i8 79, label %switch.case63
  ]

switch.case59:                                    ; preds = %switch.entry58, %switch.entry58
  store i8 16, ptr %base_used, align 1, !dbg !1730
  %47 = load i64, ptr %index, align 8, !dbg !1732
  %add60 = add i64 %47, 1, !dbg !1732
  store i64 %add60, ptr %index, align 8, !dbg !1732
  br label %switch.exit66, !dbg !1732

switch.case61:                                    ; preds = %switch.entry58, %switch.entry58
  store i8 2, ptr %base_used, align 1, !dbg !1733
  %48 = load i64, ptr %index, align 8, !dbg !1735
  %add62 = add i64 %48, 1, !dbg !1735
  store i64 %add62, ptr %index, align 8, !dbg !1735
  br label %switch.exit66, !dbg !1735

switch.case63:                                    ; preds = %switch.entry58, %switch.entry58
  store i8 8, ptr %base_used, align 1, !dbg !1736
  %49 = load i64, ptr %index, align 8, !dbg !1738
  %add64 = add i64 %49, 1, !dbg !1738
  store i64 %add64, ptr %index, align 8, !dbg !1738
  br label %switch.exit66, !dbg !1738

switch.default65:                                 ; preds = %switch.entry58
  br label %switch.exit66, !dbg !1739

switch.exit66:                                    ; preds = %switch.default65, %switch.case63, %switch.case61, %switch.case59
  %50 = load i64, ptr %len, align 8, !dbg !1741
  %51 = load i64, ptr %index, align 8, !dbg !1742
  %eq67 = icmp eq i64 %50, %51, !dbg !1741
  br i1 %eq67, label %if.then68, label %if.exit69, !dbg !1741

if.then68:                                        ; preds = %switch.exit66
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1743
  br label %err_retblock, !dbg !1743

if.exit69:                                        ; preds = %switch.exit66
  br label %if.exit70, !dbg !1743

if.exit70:                                        ; preds = %if.exit69, %and.phi39
    #dbg_declare(ptr %value, !1744, !DIExpression(), !1745)
  store i8 0, ptr %value, align 1, !dbg !1746
  br label %loop.cond71, !dbg !1747

loop.cond71:                                      ; preds = %noerr_block139, %if.exit70
  %52 = load i64, ptr %index, align 8, !dbg !1748
  %53 = load i64, ptr %len, align 8, !dbg !1750
  %neq = icmp ne i64 %52, %53, !dbg !1748
  br i1 %neq, label %loop.body72, label %loop.exit140, !dbg !1748

loop.body72:                                      ; preds = %loop.cond71
    #dbg_declare(ptr %c73, !1751, !DIExpression(), !1753)
    #dbg_declare(ptr %ch, !1754, !DIExpression(), !1756)
  %ptradd75 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1757
  %54 = load i64, ptr %ptradd75, align 8, !dbg !1757
  %55 = load ptr, ptr %string, align 8, !dbg !1757
  %56 = load i64, ptr %index, align 8, !dbg !1758
  %add76 = add i64 %56, 1, !dbg !1758
  store i64 %add76, ptr %index, align 8, !dbg !1758
  %ge77 = icmp uge i64 %56, %54, !dbg !1758
  %57 = call i1 @llvm.expect.i1(i1 %ge77, i1 false), !dbg !1758
  br i1 %57, label %panic78, label %checkok85, !dbg !1758

checkok85:                                        ; preds = %loop.body72
  %ptradd86 = getelementptr inbounds i8, ptr %55, i64 %56, !dbg !1758
  %58 = load i8, ptr %ptradd86, align 1, !dbg !1758
  store i8 %58, ptr %ch, align 1, !dbg !1758
  %59 = load i8, ptr %base_used, align 1, !dbg !1759
  %sext = sext i8 %59 to i32, !dbg !1759
  %neq87 = icmp ne i32 %sext, 16, !dbg !1759
  br i1 %neq87, label %or.phi90, label %or.rhs88, !dbg !1759

or.rhs88:                                         ; preds = %checkok85
  %60 = load i8, ptr %ch, align 1, !dbg !1760
  %lt89 = icmp ult i8 %60, 65, !dbg !1760
  br label %or.phi90, !dbg !1760

or.phi90:                                         ; preds = %or.rhs88, %checkok85
  %val91 = phi i1 [ true, %checkok85 ], [ %lt89, %or.rhs88 ], !dbg !1760
  br i1 %val91, label %if.then92, label %if.exit94, !dbg !1760

if.then92:                                        ; preds = %or.phi90
  %61 = load i8, ptr %ch, align 1, !dbg !1761
  %zext = zext i8 %61 to i32, !dbg !1761
  %sub = sub i32 %zext, 48, !dbg !1762
  %trunc93 = trunc i32 %sub to i8, !dbg !1762
  store i8 %trunc93, ptr %blockret74, align 1, !dbg !1762
  br label %expr_block.exit, !dbg !1762

if.exit94:                                        ; preds = %or.phi90
  %62 = load i8, ptr %ch, align 1, !dbg !1763
  %le95 = icmp ule i8 %62, 70, !dbg !1763
  br i1 %le95, label %if.then96, label %if.exit101, !dbg !1763

if.then96:                                        ; preds = %if.exit94
  %63 = load i8, ptr %ch, align 1, !dbg !1764
  %zext97 = zext i8 %63 to i32, !dbg !1764
  %sub98 = sub i32 %zext97, 65, !dbg !1764
  %add99 = add i32 %sub98, 10, !dbg !1765
  %trunc100 = trunc i32 %add99 to i8, !dbg !1765
  store i8 %trunc100, ptr %blockret74, align 1, !dbg !1765
  br label %expr_block.exit, !dbg !1765

if.exit101:                                       ; preds = %if.exit94
  %64 = load i8, ptr %ch, align 1, !dbg !1766
  %lt102 = icmp ult i8 %64, 97, !dbg !1766
  br i1 %lt102, label %if.then103, label %if.exit104, !dbg !1766

if.then103:                                       ; preds = %if.exit101
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1767
  br label %guard_block, !dbg !1767

if.exit104:                                       ; preds = %if.exit101
  %65 = load i8, ptr %ch, align 1, !dbg !1768
  %gt105 = icmp ugt i8 %65, 102, !dbg !1768
  br i1 %gt105, label %if.then106, label %if.exit107, !dbg !1768

if.then106:                                       ; preds = %if.exit104
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1769
  br label %guard_block, !dbg !1769

if.exit107:                                       ; preds = %if.exit104
  %66 = load i8, ptr %ch, align 1, !dbg !1770
  %zext108 = zext i8 %66 to i32, !dbg !1770
  %sub109 = sub i32 %zext108, 97, !dbg !1770
  %add110 = add i32 %sub109, 10, !dbg !1771
  %trunc111 = trunc i32 %add110 to i8, !dbg !1771
  store i8 %trunc111, ptr %blockret74, align 1, !dbg !1771
  br label %expr_block.exit, !dbg !1771

expr_block.exit:                                  ; preds = %if.exit107, %if.then96, %if.then92
  br label %noerr_block, !dbg !1771

guard_block:                                      ; preds = %if.then106, %if.then103
  %67 = load i64, ptr %error_var, align 8, !dbg !1771
  store i64 %67, ptr %reterr, align 8, !dbg !1771
  br label %err_retblock, !dbg !1771

noerr_block:                                      ; preds = %expr_block.exit
  %68 = load i8, ptr %blockret74, align 1, !dbg !1771
  store i8 %68, ptr %c73, align 1, !dbg !1771
  %69 = load i8, ptr %c73, align 1, !dbg !1772
  %70 = load i8, ptr %base_used, align 1, !dbg !1773
  %le112 = icmp sle i8 %70, %69, !dbg !1772
  %check = icmp slt i8 %69, 0, !dbg !1772
  %siui-le = or i1 %check, %le112, !dbg !1772
  br i1 %siui-le, label %if.then113, label %if.exit114, !dbg !1772

if.then113:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1774
  br label %err_retblock, !dbg !1774

if.exit114:                                       ; preds = %noerr_block
  %71 = load i8, ptr %is_negative, align 1, !dbg !1775
  %72 = trunc i8 %71 to i1, !dbg !1775
  br i1 %72, label %if.then117, label %if.exit126, !dbg !1775

if.then117:                                       ; preds = %if.exit114
    #dbg_declare(ptr %new_value, !1777, !DIExpression(), !1779)
  %73 = load i8, ptr %value, align 1, !dbg !1780
  %sext118 = sext i8 %73 to i32, !dbg !1780
  %74 = load i8, ptr %base_used, align 1, !dbg !1781
  %sext119 = sext i8 %74 to i32, !dbg !1781
  %mul = mul i32 %sext118, %sext119, !dbg !1780
  %75 = load i8, ptr %c73, align 1, !dbg !1782
  %zext120 = zext i8 %75 to i32, !dbg !1782
  %sub121 = sub i32 %mul, %zext120, !dbg !1780
  %trunc122 = trunc i32 %sub121 to i8, !dbg !1780
  store i8 %trunc122, ptr %new_value, align 1, !dbg !1780
  %76 = load i8, ptr %new_value, align 1, !dbg !1783
  %77 = load i8, ptr %value, align 1, !dbg !1784
  %gt123 = icmp sgt i8 %76, %77, !dbg !1783
  br i1 %gt123, label %if.then124, label %if.exit125, !dbg !1783

if.then124:                                       ; preds = %if.then117
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var115, align 8, !dbg !1785
  br label %guard_block138, !dbg !1785

if.exit125:                                       ; preds = %if.then117
  %78 = load i8, ptr %new_value, align 1, !dbg !1786
  store i8 %78, ptr %blockret116, align 1, !dbg !1786
  br label %expr_block.exit137, !dbg !1786

if.exit126:                                       ; preds = %if.exit114
    #dbg_declare(ptr %new_value127, !1787, !DIExpression(), !1788)
  %79 = load i8, ptr %value, align 1, !dbg !1789
  %sext128 = sext i8 %79 to i32, !dbg !1789
  %80 = load i8, ptr %base_used, align 1, !dbg !1790
  %sext129 = sext i8 %80 to i32, !dbg !1790
  %mul130 = mul i32 %sext128, %sext129, !dbg !1789
  %81 = load i8, ptr %c73, align 1, !dbg !1791
  %zext131 = zext i8 %81 to i32, !dbg !1791
  %add132 = add i32 %mul130, %zext131, !dbg !1789
  %trunc133 = trunc i32 %add132 to i8, !dbg !1789
  store i8 %trunc133, ptr %new_value127, align 1, !dbg !1789
  %82 = load i8, ptr %new_value127, align 1, !dbg !1792
  %83 = load i8, ptr %value, align 1, !dbg !1793
  %lt134 = icmp slt i8 %82, %83, !dbg !1792
  br i1 %lt134, label %if.then135, label %if.exit136, !dbg !1792

if.then135:                                       ; preds = %if.exit126
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var115, align 8, !dbg !1794
  br label %guard_block138, !dbg !1794

if.exit136:                                       ; preds = %if.exit126
  %84 = load i8, ptr %new_value127, align 1, !dbg !1795
  store i8 %84, ptr %blockret116, align 1, !dbg !1795
  br label %expr_block.exit137, !dbg !1795

expr_block.exit137:                               ; preds = %if.exit136, %if.exit125
  br label %noerr_block139, !dbg !1795

guard_block138:                                   ; preds = %if.then135, %if.then124
  %85 = load i64, ptr %error_var115, align 8, !dbg !1795
  store i64 %85, ptr %reterr, align 8, !dbg !1795
  br label %err_retblock, !dbg !1795

noerr_block139:                                   ; preds = %expr_block.exit137
  %86 = load i8, ptr %blockret116, align 1, !dbg !1795
  store i8 %86, ptr %value, align 1, !dbg !1795
  br label %loop.cond71, !dbg !1795

loop.exit140:                                     ; preds = %loop.cond71
  %87 = load i8, ptr %value, align 1, !dbg !1796
  store i8 %87, ptr %blockret, align 1, !dbg !1796
  br label %expr_block.exit141, !dbg !1796

expr_block.exit141:                               ; preds = %loop.exit140, %if.then44
  %88 = load i8, ptr %blockret, align 1, !dbg !1796
  store i8 %88, ptr %0, align 1, !dbg !1796
  ret i64 0, !dbg !1796

err_retblock:                                     ; preds = %guard_block138, %if.then113, %guard_block, %if.then68, %if.then23, %if.then
  %89 = load i64, ptr %reterr, align 8, !dbg !1796
  ret i64 %89, !dbg !1796

panic:                                            ; preds = %if.exit
  store i64 %21, ptr %taddr, align 8
  %90 = insertvalue %any undef, ptr %taddr, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr15, align 8
  %92 = insertvalue %any undef, ptr %taddr15, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %91, ptr %varargslots, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %93, ptr %ptradd16, align 16
  %94 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %94, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.70, i64 8, i32 744, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1704
  unreachable, !dbg !1704

panic27:                                          ; preds = %if.exit24
  store i64 %32, ptr %taddr28, align 8
  %95 = insertvalue %any undef, ptr %taddr28, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %34, ptr %taddr29, align 8
  %97 = insertvalue %any undef, ptr %taddr29, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %96, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %98, ptr %ptradd31, align 16
  %99 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.70, i64 8, i32 757, ptr byval(%"any[]") align 8 %indirectarg33) #5, !dbg !1720
  unreachable, !dbg !1720

panic48:                                          ; preds = %if.exit45
  store i64 %41, ptr %taddr49, align 8
  %100 = insertvalue %any undef, ptr %taddr49, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %43, ptr %taddr50, align 8
  %102 = insertvalue %any undef, ptr %taddr50, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %101, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %103, ptr %ptradd52, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.70, i64 8, i32 761, ptr byval(%"any[]") align 8 %indirectarg54) #5, !dbg !1729
  unreachable, !dbg !1729

panic78:                                          ; preds = %loop.body72
  store i64 %54, ptr %taddr79, align 8
  %105 = insertvalue %any undef, ptr %taddr79, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %56, ptr %taddr80, align 8
  %107 = insertvalue %any undef, ptr %taddr80, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %106, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %108, ptr %ptradd82, align 16
  %109 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %109, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.70, i64 8, i32 784, ptr byval(%"any[]") align 8 %indirectarg84) #5, !dbg !1758
  unreachable, !dbg !1758
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_uint128(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !1797 {
entry:
  %s = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i128, align 16
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i128, align 16
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr50 = alloca i64, align 8
  %taddr51 = alloca i64, align 8
  %varargslots52 = alloca [2 x %any], align 16
  %indirectarg55 = alloca %"any[]", align 8
  %switch58 = alloca i8, align 1
  %value = alloca i128, align 16
  %c74 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret75 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr80 = alloca i64, align 8
  %taddr81 = alloca i64, align 8
  %varargslots82 = alloca [2 x %any], align 16
  %indirectarg85 = alloca %"any[]", align 8
  %error_var116 = alloca i64, align 8
  %blockret117 = alloca i128, align 16
  %new_value = alloca i128, align 16
  %new_value125 = alloca i128, align 16
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !1802, !DIExpression(), !1803)
  store i32 %3, ptr %base, align 4
    #dbg_declare(ptr %base, !1804, !DIExpression(), !1805)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %s, i32 16, i1 false)
  %4 = load i32, ptr %base, align 4
  store i32 %4, ptr %base1, align 4
  %5 = load i32, ptr %base1, align 4, !dbg !1806
  %le = icmp sle i32 %5, 10, !dbg !1806
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1806

and.rhs:                                          ; preds = %entry
  %6 = load i32, ptr %base1, align 4, !dbg !1810
  %gt = icmp sgt i32 %6, 1, !dbg !1810
  br label %and.phi, !dbg !1810

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1810
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1810

or.rhs:                                           ; preds = %and.phi
  %7 = load i32, ptr %base1, align 4, !dbg !1811
  %eq = icmp eq i32 %7, 16, !dbg !1811
  br label %or.phi, !dbg !1811

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1811
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1811

assert_fail:                                      ; preds = %or.phi
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1806
  call void %8(ptr @.panic_msg.65, i64 79, ptr @.file.18, i64 9, ptr @.func.71, i64 10, i32 734) #5, !dbg !1806
  unreachable, !dbg !1806

assert_ok:                                        ; preds = %or.phi
    #dbg_declare(ptr %len, !1812, !DIExpression(), !1813)
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1814
  %9 = load i64, ptr %ptradd3, align 8, !dbg !1814
  store i64 %9, ptr %len, align 8, !dbg !1814
    #dbg_declare(ptr %index, !1815, !DIExpression(), !1816)
  store i64 0, ptr %index, align 8, !dbg !1817
    #dbg_declare(ptr %ptr, !1818, !DIExpression(), !1819)
  %10 = load ptr, ptr %string, align 8, !dbg !1820
  store ptr %10, ptr %ptr, align 8, !dbg !1820
  br label %loop.cond, !dbg !1821

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %11 = load i64, ptr %index, align 8, !dbg !1822
  %12 = load i64, ptr %len, align 8, !dbg !1824
  %lt = icmp ult i64 %11, %12, !dbg !1822
  br i1 %lt, label %and.rhs4, label %and.phi11, !dbg !1822

and.rhs4:                                         ; preds = %loop.cond
  %13 = load ptr, ptr %ptr, align 8, !dbg !1825
  %14 = load i64, ptr %index, align 8, !dbg !1826
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 %14, !dbg !1826
  %15 = load i8, ptr %ptradd5, align 1
  store i8 %15, ptr %c, align 1
  %16 = load i8, ptr %c, align 1, !dbg !1827
  %eq6 = icmp eq i8 %16, 32, !dbg !1827
  br i1 %eq6, label %or.phi9, label %or.rhs7, !dbg !1827

or.rhs7:                                          ; preds = %and.rhs4
  %17 = load i8, ptr %c, align 1, !dbg !1830
  %eq8 = icmp eq i8 %17, 9, !dbg !1830
  br label %or.phi9, !dbg !1830

or.phi9:                                          ; preds = %or.rhs7, %and.rhs4
  %val10 = phi i1 [ true, %and.rhs4 ], [ %eq8, %or.rhs7 ], !dbg !1830
  br label %and.phi11, !dbg !1830

and.phi11:                                        ; preds = %or.phi9, %loop.cond
  %val12 = phi i1 [ false, %loop.cond ], [ %val10, %or.phi9 ], !dbg !1830
  br i1 %val12, label %loop.body, label %loop.exit, !dbg !1830

loop.body:                                        ; preds = %and.phi11
  %18 = load i64, ptr %index, align 8, !dbg !1831
  %add = add i64 %18, 1, !dbg !1831
  store i64 %add, ptr %index, align 8, !dbg !1831
  br label %loop.cond, !dbg !1831

loop.exit:                                        ; preds = %and.phi11
  %19 = load i64, ptr %len, align 8, !dbg !1832
  %20 = load i64, ptr %index, align 8, !dbg !1833
  %eq13 = icmp eq i64 %19, %20, !dbg !1832
  br i1 %eq13, label %if.then, label %if.exit, !dbg !1832

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1834
  br label %err_retblock, !dbg !1834

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !1835, !DIExpression(), !1836)
  store i8 0, ptr %is_negative, align 1, !dbg !1836
  %ptradd14 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1837
  %21 = load i64, ptr %ptradd14, align 8, !dbg !1837
  %22 = load ptr, ptr %string, align 8, !dbg !1837
  %23 = load i64, ptr %index, align 8, !dbg !1839
  %ge = icmp uge i64 %23, %21, !dbg !1839
  %24 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1839
  br i1 %24, label %panic, label %checkok, !dbg !1839

checkok:                                          ; preds = %if.exit
  %ptradd17 = getelementptr inbounds i8, ptr %22, i64 %23, !dbg !1839
  %25 = load i8, ptr %ptradd17, align 1
  store i8 %25, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %26 = load i8, ptr %switch, align 1
  switch i8 %26, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case21
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then18, !dbg !1840

if.then18:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$NEGATIVE_VALUE" to i64), ptr %reterr, align 8, !dbg !1842
  br label %err_retblock, !dbg !1842

switch.case21:                                    ; preds = %switch.entry
  %27 = load i64, ptr %index, align 8, !dbg !1843
  %add22 = add i64 %27, 1, !dbg !1843
  store i64 %add22, ptr %index, align 8, !dbg !1843
  br label %switch.exit, !dbg !1843

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1845

switch.exit:                                      ; preds = %switch.default, %switch.case21
  %28 = load i64, ptr %len, align 8, !dbg !1847
  %29 = load i64, ptr %index, align 8, !dbg !1848
  %eq23 = icmp eq i64 %28, %29, !dbg !1847
  br i1 %eq23, label %if.then24, label %if.exit25, !dbg !1847

if.then24:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1849
  br label %err_retblock, !dbg !1849

if.exit25:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !1850, !DIExpression(), !1851)
  %30 = load i32, ptr %base1, align 4, !dbg !1852
  %sext = sext i32 %30 to i128, !dbg !1852
  store i128 %sext, ptr %base_used, align 16, !dbg !1852
  %ptradd26 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1853
  %31 = load i64, ptr %ptradd26, align 8, !dbg !1853
  %32 = load ptr, ptr %string, align 8, !dbg !1853
  %33 = load i64, ptr %index, align 8, !dbg !1854
  %ge27 = icmp uge i64 %33, %31, !dbg !1854
  %34 = call i1 @llvm.expect.i1(i1 %ge27, i1 false), !dbg !1854
  br i1 %34, label %panic28, label %checkok35, !dbg !1854

checkok35:                                        ; preds = %if.exit25
  %ptradd36 = getelementptr inbounds i8, ptr %32, i64 %33, !dbg !1854
  %35 = load i8, ptr %ptradd36, align 1, !dbg !1854
  %eq37 = icmp eq i8 %35, 48, !dbg !1853
  br i1 %eq37, label %and.rhs38, label %and.phi40, !dbg !1853

and.rhs38:                                        ; preds = %checkok35
  %36 = load i32, ptr %base1, align 4, !dbg !1855
  %eq39 = icmp eq i32 %36, 10, !dbg !1855
  br label %and.phi40, !dbg !1855

and.phi40:                                        ; preds = %and.rhs38, %checkok35
  %val41 = phi i1 [ false, %checkok35 ], [ %eq39, %and.rhs38 ], !dbg !1855
  br i1 %val41, label %if.then42, label %if.exit71, !dbg !1855

if.then42:                                        ; preds = %and.phi40
  %37 = load i64, ptr %index, align 8, !dbg !1856
  %add43 = add i64 %37, 1, !dbg !1856
  store i64 %add43, ptr %index, align 8, !dbg !1856
  %38 = load i64, ptr %index, align 8, !dbg !1858
  %39 = load i64, ptr %len, align 8, !dbg !1859
  %eq44 = icmp eq i64 %38, %39, !dbg !1858
  br i1 %eq44, label %if.then45, label %if.exit46, !dbg !1858

if.then45:                                        ; preds = %if.then42
  store i128 0, ptr %blockret, align 16, !dbg !1860
  br label %expr_block.exit136, !dbg !1860

if.exit46:                                        ; preds = %if.then42
  %ptradd47 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1861
  %40 = load i64, ptr %ptradd47, align 8, !dbg !1861
  %41 = load ptr, ptr %string, align 8, !dbg !1861
  %42 = load i64, ptr %index, align 8, !dbg !1863
  %ge48 = icmp uge i64 %42, %40, !dbg !1863
  %43 = call i1 @llvm.expect.i1(i1 %ge48, i1 false), !dbg !1863
  br i1 %43, label %panic49, label %checkok56, !dbg !1863

checkok56:                                        ; preds = %if.exit46
  %ptradd57 = getelementptr inbounds i8, ptr %41, i64 %42, !dbg !1863
  %44 = load i8, ptr %ptradd57, align 1
  store i8 %44, ptr %switch58, align 1
  br label %switch.entry59

switch.entry59:                                   ; preds = %checkok56
  %45 = load i8, ptr %switch58, align 1
  switch i8 %45, label %switch.default66 [
    i8 120, label %switch.case60
    i8 88, label %switch.case60
    i8 98, label %switch.case62
    i8 66, label %switch.case62
    i8 111, label %switch.case64
    i8 79, label %switch.case64
  ]

switch.case60:                                    ; preds = %switch.entry59, %switch.entry59
  store i128 16, ptr %base_used, align 16, !dbg !1864
  %46 = load i64, ptr %index, align 8, !dbg !1866
  %add61 = add i64 %46, 1, !dbg !1866
  store i64 %add61, ptr %index, align 8, !dbg !1866
  br label %switch.exit67, !dbg !1866

switch.case62:                                    ; preds = %switch.entry59, %switch.entry59
  store i128 2, ptr %base_used, align 16, !dbg !1867
  %47 = load i64, ptr %index, align 8, !dbg !1869
  %add63 = add i64 %47, 1, !dbg !1869
  store i64 %add63, ptr %index, align 8, !dbg !1869
  br label %switch.exit67, !dbg !1869

switch.case64:                                    ; preds = %switch.entry59, %switch.entry59
  store i128 8, ptr %base_used, align 16, !dbg !1870
  %48 = load i64, ptr %index, align 8, !dbg !1872
  %add65 = add i64 %48, 1, !dbg !1872
  store i64 %add65, ptr %index, align 8, !dbg !1872
  br label %switch.exit67, !dbg !1872

switch.default66:                                 ; preds = %switch.entry59
  br label %switch.exit67, !dbg !1873

switch.exit67:                                    ; preds = %switch.default66, %switch.case64, %switch.case62, %switch.case60
  %49 = load i64, ptr %len, align 8, !dbg !1875
  %50 = load i64, ptr %index, align 8, !dbg !1876
  %eq68 = icmp eq i64 %49, %50, !dbg !1875
  br i1 %eq68, label %if.then69, label %if.exit70, !dbg !1875

if.then69:                                        ; preds = %switch.exit67
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1877
  br label %err_retblock, !dbg !1877

if.exit70:                                        ; preds = %switch.exit67
  br label %if.exit71, !dbg !1877

if.exit71:                                        ; preds = %if.exit70, %and.phi40
    #dbg_declare(ptr %value, !1878, !DIExpression(), !1879)
  store i128 0, ptr %value, align 16, !dbg !1880
  br label %loop.cond72, !dbg !1881

loop.cond72:                                      ; preds = %noerr_block134, %if.exit71
  %51 = load i64, ptr %index, align 8, !dbg !1882
  %52 = load i64, ptr %len, align 8, !dbg !1884
  %neq = icmp ne i64 %51, %52, !dbg !1882
  br i1 %neq, label %loop.body73, label %loop.exit135, !dbg !1882

loop.body73:                                      ; preds = %loop.cond72
    #dbg_declare(ptr %c74, !1885, !DIExpression(), !1887)
    #dbg_declare(ptr %ch, !1888, !DIExpression(), !1890)
  %ptradd76 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1891
  %53 = load i64, ptr %ptradd76, align 8, !dbg !1891
  %54 = load ptr, ptr %string, align 8, !dbg !1891
  %55 = load i64, ptr %index, align 8, !dbg !1892
  %add77 = add i64 %55, 1, !dbg !1892
  store i64 %add77, ptr %index, align 8, !dbg !1892
  %ge78 = icmp uge i64 %55, %53, !dbg !1892
  %56 = call i1 @llvm.expect.i1(i1 %ge78, i1 false), !dbg !1892
  br i1 %56, label %panic79, label %checkok86, !dbg !1892

checkok86:                                        ; preds = %loop.body73
  %ptradd87 = getelementptr inbounds i8, ptr %54, i64 %55, !dbg !1892
  %57 = load i8, ptr %ptradd87, align 1, !dbg !1892
  store i8 %57, ptr %ch, align 1, !dbg !1892
  %58 = load i128, ptr %base_used, align 16, !dbg !1893
  %neq88 = icmp ne i128 16, %58, !dbg !1893
  %siui-ne = or i1 false, %neq88, !dbg !1893
  br i1 %siui-ne, label %or.phi91, label %or.rhs89, !dbg !1893

or.rhs89:                                         ; preds = %checkok86
  %59 = load i8, ptr %ch, align 1, !dbg !1894
  %lt90 = icmp ult i8 %59, 65, !dbg !1894
  br label %or.phi91, !dbg !1894

or.phi91:                                         ; preds = %or.rhs89, %checkok86
  %val92 = phi i1 [ true, %checkok86 ], [ %lt90, %or.rhs89 ], !dbg !1894
  br i1 %val92, label %if.then93, label %if.exit94, !dbg !1894

if.then93:                                        ; preds = %or.phi91
  %60 = load i8, ptr %ch, align 1, !dbg !1895
  %zext = zext i8 %60 to i32, !dbg !1895
  %sub = sub i32 %zext, 48, !dbg !1896
  %trunc = trunc i32 %sub to i8, !dbg !1896
  store i8 %trunc, ptr %blockret75, align 1, !dbg !1896
  br label %expr_block.exit, !dbg !1896

if.exit94:                                        ; preds = %or.phi91
  %61 = load i8, ptr %ch, align 1, !dbg !1897
  %le95 = icmp ule i8 %61, 70, !dbg !1897
  br i1 %le95, label %if.then96, label %if.exit101, !dbg !1897

if.then96:                                        ; preds = %if.exit94
  %62 = load i8, ptr %ch, align 1, !dbg !1898
  %zext97 = zext i8 %62 to i32, !dbg !1898
  %sub98 = sub i32 %zext97, 65, !dbg !1898
  %add99 = add i32 %sub98, 10, !dbg !1899
  %trunc100 = trunc i32 %add99 to i8, !dbg !1899
  store i8 %trunc100, ptr %blockret75, align 1, !dbg !1899
  br label %expr_block.exit, !dbg !1899

if.exit101:                                       ; preds = %if.exit94
  %63 = load i8, ptr %ch, align 1, !dbg !1900
  %lt102 = icmp ult i8 %63, 97, !dbg !1900
  br i1 %lt102, label %if.then103, label %if.exit104, !dbg !1900

if.then103:                                       ; preds = %if.exit101
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1901
  br label %guard_block, !dbg !1901

if.exit104:                                       ; preds = %if.exit101
  %64 = load i8, ptr %ch, align 1, !dbg !1902
  %gt105 = icmp ugt i8 %64, 102, !dbg !1902
  br i1 %gt105, label %if.then106, label %if.exit107, !dbg !1902

if.then106:                                       ; preds = %if.exit104
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1903
  br label %guard_block, !dbg !1903

if.exit107:                                       ; preds = %if.exit104
  %65 = load i8, ptr %ch, align 1, !dbg !1904
  %zext108 = zext i8 %65 to i32, !dbg !1904
  %sub109 = sub i32 %zext108, 97, !dbg !1904
  %add110 = add i32 %sub109, 10, !dbg !1905
  %trunc111 = trunc i32 %add110 to i8, !dbg !1905
  store i8 %trunc111, ptr %blockret75, align 1, !dbg !1905
  br label %expr_block.exit, !dbg !1905

expr_block.exit:                                  ; preds = %if.exit107, %if.then96, %if.then93
  br label %noerr_block, !dbg !1905

guard_block:                                      ; preds = %if.then106, %if.then103
  %66 = load i64, ptr %error_var, align 8, !dbg !1905
  store i64 %66, ptr %reterr, align 8, !dbg !1905
  br label %err_retblock, !dbg !1905

noerr_block:                                      ; preds = %expr_block.exit
  %67 = load i8, ptr %blockret75, align 1, !dbg !1905
  store i8 %67, ptr %c74, align 1, !dbg !1905
  %68 = load i8, ptr %c74, align 1, !dbg !1906
  %zext112 = zext i8 %68 to i128, !dbg !1906
  %69 = load i128, ptr %base_used, align 16, !dbg !1907
  %ge113 = icmp uge i128 %zext112, %69, !dbg !1906
  br i1 %ge113, label %if.then114, label %if.exit115, !dbg !1906

if.then114:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1908
  br label %err_retblock, !dbg !1908

if.exit115:                                       ; preds = %noerr_block
  %70 = load i8, ptr %is_negative, align 1, !dbg !1909
  %71 = trunc i8 %70 to i1, !dbg !1909
  br i1 %71, label %if.then118, label %if.exit124, !dbg !1909

if.then118:                                       ; preds = %if.exit115
    #dbg_declare(ptr %new_value, !1911, !DIExpression(), !1913)
  %72 = load i128, ptr %value, align 16, !dbg !1914
  %73 = load i128, ptr %base_used, align 16, !dbg !1915
  %mul = mul i128 %72, %73, !dbg !1914
  %74 = load i8, ptr %c74, align 1, !dbg !1916
  %zext119 = zext i8 %74 to i128, !dbg !1916
  %sub120 = sub i128 %mul, %zext119, !dbg !1914
  store i128 %sub120, ptr %new_value, align 16, !dbg !1914
  %75 = load i128, ptr %new_value, align 16, !dbg !1917
  %76 = load i128, ptr %value, align 16, !dbg !1918
  %gt121 = icmp ugt i128 %75, %76, !dbg !1917
  br i1 %gt121, label %if.then122, label %if.exit123, !dbg !1917

if.then122:                                       ; preds = %if.then118
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var116, align 8, !dbg !1919
  br label %guard_block133, !dbg !1919

if.exit123:                                       ; preds = %if.then118
  %77 = load i128, ptr %new_value, align 16, !dbg !1920
  store i128 %77, ptr %blockret117, align 16, !dbg !1920
  br label %expr_block.exit132, !dbg !1920

if.exit124:                                       ; preds = %if.exit115
    #dbg_declare(ptr %new_value125, !1921, !DIExpression(), !1922)
  %78 = load i128, ptr %value, align 16, !dbg !1923
  %79 = load i128, ptr %base_used, align 16, !dbg !1924
  %mul126 = mul i128 %78, %79, !dbg !1923
  %80 = load i8, ptr %c74, align 1, !dbg !1925
  %zext127 = zext i8 %80 to i128, !dbg !1925
  %add128 = add i128 %mul126, %zext127, !dbg !1923
  store i128 %add128, ptr %new_value125, align 16, !dbg !1923
  %81 = load i128, ptr %new_value125, align 16, !dbg !1926
  %82 = load i128, ptr %value, align 16, !dbg !1927
  %lt129 = icmp ult i128 %81, %82, !dbg !1926
  br i1 %lt129, label %if.then130, label %if.exit131, !dbg !1926

if.then130:                                       ; preds = %if.exit124
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var116, align 8, !dbg !1928
  br label %guard_block133, !dbg !1928

if.exit131:                                       ; preds = %if.exit124
  %83 = load i128, ptr %new_value125, align 16, !dbg !1929
  store i128 %83, ptr %blockret117, align 16, !dbg !1929
  br label %expr_block.exit132, !dbg !1929

expr_block.exit132:                               ; preds = %if.exit131, %if.exit123
  br label %noerr_block134, !dbg !1929

guard_block133:                                   ; preds = %if.then130, %if.then122
  %84 = load i64, ptr %error_var116, align 8, !dbg !1929
  store i64 %84, ptr %reterr, align 8, !dbg !1929
  br label %err_retblock, !dbg !1929

noerr_block134:                                   ; preds = %expr_block.exit132
  %85 = load i128, ptr %blockret117, align 16, !dbg !1929
  store i128 %85, ptr %value, align 16, !dbg !1929
  br label %loop.cond72, !dbg !1929

loop.exit135:                                     ; preds = %loop.cond72
  %86 = load i128, ptr %value, align 16, !dbg !1930
  store i128 %86, ptr %blockret, align 16, !dbg !1930
  br label %expr_block.exit136, !dbg !1930

expr_block.exit136:                               ; preds = %loop.exit135, %if.then45
  %87 = load i128, ptr %blockret, align 16, !dbg !1930
  store i128 %87, ptr %0, align 16, !dbg !1930
  ret i64 0, !dbg !1930

err_retblock:                                     ; preds = %guard_block133, %if.then114, %guard_block, %if.then69, %if.then24, %if.then18, %if.then
  %88 = load i64, ptr %reterr, align 8, !dbg !1930
  ret i64 %88, !dbg !1930

panic:                                            ; preds = %if.exit
  store i64 %21, ptr %taddr, align 8
  %89 = insertvalue %any undef, ptr %taddr, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr15, align 8
  %91 = insertvalue %any undef, ptr %taddr15, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %90, ptr %varargslots, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %92, ptr %ptradd16, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.71, i64 10, i32 744, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1839
  unreachable, !dbg !1839

panic28:                                          ; preds = %if.exit25
  store i64 %31, ptr %taddr29, align 8
  %94 = insertvalue %any undef, ptr %taddr29, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr30, align 8
  %96 = insertvalue %any undef, ptr %taddr30, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %95, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %97, ptr %ptradd32, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.71, i64 10, i32 757, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !1854
  unreachable, !dbg !1854

panic49:                                          ; preds = %if.exit46
  store i64 %40, ptr %taddr50, align 8
  %99 = insertvalue %any undef, ptr %taddr50, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr51, align 8
  %101 = insertvalue %any undef, ptr %taddr51, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %100, ptr %varargslots52, align 16
  %ptradd53 = getelementptr inbounds i8, ptr %varargslots52, i64 16
  store %any %102, ptr %ptradd53, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots52, 0
  %"$$temp54" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp54", ptr %indirectarg55, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.71, i64 10, i32 761, ptr byval(%"any[]") align 8 %indirectarg55) #5, !dbg !1863
  unreachable, !dbg !1863

panic79:                                          ; preds = %loop.body73
  store i64 %53, ptr %taddr80, align 8
  %104 = insertvalue %any undef, ptr %taddr80, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %55, ptr %taddr81, align 8
  %106 = insertvalue %any undef, ptr %taddr81, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %105, ptr %varargslots82, align 16
  %ptradd83 = getelementptr inbounds i8, ptr %varargslots82, i64 16
  store %any %107, ptr %ptradd83, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots82, 0
  %"$$temp84" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp84", ptr %indirectarg85, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.71, i64 10, i32 784, ptr byval(%"any[]") align 8 %indirectarg85) #5, !dbg !1892
  unreachable, !dbg !1892
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_ulong(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !1931 {
entry:
  %s = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i64, align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr50 = alloca i64, align 8
  %taddr51 = alloca i64, align 8
  %varargslots52 = alloca [2 x %any], align 16
  %indirectarg55 = alloca %"any[]", align 8
  %switch58 = alloca i8, align 1
  %value = alloca i64, align 8
  %c74 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret75 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr80 = alloca i64, align 8
  %taddr81 = alloca i64, align 8
  %varargslots82 = alloca [2 x %any], align 16
  %indirectarg85 = alloca %"any[]", align 8
  %error_var116 = alloca i64, align 8
  %blockret117 = alloca i64, align 8
  %new_value = alloca i64, align 8
  %new_value125 = alloca i64, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !1935, !DIExpression(), !1936)
  store i32 %3, ptr %base, align 4
    #dbg_declare(ptr %base, !1937, !DIExpression(), !1938)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %s, i32 16, i1 false)
  %4 = load i32, ptr %base, align 4
  store i32 %4, ptr %base1, align 4
  %5 = load i32, ptr %base1, align 4, !dbg !1939
  %le = icmp sle i32 %5, 10, !dbg !1939
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1939

and.rhs:                                          ; preds = %entry
  %6 = load i32, ptr %base1, align 4, !dbg !1943
  %gt = icmp sgt i32 %6, 1, !dbg !1943
  br label %and.phi, !dbg !1943

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1943
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1943

or.rhs:                                           ; preds = %and.phi
  %7 = load i32, ptr %base1, align 4, !dbg !1944
  %eq = icmp eq i32 %7, 16, !dbg !1944
  br label %or.phi, !dbg !1944

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1944
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1944

assert_fail:                                      ; preds = %or.phi
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1939
  call void %8(ptr @.panic_msg.65, i64 79, ptr @.file.18, i64 9, ptr @.func.72, i64 8, i32 734) #5, !dbg !1939
  unreachable, !dbg !1939

assert_ok:                                        ; preds = %or.phi
    #dbg_declare(ptr %len, !1945, !DIExpression(), !1946)
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1947
  %9 = load i64, ptr %ptradd3, align 8, !dbg !1947
  store i64 %9, ptr %len, align 8, !dbg !1947
    #dbg_declare(ptr %index, !1948, !DIExpression(), !1949)
  store i64 0, ptr %index, align 8, !dbg !1950
    #dbg_declare(ptr %ptr, !1951, !DIExpression(), !1952)
  %10 = load ptr, ptr %string, align 8, !dbg !1953
  store ptr %10, ptr %ptr, align 8, !dbg !1953
  br label %loop.cond, !dbg !1954

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %11 = load i64, ptr %index, align 8, !dbg !1955
  %12 = load i64, ptr %len, align 8, !dbg !1957
  %lt = icmp ult i64 %11, %12, !dbg !1955
  br i1 %lt, label %and.rhs4, label %and.phi11, !dbg !1955

and.rhs4:                                         ; preds = %loop.cond
  %13 = load ptr, ptr %ptr, align 8, !dbg !1958
  %14 = load i64, ptr %index, align 8, !dbg !1959
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 %14, !dbg !1959
  %15 = load i8, ptr %ptradd5, align 1
  store i8 %15, ptr %c, align 1
  %16 = load i8, ptr %c, align 1, !dbg !1960
  %eq6 = icmp eq i8 %16, 32, !dbg !1960
  br i1 %eq6, label %or.phi9, label %or.rhs7, !dbg !1960

or.rhs7:                                          ; preds = %and.rhs4
  %17 = load i8, ptr %c, align 1, !dbg !1963
  %eq8 = icmp eq i8 %17, 9, !dbg !1963
  br label %or.phi9, !dbg !1963

or.phi9:                                          ; preds = %or.rhs7, %and.rhs4
  %val10 = phi i1 [ true, %and.rhs4 ], [ %eq8, %or.rhs7 ], !dbg !1963
  br label %and.phi11, !dbg !1963

and.phi11:                                        ; preds = %or.phi9, %loop.cond
  %val12 = phi i1 [ false, %loop.cond ], [ %val10, %or.phi9 ], !dbg !1963
  br i1 %val12, label %loop.body, label %loop.exit, !dbg !1963

loop.body:                                        ; preds = %and.phi11
  %18 = load i64, ptr %index, align 8, !dbg !1964
  %add = add i64 %18, 1, !dbg !1964
  store i64 %add, ptr %index, align 8, !dbg !1964
  br label %loop.cond, !dbg !1964

loop.exit:                                        ; preds = %and.phi11
  %19 = load i64, ptr %len, align 8, !dbg !1965
  %20 = load i64, ptr %index, align 8, !dbg !1966
  %eq13 = icmp eq i64 %19, %20, !dbg !1965
  br i1 %eq13, label %if.then, label %if.exit, !dbg !1965

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1967
  br label %err_retblock, !dbg !1967

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !1968, !DIExpression(), !1969)
  store i8 0, ptr %is_negative, align 1, !dbg !1969
  %ptradd14 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1970
  %21 = load i64, ptr %ptradd14, align 8, !dbg !1970
  %22 = load ptr, ptr %string, align 8, !dbg !1970
  %23 = load i64, ptr %index, align 8, !dbg !1972
  %ge = icmp uge i64 %23, %21, !dbg !1972
  %24 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1972
  br i1 %24, label %panic, label %checkok, !dbg !1972

checkok:                                          ; preds = %if.exit
  %ptradd17 = getelementptr inbounds i8, ptr %22, i64 %23, !dbg !1972
  %25 = load i8, ptr %ptradd17, align 1
  store i8 %25, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %26 = load i8, ptr %switch, align 1
  switch i8 %26, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case21
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then18, !dbg !1973

if.then18:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$NEGATIVE_VALUE" to i64), ptr %reterr, align 8, !dbg !1975
  br label %err_retblock, !dbg !1975

switch.case21:                                    ; preds = %switch.entry
  %27 = load i64, ptr %index, align 8, !dbg !1976
  %add22 = add i64 %27, 1, !dbg !1976
  store i64 %add22, ptr %index, align 8, !dbg !1976
  br label %switch.exit, !dbg !1976

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1978

switch.exit:                                      ; preds = %switch.default, %switch.case21
  %28 = load i64, ptr %len, align 8, !dbg !1980
  %29 = load i64, ptr %index, align 8, !dbg !1981
  %eq23 = icmp eq i64 %28, %29, !dbg !1980
  br i1 %eq23, label %if.then24, label %if.exit25, !dbg !1980

if.then24:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1982
  br label %err_retblock, !dbg !1982

if.exit25:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !1983, !DIExpression(), !1984)
  %30 = load i32, ptr %base1, align 4, !dbg !1985
  %sext = sext i32 %30 to i64, !dbg !1985
  store i64 %sext, ptr %base_used, align 8, !dbg !1985
  %ptradd26 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1986
  %31 = load i64, ptr %ptradd26, align 8, !dbg !1986
  %32 = load ptr, ptr %string, align 8, !dbg !1986
  %33 = load i64, ptr %index, align 8, !dbg !1987
  %ge27 = icmp uge i64 %33, %31, !dbg !1987
  %34 = call i1 @llvm.expect.i1(i1 %ge27, i1 false), !dbg !1987
  br i1 %34, label %panic28, label %checkok35, !dbg !1987

checkok35:                                        ; preds = %if.exit25
  %ptradd36 = getelementptr inbounds i8, ptr %32, i64 %33, !dbg !1987
  %35 = load i8, ptr %ptradd36, align 1, !dbg !1987
  %eq37 = icmp eq i8 %35, 48, !dbg !1986
  br i1 %eq37, label %and.rhs38, label %and.phi40, !dbg !1986

and.rhs38:                                        ; preds = %checkok35
  %36 = load i32, ptr %base1, align 4, !dbg !1988
  %eq39 = icmp eq i32 %36, 10, !dbg !1988
  br label %and.phi40, !dbg !1988

and.phi40:                                        ; preds = %and.rhs38, %checkok35
  %val41 = phi i1 [ false, %checkok35 ], [ %eq39, %and.rhs38 ], !dbg !1988
  br i1 %val41, label %if.then42, label %if.exit71, !dbg !1988

if.then42:                                        ; preds = %and.phi40
  %37 = load i64, ptr %index, align 8, !dbg !1989
  %add43 = add i64 %37, 1, !dbg !1989
  store i64 %add43, ptr %index, align 8, !dbg !1989
  %38 = load i64, ptr %index, align 8, !dbg !1991
  %39 = load i64, ptr %len, align 8, !dbg !1992
  %eq44 = icmp eq i64 %38, %39, !dbg !1991
  br i1 %eq44, label %if.then45, label %if.exit46, !dbg !1991

if.then45:                                        ; preds = %if.then42
  store i64 0, ptr %blockret, align 8, !dbg !1993
  br label %expr_block.exit136, !dbg !1993

if.exit46:                                        ; preds = %if.then42
  %ptradd47 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1994
  %40 = load i64, ptr %ptradd47, align 8, !dbg !1994
  %41 = load ptr, ptr %string, align 8, !dbg !1994
  %42 = load i64, ptr %index, align 8, !dbg !1996
  %ge48 = icmp uge i64 %42, %40, !dbg !1996
  %43 = call i1 @llvm.expect.i1(i1 %ge48, i1 false), !dbg !1996
  br i1 %43, label %panic49, label %checkok56, !dbg !1996

checkok56:                                        ; preds = %if.exit46
  %ptradd57 = getelementptr inbounds i8, ptr %41, i64 %42, !dbg !1996
  %44 = load i8, ptr %ptradd57, align 1
  store i8 %44, ptr %switch58, align 1
  br label %switch.entry59

switch.entry59:                                   ; preds = %checkok56
  %45 = load i8, ptr %switch58, align 1
  switch i8 %45, label %switch.default66 [
    i8 120, label %switch.case60
    i8 88, label %switch.case60
    i8 98, label %switch.case62
    i8 66, label %switch.case62
    i8 111, label %switch.case64
    i8 79, label %switch.case64
  ]

switch.case60:                                    ; preds = %switch.entry59, %switch.entry59
  store i64 16, ptr %base_used, align 8, !dbg !1997
  %46 = load i64, ptr %index, align 8, !dbg !1999
  %add61 = add i64 %46, 1, !dbg !1999
  store i64 %add61, ptr %index, align 8, !dbg !1999
  br label %switch.exit67, !dbg !1999

switch.case62:                                    ; preds = %switch.entry59, %switch.entry59
  store i64 2, ptr %base_used, align 8, !dbg !2000
  %47 = load i64, ptr %index, align 8, !dbg !2002
  %add63 = add i64 %47, 1, !dbg !2002
  store i64 %add63, ptr %index, align 8, !dbg !2002
  br label %switch.exit67, !dbg !2002

switch.case64:                                    ; preds = %switch.entry59, %switch.entry59
  store i64 8, ptr %base_used, align 8, !dbg !2003
  %48 = load i64, ptr %index, align 8, !dbg !2005
  %add65 = add i64 %48, 1, !dbg !2005
  store i64 %add65, ptr %index, align 8, !dbg !2005
  br label %switch.exit67, !dbg !2005

switch.default66:                                 ; preds = %switch.entry59
  br label %switch.exit67, !dbg !2006

switch.exit67:                                    ; preds = %switch.default66, %switch.case64, %switch.case62, %switch.case60
  %49 = load i64, ptr %len, align 8, !dbg !2008
  %50 = load i64, ptr %index, align 8, !dbg !2009
  %eq68 = icmp eq i64 %49, %50, !dbg !2008
  br i1 %eq68, label %if.then69, label %if.exit70, !dbg !2008

if.then69:                                        ; preds = %switch.exit67
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2010
  br label %err_retblock, !dbg !2010

if.exit70:                                        ; preds = %switch.exit67
  br label %if.exit71, !dbg !2010

if.exit71:                                        ; preds = %if.exit70, %and.phi40
    #dbg_declare(ptr %value, !2011, !DIExpression(), !2012)
  store i64 0, ptr %value, align 8, !dbg !2013
  br label %loop.cond72, !dbg !2014

loop.cond72:                                      ; preds = %noerr_block134, %if.exit71
  %51 = load i64, ptr %index, align 8, !dbg !2015
  %52 = load i64, ptr %len, align 8, !dbg !2017
  %neq = icmp ne i64 %51, %52, !dbg !2015
  br i1 %neq, label %loop.body73, label %loop.exit135, !dbg !2015

loop.body73:                                      ; preds = %loop.cond72
    #dbg_declare(ptr %c74, !2018, !DIExpression(), !2020)
    #dbg_declare(ptr %ch, !2021, !DIExpression(), !2023)
  %ptradd76 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2024
  %53 = load i64, ptr %ptradd76, align 8, !dbg !2024
  %54 = load ptr, ptr %string, align 8, !dbg !2024
  %55 = load i64, ptr %index, align 8, !dbg !2025
  %add77 = add i64 %55, 1, !dbg !2025
  store i64 %add77, ptr %index, align 8, !dbg !2025
  %ge78 = icmp uge i64 %55, %53, !dbg !2025
  %56 = call i1 @llvm.expect.i1(i1 %ge78, i1 false), !dbg !2025
  br i1 %56, label %panic79, label %checkok86, !dbg !2025

checkok86:                                        ; preds = %loop.body73
  %ptradd87 = getelementptr inbounds i8, ptr %54, i64 %55, !dbg !2025
  %57 = load i8, ptr %ptradd87, align 1, !dbg !2025
  store i8 %57, ptr %ch, align 1, !dbg !2025
  %58 = load i64, ptr %base_used, align 8, !dbg !2026
  %neq88 = icmp ne i64 16, %58, !dbg !2026
  br i1 %neq88, label %or.phi91, label %or.rhs89, !dbg !2026

or.rhs89:                                         ; preds = %checkok86
  %59 = load i8, ptr %ch, align 1, !dbg !2027
  %lt90 = icmp ult i8 %59, 65, !dbg !2027
  br label %or.phi91, !dbg !2027

or.phi91:                                         ; preds = %or.rhs89, %checkok86
  %val92 = phi i1 [ true, %checkok86 ], [ %lt90, %or.rhs89 ], !dbg !2027
  br i1 %val92, label %if.then93, label %if.exit94, !dbg !2027

if.then93:                                        ; preds = %or.phi91
  %60 = load i8, ptr %ch, align 1, !dbg !2028
  %zext = zext i8 %60 to i32, !dbg !2028
  %sub = sub i32 %zext, 48, !dbg !2029
  %trunc = trunc i32 %sub to i8, !dbg !2029
  store i8 %trunc, ptr %blockret75, align 1, !dbg !2029
  br label %expr_block.exit, !dbg !2029

if.exit94:                                        ; preds = %or.phi91
  %61 = load i8, ptr %ch, align 1, !dbg !2030
  %le95 = icmp ule i8 %61, 70, !dbg !2030
  br i1 %le95, label %if.then96, label %if.exit101, !dbg !2030

if.then96:                                        ; preds = %if.exit94
  %62 = load i8, ptr %ch, align 1, !dbg !2031
  %zext97 = zext i8 %62 to i32, !dbg !2031
  %sub98 = sub i32 %zext97, 65, !dbg !2031
  %add99 = add i32 %sub98, 10, !dbg !2032
  %trunc100 = trunc i32 %add99 to i8, !dbg !2032
  store i8 %trunc100, ptr %blockret75, align 1, !dbg !2032
  br label %expr_block.exit, !dbg !2032

if.exit101:                                       ; preds = %if.exit94
  %63 = load i8, ptr %ch, align 1, !dbg !2033
  %lt102 = icmp ult i8 %63, 97, !dbg !2033
  br i1 %lt102, label %if.then103, label %if.exit104, !dbg !2033

if.then103:                                       ; preds = %if.exit101
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !2034
  br label %guard_block, !dbg !2034

if.exit104:                                       ; preds = %if.exit101
  %64 = load i8, ptr %ch, align 1, !dbg !2035
  %gt105 = icmp ugt i8 %64, 102, !dbg !2035
  br i1 %gt105, label %if.then106, label %if.exit107, !dbg !2035

if.then106:                                       ; preds = %if.exit104
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !2036
  br label %guard_block, !dbg !2036

if.exit107:                                       ; preds = %if.exit104
  %65 = load i8, ptr %ch, align 1, !dbg !2037
  %zext108 = zext i8 %65 to i32, !dbg !2037
  %sub109 = sub i32 %zext108, 97, !dbg !2037
  %add110 = add i32 %sub109, 10, !dbg !2038
  %trunc111 = trunc i32 %add110 to i8, !dbg !2038
  store i8 %trunc111, ptr %blockret75, align 1, !dbg !2038
  br label %expr_block.exit, !dbg !2038

expr_block.exit:                                  ; preds = %if.exit107, %if.then96, %if.then93
  br label %noerr_block, !dbg !2038

guard_block:                                      ; preds = %if.then106, %if.then103
  %66 = load i64, ptr %error_var, align 8, !dbg !2038
  store i64 %66, ptr %reterr, align 8, !dbg !2038
  br label %err_retblock, !dbg !2038

noerr_block:                                      ; preds = %expr_block.exit
  %67 = load i8, ptr %blockret75, align 1, !dbg !2038
  store i8 %67, ptr %c74, align 1, !dbg !2038
  %68 = load i8, ptr %c74, align 1, !dbg !2039
  %zext112 = zext i8 %68 to i64, !dbg !2039
  %69 = load i64, ptr %base_used, align 8, !dbg !2040
  %ge113 = icmp uge i64 %zext112, %69, !dbg !2039
  br i1 %ge113, label %if.then114, label %if.exit115, !dbg !2039

if.then114:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2041
  br label %err_retblock, !dbg !2041

if.exit115:                                       ; preds = %noerr_block
  %70 = load i8, ptr %is_negative, align 1, !dbg !2042
  %71 = trunc i8 %70 to i1, !dbg !2042
  br i1 %71, label %if.then118, label %if.exit124, !dbg !2042

if.then118:                                       ; preds = %if.exit115
    #dbg_declare(ptr %new_value, !2044, !DIExpression(), !2046)
  %72 = load i64, ptr %value, align 8, !dbg !2047
  %73 = load i64, ptr %base_used, align 8, !dbg !2048
  %mul = mul i64 %72, %73, !dbg !2047
  %74 = load i8, ptr %c74, align 1, !dbg !2049
  %zext119 = zext i8 %74 to i64, !dbg !2049
  %sub120 = sub i64 %mul, %zext119, !dbg !2047
  store i64 %sub120, ptr %new_value, align 8, !dbg !2047
  %75 = load i64, ptr %new_value, align 8, !dbg !2050
  %76 = load i64, ptr %value, align 8, !dbg !2051
  %gt121 = icmp ugt i64 %75, %76, !dbg !2050
  br i1 %gt121, label %if.then122, label %if.exit123, !dbg !2050

if.then122:                                       ; preds = %if.then118
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var116, align 8, !dbg !2052
  br label %guard_block133, !dbg !2052

if.exit123:                                       ; preds = %if.then118
  %77 = load i64, ptr %new_value, align 8, !dbg !2053
  store i64 %77, ptr %blockret117, align 8, !dbg !2053
  br label %expr_block.exit132, !dbg !2053

if.exit124:                                       ; preds = %if.exit115
    #dbg_declare(ptr %new_value125, !2054, !DIExpression(), !2055)
  %78 = load i64, ptr %value, align 8, !dbg !2056
  %79 = load i64, ptr %base_used, align 8, !dbg !2057
  %mul126 = mul i64 %78, %79, !dbg !2056
  %80 = load i8, ptr %c74, align 1, !dbg !2058
  %zext127 = zext i8 %80 to i64, !dbg !2058
  %add128 = add i64 %mul126, %zext127, !dbg !2056
  store i64 %add128, ptr %new_value125, align 8, !dbg !2056
  %81 = load i64, ptr %new_value125, align 8, !dbg !2059
  %82 = load i64, ptr %value, align 8, !dbg !2060
  %lt129 = icmp ult i64 %81, %82, !dbg !2059
  br i1 %lt129, label %if.then130, label %if.exit131, !dbg !2059

if.then130:                                       ; preds = %if.exit124
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var116, align 8, !dbg !2061
  br label %guard_block133, !dbg !2061

if.exit131:                                       ; preds = %if.exit124
  %83 = load i64, ptr %new_value125, align 8, !dbg !2062
  store i64 %83, ptr %blockret117, align 8, !dbg !2062
  br label %expr_block.exit132, !dbg !2062

expr_block.exit132:                               ; preds = %if.exit131, %if.exit123
  br label %noerr_block134, !dbg !2062

guard_block133:                                   ; preds = %if.then130, %if.then122
  %84 = load i64, ptr %error_var116, align 8, !dbg !2062
  store i64 %84, ptr %reterr, align 8, !dbg !2062
  br label %err_retblock, !dbg !2062

noerr_block134:                                   ; preds = %expr_block.exit132
  %85 = load i64, ptr %blockret117, align 8, !dbg !2062
  store i64 %85, ptr %value, align 8, !dbg !2062
  br label %loop.cond72, !dbg !2062

loop.exit135:                                     ; preds = %loop.cond72
  %86 = load i64, ptr %value, align 8, !dbg !2063
  store i64 %86, ptr %blockret, align 8, !dbg !2063
  br label %expr_block.exit136, !dbg !2063

expr_block.exit136:                               ; preds = %loop.exit135, %if.then45
  %87 = load i64, ptr %blockret, align 8, !dbg !2063
  store i64 %87, ptr %0, align 8, !dbg !2063
  ret i64 0, !dbg !2063

err_retblock:                                     ; preds = %guard_block133, %if.then114, %guard_block, %if.then69, %if.then24, %if.then18, %if.then
  %88 = load i64, ptr %reterr, align 8, !dbg !2063
  ret i64 %88, !dbg !2063

panic:                                            ; preds = %if.exit
  store i64 %21, ptr %taddr, align 8
  %89 = insertvalue %any undef, ptr %taddr, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr15, align 8
  %91 = insertvalue %any undef, ptr %taddr15, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %90, ptr %varargslots, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %92, ptr %ptradd16, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.72, i64 8, i32 744, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1972
  unreachable, !dbg !1972

panic28:                                          ; preds = %if.exit25
  store i64 %31, ptr %taddr29, align 8
  %94 = insertvalue %any undef, ptr %taddr29, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr30, align 8
  %96 = insertvalue %any undef, ptr %taddr30, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %95, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %97, ptr %ptradd32, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.72, i64 8, i32 757, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !1987
  unreachable, !dbg !1987

panic49:                                          ; preds = %if.exit46
  store i64 %40, ptr %taddr50, align 8
  %99 = insertvalue %any undef, ptr %taddr50, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr51, align 8
  %101 = insertvalue %any undef, ptr %taddr51, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %100, ptr %varargslots52, align 16
  %ptradd53 = getelementptr inbounds i8, ptr %varargslots52, i64 16
  store %any %102, ptr %ptradd53, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots52, 0
  %"$$temp54" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp54", ptr %indirectarg55, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.72, i64 8, i32 761, ptr byval(%"any[]") align 8 %indirectarg55) #5, !dbg !1996
  unreachable, !dbg !1996

panic79:                                          ; preds = %loop.body73
  store i64 %53, ptr %taddr80, align 8
  %104 = insertvalue %any undef, ptr %taddr80, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %55, ptr %taddr81, align 8
  %106 = insertvalue %any undef, ptr %taddr81, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %105, ptr %varargslots82, align 16
  %ptradd83 = getelementptr inbounds i8, ptr %varargslots82, i64 16
  store %any %107, ptr %ptradd83, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots82, 0
  %"$$temp84" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp84", ptr %indirectarg85, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.72, i64 8, i32 784, ptr byval(%"any[]") align 8 %indirectarg85) #5, !dbg !2025
  unreachable, !dbg !2025
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_uint(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !2064 {
entry:
  %s = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i32, align 4
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i32, align 4
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr50 = alloca i64, align 8
  %taddr51 = alloca i64, align 8
  %varargslots52 = alloca [2 x %any], align 16
  %indirectarg55 = alloca %"any[]", align 8
  %switch58 = alloca i8, align 1
  %value = alloca i32, align 4
  %c74 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret75 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr80 = alloca i64, align 8
  %taddr81 = alloca i64, align 8
  %varargslots82 = alloca [2 x %any], align 16
  %indirectarg85 = alloca %"any[]", align 8
  %error_var116 = alloca i64, align 8
  %blockret117 = alloca i32, align 4
  %new_value = alloca i32, align 4
  %new_value125 = alloca i32, align 4
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !2068, !DIExpression(), !2069)
  store i32 %3, ptr %base, align 4
    #dbg_declare(ptr %base, !2070, !DIExpression(), !2071)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %s, i32 16, i1 false)
  %4 = load i32, ptr %base, align 4
  store i32 %4, ptr %base1, align 4
  %5 = load i32, ptr %base1, align 4, !dbg !2072
  %le = icmp sle i32 %5, 10, !dbg !2072
  br i1 %le, label %and.rhs, label %and.phi, !dbg !2072

and.rhs:                                          ; preds = %entry
  %6 = load i32, ptr %base1, align 4, !dbg !2076
  %gt = icmp sgt i32 %6, 1, !dbg !2076
  br label %and.phi, !dbg !2076

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !2076
  br i1 %val, label %or.phi, label %or.rhs, !dbg !2076

or.rhs:                                           ; preds = %and.phi
  %7 = load i32, ptr %base1, align 4, !dbg !2077
  %eq = icmp eq i32 %7, 16, !dbg !2077
  br label %or.phi, !dbg !2077

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !2077
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !2077

assert_fail:                                      ; preds = %or.phi
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2072
  call void %8(ptr @.panic_msg.65, i64 79, ptr @.file.18, i64 9, ptr @.func.73, i64 7, i32 734) #5, !dbg !2072
  unreachable, !dbg !2072

assert_ok:                                        ; preds = %or.phi
    #dbg_declare(ptr %len, !2078, !DIExpression(), !2079)
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2080
  %9 = load i64, ptr %ptradd3, align 8, !dbg !2080
  store i64 %9, ptr %len, align 8, !dbg !2080
    #dbg_declare(ptr %index, !2081, !DIExpression(), !2082)
  store i64 0, ptr %index, align 8, !dbg !2083
    #dbg_declare(ptr %ptr, !2084, !DIExpression(), !2085)
  %10 = load ptr, ptr %string, align 8, !dbg !2086
  store ptr %10, ptr %ptr, align 8, !dbg !2086
  br label %loop.cond, !dbg !2087

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %11 = load i64, ptr %index, align 8, !dbg !2088
  %12 = load i64, ptr %len, align 8, !dbg !2090
  %lt = icmp ult i64 %11, %12, !dbg !2088
  br i1 %lt, label %and.rhs4, label %and.phi11, !dbg !2088

and.rhs4:                                         ; preds = %loop.cond
  %13 = load ptr, ptr %ptr, align 8, !dbg !2091
  %14 = load i64, ptr %index, align 8, !dbg !2092
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 %14, !dbg !2092
  %15 = load i8, ptr %ptradd5, align 1
  store i8 %15, ptr %c, align 1
  %16 = load i8, ptr %c, align 1, !dbg !2093
  %eq6 = icmp eq i8 %16, 32, !dbg !2093
  br i1 %eq6, label %or.phi9, label %or.rhs7, !dbg !2093

or.rhs7:                                          ; preds = %and.rhs4
  %17 = load i8, ptr %c, align 1, !dbg !2096
  %eq8 = icmp eq i8 %17, 9, !dbg !2096
  br label %or.phi9, !dbg !2096

or.phi9:                                          ; preds = %or.rhs7, %and.rhs4
  %val10 = phi i1 [ true, %and.rhs4 ], [ %eq8, %or.rhs7 ], !dbg !2096
  br label %and.phi11, !dbg !2096

and.phi11:                                        ; preds = %or.phi9, %loop.cond
  %val12 = phi i1 [ false, %loop.cond ], [ %val10, %or.phi9 ], !dbg !2096
  br i1 %val12, label %loop.body, label %loop.exit, !dbg !2096

loop.body:                                        ; preds = %and.phi11
  %18 = load i64, ptr %index, align 8, !dbg !2097
  %add = add i64 %18, 1, !dbg !2097
  store i64 %add, ptr %index, align 8, !dbg !2097
  br label %loop.cond, !dbg !2097

loop.exit:                                        ; preds = %and.phi11
  %19 = load i64, ptr %len, align 8, !dbg !2098
  %20 = load i64, ptr %index, align 8, !dbg !2099
  %eq13 = icmp eq i64 %19, %20, !dbg !2098
  br i1 %eq13, label %if.then, label %if.exit, !dbg !2098

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !2100
  br label %err_retblock, !dbg !2100

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !2101, !DIExpression(), !2102)
  store i8 0, ptr %is_negative, align 1, !dbg !2102
  %ptradd14 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2103
  %21 = load i64, ptr %ptradd14, align 8, !dbg !2103
  %22 = load ptr, ptr %string, align 8, !dbg !2103
  %23 = load i64, ptr %index, align 8, !dbg !2105
  %ge = icmp uge i64 %23, %21, !dbg !2105
  %24 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2105
  br i1 %24, label %panic, label %checkok, !dbg !2105

checkok:                                          ; preds = %if.exit
  %ptradd17 = getelementptr inbounds i8, ptr %22, i64 %23, !dbg !2105
  %25 = load i8, ptr %ptradd17, align 1
  store i8 %25, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %26 = load i8, ptr %switch, align 1
  switch i8 %26, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case21
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then18, !dbg !2106

if.then18:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$NEGATIVE_VALUE" to i64), ptr %reterr, align 8, !dbg !2108
  br label %err_retblock, !dbg !2108

switch.case21:                                    ; preds = %switch.entry
  %27 = load i64, ptr %index, align 8, !dbg !2109
  %add22 = add i64 %27, 1, !dbg !2109
  store i64 %add22, ptr %index, align 8, !dbg !2109
  br label %switch.exit, !dbg !2109

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !2111

switch.exit:                                      ; preds = %switch.default, %switch.case21
  %28 = load i64, ptr %len, align 8, !dbg !2113
  %29 = load i64, ptr %index, align 8, !dbg !2114
  %eq23 = icmp eq i64 %28, %29, !dbg !2113
  br i1 %eq23, label %if.then24, label %if.exit25, !dbg !2113

if.then24:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2115
  br label %err_retblock, !dbg !2115

if.exit25:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !2116, !DIExpression(), !2117)
  %30 = load i32, ptr %base1, align 4, !dbg !2118
  store i32 %30, ptr %base_used, align 4, !dbg !2118
  %ptradd26 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2119
  %31 = load i64, ptr %ptradd26, align 8, !dbg !2119
  %32 = load ptr, ptr %string, align 8, !dbg !2119
  %33 = load i64, ptr %index, align 8, !dbg !2120
  %ge27 = icmp uge i64 %33, %31, !dbg !2120
  %34 = call i1 @llvm.expect.i1(i1 %ge27, i1 false), !dbg !2120
  br i1 %34, label %panic28, label %checkok35, !dbg !2120

checkok35:                                        ; preds = %if.exit25
  %ptradd36 = getelementptr inbounds i8, ptr %32, i64 %33, !dbg !2120
  %35 = load i8, ptr %ptradd36, align 1, !dbg !2120
  %eq37 = icmp eq i8 %35, 48, !dbg !2119
  br i1 %eq37, label %and.rhs38, label %and.phi40, !dbg !2119

and.rhs38:                                        ; preds = %checkok35
  %36 = load i32, ptr %base1, align 4, !dbg !2121
  %eq39 = icmp eq i32 %36, 10, !dbg !2121
  br label %and.phi40, !dbg !2121

and.phi40:                                        ; preds = %and.rhs38, %checkok35
  %val41 = phi i1 [ false, %checkok35 ], [ %eq39, %and.rhs38 ], !dbg !2121
  br i1 %val41, label %if.then42, label %if.exit71, !dbg !2121

if.then42:                                        ; preds = %and.phi40
  %37 = load i64, ptr %index, align 8, !dbg !2122
  %add43 = add i64 %37, 1, !dbg !2122
  store i64 %add43, ptr %index, align 8, !dbg !2122
  %38 = load i64, ptr %index, align 8, !dbg !2124
  %39 = load i64, ptr %len, align 8, !dbg !2125
  %eq44 = icmp eq i64 %38, %39, !dbg !2124
  br i1 %eq44, label %if.then45, label %if.exit46, !dbg !2124

if.then45:                                        ; preds = %if.then42
  store i32 0, ptr %blockret, align 4, !dbg !2126
  br label %expr_block.exit136, !dbg !2126

if.exit46:                                        ; preds = %if.then42
  %ptradd47 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2127
  %40 = load i64, ptr %ptradd47, align 8, !dbg !2127
  %41 = load ptr, ptr %string, align 8, !dbg !2127
  %42 = load i64, ptr %index, align 8, !dbg !2129
  %ge48 = icmp uge i64 %42, %40, !dbg !2129
  %43 = call i1 @llvm.expect.i1(i1 %ge48, i1 false), !dbg !2129
  br i1 %43, label %panic49, label %checkok56, !dbg !2129

checkok56:                                        ; preds = %if.exit46
  %ptradd57 = getelementptr inbounds i8, ptr %41, i64 %42, !dbg !2129
  %44 = load i8, ptr %ptradd57, align 1
  store i8 %44, ptr %switch58, align 1
  br label %switch.entry59

switch.entry59:                                   ; preds = %checkok56
  %45 = load i8, ptr %switch58, align 1
  switch i8 %45, label %switch.default66 [
    i8 120, label %switch.case60
    i8 88, label %switch.case60
    i8 98, label %switch.case62
    i8 66, label %switch.case62
    i8 111, label %switch.case64
    i8 79, label %switch.case64
  ]

switch.case60:                                    ; preds = %switch.entry59, %switch.entry59
  store i32 16, ptr %base_used, align 4, !dbg !2130
  %46 = load i64, ptr %index, align 8, !dbg !2132
  %add61 = add i64 %46, 1, !dbg !2132
  store i64 %add61, ptr %index, align 8, !dbg !2132
  br label %switch.exit67, !dbg !2132

switch.case62:                                    ; preds = %switch.entry59, %switch.entry59
  store i32 2, ptr %base_used, align 4, !dbg !2133
  %47 = load i64, ptr %index, align 8, !dbg !2135
  %add63 = add i64 %47, 1, !dbg !2135
  store i64 %add63, ptr %index, align 8, !dbg !2135
  br label %switch.exit67, !dbg !2135

switch.case64:                                    ; preds = %switch.entry59, %switch.entry59
  store i32 8, ptr %base_used, align 4, !dbg !2136
  %48 = load i64, ptr %index, align 8, !dbg !2138
  %add65 = add i64 %48, 1, !dbg !2138
  store i64 %add65, ptr %index, align 8, !dbg !2138
  br label %switch.exit67, !dbg !2138

switch.default66:                                 ; preds = %switch.entry59
  br label %switch.exit67, !dbg !2139

switch.exit67:                                    ; preds = %switch.default66, %switch.case64, %switch.case62, %switch.case60
  %49 = load i64, ptr %len, align 8, !dbg !2141
  %50 = load i64, ptr %index, align 8, !dbg !2142
  %eq68 = icmp eq i64 %49, %50, !dbg !2141
  br i1 %eq68, label %if.then69, label %if.exit70, !dbg !2141

if.then69:                                        ; preds = %switch.exit67
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2143
  br label %err_retblock, !dbg !2143

if.exit70:                                        ; preds = %switch.exit67
  br label %if.exit71, !dbg !2143

if.exit71:                                        ; preds = %if.exit70, %and.phi40
    #dbg_declare(ptr %value, !2144, !DIExpression(), !2145)
  store i32 0, ptr %value, align 4, !dbg !2146
  br label %loop.cond72, !dbg !2147

loop.cond72:                                      ; preds = %noerr_block134, %if.exit71
  %51 = load i64, ptr %index, align 8, !dbg !2148
  %52 = load i64, ptr %len, align 8, !dbg !2150
  %neq = icmp ne i64 %51, %52, !dbg !2148
  br i1 %neq, label %loop.body73, label %loop.exit135, !dbg !2148

loop.body73:                                      ; preds = %loop.cond72
    #dbg_declare(ptr %c74, !2151, !DIExpression(), !2153)
    #dbg_declare(ptr %ch, !2154, !DIExpression(), !2156)
  %ptradd76 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2157
  %53 = load i64, ptr %ptradd76, align 8, !dbg !2157
  %54 = load ptr, ptr %string, align 8, !dbg !2157
  %55 = load i64, ptr %index, align 8, !dbg !2158
  %add77 = add i64 %55, 1, !dbg !2158
  store i64 %add77, ptr %index, align 8, !dbg !2158
  %ge78 = icmp uge i64 %55, %53, !dbg !2158
  %56 = call i1 @llvm.expect.i1(i1 %ge78, i1 false), !dbg !2158
  br i1 %56, label %panic79, label %checkok86, !dbg !2158

checkok86:                                        ; preds = %loop.body73
  %ptradd87 = getelementptr inbounds i8, ptr %54, i64 %55, !dbg !2158
  %57 = load i8, ptr %ptradd87, align 1, !dbg !2158
  store i8 %57, ptr %ch, align 1, !dbg !2158
  %58 = load i32, ptr %base_used, align 4, !dbg !2159
  %neq88 = icmp ne i32 16, %58, !dbg !2159
  br i1 %neq88, label %or.phi91, label %or.rhs89, !dbg !2159

or.rhs89:                                         ; preds = %checkok86
  %59 = load i8, ptr %ch, align 1, !dbg !2160
  %lt90 = icmp ult i8 %59, 65, !dbg !2160
  br label %or.phi91, !dbg !2160

or.phi91:                                         ; preds = %or.rhs89, %checkok86
  %val92 = phi i1 [ true, %checkok86 ], [ %lt90, %or.rhs89 ], !dbg !2160
  br i1 %val92, label %if.then93, label %if.exit94, !dbg !2160

if.then93:                                        ; preds = %or.phi91
  %60 = load i8, ptr %ch, align 1, !dbg !2161
  %zext = zext i8 %60 to i32, !dbg !2161
  %sub = sub i32 %zext, 48, !dbg !2162
  %trunc = trunc i32 %sub to i8, !dbg !2162
  store i8 %trunc, ptr %blockret75, align 1, !dbg !2162
  br label %expr_block.exit, !dbg !2162

if.exit94:                                        ; preds = %or.phi91
  %61 = load i8, ptr %ch, align 1, !dbg !2163
  %le95 = icmp ule i8 %61, 70, !dbg !2163
  br i1 %le95, label %if.then96, label %if.exit101, !dbg !2163

if.then96:                                        ; preds = %if.exit94
  %62 = load i8, ptr %ch, align 1, !dbg !2164
  %zext97 = zext i8 %62 to i32, !dbg !2164
  %sub98 = sub i32 %zext97, 65, !dbg !2164
  %add99 = add i32 %sub98, 10, !dbg !2165
  %trunc100 = trunc i32 %add99 to i8, !dbg !2165
  store i8 %trunc100, ptr %blockret75, align 1, !dbg !2165
  br label %expr_block.exit, !dbg !2165

if.exit101:                                       ; preds = %if.exit94
  %63 = load i8, ptr %ch, align 1, !dbg !2166
  %lt102 = icmp ult i8 %63, 97, !dbg !2166
  br i1 %lt102, label %if.then103, label %if.exit104, !dbg !2166

if.then103:                                       ; preds = %if.exit101
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !2167
  br label %guard_block, !dbg !2167

if.exit104:                                       ; preds = %if.exit101
  %64 = load i8, ptr %ch, align 1, !dbg !2168
  %gt105 = icmp ugt i8 %64, 102, !dbg !2168
  br i1 %gt105, label %if.then106, label %if.exit107, !dbg !2168

if.then106:                                       ; preds = %if.exit104
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !2169
  br label %guard_block, !dbg !2169

if.exit107:                                       ; preds = %if.exit104
  %65 = load i8, ptr %ch, align 1, !dbg !2170
  %zext108 = zext i8 %65 to i32, !dbg !2170
  %sub109 = sub i32 %zext108, 97, !dbg !2170
  %add110 = add i32 %sub109, 10, !dbg !2171
  %trunc111 = trunc i32 %add110 to i8, !dbg !2171
  store i8 %trunc111, ptr %blockret75, align 1, !dbg !2171
  br label %expr_block.exit, !dbg !2171

expr_block.exit:                                  ; preds = %if.exit107, %if.then96, %if.then93
  br label %noerr_block, !dbg !2171

guard_block:                                      ; preds = %if.then106, %if.then103
  %66 = load i64, ptr %error_var, align 8, !dbg !2171
  store i64 %66, ptr %reterr, align 8, !dbg !2171
  br label %err_retblock, !dbg !2171

noerr_block:                                      ; preds = %expr_block.exit
  %67 = load i8, ptr %blockret75, align 1, !dbg !2171
  store i8 %67, ptr %c74, align 1, !dbg !2171
  %68 = load i8, ptr %c74, align 1, !dbg !2172
  %zext112 = zext i8 %68 to i32, !dbg !2172
  %69 = load i32, ptr %base_used, align 4, !dbg !2173
  %ge113 = icmp uge i32 %zext112, %69, !dbg !2172
  br i1 %ge113, label %if.then114, label %if.exit115, !dbg !2172

if.then114:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2174
  br label %err_retblock, !dbg !2174

if.exit115:                                       ; preds = %noerr_block
  %70 = load i8, ptr %is_negative, align 1, !dbg !2175
  %71 = trunc i8 %70 to i1, !dbg !2175
  br i1 %71, label %if.then118, label %if.exit124, !dbg !2175

if.then118:                                       ; preds = %if.exit115
    #dbg_declare(ptr %new_value, !2177, !DIExpression(), !2179)
  %72 = load i32, ptr %value, align 4, !dbg !2180
  %73 = load i32, ptr %base_used, align 4, !dbg !2181
  %mul = mul i32 %72, %73, !dbg !2180
  %74 = load i8, ptr %c74, align 1, !dbg !2182
  %zext119 = zext i8 %74 to i32, !dbg !2182
  %sub120 = sub i32 %mul, %zext119, !dbg !2180
  store i32 %sub120, ptr %new_value, align 4, !dbg !2180
  %75 = load i32, ptr %new_value, align 4, !dbg !2183
  %76 = load i32, ptr %value, align 4, !dbg !2184
  %gt121 = icmp ugt i32 %75, %76, !dbg !2183
  br i1 %gt121, label %if.then122, label %if.exit123, !dbg !2183

if.then122:                                       ; preds = %if.then118
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var116, align 8, !dbg !2185
  br label %guard_block133, !dbg !2185

if.exit123:                                       ; preds = %if.then118
  %77 = load i32, ptr %new_value, align 4, !dbg !2186
  store i32 %77, ptr %blockret117, align 4, !dbg !2186
  br label %expr_block.exit132, !dbg !2186

if.exit124:                                       ; preds = %if.exit115
    #dbg_declare(ptr %new_value125, !2187, !DIExpression(), !2188)
  %78 = load i32, ptr %value, align 4, !dbg !2189
  %79 = load i32, ptr %base_used, align 4, !dbg !2190
  %mul126 = mul i32 %78, %79, !dbg !2189
  %80 = load i8, ptr %c74, align 1, !dbg !2191
  %zext127 = zext i8 %80 to i32, !dbg !2191
  %add128 = add i32 %mul126, %zext127, !dbg !2189
  store i32 %add128, ptr %new_value125, align 4, !dbg !2189
  %81 = load i32, ptr %new_value125, align 4, !dbg !2192
  %82 = load i32, ptr %value, align 4, !dbg !2193
  %lt129 = icmp ult i32 %81, %82, !dbg !2192
  br i1 %lt129, label %if.then130, label %if.exit131, !dbg !2192

if.then130:                                       ; preds = %if.exit124
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var116, align 8, !dbg !2194
  br label %guard_block133, !dbg !2194

if.exit131:                                       ; preds = %if.exit124
  %83 = load i32, ptr %new_value125, align 4, !dbg !2195
  store i32 %83, ptr %blockret117, align 4, !dbg !2195
  br label %expr_block.exit132, !dbg !2195

expr_block.exit132:                               ; preds = %if.exit131, %if.exit123
  br label %noerr_block134, !dbg !2195

guard_block133:                                   ; preds = %if.then130, %if.then122
  %84 = load i64, ptr %error_var116, align 8, !dbg !2195
  store i64 %84, ptr %reterr, align 8, !dbg !2195
  br label %err_retblock, !dbg !2195

noerr_block134:                                   ; preds = %expr_block.exit132
  %85 = load i32, ptr %blockret117, align 4, !dbg !2195
  store i32 %85, ptr %value, align 4, !dbg !2195
  br label %loop.cond72, !dbg !2195

loop.exit135:                                     ; preds = %loop.cond72
  %86 = load i32, ptr %value, align 4, !dbg !2196
  store i32 %86, ptr %blockret, align 4, !dbg !2196
  br label %expr_block.exit136, !dbg !2196

expr_block.exit136:                               ; preds = %loop.exit135, %if.then45
  %87 = load i32, ptr %blockret, align 4, !dbg !2196
  store i32 %87, ptr %0, align 4, !dbg !2196
  ret i64 0, !dbg !2196

err_retblock:                                     ; preds = %guard_block133, %if.then114, %guard_block, %if.then69, %if.then24, %if.then18, %if.then
  %88 = load i64, ptr %reterr, align 8, !dbg !2196
  ret i64 %88, !dbg !2196

panic:                                            ; preds = %if.exit
  store i64 %21, ptr %taddr, align 8
  %89 = insertvalue %any undef, ptr %taddr, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr15, align 8
  %91 = insertvalue %any undef, ptr %taddr15, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %90, ptr %varargslots, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %92, ptr %ptradd16, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.73, i64 7, i32 744, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2105
  unreachable, !dbg !2105

panic28:                                          ; preds = %if.exit25
  store i64 %31, ptr %taddr29, align 8
  %94 = insertvalue %any undef, ptr %taddr29, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr30, align 8
  %96 = insertvalue %any undef, ptr %taddr30, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %95, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %97, ptr %ptradd32, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.73, i64 7, i32 757, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !2120
  unreachable, !dbg !2120

panic49:                                          ; preds = %if.exit46
  store i64 %40, ptr %taddr50, align 8
  %99 = insertvalue %any undef, ptr %taddr50, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr51, align 8
  %101 = insertvalue %any undef, ptr %taddr51, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %100, ptr %varargslots52, align 16
  %ptradd53 = getelementptr inbounds i8, ptr %varargslots52, i64 16
  store %any %102, ptr %ptradd53, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots52, 0
  %"$$temp54" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp54", ptr %indirectarg55, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.73, i64 7, i32 761, ptr byval(%"any[]") align 8 %indirectarg55) #5, !dbg !2129
  unreachable, !dbg !2129

panic79:                                          ; preds = %loop.body73
  store i64 %53, ptr %taddr80, align 8
  %104 = insertvalue %any undef, ptr %taddr80, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %55, ptr %taddr81, align 8
  %106 = insertvalue %any undef, ptr %taddr81, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %105, ptr %varargslots82, align 16
  %ptradd83 = getelementptr inbounds i8, ptr %varargslots82, i64 16
  store %any %107, ptr %ptradd83, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots82, 0
  %"$$temp84" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp84", ptr %indirectarg85, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.73, i64 7, i32 784, ptr byval(%"any[]") align 8 %indirectarg85) #5, !dbg !2158
  unreachable, !dbg !2158
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_ushort(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !2197 {
entry:
  %s = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i16, align 2
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i16, align 2
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr50 = alloca i64, align 8
  %taddr51 = alloca i64, align 8
  %varargslots52 = alloca [2 x %any], align 16
  %indirectarg55 = alloca %"any[]", align 8
  %switch58 = alloca i8, align 1
  %value = alloca i16, align 2
  %c74 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret75 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr80 = alloca i64, align 8
  %taddr81 = alloca i64, align 8
  %varargslots82 = alloca [2 x %any], align 16
  %indirectarg85 = alloca %"any[]", align 8
  %error_var118 = alloca i64, align 8
  %blockret119 = alloca i16, align 2
  %new_value = alloca i16, align 2
  %new_value130 = alloca i16, align 2
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !2200, !DIExpression(), !2201)
  store i32 %3, ptr %base, align 4
    #dbg_declare(ptr %base, !2202, !DIExpression(), !2203)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %s, i32 16, i1 false)
  %4 = load i32, ptr %base, align 4
  store i32 %4, ptr %base1, align 4
  %5 = load i32, ptr %base1, align 4, !dbg !2204
  %le = icmp sle i32 %5, 10, !dbg !2204
  br i1 %le, label %and.rhs, label %and.phi, !dbg !2204

and.rhs:                                          ; preds = %entry
  %6 = load i32, ptr %base1, align 4, !dbg !2208
  %gt = icmp sgt i32 %6, 1, !dbg !2208
  br label %and.phi, !dbg !2208

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !2208
  br i1 %val, label %or.phi, label %or.rhs, !dbg !2208

or.rhs:                                           ; preds = %and.phi
  %7 = load i32, ptr %base1, align 4, !dbg !2209
  %eq = icmp eq i32 %7, 16, !dbg !2209
  br label %or.phi, !dbg !2209

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !2209
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !2209

assert_fail:                                      ; preds = %or.phi
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2204
  call void %8(ptr @.panic_msg.65, i64 79, ptr @.file.18, i64 9, ptr @.func.74, i64 9, i32 734) #5, !dbg !2204
  unreachable, !dbg !2204

assert_ok:                                        ; preds = %or.phi
    #dbg_declare(ptr %len, !2210, !DIExpression(), !2211)
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2212
  %9 = load i64, ptr %ptradd3, align 8, !dbg !2212
  store i64 %9, ptr %len, align 8, !dbg !2212
    #dbg_declare(ptr %index, !2213, !DIExpression(), !2214)
  store i64 0, ptr %index, align 8, !dbg !2215
    #dbg_declare(ptr %ptr, !2216, !DIExpression(), !2217)
  %10 = load ptr, ptr %string, align 8, !dbg !2218
  store ptr %10, ptr %ptr, align 8, !dbg !2218
  br label %loop.cond, !dbg !2219

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %11 = load i64, ptr %index, align 8, !dbg !2220
  %12 = load i64, ptr %len, align 8, !dbg !2222
  %lt = icmp ult i64 %11, %12, !dbg !2220
  br i1 %lt, label %and.rhs4, label %and.phi11, !dbg !2220

and.rhs4:                                         ; preds = %loop.cond
  %13 = load ptr, ptr %ptr, align 8, !dbg !2223
  %14 = load i64, ptr %index, align 8, !dbg !2224
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 %14, !dbg !2224
  %15 = load i8, ptr %ptradd5, align 1
  store i8 %15, ptr %c, align 1
  %16 = load i8, ptr %c, align 1, !dbg !2225
  %eq6 = icmp eq i8 %16, 32, !dbg !2225
  br i1 %eq6, label %or.phi9, label %or.rhs7, !dbg !2225

or.rhs7:                                          ; preds = %and.rhs4
  %17 = load i8, ptr %c, align 1, !dbg !2228
  %eq8 = icmp eq i8 %17, 9, !dbg !2228
  br label %or.phi9, !dbg !2228

or.phi9:                                          ; preds = %or.rhs7, %and.rhs4
  %val10 = phi i1 [ true, %and.rhs4 ], [ %eq8, %or.rhs7 ], !dbg !2228
  br label %and.phi11, !dbg !2228

and.phi11:                                        ; preds = %or.phi9, %loop.cond
  %val12 = phi i1 [ false, %loop.cond ], [ %val10, %or.phi9 ], !dbg !2228
  br i1 %val12, label %loop.body, label %loop.exit, !dbg !2228

loop.body:                                        ; preds = %and.phi11
  %18 = load i64, ptr %index, align 8, !dbg !2229
  %add = add i64 %18, 1, !dbg !2229
  store i64 %add, ptr %index, align 8, !dbg !2229
  br label %loop.cond, !dbg !2229

loop.exit:                                        ; preds = %and.phi11
  %19 = load i64, ptr %len, align 8, !dbg !2230
  %20 = load i64, ptr %index, align 8, !dbg !2231
  %eq13 = icmp eq i64 %19, %20, !dbg !2230
  br i1 %eq13, label %if.then, label %if.exit, !dbg !2230

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !2232
  br label %err_retblock, !dbg !2232

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !2233, !DIExpression(), !2234)
  store i8 0, ptr %is_negative, align 1, !dbg !2234
  %ptradd14 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2235
  %21 = load i64, ptr %ptradd14, align 8, !dbg !2235
  %22 = load ptr, ptr %string, align 8, !dbg !2235
  %23 = load i64, ptr %index, align 8, !dbg !2237
  %ge = icmp uge i64 %23, %21, !dbg !2237
  %24 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2237
  br i1 %24, label %panic, label %checkok, !dbg !2237

checkok:                                          ; preds = %if.exit
  %ptradd17 = getelementptr inbounds i8, ptr %22, i64 %23, !dbg !2237
  %25 = load i8, ptr %ptradd17, align 1
  store i8 %25, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %26 = load i8, ptr %switch, align 1
  switch i8 %26, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case21
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then18, !dbg !2238

if.then18:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$NEGATIVE_VALUE" to i64), ptr %reterr, align 8, !dbg !2240
  br label %err_retblock, !dbg !2240

switch.case21:                                    ; preds = %switch.entry
  %27 = load i64, ptr %index, align 8, !dbg !2241
  %add22 = add i64 %27, 1, !dbg !2241
  store i64 %add22, ptr %index, align 8, !dbg !2241
  br label %switch.exit, !dbg !2241

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !2243

switch.exit:                                      ; preds = %switch.default, %switch.case21
  %28 = load i64, ptr %len, align 8, !dbg !2245
  %29 = load i64, ptr %index, align 8, !dbg !2246
  %eq23 = icmp eq i64 %28, %29, !dbg !2245
  br i1 %eq23, label %if.then24, label %if.exit25, !dbg !2245

if.then24:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2247
  br label %err_retblock, !dbg !2247

if.exit25:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !2248, !DIExpression(), !2249)
  %30 = load i32, ptr %base1, align 4, !dbg !2250
  %trunc = trunc i32 %30 to i16, !dbg !2250
  store i16 %trunc, ptr %base_used, align 2, !dbg !2250
  %ptradd26 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2251
  %31 = load i64, ptr %ptradd26, align 8, !dbg !2251
  %32 = load ptr, ptr %string, align 8, !dbg !2251
  %33 = load i64, ptr %index, align 8, !dbg !2252
  %ge27 = icmp uge i64 %33, %31, !dbg !2252
  %34 = call i1 @llvm.expect.i1(i1 %ge27, i1 false), !dbg !2252
  br i1 %34, label %panic28, label %checkok35, !dbg !2252

checkok35:                                        ; preds = %if.exit25
  %ptradd36 = getelementptr inbounds i8, ptr %32, i64 %33, !dbg !2252
  %35 = load i8, ptr %ptradd36, align 1, !dbg !2252
  %eq37 = icmp eq i8 %35, 48, !dbg !2251
  br i1 %eq37, label %and.rhs38, label %and.phi40, !dbg !2251

and.rhs38:                                        ; preds = %checkok35
  %36 = load i32, ptr %base1, align 4, !dbg !2253
  %eq39 = icmp eq i32 %36, 10, !dbg !2253
  br label %and.phi40, !dbg !2253

and.phi40:                                        ; preds = %and.rhs38, %checkok35
  %val41 = phi i1 [ false, %checkok35 ], [ %eq39, %and.rhs38 ], !dbg !2253
  br i1 %val41, label %if.then42, label %if.exit71, !dbg !2253

if.then42:                                        ; preds = %and.phi40
  %37 = load i64, ptr %index, align 8, !dbg !2254
  %add43 = add i64 %37, 1, !dbg !2254
  store i64 %add43, ptr %index, align 8, !dbg !2254
  %38 = load i64, ptr %index, align 8, !dbg !2256
  %39 = load i64, ptr %len, align 8, !dbg !2257
  %eq44 = icmp eq i64 %38, %39, !dbg !2256
  br i1 %eq44, label %if.then45, label %if.exit46, !dbg !2256

if.then45:                                        ; preds = %if.then42
  store i16 0, ptr %blockret, align 2, !dbg !2258
  br label %expr_block.exit144, !dbg !2258

if.exit46:                                        ; preds = %if.then42
  %ptradd47 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2259
  %40 = load i64, ptr %ptradd47, align 8, !dbg !2259
  %41 = load ptr, ptr %string, align 8, !dbg !2259
  %42 = load i64, ptr %index, align 8, !dbg !2261
  %ge48 = icmp uge i64 %42, %40, !dbg !2261
  %43 = call i1 @llvm.expect.i1(i1 %ge48, i1 false), !dbg !2261
  br i1 %43, label %panic49, label %checkok56, !dbg !2261

checkok56:                                        ; preds = %if.exit46
  %ptradd57 = getelementptr inbounds i8, ptr %41, i64 %42, !dbg !2261
  %44 = load i8, ptr %ptradd57, align 1
  store i8 %44, ptr %switch58, align 1
  br label %switch.entry59

switch.entry59:                                   ; preds = %checkok56
  %45 = load i8, ptr %switch58, align 1
  switch i8 %45, label %switch.default66 [
    i8 120, label %switch.case60
    i8 88, label %switch.case60
    i8 98, label %switch.case62
    i8 66, label %switch.case62
    i8 111, label %switch.case64
    i8 79, label %switch.case64
  ]

switch.case60:                                    ; preds = %switch.entry59, %switch.entry59
  store i16 16, ptr %base_used, align 2, !dbg !2262
  %46 = load i64, ptr %index, align 8, !dbg !2264
  %add61 = add i64 %46, 1, !dbg !2264
  store i64 %add61, ptr %index, align 8, !dbg !2264
  br label %switch.exit67, !dbg !2264

switch.case62:                                    ; preds = %switch.entry59, %switch.entry59
  store i16 2, ptr %base_used, align 2, !dbg !2265
  %47 = load i64, ptr %index, align 8, !dbg !2267
  %add63 = add i64 %47, 1, !dbg !2267
  store i64 %add63, ptr %index, align 8, !dbg !2267
  br label %switch.exit67, !dbg !2267

switch.case64:                                    ; preds = %switch.entry59, %switch.entry59
  store i16 8, ptr %base_used, align 2, !dbg !2268
  %48 = load i64, ptr %index, align 8, !dbg !2270
  %add65 = add i64 %48, 1, !dbg !2270
  store i64 %add65, ptr %index, align 8, !dbg !2270
  br label %switch.exit67, !dbg !2270

switch.default66:                                 ; preds = %switch.entry59
  br label %switch.exit67, !dbg !2271

switch.exit67:                                    ; preds = %switch.default66, %switch.case64, %switch.case62, %switch.case60
  %49 = load i64, ptr %len, align 8, !dbg !2273
  %50 = load i64, ptr %index, align 8, !dbg !2274
  %eq68 = icmp eq i64 %49, %50, !dbg !2273
  br i1 %eq68, label %if.then69, label %if.exit70, !dbg !2273

if.then69:                                        ; preds = %switch.exit67
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2275
  br label %err_retblock, !dbg !2275

if.exit70:                                        ; preds = %switch.exit67
  br label %if.exit71, !dbg !2275

if.exit71:                                        ; preds = %if.exit70, %and.phi40
    #dbg_declare(ptr %value, !2276, !DIExpression(), !2277)
  store i16 0, ptr %value, align 2, !dbg !2278
  br label %loop.cond72, !dbg !2279

loop.cond72:                                      ; preds = %noerr_block142, %if.exit71
  %51 = load i64, ptr %index, align 8, !dbg !2280
  %52 = load i64, ptr %len, align 8, !dbg !2282
  %neq = icmp ne i64 %51, %52, !dbg !2280
  br i1 %neq, label %loop.body73, label %loop.exit143, !dbg !2280

loop.body73:                                      ; preds = %loop.cond72
    #dbg_declare(ptr %c74, !2283, !DIExpression(), !2285)
    #dbg_declare(ptr %ch, !2286, !DIExpression(), !2288)
  %ptradd76 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2289
  %53 = load i64, ptr %ptradd76, align 8, !dbg !2289
  %54 = load ptr, ptr %string, align 8, !dbg !2289
  %55 = load i64, ptr %index, align 8, !dbg !2290
  %add77 = add i64 %55, 1, !dbg !2290
  store i64 %add77, ptr %index, align 8, !dbg !2290
  %ge78 = icmp uge i64 %55, %53, !dbg !2290
  %56 = call i1 @llvm.expect.i1(i1 %ge78, i1 false), !dbg !2290
  br i1 %56, label %panic79, label %checkok86, !dbg !2290

checkok86:                                        ; preds = %loop.body73
  %ptradd87 = getelementptr inbounds i8, ptr %54, i64 %55, !dbg !2290
  %57 = load i8, ptr %ptradd87, align 1, !dbg !2290
  store i8 %57, ptr %ch, align 1, !dbg !2290
  %58 = load i16, ptr %base_used, align 2, !dbg !2291
  %zext = zext i16 %58 to i32, !dbg !2291
  %neq88 = icmp ne i32 16, %zext, !dbg !2291
  br i1 %neq88, label %or.phi91, label %or.rhs89, !dbg !2291

or.rhs89:                                         ; preds = %checkok86
  %59 = load i8, ptr %ch, align 1, !dbg !2292
  %lt90 = icmp ult i8 %59, 65, !dbg !2292
  br label %or.phi91, !dbg !2292

or.phi91:                                         ; preds = %or.rhs89, %checkok86
  %val92 = phi i1 [ true, %checkok86 ], [ %lt90, %or.rhs89 ], !dbg !2292
  br i1 %val92, label %if.then93, label %if.exit96, !dbg !2292

if.then93:                                        ; preds = %or.phi91
  %60 = load i8, ptr %ch, align 1, !dbg !2293
  %zext94 = zext i8 %60 to i32, !dbg !2293
  %sub = sub i32 %zext94, 48, !dbg !2294
  %trunc95 = trunc i32 %sub to i8, !dbg !2294
  store i8 %trunc95, ptr %blockret75, align 1, !dbg !2294
  br label %expr_block.exit, !dbg !2294

if.exit96:                                        ; preds = %or.phi91
  %61 = load i8, ptr %ch, align 1, !dbg !2295
  %le97 = icmp ule i8 %61, 70, !dbg !2295
  br i1 %le97, label %if.then98, label %if.exit103, !dbg !2295

if.then98:                                        ; preds = %if.exit96
  %62 = load i8, ptr %ch, align 1, !dbg !2296
  %zext99 = zext i8 %62 to i32, !dbg !2296
  %sub100 = sub i32 %zext99, 65, !dbg !2296
  %add101 = add i32 %sub100, 10, !dbg !2297
  %trunc102 = trunc i32 %add101 to i8, !dbg !2297
  store i8 %trunc102, ptr %blockret75, align 1, !dbg !2297
  br label %expr_block.exit, !dbg !2297

if.exit103:                                       ; preds = %if.exit96
  %63 = load i8, ptr %ch, align 1, !dbg !2298
  %lt104 = icmp ult i8 %63, 97, !dbg !2298
  br i1 %lt104, label %if.then105, label %if.exit106, !dbg !2298

if.then105:                                       ; preds = %if.exit103
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !2299
  br label %guard_block, !dbg !2299

if.exit106:                                       ; preds = %if.exit103
  %64 = load i8, ptr %ch, align 1, !dbg !2300
  %gt107 = icmp ugt i8 %64, 102, !dbg !2300
  br i1 %gt107, label %if.then108, label %if.exit109, !dbg !2300

if.then108:                                       ; preds = %if.exit106
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !2301
  br label %guard_block, !dbg !2301

if.exit109:                                       ; preds = %if.exit106
  %65 = load i8, ptr %ch, align 1, !dbg !2302
  %zext110 = zext i8 %65 to i32, !dbg !2302
  %sub111 = sub i32 %zext110, 97, !dbg !2302
  %add112 = add i32 %sub111, 10, !dbg !2303
  %trunc113 = trunc i32 %add112 to i8, !dbg !2303
  store i8 %trunc113, ptr %blockret75, align 1, !dbg !2303
  br label %expr_block.exit, !dbg !2303

expr_block.exit:                                  ; preds = %if.exit109, %if.then98, %if.then93
  br label %noerr_block, !dbg !2303

guard_block:                                      ; preds = %if.then108, %if.then105
  %66 = load i64, ptr %error_var, align 8, !dbg !2303
  store i64 %66, ptr %reterr, align 8, !dbg !2303
  br label %err_retblock, !dbg !2303

noerr_block:                                      ; preds = %expr_block.exit
  %67 = load i8, ptr %blockret75, align 1, !dbg !2303
  store i8 %67, ptr %c74, align 1, !dbg !2303
  %68 = load i8, ptr %c74, align 1, !dbg !2304
  %zext114 = zext i8 %68 to i16, !dbg !2304
  %69 = load i16, ptr %base_used, align 2, !dbg !2305
  %ge115 = icmp uge i16 %zext114, %69, !dbg !2304
  br i1 %ge115, label %if.then116, label %if.exit117, !dbg !2304

if.then116:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2306
  br label %err_retblock, !dbg !2306

if.exit117:                                       ; preds = %noerr_block
  %70 = load i8, ptr %is_negative, align 1, !dbg !2307
  %71 = trunc i8 %70 to i1, !dbg !2307
  br i1 %71, label %if.then120, label %if.exit129, !dbg !2307

if.then120:                                       ; preds = %if.exit117
    #dbg_declare(ptr %new_value, !2309, !DIExpression(), !2311)
  %72 = load i16, ptr %value, align 2, !dbg !2312
  %zext121 = zext i16 %72 to i32, !dbg !2312
  %73 = load i16, ptr %base_used, align 2, !dbg !2313
  %zext122 = zext i16 %73 to i32, !dbg !2313
  %mul = mul i32 %zext121, %zext122, !dbg !2312
  %74 = load i8, ptr %c74, align 1, !dbg !2314
  %zext123 = zext i8 %74 to i32, !dbg !2314
  %sub124 = sub i32 %mul, %zext123, !dbg !2312
  %trunc125 = trunc i32 %sub124 to i16, !dbg !2312
  store i16 %trunc125, ptr %new_value, align 2, !dbg !2312
  %75 = load i16, ptr %new_value, align 2, !dbg !2315
  %76 = load i16, ptr %value, align 2, !dbg !2316
  %gt126 = icmp ugt i16 %75, %76, !dbg !2315
  br i1 %gt126, label %if.then127, label %if.exit128, !dbg !2315

if.then127:                                       ; preds = %if.then120
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var118, align 8, !dbg !2317
  br label %guard_block141, !dbg !2317

if.exit128:                                       ; preds = %if.then120
  %77 = load i16, ptr %new_value, align 2, !dbg !2318
  store i16 %77, ptr %blockret119, align 2, !dbg !2318
  br label %expr_block.exit140, !dbg !2318

if.exit129:                                       ; preds = %if.exit117
    #dbg_declare(ptr %new_value130, !2319, !DIExpression(), !2320)
  %78 = load i16, ptr %value, align 2, !dbg !2321
  %zext131 = zext i16 %78 to i32, !dbg !2321
  %79 = load i16, ptr %base_used, align 2, !dbg !2322
  %zext132 = zext i16 %79 to i32, !dbg !2322
  %mul133 = mul i32 %zext131, %zext132, !dbg !2321
  %80 = load i8, ptr %c74, align 1, !dbg !2323
  %zext134 = zext i8 %80 to i32, !dbg !2323
  %add135 = add i32 %mul133, %zext134, !dbg !2321
  %trunc136 = trunc i32 %add135 to i16, !dbg !2321
  store i16 %trunc136, ptr %new_value130, align 2, !dbg !2321
  %81 = load i16, ptr %new_value130, align 2, !dbg !2324
  %82 = load i16, ptr %value, align 2, !dbg !2325
  %lt137 = icmp ult i16 %81, %82, !dbg !2324
  br i1 %lt137, label %if.then138, label %if.exit139, !dbg !2324

if.then138:                                       ; preds = %if.exit129
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var118, align 8, !dbg !2326
  br label %guard_block141, !dbg !2326

if.exit139:                                       ; preds = %if.exit129
  %83 = load i16, ptr %new_value130, align 2, !dbg !2327
  store i16 %83, ptr %blockret119, align 2, !dbg !2327
  br label %expr_block.exit140, !dbg !2327

expr_block.exit140:                               ; preds = %if.exit139, %if.exit128
  br label %noerr_block142, !dbg !2327

guard_block141:                                   ; preds = %if.then138, %if.then127
  %84 = load i64, ptr %error_var118, align 8, !dbg !2327
  store i64 %84, ptr %reterr, align 8, !dbg !2327
  br label %err_retblock, !dbg !2327

noerr_block142:                                   ; preds = %expr_block.exit140
  %85 = load i16, ptr %blockret119, align 2, !dbg !2327
  store i16 %85, ptr %value, align 2, !dbg !2327
  br label %loop.cond72, !dbg !2327

loop.exit143:                                     ; preds = %loop.cond72
  %86 = load i16, ptr %value, align 2, !dbg !2328
  store i16 %86, ptr %blockret, align 2, !dbg !2328
  br label %expr_block.exit144, !dbg !2328

expr_block.exit144:                               ; preds = %loop.exit143, %if.then45
  %87 = load i16, ptr %blockret, align 2, !dbg !2328
  store i16 %87, ptr %0, align 2, !dbg !2328
  ret i64 0, !dbg !2328

err_retblock:                                     ; preds = %guard_block141, %if.then116, %guard_block, %if.then69, %if.then24, %if.then18, %if.then
  %88 = load i64, ptr %reterr, align 8, !dbg !2328
  ret i64 %88, !dbg !2328

panic:                                            ; preds = %if.exit
  store i64 %21, ptr %taddr, align 8
  %89 = insertvalue %any undef, ptr %taddr, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr15, align 8
  %91 = insertvalue %any undef, ptr %taddr15, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %90, ptr %varargslots, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %92, ptr %ptradd16, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.74, i64 9, i32 744, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2237
  unreachable, !dbg !2237

panic28:                                          ; preds = %if.exit25
  store i64 %31, ptr %taddr29, align 8
  %94 = insertvalue %any undef, ptr %taddr29, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr30, align 8
  %96 = insertvalue %any undef, ptr %taddr30, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %95, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %97, ptr %ptradd32, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.74, i64 9, i32 757, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !2252
  unreachable, !dbg !2252

panic49:                                          ; preds = %if.exit46
  store i64 %40, ptr %taddr50, align 8
  %99 = insertvalue %any undef, ptr %taddr50, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr51, align 8
  %101 = insertvalue %any undef, ptr %taddr51, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %100, ptr %varargslots52, align 16
  %ptradd53 = getelementptr inbounds i8, ptr %varargslots52, i64 16
  store %any %102, ptr %ptradd53, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots52, 0
  %"$$temp54" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp54", ptr %indirectarg55, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.74, i64 9, i32 761, ptr byval(%"any[]") align 8 %indirectarg55) #5, !dbg !2261
  unreachable, !dbg !2261

panic79:                                          ; preds = %loop.body73
  store i64 %53, ptr %taddr80, align 8
  %104 = insertvalue %any undef, ptr %taddr80, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %55, ptr %taddr81, align 8
  %106 = insertvalue %any undef, ptr %taddr81, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %105, ptr %varargslots82, align 16
  %ptradd83 = getelementptr inbounds i8, ptr %varargslots82, i64 16
  store %any %107, ptr %ptradd83, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots82, 0
  %"$$temp84" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp84", ptr %indirectarg85, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.74, i64 9, i32 784, ptr byval(%"any[]") align 8 %indirectarg85) #5, !dbg !2290
  unreachable, !dbg !2290
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_uchar(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !2329 {
entry:
  %s = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i8, align 1
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i8, align 1
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr50 = alloca i64, align 8
  %taddr51 = alloca i64, align 8
  %varargslots52 = alloca [2 x %any], align 16
  %indirectarg55 = alloca %"any[]", align 8
  %switch58 = alloca i8, align 1
  %value = alloca i8, align 1
  %c74 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret75 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr80 = alloca i64, align 8
  %taddr81 = alloca i64, align 8
  %varargslots82 = alloca [2 x %any], align 16
  %indirectarg85 = alloca %"any[]", align 8
  %error_var117 = alloca i64, align 8
  %blockret118 = alloca i8, align 1
  %new_value = alloca i8, align 1
  %new_value129 = alloca i8, align 1
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !2332, !DIExpression(), !2333)
  store i32 %3, ptr %base, align 4
    #dbg_declare(ptr %base, !2334, !DIExpression(), !2335)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %s, i32 16, i1 false)
  %4 = load i32, ptr %base, align 4
  store i32 %4, ptr %base1, align 4
  %5 = load i32, ptr %base1, align 4, !dbg !2336
  %le = icmp sle i32 %5, 10, !dbg !2336
  br i1 %le, label %and.rhs, label %and.phi, !dbg !2336

and.rhs:                                          ; preds = %entry
  %6 = load i32, ptr %base1, align 4, !dbg !2340
  %gt = icmp sgt i32 %6, 1, !dbg !2340
  br label %and.phi, !dbg !2340

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !2340
  br i1 %val, label %or.phi, label %or.rhs, !dbg !2340

or.rhs:                                           ; preds = %and.phi
  %7 = load i32, ptr %base1, align 4, !dbg !2341
  %eq = icmp eq i32 %7, 16, !dbg !2341
  br label %or.phi, !dbg !2341

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !2341
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !2341

assert_fail:                                      ; preds = %or.phi
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2336
  call void %8(ptr @.panic_msg.65, i64 79, ptr @.file.18, i64 9, ptr @.func.75, i64 8, i32 734) #5, !dbg !2336
  unreachable, !dbg !2336

assert_ok:                                        ; preds = %or.phi
    #dbg_declare(ptr %len, !2342, !DIExpression(), !2343)
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2344
  %9 = load i64, ptr %ptradd3, align 8, !dbg !2344
  store i64 %9, ptr %len, align 8, !dbg !2344
    #dbg_declare(ptr %index, !2345, !DIExpression(), !2346)
  store i64 0, ptr %index, align 8, !dbg !2347
    #dbg_declare(ptr %ptr, !2348, !DIExpression(), !2349)
  %10 = load ptr, ptr %string, align 8, !dbg !2350
  store ptr %10, ptr %ptr, align 8, !dbg !2350
  br label %loop.cond, !dbg !2351

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %11 = load i64, ptr %index, align 8, !dbg !2352
  %12 = load i64, ptr %len, align 8, !dbg !2354
  %lt = icmp ult i64 %11, %12, !dbg !2352
  br i1 %lt, label %and.rhs4, label %and.phi11, !dbg !2352

and.rhs4:                                         ; preds = %loop.cond
  %13 = load ptr, ptr %ptr, align 8, !dbg !2355
  %14 = load i64, ptr %index, align 8, !dbg !2356
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 %14, !dbg !2356
  %15 = load i8, ptr %ptradd5, align 1
  store i8 %15, ptr %c, align 1
  %16 = load i8, ptr %c, align 1, !dbg !2357
  %eq6 = icmp eq i8 %16, 32, !dbg !2357
  br i1 %eq6, label %or.phi9, label %or.rhs7, !dbg !2357

or.rhs7:                                          ; preds = %and.rhs4
  %17 = load i8, ptr %c, align 1, !dbg !2360
  %eq8 = icmp eq i8 %17, 9, !dbg !2360
  br label %or.phi9, !dbg !2360

or.phi9:                                          ; preds = %or.rhs7, %and.rhs4
  %val10 = phi i1 [ true, %and.rhs4 ], [ %eq8, %or.rhs7 ], !dbg !2360
  br label %and.phi11, !dbg !2360

and.phi11:                                        ; preds = %or.phi9, %loop.cond
  %val12 = phi i1 [ false, %loop.cond ], [ %val10, %or.phi9 ], !dbg !2360
  br i1 %val12, label %loop.body, label %loop.exit, !dbg !2360

loop.body:                                        ; preds = %and.phi11
  %18 = load i64, ptr %index, align 8, !dbg !2361
  %add = add i64 %18, 1, !dbg !2361
  store i64 %add, ptr %index, align 8, !dbg !2361
  br label %loop.cond, !dbg !2361

loop.exit:                                        ; preds = %and.phi11
  %19 = load i64, ptr %len, align 8, !dbg !2362
  %20 = load i64, ptr %index, align 8, !dbg !2363
  %eq13 = icmp eq i64 %19, %20, !dbg !2362
  br i1 %eq13, label %if.then, label %if.exit, !dbg !2362

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !2364
  br label %err_retblock, !dbg !2364

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !2365, !DIExpression(), !2366)
  store i8 0, ptr %is_negative, align 1, !dbg !2366
  %ptradd14 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2367
  %21 = load i64, ptr %ptradd14, align 8, !dbg !2367
  %22 = load ptr, ptr %string, align 8, !dbg !2367
  %23 = load i64, ptr %index, align 8, !dbg !2369
  %ge = icmp uge i64 %23, %21, !dbg !2369
  %24 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2369
  br i1 %24, label %panic, label %checkok, !dbg !2369

checkok:                                          ; preds = %if.exit
  %ptradd17 = getelementptr inbounds i8, ptr %22, i64 %23, !dbg !2369
  %25 = load i8, ptr %ptradd17, align 1
  store i8 %25, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %26 = load i8, ptr %switch, align 1
  switch i8 %26, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case21
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then18, !dbg !2370

if.then18:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$NEGATIVE_VALUE" to i64), ptr %reterr, align 8, !dbg !2372
  br label %err_retblock, !dbg !2372

switch.case21:                                    ; preds = %switch.entry
  %27 = load i64, ptr %index, align 8, !dbg !2373
  %add22 = add i64 %27, 1, !dbg !2373
  store i64 %add22, ptr %index, align 8, !dbg !2373
  br label %switch.exit, !dbg !2373

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !2375

switch.exit:                                      ; preds = %switch.default, %switch.case21
  %28 = load i64, ptr %len, align 8, !dbg !2377
  %29 = load i64, ptr %index, align 8, !dbg !2378
  %eq23 = icmp eq i64 %28, %29, !dbg !2377
  br i1 %eq23, label %if.then24, label %if.exit25, !dbg !2377

if.then24:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2379
  br label %err_retblock, !dbg !2379

if.exit25:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !2380, !DIExpression(), !2381)
  %30 = load i32, ptr %base1, align 4, !dbg !2382
  %trunc = trunc i32 %30 to i8, !dbg !2382
  store i8 %trunc, ptr %base_used, align 1, !dbg !2382
  %ptradd26 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2383
  %31 = load i64, ptr %ptradd26, align 8, !dbg !2383
  %32 = load ptr, ptr %string, align 8, !dbg !2383
  %33 = load i64, ptr %index, align 8, !dbg !2384
  %ge27 = icmp uge i64 %33, %31, !dbg !2384
  %34 = call i1 @llvm.expect.i1(i1 %ge27, i1 false), !dbg !2384
  br i1 %34, label %panic28, label %checkok35, !dbg !2384

checkok35:                                        ; preds = %if.exit25
  %ptradd36 = getelementptr inbounds i8, ptr %32, i64 %33, !dbg !2384
  %35 = load i8, ptr %ptradd36, align 1, !dbg !2384
  %eq37 = icmp eq i8 %35, 48, !dbg !2383
  br i1 %eq37, label %and.rhs38, label %and.phi40, !dbg !2383

and.rhs38:                                        ; preds = %checkok35
  %36 = load i32, ptr %base1, align 4, !dbg !2385
  %eq39 = icmp eq i32 %36, 10, !dbg !2385
  br label %and.phi40, !dbg !2385

and.phi40:                                        ; preds = %and.rhs38, %checkok35
  %val41 = phi i1 [ false, %checkok35 ], [ %eq39, %and.rhs38 ], !dbg !2385
  br i1 %val41, label %if.then42, label %if.exit71, !dbg !2385

if.then42:                                        ; preds = %and.phi40
  %37 = load i64, ptr %index, align 8, !dbg !2386
  %add43 = add i64 %37, 1, !dbg !2386
  store i64 %add43, ptr %index, align 8, !dbg !2386
  %38 = load i64, ptr %index, align 8, !dbg !2388
  %39 = load i64, ptr %len, align 8, !dbg !2389
  %eq44 = icmp eq i64 %38, %39, !dbg !2388
  br i1 %eq44, label %if.then45, label %if.exit46, !dbg !2388

if.then45:                                        ; preds = %if.then42
  store i8 0, ptr %blockret, align 1, !dbg !2390
  br label %expr_block.exit143, !dbg !2390

if.exit46:                                        ; preds = %if.then42
  %ptradd47 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2391
  %40 = load i64, ptr %ptradd47, align 8, !dbg !2391
  %41 = load ptr, ptr %string, align 8, !dbg !2391
  %42 = load i64, ptr %index, align 8, !dbg !2393
  %ge48 = icmp uge i64 %42, %40, !dbg !2393
  %43 = call i1 @llvm.expect.i1(i1 %ge48, i1 false), !dbg !2393
  br i1 %43, label %panic49, label %checkok56, !dbg !2393

checkok56:                                        ; preds = %if.exit46
  %ptradd57 = getelementptr inbounds i8, ptr %41, i64 %42, !dbg !2393
  %44 = load i8, ptr %ptradd57, align 1
  store i8 %44, ptr %switch58, align 1
  br label %switch.entry59

switch.entry59:                                   ; preds = %checkok56
  %45 = load i8, ptr %switch58, align 1
  switch i8 %45, label %switch.default66 [
    i8 120, label %switch.case60
    i8 88, label %switch.case60
    i8 98, label %switch.case62
    i8 66, label %switch.case62
    i8 111, label %switch.case64
    i8 79, label %switch.case64
  ]

switch.case60:                                    ; preds = %switch.entry59, %switch.entry59
  store i8 16, ptr %base_used, align 1, !dbg !2394
  %46 = load i64, ptr %index, align 8, !dbg !2396
  %add61 = add i64 %46, 1, !dbg !2396
  store i64 %add61, ptr %index, align 8, !dbg !2396
  br label %switch.exit67, !dbg !2396

switch.case62:                                    ; preds = %switch.entry59, %switch.entry59
  store i8 2, ptr %base_used, align 1, !dbg !2397
  %47 = load i64, ptr %index, align 8, !dbg !2399
  %add63 = add i64 %47, 1, !dbg !2399
  store i64 %add63, ptr %index, align 8, !dbg !2399
  br label %switch.exit67, !dbg !2399

switch.case64:                                    ; preds = %switch.entry59, %switch.entry59
  store i8 8, ptr %base_used, align 1, !dbg !2400
  %48 = load i64, ptr %index, align 8, !dbg !2402
  %add65 = add i64 %48, 1, !dbg !2402
  store i64 %add65, ptr %index, align 8, !dbg !2402
  br label %switch.exit67, !dbg !2402

switch.default66:                                 ; preds = %switch.entry59
  br label %switch.exit67, !dbg !2403

switch.exit67:                                    ; preds = %switch.default66, %switch.case64, %switch.case62, %switch.case60
  %49 = load i64, ptr %len, align 8, !dbg !2405
  %50 = load i64, ptr %index, align 8, !dbg !2406
  %eq68 = icmp eq i64 %49, %50, !dbg !2405
  br i1 %eq68, label %if.then69, label %if.exit70, !dbg !2405

if.then69:                                        ; preds = %switch.exit67
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2407
  br label %err_retblock, !dbg !2407

if.exit70:                                        ; preds = %switch.exit67
  br label %if.exit71, !dbg !2407

if.exit71:                                        ; preds = %if.exit70, %and.phi40
    #dbg_declare(ptr %value, !2408, !DIExpression(), !2409)
  store i8 0, ptr %value, align 1, !dbg !2410
  br label %loop.cond72, !dbg !2411

loop.cond72:                                      ; preds = %noerr_block141, %if.exit71
  %51 = load i64, ptr %index, align 8, !dbg !2412
  %52 = load i64, ptr %len, align 8, !dbg !2414
  %neq = icmp ne i64 %51, %52, !dbg !2412
  br i1 %neq, label %loop.body73, label %loop.exit142, !dbg !2412

loop.body73:                                      ; preds = %loop.cond72
    #dbg_declare(ptr %c74, !2415, !DIExpression(), !2417)
    #dbg_declare(ptr %ch, !2418, !DIExpression(), !2420)
  %ptradd76 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2421
  %53 = load i64, ptr %ptradd76, align 8, !dbg !2421
  %54 = load ptr, ptr %string, align 8, !dbg !2421
  %55 = load i64, ptr %index, align 8, !dbg !2422
  %add77 = add i64 %55, 1, !dbg !2422
  store i64 %add77, ptr %index, align 8, !dbg !2422
  %ge78 = icmp uge i64 %55, %53, !dbg !2422
  %56 = call i1 @llvm.expect.i1(i1 %ge78, i1 false), !dbg !2422
  br i1 %56, label %panic79, label %checkok86, !dbg !2422

checkok86:                                        ; preds = %loop.body73
  %ptradd87 = getelementptr inbounds i8, ptr %54, i64 %55, !dbg !2422
  %57 = load i8, ptr %ptradd87, align 1, !dbg !2422
  store i8 %57, ptr %ch, align 1, !dbg !2422
  %58 = load i8, ptr %base_used, align 1, !dbg !2423
  %zext = zext i8 %58 to i32, !dbg !2423
  %neq88 = icmp ne i32 16, %zext, !dbg !2423
  br i1 %neq88, label %or.phi91, label %or.rhs89, !dbg !2423

or.rhs89:                                         ; preds = %checkok86
  %59 = load i8, ptr %ch, align 1, !dbg !2424
  %lt90 = icmp ult i8 %59, 65, !dbg !2424
  br label %or.phi91, !dbg !2424

or.phi91:                                         ; preds = %or.rhs89, %checkok86
  %val92 = phi i1 [ true, %checkok86 ], [ %lt90, %or.rhs89 ], !dbg !2424
  br i1 %val92, label %if.then93, label %if.exit96, !dbg !2424

if.then93:                                        ; preds = %or.phi91
  %60 = load i8, ptr %ch, align 1, !dbg !2425
  %zext94 = zext i8 %60 to i32, !dbg !2425
  %sub = sub i32 %zext94, 48, !dbg !2426
  %trunc95 = trunc i32 %sub to i8, !dbg !2426
  store i8 %trunc95, ptr %blockret75, align 1, !dbg !2426
  br label %expr_block.exit, !dbg !2426

if.exit96:                                        ; preds = %or.phi91
  %61 = load i8, ptr %ch, align 1, !dbg !2427
  %le97 = icmp ule i8 %61, 70, !dbg !2427
  br i1 %le97, label %if.then98, label %if.exit103, !dbg !2427

if.then98:                                        ; preds = %if.exit96
  %62 = load i8, ptr %ch, align 1, !dbg !2428
  %zext99 = zext i8 %62 to i32, !dbg !2428
  %sub100 = sub i32 %zext99, 65, !dbg !2428
  %add101 = add i32 %sub100, 10, !dbg !2429
  %trunc102 = trunc i32 %add101 to i8, !dbg !2429
  store i8 %trunc102, ptr %blockret75, align 1, !dbg !2429
  br label %expr_block.exit, !dbg !2429

if.exit103:                                       ; preds = %if.exit96
  %63 = load i8, ptr %ch, align 1, !dbg !2430
  %lt104 = icmp ult i8 %63, 97, !dbg !2430
  br i1 %lt104, label %if.then105, label %if.exit106, !dbg !2430

if.then105:                                       ; preds = %if.exit103
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !2431
  br label %guard_block, !dbg !2431

if.exit106:                                       ; preds = %if.exit103
  %64 = load i8, ptr %ch, align 1, !dbg !2432
  %gt107 = icmp ugt i8 %64, 102, !dbg !2432
  br i1 %gt107, label %if.then108, label %if.exit109, !dbg !2432

if.then108:                                       ; preds = %if.exit106
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !2433
  br label %guard_block, !dbg !2433

if.exit109:                                       ; preds = %if.exit106
  %65 = load i8, ptr %ch, align 1, !dbg !2434
  %zext110 = zext i8 %65 to i32, !dbg !2434
  %sub111 = sub i32 %zext110, 97, !dbg !2434
  %add112 = add i32 %sub111, 10, !dbg !2435
  %trunc113 = trunc i32 %add112 to i8, !dbg !2435
  store i8 %trunc113, ptr %blockret75, align 1, !dbg !2435
  br label %expr_block.exit, !dbg !2435

expr_block.exit:                                  ; preds = %if.exit109, %if.then98, %if.then93
  br label %noerr_block, !dbg !2435

guard_block:                                      ; preds = %if.then108, %if.then105
  %66 = load i64, ptr %error_var, align 8, !dbg !2435
  store i64 %66, ptr %reterr, align 8, !dbg !2435
  br label %err_retblock, !dbg !2435

noerr_block:                                      ; preds = %expr_block.exit
  %67 = load i8, ptr %blockret75, align 1, !dbg !2435
  store i8 %67, ptr %c74, align 1, !dbg !2435
  %68 = load i8, ptr %c74, align 1, !dbg !2436
  %69 = load i8, ptr %base_used, align 1, !dbg !2437
  %ge114 = icmp uge i8 %68, %69, !dbg !2436
  br i1 %ge114, label %if.then115, label %if.exit116, !dbg !2436

if.then115:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2438
  br label %err_retblock, !dbg !2438

if.exit116:                                       ; preds = %noerr_block
  %70 = load i8, ptr %is_negative, align 1, !dbg !2439
  %71 = trunc i8 %70 to i1, !dbg !2439
  br i1 %71, label %if.then119, label %if.exit128, !dbg !2439

if.then119:                                       ; preds = %if.exit116
    #dbg_declare(ptr %new_value, !2441, !DIExpression(), !2443)
  %72 = load i8, ptr %value, align 1, !dbg !2444
  %zext120 = zext i8 %72 to i32, !dbg !2444
  %73 = load i8, ptr %base_used, align 1, !dbg !2445
  %zext121 = zext i8 %73 to i32, !dbg !2445
  %mul = mul i32 %zext120, %zext121, !dbg !2444
  %74 = load i8, ptr %c74, align 1, !dbg !2446
  %zext122 = zext i8 %74 to i32, !dbg !2446
  %sub123 = sub i32 %mul, %zext122, !dbg !2444
  %trunc124 = trunc i32 %sub123 to i8, !dbg !2444
  store i8 %trunc124, ptr %new_value, align 1, !dbg !2444
  %75 = load i8, ptr %new_value, align 1, !dbg !2447
  %76 = load i8, ptr %value, align 1, !dbg !2448
  %gt125 = icmp ugt i8 %75, %76, !dbg !2447
  br i1 %gt125, label %if.then126, label %if.exit127, !dbg !2447

if.then126:                                       ; preds = %if.then119
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var117, align 8, !dbg !2449
  br label %guard_block140, !dbg !2449

if.exit127:                                       ; preds = %if.then119
  %77 = load i8, ptr %new_value, align 1, !dbg !2450
  store i8 %77, ptr %blockret118, align 1, !dbg !2450
  br label %expr_block.exit139, !dbg !2450

if.exit128:                                       ; preds = %if.exit116
    #dbg_declare(ptr %new_value129, !2451, !DIExpression(), !2452)
  %78 = load i8, ptr %value, align 1, !dbg !2453
  %zext130 = zext i8 %78 to i32, !dbg !2453
  %79 = load i8, ptr %base_used, align 1, !dbg !2454
  %zext131 = zext i8 %79 to i32, !dbg !2454
  %mul132 = mul i32 %zext130, %zext131, !dbg !2453
  %80 = load i8, ptr %c74, align 1, !dbg !2455
  %zext133 = zext i8 %80 to i32, !dbg !2455
  %add134 = add i32 %mul132, %zext133, !dbg !2453
  %trunc135 = trunc i32 %add134 to i8, !dbg !2453
  store i8 %trunc135, ptr %new_value129, align 1, !dbg !2453
  %81 = load i8, ptr %new_value129, align 1, !dbg !2456
  %82 = load i8, ptr %value, align 1, !dbg !2457
  %lt136 = icmp ult i8 %81, %82, !dbg !2456
  br i1 %lt136, label %if.then137, label %if.exit138, !dbg !2456

if.then137:                                       ; preds = %if.exit128
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var117, align 8, !dbg !2458
  br label %guard_block140, !dbg !2458

if.exit138:                                       ; preds = %if.exit128
  %83 = load i8, ptr %new_value129, align 1, !dbg !2459
  store i8 %83, ptr %blockret118, align 1, !dbg !2459
  br label %expr_block.exit139, !dbg !2459

expr_block.exit139:                               ; preds = %if.exit138, %if.exit127
  br label %noerr_block141, !dbg !2459

guard_block140:                                   ; preds = %if.then137, %if.then126
  %84 = load i64, ptr %error_var117, align 8, !dbg !2459
  store i64 %84, ptr %reterr, align 8, !dbg !2459
  br label %err_retblock, !dbg !2459

noerr_block141:                                   ; preds = %expr_block.exit139
  %85 = load i8, ptr %blockret118, align 1, !dbg !2459
  store i8 %85, ptr %value, align 1, !dbg !2459
  br label %loop.cond72, !dbg !2459

loop.exit142:                                     ; preds = %loop.cond72
  %86 = load i8, ptr %value, align 1, !dbg !2460
  store i8 %86, ptr %blockret, align 1, !dbg !2460
  br label %expr_block.exit143, !dbg !2460

expr_block.exit143:                               ; preds = %loop.exit142, %if.then45
  %87 = load i8, ptr %blockret, align 1, !dbg !2460
  store i8 %87, ptr %0, align 1, !dbg !2460
  ret i64 0, !dbg !2460

err_retblock:                                     ; preds = %guard_block140, %if.then115, %guard_block, %if.then69, %if.then24, %if.then18, %if.then
  %88 = load i64, ptr %reterr, align 8, !dbg !2460
  ret i64 %88, !dbg !2460

panic:                                            ; preds = %if.exit
  store i64 %21, ptr %taddr, align 8
  %89 = insertvalue %any undef, ptr %taddr, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr15, align 8
  %91 = insertvalue %any undef, ptr %taddr15, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %90, ptr %varargslots, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %92, ptr %ptradd16, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.75, i64 8, i32 744, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2369
  unreachable, !dbg !2369

panic28:                                          ; preds = %if.exit25
  store i64 %31, ptr %taddr29, align 8
  %94 = insertvalue %any undef, ptr %taddr29, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr30, align 8
  %96 = insertvalue %any undef, ptr %taddr30, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %95, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %97, ptr %ptradd32, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.75, i64 8, i32 757, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !2384
  unreachable, !dbg !2384

panic49:                                          ; preds = %if.exit46
  store i64 %40, ptr %taddr50, align 8
  %99 = insertvalue %any undef, ptr %taddr50, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr51, align 8
  %101 = insertvalue %any undef, ptr %taddr51, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %100, ptr %varargslots52, align 16
  %ptradd53 = getelementptr inbounds i8, ptr %varargslots52, i64 16
  store %any %102, ptr %ptradd53, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots52, 0
  %"$$temp54" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp54", ptr %indirectarg55, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.75, i64 8, i32 761, ptr byval(%"any[]") align 8 %indirectarg55) #5, !dbg !2393
  unreachable, !dbg !2393

panic79:                                          ; preds = %loop.body73
  store i64 %53, ptr %taddr80, align 8
  %104 = insertvalue %any undef, ptr %taddr80, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %55, ptr %taddr81, align 8
  %106 = insertvalue %any undef, ptr %taddr81, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %105, ptr %varargslots82, align 16
  %ptradd83 = getelementptr inbounds i8, ptr %varargslots82, i64 16
  store %any %107, ptr %ptradd83, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots82, 0
  %"$$temp84" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp84", ptr %indirectarg85, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func.75, i64 8, i32 784, ptr byval(%"any[]") align 8 %indirectarg85) #5, !dbg !2422
  unreachable, !dbg !2422
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_double(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2461 {
entry:
  %s = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %chars = alloca %"char[]", align 8
  %blockret = alloca double, align 8
  %sign = alloca i32, align 4
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots8 = alloca [2 x %any], align 16
  %indirectarg11 = alloca %"any[]", align 8
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %varargslots20 = alloca [2 x %any], align 16
  %indirectarg23 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  %cmp.idx43 = alloca i64, align 8
  %cmp.idx57 = alloca i64, align 8
  %cmp.idx69 = alloca i64, align 8
  %taddr88 = alloca i64, align 8
  %taddr89 = alloca i64, align 8
  %varargslots90 = alloca [2 x %any], align 16
  %indirectarg93 = alloca %"any[]", align 8
  %taddr102 = alloca i64, align 8
  %taddr103 = alloca i64, align 8
  %varargslots104 = alloca [2 x %any], align 16
  %indirectarg107 = alloca %"any[]", align 8
  %taddr116 = alloca i64, align 8
  %taddr117 = alloca i64, align 8
  %varargslots118 = alloca [2 x %any], align 16
  %indirectarg121 = alloca %"any[]", align 8
  %chars125 = alloca %"char[]", align 8
  %sign126 = alloca i32, align 4
  %blockret127 = alloca double, align 8
  %scale = alloca double, align 8
  %x = alloca i32, align 4
  %rp = alloca i64, align 8
  %dc = alloca i64, align 8
  %c = alloca i8, align 1
  %got_rad = alloca i8, align 1
  %got_digit = alloca i8, align 1
  %got_tail = alloca i8, align 1
  %len = alloca i64, align 8
  %last_char = alloca i64, align 8
  %index = alloca i64, align 8
  %y = alloca double, align 8
  %taddr133 = alloca i64, align 8
  %taddr134 = alloca i64, align 8
  %varargslots135 = alloca [2 x %any], align 16
  %indirectarg138 = alloca %"any[]", align 8
  %taddr161 = alloca i64, align 8
  %taddr162 = alloca i64, align 8
  %varargslots163 = alloca [2 x %any], align 16
  %indirectarg166 = alloca %"any[]", align 8
  %taddr181 = alloca i64, align 8
  %taddr182 = alloca i64, align 8
  %varargslots183 = alloca [2 x %any], align 16
  %indirectarg186 = alloca %"any[]", align 8
  %d = alloca i32, align 4
  %blockret217 = alloca i32, align 4
  %switch227 = alloca i8, align 1
  %taddr259 = alloca i64, align 8
  %taddr260 = alloca i64, align 8
  %varargslots261 = alloca [2 x %any], align 16
  %indirectarg264 = alloca %"any[]", align 8
  %e2 = alloca i64, align 8
  %e2val = alloca i64, align 8
  %taddr289 = alloca i64, align 8
  %taddr290 = alloca i64, align 8
  %varargslots291 = alloca [2 x %any], align 16
  %indirectarg294 = alloca %"any[]", align 8
  %taddr297 = alloca i64, align 8
  %varargslots298 = alloca [1 x %any], align 16
  %indirectarg300 = alloca %"any[]", align 8
  %retparam = alloca i64, align 8
  %error_var = alloca i64, align 8
  %bits = alloca i32, align 4
  %bias = alloca double, align 8
  %x345 = alloca double, align 8
  %n = alloca i32, align 4
  %mag = alloca double, align 8
  %sgn = alloca double, align 8
  %x349 = alloca double, align 8
  %y350 = alloca double, align 8
  %x375 = alloca double, align 8
  %n377 = alloca i32, align 4
  %chars381 = alloca %"char[]", align 8
  %sign382 = alloca i32, align 4
  %blockret383 = alloca double, align 8
  %x386 = alloca [128 x i32], align 16
  %emax = alloca i32, align 4
  %index387 = alloca i64, align 8
  %got_digit388 = alloca i8, align 1
  %taddr392 = alloca i64, align 8
  %taddr393 = alloca i64, align 8
  %varargslots394 = alloca [2 x %any], align 16
  %indirectarg397 = alloca %"any[]", align 8
  %got_rad400 = alloca i8, align 1
  %lrp = alloca i64, align 8
  %dc401 = alloca i64, align 8
  %k = alloca i32, align 4
  %j = alloca i32, align 4
  %lnz = alloca i32, align 4
  %len402 = alloca i64, align 8
  %last_char404 = alloca i64, align 8
  %c409 = alloca i8, align 1
  %taddr414 = alloca i64, align 8
  %taddr415 = alloca i64, align 8
  %varargslots416 = alloca [2 x %any], align 16
  %indirectarg419 = alloca %"any[]", align 8
  %taddr447 = alloca i64, align 8
  %taddr448 = alloca i64, align 8
  %varargslots449 = alloca [2 x %any], align 16
  %indirectarg452 = alloca %"any[]", align 8
  %taddr467 = alloca i64, align 8
  %taddr468 = alloca i64, align 8
  %varargslots469 = alloca [2 x %any], align 16
  %indirectarg472 = alloca %"any[]", align 8
  %switch492 = alloca i8, align 1
  %taddr512 = alloca i64, align 8
  %varargslots513 = alloca [1 x %any], align 16
  %indirectarg515 = alloca %"any[]", align 8
  %taddr519 = alloca i64, align 8
  %taddr520 = alloca i64, align 8
  %varargslots521 = alloca [2 x %any], align 16
  %indirectarg524 = alloca %"any[]", align 8
  %taddr529 = alloca i64, align 8
  %varargslots530 = alloca [1 x %any], align 16
  %indirectarg532 = alloca %"any[]", align 8
  %taddr536 = alloca i64, align 8
  %taddr537 = alloca i64, align 8
  %varargslots538 = alloca [2 x %any], align 16
  %indirectarg541 = alloca %"any[]", align 8
  %taddr552 = alloca i64, align 8
  %varargslots553 = alloca [1 x %any], align 16
  %indirectarg555 = alloca %"any[]", align 8
  %taddr559 = alloca i64, align 8
  %taddr560 = alloca i64, align 8
  %varargslots561 = alloca [2 x %any], align 16
  %indirectarg564 = alloca %"any[]", align 8
  %taddr593 = alloca i64, align 8
  %taddr594 = alloca i64, align 8
  %varargslots595 = alloca [2 x %any], align 16
  %indirectarg598 = alloca %"any[]", align 8
  %e10 = alloca i64, align 8
  %taddr620 = alloca i64, align 8
  %taddr621 = alloca i64, align 8
  %varargslots622 = alloca [2 x %any], align 16
  %indirectarg625 = alloca %"any[]", align 8
  %taddr629 = alloca i64, align 8
  %varargslots630 = alloca [1 x %any], align 16
  %indirectarg632 = alloca %"any[]", align 8
  %retparam636 = alloca i64, align 8
  %error_var640 = alloca i64, align 8
  %taddr686 = alloca i64, align 8
  %varargslots687 = alloca [1 x %any], align 16
  %indirectarg689 = alloca %"any[]", align 8
  %taddr693 = alloca i64, align 8
  %taddr694 = alloca i64, align 8
  %varargslots695 = alloca [2 x %any], align 16
  %indirectarg698 = alloca %"any[]", align 8
  %a = alloca i32, align 4
  %z = alloca i32, align 4
  %e2706 = alloca i32, align 4
  %rp707 = alloca i64, align 8
  %taddr732 = alloca i64, align 8
  %varargslots733 = alloca [1 x %any], align 16
  %indirectarg735 = alloca %"any[]", align 8
  %taddr739 = alloca i64, align 8
  %taddr740 = alloca i64, align 8
  %varargslots741 = alloca [2 x %any], align 16
  %indirectarg744 = alloca %"any[]", align 8
  %bitlim = alloca i32, align 4
  %taddr759 = alloca i32, align 4
  %varargslots760 = alloca [1 x %any], align 16
  %indirectarg762 = alloca %"any[]", align 8
  %taddr775 = alloca i64, align 8
  %varargslots776 = alloca [1 x %any], align 16
  %indirectarg778 = alloca %"any[]", align 8
  %taddr782 = alloca i64, align 8
  %taddr783 = alloca i64, align 8
  %varargslots784 = alloca [2 x %any], align 16
  %indirectarg787 = alloca %"any[]", align 8
  %rpm9 = alloca i64, align 8
  %p10 = alloca i32, align 4
  %taddr804 = alloca i64, align 8
  %varargslots805 = alloca [1 x %any], align 16
  %indirectarg807 = alloca %"any[]", align 8
  %taddr811 = alloca i64, align 8
  %taddr812 = alloca i64, align 8
  %varargslots813 = alloca [2 x %any], align 16
  %indirectarg816 = alloca %"any[]", align 8
  %carry = alloca i32, align 4
  %tmp = alloca i32, align 4
  %taddr825 = alloca i64, align 8
  %varargslots826 = alloca [1 x %any], align 16
  %indirectarg828 = alloca %"any[]", align 8
  %taddr832 = alloca i64, align 8
  %taddr833 = alloca i64, align 8
  %varargslots834 = alloca [2 x %any], align 16
  %indirectarg837 = alloca %"any[]", align 8
  %taddr847 = alloca i64, align 8
  %varargslots848 = alloca [1 x %any], align 16
  %indirectarg850 = alloca %"any[]", align 8
  %taddr854 = alloca i64, align 8
  %taddr855 = alloca i64, align 8
  %varargslots856 = alloca [2 x %any], align 16
  %indirectarg859 = alloca %"any[]", align 8
  %taddr865 = alloca i64, align 8
  %varargslots866 = alloca [1 x %any], align 16
  %indirectarg868 = alloca %"any[]", align 8
  %taddr872 = alloca i64, align 8
  %taddr873 = alloca i64, align 8
  %varargslots874 = alloca [2 x %any], align 16
  %indirectarg877 = alloca %"any[]", align 8
  %taddr894 = alloca i64, align 8
  %varargslots895 = alloca [1 x %any], align 16
  %indirectarg897 = alloca %"any[]", align 8
  %taddr901 = alloca i64, align 8
  %taddr902 = alloca i64, align 8
  %varargslots903 = alloca [2 x %any], align 16
  %indirectarg906 = alloca %"any[]", align 8
  %taddr925 = alloca i64, align 8
  %varargslots926 = alloca [1 x %any], align 16
  %indirectarg928 = alloca %"any[]", align 8
  %taddr932 = alloca i64, align 8
  %taddr933 = alloca i64, align 8
  %varargslots934 = alloca [2 x %any], align 16
  %indirectarg937 = alloca %"any[]", align 8
  %taddr952 = alloca i64, align 8
  %varargslots953 = alloca [1 x %any], align 16
  %indirectarg955 = alloca %"any[]", align 8
  %taddr959 = alloca i64, align 8
  %taddr960 = alloca i64, align 8
  %varargslots961 = alloca [2 x %any], align 16
  %indirectarg964 = alloca %"any[]", align 8
  %carry973 = alloca i32, align 4
  %tmp978 = alloca i64, align 8
  %taddr982 = alloca i64, align 8
  %varargslots983 = alloca [1 x %any], align 16
  %indirectarg985 = alloca %"any[]", align 8
  %taddr989 = alloca i64, align 8
  %taddr990 = alloca i64, align 8
  %varargslots991 = alloca [2 x %any], align 16
  %indirectarg994 = alloca %"any[]", align 8
  %taddr1007 = alloca i64, align 8
  %varargslots1008 = alloca [1 x %any], align 16
  %indirectarg1010 = alloca %"any[]", align 8
  %taddr1014 = alloca i64, align 8
  %taddr1015 = alloca i64, align 8
  %varargslots1016 = alloca [2 x %any], align 16
  %indirectarg1019 = alloca %"any[]", align 8
  %taddr1028 = alloca i64, align 8
  %varargslots1029 = alloca [1 x %any], align 16
  %indirectarg1031 = alloca %"any[]", align 8
  %taddr1035 = alloca i64, align 8
  %taddr1036 = alloca i64, align 8
  %varargslots1037 = alloca [2 x %any], align 16
  %indirectarg1040 = alloca %"any[]", align 8
  %taddr1056 = alloca i64, align 8
  %varargslots1057 = alloca [1 x %any], align 16
  %indirectarg1059 = alloca %"any[]", align 8
  %taddr1063 = alloca i64, align 8
  %taddr1064 = alloca i64, align 8
  %varargslots1065 = alloca [2 x %any], align 16
  %indirectarg1068 = alloca %"any[]", align 8
  %taddr1096 = alloca i64, align 8
  %varargslots1097 = alloca [1 x %any], align 16
  %indirectarg1099 = alloca %"any[]", align 8
  %taddr1103 = alloca i64, align 8
  %taddr1104 = alloca i64, align 8
  %varargslots1105 = alloca [2 x %any], align 16
  %indirectarg1108 = alloca %"any[]", align 8
  %taddr1114 = alloca i64, align 8
  %varargslots1115 = alloca [1 x %any], align 16
  %indirectarg1117 = alloca %"any[]", align 8
  %taddr1121 = alloca i64, align 8
  %taddr1122 = alloca i64, align 8
  %varargslots1123 = alloca [2 x %any], align 16
  %indirectarg1126 = alloca %"any[]", align 8
  %taddr1134 = alloca i64, align 8
  %varargslots1135 = alloca [1 x %any], align 16
  %indirectarg1137 = alloca %"any[]", align 8
  %taddr1141 = alloca i64, align 8
  %taddr1142 = alloca i64, align 8
  %varargslots1143 = alloca [2 x %any], align 16
  %indirectarg1146 = alloca %"any[]", align 8
  %carry1152 = alloca i32, align 4
  %sh = alloca i32, align 4
  %i = alloca i32, align 4
  %taddr1163 = alloca i64, align 8
  %varargslots1164 = alloca [1 x %any], align 16
  %indirectarg1166 = alloca %"any[]", align 8
  %taddr1170 = alloca i64, align 8
  %taddr1171 = alloca i64, align 8
  %varargslots1172 = alloca [2 x %any], align 16
  %indirectarg1175 = alloca %"any[]", align 8
  %taddr1181 = alloca i64, align 8
  %varargslots1182 = alloca [1 x %any], align 16
  %indirectarg1184 = alloca %"any[]", align 8
  %taddr1188 = alloca i64, align 8
  %taddr1189 = alloca i64, align 8
  %varargslots1190 = alloca [2 x %any], align 16
  %indirectarg1193 = alloca %"any[]", align 8
  %taddr1206 = alloca i64, align 8
  %varargslots1207 = alloca [1 x %any], align 16
  %indirectarg1209 = alloca %"any[]", align 8
  %taddr1213 = alloca i64, align 8
  %taddr1214 = alloca i64, align 8
  %varargslots1215 = alloca [2 x %any], align 16
  %indirectarg1218 = alloca %"any[]", align 8
  %taddr1224 = alloca i64, align 8
  %varargslots1225 = alloca [1 x %any], align 16
  %indirectarg1227 = alloca %"any[]", align 8
  %taddr1231 = alloca i64, align 8
  %taddr1232 = alloca i64, align 8
  %varargslots1233 = alloca [2 x %any], align 16
  %indirectarg1236 = alloca %"any[]", align 8
  %tmp1258 = alloca i32, align 4
  %taddr1262 = alloca i64, align 8
  %varargslots1263 = alloca [1 x %any], align 16
  %indirectarg1265 = alloca %"any[]", align 8
  %taddr1269 = alloca i64, align 8
  %taddr1270 = alloca i64, align 8
  %varargslots1271 = alloca [2 x %any], align 16
  %indirectarg1274 = alloca %"any[]", align 8
  %taddr1278 = alloca i32, align 4
  %varargslots1279 = alloca [1 x %any], align 16
  %indirectarg1281 = alloca %"any[]", align 8
  %taddr1285 = alloca i32, align 4
  %varargslots1286 = alloca [1 x %any], align 16
  %indirectarg1288 = alloca %"any[]", align 8
  %taddr1296 = alloca i64, align 8
  %varargslots1297 = alloca [1 x %any], align 16
  %indirectarg1299 = alloca %"any[]", align 8
  %taddr1303 = alloca i64, align 8
  %taddr1304 = alloca i64, align 8
  %varargslots1305 = alloca [2 x %any], align 16
  %indirectarg1308 = alloca %"any[]", align 8
  %taddr1314 = alloca i64, align 8
  %varargslots1315 = alloca [1 x %any], align 16
  %indirectarg1317 = alloca %"any[]", align 8
  %taddr1321 = alloca i64, align 8
  %taddr1322 = alloca i64, align 8
  %varargslots1323 = alloca [2 x %any], align 16
  %indirectarg1326 = alloca %"any[]", align 8
  %taddr1331 = alloca i32, align 4
  %varargslots1332 = alloca [1 x %any], align 16
  %indirectarg1334 = alloca %"any[]", align 8
  %taddr1340 = alloca i32, align 4
  %varargslots1341 = alloca [1 x %any], align 16
  %indirectarg1343 = alloca %"any[]", align 8
  %taddr1347 = alloca i32, align 4
  %varargslots1348 = alloca [1 x %any], align 16
  %indirectarg1350 = alloca %"any[]", align 8
  %taddr1358 = alloca i64, align 8
  %varargslots1359 = alloca [1 x %any], align 16
  %indirectarg1361 = alloca %"any[]", align 8
  %taddr1365 = alloca i64, align 8
  %taddr1366 = alloca i64, align 8
  %varargslots1367 = alloca [2 x %any], align 16
  %indirectarg1370 = alloca %"any[]", align 8
  %taddr1394 = alloca i64, align 8
  %varargslots1395 = alloca [1 x %any], align 16
  %indirectarg1397 = alloca %"any[]", align 8
  %taddr1401 = alloca i64, align 8
  %taddr1402 = alloca i64, align 8
  %varargslots1403 = alloca [2 x %any], align 16
  %indirectarg1406 = alloca %"any[]", align 8
  %taddr1417 = alloca i64, align 8
  %varargslots1418 = alloca [1 x %any], align 16
  %indirectarg1420 = alloca %"any[]", align 8
  %taddr1424 = alloca i64, align 8
  %taddr1425 = alloca i64, align 8
  %varargslots1426 = alloca [2 x %any], align 16
  %indirectarg1429 = alloca %"any[]", align 8
  %y1436 = alloca double, align 8
  %i1437 = alloca i32, align 4
  %taddr1451 = alloca i64, align 8
  %varargslots1452 = alloca [1 x %any], align 16
  %indirectarg1454 = alloca %"any[]", align 8
  %taddr1458 = alloca i64, align 8
  %taddr1459 = alloca i64, align 8
  %varargslots1460 = alloca [2 x %any], align 16
  %indirectarg1463 = alloca %"any[]", align 8
  %taddr1473 = alloca i64, align 8
  %varargslots1474 = alloca [1 x %any], align 16
  %indirectarg1476 = alloca %"any[]", align 8
  %taddr1480 = alloca i64, align 8
  %taddr1481 = alloca i64, align 8
  %varargslots1482 = alloca [2 x %any], align 16
  %indirectarg1485 = alloca %"any[]", align 8
  %denormal = alloca i8, align 1
  %bits1494 = alloca i32, align 4
  %bias1507 = alloca double, align 8
  %frac = alloca double, align 8
  %x1510 = alloca double, align 8
  %n1513 = alloca i32, align 4
  %mag1514 = alloca double, align 8
  %sgn1515 = alloca double, align 8
  %x1516 = alloca double, align 8
  %y1517 = alloca double, align 8
  %x1518 = alloca double, align 8
  %n1520 = alloca i32, align 4
  %t = alloca i32, align 4
  %taddr1536 = alloca i64, align 8
  %varargslots1537 = alloca [1 x %any], align 16
  %indirectarg1539 = alloca %"any[]", align 8
  %taddr1543 = alloca i64, align 8
  %taddr1544 = alloca i64, align 8
  %varargslots1545 = alloca [2 x %any], align 16
  %indirectarg1548 = alloca %"any[]", align 8
  %switch1551 = alloca i8, align 1
  %x1614 = alloca double, align 8
  %x1642 = alloca double, align 8
  %n1643 = alloca i32, align 4
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !2466, !DIExpression(), !2467)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %chars, ptr align 8 %s, i32 16, i1 false)
    #dbg_declare(ptr %sign, !2468, !DIExpression(), !2470)
  store i32 1, ptr %sign, align 4, !dbg !2472
  br label %loop.cond, !dbg !2473

loop.cond:                                        ; preds = %checkok12, %entry
  %ptradd1 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2474
  %3 = load i64, ptr %ptradd1, align 8, !dbg !2474
  %i2b = icmp ne i64 %3, 0, !dbg !2474
  br i1 %i2b, label %and.rhs, label %and.phi, !dbg !2474

and.rhs:                                          ; preds = %loop.cond
  %ptradd2 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2476
  %4 = load i64, ptr %ptradd2, align 8, !dbg !2476
  %5 = load ptr, ptr %chars, align 8, !dbg !2476
  %ge = icmp sge i64 0, %4, !dbg !2477
  %6 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2477
  br i1 %6, label %panic, label %checkok, !dbg !2477

checkok:                                          ; preds = %and.rhs
  %7 = load i8, ptr %5, align 1, !dbg !2477
  %eq = icmp eq i8 %7, 32, !dbg !2476
  br label %and.phi, !dbg !2476

and.phi:                                          ; preds = %checkok, %loop.cond
  %val = phi i1 [ false, %loop.cond ], [ %eq, %checkok ], !dbg !2476
  br i1 %val, label %loop.body, label %loop.exit, !dbg !2476

loop.body:                                        ; preds = %and.phi
  %8 = load %"char[]", ptr %chars, align 8, !dbg !2478
  %9 = extractvalue %"char[]" %8, 0, !dbg !2478
  %10 = extractvalue %"char[]" %8, 1, !dbg !2479
  %gt = icmp sgt i64 1, %10, !dbg !2479
  %11 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2479
  br i1 %11, label %panic5, label %checkok12, !dbg !2479

checkok12:                                        ; preds = %loop.body
  %size = sub i64 %10, 1, !dbg !2478
  %ptradd13 = getelementptr inbounds i8, ptr %9, i64 1, !dbg !2478
  %12 = insertvalue %"char[]" undef, ptr %ptradd13, 0, !dbg !2478
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !2478
  store %"char[]" %13, ptr %chars, align 8, !dbg !2478
  br label %loop.cond, !dbg !2478

loop.exit:                                        ; preds = %and.phi
  %ptradd14 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2480
  %14 = load i64, ptr %ptradd14, align 8, !dbg !2480
  %i2nb = icmp eq i64 %14, 0, !dbg !2480
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2480

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2481
  br label %err_retblock, !dbg !2481

if.exit:                                          ; preds = %loop.exit
  %ptradd15 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2482
  %15 = load i64, ptr %ptradd15, align 8, !dbg !2482
  %16 = load ptr, ptr %chars, align 8, !dbg !2482
  %ge16 = icmp sge i64 0, %15, !dbg !2484
  %17 = call i1 @llvm.expect.i1(i1 %ge16, i1 false), !dbg !2484
  br i1 %17, label %panic17, label %checkok24, !dbg !2484

checkok24:                                        ; preds = %if.exit
  %18 = load i8, ptr %16, align 1
  store i8 %18, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok24
  %19 = load i8, ptr %switch, align 1
  switch i8 %19, label %switch.exit [
    i8 45, label %switch.case
    i8 43, label %switch.case25
  ]

switch.case:                                      ; preds = %switch.entry
  store i32 -1, ptr %sign, align 4, !dbg !2485
  br label %switch.case25, !dbg !2487

switch.case25:                                    ; preds = %switch.entry, %switch.case
  %20 = load %"char[]", ptr %chars, align 8, !dbg !2488
  %21 = extractvalue %"char[]" %20, 0, !dbg !2488
  %22 = extractvalue %"char[]" %20, 1, !dbg !2490
  %gt26 = icmp sgt i64 1, %22, !dbg !2490
  %23 = call i1 @llvm.expect.i1(i1 %gt26, i1 false), !dbg !2490
  br i1 %23, label %panic27, label %checkok34, !dbg !2490

checkok34:                                        ; preds = %switch.case25
  %size35 = sub i64 %22, 1, !dbg !2488
  %ptradd36 = getelementptr inbounds i8, ptr %21, i64 1, !dbg !2488
  %24 = insertvalue %"char[]" undef, ptr %ptradd36, 0, !dbg !2488
  %25 = insertvalue %"char[]" %24, i64 %size35, 1, !dbg !2488
  store %"char[]" %25, ptr %chars, align 8, !dbg !2488
  br label %switch.exit, !dbg !2488

switch.exit:                                      ; preds = %checkok34, %switch.entry
  %26 = load %"char[]", ptr %chars, align 8, !dbg !2491
  %27 = extractvalue %"char[]" %26, 1, !dbg !2491
  %28 = extractvalue %"char[]" %26, 0, !dbg !2491
  %eq37 = icmp eq i64 %27, 8, !dbg !2491
  br i1 %eq37, label %slice_cmp_values, label %slice_cmp_exit, !dbg !2491

slice_cmp_values:                                 ; preds = %switch.exit
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %29 = load i64, ptr %cmp.idx, align 8
  %lt = icmp slt i64 %29, %27
  br i1 %lt, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd38 = getelementptr inbounds i8, ptr %28, i64 %29
  %ptradd39 = getelementptr inbounds i8, ptr @.str, i64 %29
  %30 = load i8, ptr %ptradd38, align 1
  %31 = load i8, ptr %ptradd39, align 1
  %eq40 = icmp eq i8 %30, %31
  %32 = add i64 %29, 1
  store i64 %32, ptr %cmp.idx, align 8
  br i1 %eq40, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %switch.exit
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %switch.exit ], [ false, %slice_loop_comparison ]
  br i1 %slice_cmp_phi, label %or.phi, label %or.rhs

or.rhs:                                           ; preds = %slice_cmp_exit
  %33 = load %"char[]", ptr %chars, align 8, !dbg !2492
  %34 = extractvalue %"char[]" %33, 1, !dbg !2492
  %35 = extractvalue %"char[]" %33, 0, !dbg !2492
  %eq41 = icmp eq i64 %34, 8, !dbg !2492
  br i1 %eq41, label %slice_cmp_values42, label %slice_cmp_exit50, !dbg !2492

slice_cmp_values42:                               ; preds = %or.rhs
  store i64 0, ptr %cmp.idx43, align 8
  br label %slice_loop_start44

slice_loop_start44:                               ; preds = %slice_loop_comparison46, %slice_cmp_values42
  %36 = load i64, ptr %cmp.idx43, align 8
  %lt45 = icmp slt i64 %36, %34
  br i1 %lt45, label %slice_loop_comparison46, label %slice_cmp_exit50

slice_loop_comparison46:                          ; preds = %slice_loop_start44
  %ptradd47 = getelementptr inbounds i8, ptr %35, i64 %36
  %ptradd48 = getelementptr inbounds i8, ptr @.str.78, i64 %36
  %37 = load i8, ptr %ptradd47, align 1
  %38 = load i8, ptr %ptradd48, align 1
  %eq49 = icmp eq i8 %37, %38
  %39 = add i64 %36, 1
  store i64 %39, ptr %cmp.idx43, align 8
  br i1 %eq49, label %slice_loop_start44, label %slice_cmp_exit50

slice_cmp_exit50:                                 ; preds = %slice_loop_comparison46, %slice_loop_start44, %or.rhs
  %slice_cmp_phi51 = phi i1 [ true, %slice_loop_start44 ], [ false, %or.rhs ], [ false, %slice_loop_comparison46 ]
  br label %or.phi

or.phi:                                           ; preds = %slice_cmp_exit50, %slice_cmp_exit
  %val52 = phi i1 [ true, %slice_cmp_exit ], [ %slice_cmp_phi51, %slice_cmp_exit50 ]
  br i1 %val52, label %if.then53, label %if.exit54

if.then53:                                        ; preds = %or.phi
  %40 = load i32, ptr %sign, align 4, !dbg !2493
  %sifp = sitofp i32 %40 to double, !dbg !2493
  %fmul = fmul double %sifp, 0x7FF0000000000000, !dbg !2493
  store double %fmul, ptr %blockret, align 8, !dbg !2493
  br label %expr_block.exit1646, !dbg !2493

if.exit54:                                        ; preds = %or.phi
  %41 = load %"char[]", ptr %chars, align 8, !dbg !2494
  %42 = extractvalue %"char[]" %41, 1, !dbg !2494
  %43 = extractvalue %"char[]" %41, 0, !dbg !2494
  %eq55 = icmp eq i64 %42, 3, !dbg !2494
  br i1 %eq55, label %slice_cmp_values56, label %slice_cmp_exit64, !dbg !2494

slice_cmp_values56:                               ; preds = %if.exit54
  store i64 0, ptr %cmp.idx57, align 8
  br label %slice_loop_start58

slice_loop_start58:                               ; preds = %slice_loop_comparison60, %slice_cmp_values56
  %44 = load i64, ptr %cmp.idx57, align 8
  %lt59 = icmp slt i64 %44, %42
  br i1 %lt59, label %slice_loop_comparison60, label %slice_cmp_exit64

slice_loop_comparison60:                          ; preds = %slice_loop_start58
  %ptradd61 = getelementptr inbounds i8, ptr %43, i64 %44
  %ptradd62 = getelementptr inbounds i8, ptr @.str.79, i64 %44
  %45 = load i8, ptr %ptradd61, align 1
  %46 = load i8, ptr %ptradd62, align 1
  %eq63 = icmp eq i8 %45, %46
  %47 = add i64 %44, 1
  store i64 %47, ptr %cmp.idx57, align 8
  br i1 %eq63, label %slice_loop_start58, label %slice_cmp_exit64

slice_cmp_exit64:                                 ; preds = %slice_loop_comparison60, %slice_loop_start58, %if.exit54
  %slice_cmp_phi65 = phi i1 [ true, %slice_loop_start58 ], [ false, %if.exit54 ], [ false, %slice_loop_comparison60 ]
  br i1 %slice_cmp_phi65, label %or.phi78, label %or.rhs66

or.rhs66:                                         ; preds = %slice_cmp_exit64
  %48 = load %"char[]", ptr %chars, align 8, !dbg !2495
  %49 = extractvalue %"char[]" %48, 1, !dbg !2495
  %50 = extractvalue %"char[]" %48, 0, !dbg !2495
  %eq67 = icmp eq i64 %49, 3, !dbg !2495
  br i1 %eq67, label %slice_cmp_values68, label %slice_cmp_exit76, !dbg !2495

slice_cmp_values68:                               ; preds = %or.rhs66
  store i64 0, ptr %cmp.idx69, align 8
  br label %slice_loop_start70

slice_loop_start70:                               ; preds = %slice_loop_comparison72, %slice_cmp_values68
  %51 = load i64, ptr %cmp.idx69, align 8
  %lt71 = icmp slt i64 %51, %49
  br i1 %lt71, label %slice_loop_comparison72, label %slice_cmp_exit76

slice_loop_comparison72:                          ; preds = %slice_loop_start70
  %ptradd73 = getelementptr inbounds i8, ptr %50, i64 %51
  %ptradd74 = getelementptr inbounds i8, ptr @.str.80, i64 %51
  %52 = load i8, ptr %ptradd73, align 1
  %53 = load i8, ptr %ptradd74, align 1
  %eq75 = icmp eq i8 %52, %53
  %54 = add i64 %51, 1
  store i64 %54, ptr %cmp.idx69, align 8
  br i1 %eq75, label %slice_loop_start70, label %slice_cmp_exit76

slice_cmp_exit76:                                 ; preds = %slice_loop_comparison72, %slice_loop_start70, %or.rhs66
  %slice_cmp_phi77 = phi i1 [ true, %slice_loop_start70 ], [ false, %or.rhs66 ], [ false, %slice_loop_comparison72 ]
  br label %or.phi78

or.phi78:                                         ; preds = %slice_cmp_exit76, %slice_cmp_exit64
  %val79 = phi i1 [ true, %slice_cmp_exit64 ], [ %slice_cmp_phi77, %slice_cmp_exit76 ]
  br i1 %val79, label %if.then80, label %if.exit81

if.then80:                                        ; preds = %or.phi78
  store double 0x7FF8000000000000, ptr %blockret, align 8, !dbg !2496
  br label %expr_block.exit1646, !dbg !2496

if.exit81:                                        ; preds = %or.phi78
  %ptradd82 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2497
  %55 = load i64, ptr %ptradd82, align 8, !dbg !2497
  %lt83 = icmp ult i64 2, %55, !dbg !2497
  br i1 %lt83, label %and.rhs84, label %and.phi96, !dbg !2497

and.rhs84:                                        ; preds = %if.exit81
  %ptradd85 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2498
  %56 = load i64, ptr %ptradd85, align 8, !dbg !2498
  %57 = load ptr, ptr %chars, align 8, !dbg !2498
  %ge86 = icmp sge i64 0, %56, !dbg !2499
  %58 = call i1 @llvm.expect.i1(i1 %ge86, i1 false), !dbg !2499
  br i1 %58, label %panic87, label %checkok94, !dbg !2499

checkok94:                                        ; preds = %and.rhs84
  %59 = load i8, ptr %57, align 1, !dbg !2499
  %eq95 = icmp eq i8 %59, 48, !dbg !2498
  br label %and.phi96, !dbg !2498

and.phi96:                                        ; preds = %checkok94, %if.exit81
  %val97 = phi i1 [ false, %if.exit81 ], [ %eq95, %checkok94 ], !dbg !2498
  br i1 %val97, label %and.rhs98, label %and.phi111, !dbg !2498

and.rhs98:                                        ; preds = %and.phi96
  %ptradd99 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2500
  %60 = load i64, ptr %ptradd99, align 8, !dbg !2500
  %61 = load ptr, ptr %chars, align 8, !dbg !2500
  %ge100 = icmp sge i64 1, %60, !dbg !2501
  %62 = call i1 @llvm.expect.i1(i1 %ge100, i1 false), !dbg !2501
  br i1 %62, label %panic101, label %checkok108, !dbg !2501

checkok108:                                       ; preds = %and.rhs98
  %ptradd109 = getelementptr inbounds i8, ptr %61, i64 1, !dbg !2501
  %63 = load i8, ptr %ptradd109, align 1, !dbg !2501
  %zext = zext i8 %63 to i32, !dbg !2501
  %or = or i32 %zext, 32, !dbg !2500
  %eq110 = icmp eq i32 %or, 120, !dbg !2500
  %check = icmp sge i32 %or, 0, !dbg !2500
  %siui-eq = and i1 %check, %eq110, !dbg !2500
  br label %and.phi111, !dbg !2500

and.phi111:                                       ; preds = %checkok108, %and.phi96
  %val112 = phi i1 [ false, %and.phi96 ], [ %siui-eq, %checkok108 ], !dbg !2500
  br i1 %val112, label %if.then113, label %if.exit380, !dbg !2500

if.then113:                                       ; preds = %and.phi111
  %64 = load %"char[]", ptr %chars, align 8, !dbg !2502
  %65 = extractvalue %"char[]" %64, 0, !dbg !2502
  %66 = extractvalue %"char[]" %64, 1, !dbg !2504
  %gt114 = icmp sgt i64 2, %66, !dbg !2504
  %67 = call i1 @llvm.expect.i1(i1 %gt114, i1 false), !dbg !2504
  br i1 %67, label %panic115, label %checkok122, !dbg !2504

checkok122:                                       ; preds = %if.then113
  %size123 = sub i64 %66, 2, !dbg !2505
  %ptradd124 = getelementptr inbounds i8, ptr %65, i64 2, !dbg !2505
  %68 = insertvalue %"char[]" undef, ptr %ptradd124, 0, !dbg !2505
  %69 = insertvalue %"char[]" %68, i64 %size123, 1, !dbg !2505
  store %"char[]" %69, ptr %chars125, align 8
  %70 = load i32, ptr %sign, align 4
  store i32 %70, ptr %sign126, align 4
    #dbg_declare(ptr %scale, !2506, !DIExpression(), !2508)
  store double 1.000000e+00, ptr %scale, align 8, !dbg !2510
    #dbg_declare(ptr %x, !2511, !DIExpression(), !2512)
  store i32 0, ptr %x, align 4, !dbg !2512
    #dbg_declare(ptr %rp, !2513, !DIExpression(), !2514)
  store i64 0, ptr %rp, align 8, !dbg !2514
    #dbg_declare(ptr %dc, !2515, !DIExpression(), !2516)
  store i64 0, ptr %dc, align 8, !dbg !2516
    #dbg_declare(ptr %c, !2517, !DIExpression(), !2518)
    #dbg_declare(ptr %got_rad, !2519, !DIExpression(), !2520)
  store i8 0, ptr %got_rad, align 1, !dbg !2520
    #dbg_declare(ptr %got_digit, !2521, !DIExpression(), !2522)
  store i8 0, ptr %got_digit, align 1, !dbg !2522
    #dbg_declare(ptr %got_tail, !2523, !DIExpression(), !2524)
  store i8 0, ptr %got_tail, align 1, !dbg !2524
    #dbg_declare(ptr %len, !2525, !DIExpression(), !2526)
  %ptradd128 = getelementptr inbounds i8, ptr %chars125, i64 8, !dbg !2527
  %71 = load i64, ptr %ptradd128, align 8, !dbg !2527
  store i64 %71, ptr %len, align 8, !dbg !2527
    #dbg_declare(ptr %last_char, !2528, !DIExpression(), !2529)
  %72 = load i64, ptr %len, align 8, !dbg !2530
  %sub = sub i64 %72, 1, !dbg !2530
  store i64 %sub, ptr %last_char, align 8, !dbg !2530
    #dbg_declare(ptr %index, !2531, !DIExpression(), !2532)
  store i64 0, ptr %index, align 8, !dbg !2532
    #dbg_declare(ptr %y, !2533, !DIExpression(), !2534)
  store double 0.000000e+00, ptr %y, align 8, !dbg !2534
  br label %loop.cond129, !dbg !2535

loop.cond129:                                     ; preds = %if.exit145, %checkok122
  %ptradd130 = getelementptr inbounds i8, ptr %chars125, i64 8, !dbg !2536
  %73 = load i64, ptr %ptradd130, align 8, !dbg !2536
  %74 = load ptr, ptr %chars125, align 8, !dbg !2536
  %75 = load i64, ptr %index, align 8, !dbg !2538
  %ge131 = icmp uge i64 %75, %73, !dbg !2538
  %76 = call i1 @llvm.expect.i1(i1 %ge131, i1 false), !dbg !2538
  br i1 %76, label %panic132, label %checkok139, !dbg !2538

checkok139:                                       ; preds = %loop.cond129
  %ptradd140 = getelementptr inbounds i8, ptr %74, i64 %75, !dbg !2538
  %77 = load i8, ptr %ptradd140, align 1, !dbg !2538
  store i8 %77, ptr %c, align 1, !dbg !2538
  %eq141 = icmp eq i8 %77, 48, !dbg !2539
  br i1 %eq141, label %loop.body142, label %loop.exit146, !dbg !2539

loop.body142:                                     ; preds = %checkok139
  %78 = load i64, ptr %index, align 8, !dbg !2540
  %79 = load i64, ptr %last_char, align 8, !dbg !2542
  %eq143 = icmp eq i64 %78, %79, !dbg !2540
  br i1 %eq143, label %if.then144, label %if.exit145, !dbg !2540

if.then144:                                       ; preds = %loop.body142
  store double 0.000000e+00, ptr %blockret127, align 8, !dbg !2543
  br label %expr_block.exit379, !dbg !2543

if.exit145:                                       ; preds = %loop.body142
  %80 = load i64, ptr %index, align 8, !dbg !2544
  %add = add i64 %80, 1, !dbg !2544
  store i64 %add, ptr %index, align 8, !dbg !2544
  br label %loop.cond129, !dbg !2544

loop.exit146:                                     ; preds = %checkok139
  %81 = load i8, ptr %c, align 1, !dbg !2545
  %eq147 = icmp eq i8 %81, 46, !dbg !2545
  br i1 %eq147, label %if.then148, label %if.exit196, !dbg !2545

if.then148:                                       ; preds = %loop.exit146
  store i8 1, ptr %got_rad, align 1, !dbg !2546
  %82 = load i64, ptr %index, align 8, !dbg !2548
  %83 = load i64, ptr %last_char, align 8, !dbg !2549
  %eq149 = icmp eq i64 %82, %83, !dbg !2548
  br i1 %eq149, label %if.then150, label %if.exit155, !dbg !2548

if.then150:                                       ; preds = %if.then148
  %84 = load i8, ptr %got_digit, align 1, !dbg !2550
  %85 = trunc i8 %84 to i1, !dbg !2550
  %not = xor i1 %85, true, !dbg !2550
  br i1 %not, label %if.then151, label %if.exit152, !dbg !2550

if.then151:                                       ; preds = %if.then150
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2552
  br label %err_retblock, !dbg !2552

if.exit152:                                       ; preds = %if.then150
  %86 = load i32, ptr %sign126, align 4, !dbg !2553
  %sifp153 = sitofp i32 %86 to double, !dbg !2553
  %fmul154 = fmul double %sifp153, 0.000000e+00, !dbg !2553
  store double %fmul154, ptr %blockret127, align 8, !dbg !2553
  br label %expr_block.exit379, !dbg !2553

if.exit155:                                       ; preds = %if.then148
  %87 = load i64, ptr %index, align 8, !dbg !2554
  %88 = load i64, ptr %last_char, align 8, !dbg !2555
  %neq = icmp ne i64 %87, %88, !dbg !2554
  br i1 %neq, label %and.rhs156, label %and.phi170, !dbg !2554

and.rhs156:                                       ; preds = %if.exit155
  %ptradd157 = getelementptr inbounds i8, ptr %chars125, i64 8, !dbg !2556
  %89 = load i64, ptr %ptradd157, align 8, !dbg !2556
  %90 = load ptr, ptr %chars125, align 8, !dbg !2556
  %91 = load i64, ptr %index, align 8, !dbg !2557
  %add158 = add i64 %91, 1, !dbg !2557
  store i64 %add158, ptr %index, align 8, !dbg !2557
  %ge159 = icmp uge i64 %add158, %89, !dbg !2557
  %92 = call i1 @llvm.expect.i1(i1 %ge159, i1 false), !dbg !2557
  br i1 %92, label %panic160, label %checkok167, !dbg !2557

checkok167:                                       ; preds = %and.rhs156
  %ptradd168 = getelementptr inbounds i8, ptr %90, i64 %add158, !dbg !2558
  %93 = load i8, ptr %ptradd168, align 1, !dbg !2558
  store i8 %93, ptr %c, align 1, !dbg !2558
  %eq169 = icmp eq i8 %93, 48, !dbg !2559
  br label %and.phi170, !dbg !2559

and.phi170:                                       ; preds = %checkok167, %if.exit155
  %val171 = phi i1 [ false, %if.exit155 ], [ %eq169, %checkok167 ], !dbg !2559
  br i1 %val171, label %if.then172, label %if.exit195, !dbg !2559

if.then172:                                       ; preds = %and.phi170
  %94 = load i64, ptr %rp, align 8, !dbg !2560
  %sub173 = sub i64 %94, 1, !dbg !2560
  store i64 %sub173, ptr %rp, align 8, !dbg !2560
  store i8 1, ptr %got_digit, align 1, !dbg !2562
  br label %loop.cond174, !dbg !2563

loop.cond174:                                     ; preds = %loop.body192, %if.then172
  %95 = load i64, ptr %last_char, align 8, !dbg !2564
  %96 = load i64, ptr %index, align 8, !dbg !2566
  %neq175 = icmp ne i64 %95, %96, !dbg !2564
  br i1 %neq175, label %and.rhs176, label %and.phi190, !dbg !2564

and.rhs176:                                       ; preds = %loop.cond174
  %ptradd177 = getelementptr inbounds i8, ptr %chars125, i64 8, !dbg !2567
  %97 = load i64, ptr %ptradd177, align 8, !dbg !2567
  %98 = load ptr, ptr %chars125, align 8, !dbg !2567
  %99 = load i64, ptr %index, align 8, !dbg !2568
  %add178 = add i64 %99, 1, !dbg !2568
  store i64 %add178, ptr %index, align 8, !dbg !2568
  %ge179 = icmp uge i64 %add178, %97, !dbg !2568
  %100 = call i1 @llvm.expect.i1(i1 %ge179, i1 false), !dbg !2568
  br i1 %100, label %panic180, label %checkok187, !dbg !2568

checkok187:                                       ; preds = %and.rhs176
  %ptradd188 = getelementptr inbounds i8, ptr %98, i64 %add178, !dbg !2569
  %101 = load i8, ptr %ptradd188, align 1, !dbg !2569
  store i8 %101, ptr %c, align 1, !dbg !2569
  %eq189 = icmp eq i8 %101, 48, !dbg !2570
  br label %and.phi190, !dbg !2570

and.phi190:                                       ; preds = %checkok187, %loop.cond174
  %val191 = phi i1 [ false, %loop.cond174 ], [ %eq189, %checkok187 ], !dbg !2570
  br i1 %val191, label %loop.body192, label %loop.exit194, !dbg !2570

loop.body192:                                     ; preds = %and.phi190
  %102 = load i64, ptr %rp, align 8, !dbg !2571
  %sub193 = sub i64 %102, 1, !dbg !2571
  store i64 %sub193, ptr %rp, align 8, !dbg !2571
  br label %loop.cond174, !dbg !2571

loop.exit194:                                     ; preds = %and.phi190
  br label %if.exit195, !dbg !2571

if.exit195:                                       ; preds = %loop.exit194, %and.phi170
  br label %if.exit196, !dbg !2571

if.exit196:                                       ; preds = %if.exit195, %loop.exit146
  br label %loop.cond197, !dbg !2573

loop.cond197:                                     ; preds = %checkok265, %if.exit196
  %103 = load i8, ptr %c, align 1, !dbg !2574
  %zext198 = zext i8 %103 to i32, !dbg !2574
  %sub199 = sub i32 %zext198, 48, !dbg !2574
  %lt200 = icmp ult i32 %sub199, 10, !dbg !2574
  br i1 %lt200, label %or.phi206, label %or.rhs201, !dbg !2574

or.rhs201:                                        ; preds = %loop.cond197
  %104 = load i8, ptr %c, align 1, !dbg !2576
  %zext202 = zext i8 %104 to i32, !dbg !2576
  %or203 = or i32 %zext202, 32, !dbg !2576
  %sub204 = sub i32 %or203, 97, !dbg !2576
  %lt205 = icmp slt i32 %sub204, 6, !dbg !2576
  %siui-lt = or i1 false, %lt205, !dbg !2576
  br label %or.phi206, !dbg !2576

or.phi206:                                        ; preds = %or.rhs201, %loop.cond197
  %val207 = phi i1 [ true, %loop.cond197 ], [ %siui-lt, %or.rhs201 ], !dbg !2576
  br i1 %val207, label %or.phi210, label %or.rhs208, !dbg !2576

or.rhs208:                                        ; preds = %or.phi206
  %105 = load i8, ptr %c, align 1, !dbg !2577
  %eq209 = icmp eq i8 %105, 46, !dbg !2577
  br label %or.phi210, !dbg !2577

or.phi210:                                        ; preds = %or.rhs208, %or.phi206
  %val211 = phi i1 [ true, %or.phi206 ], [ %eq209, %or.rhs208 ], !dbg !2577
  br i1 %val211, label %loop.body212, label %loop.exit267, !dbg !2577

loop.body212:                                     ; preds = %or.phi210
  %106 = load i8, ptr %c, align 1, !dbg !2578
  %eq213 = icmp eq i8 %106, 46, !dbg !2578
  br i1 %eq213, label %if.then214, label %if.else, !dbg !2578

if.then214:                                       ; preds = %loop.body212
  %107 = load i8, ptr %got_rad, align 1, !dbg !2580
  %108 = trunc i8 %107 to i1, !dbg !2580
  br i1 %108, label %if.then215, label %if.exit216, !dbg !2580

if.then215:                                       ; preds = %if.then214
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2582
  br label %err_retblock, !dbg !2582

if.exit216:                                       ; preds = %if.then214
  store i8 1, ptr %got_rad, align 1, !dbg !2583
  %109 = load i64, ptr %dc, align 8, !dbg !2584
  store i64 %109, ptr %rp, align 8, !dbg !2584
  br label %if.exit251, !dbg !2584

if.else:                                          ; preds = %loop.body212
  store i8 1, ptr %got_digit, align 1, !dbg !2585
    #dbg_declare(ptr %d, !2587, !DIExpression(), !2588)
  %110 = load i8, ptr %c, align 1, !dbg !2589
  %gt218 = icmp ugt i8 %110, 57, !dbg !2589
  br i1 %gt218, label %if.then219, label %if.exit224, !dbg !2589

if.then219:                                       ; preds = %if.else
  %111 = load i8, ptr %c, align 1, !dbg !2591
  %zext220 = zext i8 %111 to i32, !dbg !2591
  %or221 = or i32 %zext220, 32, !dbg !2591
  %add222 = add i32 %or221, 10, !dbg !2591
  %sub223 = sub i32 %add222, 97, !dbg !2591
  store i32 %sub223, ptr %blockret217, align 4, !dbg !2591
  br label %expr_block.exit, !dbg !2591

if.exit224:                                       ; preds = %if.else
  %112 = load i8, ptr %c, align 1, !dbg !2592
  %zext225 = zext i8 %112 to i32, !dbg !2592
  %sub226 = sub i32 %zext225, 48, !dbg !2592
  store i32 %sub226, ptr %blockret217, align 4, !dbg !2592
  br label %expr_block.exit, !dbg !2592

expr_block.exit:                                  ; preds = %if.exit224, %if.then219
  %113 = load i32, ptr %blockret217, align 4, !dbg !2592
  store i32 %113, ptr %d, align 4, !dbg !2592
  store i8 1, ptr %switch227, align 1
  br label %switch.entry228

switch.entry228:                                  ; preds = %expr_block.exit
  %114 = load i8, ptr %switch227, align 1
  %115 = trunc i8 %114 to i1
  %116 = load i64, ptr %dc, align 8, !dbg !2593
  %lt229 = icmp slt i64 %116, 8, !dbg !2593
  %eq230 = icmp eq i1 %lt229, %115, !dbg !2593
  br i1 %eq230, label %switch.case231, label %next_if, !dbg !2593

switch.case231:                                   ; preds = %switch.entry228
  %117 = load i32, ptr %x, align 4, !dbg !2595
  %mul = mul i32 %117, 16, !dbg !2595
  %118 = load i32, ptr %d, align 4, !dbg !2597
  %add232 = add i32 %mul, %118, !dbg !2595
  store i32 %add232, ptr %x, align 4, !dbg !2595
  br label %switch.exit249, !dbg !2595

next_if:                                          ; preds = %switch.entry228
  %119 = load i64, ptr %dc, align 8, !dbg !2598
  %lt233 = icmp slt i64 %119, 14, !dbg !2598
  %eq234 = icmp eq i1 %lt233, %115, !dbg !2598
  br i1 %eq234, label %switch.case235, label %next_if238, !dbg !2598

switch.case235:                                   ; preds = %next_if
  %120 = load double, ptr %y, align 8, !dbg !2599
  %121 = load i32, ptr %d, align 4, !dbg !2601
  %sifp236 = sitofp i32 %121 to double, !dbg !2601
  %122 = load double, ptr %scale, align 8, !dbg !2602
  %fdiv = fdiv double %122, 1.600000e+01, !dbg !2602
  store double %fdiv, ptr %scale, align 8, !dbg !2602
  %fmul237 = fmul double %sifp236, %fdiv, !dbg !2601
  %fadd = fadd double %120, %fmul237, !dbg !2599
  store double %fadd, ptr %y, align 8, !dbg !2599
  store i8 1, ptr %got_tail, align 1, !dbg !2603
  br label %switch.exit249, !dbg !2603

next_if238:                                       ; preds = %next_if
  %123 = load i32, ptr %d, align 4, !dbg !2604
  %i2b239 = icmp ne i32 %123, 0, !dbg !2604
  br i1 %i2b239, label %and.rhs240, label %and.phi242, !dbg !2604

and.rhs240:                                       ; preds = %next_if238
  %124 = load i8, ptr %got_tail, align 1, !dbg !2605
  %125 = trunc i8 %124 to i1, !dbg !2605
  %not241 = xor i1 %125, true, !dbg !2605
  br label %and.phi242, !dbg !2605

and.phi242:                                       ; preds = %and.rhs240, %next_if238
  %val243 = phi i1 [ false, %next_if238 ], [ %not241, %and.rhs240 ], !dbg !2605
  %eq244 = icmp eq i1 %val243, %115, !dbg !2605
  br i1 %eq244, label %switch.case245, label %next_if248, !dbg !2605

switch.case245:                                   ; preds = %and.phi242
  %126 = load double, ptr %y, align 8, !dbg !2606
  %127 = load double, ptr %scale, align 8, !dbg !2608
  %fmul246 = fmul double 5.000000e-01, %127, !dbg !2609
  %fadd247 = fadd double %126, %fmul246, !dbg !2606
  store double %fadd247, ptr %y, align 8, !dbg !2606
  store i8 1, ptr %got_tail, align 1, !dbg !2610
  br label %switch.exit249, !dbg !2610

next_if248:                                       ; preds = %and.phi242
  br label %switch.exit249, !dbg !2610

switch.exit249:                                   ; preds = %next_if248, %switch.case245, %switch.case235, %switch.case231
  %128 = load i64, ptr %dc, align 8, !dbg !2611
  %add250 = add i64 %128, 1, !dbg !2611
  store i64 %add250, ptr %dc, align 8, !dbg !2611
  br label %if.exit251, !dbg !2611

if.exit251:                                       ; preds = %switch.exit249, %if.exit216
  %129 = load i64, ptr %index, align 8, !dbg !2612
  %130 = load i64, ptr %last_char, align 8, !dbg !2613
  %eq252 = icmp eq i64 %129, %130, !dbg !2612
  br i1 %eq252, label %if.then253, label %if.exit254, !dbg !2612

if.then253:                                       ; preds = %if.exit251
  br label %loop.exit267, !dbg !2614

if.exit254:                                       ; preds = %if.exit251
  %ptradd255 = getelementptr inbounds i8, ptr %chars125, i64 8, !dbg !2615
  %131 = load i64, ptr %ptradd255, align 8, !dbg !2615
  %132 = load ptr, ptr %chars125, align 8, !dbg !2615
  %133 = load i64, ptr %index, align 8, !dbg !2616
  %add256 = add i64 %133, 1, !dbg !2616
  store i64 %add256, ptr %index, align 8, !dbg !2616
  %ge257 = icmp uge i64 %add256, %131, !dbg !2616
  %134 = call i1 @llvm.expect.i1(i1 %ge257, i1 false), !dbg !2616
  br i1 %134, label %panic258, label %checkok265, !dbg !2616

checkok265:                                       ; preds = %if.exit254
  %ptradd266 = getelementptr inbounds i8, ptr %132, i64 %add256, !dbg !2617
  %135 = load i8, ptr %ptradd266, align 1, !dbg !2617
  store i8 %135, ptr %c, align 1, !dbg !2617
  br label %loop.cond197, !dbg !2617

loop.exit267:                                     ; preds = %if.then253, %or.phi210
  %136 = load i8, ptr %got_digit, align 1, !dbg !2618
  %137 = trunc i8 %136 to i1, !dbg !2618
  %not268 = xor i1 %137, true, !dbg !2618
  br i1 %not268, label %if.then269, label %if.exit270, !dbg !2618

if.then269:                                       ; preds = %loop.exit267
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2619
  br label %err_retblock, !dbg !2619

if.exit270:                                       ; preds = %loop.exit267
  %138 = load i8, ptr %got_rad, align 1, !dbg !2620
  %139 = trunc i8 %138 to i1, !dbg !2620
  %not271 = xor i1 %139, true, !dbg !2620
  br i1 %not271, label %if.then272, label %if.exit273, !dbg !2620

if.then272:                                       ; preds = %if.exit270
  %140 = load i64, ptr %dc, align 8, !dbg !2621
  store i64 %140, ptr %rp, align 8, !dbg !2621
  br label %if.exit273, !dbg !2621

if.exit273:                                       ; preds = %if.then272, %if.exit270
  br label %loop.cond274, !dbg !2622

loop.cond274:                                     ; preds = %loop.body276, %if.exit273
  %141 = load i64, ptr %dc, align 8, !dbg !2623
  %lt275 = icmp slt i64 %141, 8, !dbg !2623
  br i1 %lt275, label %loop.body276, label %loop.exit279, !dbg !2623

loop.body276:                                     ; preds = %loop.cond274
  %142 = load i32, ptr %x, align 4, !dbg !2625
  %mul277 = mul i32 %142, 16, !dbg !2625
  store i32 %mul277, ptr %x, align 4, !dbg !2625
  %143 = load i64, ptr %dc, align 8, !dbg !2626
  %add278 = add i64 %143, 1, !dbg !2626
  store i64 %add278, ptr %dc, align 8, !dbg !2626
  br label %loop.cond274, !dbg !2626

loop.exit279:                                     ; preds = %loop.cond274
    #dbg_declare(ptr %e2, !2627, !DIExpression(), !2628)
  store i64 0, ptr %e2, align 8, !dbg !2628
  %144 = load i8, ptr %c, align 1, !dbg !2629
  %zext280 = zext i8 %144 to i32, !dbg !2629
  %or281 = or i32 %zext280, 32, !dbg !2629
  %eq282 = icmp eq i32 %or281, 112, !dbg !2629
  %check283 = icmp sge i32 %or281, 0, !dbg !2629
  %siui-eq284 = and i1 %check283, %eq282, !dbg !2629
  br i1 %siui-eq284, label %if.then285, label %if.exit304, !dbg !2629

if.then285:                                       ; preds = %loop.exit279
    #dbg_declare(ptr %e2val, !2630, !DIExpression(), !2632)
  %145 = load %"char[]", ptr %chars125, align 8, !dbg !2633
  %146 = extractvalue %"char[]" %145, 0, !dbg !2633
  %147 = load i64, ptr %index, align 8, !dbg !2634
  %add286 = add i64 %147, 1, !dbg !2634
  %148 = extractvalue %"char[]" %145, 1, !dbg !2634
  %gt287 = icmp sgt i64 %add286, %148, !dbg !2634
  %149 = call i1 @llvm.expect.i1(i1 %gt287, i1 false), !dbg !2634
  br i1 %149, label %panic288, label %checkok295, !dbg !2634

checkok295:                                       ; preds = %if.then285
  %underflow = icmp slt i64 %add286, 0, !dbg !2635
  %150 = call i1 @llvm.expect.i1(i1 %underflow, i1 false), !dbg !2635
  br i1 %150, label %panic296, label %checkok301, !dbg !2635

checkok301:                                       ; preds = %checkok295
  %size302 = sub i64 %148, %add286, !dbg !2634
  %ptradd303 = getelementptr inbounds i8, ptr %146, i64 %add286, !dbg !2634
  %151 = insertvalue %"char[]" undef, ptr %ptradd303, 0, !dbg !2634
  %152 = insertvalue %"char[]" %151, i64 %size302, 1, !dbg !2634
  %153 = call i64 @std.core.String.to_long(ptr %retparam, ptr %ptradd303, i64 %size302, i32 10), !dbg !2636
  %not_err = icmp eq i64 %153, 0, !dbg !2636
  %154 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2636
  br i1 %154, label %after_check, label %else_block, !dbg !2636

after_check:                                      ; preds = %checkok301
  %155 = load i64, ptr %retparam, align 8, !dbg !2636
  br label %phi_block, !dbg !2636

else_block:                                       ; preds = %checkok301
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %error_var, align 8, !dbg !2637
  br label %guard_block, !dbg !2637

guard_block:                                      ; preds = %else_block
  %156 = load i64, ptr %error_var, align 8, !dbg !2637
  store i64 %156, ptr %reterr, align 8, !dbg !2637
  br label %err_retblock, !dbg !2637

phi_block:                                        ; preds = %after_check
  store i64 %155, ptr %e2val, align 8, !dbg !2637
  %157 = load i64, ptr %e2val, align 8, !dbg !2638
  store i64 %157, ptr %e2, align 8, !dbg !2638
  br label %if.exit304, !dbg !2638

if.exit304:                                       ; preds = %phi_block, %loop.exit279
  %158 = load i64, ptr %e2, align 8, !dbg !2639
  %159 = load i64, ptr %rp, align 8, !dbg !2640
  %mul305 = mul i64 4, %159, !dbg !2641
  %sub306 = sub i64 %mul305, 32, !dbg !2641
  %add307 = add i64 %158, %sub306, !dbg !2639
  store i64 %add307, ptr %e2, align 8, !dbg !2639
  %160 = load i32, ptr %x, align 4, !dbg !2642
  %i2nb308 = icmp eq i32 %160, 0, !dbg !2642
  br i1 %i2nb308, label %if.then309, label %if.exit312, !dbg !2642

if.then309:                                       ; preds = %if.exit304
  %161 = load i32, ptr %sign126, align 4, !dbg !2643
  %sifp310 = sitofp i32 %161 to double, !dbg !2643
  %fmul311 = fmul double %sifp310, 0.000000e+00, !dbg !2643
  store double %fmul311, ptr %blockret127, align 8, !dbg !2643
  br label %expr_block.exit379, !dbg !2643

if.exit312:                                       ; preds = %if.exit304
  %162 = load i64, ptr %e2, align 8, !dbg !2644
  %gt313 = icmp sgt i64 %162, 1074, !dbg !2644
  br i1 %gt313, label %if.then314, label %if.exit315, !dbg !2644

if.then314:                                       ; preds = %if.exit312
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !2645
  br label %err_retblock, !dbg !2645

if.exit315:                                       ; preds = %if.exit312
  %163 = load i64, ptr %e2, align 8, !dbg !2646
  %lt316 = icmp slt i64 %163, -1180, !dbg !2646
  br i1 %lt316, label %if.then317, label %if.exit318, !dbg !2646

if.then317:                                       ; preds = %if.exit315
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !2647
  br label %err_retblock, !dbg !2647

if.exit318:                                       ; preds = %if.exit315
  br label %loop.cond319, !dbg !2648

loop.cond319:                                     ; preds = %if.exit330, %if.exit318
  %164 = load i32, ptr %x, align 4, !dbg !2649
  %lt320 = icmp ult i32 %164, -2147483648, !dbg !2649
  br i1 %lt320, label %loop.body321, label %loop.exit332, !dbg !2649

loop.body321:                                     ; preds = %loop.cond319
  %165 = load double, ptr %y, align 8, !dbg !2651
  %ge322 = fcmp oge double %165, 5.000000e-01, !dbg !2651
  br i1 %ge322, label %if.then323, label %if.else327, !dbg !2651

if.then323:                                       ; preds = %loop.body321
  %166 = load i32, ptr %x, align 4, !dbg !2653
  %167 = load i32, ptr %x, align 4, !dbg !2655
  %add324 = add i32 %167, 1, !dbg !2655
  %add325 = add i32 %166, %add324, !dbg !2653
  store i32 %add325, ptr %x, align 4, !dbg !2653
  %168 = load double, ptr %y, align 8, !dbg !2656
  %169 = load double, ptr %y, align 8, !dbg !2657
  %fsub = fsub double %169, 1.000000e+00, !dbg !2657
  %fadd326 = fadd double %168, %fsub, !dbg !2656
  store double %fadd326, ptr %y, align 8, !dbg !2656
  br label %if.exit330, !dbg !2656

if.else327:                                       ; preds = %loop.body321
  %170 = load i32, ptr %x, align 4, !dbg !2658
  %171 = load i32, ptr %x, align 4, !dbg !2660
  %add328 = add i32 %170, %171, !dbg !2658
  store i32 %add328, ptr %x, align 4, !dbg !2658
  %172 = load double, ptr %y, align 8, !dbg !2661
  %173 = load double, ptr %y, align 8, !dbg !2662
  %fadd329 = fadd double %172, %173, !dbg !2661
  store double %fadd329, ptr %y, align 8, !dbg !2661
  br label %if.exit330, !dbg !2661

if.exit330:                                       ; preds = %if.else327, %if.then323
  %174 = load i64, ptr %e2, align 8, !dbg !2663
  %sub331 = sub i64 %174, 1, !dbg !2663
  store i64 %sub331, ptr %e2, align 8, !dbg !2663
  br label %loop.cond319, !dbg !2663

loop.exit332:                                     ; preds = %loop.cond319
    #dbg_declare(ptr %bits, !2664, !DIExpression(), !2665)
  store i32 53, ptr %bits, align 4, !dbg !2666
  %175 = load i64, ptr %e2, align 8, !dbg !2667
  %add333 = add i64 32, %175, !dbg !2668
  %sub334 = sub i64 %add333, -1074, !dbg !2668
  %gt335 = icmp sgt i64 53, %sub334, !dbg !2669
  br i1 %gt335, label %if.then336, label %if.exit342, !dbg !2669

if.then336:                                       ; preds = %loop.exit332
  %176 = load i64, ptr %e2, align 8, !dbg !2670
  %add337 = add i64 32, %176, !dbg !2672
  %sub338 = sub i64 %add337, -1074, !dbg !2673
  %trunc = trunc i64 %sub338 to i32, !dbg !2673
  store i32 %trunc, ptr %bits, align 4, !dbg !2673
  %177 = load i32, ptr %bits, align 4, !dbg !2674
  %lt339 = icmp slt i32 %177, 0, !dbg !2674
  br i1 %lt339, label %if.then340, label %if.exit341, !dbg !2674

if.then340:                                       ; preds = %if.then336
  store i32 0, ptr %bits, align 4, !dbg !2675
  br label %if.exit341, !dbg !2675

if.exit341:                                       ; preds = %if.then340, %if.then336
  br label %if.exit342, !dbg !2675

if.exit342:                                       ; preds = %if.exit341, %loop.exit332
    #dbg_declare(ptr %bias, !2676, !DIExpression(), !2677)
  store double 0.000000e+00, ptr %bias, align 8, !dbg !2677
  %178 = load i32, ptr %bits, align 4, !dbg !2678
  %lt343 = icmp slt i32 %178, 53, !dbg !2678
  br i1 %lt343, label %if.then344, label %if.exit351, !dbg !2678

if.then344:                                       ; preds = %if.exit342
  store double 1.000000e+00, ptr %x345, align 8
  %179 = load i32, ptr %bits, align 4, !dbg !2679
  %sub346 = sub i32 85, %179, !dbg !2681
  %sub347 = sub i32 %sub346, 1, !dbg !2681
  store i32 %sub347, ptr %n, align 4
  %180 = load double, ptr %x345, align 8, !dbg !2682
  %181 = load i32, ptr %n, align 4, !dbg !2682
  %182 = call double @scalbn(double %180, i32 %181), !dbg !2686
  store double %182, ptr %mag, align 8
  %183 = load i32, ptr %sign126, align 4, !dbg !2687
  %sifp348 = sitofp i32 %183 to double, !dbg !2687
  store double %sifp348, ptr %sgn, align 8
  %184 = load double, ptr %mag, align 8
  store double %184, ptr %x349, align 8
  %185 = load double, ptr %sgn, align 8
  store double %185, ptr %y350, align 8
  %186 = load double, ptr %x349, align 8, !dbg !2688
  %187 = load double, ptr %sgn, align 8, !dbg !2694
  %188 = call double @llvm.copysign.f64(double %186, double %187), !dbg !2694
  store double %188, ptr %bias, align 8, !dbg !2694
  br label %if.exit351, !dbg !2694

if.exit351:                                       ; preds = %if.then344, %if.exit342
  %189 = load i32, ptr %bits, align 4, !dbg !2695
  %lt352 = icmp slt i32 %189, 32, !dbg !2695
  br i1 %lt352, label %and.rhs353, label %and.phi355, !dbg !2695

and.rhs353:                                       ; preds = %if.exit351
  %190 = load double, ptr %y, align 8, !dbg !2696
  %neq354 = fcmp one double %190, 0.000000e+00, !dbg !2696
  br label %and.phi355, !dbg !2696

and.phi355:                                       ; preds = %and.rhs353, %if.exit351
  %val356 = phi i1 [ false, %if.exit351 ], [ %neq354, %and.rhs353 ], !dbg !2696
  br i1 %val356, label %and.rhs357, label %and.phi359, !dbg !2696

and.rhs357:                                       ; preds = %and.phi355
  %191 = load i32, ptr %x, align 4, !dbg !2697
  %and = and i32 %191, 1, !dbg !2698
  %i2nb358 = icmp eq i32 %and, 0, !dbg !2698
  br label %and.phi359, !dbg !2698

and.phi359:                                       ; preds = %and.rhs357, %and.phi355
  %val360 = phi i1 [ false, %and.phi355 ], [ %i2nb358, %and.rhs357 ], !dbg !2698
  br i1 %val360, label %if.then361, label %if.exit363, !dbg !2698

if.then361:                                       ; preds = %and.phi359
  %192 = load i32, ptr %x, align 4, !dbg !2699
  %add362 = add i32 %192, 1, !dbg !2699
  store i32 %add362, ptr %x, align 4, !dbg !2699
  store double 0.000000e+00, ptr %y, align 8, !dbg !2701
  br label %if.exit363, !dbg !2701

if.exit363:                                       ; preds = %if.then361, %and.phi359
  %193 = load double, ptr %bias, align 8, !dbg !2702
  %194 = load i32, ptr %sign126, align 4, !dbg !2703
  %sifp364 = sitofp i32 %194 to double, !dbg !2703
  %195 = load i32, ptr %x, align 4, !dbg !2704
  %uifp = uitofp i32 %195 to double, !dbg !2704
  %fmul365 = fmul double %sifp364, %uifp, !dbg !2703
  %fadd366 = fadd double %193, %fmul365, !dbg !2702
  %196 = load i32, ptr %sign126, align 4, !dbg !2705
  %sifp367 = sitofp i32 %196 to double, !dbg !2705
  %197 = load double, ptr %y, align 8, !dbg !2706
  %fmul368 = fmul double %sifp367, %197, !dbg !2705
  %fadd369 = fadd double %fadd366, %fmul368, !dbg !2702
  store double %fadd369, ptr %y, align 8, !dbg !2702
  %198 = load double, ptr %y, align 8, !dbg !2707
  %199 = load double, ptr %bias, align 8, !dbg !2708
  %fsub370 = fsub double %198, %199, !dbg !2707
  store double %fsub370, ptr %y, align 8, !dbg !2707
  %200 = load double, ptr %y, align 8, !dbg !2709
  %neq371 = fcmp one double %200, 0.000000e+00, !dbg !2709
  %not372 = xor i1 %neq371, true, !dbg !2709
  br i1 %not372, label %if.then373, label %if.exit374, !dbg !2709

if.then373:                                       ; preds = %if.exit363
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !2710
  br label %err_retblock, !dbg !2710

if.exit374:                                       ; preds = %if.exit363
  %201 = load double, ptr %y, align 8
  store double %201, ptr %x375, align 8
  %202 = load i64, ptr %e2, align 8, !dbg !2711
  %trunc376 = trunc i64 %202 to i32, !dbg !2711
  store i32 %trunc376, ptr %n377, align 4
  %203 = load double, ptr %x375, align 8, !dbg !2712
  %204 = load i32, ptr %n377, align 4, !dbg !2712
  %205 = call double @scalbn(double %203, i32 %204), !dbg !2715
  store double %205, ptr %blockret127, align 8, !dbg !2715
  br label %expr_block.exit379, !dbg !2715

expr_block.exit379:                               ; preds = %if.exit374, %if.then309, %if.exit152, %if.then144
  %206 = load double, ptr %blockret127, align 8, !dbg !2715
  store double %206, ptr %blockret, align 8, !dbg !2715
  br label %expr_block.exit1646, !dbg !2715

if.exit380:                                       ; preds = %and.phi111
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %chars381, ptr align 8 %chars, i32 16, i1 false)
  %207 = load i32, ptr %sign, align 4
  store i32 %207, ptr %sign382, align 4
  %ptradd384 = getelementptr inbounds i8, ptr %chars381, i64 8, !dbg !2716
  %208 = load i64, ptr %ptradd384, align 8, !dbg !2716
  %lt385 = icmp ult i64 0, %208, !dbg !2716
  br i1 %lt385, label %assert_ok, label %assert_fail, !dbg !2716

assert_fail:                                      ; preds = %if.exit380
  %209 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2716
  call void %209(ptr @.panic_msg.82, i64 34, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 35) #5, !dbg !2716
  unreachable, !dbg !2716

assert_ok:                                        ; preds = %if.exit380
    #dbg_declare(ptr %x386, !2720, !DIExpression(), !2724)
  call void @llvm.memset.p0.i64(ptr align 16 %x386, i8 0, i64 512, i1 false), !dbg !2724
    #dbg_declare(ptr %emax, !2725, !DIExpression(), !2726)
  store i32 1024, ptr %emax, align 4, !dbg !2727
    #dbg_declare(ptr %index387, !2728, !DIExpression(), !2729)
  store i64 0, ptr %index387, align 8, !dbg !2729
    #dbg_declare(ptr %got_digit388, !2730, !DIExpression(), !2731)
  %ptradd389 = getelementptr inbounds i8, ptr %chars381, i64 8, !dbg !2732
  %210 = load i64, ptr %ptradd389, align 8, !dbg !2732
  %211 = load ptr, ptr %chars381, align 8, !dbg !2732
  %ge390 = icmp sge i64 0, %210, !dbg !2733
  %212 = call i1 @llvm.expect.i1(i1 %ge390, i1 false), !dbg !2733
  br i1 %212, label %panic391, label %checkok398, !dbg !2733

checkok398:                                       ; preds = %assert_ok
  %213 = load i8, ptr %211, align 1, !dbg !2733
  %eq399 = icmp eq i8 %213, 48, !dbg !2732
  %214 = zext i1 %eq399 to i8, !dbg !2732
  store i8 %214, ptr %got_digit388, align 1, !dbg !2732
    #dbg_declare(ptr %got_rad400, !2734, !DIExpression(), !2735)
  store i8 0, ptr %got_rad400, align 1, !dbg !2735
    #dbg_declare(ptr %lrp, !2736, !DIExpression(), !2737)
  store i64 0, ptr %lrp, align 8, !dbg !2737
    #dbg_declare(ptr %dc401, !2738, !DIExpression(), !2739)
  store i64 0, ptr %dc401, align 8, !dbg !2739
    #dbg_declare(ptr %k, !2740, !DIExpression(), !2741)
  store i32 0, ptr %k, align 4, !dbg !2741
    #dbg_declare(ptr %j, !2742, !DIExpression(), !2743)
  store i32 0, ptr %j, align 4, !dbg !2743
    #dbg_declare(ptr %lnz, !2744, !DIExpression(), !2745)
  store i32 0, ptr %lnz, align 4, !dbg !2745
    #dbg_declare(ptr %len402, !2746, !DIExpression(), !2747)
  %ptradd403 = getelementptr inbounds i8, ptr %chars381, i64 8, !dbg !2748
  %215 = load i64, ptr %ptradd403, align 8, !dbg !2748
  store i64 %215, ptr %len402, align 8, !dbg !2748
    #dbg_declare(ptr %last_char404, !2749, !DIExpression(), !2750)
  %216 = load i64, ptr %len402, align 8, !dbg !2751
  %sub405 = sub i64 %216, 1, !dbg !2751
  store i64 %sub405, ptr %last_char404, align 8, !dbg !2751
  %217 = load i64, ptr %len402, align 8, !dbg !2752
  %i2b406 = icmp ne i64 %217, 0, !dbg !2752
  br i1 %i2b406, label %assert_ok408, label %assert_fail407, !dbg !2752

assert_fail407:                                   ; preds = %checkok398
  %218 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2752
  call void %218(ptr @.panic_msg.83, i64 16, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 52) #5, !dbg !2752
  unreachable, !dbg !2752

assert_ok408:                                     ; preds = %checkok398
    #dbg_declare(ptr %c409, !2753, !DIExpression(), !2754)
  br label %loop.cond410, !dbg !2755

loop.cond410:                                     ; preds = %if.exit428, %assert_ok408
  %ptradd411 = getelementptr inbounds i8, ptr %chars381, i64 8, !dbg !2756
  %219 = load i64, ptr %ptradd411, align 8, !dbg !2756
  %220 = load ptr, ptr %chars381, align 8, !dbg !2756
  %221 = load i64, ptr %index387, align 8, !dbg !2758
  %ge412 = icmp uge i64 %221, %219, !dbg !2758
  %222 = call i1 @llvm.expect.i1(i1 %ge412, i1 false), !dbg !2758
  br i1 %222, label %panic413, label %checkok420, !dbg !2758

checkok420:                                       ; preds = %loop.cond410
  %ptradd421 = getelementptr inbounds i8, ptr %220, i64 %221, !dbg !2758
  %223 = load i8, ptr %ptradd421, align 1, !dbg !2758
  store i8 %223, ptr %c409, align 1, !dbg !2758
  %eq422 = icmp eq i8 %223, 48, !dbg !2759
  br i1 %eq422, label %loop.body423, label %loop.exit430, !dbg !2759

loop.body423:                                     ; preds = %checkok420
  %224 = load i64, ptr %index387, align 8, !dbg !2760
  %225 = load i64, ptr %last_char404, align 8, !dbg !2762
  %eq424 = icmp eq i64 %224, %225, !dbg !2760
  br i1 %eq424, label %if.then425, label %if.exit428, !dbg !2760

if.then425:                                       ; preds = %loop.body423
  %226 = load i32, ptr %sign382, align 4, !dbg !2763
  %sifp426 = sitofp i32 %226 to double, !dbg !2763
  %fmul427 = fmul double %sifp426, 0.000000e+00, !dbg !2763
  store double %fmul427, ptr %blockret383, align 8, !dbg !2763
  br label %expr_block.exit1645, !dbg !2763

if.exit428:                                       ; preds = %loop.body423
  %227 = load i64, ptr %index387, align 8, !dbg !2764
  %add429 = add i64 %227, 1, !dbg !2764
  store i64 %add429, ptr %index387, align 8, !dbg !2764
  br label %loop.cond410, !dbg !2764

loop.exit430:                                     ; preds = %checkok420
  %228 = load i8, ptr %c409, align 1, !dbg !2765
  %eq431 = icmp eq i8 %228, 46, !dbg !2765
  br i1 %eq431, label %if.then432, label %if.exit482, !dbg !2765

if.then432:                                       ; preds = %loop.exit430
  store i8 1, ptr %got_rad400, align 1, !dbg !2766
  %229 = load i64, ptr %index387, align 8, !dbg !2768
  %230 = load i64, ptr %last_char404, align 8, !dbg !2769
  %eq433 = icmp eq i64 %229, %230, !dbg !2768
  br i1 %eq433, label %if.then434, label %if.exit440, !dbg !2768

if.then434:                                       ; preds = %if.then432
  %231 = load i8, ptr %got_digit388, align 1, !dbg !2770
  %232 = trunc i8 %231 to i1, !dbg !2770
  %not435 = xor i1 %232, true, !dbg !2770
  br i1 %not435, label %if.then436, label %if.exit437, !dbg !2770

if.then436:                                       ; preds = %if.then434
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2772
  br label %err_retblock, !dbg !2772

if.exit437:                                       ; preds = %if.then434
  %233 = load i32, ptr %sign382, align 4, !dbg !2773
  %sifp438 = sitofp i32 %233 to double, !dbg !2773
  %fmul439 = fmul double %sifp438, 0.000000e+00, !dbg !2773
  store double %fmul439, ptr %blockret383, align 8, !dbg !2773
  br label %expr_block.exit1645, !dbg !2773

if.exit440:                                       ; preds = %if.then432
  %234 = load i64, ptr %index387, align 8, !dbg !2774
  %235 = load i64, ptr %last_char404, align 8, !dbg !2775
  %neq441 = icmp ne i64 %234, %235, !dbg !2774
  br i1 %neq441, label %and.rhs442, label %and.phi456, !dbg !2774

and.rhs442:                                       ; preds = %if.exit440
  %ptradd443 = getelementptr inbounds i8, ptr %chars381, i64 8, !dbg !2776
  %236 = load i64, ptr %ptradd443, align 8, !dbg !2776
  %237 = load ptr, ptr %chars381, align 8, !dbg !2776
  %238 = load i64, ptr %index387, align 8, !dbg !2777
  %add444 = add i64 %238, 1, !dbg !2777
  store i64 %add444, ptr %index387, align 8, !dbg !2777
  %ge445 = icmp uge i64 %add444, %236, !dbg !2777
  %239 = call i1 @llvm.expect.i1(i1 %ge445, i1 false), !dbg !2777
  br i1 %239, label %panic446, label %checkok453, !dbg !2777

checkok453:                                       ; preds = %and.rhs442
  %ptradd454 = getelementptr inbounds i8, ptr %237, i64 %add444, !dbg !2778
  %240 = load i8, ptr %ptradd454, align 1, !dbg !2778
  store i8 %240, ptr %c409, align 1, !dbg !2778
  %eq455 = icmp eq i8 %240, 48, !dbg !2779
  br label %and.phi456, !dbg !2779

and.phi456:                                       ; preds = %checkok453, %if.exit440
  %val457 = phi i1 [ false, %if.exit440 ], [ %eq455, %checkok453 ], !dbg !2779
  br i1 %val457, label %if.then458, label %if.exit481, !dbg !2779

if.then458:                                       ; preds = %and.phi456
  %241 = load i64, ptr %lrp, align 8, !dbg !2780
  %sub459 = sub i64 %241, 1, !dbg !2780
  store i64 %sub459, ptr %lrp, align 8, !dbg !2780
  store i8 1, ptr %got_digit388, align 1, !dbg !2782
  br label %loop.cond460, !dbg !2783

loop.cond460:                                     ; preds = %loop.body478, %if.then458
  %242 = load i64, ptr %last_char404, align 8, !dbg !2784
  %243 = load i64, ptr %index387, align 8, !dbg !2786
  %neq461 = icmp ne i64 %242, %243, !dbg !2784
  br i1 %neq461, label %and.rhs462, label %and.phi476, !dbg !2784

and.rhs462:                                       ; preds = %loop.cond460
  %ptradd463 = getelementptr inbounds i8, ptr %chars381, i64 8, !dbg !2787
  %244 = load i64, ptr %ptradd463, align 8, !dbg !2787
  %245 = load ptr, ptr %chars381, align 8, !dbg !2787
  %246 = load i64, ptr %index387, align 8, !dbg !2788
  %add464 = add i64 %246, 1, !dbg !2788
  store i64 %add464, ptr %index387, align 8, !dbg !2788
  %ge465 = icmp uge i64 %add464, %244, !dbg !2788
  %247 = call i1 @llvm.expect.i1(i1 %ge465, i1 false), !dbg !2788
  br i1 %247, label %panic466, label %checkok473, !dbg !2788

checkok473:                                       ; preds = %and.rhs462
  %ptradd474 = getelementptr inbounds i8, ptr %245, i64 %add464, !dbg !2789
  %248 = load i8, ptr %ptradd474, align 1, !dbg !2789
  store i8 %248, ptr %c409, align 1, !dbg !2789
  %eq475 = icmp eq i8 %248, 48, !dbg !2790
  br label %and.phi476, !dbg !2790

and.phi476:                                       ; preds = %checkok473, %loop.cond460
  %val477 = phi i1 [ false, %loop.cond460 ], [ %eq475, %checkok473 ], !dbg !2790
  br i1 %val477, label %loop.body478, label %loop.exit480, !dbg !2790

loop.body478:                                     ; preds = %and.phi476
  %249 = load i64, ptr %lrp, align 8, !dbg !2791
  %sub479 = sub i64 %249, 1, !dbg !2791
  store i64 %sub479, ptr %lrp, align 8, !dbg !2791
  br label %loop.cond460, !dbg !2791

loop.exit480:                                     ; preds = %and.phi476
  br label %if.exit481, !dbg !2791

if.exit481:                                       ; preds = %loop.exit480, %and.phi456
  br label %if.exit482, !dbg !2791

if.exit482:                                       ; preds = %if.exit481, %loop.exit430
  br label %loop.cond483, !dbg !2793

loop.cond483:                                     ; preds = %checkok599, %if.exit482
  %250 = load i8, ptr %c409, align 1, !dbg !2794
  %zext484 = zext i8 %250 to i32, !dbg !2794
  %sub485 = sub i32 %zext484, 48, !dbg !2794
  %lt486 = icmp ult i32 %sub485, 10, !dbg !2794
  br i1 %lt486, label %or.phi489, label %or.rhs487, !dbg !2794

or.rhs487:                                        ; preds = %loop.cond483
  %251 = load i8, ptr %c409, align 1, !dbg !2796
  %eq488 = icmp eq i8 %251, 46, !dbg !2796
  br label %or.phi489, !dbg !2796

or.phi489:                                        ; preds = %or.rhs487, %loop.cond483
  %val490 = phi i1 [ true, %loop.cond483 ], [ %eq488, %or.rhs487 ], !dbg !2796
  br i1 %val490, label %loop.body491, label %loop.exit601, !dbg !2796

loop.body491:                                     ; preds = %or.phi489
  store i8 1, ptr %switch492, align 1
  br label %switch.entry493

switch.entry493:                                  ; preds = %loop.body491
  %252 = load i8, ptr %switch492, align 1
  %253 = trunc i8 %252 to i1
  %254 = load i8, ptr %c409, align 1, !dbg !2797
  %eq494 = icmp eq i8 %254, 46, !dbg !2797
  %eq495 = icmp eq i1 %eq494, %253, !dbg !2797
  br i1 %eq495, label %switch.case496, label %next_if499, !dbg !2797

switch.case496:                                   ; preds = %switch.entry493
  %255 = load i8, ptr %got_rad400, align 1, !dbg !2800
  %256 = trunc i8 %255 to i1, !dbg !2800
  br i1 %256, label %if.then497, label %if.exit498, !dbg !2800

if.then497:                                       ; preds = %switch.case496
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2802
  br label %err_retblock, !dbg !2802

if.exit498:                                       ; preds = %switch.case496
  store i8 1, ptr %got_rad400, align 1, !dbg !2803
  %257 = load i64, ptr %dc401, align 8, !dbg !2804
  store i64 %257, ptr %lrp, align 8, !dbg !2804
  br label %switch.exit582, !dbg !2804

next_if499:                                       ; preds = %switch.entry493
  %258 = load i32, ptr %k, align 4, !dbg !2805
  %lt500 = icmp slt i32 %258, 125, !dbg !2805
  %eq501 = icmp eq i1 %lt500, %253, !dbg !2805
  br i1 %eq501, label %switch.case502, label %next_if575, !dbg !2805

switch.case502:                                   ; preds = %next_if499
  %259 = load i64, ptr %dc401, align 8, !dbg !2806
  %add503 = add i64 %259, 1, !dbg !2806
  store i64 %add503, ptr %dc401, align 8, !dbg !2806
  %260 = load i8, ptr %c409, align 1, !dbg !2808
  %neq504 = icmp ne i8 %260, 48, !dbg !2808
  br i1 %neq504, label %if.then505, label %if.exit507, !dbg !2808

if.then505:                                       ; preds = %switch.case502
  %261 = load i64, ptr %dc401, align 8, !dbg !2809
  %trunc506 = trunc i64 %261 to i32, !dbg !2809
  store i32 %trunc506, ptr %lnz, align 4, !dbg !2809
  br label %if.exit507, !dbg !2809

if.exit507:                                       ; preds = %if.then505, %switch.case502
  %262 = load i32, ptr %j, align 4, !dbg !2810
  %i2b508 = icmp ne i32 %262, 0, !dbg !2810
  br i1 %i2b508, label %if.then509, label %if.else548, !dbg !2810

if.then509:                                       ; preds = %if.exit507
  %263 = load i32, ptr %k, align 4, !dbg !2811
  %sext = sext i32 %263 to i64, !dbg !2811
  %lt510 = icmp slt i64 %sext, 0, !dbg !2811
  %264 = call i1 @llvm.expect.i1(i1 %lt510, i1 false), !dbg !2811
  br i1 %264, label %panic511, label %checkok516, !dbg !2811

checkok516:                                       ; preds = %if.then509
  %ge517 = icmp sge i64 %sext, 128, !dbg !2811
  %265 = call i1 @llvm.expect.i1(i1 %ge517, i1 false), !dbg !2811
  br i1 %265, label %panic518, label %checkok525, !dbg !2811

checkok525:                                       ; preds = %checkok516
  %ptroffset = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext, !dbg !2811
  %266 = load i32, ptr %k, align 4, !dbg !2813
  %sext526 = sext i32 %266 to i64, !dbg !2813
  %lt527 = icmp slt i64 %sext526, 0, !dbg !2813
  %267 = call i1 @llvm.expect.i1(i1 %lt527, i1 false), !dbg !2813
  br i1 %267, label %panic528, label %checkok533, !dbg !2813

checkok533:                                       ; preds = %checkok525
  %ge534 = icmp sge i64 %sext526, 128, !dbg !2813
  %268 = call i1 @llvm.expect.i1(i1 %ge534, i1 false), !dbg !2813
  br i1 %268, label %panic535, label %checkok542, !dbg !2813

checkok542:                                       ; preds = %checkok533
  %ptroffset543 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext526, !dbg !2813
  %269 = load i32, ptr %ptroffset543, align 4, !dbg !2813
  %mul544 = mul i32 %269, 10, !dbg !2814
  %270 = load i8, ptr %c409, align 1, !dbg !2815
  %zext545 = zext i8 %270 to i32, !dbg !2815
  %add546 = add i32 %mul544, %zext545, !dbg !2814
  %sub547 = sub i32 %add546, 48, !dbg !2814
  store i32 %sub547, ptr %ptroffset, align 4, !dbg !2814
  br label %if.exit569, !dbg !2814

if.else548:                                       ; preds = %if.exit507
  %271 = load i32, ptr %k, align 4, !dbg !2816
  %sext549 = sext i32 %271 to i64, !dbg !2816
  %lt550 = icmp slt i64 %sext549, 0, !dbg !2816
  %272 = call i1 @llvm.expect.i1(i1 %lt550, i1 false), !dbg !2816
  br i1 %272, label %panic551, label %checkok556, !dbg !2816

checkok556:                                       ; preds = %if.else548
  %ge557 = icmp sge i64 %sext549, 128, !dbg !2816
  %273 = call i1 @llvm.expect.i1(i1 %ge557, i1 false), !dbg !2816
  br i1 %273, label %panic558, label %checkok565, !dbg !2816

checkok565:                                       ; preds = %checkok556
  %ptroffset566 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext549, !dbg !2816
  %274 = load i8, ptr %c409, align 1, !dbg !2818
  %zext567 = zext i8 %274 to i32, !dbg !2818
  %sub568 = sub i32 %zext567, 48, !dbg !2818
  store i32 %sub568, ptr %ptroffset566, align 4, !dbg !2818
  br label %if.exit569, !dbg !2818

if.exit569:                                       ; preds = %checkok565, %checkok542
  %275 = load i32, ptr %j, align 4, !dbg !2819
  %add570 = add i32 %275, 1, !dbg !2819
  store i32 %add570, ptr %j, align 4, !dbg !2819
  %eq571 = icmp eq i32 %add570, 9, !dbg !2820
  br i1 %eq571, label %if.then572, label %if.exit574, !dbg !2820

if.then572:                                       ; preds = %if.exit569
  %276 = load i32, ptr %k, align 4, !dbg !2821
  %add573 = add i32 %276, 1, !dbg !2821
  store i32 %add573, ptr %k, align 4, !dbg !2821
  store i32 0, ptr %j, align 4, !dbg !2823
  br label %if.exit574, !dbg !2823

if.exit574:                                       ; preds = %if.then572, %if.exit569
  store i8 1, ptr %got_digit388, align 1, !dbg !2824
  br label %switch.exit582, !dbg !2824

next_if575:                                       ; preds = %next_if499
  br label %switch.default, !dbg !2824

switch.default:                                   ; preds = %next_if575
  %277 = load i64, ptr %dc401, align 8, !dbg !2825
  %add576 = add i64 %277, 1, !dbg !2825
  store i64 %add576, ptr %dc401, align 8, !dbg !2825
  %278 = load i8, ptr %c409, align 1, !dbg !2827
  %neq577 = icmp ne i8 %278, 48, !dbg !2827
  br i1 %neq577, label %if.then578, label %if.exit581, !dbg !2827

if.then578:                                       ; preds = %switch.default
  %ptradd579 = getelementptr inbounds i8, ptr %x386, i64 496, !dbg !2828
  %279 = load i32, ptr %ptradd579, align 4, !dbg !2828
  %or580 = or i32 %279, 1, !dbg !2829
  store i32 %or580, ptr %ptradd579, align 4, !dbg !2829
  br label %if.exit581, !dbg !2829

if.exit581:                                       ; preds = %if.then578, %switch.default
  br label %switch.exit582, !dbg !2829

switch.exit582:                                   ; preds = %if.exit581, %if.exit574, %if.exit498
  %280 = load i64, ptr %index387, align 8, !dbg !2830
  %281 = load i64, ptr %last_char404, align 8, !dbg !2831
  %eq583 = icmp eq i64 %280, %281, !dbg !2830
  br i1 %eq583, label %if.then584, label %if.exit585, !dbg !2830

if.then584:                                       ; preds = %switch.exit582
  br label %loop.exit601, !dbg !2832

if.exit585:                                       ; preds = %switch.exit582
  %282 = load i64, ptr %index387, align 8, !dbg !2833
  %283 = load i64, ptr %last_char404, align 8, !dbg !2834
  %lt586 = icmp ult i64 %282, %283, !dbg !2833
  br i1 %lt586, label %assert_ok588, label %assert_fail587, !dbg !2833

assert_fail587:                                   ; preds = %if.exit585
  %284 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2833
  call void %284(ptr @.panic_msg.83, i64 16, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 112) #5, !dbg !2833
  unreachable, !dbg !2833

assert_ok588:                                     ; preds = %if.exit585
  %ptradd589 = getelementptr inbounds i8, ptr %chars381, i64 8, !dbg !2835
  %285 = load i64, ptr %ptradd589, align 8, !dbg !2835
  %286 = load ptr, ptr %chars381, align 8, !dbg !2835
  %287 = load i64, ptr %index387, align 8, !dbg !2836
  %add590 = add i64 %287, 1, !dbg !2836
  store i64 %add590, ptr %index387, align 8, !dbg !2836
  %ge591 = icmp uge i64 %add590, %285, !dbg !2836
  %288 = call i1 @llvm.expect.i1(i1 %ge591, i1 false), !dbg !2836
  br i1 %288, label %panic592, label %checkok599, !dbg !2836

checkok599:                                       ; preds = %assert_ok588
  %ptradd600 = getelementptr inbounds i8, ptr %286, i64 %add590, !dbg !2837
  %289 = load i8, ptr %ptradd600, align 1, !dbg !2837
  store i8 %289, ptr %c409, align 1, !dbg !2837
  br label %loop.cond483, !dbg !2837

loop.exit601:                                     ; preds = %if.then584, %or.phi489
  %290 = load i8, ptr %got_rad400, align 1, !dbg !2838
  %291 = trunc i8 %290 to i1, !dbg !2838
  %not602 = xor i1 %291, true, !dbg !2838
  br i1 %not602, label %if.then603, label %if.exit604, !dbg !2838

if.then603:                                       ; preds = %loop.exit601
  %292 = load i64, ptr %dc401, align 8, !dbg !2839
  store i64 %292, ptr %lrp, align 8, !dbg !2839
  br label %if.exit604, !dbg !2839

if.exit604:                                       ; preds = %if.then603, %loop.exit601
  %293 = load i8, ptr %got_digit388, align 1, !dbg !2840
  %294 = trunc i8 %293 to i1, !dbg !2840
  %not605 = xor i1 %294, true, !dbg !2840
  br i1 %not605, label %if.then606, label %if.exit607, !dbg !2840

if.then606:                                       ; preds = %if.exit604
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2841
  br label %err_retblock, !dbg !2841

if.exit607:                                       ; preds = %if.exit604
  %295 = load i8, ptr %c409, align 1, !dbg !2842
  %zext608 = zext i8 %295 to i32, !dbg !2842
  %or609 = or i32 %zext608, 32, !dbg !2842
  %eq610 = icmp eq i32 %or609, 101, !dbg !2842
  %check611 = icmp sge i32 %or609, 0, !dbg !2842
  %siui-eq612 = and i1 %check611, %eq610, !dbg !2842
  br i1 %siui-eq612, label %if.then613, label %if.else644, !dbg !2842

if.then613:                                       ; preds = %if.exit607
  %296 = load i64, ptr %last_char404, align 8, !dbg !2843
  %297 = load i64, ptr %index387, align 8, !dbg !2845
  %eq614 = icmp eq i64 %296, %297, !dbg !2843
  br i1 %eq614, label %if.then615, label %if.exit616, !dbg !2843

if.then615:                                       ; preds = %if.then613
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2846
  br label %err_retblock, !dbg !2846

if.exit616:                                       ; preds = %if.then613
    #dbg_declare(ptr %e10, !2847, !DIExpression(), !2848)
  %298 = load %"char[]", ptr %chars381, align 8, !dbg !2849
  %299 = extractvalue %"char[]" %298, 0, !dbg !2849
  %300 = load i64, ptr %index387, align 8, !dbg !2850
  %add617 = add i64 %300, 1, !dbg !2850
  %301 = extractvalue %"char[]" %298, 1, !dbg !2850
  %gt618 = icmp sgt i64 %add617, %301, !dbg !2850
  %302 = call i1 @llvm.expect.i1(i1 %gt618, i1 false), !dbg !2850
  br i1 %302, label %panic619, label %checkok626, !dbg !2850

checkok626:                                       ; preds = %if.exit616
  %underflow627 = icmp slt i64 %add617, 0, !dbg !2851
  %303 = call i1 @llvm.expect.i1(i1 %underflow627, i1 false), !dbg !2851
  br i1 %303, label %panic628, label %checkok633, !dbg !2851

checkok633:                                       ; preds = %checkok626
  %size634 = sub i64 %301, %add617, !dbg !2850
  %ptradd635 = getelementptr inbounds i8, ptr %299, i64 %add617, !dbg !2850
  %304 = insertvalue %"char[]" undef, ptr %ptradd635, 0, !dbg !2850
  %305 = insertvalue %"char[]" %304, i64 %size634, 1, !dbg !2850
  %306 = call i64 @std.core.String.to_long(ptr %retparam636, ptr %ptradd635, i64 %size634, i32 10), !dbg !2852
  %not_err637 = icmp eq i64 %306, 0, !dbg !2852
  %307 = call i1 @llvm.expect.i1(i1 %not_err637, i1 true), !dbg !2852
  br i1 %307, label %after_check638, label %else_block639, !dbg !2852

after_check638:                                   ; preds = %checkok633
  %308 = load i64, ptr %retparam636, align 8, !dbg !2852
  br label %phi_block642, !dbg !2852

else_block639:                                    ; preds = %checkok633
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %error_var640, align 8, !dbg !2853
  br label %guard_block641, !dbg !2853

guard_block641:                                   ; preds = %else_block639
  %309 = load i64, ptr %error_var640, align 8, !dbg !2853
  store i64 %309, ptr %reterr, align 8, !dbg !2853
  br label %err_retblock, !dbg !2853

phi_block642:                                     ; preds = %after_check638
  store i64 %308, ptr %e10, align 8, !dbg !2853
  %310 = load i64, ptr %lrp, align 8, !dbg !2854
  %311 = load i64, ptr %e10, align 8, !dbg !2855
  %add643 = add i64 %310, %311, !dbg !2854
  store i64 %add643, ptr %lrp, align 8, !dbg !2854
  br label %if.exit648, !dbg !2854

if.else644:                                       ; preds = %if.exit607
  %312 = load i64, ptr %index387, align 8, !dbg !2856
  %313 = load i64, ptr %last_char404, align 8, !dbg !2857
  %neq645 = icmp ne i64 %312, %313, !dbg !2856
  br i1 %neq645, label %if.then646, label %if.exit647, !dbg !2856

if.then646:                                       ; preds = %if.else644
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2858
  br label %err_retblock, !dbg !2858

if.exit647:                                       ; preds = %if.else644
  br label %if.exit648, !dbg !2858

if.exit648:                                       ; preds = %if.exit647, %phi_block642
  %314 = load i32, ptr %x386, align 4, !dbg !2860
  %i2nb649 = icmp eq i32 %314, 0, !dbg !2860
  br i1 %i2nb649, label %if.then650, label %if.exit653, !dbg !2860

if.then650:                                       ; preds = %if.exit648
  %315 = load i32, ptr %sign382, align 4, !dbg !2861
  %sifp651 = sitofp i32 %315 to double, !dbg !2861
  %fmul652 = fmul double %sifp651, 0.000000e+00, !dbg !2861
  store double %fmul652, ptr %blockret383, align 8, !dbg !2861
  br label %expr_block.exit1645, !dbg !2861

if.exit653:                                       ; preds = %if.exit648
  %316 = load i64, ptr %lrp, align 8, !dbg !2862
  %317 = load i64, ptr %dc401, align 8, !dbg !2863
  %eq654 = icmp eq i64 %316, %317, !dbg !2862
  br i1 %eq654, label %and.rhs655, label %and.phi657, !dbg !2862

and.rhs655:                                       ; preds = %if.exit653
  %318 = load i64, ptr %dc401, align 8, !dbg !2864
  %lt656 = icmp slt i64 %318, 10, !dbg !2864
  br label %and.phi657, !dbg !2864

and.phi657:                                       ; preds = %and.rhs655, %if.exit653
  %val658 = phi i1 [ false, %if.exit653 ], [ %lt656, %and.rhs655 ], !dbg !2864
  br i1 %val658, label %and.rhs659, label %and.phi665, !dbg !2864

and.rhs659:                                       ; preds = %and.phi657
  br i1 true, label %or.phi663, label %or.rhs660, !dbg !2865

or.rhs660:                                        ; preds = %and.rhs659
  %319 = load i32, ptr %x386, align 4, !dbg !2866
  %zext661 = zext i32 %319 to i64, !dbg !2866
  %lshr = lshr i64 %zext661, 53, !dbg !2867
  %320 = freeze i64 %lshr, !dbg !2867
  %eq662 = icmp eq i64 0, %320, !dbg !2867
  br label %or.phi663, !dbg !2867

or.phi663:                                        ; preds = %or.rhs660, %and.rhs659
  %val664 = phi i1 [ true, %and.rhs659 ], [ %eq662, %or.rhs660 ], !dbg !2867
  br label %and.phi665, !dbg !2867

and.phi665:                                       ; preds = %or.phi663, %and.phi657
  %val666 = phi i1 [ false, %and.phi657 ], [ %val664, %or.phi663 ], !dbg !2867
  br i1 %val666, label %if.then667, label %if.exit671, !dbg !2867

if.then667:                                       ; preds = %and.phi665
  %321 = load i32, ptr %sign382, align 4, !dbg !2868
  %sifp668 = sitofp i32 %321 to double, !dbg !2868
  %322 = load i32, ptr %x386, align 4, !dbg !2869
  %uifp669 = uitofp i32 %322 to double, !dbg !2869
  %fmul670 = fmul double %sifp668, %uifp669, !dbg !2868
  store double %fmul670, ptr %blockret383, align 8, !dbg !2868
  br label %expr_block.exit1645, !dbg !2868

if.exit671:                                       ; preds = %and.phi665
  %323 = load i64, ptr %lrp, align 8, !dbg !2870
  %gt672 = icmp sgt i64 %323, 537, !dbg !2870
  br i1 %gt672, label %if.then673, label %if.exit674, !dbg !2870

if.then673:                                       ; preds = %if.exit671
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !2871
  br label %err_retblock, !dbg !2871

if.exit674:                                       ; preds = %if.exit671
  %324 = load i64, ptr %lrp, align 8, !dbg !2872
  %lt675 = icmp slt i64 %324, -1180, !dbg !2872
  br i1 %lt675, label %if.then676, label %if.exit677, !dbg !2872

if.then676:                                       ; preds = %if.exit674
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !2873
  br label %err_retblock, !dbg !2873

if.exit677:                                       ; preds = %if.exit674
  %325 = load i32, ptr %j, align 4, !dbg !2874
  %i2b678 = icmp ne i32 %325, 0, !dbg !2874
  br i1 %i2b678, label %if.then679, label %if.exit705, !dbg !2874

if.then679:                                       ; preds = %if.exit677
  br label %loop.cond680, !dbg !2875

loop.cond680:                                     ; preds = %checkok699, %if.then679
  %326 = load i32, ptr %j, align 4, !dbg !2877
  %lt681 = icmp slt i32 %326, 9, !dbg !2877
  br i1 %lt681, label %loop.body682, label %loop.exit703, !dbg !2877

loop.body682:                                     ; preds = %loop.cond680
  %327 = load i32, ptr %k, align 4, !dbg !2879
  %sext683 = sext i32 %327 to i64, !dbg !2879
  %lt684 = icmp slt i64 %sext683, 0, !dbg !2879
  %328 = call i1 @llvm.expect.i1(i1 %lt684, i1 false), !dbg !2879
  br i1 %328, label %panic685, label %checkok690, !dbg !2879

checkok690:                                       ; preds = %loop.body682
  %ge691 = icmp sge i64 %sext683, 128, !dbg !2879
  %329 = call i1 @llvm.expect.i1(i1 %ge691, i1 false), !dbg !2879
  br i1 %329, label %panic692, label %checkok699, !dbg !2879

checkok699:                                       ; preds = %checkok690
  %ptroffset700 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext683, !dbg !2879
  %330 = load i32, ptr %ptroffset700, align 4, !dbg !2879
  %mul701 = mul i32 %330, 10, !dbg !2880
  store i32 %mul701, ptr %ptroffset700, align 4, !dbg !2880
  %331 = load i32, ptr %j, align 4, !dbg !2881
  %add702 = add i32 %331, 1, !dbg !2881
  store i32 %add702, ptr %j, align 4, !dbg !2881
  br label %loop.cond680, !dbg !2881

loop.exit703:                                     ; preds = %loop.cond680
  %332 = load i32, ptr %k, align 4, !dbg !2882
  %add704 = add i32 %332, 1, !dbg !2882
  store i32 %add704, ptr %k, align 4, !dbg !2882
  store i32 0, ptr %j, align 4, !dbg !2883
  br label %if.exit705, !dbg !2883

if.exit705:                                       ; preds = %loop.exit703, %if.exit677
    #dbg_declare(ptr %a, !2884, !DIExpression(), !2885)
  store i32 0, ptr %a, align 4, !dbg !2885
    #dbg_declare(ptr %z, !2886, !DIExpression(), !2887)
  %333 = load i32, ptr %k, align 4, !dbg !2888
  store i32 %333, ptr %z, align 4, !dbg !2888
    #dbg_declare(ptr %e2706, !2889, !DIExpression(), !2890)
  store i32 0, ptr %e2706, align 4, !dbg !2890
    #dbg_declare(ptr %rp707, !2891, !DIExpression(), !2892)
  %334 = load i64, ptr %lrp, align 8, !dbg !2893
  store i64 %334, ptr %rp707, align 8, !dbg !2893
  %335 = load i32, ptr %lnz, align 4, !dbg !2894
  %lt708 = icmp slt i32 %335, 9, !dbg !2894
  br i1 %lt708, label %and.rhs709, label %and.phi711, !dbg !2894

and.rhs709:                                       ; preds = %if.exit705
  %336 = load i32, ptr %lnz, align 4, !dbg !2895
  %sext710 = sext i32 %336 to i64, !dbg !2895
  %337 = load i64, ptr %rp707, align 8, !dbg !2896
  %le = icmp sle i64 %sext710, %337, !dbg !2895
  br label %and.phi711, !dbg !2895

and.phi711:                                       ; preds = %and.rhs709, %if.exit705
  %val712 = phi i1 [ false, %if.exit705 ], [ %le, %and.rhs709 ], !dbg !2895
  br i1 %val712, label %and.rhs713, label %and.phi715, !dbg !2895

and.rhs713:                                       ; preds = %and.phi711
  %338 = load i64, ptr %rp707, align 8, !dbg !2897
  %lt714 = icmp slt i64 %338, 18, !dbg !2897
  br label %and.phi715, !dbg !2897

and.phi715:                                       ; preds = %and.rhs713, %and.phi711
  %val716 = phi i1 [ false, %and.phi711 ], [ %lt714, %and.rhs713 ], !dbg !2897
  br i1 %val716, label %if.then717, label %if.exit793, !dbg !2897

if.then717:                                       ; preds = %and.phi715
  %339 = load i64, ptr %rp707, align 8, !dbg !2898
  %eq718 = icmp eq i64 %339, 9, !dbg !2898
  br i1 %eq718, label %if.then719, label %if.exit723, !dbg !2898

if.then719:                                       ; preds = %if.then717
  %340 = load i32, ptr %sign382, align 4, !dbg !2900
  %sifp720 = sitofp i32 %340 to double, !dbg !2900
  %341 = load i32, ptr %x386, align 4, !dbg !2901
  %uifp721 = uitofp i32 %341 to double, !dbg !2901
  %fmul722 = fmul double %sifp720, %uifp721, !dbg !2900
  store double %fmul722, ptr %blockret383, align 8, !dbg !2900
  br label %expr_block.exit1645, !dbg !2900

if.exit723:                                       ; preds = %if.then717
  %342 = load i64, ptr %rp707, align 8, !dbg !2902
  %lt724 = icmp slt i64 %342, 9, !dbg !2902
  br i1 %lt724, label %if.then725, label %if.exit751, !dbg !2902

if.then725:                                       ; preds = %if.exit723
  %343 = load i32, ptr %sign382, align 4, !dbg !2903
  %sifp726 = sitofp i32 %343 to double, !dbg !2903
  %344 = load i32, ptr %x386, align 4, !dbg !2904
  %uifp727 = uitofp i32 %344 to double, !dbg !2904
  %fmul728 = fmul double %sifp726, %uifp727, !dbg !2903
  %345 = load i64, ptr %rp707, align 8, !dbg !2905
  %sub729 = sub i64 8, %345, !dbg !2906
  %lt730 = icmp slt i64 %sub729, 0, !dbg !2906
  %346 = call i1 @llvm.expect.i1(i1 %lt730, i1 false), !dbg !2906
  br i1 %346, label %panic731, label %checkok736, !dbg !2906

checkok736:                                       ; preds = %if.then725
  %ge737 = icmp sge i64 %sub729, 8, !dbg !2906
  %347 = call i1 @llvm.expect.i1(i1 %ge737, i1 false), !dbg !2906
  br i1 %347, label %panic738, label %checkok745, !dbg !2906

checkok745:                                       ; preds = %checkok736
  %ptroffset746 = getelementptr inbounds [4 x i8], ptr @to_double.P10S, i64 %sub729, !dbg !2906
  %348 = load i32, ptr %ptroffset746, align 4, !dbg !2906
  %sifp747 = sitofp i32 %348 to double, !dbg !2906
  %zero = fcmp ueq double %sifp747, 0.000000e+00, !dbg !2903
  %349 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !2903
  br i1 %349, label %panic748, label %checkok749, !dbg !2903

checkok749:                                       ; preds = %checkok745
  %fdiv750 = fdiv double %fmul728, %sifp747, !dbg !2903
  store double %fdiv750, ptr %blockret383, align 8, !dbg !2903
  br label %expr_block.exit1645, !dbg !2903

if.exit751:                                       ; preds = %if.exit723
    #dbg_declare(ptr %bitlim, !2907, !DIExpression(), !2908)
  %350 = load i64, ptr %rp707, align 8, !dbg !2909
  %sub752 = sub i64 %350, 9, !dbg !2910
  %trunc753 = trunc i64 %sub752 to i32, !dbg !2910
  %mul754 = mul i32 3, %trunc753, !dbg !2911
  %sub755 = sub i32 53, %mul754, !dbg !2912
  store i32 %sub755, ptr %bitlim, align 4, !dbg !2912
  %351 = load i32, ptr %bitlim, align 4, !dbg !2913
  %gt756 = icmp sgt i32 %351, 30, !dbg !2913
  br i1 %gt756, label %or.phi766, label %or.rhs757, !dbg !2913

or.rhs757:                                        ; preds = %if.exit751
  %352 = load i32, ptr %x386, align 4, !dbg !2914
  %353 = load i32, ptr %bitlim, align 4, !dbg !2915
  %shift_exceeds = icmp uge i32 %353, 32, !dbg !2916
  %354 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !2916
  br i1 %354, label %panic758, label %checkok763, !dbg !2916

checkok763:                                       ; preds = %or.rhs757
  %lshr764 = lshr i32 %352, %353, !dbg !2916
  %355 = freeze i32 %lshr764, !dbg !2916
  %eq765 = icmp eq i32 0, %355, !dbg !2916
  br label %or.phi766, !dbg !2916

or.phi766:                                        ; preds = %checkok763, %if.exit751
  %val767 = phi i1 [ true, %if.exit751 ], [ %eq765, %checkok763 ], !dbg !2916
  br i1 %val767, label %if.then768, label %if.exit792, !dbg !2916

if.then768:                                       ; preds = %or.phi766
  %356 = load i32, ptr %sign382, align 4, !dbg !2917
  %sifp769 = sitofp i32 %356 to double, !dbg !2917
  %357 = load i32, ptr %x386, align 4, !dbg !2918
  %uifp770 = uitofp i32 %357 to double, !dbg !2918
  %fmul771 = fmul double %sifp769, %uifp770, !dbg !2917
  %358 = load i64, ptr %rp707, align 8, !dbg !2919
  %sub772 = sub i64 %358, 10, !dbg !2919
  %lt773 = icmp slt i64 %sub772, 0, !dbg !2919
  %359 = call i1 @llvm.expect.i1(i1 %lt773, i1 false), !dbg !2919
  br i1 %359, label %panic774, label %checkok779, !dbg !2919

checkok779:                                       ; preds = %if.then768
  %ge780 = icmp sge i64 %sub772, 8, !dbg !2919
  %360 = call i1 @llvm.expect.i1(i1 %ge780, i1 false), !dbg !2919
  br i1 %360, label %panic781, label %checkok788, !dbg !2919

checkok788:                                       ; preds = %checkok779
  %ptroffset789 = getelementptr inbounds [4 x i8], ptr @to_double.P10S, i64 %sub772, !dbg !2919
  %361 = load i32, ptr %ptroffset789, align 4, !dbg !2919
  %sifp790 = sitofp i32 %361 to double, !dbg !2919
  %fmul791 = fmul double %fmul771, %sifp790, !dbg !2917
  store double %fmul791, ptr %blockret383, align 8, !dbg !2917
  br label %expr_block.exit1645, !dbg !2917

if.exit792:                                       ; preds = %or.phi766
  br label %if.exit793, !dbg !2917

if.exit793:                                       ; preds = %if.exit792, %and.phi715
  %362 = load i64, ptr %rp707, align 8, !dbg !2920
  %smod = srem i64 %362, 9, !dbg !2920
  %i2b794 = icmp ne i64 %smod, 0, !dbg !2920
  br i1 %i2b794, label %if.then795, label %if.exit943, !dbg !2920

if.then795:                                       ; preds = %if.exit793
    #dbg_declare(ptr %rpm9, !2921, !DIExpression(), !2923)
  %363 = load i64, ptr %rp707, align 8, !dbg !2924
  %ge796 = icmp sge i64 %363, 0, !dbg !2924
  br i1 %ge796, label %cond.lhs, label %cond.rhs, !dbg !2924

cond.lhs:                                         ; preds = %if.then795
  %364 = load i64, ptr %rp707, align 8, !dbg !2925
  %smod797 = srem i64 %364, 9, !dbg !2925
  br label %cond.phi, !dbg !2925

cond.rhs:                                         ; preds = %if.then795
  %365 = load i64, ptr %rp707, align 8, !dbg !2926
  %smod798 = srem i64 %365, 9, !dbg !2926
  %add799 = add i64 %smod798, 9, !dbg !2926
  br label %cond.phi, !dbg !2926

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val800 = phi i64 [ %smod797, %cond.lhs ], [ %add799, %cond.rhs ], !dbg !2926
  store i64 %val800, ptr %rpm9, align 8, !dbg !2926
    #dbg_declare(ptr %p10, !2927, !DIExpression(), !2928)
  %366 = load i64, ptr %rpm9, align 8, !dbg !2929
  %sub801 = sub i64 8, %366, !dbg !2930
  %lt802 = icmp slt i64 %sub801, 0, !dbg !2930
  %367 = call i1 @llvm.expect.i1(i1 %lt802, i1 false), !dbg !2930
  br i1 %367, label %panic803, label %checkok808, !dbg !2930

checkok808:                                       ; preds = %cond.phi
  %ge809 = icmp sge i64 %sub801, 8, !dbg !2930
  %368 = call i1 @llvm.expect.i1(i1 %ge809, i1 false), !dbg !2930
  br i1 %368, label %panic810, label %checkok817, !dbg !2930

checkok817:                                       ; preds = %checkok808
  %ptroffset818 = getelementptr inbounds [4 x i8], ptr @to_double.P10S, i64 %sub801, !dbg !2930
  %369 = load i32, ptr %ptroffset818, align 4, !dbg !2930
  store i32 %369, ptr %p10, align 4, !dbg !2930
    #dbg_declare(ptr %carry, !2931, !DIExpression(), !2932)
  store i32 0, ptr %carry, align 4, !dbg !2933
  %370 = load i32, ptr %a, align 4, !dbg !2934
  store i32 %370, ptr %k, align 4, !dbg !2934
  br label %loop.cond819, !dbg !2934

loop.cond819:                                     ; preds = %if.exit916, %checkok817
  %371 = load i32, ptr %k, align 4, !dbg !2936
  %372 = load i32, ptr %z, align 4, !dbg !2937
  %neq820 = icmp ne i32 %371, %372, !dbg !2936
  br i1 %neq820, label %loop.body821, label %loop.exit918, !dbg !2936

loop.body821:                                     ; preds = %loop.cond819
    #dbg_declare(ptr %tmp, !2938, !DIExpression(), !2940)
  %373 = load i32, ptr %k, align 4, !dbg !2941
  %sext822 = sext i32 %373 to i64, !dbg !2941
  %lt823 = icmp slt i64 %sext822, 0, !dbg !2941
  %374 = call i1 @llvm.expect.i1(i1 %lt823, i1 false), !dbg !2941
  br i1 %374, label %panic824, label %checkok829, !dbg !2941

checkok829:                                       ; preds = %loop.body821
  %ge830 = icmp sge i64 %sext822, 128, !dbg !2941
  %375 = call i1 @llvm.expect.i1(i1 %ge830, i1 false), !dbg !2941
  br i1 %375, label %panic831, label %checkok838, !dbg !2941

checkok838:                                       ; preds = %checkok829
  %ptroffset839 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext822, !dbg !2941
  %376 = load i32, ptr %ptroffset839, align 4, !dbg !2941
  %377 = load i32, ptr %p10, align 4, !dbg !2942
  %zero840 = icmp eq i32 %377, 0, !dbg !2943
  %378 = call i1 @llvm.expect.i1(i1 %zero840, i1 false), !dbg !2943
  br i1 %378, label %panic841, label %checkok842, !dbg !2943

checkok842:                                       ; preds = %checkok838
  %smod843 = srem i32 %376, %377, !dbg !2943
  store i32 %smod843, ptr %tmp, align 4, !dbg !2943
  %379 = load i32, ptr %k, align 4, !dbg !2944
  %sext844 = sext i32 %379 to i64, !dbg !2944
  %lt845 = icmp slt i64 %sext844, 0, !dbg !2944
  %380 = call i1 @llvm.expect.i1(i1 %lt845, i1 false), !dbg !2944
  br i1 %380, label %panic846, label %checkok851, !dbg !2944

checkok851:                                       ; preds = %checkok842
  %ge852 = icmp sge i64 %sext844, 128, !dbg !2944
  %381 = call i1 @llvm.expect.i1(i1 %ge852, i1 false), !dbg !2944
  br i1 %381, label %panic853, label %checkok860, !dbg !2944

checkok860:                                       ; preds = %checkok851
  %ptroffset861 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext844, !dbg !2944
  %382 = load i32, ptr %k, align 4, !dbg !2945
  %sext862 = sext i32 %382 to i64, !dbg !2945
  %lt863 = icmp slt i64 %sext862, 0, !dbg !2945
  %383 = call i1 @llvm.expect.i1(i1 %lt863, i1 false), !dbg !2945
  br i1 %383, label %panic864, label %checkok869, !dbg !2945

checkok869:                                       ; preds = %checkok860
  %ge870 = icmp sge i64 %sext862, 128, !dbg !2945
  %384 = call i1 @llvm.expect.i1(i1 %ge870, i1 false), !dbg !2945
  br i1 %384, label %panic871, label %checkok878, !dbg !2945

checkok878:                                       ; preds = %checkok869
  %ptroffset879 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext862, !dbg !2945
  %385 = load i32, ptr %ptroffset879, align 4, !dbg !2945
  %386 = load i32, ptr %p10, align 4, !dbg !2946
  %zero880 = icmp eq i32 %386, 0, !dbg !2947
  %387 = call i1 @llvm.expect.i1(i1 %zero880, i1 false), !dbg !2947
  br i1 %387, label %panic881, label %checkok882, !dbg !2947

checkok882:                                       ; preds = %checkok878
  %sdiv = sdiv i32 %385, %386, !dbg !2947
  %388 = load i32, ptr %carry, align 4, !dbg !2948
  %add883 = add i32 %sdiv, %388, !dbg !2947
  store i32 %add883, ptr %ptroffset861, align 4, !dbg !2947
  %389 = load i32, ptr %p10, align 4, !dbg !2949
  %zero884 = icmp eq i32 %389, 0, !dbg !2950
  %390 = call i1 @llvm.expect.i1(i1 %zero884, i1 false), !dbg !2950
  br i1 %390, label %panic885, label %checkok886, !dbg !2950

checkok886:                                       ; preds = %checkok882
  %sdiv887 = sdiv i32 1000000000, %389, !dbg !2950
  %391 = load i32, ptr %tmp, align 4, !dbg !2951
  %mul888 = mul i32 %sdiv887, %391, !dbg !2950
  store i32 %mul888, ptr %carry, align 4, !dbg !2950
  %392 = load i32, ptr %k, align 4, !dbg !2952
  %393 = load i32, ptr %a, align 4, !dbg !2953
  %eq889 = icmp eq i32 %392, %393, !dbg !2952
  br i1 %eq889, label %and.rhs890, label %and.phi910, !dbg !2952

and.rhs890:                                       ; preds = %checkok886
  %394 = load i32, ptr %k, align 4, !dbg !2954
  %sext891 = sext i32 %394 to i64, !dbg !2954
  %lt892 = icmp slt i64 %sext891, 0, !dbg !2954
  %395 = call i1 @llvm.expect.i1(i1 %lt892, i1 false), !dbg !2954
  br i1 %395, label %panic893, label %checkok898, !dbg !2954

checkok898:                                       ; preds = %and.rhs890
  %ge899 = icmp sge i64 %sext891, 128, !dbg !2954
  %396 = call i1 @llvm.expect.i1(i1 %ge899, i1 false), !dbg !2954
  br i1 %396, label %panic900, label %checkok907, !dbg !2954

checkok907:                                       ; preds = %checkok898
  %ptroffset908 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext891, !dbg !2954
  %397 = load i32, ptr %ptroffset908, align 4, !dbg !2954
  %i2nb909 = icmp eq i32 %397, 0, !dbg !2954
  br label %and.phi910, !dbg !2954

and.phi910:                                       ; preds = %checkok907, %checkok886
  %val911 = phi i1 [ false, %checkok886 ], [ %i2nb909, %checkok907 ], !dbg !2954
  br i1 %val911, label %if.then912, label %if.exit916, !dbg !2954

if.then912:                                       ; preds = %and.phi910
  %398 = load i32, ptr %a, align 4, !dbg !2955
  %add913 = add i32 %398, 1, !dbg !2955
  %and914 = and i32 %add913, 127, !dbg !2955
  store i32 %and914, ptr %a, align 4, !dbg !2955
  %399 = load i64, ptr %rp707, align 8, !dbg !2957
  %sub915 = sub i64 %399, 9, !dbg !2957
  store i64 %sub915, ptr %rp707, align 8, !dbg !2957
  br label %if.exit916, !dbg !2957

if.exit916:                                       ; preds = %if.then912, %and.phi910
  %400 = load i32, ptr %k, align 4, !dbg !2958
  %add917 = add i32 %400, 1, !dbg !2958
  store i32 %add917, ptr %k, align 4, !dbg !2958
  br label %loop.cond819, !dbg !2958

loop.exit918:                                     ; preds = %loop.cond819
  %401 = load i32, ptr %carry, align 4, !dbg !2959
  %i2b919 = icmp ne i32 %401, 0, !dbg !2959
  br i1 %i2b919, label %if.then920, label %if.exit940, !dbg !2959

if.then920:                                       ; preds = %loop.exit918
  %402 = load i32, ptr %z, align 4, !dbg !2960
  %add921 = add i32 %402, 1, !dbg !2960
  store i32 %add921, ptr %z, align 4, !dbg !2960
  %sext922 = sext i32 %402 to i64, !dbg !2960
  %lt923 = icmp slt i64 %sext922, 0, !dbg !2960
  %403 = call i1 @llvm.expect.i1(i1 %lt923, i1 false), !dbg !2960
  br i1 %403, label %panic924, label %checkok929, !dbg !2960

checkok929:                                       ; preds = %if.then920
  %ge930 = icmp sge i64 %sext922, 128, !dbg !2960
  %404 = call i1 @llvm.expect.i1(i1 %ge930, i1 false), !dbg !2960
  br i1 %404, label %panic931, label %checkok938, !dbg !2960

checkok938:                                       ; preds = %checkok929
  %ptroffset939 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext922, !dbg !2960
  %405 = load i32, ptr %carry, align 4, !dbg !2961
  store i32 %405, ptr %ptroffset939, align 4, !dbg !2961
  br label %if.exit940, !dbg !2961

if.exit940:                                       ; preds = %checkok938, %loop.exit918
  %406 = load i64, ptr %rp707, align 8, !dbg !2962
  %407 = load i64, ptr %rpm9, align 8, !dbg !2963
  %sub941 = sub i64 9, %407, !dbg !2964
  %add942 = add i64 %406, %sub941, !dbg !2962
  store i64 %add942, ptr %rp707, align 8, !dbg !2962
  br label %if.exit943, !dbg !2962

if.exit943:                                       ; preds = %if.exit940, %if.exit793
  br label %loop.cond944, !dbg !2965

loop.cond944:                                     ; preds = %if.exit1149, %if.exit943
  %408 = load i64, ptr %rp707, align 8, !dbg !2966
  %lt945 = icmp slt i64 %408, 18, !dbg !2966
  br i1 %lt945, label %or.phi970, label %or.rhs946, !dbg !2966

or.rhs946:                                        ; preds = %loop.cond944
  %409 = load i64, ptr %rp707, align 8, !dbg !2968
  %eq947 = icmp eq i64 %409, 18, !dbg !2968
  br i1 %eq947, label %and.rhs948, label %and.phi968, !dbg !2968

and.rhs948:                                       ; preds = %or.rhs946
  %410 = load i32, ptr %a, align 4, !dbg !2969
  %sext949 = sext i32 %410 to i64, !dbg !2969
  %lt950 = icmp slt i64 %sext949, 0, !dbg !2969
  %411 = call i1 @llvm.expect.i1(i1 %lt950, i1 false), !dbg !2969
  br i1 %411, label %panic951, label %checkok956, !dbg !2969

checkok956:                                       ; preds = %and.rhs948
  %ge957 = icmp sge i64 %sext949, 128, !dbg !2969
  %412 = call i1 @llvm.expect.i1(i1 %ge957, i1 false), !dbg !2969
  br i1 %412, label %panic958, label %checkok965, !dbg !2969

checkok965:                                       ; preds = %checkok956
  %ptroffset966 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext949, !dbg !2969
  %413 = load i32, ptr %ptroffset966, align 4, !dbg !2969
  %lt967 = icmp ult i32 %413, 9007199, !dbg !2970
  br label %and.phi968, !dbg !2970

and.phi968:                                       ; preds = %checkok965, %or.rhs946
  %val969 = phi i1 [ false, %or.rhs946 ], [ %lt967, %checkok965 ], !dbg !2970
  br label %or.phi970, !dbg !2970

or.phi970:                                        ; preds = %and.phi968, %loop.cond944
  %val971 = phi i1 [ true, %loop.cond944 ], [ %val969, %and.phi968 ], !dbg !2970
  br i1 %val971, label %loop.body972, label %loop.exit1150, !dbg !2970

loop.body972:                                     ; preds = %or.phi970
    #dbg_declare(ptr %carry973, !2971, !DIExpression(), !2973)
  store i32 0, ptr %carry973, align 4, !dbg !2974
  %414 = load i32, ptr %e2706, align 4, !dbg !2975
  %sub974 = sub i32 %414, 29, !dbg !2975
  store i32 %sub974, ptr %e2706, align 4, !dbg !2975
  %415 = load i32, ptr %z, align 4, !dbg !2976
  %sub975 = sub i32 %415, 1, !dbg !2976
  %and976 = and i32 %sub975, 127, !dbg !2976
  store i32 %and976, ptr %k, align 4, !dbg !2976
  br label %loop.body977, !dbg !2976

loop.body977:                                     ; preds = %if.exit1078, %loop.body972
    #dbg_declare(ptr %tmp978, !2978, !DIExpression(), !2980)
  %416 = load i32, ptr %k, align 4, !dbg !2981
  %sext979 = sext i32 %416 to i64, !dbg !2981
  %lt980 = icmp slt i64 %sext979, 0, !dbg !2981
  %417 = call i1 @llvm.expect.i1(i1 %lt980, i1 false), !dbg !2981
  br i1 %417, label %panic981, label %checkok986, !dbg !2981

checkok986:                                       ; preds = %loop.body977
  %ge987 = icmp sge i64 %sext979, 128, !dbg !2981
  %418 = call i1 @llvm.expect.i1(i1 %ge987, i1 false), !dbg !2981
  br i1 %418, label %panic988, label %checkok995, !dbg !2981

checkok995:                                       ; preds = %checkok986
  %ptroffset996 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext979, !dbg !2981
  %419 = load i32, ptr %ptroffset996, align 4, !dbg !2981
  %zext997 = zext i32 %419 to i64, !dbg !2981
  %shl = shl i64 %zext997, 29, !dbg !2982
  %420 = freeze i64 %shl, !dbg !2982
  %421 = load i32, ptr %carry973, align 4, !dbg !2983
  %zext998 = zext i32 %421 to i64, !dbg !2983
  %add999 = add i64 %420, %zext998, !dbg !2982
  store i64 %add999, ptr %tmp978, align 8, !dbg !2982
  %422 = load i64, ptr %tmp978, align 8, !dbg !2984
  %lt1000 = icmp ult i64 1000000000, %422, !dbg !2984
  br i1 %lt1000, label %if.then1001, label %if.else1024, !dbg !2984

if.then1001:                                      ; preds = %checkok995
  %423 = load i64, ptr %tmp978, align 8, !dbg !2985
  %sdiv1002 = sdiv i64 %423, 1000000000, !dbg !2987
  %trunc1003 = trunc i64 %sdiv1002 to i32, !dbg !2987
  store i32 %trunc1003, ptr %carry973, align 4, !dbg !2987
  %424 = load i32, ptr %k, align 4, !dbg !2988
  %sext1004 = sext i32 %424 to i64, !dbg !2988
  %lt1005 = icmp slt i64 %sext1004, 0, !dbg !2988
  %425 = call i1 @llvm.expect.i1(i1 %lt1005, i1 false), !dbg !2988
  br i1 %425, label %panic1006, label %checkok1011, !dbg !2988

checkok1011:                                      ; preds = %if.then1001
  %ge1012 = icmp sge i64 %sext1004, 128, !dbg !2988
  %426 = call i1 @llvm.expect.i1(i1 %ge1012, i1 false), !dbg !2988
  br i1 %426, label %panic1013, label %checkok1020, !dbg !2988

checkok1020:                                      ; preds = %checkok1011
  %ptroffset1021 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1004, !dbg !2988
  %427 = load i64, ptr %tmp978, align 8, !dbg !2989
  %smod1022 = srem i64 %427, 1000000000, !dbg !2990
  %trunc1023 = trunc i64 %smod1022 to i32, !dbg !2990
  store i32 %trunc1023, ptr %ptroffset1021, align 4, !dbg !2990
  br label %if.exit1044, !dbg !2990

if.else1024:                                      ; preds = %checkok995
  store i32 0, ptr %carry973, align 4, !dbg !2991
  %428 = load i32, ptr %k, align 4, !dbg !2993
  %sext1025 = sext i32 %428 to i64, !dbg !2993
  %lt1026 = icmp slt i64 %sext1025, 0, !dbg !2993
  %429 = call i1 @llvm.expect.i1(i1 %lt1026, i1 false), !dbg !2993
  br i1 %429, label %panic1027, label %checkok1032, !dbg !2993

checkok1032:                                      ; preds = %if.else1024
  %ge1033 = icmp sge i64 %sext1025, 128, !dbg !2993
  %430 = call i1 @llvm.expect.i1(i1 %ge1033, i1 false), !dbg !2993
  br i1 %430, label %panic1034, label %checkok1041, !dbg !2993

checkok1041:                                      ; preds = %checkok1032
  %ptroffset1042 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1025, !dbg !2993
  %431 = load i64, ptr %tmp978, align 8, !dbg !2994
  %trunc1043 = trunc i64 %431 to i32, !dbg !2994
  store i32 %trunc1043, ptr %ptroffset1042, align 4, !dbg !2994
  br label %if.exit1044, !dbg !2994

if.exit1044:                                      ; preds = %checkok1041, %checkok1020
  %432 = load i32, ptr %k, align 4, !dbg !2995
  %433 = load i32, ptr %z, align 4, !dbg !2996
  %sub1045 = sub i32 %433, 1, !dbg !2996
  %and1046 = and i32 %sub1045, 127, !dbg !2996
  %eq1047 = icmp eq i32 %432, %and1046, !dbg !2995
  br i1 %eq1047, label %and.rhs1048, label %and.phi1050, !dbg !2995

and.rhs1048:                                      ; preds = %if.exit1044
  %434 = load i32, ptr %k, align 4, !dbg !2997
  %435 = load i32, ptr %a, align 4, !dbg !2998
  %neq1049 = icmp ne i32 %434, %435, !dbg !2997
  br label %and.phi1050, !dbg !2997

and.phi1050:                                      ; preds = %and.rhs1048, %if.exit1044
  %val1051 = phi i1 [ false, %if.exit1044 ], [ %neq1049, %and.rhs1048 ], !dbg !2997
  br i1 %val1051, label %and.rhs1052, label %and.phi1072, !dbg !2997

and.rhs1052:                                      ; preds = %and.phi1050
  %436 = load i32, ptr %k, align 4, !dbg !2999
  %sext1053 = sext i32 %436 to i64, !dbg !2999
  %lt1054 = icmp slt i64 %sext1053, 0, !dbg !2999
  %437 = call i1 @llvm.expect.i1(i1 %lt1054, i1 false), !dbg !2999
  br i1 %437, label %panic1055, label %checkok1060, !dbg !2999

checkok1060:                                      ; preds = %and.rhs1052
  %ge1061 = icmp sge i64 %sext1053, 128, !dbg !2999
  %438 = call i1 @llvm.expect.i1(i1 %ge1061, i1 false), !dbg !2999
  br i1 %438, label %panic1062, label %checkok1069, !dbg !2999

checkok1069:                                      ; preds = %checkok1060
  %ptroffset1070 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1053, !dbg !2999
  %439 = load i32, ptr %ptroffset1070, align 4, !dbg !2999
  %i2nb1071 = icmp eq i32 %439, 0, !dbg !2999
  br label %and.phi1072, !dbg !2999

and.phi1072:                                      ; preds = %checkok1069, %and.phi1050
  %val1073 = phi i1 [ false, %and.phi1050 ], [ %i2nb1071, %checkok1069 ], !dbg !2999
  br i1 %val1073, label %if.then1074, label %if.exit1075, !dbg !2999

if.then1074:                                      ; preds = %and.phi1072
  %440 = load i32, ptr %k, align 4, !dbg !3000
  store i32 %440, ptr %z, align 4, !dbg !3000
  br label %if.exit1075, !dbg !3000

if.exit1075:                                      ; preds = %if.then1074, %and.phi1072
  %441 = load i32, ptr %k, align 4, !dbg !3001
  %442 = load i32, ptr %a, align 4, !dbg !3002
  %eq1076 = icmp eq i32 %441, %442, !dbg !3001
  br i1 %eq1076, label %if.then1077, label %if.exit1078, !dbg !3001

if.then1077:                                      ; preds = %if.exit1075
  br label %loop.exit1081, !dbg !3003

if.exit1078:                                      ; preds = %if.exit1075
  %443 = load i32, ptr %k, align 4, !dbg !3004
  %sub1079 = sub i32 %443, 1, !dbg !3004
  %and1080 = and i32 %sub1079, 127, !dbg !3004
  store i32 %and1080, ptr %k, align 4, !dbg !3004
  br label %loop.body977, !dbg !3004

loop.exit1081:                                    ; preds = %if.then1077
  %444 = load i32, ptr %carry973, align 4, !dbg !3005
  %i2b1082 = icmp ne i32 %444, 0, !dbg !3005
  br i1 %i2b1082, label %if.then1083, label %if.exit1149, !dbg !3005

if.then1083:                                      ; preds = %loop.exit1081
  %445 = load i64, ptr %rp707, align 8, !dbg !3006
  %add1084 = add i64 %445, 9, !dbg !3006
  store i64 %add1084, ptr %rp707, align 8, !dbg !3006
  %446 = load i32, ptr %a, align 4, !dbg !3008
  %sub1085 = sub i32 %446, 1, !dbg !3008
  %and1086 = and i32 %sub1085, 127, !dbg !3008
  store i32 %and1086, ptr %a, align 4, !dbg !3008
  %447 = load i32, ptr %a, align 4, !dbg !3009
  %448 = load i32, ptr %z, align 4, !dbg !3010
  %eq1087 = icmp eq i32 %447, %448, !dbg !3009
  br i1 %eq1087, label %if.then1088, label %if.exit1130, !dbg !3009

if.then1088:                                      ; preds = %if.then1083
  %449 = load i32, ptr %z, align 4, !dbg !3011
  %sub1089 = sub i32 %449, 1, !dbg !3011
  %and1090 = and i32 %sub1089, 127, !dbg !3011
  store i32 %and1090, ptr %z, align 4, !dbg !3011
  %450 = load i32, ptr %z, align 4, !dbg !3013
  %sub1091 = sub i32 %450, 1, !dbg !3013
  %and1092 = and i32 %sub1091, 127, !dbg !3013
  %sext1093 = sext i32 %and1092 to i64, !dbg !3013
  %lt1094 = icmp slt i64 %sext1093, 0, !dbg !3013
  %451 = call i1 @llvm.expect.i1(i1 %lt1094, i1 false), !dbg !3013
  br i1 %451, label %panic1095, label %checkok1100, !dbg !3013

checkok1100:                                      ; preds = %if.then1088
  %ge1101 = icmp sge i64 %sext1093, 128, !dbg !3013
  %452 = call i1 @llvm.expect.i1(i1 %ge1101, i1 false), !dbg !3013
  br i1 %452, label %panic1102, label %checkok1109, !dbg !3013

checkok1109:                                      ; preds = %checkok1100
  %ptroffset1110 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1093, !dbg !3013
  %453 = load i32, ptr %ptroffset1110, align 4, !dbg !3013
  %454 = load i32, ptr %z, align 4, !dbg !3014
  %sext1111 = sext i32 %454 to i64, !dbg !3014
  %lt1112 = icmp slt i64 %sext1111, 0, !dbg !3014
  %455 = call i1 @llvm.expect.i1(i1 %lt1112, i1 false), !dbg !3014
  br i1 %455, label %panic1113, label %checkok1118, !dbg !3014

checkok1118:                                      ; preds = %checkok1109
  %ge1119 = icmp sge i64 %sext1111, 128, !dbg !3014
  %456 = call i1 @llvm.expect.i1(i1 %ge1119, i1 false), !dbg !3014
  br i1 %456, label %panic1120, label %checkok1127, !dbg !3014

checkok1127:                                      ; preds = %checkok1118
  %ptroffset1128 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1111, !dbg !3014
  %457 = load i32, ptr %ptroffset1128, align 4, !dbg !3014
  %or1129 = or i32 %453, %457, !dbg !3015
  store i32 %or1129, ptr %ptroffset1110, align 4, !dbg !3015
  br label %if.exit1130, !dbg !3015

if.exit1130:                                      ; preds = %checkok1127, %if.then1083
  %458 = load i32, ptr %a, align 4, !dbg !3016
  %sext1131 = sext i32 %458 to i64, !dbg !3016
  %lt1132 = icmp slt i64 %sext1131, 0, !dbg !3016
  %459 = call i1 @llvm.expect.i1(i1 %lt1132, i1 false), !dbg !3016
  br i1 %459, label %panic1133, label %checkok1138, !dbg !3016

checkok1138:                                      ; preds = %if.exit1130
  %ge1139 = icmp sge i64 %sext1131, 128, !dbg !3016
  %460 = call i1 @llvm.expect.i1(i1 %ge1139, i1 false), !dbg !3016
  br i1 %460, label %panic1140, label %checkok1147, !dbg !3016

checkok1147:                                      ; preds = %checkok1138
  %ptroffset1148 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1131, !dbg !3016
  %461 = load i32, ptr %carry973, align 4, !dbg !3017
  store i32 %461, ptr %ptroffset1148, align 4, !dbg !3017
  br label %if.exit1149, !dbg !3017

if.exit1149:                                      ; preds = %checkok1147, %loop.exit1081
  br label %loop.cond944, !dbg !3017

loop.exit1150:                                    ; preds = %or.phi970
  br label %loop.body1151, !dbg !3018

loop.body1151:                                    ; preds = %if.exit1434, %loop.exit1150
    #dbg_declare(ptr %carry1152, !3019, !DIExpression(), !3022)
  store i32 0, ptr %carry1152, align 4, !dbg !3023
    #dbg_declare(ptr %sh, !3024, !DIExpression(), !3025)
  store i32 1, ptr %sh, align 4, !dbg !3026
    #dbg_declare(ptr %i, !3027, !DIExpression(), !3028)
  store i32 0, ptr %i, align 4, !dbg !3028
  store i32 0, ptr %i, align 4, !dbg !3029
  br label %loop.cond1153, !dbg !3029

loop.cond1153:                                    ; preds = %if.exit1241, %loop.body1151
  %462 = load i32, ptr %i, align 4, !dbg !3031
  %lt1154 = icmp slt i32 %462, 2, !dbg !3031
  br i1 %lt1154, label %loop.body1155, label %loop.exit1243, !dbg !3031

loop.body1155:                                    ; preds = %loop.cond1153
  %463 = load i32, ptr %a, align 4, !dbg !3032
  %464 = load i32, ptr %i, align 4, !dbg !3034
  %add1156 = add i32 %463, %464, !dbg !3032
  %and1157 = and i32 %add1156, 127, !dbg !3032
  store i32 %and1157, ptr %k, align 4, !dbg !3032
  %465 = load i32, ptr %k, align 4, !dbg !3035
  %466 = load i32, ptr %z, align 4, !dbg !3036
  %eq1158 = icmp eq i32 %465, %466, !dbg !3035
  br i1 %eq1158, label %or.phi1197, label %or.rhs1159, !dbg !3035

or.rhs1159:                                       ; preds = %loop.body1155
  %467 = load i32, ptr %k, align 4, !dbg !3037
  %sext1160 = sext i32 %467 to i64, !dbg !3037
  %lt1161 = icmp slt i64 %sext1160, 0, !dbg !3037
  %468 = call i1 @llvm.expect.i1(i1 %lt1161, i1 false), !dbg !3037
  br i1 %468, label %panic1162, label %checkok1167, !dbg !3037

checkok1167:                                      ; preds = %or.rhs1159
  %ge1168 = icmp sge i64 %sext1160, 128, !dbg !3037
  %469 = call i1 @llvm.expect.i1(i1 %ge1168, i1 false), !dbg !3037
  br i1 %469, label %panic1169, label %checkok1176, !dbg !3037

checkok1176:                                      ; preds = %checkok1167
  %ptroffset1177 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1160, !dbg !3037
  %470 = load i32, ptr %ptroffset1177, align 4, !dbg !3037
  %471 = load i32, ptr %i, align 4, !dbg !3038
  %sext1178 = sext i32 %471 to i64, !dbg !3038
  %lt1179 = icmp slt i64 %sext1178, 0, !dbg !3038
  %472 = call i1 @llvm.expect.i1(i1 %lt1179, i1 false), !dbg !3038
  br i1 %472, label %panic1180, label %checkok1185, !dbg !3038

checkok1185:                                      ; preds = %checkok1176
  %ge1186 = icmp sge i64 %sext1178, 2, !dbg !3038
  %473 = call i1 @llvm.expect.i1(i1 %ge1186, i1 false), !dbg !3038
  br i1 %473, label %panic1187, label %checkok1194, !dbg !3038

checkok1194:                                      ; preds = %checkok1185
  %ptroffset1195 = getelementptr inbounds [4 x i8], ptr @to_double.TH, i64 %sext1178, !dbg !3038
  %474 = load i32, ptr %ptroffset1195, align 4, !dbg !3038
  %lt1196 = icmp ult i32 %470, %474, !dbg !3039
  br label %or.phi1197, !dbg !3039

or.phi1197:                                       ; preds = %checkok1194, %loop.body1155
  %val1198 = phi i1 [ true, %loop.body1155 ], [ %lt1196, %checkok1194 ], !dbg !3039
  br i1 %val1198, label %if.then1199, label %if.exit1200, !dbg !3039

if.then1199:                                      ; preds = %or.phi1197
  store i32 2, ptr %i, align 4, !dbg !3040
  br label %loop.exit1243, !dbg !3042

if.exit1200:                                      ; preds = %or.phi1197
  %475 = load i32, ptr %a, align 4, !dbg !3043
  %476 = load i32, ptr %i, align 4, !dbg !3044
  %add1201 = add i32 %475, %476, !dbg !3043
  %and1202 = and i32 %add1201, 127, !dbg !3043
  %sext1203 = sext i32 %and1202 to i64, !dbg !3043
  %lt1204 = icmp slt i64 %sext1203, 0, !dbg !3043
  %477 = call i1 @llvm.expect.i1(i1 %lt1204, i1 false), !dbg !3043
  br i1 %477, label %panic1205, label %checkok1210, !dbg !3043

checkok1210:                                      ; preds = %if.exit1200
  %ge1211 = icmp sge i64 %sext1203, 128, !dbg !3043
  %478 = call i1 @llvm.expect.i1(i1 %ge1211, i1 false), !dbg !3043
  br i1 %478, label %panic1212, label %checkok1219, !dbg !3043

checkok1219:                                      ; preds = %checkok1210
  %ptroffset1220 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1203, !dbg !3043
  %479 = load i32, ptr %ptroffset1220, align 4, !dbg !3043
  %480 = load i32, ptr %i, align 4, !dbg !3045
  %sext1221 = sext i32 %480 to i64, !dbg !3045
  %lt1222 = icmp slt i64 %sext1221, 0, !dbg !3045
  %481 = call i1 @llvm.expect.i1(i1 %lt1222, i1 false), !dbg !3045
  br i1 %481, label %panic1223, label %checkok1228, !dbg !3045

checkok1228:                                      ; preds = %checkok1219
  %ge1229 = icmp sge i64 %sext1221, 2, !dbg !3045
  %482 = call i1 @llvm.expect.i1(i1 %ge1229, i1 false), !dbg !3045
  br i1 %482, label %panic1230, label %checkok1237, !dbg !3045

checkok1237:                                      ; preds = %checkok1228
  %ptroffset1238 = getelementptr inbounds [4 x i8], ptr @to_double.TH, i64 %sext1221, !dbg !3045
  %483 = load i32, ptr %ptroffset1238, align 4, !dbg !3045
  %gt1239 = icmp ugt i32 %479, %483, !dbg !3046
  br i1 %gt1239, label %if.then1240, label %if.exit1241, !dbg !3046

if.then1240:                                      ; preds = %checkok1237
  br label %loop.exit1243, !dbg !3047

if.exit1241:                                      ; preds = %checkok1237
  %484 = load i32, ptr %i, align 4, !dbg !3048
  %add1242 = add i32 %484, 1, !dbg !3048
  store i32 %add1242, ptr %i, align 4, !dbg !3048
  br label %loop.cond1153, !dbg !3048

loop.exit1243:                                    ; preds = %if.then1240, %if.then1199, %loop.cond1153
  %485 = load i32, ptr %i, align 4, !dbg !3049
  %eq1244 = icmp eq i32 %485, 2, !dbg !3049
  br i1 %eq1244, label %and.rhs1245, label %and.phi1247, !dbg !3049

and.rhs1245:                                      ; preds = %loop.exit1243
  %486 = load i64, ptr %rp707, align 8, !dbg !3050
  %eq1246 = icmp eq i64 %486, 18, !dbg !3050
  br label %and.phi1247, !dbg !3050

and.phi1247:                                      ; preds = %and.rhs1245, %loop.exit1243
  %val1248 = phi i1 [ false, %loop.exit1243 ], [ %eq1246, %and.rhs1245 ], !dbg !3050
  br i1 %val1248, label %if.then1249, label %if.exit1250, !dbg !3050

if.then1249:                                      ; preds = %and.phi1247
  br label %loop.exit1435, !dbg !3051

if.exit1250:                                      ; preds = %and.phi1247
  %487 = load i64, ptr %rp707, align 8, !dbg !3052
  %gt1251 = icmp sgt i64 %487, 27, !dbg !3052
  br i1 %gt1251, label %if.then1252, label %if.exit1253, !dbg !3052

if.then1252:                                      ; preds = %if.exit1250
  store i32 9, ptr %sh, align 4, !dbg !3053
  br label %if.exit1253, !dbg !3053

if.exit1253:                                      ; preds = %if.then1252, %if.exit1250
  %488 = load i32, ptr %e2706, align 4, !dbg !3054
  %489 = load i32, ptr %sh, align 4, !dbg !3055
  %add1254 = add i32 %488, %489, !dbg !3054
  store i32 %add1254, ptr %e2706, align 4, !dbg !3054
  %490 = load i32, ptr %a, align 4, !dbg !3056
  store i32 %490, ptr %k, align 4, !dbg !3056
  br label %loop.cond1255, !dbg !3056

loop.cond1255:                                    ; preds = %if.exit1381, %if.exit1253
  %491 = load i32, ptr %k, align 4, !dbg !3058
  %492 = load i32, ptr %z, align 4, !dbg !3059
  %neq1256 = icmp ne i32 %491, %492, !dbg !3058
  br i1 %neq1256, label %loop.body1257, label %loop.exit1384, !dbg !3058

loop.body1257:                                    ; preds = %loop.cond1255
    #dbg_declare(ptr %tmp1258, !3060, !DIExpression(), !3062)
  %493 = load i32, ptr %k, align 4, !dbg !3063
  %sext1259 = sext i32 %493 to i64, !dbg !3063
  %lt1260 = icmp slt i64 %sext1259, 0, !dbg !3063
  %494 = call i1 @llvm.expect.i1(i1 %lt1260, i1 false), !dbg !3063
  br i1 %494, label %panic1261, label %checkok1266, !dbg !3063

checkok1266:                                      ; preds = %loop.body1257
  %ge1267 = icmp sge i64 %sext1259, 128, !dbg !3063
  %495 = call i1 @llvm.expect.i1(i1 %ge1267, i1 false), !dbg !3063
  br i1 %495, label %panic1268, label %checkok1275, !dbg !3063

checkok1275:                                      ; preds = %checkok1266
  %ptroffset1276 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1259, !dbg !3063
  %496 = load i32, ptr %ptroffset1276, align 4, !dbg !3063
  %497 = load i32, ptr %sh, align 4, !dbg !3064
  %shift_underflow = icmp slt i32 %497, 0, !dbg !3065
  %498 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !3065
  br i1 %498, label %panic1277, label %checkok1282, !dbg !3065

checkok1282:                                      ; preds = %checkok1275
  %shift_exceeds1283 = icmp sge i32 %497, 32, !dbg !3065
  %499 = call i1 @llvm.expect.i1(i1 %shift_exceeds1283, i1 false), !dbg !3065
  br i1 %499, label %panic1284, label %checkok1289, !dbg !3065

checkok1289:                                      ; preds = %checkok1282
  %shl1290 = shl i32 1, %497, !dbg !3065
  %500 = freeze i32 %shl1290, !dbg !3065
  %sub1291 = sub i32 %500, 1, !dbg !3065
  %and1292 = and i32 %496, %sub1291, !dbg !3066
  store i32 %and1292, ptr %tmp1258, align 4, !dbg !3066
  %501 = load i32, ptr %k, align 4, !dbg !3067
  %sext1293 = sext i32 %501 to i64, !dbg !3067
  %lt1294 = icmp slt i64 %sext1293, 0, !dbg !3067
  %502 = call i1 @llvm.expect.i1(i1 %lt1294, i1 false), !dbg !3067
  br i1 %502, label %panic1295, label %checkok1300, !dbg !3067

checkok1300:                                      ; preds = %checkok1289
  %ge1301 = icmp sge i64 %sext1293, 128, !dbg !3067
  %503 = call i1 @llvm.expect.i1(i1 %ge1301, i1 false), !dbg !3067
  br i1 %503, label %panic1302, label %checkok1309, !dbg !3067

checkok1309:                                      ; preds = %checkok1300
  %ptroffset1310 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1293, !dbg !3067
  %504 = load i32, ptr %k, align 4, !dbg !3068
  %sext1311 = sext i32 %504 to i64, !dbg !3068
  %lt1312 = icmp slt i64 %sext1311, 0, !dbg !3068
  %505 = call i1 @llvm.expect.i1(i1 %lt1312, i1 false), !dbg !3068
  br i1 %505, label %panic1313, label %checkok1318, !dbg !3068

checkok1318:                                      ; preds = %checkok1309
  %ge1319 = icmp sge i64 %sext1311, 128, !dbg !3068
  %506 = call i1 @llvm.expect.i1(i1 %ge1319, i1 false), !dbg !3068
  br i1 %506, label %panic1320, label %checkok1327, !dbg !3068

checkok1327:                                      ; preds = %checkok1318
  %ptroffset1328 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1311, !dbg !3068
  %507 = load i32, ptr %ptroffset1328, align 4, !dbg !3068
  %508 = load i32, ptr %sh, align 4, !dbg !3069
  %shift_exceeds1329 = icmp uge i32 %508, 32, !dbg !3070
  %509 = call i1 @llvm.expect.i1(i1 %shift_exceeds1329, i1 false), !dbg !3070
  br i1 %509, label %panic1330, label %checkok1335, !dbg !3070

checkok1335:                                      ; preds = %checkok1327
  %lshr1336 = lshr i32 %507, %508, !dbg !3070
  %510 = freeze i32 %lshr1336, !dbg !3070
  %511 = load i32, ptr %carry1152, align 4, !dbg !3071
  %add1337 = add i32 %510, %511, !dbg !3070
  store i32 %add1337, ptr %ptroffset1310, align 4, !dbg !3070
  %512 = load i32, ptr %sh, align 4, !dbg !3072
  %shift_underflow1338 = icmp slt i32 %512, 0, !dbg !3073
  %513 = call i1 @llvm.expect.i1(i1 %shift_underflow1338, i1 false), !dbg !3073
  br i1 %513, label %panic1339, label %checkok1344, !dbg !3073

checkok1344:                                      ; preds = %checkok1335
  %shift_exceeds1345 = icmp sge i32 %512, 32, !dbg !3073
  %514 = call i1 @llvm.expect.i1(i1 %shift_exceeds1345, i1 false), !dbg !3073
  br i1 %514, label %panic1346, label %checkok1351, !dbg !3073

checkok1351:                                      ; preds = %checkok1344
  %ashr = ashr i32 1000000000, %512, !dbg !3073
  %515 = freeze i32 %ashr, !dbg !3073
  %516 = load i32, ptr %tmp1258, align 4, !dbg !3074
  %mul1352 = mul i32 %515, %516, !dbg !3073
  store i32 %mul1352, ptr %carry1152, align 4, !dbg !3073
  %517 = load i32, ptr %k, align 4, !dbg !3075
  %518 = load i32, ptr %a, align 4, !dbg !3076
  %eq1353 = icmp eq i32 %517, %518, !dbg !3075
  br i1 %eq1353, label %and.rhs1354, label %and.phi1374, !dbg !3075

and.rhs1354:                                      ; preds = %checkok1351
  %519 = load i32, ptr %k, align 4, !dbg !3077
  %sext1355 = sext i32 %519 to i64, !dbg !3077
  %lt1356 = icmp slt i64 %sext1355, 0, !dbg !3077
  %520 = call i1 @llvm.expect.i1(i1 %lt1356, i1 false), !dbg !3077
  br i1 %520, label %panic1357, label %checkok1362, !dbg !3077

checkok1362:                                      ; preds = %and.rhs1354
  %ge1363 = icmp sge i64 %sext1355, 128, !dbg !3077
  %521 = call i1 @llvm.expect.i1(i1 %ge1363, i1 false), !dbg !3077
  br i1 %521, label %panic1364, label %checkok1371, !dbg !3077

checkok1371:                                      ; preds = %checkok1362
  %ptroffset1372 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1355, !dbg !3077
  %522 = load i32, ptr %ptroffset1372, align 4, !dbg !3077
  %i2nb1373 = icmp eq i32 %522, 0, !dbg !3077
  br label %and.phi1374, !dbg !3077

and.phi1374:                                      ; preds = %checkok1371, %checkok1351
  %val1375 = phi i1 [ false, %checkok1351 ], [ %i2nb1373, %checkok1371 ], !dbg !3077
  br i1 %val1375, label %if.then1376, label %if.exit1381, !dbg !3077

if.then1376:                                      ; preds = %and.phi1374
  %523 = load i32, ptr %a, align 4, !dbg !3078
  %add1377 = add i32 %523, 1, !dbg !3078
  %and1378 = and i32 %add1377, 127, !dbg !3078
  store i32 %and1378, ptr %a, align 4, !dbg !3078
  %524 = load i32, ptr %i, align 4, !dbg !3080
  %sub1379 = sub i32 %524, 1, !dbg !3080
  store i32 %sub1379, ptr %i, align 4, !dbg !3080
  %525 = load i64, ptr %rp707, align 8, !dbg !3081
  %sub1380 = sub i64 %525, 9, !dbg !3081
  store i64 %sub1380, ptr %rp707, align 8, !dbg !3081
  br label %if.exit1381, !dbg !3081

if.exit1381:                                      ; preds = %if.then1376, %and.phi1374
  %526 = load i32, ptr %k, align 4, !dbg !3082
  %add1382 = add i32 %526, 1, !dbg !3082
  %and1383 = and i32 %add1382, 127, !dbg !3082
  store i32 %and1383, ptr %k, align 4, !dbg !3082
  br label %loop.cond1255, !dbg !3082

loop.exit1384:                                    ; preds = %loop.cond1255
  %527 = load i32, ptr %carry1152, align 4, !dbg !3083
  %i2b1385 = icmp ne i32 %527, 0, !dbg !3083
  br i1 %i2b1385, label %if.then1386, label %if.exit1434, !dbg !3083

if.then1386:                                      ; preds = %loop.exit1384
  %528 = load i32, ptr %z, align 4, !dbg !3084
  %add1387 = add i32 %528, 1, !dbg !3084
  %and1388 = and i32 %add1387, 127, !dbg !3084
  %529 = load i32, ptr %a, align 4, !dbg !3086
  %neq1389 = icmp ne i32 %and1388, %529, !dbg !3084
  br i1 %neq1389, label %if.then1390, label %if.else1411, !dbg !3084

if.then1390:                                      ; preds = %if.then1386
  %530 = load i32, ptr %z, align 4, !dbg !3087
  %sext1391 = sext i32 %530 to i64, !dbg !3087
  %lt1392 = icmp slt i64 %sext1391, 0, !dbg !3087
  %531 = call i1 @llvm.expect.i1(i1 %lt1392, i1 false), !dbg !3087
  br i1 %531, label %panic1393, label %checkok1398, !dbg !3087

checkok1398:                                      ; preds = %if.then1390
  %ge1399 = icmp sge i64 %sext1391, 128, !dbg !3087
  %532 = call i1 @llvm.expect.i1(i1 %ge1399, i1 false), !dbg !3087
  br i1 %532, label %panic1400, label %checkok1407, !dbg !3087

checkok1407:                                      ; preds = %checkok1398
  %ptroffset1408 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1391, !dbg !3087
  %533 = load i32, ptr %carry1152, align 4, !dbg !3089
  store i32 %533, ptr %ptroffset1408, align 4, !dbg !3089
  %534 = load i32, ptr %z, align 4, !dbg !3090
  %add1409 = add i32 %534, 1, !dbg !3090
  %and1410 = and i32 %add1409, 127, !dbg !3090
  store i32 %and1410, ptr %z, align 4, !dbg !3090
  br label %if.exit1433, !dbg !3090

if.else1411:                                      ; preds = %if.then1386
  %535 = load i32, ptr %z, align 4, !dbg !3091
  %sub1412 = sub i32 %535, 1, !dbg !3091
  %and1413 = and i32 %sub1412, 127, !dbg !3091
  %sext1414 = sext i32 %and1413 to i64, !dbg !3091
  %lt1415 = icmp slt i64 %sext1414, 0, !dbg !3091
  %536 = call i1 @llvm.expect.i1(i1 %lt1415, i1 false), !dbg !3091
  br i1 %536, label %panic1416, label %checkok1421, !dbg !3091

checkok1421:                                      ; preds = %if.else1411
  %ge1422 = icmp sge i64 %sext1414, 128, !dbg !3091
  %537 = call i1 @llvm.expect.i1(i1 %ge1422, i1 false), !dbg !3091
  br i1 %537, label %panic1423, label %checkok1430, !dbg !3091

checkok1430:                                      ; preds = %checkok1421
  %ptroffset1431 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1414, !dbg !3091
  %538 = load i32, ptr %ptroffset1431, align 4, !dbg !3091
  %or1432 = or i32 %538, 1, !dbg !3093
  store i32 %or1432, ptr %ptroffset1431, align 4, !dbg !3093
  br label %if.exit1433, !dbg !3093

if.exit1433:                                      ; preds = %checkok1430, %checkok1407
  br label %if.exit1434, !dbg !3093

if.exit1434:                                      ; preds = %if.exit1433, %loop.exit1384
  br label %loop.body1151, !dbg !3093

loop.exit1435:                                    ; preds = %if.then1249
    #dbg_declare(ptr %y1436, !3094, !DIExpression(), !3095)
  store double 0.000000e+00, ptr %y1436, align 8, !dbg !3095
    #dbg_declare(ptr %i1437, !3096, !DIExpression(), !3097)
  store i32 0, ptr %i1437, align 4, !dbg !3097
  store i32 0, ptr %i1437, align 4, !dbg !3098
  br label %loop.cond1438, !dbg !3098

loop.cond1438:                                    ; preds = %checkok1486, %loop.exit1435
  %539 = load i32, ptr %i1437, align 4, !dbg !3100
  %lt1439 = icmp slt i32 %539, 2, !dbg !3100
  br i1 %lt1439, label %loop.body1440, label %loop.exit1491, !dbg !3100

loop.body1440:                                    ; preds = %loop.cond1438
  %540 = load i32, ptr %a, align 4, !dbg !3101
  %541 = load i32, ptr %i1437, align 4, !dbg !3103
  %add1441 = add i32 %540, %541, !dbg !3101
  %and1442 = and i32 %add1441, 127, !dbg !3101
  %542 = load i32, ptr %z, align 4, !dbg !3104
  %eq1443 = icmp eq i32 %and1442, %542, !dbg !3101
  br i1 %eq1443, label %if.then1444, label %if.exit1466, !dbg !3101

if.then1444:                                      ; preds = %loop.body1440
  %543 = load i32, ptr %z, align 4, !dbg !3105
  %add1445 = add i32 %543, 1, !dbg !3105
  %and1446 = and i32 %add1445, 127, !dbg !3105
  store i32 %and1446, ptr %z, align 4, !dbg !3105
  %sub1447 = sub i32 %and1446, 1, !dbg !3106
  %sext1448 = sext i32 %sub1447 to i64, !dbg !3106
  %lt1449 = icmp slt i64 %sext1448, 0, !dbg !3106
  %544 = call i1 @llvm.expect.i1(i1 %lt1449, i1 false), !dbg !3106
  br i1 %544, label %panic1450, label %checkok1455, !dbg !3106

checkok1455:                                      ; preds = %if.then1444
  %ge1456 = icmp sge i64 %sext1448, 128, !dbg !3106
  %545 = call i1 @llvm.expect.i1(i1 %ge1456, i1 false), !dbg !3106
  br i1 %545, label %panic1457, label %checkok1464, !dbg !3106

checkok1464:                                      ; preds = %checkok1455
  %ptroffset1465 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1448, !dbg !3106
  store i32 0, ptr %ptroffset1465, align 4, !dbg !3107
  br label %if.exit1466, !dbg !3107

if.exit1466:                                      ; preds = %checkok1464, %loop.body1440
  %546 = load double, ptr %y1436, align 8, !dbg !3108
  %fmul1467 = fmul double 1.000000e+09, %546, !dbg !3109
  %547 = load i32, ptr %a, align 4, !dbg !3110
  %548 = load i32, ptr %i1437, align 4, !dbg !3111
  %add1468 = add i32 %547, %548, !dbg !3110
  %and1469 = and i32 %add1468, 127, !dbg !3110
  %sext1470 = sext i32 %and1469 to i64, !dbg !3110
  %lt1471 = icmp slt i64 %sext1470, 0, !dbg !3110
  %549 = call i1 @llvm.expect.i1(i1 %lt1471, i1 false), !dbg !3110
  br i1 %549, label %panic1472, label %checkok1477, !dbg !3110

checkok1477:                                      ; preds = %if.exit1466
  %ge1478 = icmp sge i64 %sext1470, 128, !dbg !3110
  %550 = call i1 @llvm.expect.i1(i1 %ge1478, i1 false), !dbg !3110
  br i1 %550, label %panic1479, label %checkok1486, !dbg !3110

checkok1486:                                      ; preds = %checkok1477
  %ptroffset1487 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1470, !dbg !3110
  %551 = load i32, ptr %ptroffset1487, align 4, !dbg !3110
  %uifp1488 = uitofp i32 %551 to double, !dbg !3110
  %fadd1489 = fadd double %fmul1467, %uifp1488, !dbg !3109
  store double %fadd1489, ptr %y1436, align 8, !dbg !3109
  %552 = load i32, ptr %i1437, align 4, !dbg !3112
  %add1490 = add i32 %552, 1, !dbg !3112
  store i32 %add1490, ptr %i1437, align 4, !dbg !3112
  br label %loop.cond1438, !dbg !3112

loop.exit1491:                                    ; preds = %loop.cond1438
  %553 = load double, ptr %y1436, align 8, !dbg !3113
  %554 = load i32, ptr %sign382, align 4, !dbg !3114
  %sifp1492 = sitofp i32 %554 to double, !dbg !3114
  %fmul1493 = fmul double %553, %sifp1492, !dbg !3113
  store double %fmul1493, ptr %y1436, align 8, !dbg !3113
    #dbg_declare(ptr %denormal, !3115, !DIExpression(), !3116)
  store i8 0, ptr %denormal, align 1, !dbg !3116
    #dbg_declare(ptr %bits1494, !3117, !DIExpression(), !3118)
  store i32 53, ptr %bits1494, align 4, !dbg !3119
  %555 = load i32, ptr %bits1494, align 4, !dbg !3120
  %556 = load i32, ptr %e2706, align 4, !dbg !3121
  %add1495 = add i32 53, %556, !dbg !3122
  %sub1496 = sub i32 %add1495, -1074, !dbg !3122
  %lt1497 = icmp slt i32 %sub1496, %555, !dbg !3120
  %check1498 = icmp slt i32 %555, 0, !dbg !3120
  %siui-lt1499 = or i1 %check1498, %lt1497, !dbg !3120
  br i1 %siui-lt1499, label %if.then1500, label %if.exit1506, !dbg !3120

if.then1500:                                      ; preds = %loop.exit1491
  %557 = load i32, ptr %e2706, align 4, !dbg !3123
  %add1501 = add i32 53, %557, !dbg !3125
  %sub1502 = sub i32 %add1501, -1074, !dbg !3125
  store i32 %sub1502, ptr %bits1494, align 4, !dbg !3125
  %558 = load i32, ptr %bits1494, align 4, !dbg !3126
  %gt1503 = icmp ugt i32 0, %558, !dbg !3126
  br i1 %gt1503, label %if.then1504, label %if.exit1505, !dbg !3126

if.then1504:                                      ; preds = %if.then1500
  store i32 0, ptr %bits1494, align 4, !dbg !3127
  br label %if.exit1505, !dbg !3127

if.exit1505:                                      ; preds = %if.then1504, %if.then1500
  store i8 1, ptr %denormal, align 1, !dbg !3128
  br label %if.exit1506, !dbg !3128

if.exit1506:                                      ; preds = %if.exit1505, %loop.exit1491
    #dbg_declare(ptr %bias1507, !3129, !DIExpression(), !3130)
  store double 0.000000e+00, ptr %bias1507, align 8, !dbg !3130
    #dbg_declare(ptr %frac, !3131, !DIExpression(), !3132)
  store double 0.000000e+00, ptr %frac, align 8, !dbg !3132
  %559 = load i32, ptr %bits1494, align 4, !dbg !3133
  %gt1508 = icmp ugt i32 53, %559, !dbg !3133
  br i1 %gt1508, label %if.then1509, label %if.exit1526, !dbg !3133

if.then1509:                                      ; preds = %if.exit1506
  store double 1.000000e+00, ptr %x1510, align 8
  %560 = load i32, ptr %bits1494, align 4, !dbg !3134
  %sub1511 = sub i32 106, %560, !dbg !3136
  %sub1512 = sub i32 %sub1511, 1, !dbg !3136
  store i32 %sub1512, ptr %n1513, align 4
  %561 = load double, ptr %x1510, align 8, !dbg !3137
  %562 = load i32, ptr %n1513, align 4, !dbg !3137
  %563 = call double @scalbn(double %561, i32 %562), !dbg !3140
  store double %563, ptr %mag1514, align 8
  %564 = load double, ptr %y1436, align 8
  store double %564, ptr %sgn1515, align 8
  %565 = load double, ptr %mag1514, align 8
  store double %565, ptr %x1516, align 8
  %566 = load double, ptr %sgn1515, align 8
  store double %566, ptr %y1517, align 8
  %567 = load double, ptr %x1516, align 8, !dbg !3141
  %568 = load double, ptr %sgn1515, align 8, !dbg !3146
  %569 = call double @llvm.copysign.f64(double %567, double %568), !dbg !3146
  store double %569, ptr %bias1507, align 8, !dbg !3146
  %570 = load double, ptr %y1436, align 8, !dbg !3147
  store double 1.000000e+00, ptr %x1518, align 8
  %571 = load i32, ptr %bits1494, align 4, !dbg !3148
  %sub1519 = sub i32 53, %571, !dbg !3149
  store i32 %sub1519, ptr %n1520, align 4
  %572 = load double, ptr %x1518, align 8, !dbg !3150
  %573 = load i32, ptr %n1520, align 4, !dbg !3150
  %574 = call double @scalbn(double %572, i32 %573), !dbg !3153
  %zero1521 = fcmp ueq double %574, 0.000000e+00, !dbg !3147
  %575 = call i1 @llvm.expect.i1(i1 %zero1521, i1 false), !dbg !3147
  br i1 %575, label %panic1522, label %checkok1523, !dbg !3147

checkok1523:                                      ; preds = %if.then1509
  %fmod = frem double %570, %574, !dbg !3147
  store double %fmod, ptr %frac, align 8, !dbg !3147
  %576 = load double, ptr %y1436, align 8, !dbg !3154
  %577 = load double, ptr %frac, align 8, !dbg !3155
  %fsub1524 = fsub double %576, %577, !dbg !3154
  store double %fsub1524, ptr %y1436, align 8, !dbg !3154
  %578 = load double, ptr %y1436, align 8, !dbg !3156
  %579 = load double, ptr %bias1507, align 8, !dbg !3157
  %fadd1525 = fadd double %578, %579, !dbg !3156
  store double %fadd1525, ptr %y1436, align 8, !dbg !3156
  br label %if.exit1526, !dbg !3156

if.exit1526:                                      ; preds = %checkok1523, %if.exit1506
  %580 = load i32, ptr %a, align 4, !dbg !3158
  %581 = load i32, ptr %i1437, align 4, !dbg !3159
  %add1527 = add i32 %580, %581, !dbg !3158
  %and1528 = and i32 %add1527, 127, !dbg !3158
  %582 = load i32, ptr %z, align 4, !dbg !3160
  %neq1529 = icmp ne i32 %and1528, %582, !dbg !3158
  br i1 %neq1529, label %if.then1530, label %if.exit1606, !dbg !3158

if.then1530:                                      ; preds = %if.exit1526
    #dbg_declare(ptr %t, !3161, !DIExpression(), !3163)
  %583 = load i32, ptr %a, align 4, !dbg !3164
  %584 = load i32, ptr %i1437, align 4, !dbg !3165
  %add1531 = add i32 %583, %584, !dbg !3164
  %and1532 = and i32 %add1531, 127, !dbg !3164
  %sext1533 = sext i32 %and1532 to i64, !dbg !3164
  %lt1534 = icmp slt i64 %sext1533, 0, !dbg !3164
  %585 = call i1 @llvm.expect.i1(i1 %lt1534, i1 false), !dbg !3164
  br i1 %585, label %panic1535, label %checkok1540, !dbg !3164

checkok1540:                                      ; preds = %if.then1530
  %ge1541 = icmp sge i64 %sext1533, 128, !dbg !3164
  %586 = call i1 @llvm.expect.i1(i1 %ge1541, i1 false), !dbg !3164
  br i1 %586, label %panic1542, label %checkok1549, !dbg !3164

checkok1549:                                      ; preds = %checkok1540
  %ptroffset1550 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1533, !dbg !3164
  %587 = load i32, ptr %ptroffset1550, align 4, !dbg !3164
  store i32 %587, ptr %t, align 4, !dbg !3164
  store i8 1, ptr %switch1551, align 1
  br label %switch.entry1552

switch.entry1552:                                 ; preds = %checkok1549
  %588 = load i8, ptr %switch1551, align 1
  %589 = trunc i8 %588 to i1
  %590 = load i32, ptr %t, align 4, !dbg !3166
  %gt1553 = icmp ugt i32 500000000, %590, !dbg !3166
  br i1 %gt1553, label %and.rhs1554, label %and.phi1563, !dbg !3166

and.rhs1554:                                      ; preds = %switch.entry1552
  %591 = load i32, ptr %t, align 4, !dbg !3168
  %i2b1555 = icmp ne i32 %591, 0, !dbg !3168
  br i1 %i2b1555, label %or.phi1561, label %or.rhs1556, !dbg !3168

or.rhs1556:                                       ; preds = %and.rhs1554
  %592 = load i32, ptr %a, align 4, !dbg !3169
  %593 = load i32, ptr %i1437, align 4, !dbg !3170
  %add1557 = add i32 %592, %593, !dbg !3169
  %add1558 = add i32 %add1557, 1, !dbg !3169
  %and1559 = and i32 %add1558, 127, !dbg !3169
  %594 = load i32, ptr %z, align 4, !dbg !3171
  %neq1560 = icmp ne i32 %and1559, %594, !dbg !3169
  br label %or.phi1561, !dbg !3169

or.phi1561:                                       ; preds = %or.rhs1556, %and.rhs1554
  %val1562 = phi i1 [ true, %and.rhs1554 ], [ %neq1560, %or.rhs1556 ], !dbg !3169
  br label %and.phi1563, !dbg !3169

and.phi1563:                                      ; preds = %or.phi1561, %switch.entry1552
  %val1564 = phi i1 [ false, %switch.entry1552 ], [ %val1562, %or.phi1561 ], !dbg !3169
  %eq1565 = icmp eq i1 %val1564, %589, !dbg !3169
  br i1 %eq1565, label %switch.case1566, label %next_if1570, !dbg !3169

switch.case1566:                                  ; preds = %and.phi1563
  %595 = load double, ptr %frac, align 8, !dbg !3172
  %596 = load i32, ptr %sign382, align 4, !dbg !3174
  %sifp1567 = sitofp i32 %596 to double, !dbg !3174
  %fmul1568 = fmul double 2.500000e-01, %sifp1567, !dbg !3175
  %fadd1569 = fadd double %595, %fmul1568, !dbg !3172
  store double %fadd1569, ptr %frac, align 8, !dbg !3172
  br label %switch.exit1595, !dbg !3172

next_if1570:                                      ; preds = %and.phi1563
  %597 = load i32, ptr %t, align 4, !dbg !3176
  %lt1571 = icmp ult i32 500000000, %597, !dbg !3176
  %eq1572 = icmp eq i1 %lt1571, %589, !dbg !3176
  br i1 %eq1572, label %switch.case1573, label %next_if1577, !dbg !3176

switch.case1573:                                  ; preds = %next_if1570
  %598 = load double, ptr %frac, align 8, !dbg !3177
  %599 = load i32, ptr %sign382, align 4, !dbg !3179
  %sifp1574 = sitofp i32 %599 to double, !dbg !3179
  %fmul1575 = fmul double 7.500000e-01, %sifp1574, !dbg !3180
  %fadd1576 = fadd double %598, %fmul1575, !dbg !3177
  store double %fadd1576, ptr %frac, align 8, !dbg !3177
  br label %switch.exit1595, !dbg !3177

next_if1577:                                      ; preds = %next_if1570
  %600 = load i32, ptr %t, align 4, !dbg !3181
  %eq1578 = icmp eq i32 500000000, %600, !dbg !3181
  %eq1579 = icmp eq i1 %eq1578, %589, !dbg !3181
  br i1 %eq1579, label %switch.case1580, label %next_if1594, !dbg !3181

switch.case1580:                                  ; preds = %next_if1577
  %601 = load i32, ptr %a, align 4, !dbg !3182
  %602 = load i32, ptr %i1437, align 4, !dbg !3184
  %add1581 = add i32 %601, %602, !dbg !3182
  %add1582 = add i32 %add1581, 1, !dbg !3182
  %and1583 = and i32 %add1582, 127, !dbg !3182
  %603 = load i32, ptr %z, align 4, !dbg !3185
  %eq1584 = icmp eq i32 %and1583, %603, !dbg !3182
  br i1 %eq1584, label %if.then1585, label %if.else1589, !dbg !3182

if.then1585:                                      ; preds = %switch.case1580
  %604 = load double, ptr %frac, align 8, !dbg !3186
  %605 = load i32, ptr %sign382, align 4, !dbg !3188
  %sifp1586 = sitofp i32 %605 to double, !dbg !3188
  %fmul1587 = fmul double 5.000000e-01, %sifp1586, !dbg !3189
  %fadd1588 = fadd double %604, %fmul1587, !dbg !3186
  store double %fadd1588, ptr %frac, align 8, !dbg !3186
  br label %if.exit1593, !dbg !3186

if.else1589:                                      ; preds = %switch.case1580
  %606 = load double, ptr %frac, align 8, !dbg !3190
  %607 = load i32, ptr %sign382, align 4, !dbg !3192
  %sifp1590 = sitofp i32 %607 to double, !dbg !3192
  %fmul1591 = fmul double 7.500000e-01, %sifp1590, !dbg !3193
  %fadd1592 = fadd double %606, %fmul1591, !dbg !3190
  store double %fadd1592, ptr %frac, align 8, !dbg !3190
  br label %if.exit1593, !dbg !3190

if.exit1593:                                      ; preds = %if.else1589, %if.then1585
  br label %switch.exit1595, !dbg !3190

next_if1594:                                      ; preds = %next_if1577
  br label %switch.exit1595, !dbg !3190

switch.exit1595:                                  ; preds = %next_if1594, %if.exit1593, %switch.case1573, %switch.case1566
  %608 = load i32, ptr %bits1494, align 4, !dbg !3194
  %sub1596 = sub i32 53, %608, !dbg !3195
  %ge1597 = icmp sge i32 %sub1596, 2, !dbg !3195
  br i1 %ge1597, label %and.rhs1598, label %and.phi1602, !dbg !3195

and.rhs1598:                                      ; preds = %switch.exit1595
  %609 = load double, ptr %frac, align 8, !dbg !3196
  %fmod1599 = frem double %609, 1.000000e+00, !dbg !3196
  %neq1600 = fcmp one double %fmod1599, 0.000000e+00, !dbg !3196
  %not1601 = xor i1 %neq1600, true, !dbg !3196
  br label %and.phi1602, !dbg !3196

and.phi1602:                                      ; preds = %and.rhs1598, %switch.exit1595
  %val1603 = phi i1 [ false, %switch.exit1595 ], [ %not1601, %and.rhs1598 ], !dbg !3196
  br i1 %val1603, label %if.then1604, label %if.exit1605, !dbg !3196

if.then1604:                                      ; preds = %and.phi1602
  %610 = load double, ptr %frac, align 8, !dbg !3197
  %fincdec = fadd double %610, 1.000000e+00, !dbg !3197
  store double %fincdec, ptr %frac, align 8, !dbg !3197
  br label %if.exit1605, !dbg !3197

if.exit1605:                                      ; preds = %if.then1604, %and.phi1602
  br label %if.exit1606, !dbg !3197

if.exit1606:                                      ; preds = %if.exit1605, %if.exit1526
  %611 = load double, ptr %y1436, align 8, !dbg !3198
  %612 = load double, ptr %frac, align 8, !dbg !3199
  %fadd1607 = fadd double %611, %612, !dbg !3198
  store double %fadd1607, ptr %y1436, align 8, !dbg !3198
  %613 = load double, ptr %y1436, align 8, !dbg !3200
  %614 = load double, ptr %bias1507, align 8, !dbg !3201
  %fsub1608 = fsub double %613, %614, !dbg !3200
  store double %fsub1608, ptr %y1436, align 8, !dbg !3200
  %615 = load i32, ptr %e2706, align 4, !dbg !3202
  %add1609 = add i32 %615, 53, !dbg !3202
  %and1610 = and i32 %add1609, 2147483647, !dbg !3202
  %616 = load i32, ptr %emax, align 4, !dbg !3203
  %sub1611 = sub i32 %616, 5, !dbg !3203
  %gt1612 = icmp sgt i32 %and1610, %sub1611, !dbg !3202
  br i1 %gt1612, label %if.then1613, label %if.exit1641, !dbg !3202

if.then1613:                                      ; preds = %if.exit1606
  %617 = load double, ptr %y1436, align 8
  store double %617, ptr %x1614, align 8
  %618 = load double, ptr %x1614, align 8, !dbg !3204
  %619 = call double @llvm.fabs.f64(double %618), !dbg !3204
  %ge1615 = fcmp oge double %619, 0x4340000000000000, !dbg !3206
  br i1 %ge1615, label %if.then1616, label %if.exit1629, !dbg !3206

if.then1616:                                      ; preds = %if.then1613
  %620 = load i8, ptr %denormal, align 1, !dbg !3208
  %621 = trunc i8 %620 to i1, !dbg !3208
  br i1 %621, label %and.rhs1617, label %and.phi1623, !dbg !3208

and.rhs1617:                                      ; preds = %if.then1616
  %622 = load i32, ptr %bits1494, align 4, !dbg !3210
  %623 = load i32, ptr %e2706, align 4, !dbg !3211
  %add1618 = add i32 53, %623, !dbg !3212
  %sub1619 = sub i32 %add1618, -1074, !dbg !3212
  %eq1620 = icmp eq i32 %sub1619, %622, !dbg !3210
  %check1621 = icmp sge i32 %sub1619, 0, !dbg !3210
  %siui-eq1622 = and i1 %check1621, %eq1620, !dbg !3210
  br label %and.phi1623, !dbg !3210

and.phi1623:                                      ; preds = %and.rhs1617, %if.then1616
  %val1624 = phi i1 [ false, %if.then1616 ], [ %siui-eq1622, %and.rhs1617 ], !dbg !3210
  br i1 %val1624, label %if.then1625, label %if.exit1626, !dbg !3210

if.then1625:                                      ; preds = %and.phi1623
  store i8 0, ptr %denormal, align 1, !dbg !3213
  br label %if.exit1626, !dbg !3213

if.exit1626:                                      ; preds = %if.then1625, %and.phi1623
  %624 = load double, ptr %y1436, align 8, !dbg !3214
  %fmul1627 = fmul double %624, 5.000000e-01, !dbg !3214
  store double %fmul1627, ptr %y1436, align 8, !dbg !3214
  %625 = load i32, ptr %e2706, align 4, !dbg !3215
  %add1628 = add i32 %625, 1, !dbg !3215
  store i32 %add1628, ptr %e2706, align 4, !dbg !3215
  br label %if.exit1629, !dbg !3215

if.exit1629:                                      ; preds = %if.exit1626, %if.then1613
  %626 = load i32, ptr %e2706, align 4, !dbg !3216
  %add1630 = add i32 %626, 53, !dbg !3216
  %627 = load i32, ptr %emax, align 4, !dbg !3217
  %gt1631 = icmp sgt i32 %add1630, %627, !dbg !3216
  br i1 %gt1631, label %or.phi1637, label %or.rhs1632, !dbg !3216

or.rhs1632:                                       ; preds = %if.exit1629
  %628 = load i8, ptr %denormal, align 1, !dbg !3218
  %629 = trunc i8 %628 to i1, !dbg !3218
  br i1 %629, label %and.rhs1633, label %and.phi1635, !dbg !3218

and.rhs1633:                                      ; preds = %or.rhs1632
  %630 = load double, ptr %frac, align 8, !dbg !3219
  %neq1634 = fcmp one double %630, 0.000000e+00, !dbg !3219
  br label %and.phi1635, !dbg !3219

and.phi1635:                                      ; preds = %and.rhs1633, %or.rhs1632
  %val1636 = phi i1 [ false, %or.rhs1632 ], [ %neq1634, %and.rhs1633 ], !dbg !3219
  br label %or.phi1637, !dbg !3219

or.phi1637:                                       ; preds = %and.phi1635, %if.exit1629
  %val1638 = phi i1 [ true, %if.exit1629 ], [ %val1636, %and.phi1635 ], !dbg !3219
  br i1 %val1638, label %if.then1639, label %if.exit1640, !dbg !3219

if.then1639:                                      ; preds = %or.phi1637
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3220
  br label %err_retblock, !dbg !3220

if.exit1640:                                      ; preds = %or.phi1637
  br label %if.exit1641, !dbg !3220

if.exit1641:                                      ; preds = %if.exit1640, %if.exit1606
  %631 = load double, ptr %y1436, align 8
  store double %631, ptr %x1642, align 8
  %632 = load i32, ptr %e2706, align 4
  store i32 %632, ptr %n1643, align 4
  %633 = load double, ptr %x1642, align 8, !dbg !3221
  %634 = load i32, ptr %n1643, align 4, !dbg !3221
  %635 = call double @scalbn(double %633, i32 %634), !dbg !3224
  store double %635, ptr %blockret383, align 8, !dbg !3224
  br label %expr_block.exit1645, !dbg !3224

expr_block.exit1645:                              ; preds = %if.exit1641, %checkok788, %checkok749, %if.then719, %if.then667, %if.then650, %if.exit437, %if.then425
  %636 = load double, ptr %blockret383, align 8, !dbg !3224
  store double %636, ptr %blockret, align 8, !dbg !3224
  br label %expr_block.exit1646, !dbg !3224

expr_block.exit1646:                              ; preds = %expr_block.exit1645, %expr_block.exit379, %if.then80, %if.then53
  %637 = load double, ptr %blockret, align 8, !dbg !3224
  store double %637, ptr %0, align 8, !dbg !3224
  ret i64 0, !dbg !3224

err_retblock:                                     ; preds = %if.then1639, %if.then676, %if.then673, %if.then646, %guard_block641, %if.then615, %if.then606, %if.then497, %if.then436, %if.then373, %if.then317, %if.then314, %guard_block, %if.then269, %if.then215, %if.then151, %if.then
  %638 = load i64, ptr %reterr, align 8, !dbg !3224
  ret i64 %638, !dbg !3224

panic:                                            ; preds = %and.rhs
  store i64 %4, ptr %taddr, align 8
  %639 = insertvalue %any undef, ptr %taddr, 0
  %640 = insertvalue %any %639, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr3, align 8
  %641 = insertvalue %any undef, ptr %taddr3, 0
  %642 = insertvalue %any %641, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %640, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %642, ptr %ptradd4, align 16
  %643 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %643, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 468, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2477
  unreachable, !dbg !2477

panic5:                                           ; preds = %loop.body
  store i64 %10, ptr %taddr6, align 8
  %644 = insertvalue %any undef, ptr %taddr6, 0
  %645 = insertvalue %any %644, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr7, align 8
  %646 = insertvalue %any undef, ptr %taddr7, 0
  %647 = insertvalue %any %646, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %645, ptr %varargslots8, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots8, i64 16
  store %any %647, ptr %ptradd9, align 16
  %648 = insertvalue %"any[]" undef, ptr %varargslots8, 0
  %"$$temp10" = insertvalue %"any[]" %648, i64 2, 1
  store %"any[]" %"$$temp10", ptr %indirectarg11, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 61, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 468, ptr byval(%"any[]") align 8 %indirectarg11) #5, !dbg !2478
  unreachable, !dbg !2478

panic17:                                          ; preds = %if.exit
  store i64 %15, ptr %taddr18, align 8
  %649 = insertvalue %any undef, ptr %taddr18, 0
  %650 = insertvalue %any %649, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr19, align 8
  %651 = insertvalue %any undef, ptr %taddr19, 0
  %652 = insertvalue %any %651, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %650, ptr %varargslots20, align 16
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots20, i64 16
  store %any %652, ptr %ptradd21, align 16
  %653 = insertvalue %"any[]" undef, ptr %varargslots20, 0
  %"$$temp22" = insertvalue %"any[]" %653, i64 2, 1
  store %"any[]" %"$$temp22", ptr %indirectarg23, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 470, ptr byval(%"any[]") align 8 %indirectarg23) #5, !dbg !2484
  unreachable, !dbg !2484

panic27:                                          ; preds = %switch.case25
  store i64 %22, ptr %taddr28, align 8
  %654 = insertvalue %any undef, ptr %taddr28, 0
  %655 = insertvalue %any %654, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr29, align 8
  %656 = insertvalue %any undef, ptr %taddr29, 0
  %657 = insertvalue %any %656, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %655, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %657, ptr %ptradd31, align 16
  %658 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %658, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 61, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 476, ptr byval(%"any[]") align 8 %indirectarg33) #5, !dbg !2488
  unreachable, !dbg !2488

panic87:                                          ; preds = %and.rhs84
  store i64 %56, ptr %taddr88, align 8
  %659 = insertvalue %any undef, ptr %taddr88, 0
  %660 = insertvalue %any %659, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr89, align 8
  %661 = insertvalue %any undef, ptr %taddr89, 0
  %662 = insertvalue %any %661, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %660, ptr %varargslots90, align 16
  %ptradd91 = getelementptr inbounds i8, ptr %varargslots90, i64 16
  store %any %662, ptr %ptradd91, align 16
  %663 = insertvalue %"any[]" undef, ptr %varargslots90, 0
  %"$$temp92" = insertvalue %"any[]" %663, i64 2, 1
  store %"any[]" %"$$temp92", ptr %indirectarg93, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 481, ptr byval(%"any[]") align 8 %indirectarg93) #5, !dbg !2499
  unreachable, !dbg !2499

panic101:                                         ; preds = %and.rhs98
  store i64 %60, ptr %taddr102, align 8
  %664 = insertvalue %any undef, ptr %taddr102, 0
  %665 = insertvalue %any %664, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr103, align 8
  %666 = insertvalue %any undef, ptr %taddr103, 0
  %667 = insertvalue %any %666, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %665, ptr %varargslots104, align 16
  %ptradd105 = getelementptr inbounds i8, ptr %varargslots104, i64 16
  store %any %667, ptr %ptradd105, align 16
  %668 = insertvalue %"any[]" undef, ptr %varargslots104, 0
  %"$$temp106" = insertvalue %"any[]" %668, i64 2, 1
  store %"any[]" %"$$temp106", ptr %indirectarg107, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 481, ptr byval(%"any[]") align 8 %indirectarg107) #5, !dbg !2501
  unreachable, !dbg !2501

panic115:                                         ; preds = %if.then113
  store i64 %66, ptr %taddr116, align 8
  %669 = insertvalue %any undef, ptr %taddr116, 0
  %670 = insertvalue %any %669, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 2, ptr %taddr117, align 8
  %671 = insertvalue %any undef, ptr %taddr117, 0
  %672 = insertvalue %any %671, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %670, ptr %varargslots118, align 16
  %ptradd119 = getelementptr inbounds i8, ptr %varargslots118, i64 16
  store %any %672, ptr %ptradd119, align 16
  %673 = insertvalue %"any[]" undef, ptr %varargslots118, 0
  %"$$temp120" = insertvalue %"any[]" %673, i64 2, 1
  store %"any[]" %"$$temp120", ptr %indirectarg121, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 61, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 483, ptr byval(%"any[]") align 8 %indirectarg121) #5, !dbg !2505
  unreachable, !dbg !2505

panic132:                                         ; preds = %loop.cond129
  store i64 %73, ptr %taddr133, align 8
  %674 = insertvalue %any undef, ptr %taddr133, 0
  %675 = insertvalue %any %674, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %75, ptr %taddr134, align 8
  %676 = insertvalue %any undef, ptr %taddr134, 0
  %677 = insertvalue %any %676, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %675, ptr %varargslots135, align 16
  %ptradd136 = getelementptr inbounds i8, ptr %varargslots135, i64 16
  store %any %677, ptr %ptradd136, align 16
  %678 = insertvalue %"any[]" undef, ptr %varargslots135, 0
  %"$$temp137" = insertvalue %"any[]" %678, i64 2, 1
  store %"any[]" %"$$temp137", ptr %indirectarg138, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 344, ptr byval(%"any[]") align 8 %indirectarg138) #5, !dbg !2538
  unreachable, !dbg !2538

panic160:                                         ; preds = %and.rhs156
  store i64 %89, ptr %taddr161, align 8
  %679 = insertvalue %any undef, ptr %taddr161, 0
  %680 = insertvalue %any %679, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add158, ptr %taddr162, align 8
  %681 = insertvalue %any undef, ptr %taddr162, 0
  %682 = insertvalue %any %681, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %680, ptr %varargslots163, align 16
  %ptradd164 = getelementptr inbounds i8, ptr %varargslots163, i64 16
  store %any %682, ptr %ptradd164, align 16
  %683 = insertvalue %"any[]" undef, ptr %varargslots163, 0
  %"$$temp165" = insertvalue %"any[]" %683, i64 2, 1
  store %"any[]" %"$$temp165", ptr %indirectarg166, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 357, ptr byval(%"any[]") align 8 %indirectarg166) #5, !dbg !2558
  unreachable, !dbg !2558

panic180:                                         ; preds = %and.rhs176
  store i64 %97, ptr %taddr181, align 8
  %684 = insertvalue %any undef, ptr %taddr181, 0
  %685 = insertvalue %any %684, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add178, ptr %taddr182, align 8
  %686 = insertvalue %any undef, ptr %taddr182, 0
  %687 = insertvalue %any %686, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %685, ptr %varargslots183, align 16
  %ptradd184 = getelementptr inbounds i8, ptr %varargslots183, i64 16
  store %any %687, ptr %ptradd184, align 16
  %688 = insertvalue %"any[]" undef, ptr %varargslots183, 0
  %"$$temp185" = insertvalue %"any[]" %688, i64 2, 1
  store %"any[]" %"$$temp185", ptr %indirectarg186, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 361, ptr byval(%"any[]") align 8 %indirectarg186) #5, !dbg !2569
  unreachable, !dbg !2569

panic258:                                         ; preds = %if.exit254
  store i64 %131, ptr %taddr259, align 8
  %689 = insertvalue %any undef, ptr %taddr259, 0
  %690 = insertvalue %any %689, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add256, ptr %taddr260, align 8
  %691 = insertvalue %any undef, ptr %taddr260, 0
  %692 = insertvalue %any %691, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %690, ptr %varargslots261, align 16
  %ptradd262 = getelementptr inbounds i8, ptr %varargslots261, i64 16
  store %any %692, ptr %ptradd262, align 16
  %693 = insertvalue %"any[]" undef, ptr %varargslots261, 0
  %"$$temp263" = insertvalue %"any[]" %693, i64 2, 1
  store %"any[]" %"$$temp263", ptr %indirectarg264, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 397, ptr byval(%"any[]") align 8 %indirectarg264) #5, !dbg !2617
  unreachable, !dbg !2617

panic288:                                         ; preds = %if.then285
  store i64 %148, ptr %taddr289, align 8
  %694 = insertvalue %any undef, ptr %taddr289, 0
  %695 = insertvalue %any %694, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %add286, ptr %taddr290, align 8
  %696 = insertvalue %any undef, ptr %taddr290, 0
  %697 = insertvalue %any %696, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %695, ptr %varargslots291, align 16
  %ptradd292 = getelementptr inbounds i8, ptr %varargslots291, i64 16
  store %any %697, ptr %ptradd292, align 16
  %698 = insertvalue %"any[]" undef, ptr %varargslots291, 0
  %"$$temp293" = insertvalue %"any[]" %698, i64 2, 1
  store %"any[]" %"$$temp293", ptr %indirectarg294, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 61, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 406, ptr byval(%"any[]") align 8 %indirectarg294) #5, !dbg !2635
  unreachable, !dbg !2635

panic296:                                         ; preds = %checkok295
  store i64 %add286, ptr %taddr297, align 8
  %699 = insertvalue %any undef, ptr %taddr297, 0
  %700 = insertvalue %any %699, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %700, ptr %varargslots298, align 16
  %701 = insertvalue %"any[]" undef, ptr %varargslots298, 0
  %"$$temp299" = insertvalue %"any[]" %701, i64 1, 1
  store %"any[]" %"$$temp299", ptr %indirectarg300, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.81, i64 22, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 406, ptr byval(%"any[]") align 8 %indirectarg300) #5, !dbg !2634
  unreachable, !dbg !2634

panic391:                                         ; preds = %assert_ok
  store i64 %210, ptr %taddr392, align 8
  %702 = insertvalue %any undef, ptr %taddr392, 0
  %703 = insertvalue %any %702, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr393, align 8
  %704 = insertvalue %any undef, ptr %taddr393, 0
  %705 = insertvalue %any %704, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %703, ptr %varargslots394, align 16
  %ptradd395 = getelementptr inbounds i8, ptr %varargslots394, i64 16
  store %any %705, ptr %ptradd395, align 16
  %706 = insertvalue %"any[]" undef, ptr %varargslots394, 0
  %"$$temp396" = insertvalue %"any[]" %706, i64 2, 1
  store %"any[]" %"$$temp396", ptr %indirectarg397, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 45, ptr byval(%"any[]") align 8 %indirectarg397) #5, !dbg !2733
  unreachable, !dbg !2733

panic413:                                         ; preds = %loop.cond410
  store i64 %219, ptr %taddr414, align 8
  %707 = insertvalue %any undef, ptr %taddr414, 0
  %708 = insertvalue %any %707, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %221, ptr %taddr415, align 8
  %709 = insertvalue %any undef, ptr %taddr415, 0
  %710 = insertvalue %any %709, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %708, ptr %varargslots416, align 16
  %ptradd417 = getelementptr inbounds i8, ptr %varargslots416, i64 16
  store %any %710, ptr %ptradd417, align 16
  %711 = insertvalue %"any[]" undef, ptr %varargslots416, 0
  %"$$temp418" = insertvalue %"any[]" %711, i64 2, 1
  store %"any[]" %"$$temp418", ptr %indirectarg419, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 56, ptr byval(%"any[]") align 8 %indirectarg419) #5, !dbg !2758
  unreachable, !dbg !2758

panic446:                                         ; preds = %and.rhs442
  store i64 %236, ptr %taddr447, align 8
  %712 = insertvalue %any undef, ptr %taddr447, 0
  %713 = insertvalue %any %712, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add444, ptr %taddr448, align 8
  %714 = insertvalue %any undef, ptr %taddr448, 0
  %715 = insertvalue %any %714, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %713, ptr %varargslots449, align 16
  %ptradd450 = getelementptr inbounds i8, ptr %varargslots449, i64 16
  store %any %715, ptr %ptradd450, align 16
  %716 = insertvalue %"any[]" undef, ptr %varargslots449, 0
  %"$$temp451" = insertvalue %"any[]" %716, i64 2, 1
  store %"any[]" %"$$temp451", ptr %indirectarg452, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 70, ptr byval(%"any[]") align 8 %indirectarg452) #5, !dbg !2778
  unreachable, !dbg !2778

panic466:                                         ; preds = %and.rhs462
  store i64 %244, ptr %taddr467, align 8
  %717 = insertvalue %any undef, ptr %taddr467, 0
  %718 = insertvalue %any %717, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add464, ptr %taddr468, align 8
  %719 = insertvalue %any undef, ptr %taddr468, 0
  %720 = insertvalue %any %719, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %718, ptr %varargslots469, align 16
  %ptradd470 = getelementptr inbounds i8, ptr %varargslots469, i64 16
  store %any %720, ptr %ptradd470, align 16
  %721 = insertvalue %"any[]" undef, ptr %varargslots469, 0
  %"$$temp471" = insertvalue %"any[]" %721, i64 2, 1
  store %"any[]" %"$$temp471", ptr %indirectarg472, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 74, ptr byval(%"any[]") align 8 %indirectarg472) #5, !dbg !2789
  unreachable, !dbg !2789

panic511:                                         ; preds = %if.then509
  store i64 %sext, ptr %taddr512, align 8
  %722 = insertvalue %any undef, ptr %taddr512, 0
  %723 = insertvalue %any %722, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %723, ptr %varargslots513, align 16
  %724 = insertvalue %"any[]" undef, ptr %varargslots513, 0
  %"$$temp514" = insertvalue %"any[]" %724, i64 1, 1
  store %"any[]" %"$$temp514", ptr %indirectarg515, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 94, ptr byval(%"any[]") align 8 %indirectarg515) #5, !dbg !2811
  unreachable, !dbg !2811

panic518:                                         ; preds = %checkok516
  store i64 128, ptr %taddr519, align 8
  %725 = insertvalue %any undef, ptr %taddr519, 0
  %726 = insertvalue %any %725, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext, ptr %taddr520, align 8
  %727 = insertvalue %any undef, ptr %taddr520, 0
  %728 = insertvalue %any %727, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %726, ptr %varargslots521, align 16
  %ptradd522 = getelementptr inbounds i8, ptr %varargslots521, i64 16
  store %any %728, ptr %ptradd522, align 16
  %729 = insertvalue %"any[]" undef, ptr %varargslots521, 0
  %"$$temp523" = insertvalue %"any[]" %729, i64 2, 1
  store %"any[]" %"$$temp523", ptr %indirectarg524, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 94, ptr byval(%"any[]") align 8 %indirectarg524) #5, !dbg !2811
  unreachable, !dbg !2811

panic528:                                         ; preds = %checkok525
  store i64 %sext526, ptr %taddr529, align 8
  %730 = insertvalue %any undef, ptr %taddr529, 0
  %731 = insertvalue %any %730, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %731, ptr %varargslots530, align 16
  %732 = insertvalue %"any[]" undef, ptr %varargslots530, 0
  %"$$temp531" = insertvalue %"any[]" %732, i64 1, 1
  store %"any[]" %"$$temp531", ptr %indirectarg532, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 94, ptr byval(%"any[]") align 8 %indirectarg532) #5, !dbg !2813
  unreachable, !dbg !2813

panic535:                                         ; preds = %checkok533
  store i64 128, ptr %taddr536, align 8
  %733 = insertvalue %any undef, ptr %taddr536, 0
  %734 = insertvalue %any %733, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext526, ptr %taddr537, align 8
  %735 = insertvalue %any undef, ptr %taddr537, 0
  %736 = insertvalue %any %735, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %734, ptr %varargslots538, align 16
  %ptradd539 = getelementptr inbounds i8, ptr %varargslots538, i64 16
  store %any %736, ptr %ptradd539, align 16
  %737 = insertvalue %"any[]" undef, ptr %varargslots538, 0
  %"$$temp540" = insertvalue %"any[]" %737, i64 2, 1
  store %"any[]" %"$$temp540", ptr %indirectarg541, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 94, ptr byval(%"any[]") align 8 %indirectarg541) #5, !dbg !2813
  unreachable, !dbg !2813

panic551:                                         ; preds = %if.else548
  store i64 %sext549, ptr %taddr552, align 8
  %738 = insertvalue %any undef, ptr %taddr552, 0
  %739 = insertvalue %any %738, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %739, ptr %varargslots553, align 16
  %740 = insertvalue %"any[]" undef, ptr %varargslots553, 0
  %"$$temp554" = insertvalue %"any[]" %740, i64 1, 1
  store %"any[]" %"$$temp554", ptr %indirectarg555, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 98, ptr byval(%"any[]") align 8 %indirectarg555) #5, !dbg !2816
  unreachable, !dbg !2816

panic558:                                         ; preds = %checkok556
  store i64 128, ptr %taddr559, align 8
  %741 = insertvalue %any undef, ptr %taddr559, 0
  %742 = insertvalue %any %741, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext549, ptr %taddr560, align 8
  %743 = insertvalue %any undef, ptr %taddr560, 0
  %744 = insertvalue %any %743, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %742, ptr %varargslots561, align 16
  %ptradd562 = getelementptr inbounds i8, ptr %varargslots561, i64 16
  store %any %744, ptr %ptradd562, align 16
  %745 = insertvalue %"any[]" undef, ptr %varargslots561, 0
  %"$$temp563" = insertvalue %"any[]" %745, i64 2, 1
  store %"any[]" %"$$temp563", ptr %indirectarg564, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 98, ptr byval(%"any[]") align 8 %indirectarg564) #5, !dbg !2816
  unreachable, !dbg !2816

panic592:                                         ; preds = %assert_ok588
  store i64 %285, ptr %taddr593, align 8
  %746 = insertvalue %any undef, ptr %taddr593, 0
  %747 = insertvalue %any %746, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add590, ptr %taddr594, align 8
  %748 = insertvalue %any undef, ptr %taddr594, 0
  %749 = insertvalue %any %748, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %747, ptr %varargslots595, align 16
  %ptradd596 = getelementptr inbounds i8, ptr %varargslots595, i64 16
  store %any %749, ptr %ptradd596, align 16
  %750 = insertvalue %"any[]" undef, ptr %varargslots595, 0
  %"$$temp597" = insertvalue %"any[]" %750, i64 2, 1
  store %"any[]" %"$$temp597", ptr %indirectarg598, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 113, ptr byval(%"any[]") align 8 %indirectarg598) #5, !dbg !2837
  unreachable, !dbg !2837

panic619:                                         ; preds = %if.exit616
  store i64 %301, ptr %taddr620, align 8
  %751 = insertvalue %any undef, ptr %taddr620, 0
  %752 = insertvalue %any %751, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %add617, ptr %taddr621, align 8
  %753 = insertvalue %any undef, ptr %taddr621, 0
  %754 = insertvalue %any %753, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %752, ptr %varargslots622, align 16
  %ptradd623 = getelementptr inbounds i8, ptr %varargslots622, i64 16
  store %any %754, ptr %ptradd623, align 16
  %755 = insertvalue %"any[]" undef, ptr %varargslots622, 0
  %"$$temp624" = insertvalue %"any[]" %755, i64 2, 1
  store %"any[]" %"$$temp624", ptr %indirectarg625, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 61, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 120, ptr byval(%"any[]") align 8 %indirectarg625) #5, !dbg !2851
  unreachable, !dbg !2851

panic628:                                         ; preds = %checkok626
  store i64 %add617, ptr %taddr629, align 8
  %756 = insertvalue %any undef, ptr %taddr629, 0
  %757 = insertvalue %any %756, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %757, ptr %varargslots630, align 16
  %758 = insertvalue %"any[]" undef, ptr %varargslots630, 0
  %"$$temp631" = insertvalue %"any[]" %758, i64 1, 1
  store %"any[]" %"$$temp631", ptr %indirectarg632, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.81, i64 22, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 120, ptr byval(%"any[]") align 8 %indirectarg632) #5, !dbg !2850
  unreachable, !dbg !2850

panic685:                                         ; preds = %loop.body682
  store i64 %sext683, ptr %taddr686, align 8
  %759 = insertvalue %any undef, ptr %taddr686, 0
  %760 = insertvalue %any %759, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %760, ptr %varargslots687, align 16
  %761 = insertvalue %"any[]" undef, ptr %varargslots687, 0
  %"$$temp688" = insertvalue %"any[]" %761, i64 1, 1
  store %"any[]" %"$$temp688", ptr %indirectarg689, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 138, ptr byval(%"any[]") align 8 %indirectarg689) #5, !dbg !2879
  unreachable, !dbg !2879

panic692:                                         ; preds = %checkok690
  store i64 128, ptr %taddr693, align 8
  %762 = insertvalue %any undef, ptr %taddr693, 0
  %763 = insertvalue %any %762, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext683, ptr %taddr694, align 8
  %764 = insertvalue %any undef, ptr %taddr694, 0
  %765 = insertvalue %any %764, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %763, ptr %varargslots695, align 16
  %ptradd696 = getelementptr inbounds i8, ptr %varargslots695, i64 16
  store %any %765, ptr %ptradd696, align 16
  %766 = insertvalue %"any[]" undef, ptr %varargslots695, 0
  %"$$temp697" = insertvalue %"any[]" %766, i64 2, 1
  store %"any[]" %"$$temp697", ptr %indirectarg698, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 138, ptr byval(%"any[]") align 8 %indirectarg698) #5, !dbg !2879
  unreachable, !dbg !2879

panic731:                                         ; preds = %if.then725
  store i64 %sub729, ptr %taddr732, align 8
  %767 = insertvalue %any undef, ptr %taddr732, 0
  %768 = insertvalue %any %767, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %768, ptr %varargslots733, align 16
  %769 = insertvalue %"any[]" undef, ptr %varargslots733, 0
  %"$$temp734" = insertvalue %"any[]" %769, i64 1, 1
  store %"any[]" %"$$temp734", ptr %indirectarg735, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 152, ptr byval(%"any[]") align 8 %indirectarg735) #5, !dbg !2906
  unreachable, !dbg !2906

panic738:                                         ; preds = %checkok736
  store i64 8, ptr %taddr739, align 8
  %770 = insertvalue %any undef, ptr %taddr739, 0
  %771 = insertvalue %any %770, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub729, ptr %taddr740, align 8
  %772 = insertvalue %any undef, ptr %taddr740, 0
  %773 = insertvalue %any %772, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %771, ptr %varargslots741, align 16
  %ptradd742 = getelementptr inbounds i8, ptr %varargslots741, i64 16
  store %any %773, ptr %ptradd742, align 16
  %774 = insertvalue %"any[]" undef, ptr %varargslots741, 0
  %"$$temp743" = insertvalue %"any[]" %774, i64 2, 1
  store %"any[]" %"$$temp743", ptr %indirectarg744, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 152, ptr byval(%"any[]") align 8 %indirectarg744) #5, !dbg !2906
  unreachable, !dbg !2906

panic748:                                         ; preds = %checkok745
  %775 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2903
  call void %775(ptr @.panic_msg.84, i64 17, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 152) #5, !dbg !2903
  unreachable, !dbg !2903

panic758:                                         ; preds = %or.rhs757
  store i32 %353, ptr %taddr759, align 4
  %776 = insertvalue %any undef, ptr %taddr759, 0
  %777 = insertvalue %any %776, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %777, ptr %varargslots760, align 16
  %778 = insertvalue %"any[]" undef, ptr %varargslots760, 0
  %"$$temp761" = insertvalue %"any[]" %778, i64 1, 1
  store %"any[]" %"$$temp761", ptr %indirectarg762, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.85, i64 35, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 154, ptr byval(%"any[]") align 8 %indirectarg762) #5, !dbg !2916
  unreachable, !dbg !2916

panic774:                                         ; preds = %if.then768
  store i64 %sub772, ptr %taddr775, align 8
  %779 = insertvalue %any undef, ptr %taddr775, 0
  %780 = insertvalue %any %779, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %780, ptr %varargslots776, align 16
  %781 = insertvalue %"any[]" undef, ptr %varargslots776, 0
  %"$$temp777" = insertvalue %"any[]" %781, i64 1, 1
  store %"any[]" %"$$temp777", ptr %indirectarg778, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 154, ptr byval(%"any[]") align 8 %indirectarg778) #5, !dbg !2919
  unreachable, !dbg !2919

panic781:                                         ; preds = %checkok779
  store i64 8, ptr %taddr782, align 8
  %782 = insertvalue %any undef, ptr %taddr782, 0
  %783 = insertvalue %any %782, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub772, ptr %taddr783, align 8
  %784 = insertvalue %any undef, ptr %taddr783, 0
  %785 = insertvalue %any %784, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %783, ptr %varargslots784, align 16
  %ptradd785 = getelementptr inbounds i8, ptr %varargslots784, i64 16
  store %any %785, ptr %ptradd785, align 16
  %786 = insertvalue %"any[]" undef, ptr %varargslots784, 0
  %"$$temp786" = insertvalue %"any[]" %786, i64 2, 1
  store %"any[]" %"$$temp786", ptr %indirectarg787, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 154, ptr byval(%"any[]") align 8 %indirectarg787) #5, !dbg !2919
  unreachable, !dbg !2919

panic803:                                         ; preds = %cond.phi
  store i64 %sub801, ptr %taddr804, align 8
  %787 = insertvalue %any undef, ptr %taddr804, 0
  %788 = insertvalue %any %787, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %788, ptr %varargslots805, align 16
  %789 = insertvalue %"any[]" undef, ptr %varargslots805, 0
  %"$$temp806" = insertvalue %"any[]" %789, i64 1, 1
  store %"any[]" %"$$temp806", ptr %indirectarg807, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 161, ptr byval(%"any[]") align 8 %indirectarg807) #5, !dbg !2930
  unreachable, !dbg !2930

panic810:                                         ; preds = %checkok808
  store i64 8, ptr %taddr811, align 8
  %790 = insertvalue %any undef, ptr %taddr811, 0
  %791 = insertvalue %any %790, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub801, ptr %taddr812, align 8
  %792 = insertvalue %any undef, ptr %taddr812, 0
  %793 = insertvalue %any %792, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %791, ptr %varargslots813, align 16
  %ptradd814 = getelementptr inbounds i8, ptr %varargslots813, i64 16
  store %any %793, ptr %ptradd814, align 16
  %794 = insertvalue %"any[]" undef, ptr %varargslots813, 0
  %"$$temp815" = insertvalue %"any[]" %794, i64 2, 1
  store %"any[]" %"$$temp815", ptr %indirectarg816, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 161, ptr byval(%"any[]") align 8 %indirectarg816) #5, !dbg !2930
  unreachable, !dbg !2930

panic824:                                         ; preds = %loop.body821
  store i64 %sext822, ptr %taddr825, align 8
  %795 = insertvalue %any undef, ptr %taddr825, 0
  %796 = insertvalue %any %795, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %796, ptr %varargslots826, align 16
  %797 = insertvalue %"any[]" undef, ptr %varargslots826, 0
  %"$$temp827" = insertvalue %"any[]" %797, i64 1, 1
  store %"any[]" %"$$temp827", ptr %indirectarg828, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 165, ptr byval(%"any[]") align 8 %indirectarg828) #5, !dbg !2941
  unreachable, !dbg !2941

panic831:                                         ; preds = %checkok829
  store i64 128, ptr %taddr832, align 8
  %798 = insertvalue %any undef, ptr %taddr832, 0
  %799 = insertvalue %any %798, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext822, ptr %taddr833, align 8
  %800 = insertvalue %any undef, ptr %taddr833, 0
  %801 = insertvalue %any %800, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %799, ptr %varargslots834, align 16
  %ptradd835 = getelementptr inbounds i8, ptr %varargslots834, i64 16
  store %any %801, ptr %ptradd835, align 16
  %802 = insertvalue %"any[]" undef, ptr %varargslots834, 0
  %"$$temp836" = insertvalue %"any[]" %802, i64 2, 1
  store %"any[]" %"$$temp836", ptr %indirectarg837, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 165, ptr byval(%"any[]") align 8 %indirectarg837) #5, !dbg !2941
  unreachable, !dbg !2941

panic841:                                         ; preds = %checkok838
  %803 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2943
  call void %803(ptr @.panic_msg.86, i64 10, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 165) #5, !dbg !2943
  unreachable, !dbg !2943

panic846:                                         ; preds = %checkok842
  store i64 %sext844, ptr %taddr847, align 8
  %804 = insertvalue %any undef, ptr %taddr847, 0
  %805 = insertvalue %any %804, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %805, ptr %varargslots848, align 16
  %806 = insertvalue %"any[]" undef, ptr %varargslots848, 0
  %"$$temp849" = insertvalue %"any[]" %806, i64 1, 1
  store %"any[]" %"$$temp849", ptr %indirectarg850, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 166, ptr byval(%"any[]") align 8 %indirectarg850) #5, !dbg !2944
  unreachable, !dbg !2944

panic853:                                         ; preds = %checkok851
  store i64 128, ptr %taddr854, align 8
  %807 = insertvalue %any undef, ptr %taddr854, 0
  %808 = insertvalue %any %807, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext844, ptr %taddr855, align 8
  %809 = insertvalue %any undef, ptr %taddr855, 0
  %810 = insertvalue %any %809, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %808, ptr %varargslots856, align 16
  %ptradd857 = getelementptr inbounds i8, ptr %varargslots856, i64 16
  store %any %810, ptr %ptradd857, align 16
  %811 = insertvalue %"any[]" undef, ptr %varargslots856, 0
  %"$$temp858" = insertvalue %"any[]" %811, i64 2, 1
  store %"any[]" %"$$temp858", ptr %indirectarg859, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 166, ptr byval(%"any[]") align 8 %indirectarg859) #5, !dbg !2944
  unreachable, !dbg !2944

panic864:                                         ; preds = %checkok860
  store i64 %sext862, ptr %taddr865, align 8
  %812 = insertvalue %any undef, ptr %taddr865, 0
  %813 = insertvalue %any %812, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %813, ptr %varargslots866, align 16
  %814 = insertvalue %"any[]" undef, ptr %varargslots866, 0
  %"$$temp867" = insertvalue %"any[]" %814, i64 1, 1
  store %"any[]" %"$$temp867", ptr %indirectarg868, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 166, ptr byval(%"any[]") align 8 %indirectarg868) #5, !dbg !2945
  unreachable, !dbg !2945

panic871:                                         ; preds = %checkok869
  store i64 128, ptr %taddr872, align 8
  %815 = insertvalue %any undef, ptr %taddr872, 0
  %816 = insertvalue %any %815, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext862, ptr %taddr873, align 8
  %817 = insertvalue %any undef, ptr %taddr873, 0
  %818 = insertvalue %any %817, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %816, ptr %varargslots874, align 16
  %ptradd875 = getelementptr inbounds i8, ptr %varargslots874, i64 16
  store %any %818, ptr %ptradd875, align 16
  %819 = insertvalue %"any[]" undef, ptr %varargslots874, 0
  %"$$temp876" = insertvalue %"any[]" %819, i64 2, 1
  store %"any[]" %"$$temp876", ptr %indirectarg877, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 166, ptr byval(%"any[]") align 8 %indirectarg877) #5, !dbg !2945
  unreachable, !dbg !2945

panic881:                                         ; preds = %checkok878
  %820 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2947
  call void %820(ptr @.panic_msg.84, i64 17, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 166) #5, !dbg !2947
  unreachable, !dbg !2947

panic885:                                         ; preds = %checkok882
  %821 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2950
  call void %821(ptr @.panic_msg.84, i64 17, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 167) #5, !dbg !2950
  unreachable, !dbg !2950

panic893:                                         ; preds = %and.rhs890
  store i64 %sext891, ptr %taddr894, align 8
  %822 = insertvalue %any undef, ptr %taddr894, 0
  %823 = insertvalue %any %822, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %823, ptr %varargslots895, align 16
  %824 = insertvalue %"any[]" undef, ptr %varargslots895, 0
  %"$$temp896" = insertvalue %"any[]" %824, i64 1, 1
  store %"any[]" %"$$temp896", ptr %indirectarg897, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 168, ptr byval(%"any[]") align 8 %indirectarg897) #5, !dbg !2954
  unreachable, !dbg !2954

panic900:                                         ; preds = %checkok898
  store i64 128, ptr %taddr901, align 8
  %825 = insertvalue %any undef, ptr %taddr901, 0
  %826 = insertvalue %any %825, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext891, ptr %taddr902, align 8
  %827 = insertvalue %any undef, ptr %taddr902, 0
  %828 = insertvalue %any %827, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %826, ptr %varargslots903, align 16
  %ptradd904 = getelementptr inbounds i8, ptr %varargslots903, i64 16
  store %any %828, ptr %ptradd904, align 16
  %829 = insertvalue %"any[]" undef, ptr %varargslots903, 0
  %"$$temp905" = insertvalue %"any[]" %829, i64 2, 1
  store %"any[]" %"$$temp905", ptr %indirectarg906, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 168, ptr byval(%"any[]") align 8 %indirectarg906) #5, !dbg !2954
  unreachable, !dbg !2954

panic924:                                         ; preds = %if.then920
  store i64 %sext922, ptr %taddr925, align 8
  %830 = insertvalue %any undef, ptr %taddr925, 0
  %831 = insertvalue %any %830, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %831, ptr %varargslots926, align 16
  %832 = insertvalue %"any[]" undef, ptr %varargslots926, 0
  %"$$temp927" = insertvalue %"any[]" %832, i64 1, 1
  store %"any[]" %"$$temp927", ptr %indirectarg928, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 174, ptr byval(%"any[]") align 8 %indirectarg928) #5, !dbg !2960
  unreachable, !dbg !2960

panic931:                                         ; preds = %checkok929
  store i64 128, ptr %taddr932, align 8
  %833 = insertvalue %any undef, ptr %taddr932, 0
  %834 = insertvalue %any %833, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext922, ptr %taddr933, align 8
  %835 = insertvalue %any undef, ptr %taddr933, 0
  %836 = insertvalue %any %835, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %834, ptr %varargslots934, align 16
  %ptradd935 = getelementptr inbounds i8, ptr %varargslots934, i64 16
  store %any %836, ptr %ptradd935, align 16
  %837 = insertvalue %"any[]" undef, ptr %varargslots934, 0
  %"$$temp936" = insertvalue %"any[]" %837, i64 2, 1
  store %"any[]" %"$$temp936", ptr %indirectarg937, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 174, ptr byval(%"any[]") align 8 %indirectarg937) #5, !dbg !2960
  unreachable, !dbg !2960

panic951:                                         ; preds = %and.rhs948
  store i64 %sext949, ptr %taddr952, align 8
  %838 = insertvalue %any undef, ptr %taddr952, 0
  %839 = insertvalue %any %838, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %839, ptr %varargslots953, align 16
  %840 = insertvalue %"any[]" undef, ptr %varargslots953, 0
  %"$$temp954" = insertvalue %"any[]" %840, i64 1, 1
  store %"any[]" %"$$temp954", ptr %indirectarg955, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 179, ptr byval(%"any[]") align 8 %indirectarg955) #5, !dbg !2969
  unreachable, !dbg !2969

panic958:                                         ; preds = %checkok956
  store i64 128, ptr %taddr959, align 8
  %841 = insertvalue %any undef, ptr %taddr959, 0
  %842 = insertvalue %any %841, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext949, ptr %taddr960, align 8
  %843 = insertvalue %any undef, ptr %taddr960, 0
  %844 = insertvalue %any %843, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %842, ptr %varargslots961, align 16
  %ptradd962 = getelementptr inbounds i8, ptr %varargslots961, i64 16
  store %any %844, ptr %ptradd962, align 16
  %845 = insertvalue %"any[]" undef, ptr %varargslots961, 0
  %"$$temp963" = insertvalue %"any[]" %845, i64 2, 1
  store %"any[]" %"$$temp963", ptr %indirectarg964, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 179, ptr byval(%"any[]") align 8 %indirectarg964) #5, !dbg !2969
  unreachable, !dbg !2969

panic981:                                         ; preds = %loop.body977
  store i64 %sext979, ptr %taddr982, align 8
  %846 = insertvalue %any undef, ptr %taddr982, 0
  %847 = insertvalue %any %846, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %847, ptr %varargslots983, align 16
  %848 = insertvalue %"any[]" undef, ptr %varargslots983, 0
  %"$$temp984" = insertvalue %"any[]" %848, i64 1, 1
  store %"any[]" %"$$temp984", ptr %indirectarg985, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 185, ptr byval(%"any[]") align 8 %indirectarg985) #5, !dbg !2981
  unreachable, !dbg !2981

panic988:                                         ; preds = %checkok986
  store i64 128, ptr %taddr989, align 8
  %849 = insertvalue %any undef, ptr %taddr989, 0
  %850 = insertvalue %any %849, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext979, ptr %taddr990, align 8
  %851 = insertvalue %any undef, ptr %taddr990, 0
  %852 = insertvalue %any %851, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %850, ptr %varargslots991, align 16
  %ptradd992 = getelementptr inbounds i8, ptr %varargslots991, i64 16
  store %any %852, ptr %ptradd992, align 16
  %853 = insertvalue %"any[]" undef, ptr %varargslots991, 0
  %"$$temp993" = insertvalue %"any[]" %853, i64 2, 1
  store %"any[]" %"$$temp993", ptr %indirectarg994, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 185, ptr byval(%"any[]") align 8 %indirectarg994) #5, !dbg !2981
  unreachable, !dbg !2981

panic1006:                                        ; preds = %if.then1001
  store i64 %sext1004, ptr %taddr1007, align 8
  %854 = insertvalue %any undef, ptr %taddr1007, 0
  %855 = insertvalue %any %854, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %855, ptr %varargslots1008, align 16
  %856 = insertvalue %"any[]" undef, ptr %varargslots1008, 0
  %"$$temp1009" = insertvalue %"any[]" %856, i64 1, 1
  store %"any[]" %"$$temp1009", ptr %indirectarg1010, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 189, ptr byval(%"any[]") align 8 %indirectarg1010) #5, !dbg !2988
  unreachable, !dbg !2988

panic1013:                                        ; preds = %checkok1011
  store i64 128, ptr %taddr1014, align 8
  %857 = insertvalue %any undef, ptr %taddr1014, 0
  %858 = insertvalue %any %857, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1004, ptr %taddr1015, align 8
  %859 = insertvalue %any undef, ptr %taddr1015, 0
  %860 = insertvalue %any %859, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %858, ptr %varargslots1016, align 16
  %ptradd1017 = getelementptr inbounds i8, ptr %varargslots1016, i64 16
  store %any %860, ptr %ptradd1017, align 16
  %861 = insertvalue %"any[]" undef, ptr %varargslots1016, 0
  %"$$temp1018" = insertvalue %"any[]" %861, i64 2, 1
  store %"any[]" %"$$temp1018", ptr %indirectarg1019, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 189, ptr byval(%"any[]") align 8 %indirectarg1019) #5, !dbg !2988
  unreachable, !dbg !2988

panic1027:                                        ; preds = %if.else1024
  store i64 %sext1025, ptr %taddr1028, align 8
  %862 = insertvalue %any undef, ptr %taddr1028, 0
  %863 = insertvalue %any %862, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %863, ptr %varargslots1029, align 16
  %864 = insertvalue %"any[]" undef, ptr %varargslots1029, 0
  %"$$temp1030" = insertvalue %"any[]" %864, i64 1, 1
  store %"any[]" %"$$temp1030", ptr %indirectarg1031, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 194, ptr byval(%"any[]") align 8 %indirectarg1031) #5, !dbg !2993
  unreachable, !dbg !2993

panic1034:                                        ; preds = %checkok1032
  store i64 128, ptr %taddr1035, align 8
  %865 = insertvalue %any undef, ptr %taddr1035, 0
  %866 = insertvalue %any %865, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1025, ptr %taddr1036, align 8
  %867 = insertvalue %any undef, ptr %taddr1036, 0
  %868 = insertvalue %any %867, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %866, ptr %varargslots1037, align 16
  %ptradd1038 = getelementptr inbounds i8, ptr %varargslots1037, i64 16
  store %any %868, ptr %ptradd1038, align 16
  %869 = insertvalue %"any[]" undef, ptr %varargslots1037, 0
  %"$$temp1039" = insertvalue %"any[]" %869, i64 2, 1
  store %"any[]" %"$$temp1039", ptr %indirectarg1040, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 194, ptr byval(%"any[]") align 8 %indirectarg1040) #5, !dbg !2993
  unreachable, !dbg !2993

panic1055:                                        ; preds = %and.rhs1052
  store i64 %sext1053, ptr %taddr1056, align 8
  %870 = insertvalue %any undef, ptr %taddr1056, 0
  %871 = insertvalue %any %870, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %871, ptr %varargslots1057, align 16
  %872 = insertvalue %"any[]" undef, ptr %varargslots1057, 0
  %"$$temp1058" = insertvalue %"any[]" %872, i64 1, 1
  store %"any[]" %"$$temp1058", ptr %indirectarg1059, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 196, ptr byval(%"any[]") align 8 %indirectarg1059) #5, !dbg !2999
  unreachable, !dbg !2999

panic1062:                                        ; preds = %checkok1060
  store i64 128, ptr %taddr1063, align 8
  %873 = insertvalue %any undef, ptr %taddr1063, 0
  %874 = insertvalue %any %873, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1053, ptr %taddr1064, align 8
  %875 = insertvalue %any undef, ptr %taddr1064, 0
  %876 = insertvalue %any %875, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %874, ptr %varargslots1065, align 16
  %ptradd1066 = getelementptr inbounds i8, ptr %varargslots1065, i64 16
  store %any %876, ptr %ptradd1066, align 16
  %877 = insertvalue %"any[]" undef, ptr %varargslots1065, 0
  %"$$temp1067" = insertvalue %"any[]" %877, i64 2, 1
  store %"any[]" %"$$temp1067", ptr %indirectarg1068, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 196, ptr byval(%"any[]") align 8 %indirectarg1068) #5, !dbg !2999
  unreachable, !dbg !2999

panic1095:                                        ; preds = %if.then1088
  store i64 %sext1093, ptr %taddr1096, align 8
  %878 = insertvalue %any undef, ptr %taddr1096, 0
  %879 = insertvalue %any %878, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %879, ptr %varargslots1097, align 16
  %880 = insertvalue %"any[]" undef, ptr %varargslots1097, 0
  %"$$temp1098" = insertvalue %"any[]" %880, i64 1, 1
  store %"any[]" %"$$temp1098", ptr %indirectarg1099, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 206, ptr byval(%"any[]") align 8 %indirectarg1099) #5, !dbg !3013
  unreachable, !dbg !3013

panic1102:                                        ; preds = %checkok1100
  store i64 128, ptr %taddr1103, align 8
  %881 = insertvalue %any undef, ptr %taddr1103, 0
  %882 = insertvalue %any %881, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1093, ptr %taddr1104, align 8
  %883 = insertvalue %any undef, ptr %taddr1104, 0
  %884 = insertvalue %any %883, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %882, ptr %varargslots1105, align 16
  %ptradd1106 = getelementptr inbounds i8, ptr %varargslots1105, i64 16
  store %any %884, ptr %ptradd1106, align 16
  %885 = insertvalue %"any[]" undef, ptr %varargslots1105, 0
  %"$$temp1107" = insertvalue %"any[]" %885, i64 2, 1
  store %"any[]" %"$$temp1107", ptr %indirectarg1108, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 206, ptr byval(%"any[]") align 8 %indirectarg1108) #5, !dbg !3013
  unreachable, !dbg !3013

panic1113:                                        ; preds = %checkok1109
  store i64 %sext1111, ptr %taddr1114, align 8
  %886 = insertvalue %any undef, ptr %taddr1114, 0
  %887 = insertvalue %any %886, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %887, ptr %varargslots1115, align 16
  %888 = insertvalue %"any[]" undef, ptr %varargslots1115, 0
  %"$$temp1116" = insertvalue %"any[]" %888, i64 1, 1
  store %"any[]" %"$$temp1116", ptr %indirectarg1117, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 206, ptr byval(%"any[]") align 8 %indirectarg1117) #5, !dbg !3014
  unreachable, !dbg !3014

panic1120:                                        ; preds = %checkok1118
  store i64 128, ptr %taddr1121, align 8
  %889 = insertvalue %any undef, ptr %taddr1121, 0
  %890 = insertvalue %any %889, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1111, ptr %taddr1122, align 8
  %891 = insertvalue %any undef, ptr %taddr1122, 0
  %892 = insertvalue %any %891, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %890, ptr %varargslots1123, align 16
  %ptradd1124 = getelementptr inbounds i8, ptr %varargslots1123, i64 16
  store %any %892, ptr %ptradd1124, align 16
  %893 = insertvalue %"any[]" undef, ptr %varargslots1123, 0
  %"$$temp1125" = insertvalue %"any[]" %893, i64 2, 1
  store %"any[]" %"$$temp1125", ptr %indirectarg1126, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 206, ptr byval(%"any[]") align 8 %indirectarg1126) #5, !dbg !3014
  unreachable, !dbg !3014

panic1133:                                        ; preds = %if.exit1130
  store i64 %sext1131, ptr %taddr1134, align 8
  %894 = insertvalue %any undef, ptr %taddr1134, 0
  %895 = insertvalue %any %894, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %895, ptr %varargslots1135, align 16
  %896 = insertvalue %"any[]" undef, ptr %varargslots1135, 0
  %"$$temp1136" = insertvalue %"any[]" %896, i64 1, 1
  store %"any[]" %"$$temp1136", ptr %indirectarg1137, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 208, ptr byval(%"any[]") align 8 %indirectarg1137) #5, !dbg !3016
  unreachable, !dbg !3016

panic1140:                                        ; preds = %checkok1138
  store i64 128, ptr %taddr1141, align 8
  %897 = insertvalue %any undef, ptr %taddr1141, 0
  %898 = insertvalue %any %897, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1131, ptr %taddr1142, align 8
  %899 = insertvalue %any undef, ptr %taddr1142, 0
  %900 = insertvalue %any %899, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %898, ptr %varargslots1143, align 16
  %ptradd1144 = getelementptr inbounds i8, ptr %varargslots1143, i64 16
  store %any %900, ptr %ptradd1144, align 16
  %901 = insertvalue %"any[]" undef, ptr %varargslots1143, 0
  %"$$temp1145" = insertvalue %"any[]" %901, i64 2, 1
  store %"any[]" %"$$temp1145", ptr %indirectarg1146, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 208, ptr byval(%"any[]") align 8 %indirectarg1146) #5, !dbg !3016
  unreachable, !dbg !3016

panic1162:                                        ; preds = %or.rhs1159
  store i64 %sext1160, ptr %taddr1163, align 8
  %902 = insertvalue %any undef, ptr %taddr1163, 0
  %903 = insertvalue %any %902, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %903, ptr %varargslots1164, align 16
  %904 = insertvalue %"any[]" undef, ptr %varargslots1164, 0
  %"$$temp1165" = insertvalue %"any[]" %904, i64 1, 1
  store %"any[]" %"$$temp1165", ptr %indirectarg1166, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 221, ptr byval(%"any[]") align 8 %indirectarg1166) #5, !dbg !3037
  unreachable, !dbg !3037

panic1169:                                        ; preds = %checkok1167
  store i64 128, ptr %taddr1170, align 8
  %905 = insertvalue %any undef, ptr %taddr1170, 0
  %906 = insertvalue %any %905, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1160, ptr %taddr1171, align 8
  %907 = insertvalue %any undef, ptr %taddr1171, 0
  %908 = insertvalue %any %907, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %906, ptr %varargslots1172, align 16
  %ptradd1173 = getelementptr inbounds i8, ptr %varargslots1172, i64 16
  store %any %908, ptr %ptradd1173, align 16
  %909 = insertvalue %"any[]" undef, ptr %varargslots1172, 0
  %"$$temp1174" = insertvalue %"any[]" %909, i64 2, 1
  store %"any[]" %"$$temp1174", ptr %indirectarg1175, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 221, ptr byval(%"any[]") align 8 %indirectarg1175) #5, !dbg !3037
  unreachable, !dbg !3037

panic1180:                                        ; preds = %checkok1176
  store i64 %sext1178, ptr %taddr1181, align 8
  %910 = insertvalue %any undef, ptr %taddr1181, 0
  %911 = insertvalue %any %910, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %911, ptr %varargslots1182, align 16
  %912 = insertvalue %"any[]" undef, ptr %varargslots1182, 0
  %"$$temp1183" = insertvalue %"any[]" %912, i64 1, 1
  store %"any[]" %"$$temp1183", ptr %indirectarg1184, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 221, ptr byval(%"any[]") align 8 %indirectarg1184) #5, !dbg !3038
  unreachable, !dbg !3038

panic1187:                                        ; preds = %checkok1185
  store i64 2, ptr %taddr1188, align 8
  %913 = insertvalue %any undef, ptr %taddr1188, 0
  %914 = insertvalue %any %913, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1178, ptr %taddr1189, align 8
  %915 = insertvalue %any undef, ptr %taddr1189, 0
  %916 = insertvalue %any %915, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %914, ptr %varargslots1190, align 16
  %ptradd1191 = getelementptr inbounds i8, ptr %varargslots1190, i64 16
  store %any %916, ptr %ptradd1191, align 16
  %917 = insertvalue %"any[]" undef, ptr %varargslots1190, 0
  %"$$temp1192" = insertvalue %"any[]" %917, i64 2, 1
  store %"any[]" %"$$temp1192", ptr %indirectarg1193, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 221, ptr byval(%"any[]") align 8 %indirectarg1193) #5, !dbg !3038
  unreachable, !dbg !3038

panic1205:                                        ; preds = %if.exit1200
  store i64 %sext1203, ptr %taddr1206, align 8
  %918 = insertvalue %any undef, ptr %taddr1206, 0
  %919 = insertvalue %any %918, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %919, ptr %varargslots1207, align 16
  %920 = insertvalue %"any[]" undef, ptr %varargslots1207, 0
  %"$$temp1208" = insertvalue %"any[]" %920, i64 1, 1
  store %"any[]" %"$$temp1208", ptr %indirectarg1209, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 226, ptr byval(%"any[]") align 8 %indirectarg1209) #5, !dbg !3043
  unreachable, !dbg !3043

panic1212:                                        ; preds = %checkok1210
  store i64 128, ptr %taddr1213, align 8
  %921 = insertvalue %any undef, ptr %taddr1213, 0
  %922 = insertvalue %any %921, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1203, ptr %taddr1214, align 8
  %923 = insertvalue %any undef, ptr %taddr1214, 0
  %924 = insertvalue %any %923, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %922, ptr %varargslots1215, align 16
  %ptradd1216 = getelementptr inbounds i8, ptr %varargslots1215, i64 16
  store %any %924, ptr %ptradd1216, align 16
  %925 = insertvalue %"any[]" undef, ptr %varargslots1215, 0
  %"$$temp1217" = insertvalue %"any[]" %925, i64 2, 1
  store %"any[]" %"$$temp1217", ptr %indirectarg1218, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 226, ptr byval(%"any[]") align 8 %indirectarg1218) #5, !dbg !3043
  unreachable, !dbg !3043

panic1223:                                        ; preds = %checkok1219
  store i64 %sext1221, ptr %taddr1224, align 8
  %926 = insertvalue %any undef, ptr %taddr1224, 0
  %927 = insertvalue %any %926, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %927, ptr %varargslots1225, align 16
  %928 = insertvalue %"any[]" undef, ptr %varargslots1225, 0
  %"$$temp1226" = insertvalue %"any[]" %928, i64 1, 1
  store %"any[]" %"$$temp1226", ptr %indirectarg1227, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 226, ptr byval(%"any[]") align 8 %indirectarg1227) #5, !dbg !3045
  unreachable, !dbg !3045

panic1230:                                        ; preds = %checkok1228
  store i64 2, ptr %taddr1231, align 8
  %929 = insertvalue %any undef, ptr %taddr1231, 0
  %930 = insertvalue %any %929, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1221, ptr %taddr1232, align 8
  %931 = insertvalue %any undef, ptr %taddr1232, 0
  %932 = insertvalue %any %931, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %930, ptr %varargslots1233, align 16
  %ptradd1234 = getelementptr inbounds i8, ptr %varargslots1233, i64 16
  store %any %932, ptr %ptradd1234, align 16
  %933 = insertvalue %"any[]" undef, ptr %varargslots1233, 0
  %"$$temp1235" = insertvalue %"any[]" %933, i64 2, 1
  store %"any[]" %"$$temp1235", ptr %indirectarg1236, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 226, ptr byval(%"any[]") align 8 %indirectarg1236) #5, !dbg !3045
  unreachable, !dbg !3045

panic1261:                                        ; preds = %loop.body1257
  store i64 %sext1259, ptr %taddr1262, align 8
  %934 = insertvalue %any undef, ptr %taddr1262, 0
  %935 = insertvalue %any %934, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %935, ptr %varargslots1263, align 16
  %936 = insertvalue %"any[]" undef, ptr %varargslots1263, 0
  %"$$temp1264" = insertvalue %"any[]" %936, i64 1, 1
  store %"any[]" %"$$temp1264", ptr %indirectarg1265, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 233, ptr byval(%"any[]") align 8 %indirectarg1265) #5, !dbg !3063
  unreachable, !dbg !3063

panic1268:                                        ; preds = %checkok1266
  store i64 128, ptr %taddr1269, align 8
  %937 = insertvalue %any undef, ptr %taddr1269, 0
  %938 = insertvalue %any %937, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1259, ptr %taddr1270, align 8
  %939 = insertvalue %any undef, ptr %taddr1270, 0
  %940 = insertvalue %any %939, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %938, ptr %varargslots1271, align 16
  %ptradd1272 = getelementptr inbounds i8, ptr %varargslots1271, i64 16
  store %any %940, ptr %ptradd1272, align 16
  %941 = insertvalue %"any[]" undef, ptr %varargslots1271, 0
  %"$$temp1273" = insertvalue %"any[]" %941, i64 2, 1
  store %"any[]" %"$$temp1273", ptr %indirectarg1274, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 233, ptr byval(%"any[]") align 8 %indirectarg1274) #5, !dbg !3063
  unreachable, !dbg !3063

panic1277:                                        ; preds = %checkok1275
  store i32 %497, ptr %taddr1278, align 4
  %942 = insertvalue %any undef, ptr %taddr1278, 0
  %943 = insertvalue %any %942, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %943, ptr %varargslots1279, align 16
  %944 = insertvalue %"any[]" undef, ptr %varargslots1279, 0
  %"$$temp1280" = insertvalue %"any[]" %944, i64 1, 1
  store %"any[]" %"$$temp1280", ptr %indirectarg1281, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.85, i64 35, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 233, ptr byval(%"any[]") align 8 %indirectarg1281) #5, !dbg !3065
  unreachable, !dbg !3065

panic1284:                                        ; preds = %checkok1282
  store i32 %497, ptr %taddr1285, align 4
  %945 = insertvalue %any undef, ptr %taddr1285, 0
  %946 = insertvalue %any %945, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %946, ptr %varargslots1286, align 16
  %947 = insertvalue %"any[]" undef, ptr %varargslots1286, 0
  %"$$temp1287" = insertvalue %"any[]" %947, i64 1, 1
  store %"any[]" %"$$temp1287", ptr %indirectarg1288, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.85, i64 35, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 233, ptr byval(%"any[]") align 8 %indirectarg1288) #5, !dbg !3065
  unreachable, !dbg !3065

panic1295:                                        ; preds = %checkok1289
  store i64 %sext1293, ptr %taddr1296, align 8
  %948 = insertvalue %any undef, ptr %taddr1296, 0
  %949 = insertvalue %any %948, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %949, ptr %varargslots1297, align 16
  %950 = insertvalue %"any[]" undef, ptr %varargslots1297, 0
  %"$$temp1298" = insertvalue %"any[]" %950, i64 1, 1
  store %"any[]" %"$$temp1298", ptr %indirectarg1299, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 234, ptr byval(%"any[]") align 8 %indirectarg1299) #5, !dbg !3067
  unreachable, !dbg !3067

panic1302:                                        ; preds = %checkok1300
  store i64 128, ptr %taddr1303, align 8
  %951 = insertvalue %any undef, ptr %taddr1303, 0
  %952 = insertvalue %any %951, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1293, ptr %taddr1304, align 8
  %953 = insertvalue %any undef, ptr %taddr1304, 0
  %954 = insertvalue %any %953, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %952, ptr %varargslots1305, align 16
  %ptradd1306 = getelementptr inbounds i8, ptr %varargslots1305, i64 16
  store %any %954, ptr %ptradd1306, align 16
  %955 = insertvalue %"any[]" undef, ptr %varargslots1305, 0
  %"$$temp1307" = insertvalue %"any[]" %955, i64 2, 1
  store %"any[]" %"$$temp1307", ptr %indirectarg1308, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 234, ptr byval(%"any[]") align 8 %indirectarg1308) #5, !dbg !3067
  unreachable, !dbg !3067

panic1313:                                        ; preds = %checkok1309
  store i64 %sext1311, ptr %taddr1314, align 8
  %956 = insertvalue %any undef, ptr %taddr1314, 0
  %957 = insertvalue %any %956, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %957, ptr %varargslots1315, align 16
  %958 = insertvalue %"any[]" undef, ptr %varargslots1315, 0
  %"$$temp1316" = insertvalue %"any[]" %958, i64 1, 1
  store %"any[]" %"$$temp1316", ptr %indirectarg1317, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 234, ptr byval(%"any[]") align 8 %indirectarg1317) #5, !dbg !3068
  unreachable, !dbg !3068

panic1320:                                        ; preds = %checkok1318
  store i64 128, ptr %taddr1321, align 8
  %959 = insertvalue %any undef, ptr %taddr1321, 0
  %960 = insertvalue %any %959, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1311, ptr %taddr1322, align 8
  %961 = insertvalue %any undef, ptr %taddr1322, 0
  %962 = insertvalue %any %961, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %960, ptr %varargslots1323, align 16
  %ptradd1324 = getelementptr inbounds i8, ptr %varargslots1323, i64 16
  store %any %962, ptr %ptradd1324, align 16
  %963 = insertvalue %"any[]" undef, ptr %varargslots1323, 0
  %"$$temp1325" = insertvalue %"any[]" %963, i64 2, 1
  store %"any[]" %"$$temp1325", ptr %indirectarg1326, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 234, ptr byval(%"any[]") align 8 %indirectarg1326) #5, !dbg !3068
  unreachable, !dbg !3068

panic1330:                                        ; preds = %checkok1327
  store i32 %508, ptr %taddr1331, align 4
  %964 = insertvalue %any undef, ptr %taddr1331, 0
  %965 = insertvalue %any %964, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %965, ptr %varargslots1332, align 16
  %966 = insertvalue %"any[]" undef, ptr %varargslots1332, 0
  %"$$temp1333" = insertvalue %"any[]" %966, i64 1, 1
  store %"any[]" %"$$temp1333", ptr %indirectarg1334, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.85, i64 35, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 234, ptr byval(%"any[]") align 8 %indirectarg1334) #5, !dbg !3070
  unreachable, !dbg !3070

panic1339:                                        ; preds = %checkok1335
  store i32 %512, ptr %taddr1340, align 4
  %967 = insertvalue %any undef, ptr %taddr1340, 0
  %968 = insertvalue %any %967, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %968, ptr %varargslots1341, align 16
  %969 = insertvalue %"any[]" undef, ptr %varargslots1341, 0
  %"$$temp1342" = insertvalue %"any[]" %969, i64 1, 1
  store %"any[]" %"$$temp1342", ptr %indirectarg1343, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.85, i64 35, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 235, ptr byval(%"any[]") align 8 %indirectarg1343) #5, !dbg !3073
  unreachable, !dbg !3073

panic1346:                                        ; preds = %checkok1344
  store i32 %512, ptr %taddr1347, align 4
  %970 = insertvalue %any undef, ptr %taddr1347, 0
  %971 = insertvalue %any %970, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %971, ptr %varargslots1348, align 16
  %972 = insertvalue %"any[]" undef, ptr %varargslots1348, 0
  %"$$temp1349" = insertvalue %"any[]" %972, i64 1, 1
  store %"any[]" %"$$temp1349", ptr %indirectarg1350, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.85, i64 35, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 235, ptr byval(%"any[]") align 8 %indirectarg1350) #5, !dbg !3073
  unreachable, !dbg !3073

panic1357:                                        ; preds = %and.rhs1354
  store i64 %sext1355, ptr %taddr1358, align 8
  %973 = insertvalue %any undef, ptr %taddr1358, 0
  %974 = insertvalue %any %973, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %974, ptr %varargslots1359, align 16
  %975 = insertvalue %"any[]" undef, ptr %varargslots1359, 0
  %"$$temp1360" = insertvalue %"any[]" %975, i64 1, 1
  store %"any[]" %"$$temp1360", ptr %indirectarg1361, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 236, ptr byval(%"any[]") align 8 %indirectarg1361) #5, !dbg !3077
  unreachable, !dbg !3077

panic1364:                                        ; preds = %checkok1362
  store i64 128, ptr %taddr1365, align 8
  %976 = insertvalue %any undef, ptr %taddr1365, 0
  %977 = insertvalue %any %976, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1355, ptr %taddr1366, align 8
  %978 = insertvalue %any undef, ptr %taddr1366, 0
  %979 = insertvalue %any %978, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %977, ptr %varargslots1367, align 16
  %ptradd1368 = getelementptr inbounds i8, ptr %varargslots1367, i64 16
  store %any %979, ptr %ptradd1368, align 16
  %980 = insertvalue %"any[]" undef, ptr %varargslots1367, 0
  %"$$temp1369" = insertvalue %"any[]" %980, i64 2, 1
  store %"any[]" %"$$temp1369", ptr %indirectarg1370, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 236, ptr byval(%"any[]") align 8 %indirectarg1370) #5, !dbg !3077
  unreachable, !dbg !3077

panic1393:                                        ; preds = %if.then1390
  store i64 %sext1391, ptr %taddr1394, align 8
  %981 = insertvalue %any undef, ptr %taddr1394, 0
  %982 = insertvalue %any %981, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %982, ptr %varargslots1395, align 16
  %983 = insertvalue %"any[]" undef, ptr %varargslots1395, 0
  %"$$temp1396" = insertvalue %"any[]" %983, i64 1, 1
  store %"any[]" %"$$temp1396", ptr %indirectarg1397, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 247, ptr byval(%"any[]") align 8 %indirectarg1397) #5, !dbg !3087
  unreachable, !dbg !3087

panic1400:                                        ; preds = %checkok1398
  store i64 128, ptr %taddr1401, align 8
  %984 = insertvalue %any undef, ptr %taddr1401, 0
  %985 = insertvalue %any %984, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1391, ptr %taddr1402, align 8
  %986 = insertvalue %any undef, ptr %taddr1402, 0
  %987 = insertvalue %any %986, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %985, ptr %varargslots1403, align 16
  %ptradd1404 = getelementptr inbounds i8, ptr %varargslots1403, i64 16
  store %any %987, ptr %ptradd1404, align 16
  %988 = insertvalue %"any[]" undef, ptr %varargslots1403, 0
  %"$$temp1405" = insertvalue %"any[]" %988, i64 2, 1
  store %"any[]" %"$$temp1405", ptr %indirectarg1406, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 247, ptr byval(%"any[]") align 8 %indirectarg1406) #5, !dbg !3087
  unreachable, !dbg !3087

panic1416:                                        ; preds = %if.else1411
  store i64 %sext1414, ptr %taddr1417, align 8
  %989 = insertvalue %any undef, ptr %taddr1417, 0
  %990 = insertvalue %any %989, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %990, ptr %varargslots1418, align 16
  %991 = insertvalue %"any[]" undef, ptr %varargslots1418, 0
  %"$$temp1419" = insertvalue %"any[]" %991, i64 1, 1
  store %"any[]" %"$$temp1419", ptr %indirectarg1420, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 252, ptr byval(%"any[]") align 8 %indirectarg1420) #5, !dbg !3091
  unreachable, !dbg !3091

panic1423:                                        ; preds = %checkok1421
  store i64 128, ptr %taddr1424, align 8
  %992 = insertvalue %any undef, ptr %taddr1424, 0
  %993 = insertvalue %any %992, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1414, ptr %taddr1425, align 8
  %994 = insertvalue %any undef, ptr %taddr1425, 0
  %995 = insertvalue %any %994, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %993, ptr %varargslots1426, align 16
  %ptradd1427 = getelementptr inbounds i8, ptr %varargslots1426, i64 16
  store %any %995, ptr %ptradd1427, align 16
  %996 = insertvalue %"any[]" undef, ptr %varargslots1426, 0
  %"$$temp1428" = insertvalue %"any[]" %996, i64 2, 1
  store %"any[]" %"$$temp1428", ptr %indirectarg1429, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 252, ptr byval(%"any[]") align 8 %indirectarg1429) #5, !dbg !3091
  unreachable, !dbg !3091

panic1450:                                        ; preds = %if.then1444
  store i64 %sext1448, ptr %taddr1451, align 8
  %997 = insertvalue %any undef, ptr %taddr1451, 0
  %998 = insertvalue %any %997, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %998, ptr %varargslots1452, align 16
  %999 = insertvalue %"any[]" undef, ptr %varargslots1452, 0
  %"$$temp1453" = insertvalue %"any[]" %999, i64 1, 1
  store %"any[]" %"$$temp1453", ptr %indirectarg1454, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 262, ptr byval(%"any[]") align 8 %indirectarg1454) #5, !dbg !3106
  unreachable, !dbg !3106

panic1457:                                        ; preds = %checkok1455
  store i64 128, ptr %taddr1458, align 8
  %1000 = insertvalue %any undef, ptr %taddr1458, 0
  %1001 = insertvalue %any %1000, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1448, ptr %taddr1459, align 8
  %1002 = insertvalue %any undef, ptr %taddr1459, 0
  %1003 = insertvalue %any %1002, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1001, ptr %varargslots1460, align 16
  %ptradd1461 = getelementptr inbounds i8, ptr %varargslots1460, i64 16
  store %any %1003, ptr %ptradd1461, align 16
  %1004 = insertvalue %"any[]" undef, ptr %varargslots1460, 0
  %"$$temp1462" = insertvalue %"any[]" %1004, i64 2, 1
  store %"any[]" %"$$temp1462", ptr %indirectarg1463, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 262, ptr byval(%"any[]") align 8 %indirectarg1463) #5, !dbg !3106
  unreachable, !dbg !3106

panic1472:                                        ; preds = %if.exit1466
  store i64 %sext1470, ptr %taddr1473, align 8
  %1005 = insertvalue %any undef, ptr %taddr1473, 0
  %1006 = insertvalue %any %1005, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1006, ptr %varargslots1474, align 16
  %1007 = insertvalue %"any[]" undef, ptr %varargslots1474, 0
  %"$$temp1475" = insertvalue %"any[]" %1007, i64 1, 1
  store %"any[]" %"$$temp1475", ptr %indirectarg1476, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 263, ptr byval(%"any[]") align 8 %indirectarg1476) #5, !dbg !3110
  unreachable, !dbg !3110

panic1479:                                        ; preds = %checkok1477
  store i64 128, ptr %taddr1480, align 8
  %1008 = insertvalue %any undef, ptr %taddr1480, 0
  %1009 = insertvalue %any %1008, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1470, ptr %taddr1481, align 8
  %1010 = insertvalue %any undef, ptr %taddr1481, 0
  %1011 = insertvalue %any %1010, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1009, ptr %varargslots1482, align 16
  %ptradd1483 = getelementptr inbounds i8, ptr %varargslots1482, i64 16
  store %any %1011, ptr %ptradd1483, align 16
  %1012 = insertvalue %"any[]" undef, ptr %varargslots1482, 0
  %"$$temp1484" = insertvalue %"any[]" %1012, i64 2, 1
  store %"any[]" %"$$temp1484", ptr %indirectarg1485, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 263, ptr byval(%"any[]") align 8 %indirectarg1485) #5, !dbg !3110
  unreachable, !dbg !3110

panic1522:                                        ; preds = %if.then1509
  %1013 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3147
  call void %1013(ptr @.panic_msg.86, i64 10, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 284) #5, !dbg !3147
  unreachable, !dbg !3147

panic1535:                                        ; preds = %if.then1530
  store i64 %sext1533, ptr %taddr1536, align 8
  %1014 = insertvalue %any undef, ptr %taddr1536, 0
  %1015 = insertvalue %any %1014, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1015, ptr %varargslots1537, align 16
  %1016 = insertvalue %"any[]" undef, ptr %varargslots1537, 0
  %"$$temp1538" = insertvalue %"any[]" %1016, i64 1, 1
  store %"any[]" %"$$temp1538", ptr %indirectarg1539, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 292, ptr byval(%"any[]") align 8 %indirectarg1539) #5, !dbg !3164
  unreachable, !dbg !3164

panic1542:                                        ; preds = %checkok1540
  store i64 128, ptr %taddr1543, align 8
  %1017 = insertvalue %any undef, ptr %taddr1543, 0
  %1018 = insertvalue %any %1017, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1533, ptr %taddr1544, align 8
  %1019 = insertvalue %any undef, ptr %taddr1544, 0
  %1020 = insertvalue %any %1019, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1018, ptr %varargslots1545, align 16
  %ptradd1546 = getelementptr inbounds i8, ptr %varargslots1545, i64 16
  store %any %1020, ptr %ptradd1546, align 16
  %1021 = insertvalue %"any[]" undef, ptr %varargslots1545, 0
  %"$$temp1547" = insertvalue %"any[]" %1021, i64 2, 1
  store %"any[]" %"$$temp1547", ptr %indirectarg1548, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.77, i64 9, i32 292, ptr byval(%"any[]") align 8 %indirectarg1548) #5, !dbg !3164
  unreachable, !dbg !3164
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_float(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !3225 {
entry:
  %s = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %chars = alloca %"char[]", align 8
  %blockret = alloca float, align 4
  %sign = alloca i32, align 4
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots8 = alloca [2 x %any], align 16
  %indirectarg11 = alloca %"any[]", align 8
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %varargslots20 = alloca [2 x %any], align 16
  %indirectarg23 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  %cmp.idx43 = alloca i64, align 8
  %cmp.idx57 = alloca i64, align 8
  %cmp.idx69 = alloca i64, align 8
  %taddr88 = alloca i64, align 8
  %taddr89 = alloca i64, align 8
  %varargslots90 = alloca [2 x %any], align 16
  %indirectarg93 = alloca %"any[]", align 8
  %taddr102 = alloca i64, align 8
  %taddr103 = alloca i64, align 8
  %varargslots104 = alloca [2 x %any], align 16
  %indirectarg107 = alloca %"any[]", align 8
  %taddr116 = alloca i64, align 8
  %taddr117 = alloca i64, align 8
  %varargslots118 = alloca [2 x %any], align 16
  %indirectarg121 = alloca %"any[]", align 8
  %chars125 = alloca %"char[]", align 8
  %sign126 = alloca i32, align 4
  %blockret127 = alloca double, align 8
  %scale = alloca double, align 8
  %x = alloca i32, align 4
  %rp = alloca i64, align 8
  %dc = alloca i64, align 8
  %c = alloca i8, align 1
  %got_rad = alloca i8, align 1
  %got_digit = alloca i8, align 1
  %got_tail = alloca i8, align 1
  %len = alloca i64, align 8
  %last_char = alloca i64, align 8
  %index = alloca i64, align 8
  %y = alloca double, align 8
  %taddr133 = alloca i64, align 8
  %taddr134 = alloca i64, align 8
  %varargslots135 = alloca [2 x %any], align 16
  %indirectarg138 = alloca %"any[]", align 8
  %taddr161 = alloca i64, align 8
  %taddr162 = alloca i64, align 8
  %varargslots163 = alloca [2 x %any], align 16
  %indirectarg166 = alloca %"any[]", align 8
  %taddr181 = alloca i64, align 8
  %taddr182 = alloca i64, align 8
  %varargslots183 = alloca [2 x %any], align 16
  %indirectarg186 = alloca %"any[]", align 8
  %d = alloca i32, align 4
  %blockret217 = alloca i32, align 4
  %switch227 = alloca i8, align 1
  %taddr259 = alloca i64, align 8
  %taddr260 = alloca i64, align 8
  %varargslots261 = alloca [2 x %any], align 16
  %indirectarg264 = alloca %"any[]", align 8
  %e2 = alloca i64, align 8
  %e2val = alloca i64, align 8
  %taddr289 = alloca i64, align 8
  %taddr290 = alloca i64, align 8
  %varargslots291 = alloca [2 x %any], align 16
  %indirectarg294 = alloca %"any[]", align 8
  %taddr297 = alloca i64, align 8
  %varargslots298 = alloca [1 x %any], align 16
  %indirectarg300 = alloca %"any[]", align 8
  %retparam = alloca i64, align 8
  %error_var = alloca i64, align 8
  %bits = alloca i32, align 4
  %bias = alloca double, align 8
  %x345 = alloca double, align 8
  %n = alloca i32, align 4
  %mag = alloca double, align 8
  %sgn = alloca double, align 8
  %x349 = alloca double, align 8
  %y350 = alloca double, align 8
  %x375 = alloca double, align 8
  %n377 = alloca i32, align 4
  %chars381 = alloca %"char[]", align 8
  %sign382 = alloca i32, align 4
  %blockret383 = alloca double, align 8
  %x386 = alloca [128 x i32], align 16
  %emax = alloca i32, align 4
  %index387 = alloca i64, align 8
  %got_digit388 = alloca i8, align 1
  %taddr392 = alloca i64, align 8
  %taddr393 = alloca i64, align 8
  %varargslots394 = alloca [2 x %any], align 16
  %indirectarg397 = alloca %"any[]", align 8
  %got_rad400 = alloca i8, align 1
  %lrp = alloca i64, align 8
  %dc401 = alloca i64, align 8
  %k = alloca i32, align 4
  %j = alloca i32, align 4
  %lnz = alloca i32, align 4
  %len402 = alloca i64, align 8
  %last_char404 = alloca i64, align 8
  %c409 = alloca i8, align 1
  %taddr414 = alloca i64, align 8
  %taddr415 = alloca i64, align 8
  %varargslots416 = alloca [2 x %any], align 16
  %indirectarg419 = alloca %"any[]", align 8
  %taddr447 = alloca i64, align 8
  %taddr448 = alloca i64, align 8
  %varargslots449 = alloca [2 x %any], align 16
  %indirectarg452 = alloca %"any[]", align 8
  %taddr467 = alloca i64, align 8
  %taddr468 = alloca i64, align 8
  %varargslots469 = alloca [2 x %any], align 16
  %indirectarg472 = alloca %"any[]", align 8
  %switch492 = alloca i8, align 1
  %taddr512 = alloca i64, align 8
  %varargslots513 = alloca [1 x %any], align 16
  %indirectarg515 = alloca %"any[]", align 8
  %taddr519 = alloca i64, align 8
  %taddr520 = alloca i64, align 8
  %varargslots521 = alloca [2 x %any], align 16
  %indirectarg524 = alloca %"any[]", align 8
  %taddr529 = alloca i64, align 8
  %varargslots530 = alloca [1 x %any], align 16
  %indirectarg532 = alloca %"any[]", align 8
  %taddr536 = alloca i64, align 8
  %taddr537 = alloca i64, align 8
  %varargslots538 = alloca [2 x %any], align 16
  %indirectarg541 = alloca %"any[]", align 8
  %taddr552 = alloca i64, align 8
  %varargslots553 = alloca [1 x %any], align 16
  %indirectarg555 = alloca %"any[]", align 8
  %taddr559 = alloca i64, align 8
  %taddr560 = alloca i64, align 8
  %varargslots561 = alloca [2 x %any], align 16
  %indirectarg564 = alloca %"any[]", align 8
  %taddr593 = alloca i64, align 8
  %taddr594 = alloca i64, align 8
  %varargslots595 = alloca [2 x %any], align 16
  %indirectarg598 = alloca %"any[]", align 8
  %e10 = alloca i64, align 8
  %taddr620 = alloca i64, align 8
  %taddr621 = alloca i64, align 8
  %varargslots622 = alloca [2 x %any], align 16
  %indirectarg625 = alloca %"any[]", align 8
  %taddr629 = alloca i64, align 8
  %varargslots630 = alloca [1 x %any], align 16
  %indirectarg632 = alloca %"any[]", align 8
  %retparam636 = alloca i64, align 8
  %error_var640 = alloca i64, align 8
  %taddr686 = alloca i64, align 8
  %varargslots687 = alloca [1 x %any], align 16
  %indirectarg689 = alloca %"any[]", align 8
  %taddr693 = alloca i64, align 8
  %taddr694 = alloca i64, align 8
  %varargslots695 = alloca [2 x %any], align 16
  %indirectarg698 = alloca %"any[]", align 8
  %a = alloca i32, align 4
  %z = alloca i32, align 4
  %e2706 = alloca i32, align 4
  %rp707 = alloca i64, align 8
  %taddr732 = alloca i64, align 8
  %varargslots733 = alloca [1 x %any], align 16
  %indirectarg735 = alloca %"any[]", align 8
  %taddr739 = alloca i64, align 8
  %taddr740 = alloca i64, align 8
  %varargslots741 = alloca [2 x %any], align 16
  %indirectarg744 = alloca %"any[]", align 8
  %bitlim = alloca i32, align 4
  %taddr759 = alloca i32, align 4
  %varargslots760 = alloca [1 x %any], align 16
  %indirectarg762 = alloca %"any[]", align 8
  %taddr775 = alloca i64, align 8
  %varargslots776 = alloca [1 x %any], align 16
  %indirectarg778 = alloca %"any[]", align 8
  %taddr782 = alloca i64, align 8
  %taddr783 = alloca i64, align 8
  %varargslots784 = alloca [2 x %any], align 16
  %indirectarg787 = alloca %"any[]", align 8
  %rpm9 = alloca i64, align 8
  %p10 = alloca i32, align 4
  %taddr804 = alloca i64, align 8
  %varargslots805 = alloca [1 x %any], align 16
  %indirectarg807 = alloca %"any[]", align 8
  %taddr811 = alloca i64, align 8
  %taddr812 = alloca i64, align 8
  %varargslots813 = alloca [2 x %any], align 16
  %indirectarg816 = alloca %"any[]", align 8
  %carry = alloca i32, align 4
  %tmp = alloca i32, align 4
  %taddr825 = alloca i64, align 8
  %varargslots826 = alloca [1 x %any], align 16
  %indirectarg828 = alloca %"any[]", align 8
  %taddr832 = alloca i64, align 8
  %taddr833 = alloca i64, align 8
  %varargslots834 = alloca [2 x %any], align 16
  %indirectarg837 = alloca %"any[]", align 8
  %taddr847 = alloca i64, align 8
  %varargslots848 = alloca [1 x %any], align 16
  %indirectarg850 = alloca %"any[]", align 8
  %taddr854 = alloca i64, align 8
  %taddr855 = alloca i64, align 8
  %varargslots856 = alloca [2 x %any], align 16
  %indirectarg859 = alloca %"any[]", align 8
  %taddr865 = alloca i64, align 8
  %varargslots866 = alloca [1 x %any], align 16
  %indirectarg868 = alloca %"any[]", align 8
  %taddr872 = alloca i64, align 8
  %taddr873 = alloca i64, align 8
  %varargslots874 = alloca [2 x %any], align 16
  %indirectarg877 = alloca %"any[]", align 8
  %taddr894 = alloca i64, align 8
  %varargslots895 = alloca [1 x %any], align 16
  %indirectarg897 = alloca %"any[]", align 8
  %taddr901 = alloca i64, align 8
  %taddr902 = alloca i64, align 8
  %varargslots903 = alloca [2 x %any], align 16
  %indirectarg906 = alloca %"any[]", align 8
  %taddr925 = alloca i64, align 8
  %varargslots926 = alloca [1 x %any], align 16
  %indirectarg928 = alloca %"any[]", align 8
  %taddr932 = alloca i64, align 8
  %taddr933 = alloca i64, align 8
  %varargslots934 = alloca [2 x %any], align 16
  %indirectarg937 = alloca %"any[]", align 8
  %taddr952 = alloca i64, align 8
  %varargslots953 = alloca [1 x %any], align 16
  %indirectarg955 = alloca %"any[]", align 8
  %taddr959 = alloca i64, align 8
  %taddr960 = alloca i64, align 8
  %varargslots961 = alloca [2 x %any], align 16
  %indirectarg964 = alloca %"any[]", align 8
  %carry973 = alloca i32, align 4
  %tmp978 = alloca i64, align 8
  %taddr982 = alloca i64, align 8
  %varargslots983 = alloca [1 x %any], align 16
  %indirectarg985 = alloca %"any[]", align 8
  %taddr989 = alloca i64, align 8
  %taddr990 = alloca i64, align 8
  %varargslots991 = alloca [2 x %any], align 16
  %indirectarg994 = alloca %"any[]", align 8
  %taddr1007 = alloca i64, align 8
  %varargslots1008 = alloca [1 x %any], align 16
  %indirectarg1010 = alloca %"any[]", align 8
  %taddr1014 = alloca i64, align 8
  %taddr1015 = alloca i64, align 8
  %varargslots1016 = alloca [2 x %any], align 16
  %indirectarg1019 = alloca %"any[]", align 8
  %taddr1028 = alloca i64, align 8
  %varargslots1029 = alloca [1 x %any], align 16
  %indirectarg1031 = alloca %"any[]", align 8
  %taddr1035 = alloca i64, align 8
  %taddr1036 = alloca i64, align 8
  %varargslots1037 = alloca [2 x %any], align 16
  %indirectarg1040 = alloca %"any[]", align 8
  %taddr1056 = alloca i64, align 8
  %varargslots1057 = alloca [1 x %any], align 16
  %indirectarg1059 = alloca %"any[]", align 8
  %taddr1063 = alloca i64, align 8
  %taddr1064 = alloca i64, align 8
  %varargslots1065 = alloca [2 x %any], align 16
  %indirectarg1068 = alloca %"any[]", align 8
  %taddr1096 = alloca i64, align 8
  %varargslots1097 = alloca [1 x %any], align 16
  %indirectarg1099 = alloca %"any[]", align 8
  %taddr1103 = alloca i64, align 8
  %taddr1104 = alloca i64, align 8
  %varargslots1105 = alloca [2 x %any], align 16
  %indirectarg1108 = alloca %"any[]", align 8
  %taddr1114 = alloca i64, align 8
  %varargslots1115 = alloca [1 x %any], align 16
  %indirectarg1117 = alloca %"any[]", align 8
  %taddr1121 = alloca i64, align 8
  %taddr1122 = alloca i64, align 8
  %varargslots1123 = alloca [2 x %any], align 16
  %indirectarg1126 = alloca %"any[]", align 8
  %taddr1134 = alloca i64, align 8
  %varargslots1135 = alloca [1 x %any], align 16
  %indirectarg1137 = alloca %"any[]", align 8
  %taddr1141 = alloca i64, align 8
  %taddr1142 = alloca i64, align 8
  %varargslots1143 = alloca [2 x %any], align 16
  %indirectarg1146 = alloca %"any[]", align 8
  %carry1152 = alloca i32, align 4
  %sh = alloca i32, align 4
  %i = alloca i32, align 4
  %taddr1163 = alloca i64, align 8
  %varargslots1164 = alloca [1 x %any], align 16
  %indirectarg1166 = alloca %"any[]", align 8
  %taddr1170 = alloca i64, align 8
  %taddr1171 = alloca i64, align 8
  %varargslots1172 = alloca [2 x %any], align 16
  %indirectarg1175 = alloca %"any[]", align 8
  %taddr1181 = alloca i64, align 8
  %varargslots1182 = alloca [1 x %any], align 16
  %indirectarg1184 = alloca %"any[]", align 8
  %taddr1188 = alloca i64, align 8
  %taddr1189 = alloca i64, align 8
  %varargslots1190 = alloca [2 x %any], align 16
  %indirectarg1193 = alloca %"any[]", align 8
  %taddr1206 = alloca i64, align 8
  %varargslots1207 = alloca [1 x %any], align 16
  %indirectarg1209 = alloca %"any[]", align 8
  %taddr1213 = alloca i64, align 8
  %taddr1214 = alloca i64, align 8
  %varargslots1215 = alloca [2 x %any], align 16
  %indirectarg1218 = alloca %"any[]", align 8
  %taddr1224 = alloca i64, align 8
  %varargslots1225 = alloca [1 x %any], align 16
  %indirectarg1227 = alloca %"any[]", align 8
  %taddr1231 = alloca i64, align 8
  %taddr1232 = alloca i64, align 8
  %varargslots1233 = alloca [2 x %any], align 16
  %indirectarg1236 = alloca %"any[]", align 8
  %tmp1258 = alloca i32, align 4
  %taddr1262 = alloca i64, align 8
  %varargslots1263 = alloca [1 x %any], align 16
  %indirectarg1265 = alloca %"any[]", align 8
  %taddr1269 = alloca i64, align 8
  %taddr1270 = alloca i64, align 8
  %varargslots1271 = alloca [2 x %any], align 16
  %indirectarg1274 = alloca %"any[]", align 8
  %taddr1278 = alloca i32, align 4
  %varargslots1279 = alloca [1 x %any], align 16
  %indirectarg1281 = alloca %"any[]", align 8
  %taddr1285 = alloca i32, align 4
  %varargslots1286 = alloca [1 x %any], align 16
  %indirectarg1288 = alloca %"any[]", align 8
  %taddr1296 = alloca i64, align 8
  %varargslots1297 = alloca [1 x %any], align 16
  %indirectarg1299 = alloca %"any[]", align 8
  %taddr1303 = alloca i64, align 8
  %taddr1304 = alloca i64, align 8
  %varargslots1305 = alloca [2 x %any], align 16
  %indirectarg1308 = alloca %"any[]", align 8
  %taddr1314 = alloca i64, align 8
  %varargslots1315 = alloca [1 x %any], align 16
  %indirectarg1317 = alloca %"any[]", align 8
  %taddr1321 = alloca i64, align 8
  %taddr1322 = alloca i64, align 8
  %varargslots1323 = alloca [2 x %any], align 16
  %indirectarg1326 = alloca %"any[]", align 8
  %taddr1331 = alloca i32, align 4
  %varargslots1332 = alloca [1 x %any], align 16
  %indirectarg1334 = alloca %"any[]", align 8
  %taddr1340 = alloca i32, align 4
  %varargslots1341 = alloca [1 x %any], align 16
  %indirectarg1343 = alloca %"any[]", align 8
  %taddr1347 = alloca i32, align 4
  %varargslots1348 = alloca [1 x %any], align 16
  %indirectarg1350 = alloca %"any[]", align 8
  %taddr1358 = alloca i64, align 8
  %varargslots1359 = alloca [1 x %any], align 16
  %indirectarg1361 = alloca %"any[]", align 8
  %taddr1365 = alloca i64, align 8
  %taddr1366 = alloca i64, align 8
  %varargslots1367 = alloca [2 x %any], align 16
  %indirectarg1370 = alloca %"any[]", align 8
  %taddr1394 = alloca i64, align 8
  %varargslots1395 = alloca [1 x %any], align 16
  %indirectarg1397 = alloca %"any[]", align 8
  %taddr1401 = alloca i64, align 8
  %taddr1402 = alloca i64, align 8
  %varargslots1403 = alloca [2 x %any], align 16
  %indirectarg1406 = alloca %"any[]", align 8
  %taddr1417 = alloca i64, align 8
  %varargslots1418 = alloca [1 x %any], align 16
  %indirectarg1420 = alloca %"any[]", align 8
  %taddr1424 = alloca i64, align 8
  %taddr1425 = alloca i64, align 8
  %varargslots1426 = alloca [2 x %any], align 16
  %indirectarg1429 = alloca %"any[]", align 8
  %y1436 = alloca double, align 8
  %i1437 = alloca i32, align 4
  %taddr1451 = alloca i64, align 8
  %varargslots1452 = alloca [1 x %any], align 16
  %indirectarg1454 = alloca %"any[]", align 8
  %taddr1458 = alloca i64, align 8
  %taddr1459 = alloca i64, align 8
  %varargslots1460 = alloca [2 x %any], align 16
  %indirectarg1463 = alloca %"any[]", align 8
  %taddr1473 = alloca i64, align 8
  %varargslots1474 = alloca [1 x %any], align 16
  %indirectarg1476 = alloca %"any[]", align 8
  %taddr1480 = alloca i64, align 8
  %taddr1481 = alloca i64, align 8
  %varargslots1482 = alloca [2 x %any], align 16
  %indirectarg1485 = alloca %"any[]", align 8
  %denormal = alloca i8, align 1
  %bits1494 = alloca i32, align 4
  %bias1507 = alloca double, align 8
  %frac = alloca double, align 8
  %x1510 = alloca double, align 8
  %n1513 = alloca i32, align 4
  %mag1514 = alloca double, align 8
  %sgn1515 = alloca double, align 8
  %x1516 = alloca double, align 8
  %y1517 = alloca double, align 8
  %x1518 = alloca double, align 8
  %n1520 = alloca i32, align 4
  %t = alloca i32, align 4
  %taddr1536 = alloca i64, align 8
  %varargslots1537 = alloca [1 x %any], align 16
  %indirectarg1539 = alloca %"any[]", align 8
  %taddr1543 = alloca i64, align 8
  %taddr1544 = alloca i64, align 8
  %varargslots1545 = alloca [2 x %any], align 16
  %indirectarg1548 = alloca %"any[]", align 8
  %switch1551 = alloca i8, align 1
  %x1614 = alloca double, align 8
  %x1642 = alloca double, align 8
  %n1643 = alloca i32, align 4
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !3230, !DIExpression(), !3231)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %chars, ptr align 8 %s, i32 16, i1 false)
    #dbg_declare(ptr %sign, !3232, !DIExpression(), !3234)
  store i32 1, ptr %sign, align 4, !dbg !3236
  br label %loop.cond, !dbg !3237

loop.cond:                                        ; preds = %checkok12, %entry
  %ptradd1 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3238
  %3 = load i64, ptr %ptradd1, align 8, !dbg !3238
  %i2b = icmp ne i64 %3, 0, !dbg !3238
  br i1 %i2b, label %and.rhs, label %and.phi, !dbg !3238

and.rhs:                                          ; preds = %loop.cond
  %ptradd2 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3240
  %4 = load i64, ptr %ptradd2, align 8, !dbg !3240
  %5 = load ptr, ptr %chars, align 8, !dbg !3240
  %ge = icmp sge i64 0, %4, !dbg !3241
  %6 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !3241
  br i1 %6, label %panic, label %checkok, !dbg !3241

checkok:                                          ; preds = %and.rhs
  %7 = load i8, ptr %5, align 1, !dbg !3241
  %eq = icmp eq i8 %7, 32, !dbg !3240
  br label %and.phi, !dbg !3240

and.phi:                                          ; preds = %checkok, %loop.cond
  %val = phi i1 [ false, %loop.cond ], [ %eq, %checkok ], !dbg !3240
  br i1 %val, label %loop.body, label %loop.exit, !dbg !3240

loop.body:                                        ; preds = %and.phi
  %8 = load %"char[]", ptr %chars, align 8, !dbg !3242
  %9 = extractvalue %"char[]" %8, 0, !dbg !3242
  %10 = extractvalue %"char[]" %8, 1, !dbg !3243
  %gt = icmp sgt i64 1, %10, !dbg !3243
  %11 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3243
  br i1 %11, label %panic5, label %checkok12, !dbg !3243

checkok12:                                        ; preds = %loop.body
  %size = sub i64 %10, 1, !dbg !3242
  %ptradd13 = getelementptr inbounds i8, ptr %9, i64 1, !dbg !3242
  %12 = insertvalue %"char[]" undef, ptr %ptradd13, 0, !dbg !3242
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !3242
  store %"char[]" %13, ptr %chars, align 8, !dbg !3242
  br label %loop.cond, !dbg !3242

loop.exit:                                        ; preds = %and.phi
  %ptradd14 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3244
  %14 = load i64, ptr %ptradd14, align 8, !dbg !3244
  %i2nb = icmp eq i64 %14, 0, !dbg !3244
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !3244

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3245
  br label %err_retblock, !dbg !3245

if.exit:                                          ; preds = %loop.exit
  %ptradd15 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3246
  %15 = load i64, ptr %ptradd15, align 8, !dbg !3246
  %16 = load ptr, ptr %chars, align 8, !dbg !3246
  %ge16 = icmp sge i64 0, %15, !dbg !3248
  %17 = call i1 @llvm.expect.i1(i1 %ge16, i1 false), !dbg !3248
  br i1 %17, label %panic17, label %checkok24, !dbg !3248

checkok24:                                        ; preds = %if.exit
  %18 = load i8, ptr %16, align 1
  store i8 %18, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok24
  %19 = load i8, ptr %switch, align 1
  switch i8 %19, label %switch.exit [
    i8 45, label %switch.case
    i8 43, label %switch.case25
  ]

switch.case:                                      ; preds = %switch.entry
  store i32 -1, ptr %sign, align 4, !dbg !3249
  br label %switch.case25, !dbg !3251

switch.case25:                                    ; preds = %switch.entry, %switch.case
  %20 = load %"char[]", ptr %chars, align 8, !dbg !3252
  %21 = extractvalue %"char[]" %20, 0, !dbg !3252
  %22 = extractvalue %"char[]" %20, 1, !dbg !3254
  %gt26 = icmp sgt i64 1, %22, !dbg !3254
  %23 = call i1 @llvm.expect.i1(i1 %gt26, i1 false), !dbg !3254
  br i1 %23, label %panic27, label %checkok34, !dbg !3254

checkok34:                                        ; preds = %switch.case25
  %size35 = sub i64 %22, 1, !dbg !3252
  %ptradd36 = getelementptr inbounds i8, ptr %21, i64 1, !dbg !3252
  %24 = insertvalue %"char[]" undef, ptr %ptradd36, 0, !dbg !3252
  %25 = insertvalue %"char[]" %24, i64 %size35, 1, !dbg !3252
  store %"char[]" %25, ptr %chars, align 8, !dbg !3252
  br label %switch.exit, !dbg !3252

switch.exit:                                      ; preds = %checkok34, %switch.entry
  %26 = load %"char[]", ptr %chars, align 8, !dbg !3255
  %27 = extractvalue %"char[]" %26, 1, !dbg !3255
  %28 = extractvalue %"char[]" %26, 0, !dbg !3255
  %eq37 = icmp eq i64 %27, 8, !dbg !3255
  br i1 %eq37, label %slice_cmp_values, label %slice_cmp_exit, !dbg !3255

slice_cmp_values:                                 ; preds = %switch.exit
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %29 = load i64, ptr %cmp.idx, align 8
  %lt = icmp slt i64 %29, %27
  br i1 %lt, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd38 = getelementptr inbounds i8, ptr %28, i64 %29
  %ptradd39 = getelementptr inbounds i8, ptr @.str.88, i64 %29
  %30 = load i8, ptr %ptradd38, align 1
  %31 = load i8, ptr %ptradd39, align 1
  %eq40 = icmp eq i8 %30, %31
  %32 = add i64 %29, 1
  store i64 %32, ptr %cmp.idx, align 8
  br i1 %eq40, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %switch.exit
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %switch.exit ], [ false, %slice_loop_comparison ]
  br i1 %slice_cmp_phi, label %or.phi, label %or.rhs

or.rhs:                                           ; preds = %slice_cmp_exit
  %33 = load %"char[]", ptr %chars, align 8, !dbg !3256
  %34 = extractvalue %"char[]" %33, 1, !dbg !3256
  %35 = extractvalue %"char[]" %33, 0, !dbg !3256
  %eq41 = icmp eq i64 %34, 8, !dbg !3256
  br i1 %eq41, label %slice_cmp_values42, label %slice_cmp_exit50, !dbg !3256

slice_cmp_values42:                               ; preds = %or.rhs
  store i64 0, ptr %cmp.idx43, align 8
  br label %slice_loop_start44

slice_loop_start44:                               ; preds = %slice_loop_comparison46, %slice_cmp_values42
  %36 = load i64, ptr %cmp.idx43, align 8
  %lt45 = icmp slt i64 %36, %34
  br i1 %lt45, label %slice_loop_comparison46, label %slice_cmp_exit50

slice_loop_comparison46:                          ; preds = %slice_loop_start44
  %ptradd47 = getelementptr inbounds i8, ptr %35, i64 %36
  %ptradd48 = getelementptr inbounds i8, ptr @.str.89, i64 %36
  %37 = load i8, ptr %ptradd47, align 1
  %38 = load i8, ptr %ptradd48, align 1
  %eq49 = icmp eq i8 %37, %38
  %39 = add i64 %36, 1
  store i64 %39, ptr %cmp.idx43, align 8
  br i1 %eq49, label %slice_loop_start44, label %slice_cmp_exit50

slice_cmp_exit50:                                 ; preds = %slice_loop_comparison46, %slice_loop_start44, %or.rhs
  %slice_cmp_phi51 = phi i1 [ true, %slice_loop_start44 ], [ false, %or.rhs ], [ false, %slice_loop_comparison46 ]
  br label %or.phi

or.phi:                                           ; preds = %slice_cmp_exit50, %slice_cmp_exit
  %val52 = phi i1 [ true, %slice_cmp_exit ], [ %slice_cmp_phi51, %slice_cmp_exit50 ]
  br i1 %val52, label %if.then53, label %if.exit54

if.then53:                                        ; preds = %or.phi
  %40 = load i32, ptr %sign, align 4, !dbg !3257
  %sifp = sitofp i32 %40 to float, !dbg !3257
  %fmul = fmul float %sifp, 0x7FF0000000000000, !dbg !3257
  store float %fmul, ptr %blockret, align 4, !dbg !3257
  br label %expr_block.exit1647, !dbg !3257

if.exit54:                                        ; preds = %or.phi
  %41 = load %"char[]", ptr %chars, align 8, !dbg !3258
  %42 = extractvalue %"char[]" %41, 1, !dbg !3258
  %43 = extractvalue %"char[]" %41, 0, !dbg !3258
  %eq55 = icmp eq i64 %42, 3, !dbg !3258
  br i1 %eq55, label %slice_cmp_values56, label %slice_cmp_exit64, !dbg !3258

slice_cmp_values56:                               ; preds = %if.exit54
  store i64 0, ptr %cmp.idx57, align 8
  br label %slice_loop_start58

slice_loop_start58:                               ; preds = %slice_loop_comparison60, %slice_cmp_values56
  %44 = load i64, ptr %cmp.idx57, align 8
  %lt59 = icmp slt i64 %44, %42
  br i1 %lt59, label %slice_loop_comparison60, label %slice_cmp_exit64

slice_loop_comparison60:                          ; preds = %slice_loop_start58
  %ptradd61 = getelementptr inbounds i8, ptr %43, i64 %44
  %ptradd62 = getelementptr inbounds i8, ptr @.str.90, i64 %44
  %45 = load i8, ptr %ptradd61, align 1
  %46 = load i8, ptr %ptradd62, align 1
  %eq63 = icmp eq i8 %45, %46
  %47 = add i64 %44, 1
  store i64 %47, ptr %cmp.idx57, align 8
  br i1 %eq63, label %slice_loop_start58, label %slice_cmp_exit64

slice_cmp_exit64:                                 ; preds = %slice_loop_comparison60, %slice_loop_start58, %if.exit54
  %slice_cmp_phi65 = phi i1 [ true, %slice_loop_start58 ], [ false, %if.exit54 ], [ false, %slice_loop_comparison60 ]
  br i1 %slice_cmp_phi65, label %or.phi78, label %or.rhs66

or.rhs66:                                         ; preds = %slice_cmp_exit64
  %48 = load %"char[]", ptr %chars, align 8, !dbg !3259
  %49 = extractvalue %"char[]" %48, 1, !dbg !3259
  %50 = extractvalue %"char[]" %48, 0, !dbg !3259
  %eq67 = icmp eq i64 %49, 3, !dbg !3259
  br i1 %eq67, label %slice_cmp_values68, label %slice_cmp_exit76, !dbg !3259

slice_cmp_values68:                               ; preds = %or.rhs66
  store i64 0, ptr %cmp.idx69, align 8
  br label %slice_loop_start70

slice_loop_start70:                               ; preds = %slice_loop_comparison72, %slice_cmp_values68
  %51 = load i64, ptr %cmp.idx69, align 8
  %lt71 = icmp slt i64 %51, %49
  br i1 %lt71, label %slice_loop_comparison72, label %slice_cmp_exit76

slice_loop_comparison72:                          ; preds = %slice_loop_start70
  %ptradd73 = getelementptr inbounds i8, ptr %50, i64 %51
  %ptradd74 = getelementptr inbounds i8, ptr @.str.91, i64 %51
  %52 = load i8, ptr %ptradd73, align 1
  %53 = load i8, ptr %ptradd74, align 1
  %eq75 = icmp eq i8 %52, %53
  %54 = add i64 %51, 1
  store i64 %54, ptr %cmp.idx69, align 8
  br i1 %eq75, label %slice_loop_start70, label %slice_cmp_exit76

slice_cmp_exit76:                                 ; preds = %slice_loop_comparison72, %slice_loop_start70, %or.rhs66
  %slice_cmp_phi77 = phi i1 [ true, %slice_loop_start70 ], [ false, %or.rhs66 ], [ false, %slice_loop_comparison72 ]
  br label %or.phi78

or.phi78:                                         ; preds = %slice_cmp_exit76, %slice_cmp_exit64
  %val79 = phi i1 [ true, %slice_cmp_exit64 ], [ %slice_cmp_phi77, %slice_cmp_exit76 ]
  br i1 %val79, label %if.then80, label %if.exit81

if.then80:                                        ; preds = %or.phi78
  store float 0x7FF8000000000000, ptr %blockret, align 4, !dbg !3260
  br label %expr_block.exit1647, !dbg !3260

if.exit81:                                        ; preds = %or.phi78
  %ptradd82 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3261
  %55 = load i64, ptr %ptradd82, align 8, !dbg !3261
  %lt83 = icmp ult i64 2, %55, !dbg !3261
  br i1 %lt83, label %and.rhs84, label %and.phi96, !dbg !3261

and.rhs84:                                        ; preds = %if.exit81
  %ptradd85 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3262
  %56 = load i64, ptr %ptradd85, align 8, !dbg !3262
  %57 = load ptr, ptr %chars, align 8, !dbg !3262
  %ge86 = icmp sge i64 0, %56, !dbg !3263
  %58 = call i1 @llvm.expect.i1(i1 %ge86, i1 false), !dbg !3263
  br i1 %58, label %panic87, label %checkok94, !dbg !3263

checkok94:                                        ; preds = %and.rhs84
  %59 = load i8, ptr %57, align 1, !dbg !3263
  %eq95 = icmp eq i8 %59, 48, !dbg !3262
  br label %and.phi96, !dbg !3262

and.phi96:                                        ; preds = %checkok94, %if.exit81
  %val97 = phi i1 [ false, %if.exit81 ], [ %eq95, %checkok94 ], !dbg !3262
  br i1 %val97, label %and.rhs98, label %and.phi111, !dbg !3262

and.rhs98:                                        ; preds = %and.phi96
  %ptradd99 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3264
  %60 = load i64, ptr %ptradd99, align 8, !dbg !3264
  %61 = load ptr, ptr %chars, align 8, !dbg !3264
  %ge100 = icmp sge i64 1, %60, !dbg !3265
  %62 = call i1 @llvm.expect.i1(i1 %ge100, i1 false), !dbg !3265
  br i1 %62, label %panic101, label %checkok108, !dbg !3265

checkok108:                                       ; preds = %and.rhs98
  %ptradd109 = getelementptr inbounds i8, ptr %61, i64 1, !dbg !3265
  %63 = load i8, ptr %ptradd109, align 1, !dbg !3265
  %zext = zext i8 %63 to i32, !dbg !3265
  %or = or i32 %zext, 32, !dbg !3264
  %eq110 = icmp eq i32 %or, 120, !dbg !3264
  %check = icmp sge i32 %or, 0, !dbg !3264
  %siui-eq = and i1 %check, %eq110, !dbg !3264
  br label %and.phi111, !dbg !3264

and.phi111:                                       ; preds = %checkok108, %and.phi96
  %val112 = phi i1 [ false, %and.phi96 ], [ %siui-eq, %checkok108 ], !dbg !3264
  br i1 %val112, label %if.then113, label %if.exit380, !dbg !3264

if.then113:                                       ; preds = %and.phi111
  %64 = load %"char[]", ptr %chars, align 8, !dbg !3266
  %65 = extractvalue %"char[]" %64, 0, !dbg !3266
  %66 = extractvalue %"char[]" %64, 1, !dbg !3268
  %gt114 = icmp sgt i64 2, %66, !dbg !3268
  %67 = call i1 @llvm.expect.i1(i1 %gt114, i1 false), !dbg !3268
  br i1 %67, label %panic115, label %checkok122, !dbg !3268

checkok122:                                       ; preds = %if.then113
  %size123 = sub i64 %66, 2, !dbg !3269
  %ptradd124 = getelementptr inbounds i8, ptr %65, i64 2, !dbg !3269
  %68 = insertvalue %"char[]" undef, ptr %ptradd124, 0, !dbg !3269
  %69 = insertvalue %"char[]" %68, i64 %size123, 1, !dbg !3269
  store %"char[]" %69, ptr %chars125, align 8
  %70 = load i32, ptr %sign, align 4
  store i32 %70, ptr %sign126, align 4
    #dbg_declare(ptr %scale, !3270, !DIExpression(), !3272)
  store double 1.000000e+00, ptr %scale, align 8, !dbg !3274
    #dbg_declare(ptr %x, !3275, !DIExpression(), !3276)
  store i32 0, ptr %x, align 4, !dbg !3276
    #dbg_declare(ptr %rp, !3277, !DIExpression(), !3278)
  store i64 0, ptr %rp, align 8, !dbg !3278
    #dbg_declare(ptr %dc, !3279, !DIExpression(), !3280)
  store i64 0, ptr %dc, align 8, !dbg !3280
    #dbg_declare(ptr %c, !3281, !DIExpression(), !3282)
    #dbg_declare(ptr %got_rad, !3283, !DIExpression(), !3284)
  store i8 0, ptr %got_rad, align 1, !dbg !3284
    #dbg_declare(ptr %got_digit, !3285, !DIExpression(), !3286)
  store i8 0, ptr %got_digit, align 1, !dbg !3286
    #dbg_declare(ptr %got_tail, !3287, !DIExpression(), !3288)
  store i8 0, ptr %got_tail, align 1, !dbg !3288
    #dbg_declare(ptr %len, !3289, !DIExpression(), !3290)
  %ptradd128 = getelementptr inbounds i8, ptr %chars125, i64 8, !dbg !3291
  %71 = load i64, ptr %ptradd128, align 8, !dbg !3291
  store i64 %71, ptr %len, align 8, !dbg !3291
    #dbg_declare(ptr %last_char, !3292, !DIExpression(), !3293)
  %72 = load i64, ptr %len, align 8, !dbg !3294
  %sub = sub i64 %72, 1, !dbg !3294
  store i64 %sub, ptr %last_char, align 8, !dbg !3294
    #dbg_declare(ptr %index, !3295, !DIExpression(), !3296)
  store i64 0, ptr %index, align 8, !dbg !3296
    #dbg_declare(ptr %y, !3297, !DIExpression(), !3298)
  store double 0.000000e+00, ptr %y, align 8, !dbg !3298
  br label %loop.cond129, !dbg !3299

loop.cond129:                                     ; preds = %if.exit145, %checkok122
  %ptradd130 = getelementptr inbounds i8, ptr %chars125, i64 8, !dbg !3300
  %73 = load i64, ptr %ptradd130, align 8, !dbg !3300
  %74 = load ptr, ptr %chars125, align 8, !dbg !3300
  %75 = load i64, ptr %index, align 8, !dbg !3302
  %ge131 = icmp uge i64 %75, %73, !dbg !3302
  %76 = call i1 @llvm.expect.i1(i1 %ge131, i1 false), !dbg !3302
  br i1 %76, label %panic132, label %checkok139, !dbg !3302

checkok139:                                       ; preds = %loop.cond129
  %ptradd140 = getelementptr inbounds i8, ptr %74, i64 %75, !dbg !3302
  %77 = load i8, ptr %ptradd140, align 1, !dbg !3302
  store i8 %77, ptr %c, align 1, !dbg !3302
  %eq141 = icmp eq i8 %77, 48, !dbg !3303
  br i1 %eq141, label %loop.body142, label %loop.exit146, !dbg !3303

loop.body142:                                     ; preds = %checkok139
  %78 = load i64, ptr %index, align 8, !dbg !3304
  %79 = load i64, ptr %last_char, align 8, !dbg !3306
  %eq143 = icmp eq i64 %78, %79, !dbg !3304
  br i1 %eq143, label %if.then144, label %if.exit145, !dbg !3304

if.then144:                                       ; preds = %loop.body142
  store double 0.000000e+00, ptr %blockret127, align 8, !dbg !3307
  br label %expr_block.exit379, !dbg !3307

if.exit145:                                       ; preds = %loop.body142
  %80 = load i64, ptr %index, align 8, !dbg !3308
  %add = add i64 %80, 1, !dbg !3308
  store i64 %add, ptr %index, align 8, !dbg !3308
  br label %loop.cond129, !dbg !3308

loop.exit146:                                     ; preds = %checkok139
  %81 = load i8, ptr %c, align 1, !dbg !3309
  %eq147 = icmp eq i8 %81, 46, !dbg !3309
  br i1 %eq147, label %if.then148, label %if.exit196, !dbg !3309

if.then148:                                       ; preds = %loop.exit146
  store i8 1, ptr %got_rad, align 1, !dbg !3310
  %82 = load i64, ptr %index, align 8, !dbg !3312
  %83 = load i64, ptr %last_char, align 8, !dbg !3313
  %eq149 = icmp eq i64 %82, %83, !dbg !3312
  br i1 %eq149, label %if.then150, label %if.exit155, !dbg !3312

if.then150:                                       ; preds = %if.then148
  %84 = load i8, ptr %got_digit, align 1, !dbg !3314
  %85 = trunc i8 %84 to i1, !dbg !3314
  %not = xor i1 %85, true, !dbg !3314
  br i1 %not, label %if.then151, label %if.exit152, !dbg !3314

if.then151:                                       ; preds = %if.then150
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3316
  br label %err_retblock, !dbg !3316

if.exit152:                                       ; preds = %if.then150
  %86 = load i32, ptr %sign126, align 4, !dbg !3317
  %sifp153 = sitofp i32 %86 to double, !dbg !3317
  %fmul154 = fmul double %sifp153, 0.000000e+00, !dbg !3317
  store double %fmul154, ptr %blockret127, align 8, !dbg !3317
  br label %expr_block.exit379, !dbg !3317

if.exit155:                                       ; preds = %if.then148
  %87 = load i64, ptr %index, align 8, !dbg !3318
  %88 = load i64, ptr %last_char, align 8, !dbg !3319
  %neq = icmp ne i64 %87, %88, !dbg !3318
  br i1 %neq, label %and.rhs156, label %and.phi170, !dbg !3318

and.rhs156:                                       ; preds = %if.exit155
  %ptradd157 = getelementptr inbounds i8, ptr %chars125, i64 8, !dbg !3320
  %89 = load i64, ptr %ptradd157, align 8, !dbg !3320
  %90 = load ptr, ptr %chars125, align 8, !dbg !3320
  %91 = load i64, ptr %index, align 8, !dbg !3321
  %add158 = add i64 %91, 1, !dbg !3321
  store i64 %add158, ptr %index, align 8, !dbg !3321
  %ge159 = icmp uge i64 %add158, %89, !dbg !3321
  %92 = call i1 @llvm.expect.i1(i1 %ge159, i1 false), !dbg !3321
  br i1 %92, label %panic160, label %checkok167, !dbg !3321

checkok167:                                       ; preds = %and.rhs156
  %ptradd168 = getelementptr inbounds i8, ptr %90, i64 %add158, !dbg !3322
  %93 = load i8, ptr %ptradd168, align 1, !dbg !3322
  store i8 %93, ptr %c, align 1, !dbg !3322
  %eq169 = icmp eq i8 %93, 48, !dbg !3323
  br label %and.phi170, !dbg !3323

and.phi170:                                       ; preds = %checkok167, %if.exit155
  %val171 = phi i1 [ false, %if.exit155 ], [ %eq169, %checkok167 ], !dbg !3323
  br i1 %val171, label %if.then172, label %if.exit195, !dbg !3323

if.then172:                                       ; preds = %and.phi170
  %94 = load i64, ptr %rp, align 8, !dbg !3324
  %sub173 = sub i64 %94, 1, !dbg !3324
  store i64 %sub173, ptr %rp, align 8, !dbg !3324
  store i8 1, ptr %got_digit, align 1, !dbg !3326
  br label %loop.cond174, !dbg !3327

loop.cond174:                                     ; preds = %loop.body192, %if.then172
  %95 = load i64, ptr %last_char, align 8, !dbg !3328
  %96 = load i64, ptr %index, align 8, !dbg !3330
  %neq175 = icmp ne i64 %95, %96, !dbg !3328
  br i1 %neq175, label %and.rhs176, label %and.phi190, !dbg !3328

and.rhs176:                                       ; preds = %loop.cond174
  %ptradd177 = getelementptr inbounds i8, ptr %chars125, i64 8, !dbg !3331
  %97 = load i64, ptr %ptradd177, align 8, !dbg !3331
  %98 = load ptr, ptr %chars125, align 8, !dbg !3331
  %99 = load i64, ptr %index, align 8, !dbg !3332
  %add178 = add i64 %99, 1, !dbg !3332
  store i64 %add178, ptr %index, align 8, !dbg !3332
  %ge179 = icmp uge i64 %add178, %97, !dbg !3332
  %100 = call i1 @llvm.expect.i1(i1 %ge179, i1 false), !dbg !3332
  br i1 %100, label %panic180, label %checkok187, !dbg !3332

checkok187:                                       ; preds = %and.rhs176
  %ptradd188 = getelementptr inbounds i8, ptr %98, i64 %add178, !dbg !3333
  %101 = load i8, ptr %ptradd188, align 1, !dbg !3333
  store i8 %101, ptr %c, align 1, !dbg !3333
  %eq189 = icmp eq i8 %101, 48, !dbg !3334
  br label %and.phi190, !dbg !3334

and.phi190:                                       ; preds = %checkok187, %loop.cond174
  %val191 = phi i1 [ false, %loop.cond174 ], [ %eq189, %checkok187 ], !dbg !3334
  br i1 %val191, label %loop.body192, label %loop.exit194, !dbg !3334

loop.body192:                                     ; preds = %and.phi190
  %102 = load i64, ptr %rp, align 8, !dbg !3335
  %sub193 = sub i64 %102, 1, !dbg !3335
  store i64 %sub193, ptr %rp, align 8, !dbg !3335
  br label %loop.cond174, !dbg !3335

loop.exit194:                                     ; preds = %and.phi190
  br label %if.exit195, !dbg !3335

if.exit195:                                       ; preds = %loop.exit194, %and.phi170
  br label %if.exit196, !dbg !3335

if.exit196:                                       ; preds = %if.exit195, %loop.exit146
  br label %loop.cond197, !dbg !3337

loop.cond197:                                     ; preds = %checkok265, %if.exit196
  %103 = load i8, ptr %c, align 1, !dbg !3338
  %zext198 = zext i8 %103 to i32, !dbg !3338
  %sub199 = sub i32 %zext198, 48, !dbg !3338
  %lt200 = icmp ult i32 %sub199, 10, !dbg !3338
  br i1 %lt200, label %or.phi206, label %or.rhs201, !dbg !3338

or.rhs201:                                        ; preds = %loop.cond197
  %104 = load i8, ptr %c, align 1, !dbg !3340
  %zext202 = zext i8 %104 to i32, !dbg !3340
  %or203 = or i32 %zext202, 32, !dbg !3340
  %sub204 = sub i32 %or203, 97, !dbg !3340
  %lt205 = icmp slt i32 %sub204, 6, !dbg !3340
  %siui-lt = or i1 false, %lt205, !dbg !3340
  br label %or.phi206, !dbg !3340

or.phi206:                                        ; preds = %or.rhs201, %loop.cond197
  %val207 = phi i1 [ true, %loop.cond197 ], [ %siui-lt, %or.rhs201 ], !dbg !3340
  br i1 %val207, label %or.phi210, label %or.rhs208, !dbg !3340

or.rhs208:                                        ; preds = %or.phi206
  %105 = load i8, ptr %c, align 1, !dbg !3341
  %eq209 = icmp eq i8 %105, 46, !dbg !3341
  br label %or.phi210, !dbg !3341

or.phi210:                                        ; preds = %or.rhs208, %or.phi206
  %val211 = phi i1 [ true, %or.phi206 ], [ %eq209, %or.rhs208 ], !dbg !3341
  br i1 %val211, label %loop.body212, label %loop.exit267, !dbg !3341

loop.body212:                                     ; preds = %or.phi210
  %106 = load i8, ptr %c, align 1, !dbg !3342
  %eq213 = icmp eq i8 %106, 46, !dbg !3342
  br i1 %eq213, label %if.then214, label %if.else, !dbg !3342

if.then214:                                       ; preds = %loop.body212
  %107 = load i8, ptr %got_rad, align 1, !dbg !3344
  %108 = trunc i8 %107 to i1, !dbg !3344
  br i1 %108, label %if.then215, label %if.exit216, !dbg !3344

if.then215:                                       ; preds = %if.then214
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3346
  br label %err_retblock, !dbg !3346

if.exit216:                                       ; preds = %if.then214
  store i8 1, ptr %got_rad, align 1, !dbg !3347
  %109 = load i64, ptr %dc, align 8, !dbg !3348
  store i64 %109, ptr %rp, align 8, !dbg !3348
  br label %if.exit251, !dbg !3348

if.else:                                          ; preds = %loop.body212
  store i8 1, ptr %got_digit, align 1, !dbg !3349
    #dbg_declare(ptr %d, !3351, !DIExpression(), !3352)
  %110 = load i8, ptr %c, align 1, !dbg !3353
  %gt218 = icmp ugt i8 %110, 57, !dbg !3353
  br i1 %gt218, label %if.then219, label %if.exit224, !dbg !3353

if.then219:                                       ; preds = %if.else
  %111 = load i8, ptr %c, align 1, !dbg !3355
  %zext220 = zext i8 %111 to i32, !dbg !3355
  %or221 = or i32 %zext220, 32, !dbg !3355
  %add222 = add i32 %or221, 10, !dbg !3355
  %sub223 = sub i32 %add222, 97, !dbg !3355
  store i32 %sub223, ptr %blockret217, align 4, !dbg !3355
  br label %expr_block.exit, !dbg !3355

if.exit224:                                       ; preds = %if.else
  %112 = load i8, ptr %c, align 1, !dbg !3356
  %zext225 = zext i8 %112 to i32, !dbg !3356
  %sub226 = sub i32 %zext225, 48, !dbg !3356
  store i32 %sub226, ptr %blockret217, align 4, !dbg !3356
  br label %expr_block.exit, !dbg !3356

expr_block.exit:                                  ; preds = %if.exit224, %if.then219
  %113 = load i32, ptr %blockret217, align 4, !dbg !3356
  store i32 %113, ptr %d, align 4, !dbg !3356
  store i8 1, ptr %switch227, align 1
  br label %switch.entry228

switch.entry228:                                  ; preds = %expr_block.exit
  %114 = load i8, ptr %switch227, align 1
  %115 = trunc i8 %114 to i1
  %116 = load i64, ptr %dc, align 8, !dbg !3357
  %lt229 = icmp slt i64 %116, 8, !dbg !3357
  %eq230 = icmp eq i1 %lt229, %115, !dbg !3357
  br i1 %eq230, label %switch.case231, label %next_if, !dbg !3357

switch.case231:                                   ; preds = %switch.entry228
  %117 = load i32, ptr %x, align 4, !dbg !3359
  %mul = mul i32 %117, 16, !dbg !3359
  %118 = load i32, ptr %d, align 4, !dbg !3361
  %add232 = add i32 %mul, %118, !dbg !3359
  store i32 %add232, ptr %x, align 4, !dbg !3359
  br label %switch.exit249, !dbg !3359

next_if:                                          ; preds = %switch.entry228
  %119 = load i64, ptr %dc, align 8, !dbg !3362
  %lt233 = icmp slt i64 %119, 14, !dbg !3362
  %eq234 = icmp eq i1 %lt233, %115, !dbg !3362
  br i1 %eq234, label %switch.case235, label %next_if238, !dbg !3362

switch.case235:                                   ; preds = %next_if
  %120 = load double, ptr %y, align 8, !dbg !3363
  %121 = load i32, ptr %d, align 4, !dbg !3365
  %sifp236 = sitofp i32 %121 to double, !dbg !3365
  %122 = load double, ptr %scale, align 8, !dbg !3366
  %fdiv = fdiv double %122, 1.600000e+01, !dbg !3366
  store double %fdiv, ptr %scale, align 8, !dbg !3366
  %fmul237 = fmul double %sifp236, %fdiv, !dbg !3365
  %fadd = fadd double %120, %fmul237, !dbg !3363
  store double %fadd, ptr %y, align 8, !dbg !3363
  store i8 1, ptr %got_tail, align 1, !dbg !3367
  br label %switch.exit249, !dbg !3367

next_if238:                                       ; preds = %next_if
  %123 = load i32, ptr %d, align 4, !dbg !3368
  %i2b239 = icmp ne i32 %123, 0, !dbg !3368
  br i1 %i2b239, label %and.rhs240, label %and.phi242, !dbg !3368

and.rhs240:                                       ; preds = %next_if238
  %124 = load i8, ptr %got_tail, align 1, !dbg !3369
  %125 = trunc i8 %124 to i1, !dbg !3369
  %not241 = xor i1 %125, true, !dbg !3369
  br label %and.phi242, !dbg !3369

and.phi242:                                       ; preds = %and.rhs240, %next_if238
  %val243 = phi i1 [ false, %next_if238 ], [ %not241, %and.rhs240 ], !dbg !3369
  %eq244 = icmp eq i1 %val243, %115, !dbg !3369
  br i1 %eq244, label %switch.case245, label %next_if248, !dbg !3369

switch.case245:                                   ; preds = %and.phi242
  %126 = load double, ptr %y, align 8, !dbg !3370
  %127 = load double, ptr %scale, align 8, !dbg !3372
  %fmul246 = fmul double 5.000000e-01, %127, !dbg !3373
  %fadd247 = fadd double %126, %fmul246, !dbg !3370
  store double %fadd247, ptr %y, align 8, !dbg !3370
  store i8 1, ptr %got_tail, align 1, !dbg !3374
  br label %switch.exit249, !dbg !3374

next_if248:                                       ; preds = %and.phi242
  br label %switch.exit249, !dbg !3374

switch.exit249:                                   ; preds = %next_if248, %switch.case245, %switch.case235, %switch.case231
  %128 = load i64, ptr %dc, align 8, !dbg !3375
  %add250 = add i64 %128, 1, !dbg !3375
  store i64 %add250, ptr %dc, align 8, !dbg !3375
  br label %if.exit251, !dbg !3375

if.exit251:                                       ; preds = %switch.exit249, %if.exit216
  %129 = load i64, ptr %index, align 8, !dbg !3376
  %130 = load i64, ptr %last_char, align 8, !dbg !3377
  %eq252 = icmp eq i64 %129, %130, !dbg !3376
  br i1 %eq252, label %if.then253, label %if.exit254, !dbg !3376

if.then253:                                       ; preds = %if.exit251
  br label %loop.exit267, !dbg !3378

if.exit254:                                       ; preds = %if.exit251
  %ptradd255 = getelementptr inbounds i8, ptr %chars125, i64 8, !dbg !3379
  %131 = load i64, ptr %ptradd255, align 8, !dbg !3379
  %132 = load ptr, ptr %chars125, align 8, !dbg !3379
  %133 = load i64, ptr %index, align 8, !dbg !3380
  %add256 = add i64 %133, 1, !dbg !3380
  store i64 %add256, ptr %index, align 8, !dbg !3380
  %ge257 = icmp uge i64 %add256, %131, !dbg !3380
  %134 = call i1 @llvm.expect.i1(i1 %ge257, i1 false), !dbg !3380
  br i1 %134, label %panic258, label %checkok265, !dbg !3380

checkok265:                                       ; preds = %if.exit254
  %ptradd266 = getelementptr inbounds i8, ptr %132, i64 %add256, !dbg !3381
  %135 = load i8, ptr %ptradd266, align 1, !dbg !3381
  store i8 %135, ptr %c, align 1, !dbg !3381
  br label %loop.cond197, !dbg !3381

loop.exit267:                                     ; preds = %if.then253, %or.phi210
  %136 = load i8, ptr %got_digit, align 1, !dbg !3382
  %137 = trunc i8 %136 to i1, !dbg !3382
  %not268 = xor i1 %137, true, !dbg !3382
  br i1 %not268, label %if.then269, label %if.exit270, !dbg !3382

if.then269:                                       ; preds = %loop.exit267
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3383
  br label %err_retblock, !dbg !3383

if.exit270:                                       ; preds = %loop.exit267
  %138 = load i8, ptr %got_rad, align 1, !dbg !3384
  %139 = trunc i8 %138 to i1, !dbg !3384
  %not271 = xor i1 %139, true, !dbg !3384
  br i1 %not271, label %if.then272, label %if.exit273, !dbg !3384

if.then272:                                       ; preds = %if.exit270
  %140 = load i64, ptr %dc, align 8, !dbg !3385
  store i64 %140, ptr %rp, align 8, !dbg !3385
  br label %if.exit273, !dbg !3385

if.exit273:                                       ; preds = %if.then272, %if.exit270
  br label %loop.cond274, !dbg !3386

loop.cond274:                                     ; preds = %loop.body276, %if.exit273
  %141 = load i64, ptr %dc, align 8, !dbg !3387
  %lt275 = icmp slt i64 %141, 8, !dbg !3387
  br i1 %lt275, label %loop.body276, label %loop.exit279, !dbg !3387

loop.body276:                                     ; preds = %loop.cond274
  %142 = load i32, ptr %x, align 4, !dbg !3389
  %mul277 = mul i32 %142, 16, !dbg !3389
  store i32 %mul277, ptr %x, align 4, !dbg !3389
  %143 = load i64, ptr %dc, align 8, !dbg !3390
  %add278 = add i64 %143, 1, !dbg !3390
  store i64 %add278, ptr %dc, align 8, !dbg !3390
  br label %loop.cond274, !dbg !3390

loop.exit279:                                     ; preds = %loop.cond274
    #dbg_declare(ptr %e2, !3391, !DIExpression(), !3392)
  store i64 0, ptr %e2, align 8, !dbg !3392
  %144 = load i8, ptr %c, align 1, !dbg !3393
  %zext280 = zext i8 %144 to i32, !dbg !3393
  %or281 = or i32 %zext280, 32, !dbg !3393
  %eq282 = icmp eq i32 %or281, 112, !dbg !3393
  %check283 = icmp sge i32 %or281, 0, !dbg !3393
  %siui-eq284 = and i1 %check283, %eq282, !dbg !3393
  br i1 %siui-eq284, label %if.then285, label %if.exit304, !dbg !3393

if.then285:                                       ; preds = %loop.exit279
    #dbg_declare(ptr %e2val, !3394, !DIExpression(), !3396)
  %145 = load %"char[]", ptr %chars125, align 8, !dbg !3397
  %146 = extractvalue %"char[]" %145, 0, !dbg !3397
  %147 = load i64, ptr %index, align 8, !dbg !3398
  %add286 = add i64 %147, 1, !dbg !3398
  %148 = extractvalue %"char[]" %145, 1, !dbg !3398
  %gt287 = icmp sgt i64 %add286, %148, !dbg !3398
  %149 = call i1 @llvm.expect.i1(i1 %gt287, i1 false), !dbg !3398
  br i1 %149, label %panic288, label %checkok295, !dbg !3398

checkok295:                                       ; preds = %if.then285
  %underflow = icmp slt i64 %add286, 0, !dbg !3399
  %150 = call i1 @llvm.expect.i1(i1 %underflow, i1 false), !dbg !3399
  br i1 %150, label %panic296, label %checkok301, !dbg !3399

checkok301:                                       ; preds = %checkok295
  %size302 = sub i64 %148, %add286, !dbg !3398
  %ptradd303 = getelementptr inbounds i8, ptr %146, i64 %add286, !dbg !3398
  %151 = insertvalue %"char[]" undef, ptr %ptradd303, 0, !dbg !3398
  %152 = insertvalue %"char[]" %151, i64 %size302, 1, !dbg !3398
  %153 = call i64 @std.core.String.to_long(ptr %retparam, ptr %ptradd303, i64 %size302, i32 10), !dbg !3400
  %not_err = icmp eq i64 %153, 0, !dbg !3400
  %154 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3400
  br i1 %154, label %after_check, label %else_block, !dbg !3400

after_check:                                      ; preds = %checkok301
  %155 = load i64, ptr %retparam, align 8, !dbg !3400
  br label %phi_block, !dbg !3400

else_block:                                       ; preds = %checkok301
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %error_var, align 8, !dbg !3401
  br label %guard_block, !dbg !3401

guard_block:                                      ; preds = %else_block
  %156 = load i64, ptr %error_var, align 8, !dbg !3401
  store i64 %156, ptr %reterr, align 8, !dbg !3401
  br label %err_retblock, !dbg !3401

phi_block:                                        ; preds = %after_check
  store i64 %155, ptr %e2val, align 8, !dbg !3401
  %157 = load i64, ptr %e2val, align 8, !dbg !3402
  store i64 %157, ptr %e2, align 8, !dbg !3402
  br label %if.exit304, !dbg !3402

if.exit304:                                       ; preds = %phi_block, %loop.exit279
  %158 = load i64, ptr %e2, align 8, !dbg !3403
  %159 = load i64, ptr %rp, align 8, !dbg !3404
  %mul305 = mul i64 4, %159, !dbg !3405
  %sub306 = sub i64 %mul305, 32, !dbg !3405
  %add307 = add i64 %158, %sub306, !dbg !3403
  store i64 %add307, ptr %e2, align 8, !dbg !3403
  %160 = load i32, ptr %x, align 4, !dbg !3406
  %i2nb308 = icmp eq i32 %160, 0, !dbg !3406
  br i1 %i2nb308, label %if.then309, label %if.exit312, !dbg !3406

if.then309:                                       ; preds = %if.exit304
  %161 = load i32, ptr %sign126, align 4, !dbg !3407
  %sifp310 = sitofp i32 %161 to double, !dbg !3407
  %fmul311 = fmul double %sifp310, 0.000000e+00, !dbg !3407
  store double %fmul311, ptr %blockret127, align 8, !dbg !3407
  br label %expr_block.exit379, !dbg !3407

if.exit312:                                       ; preds = %if.exit304
  %162 = load i64, ptr %e2, align 8, !dbg !3408
  %gt313 = icmp sgt i64 %162, 149, !dbg !3408
  br i1 %gt313, label %if.then314, label %if.exit315, !dbg !3408

if.then314:                                       ; preds = %if.exit312
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !3409
  br label %err_retblock, !dbg !3409

if.exit315:                                       ; preds = %if.exit312
  %163 = load i64, ptr %e2, align 8, !dbg !3410
  %lt316 = icmp slt i64 %163, -255, !dbg !3410
  br i1 %lt316, label %if.then317, label %if.exit318, !dbg !3410

if.then317:                                       ; preds = %if.exit315
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !3411
  br label %err_retblock, !dbg !3411

if.exit318:                                       ; preds = %if.exit315
  br label %loop.cond319, !dbg !3412

loop.cond319:                                     ; preds = %if.exit330, %if.exit318
  %164 = load i32, ptr %x, align 4, !dbg !3413
  %lt320 = icmp ult i32 %164, -2147483648, !dbg !3413
  br i1 %lt320, label %loop.body321, label %loop.exit332, !dbg !3413

loop.body321:                                     ; preds = %loop.cond319
  %165 = load double, ptr %y, align 8, !dbg !3415
  %ge322 = fcmp oge double %165, 5.000000e-01, !dbg !3415
  br i1 %ge322, label %if.then323, label %if.else327, !dbg !3415

if.then323:                                       ; preds = %loop.body321
  %166 = load i32, ptr %x, align 4, !dbg !3417
  %167 = load i32, ptr %x, align 4, !dbg !3419
  %add324 = add i32 %167, 1, !dbg !3419
  %add325 = add i32 %166, %add324, !dbg !3417
  store i32 %add325, ptr %x, align 4, !dbg !3417
  %168 = load double, ptr %y, align 8, !dbg !3420
  %169 = load double, ptr %y, align 8, !dbg !3421
  %fsub = fsub double %169, 1.000000e+00, !dbg !3421
  %fadd326 = fadd double %168, %fsub, !dbg !3420
  store double %fadd326, ptr %y, align 8, !dbg !3420
  br label %if.exit330, !dbg !3420

if.else327:                                       ; preds = %loop.body321
  %170 = load i32, ptr %x, align 4, !dbg !3422
  %171 = load i32, ptr %x, align 4, !dbg !3424
  %add328 = add i32 %170, %171, !dbg !3422
  store i32 %add328, ptr %x, align 4, !dbg !3422
  %172 = load double, ptr %y, align 8, !dbg !3425
  %173 = load double, ptr %y, align 8, !dbg !3426
  %fadd329 = fadd double %172, %173, !dbg !3425
  store double %fadd329, ptr %y, align 8, !dbg !3425
  br label %if.exit330, !dbg !3425

if.exit330:                                       ; preds = %if.else327, %if.then323
  %174 = load i64, ptr %e2, align 8, !dbg !3427
  %sub331 = sub i64 %174, 1, !dbg !3427
  store i64 %sub331, ptr %e2, align 8, !dbg !3427
  br label %loop.cond319, !dbg !3427

loop.exit332:                                     ; preds = %loop.cond319
    #dbg_declare(ptr %bits, !3428, !DIExpression(), !3429)
  store i32 24, ptr %bits, align 4, !dbg !3430
  %175 = load i64, ptr %e2, align 8, !dbg !3431
  %add333 = add i64 32, %175, !dbg !3432
  %sub334 = sub i64 %add333, -149, !dbg !3432
  %gt335 = icmp sgt i64 24, %sub334, !dbg !3433
  br i1 %gt335, label %if.then336, label %if.exit342, !dbg !3433

if.then336:                                       ; preds = %loop.exit332
  %176 = load i64, ptr %e2, align 8, !dbg !3434
  %add337 = add i64 32, %176, !dbg !3436
  %sub338 = sub i64 %add337, -149, !dbg !3437
  %trunc = trunc i64 %sub338 to i32, !dbg !3437
  store i32 %trunc, ptr %bits, align 4, !dbg !3437
  %177 = load i32, ptr %bits, align 4, !dbg !3438
  %lt339 = icmp slt i32 %177, 0, !dbg !3438
  br i1 %lt339, label %if.then340, label %if.exit341, !dbg !3438

if.then340:                                       ; preds = %if.then336
  store i32 0, ptr %bits, align 4, !dbg !3439
  br label %if.exit341, !dbg !3439

if.exit341:                                       ; preds = %if.then340, %if.then336
  br label %if.exit342, !dbg !3439

if.exit342:                                       ; preds = %if.exit341, %loop.exit332
    #dbg_declare(ptr %bias, !3440, !DIExpression(), !3441)
  store double 0.000000e+00, ptr %bias, align 8, !dbg !3441
  %178 = load i32, ptr %bits, align 4, !dbg !3442
  %lt343 = icmp slt i32 %178, 53, !dbg !3442
  br i1 %lt343, label %if.then344, label %if.exit351, !dbg !3442

if.then344:                                       ; preds = %if.exit342
  store double 1.000000e+00, ptr %x345, align 8
  %179 = load i32, ptr %bits, align 4, !dbg !3443
  %sub346 = sub i32 85, %179, !dbg !3445
  %sub347 = sub i32 %sub346, 1, !dbg !3445
  store i32 %sub347, ptr %n, align 4
  %180 = load double, ptr %x345, align 8, !dbg !3446
  %181 = load i32, ptr %n, align 4, !dbg !3446
  %182 = call double @scalbn(double %180, i32 %181), !dbg !3449
  store double %182, ptr %mag, align 8
  %183 = load i32, ptr %sign126, align 4, !dbg !3450
  %sifp348 = sitofp i32 %183 to double, !dbg !3450
  store double %sifp348, ptr %sgn, align 8
  %184 = load double, ptr %mag, align 8
  store double %184, ptr %x349, align 8
  %185 = load double, ptr %sgn, align 8
  store double %185, ptr %y350, align 8
  %186 = load double, ptr %x349, align 8, !dbg !3451
  %187 = load double, ptr %sgn, align 8, !dbg !3456
  %188 = call double @llvm.copysign.f64(double %186, double %187), !dbg !3456
  store double %188, ptr %bias, align 8, !dbg !3456
  br label %if.exit351, !dbg !3456

if.exit351:                                       ; preds = %if.then344, %if.exit342
  %189 = load i32, ptr %bits, align 4, !dbg !3457
  %lt352 = icmp slt i32 %189, 32, !dbg !3457
  br i1 %lt352, label %and.rhs353, label %and.phi355, !dbg !3457

and.rhs353:                                       ; preds = %if.exit351
  %190 = load double, ptr %y, align 8, !dbg !3458
  %neq354 = fcmp one double %190, 0.000000e+00, !dbg !3458
  br label %and.phi355, !dbg !3458

and.phi355:                                       ; preds = %and.rhs353, %if.exit351
  %val356 = phi i1 [ false, %if.exit351 ], [ %neq354, %and.rhs353 ], !dbg !3458
  br i1 %val356, label %and.rhs357, label %and.phi359, !dbg !3458

and.rhs357:                                       ; preds = %and.phi355
  %191 = load i32, ptr %x, align 4, !dbg !3459
  %and = and i32 %191, 1, !dbg !3460
  %i2nb358 = icmp eq i32 %and, 0, !dbg !3460
  br label %and.phi359, !dbg !3460

and.phi359:                                       ; preds = %and.rhs357, %and.phi355
  %val360 = phi i1 [ false, %and.phi355 ], [ %i2nb358, %and.rhs357 ], !dbg !3460
  br i1 %val360, label %if.then361, label %if.exit363, !dbg !3460

if.then361:                                       ; preds = %and.phi359
  %192 = load i32, ptr %x, align 4, !dbg !3461
  %add362 = add i32 %192, 1, !dbg !3461
  store i32 %add362, ptr %x, align 4, !dbg !3461
  store double 0.000000e+00, ptr %y, align 8, !dbg !3463
  br label %if.exit363, !dbg !3463

if.exit363:                                       ; preds = %if.then361, %and.phi359
  %193 = load double, ptr %bias, align 8, !dbg !3464
  %194 = load i32, ptr %sign126, align 4, !dbg !3465
  %sifp364 = sitofp i32 %194 to double, !dbg !3465
  %195 = load i32, ptr %x, align 4, !dbg !3466
  %uifp = uitofp i32 %195 to double, !dbg !3466
  %fmul365 = fmul double %sifp364, %uifp, !dbg !3465
  %fadd366 = fadd double %193, %fmul365, !dbg !3464
  %196 = load i32, ptr %sign126, align 4, !dbg !3467
  %sifp367 = sitofp i32 %196 to double, !dbg !3467
  %197 = load double, ptr %y, align 8, !dbg !3468
  %fmul368 = fmul double %sifp367, %197, !dbg !3467
  %fadd369 = fadd double %fadd366, %fmul368, !dbg !3464
  store double %fadd369, ptr %y, align 8, !dbg !3464
  %198 = load double, ptr %y, align 8, !dbg !3469
  %199 = load double, ptr %bias, align 8, !dbg !3470
  %fsub370 = fsub double %198, %199, !dbg !3469
  store double %fsub370, ptr %y, align 8, !dbg !3469
  %200 = load double, ptr %y, align 8, !dbg !3471
  %neq371 = fcmp one double %200, 0.000000e+00, !dbg !3471
  %not372 = xor i1 %neq371, true, !dbg !3471
  br i1 %not372, label %if.then373, label %if.exit374, !dbg !3471

if.then373:                                       ; preds = %if.exit363
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !3472
  br label %err_retblock, !dbg !3472

if.exit374:                                       ; preds = %if.exit363
  %201 = load double, ptr %y, align 8
  store double %201, ptr %x375, align 8
  %202 = load i64, ptr %e2, align 8, !dbg !3473
  %trunc376 = trunc i64 %202 to i32, !dbg !3473
  store i32 %trunc376, ptr %n377, align 4
  %203 = load double, ptr %x375, align 8, !dbg !3474
  %204 = load i32, ptr %n377, align 4, !dbg !3474
  %205 = call double @scalbn(double %203, i32 %204), !dbg !3477
  store double %205, ptr %blockret127, align 8, !dbg !3477
  br label %expr_block.exit379, !dbg !3477

expr_block.exit379:                               ; preds = %if.exit374, %if.then309, %if.exit152, %if.then144
  %206 = load double, ptr %blockret127, align 8, !dbg !3477
  %fpfptrunc = fptrunc double %206 to float, !dbg !3477
  store float %fpfptrunc, ptr %blockret, align 4, !dbg !3477
  br label %expr_block.exit1647, !dbg !3477

if.exit380:                                       ; preds = %and.phi111
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %chars381, ptr align 8 %chars, i32 16, i1 false)
  %207 = load i32, ptr %sign, align 4
  store i32 %207, ptr %sign382, align 4
  %ptradd384 = getelementptr inbounds i8, ptr %chars381, i64 8, !dbg !3478
  %208 = load i64, ptr %ptradd384, align 8, !dbg !3478
  %lt385 = icmp ult i64 0, %208, !dbg !3478
  br i1 %lt385, label %assert_ok, label %assert_fail, !dbg !3478

assert_fail:                                      ; preds = %if.exit380
  %209 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3478
  call void %209(ptr @.panic_msg.82, i64 34, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 35) #5, !dbg !3478
  unreachable, !dbg !3478

assert_ok:                                        ; preds = %if.exit380
    #dbg_declare(ptr %x386, !3482, !DIExpression(), !3483)
  call void @llvm.memset.p0.i64(ptr align 16 %x386, i8 0, i64 512, i1 false), !dbg !3483
    #dbg_declare(ptr %emax, !3484, !DIExpression(), !3485)
  store i32 128, ptr %emax, align 4, !dbg !3486
    #dbg_declare(ptr %index387, !3487, !DIExpression(), !3488)
  store i64 0, ptr %index387, align 8, !dbg !3488
    #dbg_declare(ptr %got_digit388, !3489, !DIExpression(), !3490)
  %ptradd389 = getelementptr inbounds i8, ptr %chars381, i64 8, !dbg !3491
  %210 = load i64, ptr %ptradd389, align 8, !dbg !3491
  %211 = load ptr, ptr %chars381, align 8, !dbg !3491
  %ge390 = icmp sge i64 0, %210, !dbg !3492
  %212 = call i1 @llvm.expect.i1(i1 %ge390, i1 false), !dbg !3492
  br i1 %212, label %panic391, label %checkok398, !dbg !3492

checkok398:                                       ; preds = %assert_ok
  %213 = load i8, ptr %211, align 1, !dbg !3492
  %eq399 = icmp eq i8 %213, 48, !dbg !3491
  %214 = zext i1 %eq399 to i8, !dbg !3491
  store i8 %214, ptr %got_digit388, align 1, !dbg !3491
    #dbg_declare(ptr %got_rad400, !3493, !DIExpression(), !3494)
  store i8 0, ptr %got_rad400, align 1, !dbg !3494
    #dbg_declare(ptr %lrp, !3495, !DIExpression(), !3496)
  store i64 0, ptr %lrp, align 8, !dbg !3496
    #dbg_declare(ptr %dc401, !3497, !DIExpression(), !3498)
  store i64 0, ptr %dc401, align 8, !dbg !3498
    #dbg_declare(ptr %k, !3499, !DIExpression(), !3500)
  store i32 0, ptr %k, align 4, !dbg !3500
    #dbg_declare(ptr %j, !3501, !DIExpression(), !3502)
  store i32 0, ptr %j, align 4, !dbg !3502
    #dbg_declare(ptr %lnz, !3503, !DIExpression(), !3504)
  store i32 0, ptr %lnz, align 4, !dbg !3504
    #dbg_declare(ptr %len402, !3505, !DIExpression(), !3506)
  %ptradd403 = getelementptr inbounds i8, ptr %chars381, i64 8, !dbg !3507
  %215 = load i64, ptr %ptradd403, align 8, !dbg !3507
  store i64 %215, ptr %len402, align 8, !dbg !3507
    #dbg_declare(ptr %last_char404, !3508, !DIExpression(), !3509)
  %216 = load i64, ptr %len402, align 8, !dbg !3510
  %sub405 = sub i64 %216, 1, !dbg !3510
  store i64 %sub405, ptr %last_char404, align 8, !dbg !3510
  %217 = load i64, ptr %len402, align 8, !dbg !3511
  %i2b406 = icmp ne i64 %217, 0, !dbg !3511
  br i1 %i2b406, label %assert_ok408, label %assert_fail407, !dbg !3511

assert_fail407:                                   ; preds = %checkok398
  %218 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3511
  call void %218(ptr @.panic_msg.83, i64 16, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 52) #5, !dbg !3511
  unreachable, !dbg !3511

assert_ok408:                                     ; preds = %checkok398
    #dbg_declare(ptr %c409, !3512, !DIExpression(), !3513)
  br label %loop.cond410, !dbg !3514

loop.cond410:                                     ; preds = %if.exit428, %assert_ok408
  %ptradd411 = getelementptr inbounds i8, ptr %chars381, i64 8, !dbg !3515
  %219 = load i64, ptr %ptradd411, align 8, !dbg !3515
  %220 = load ptr, ptr %chars381, align 8, !dbg !3515
  %221 = load i64, ptr %index387, align 8, !dbg !3517
  %ge412 = icmp uge i64 %221, %219, !dbg !3517
  %222 = call i1 @llvm.expect.i1(i1 %ge412, i1 false), !dbg !3517
  br i1 %222, label %panic413, label %checkok420, !dbg !3517

checkok420:                                       ; preds = %loop.cond410
  %ptradd421 = getelementptr inbounds i8, ptr %220, i64 %221, !dbg !3517
  %223 = load i8, ptr %ptradd421, align 1, !dbg !3517
  store i8 %223, ptr %c409, align 1, !dbg !3517
  %eq422 = icmp eq i8 %223, 48, !dbg !3518
  br i1 %eq422, label %loop.body423, label %loop.exit430, !dbg !3518

loop.body423:                                     ; preds = %checkok420
  %224 = load i64, ptr %index387, align 8, !dbg !3519
  %225 = load i64, ptr %last_char404, align 8, !dbg !3521
  %eq424 = icmp eq i64 %224, %225, !dbg !3519
  br i1 %eq424, label %if.then425, label %if.exit428, !dbg !3519

if.then425:                                       ; preds = %loop.body423
  %226 = load i32, ptr %sign382, align 4, !dbg !3522
  %sifp426 = sitofp i32 %226 to double, !dbg !3522
  %fmul427 = fmul double %sifp426, 0.000000e+00, !dbg !3522
  store double %fmul427, ptr %blockret383, align 8, !dbg !3522
  br label %expr_block.exit1645, !dbg !3522

if.exit428:                                       ; preds = %loop.body423
  %227 = load i64, ptr %index387, align 8, !dbg !3523
  %add429 = add i64 %227, 1, !dbg !3523
  store i64 %add429, ptr %index387, align 8, !dbg !3523
  br label %loop.cond410, !dbg !3523

loop.exit430:                                     ; preds = %checkok420
  %228 = load i8, ptr %c409, align 1, !dbg !3524
  %eq431 = icmp eq i8 %228, 46, !dbg !3524
  br i1 %eq431, label %if.then432, label %if.exit482, !dbg !3524

if.then432:                                       ; preds = %loop.exit430
  store i8 1, ptr %got_rad400, align 1, !dbg !3525
  %229 = load i64, ptr %index387, align 8, !dbg !3527
  %230 = load i64, ptr %last_char404, align 8, !dbg !3528
  %eq433 = icmp eq i64 %229, %230, !dbg !3527
  br i1 %eq433, label %if.then434, label %if.exit440, !dbg !3527

if.then434:                                       ; preds = %if.then432
  %231 = load i8, ptr %got_digit388, align 1, !dbg !3529
  %232 = trunc i8 %231 to i1, !dbg !3529
  %not435 = xor i1 %232, true, !dbg !3529
  br i1 %not435, label %if.then436, label %if.exit437, !dbg !3529

if.then436:                                       ; preds = %if.then434
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3531
  br label %err_retblock, !dbg !3531

if.exit437:                                       ; preds = %if.then434
  %233 = load i32, ptr %sign382, align 4, !dbg !3532
  %sifp438 = sitofp i32 %233 to double, !dbg !3532
  %fmul439 = fmul double %sifp438, 0.000000e+00, !dbg !3532
  store double %fmul439, ptr %blockret383, align 8, !dbg !3532
  br label %expr_block.exit1645, !dbg !3532

if.exit440:                                       ; preds = %if.then432
  %234 = load i64, ptr %index387, align 8, !dbg !3533
  %235 = load i64, ptr %last_char404, align 8, !dbg !3534
  %neq441 = icmp ne i64 %234, %235, !dbg !3533
  br i1 %neq441, label %and.rhs442, label %and.phi456, !dbg !3533

and.rhs442:                                       ; preds = %if.exit440
  %ptradd443 = getelementptr inbounds i8, ptr %chars381, i64 8, !dbg !3535
  %236 = load i64, ptr %ptradd443, align 8, !dbg !3535
  %237 = load ptr, ptr %chars381, align 8, !dbg !3535
  %238 = load i64, ptr %index387, align 8, !dbg !3536
  %add444 = add i64 %238, 1, !dbg !3536
  store i64 %add444, ptr %index387, align 8, !dbg !3536
  %ge445 = icmp uge i64 %add444, %236, !dbg !3536
  %239 = call i1 @llvm.expect.i1(i1 %ge445, i1 false), !dbg !3536
  br i1 %239, label %panic446, label %checkok453, !dbg !3536

checkok453:                                       ; preds = %and.rhs442
  %ptradd454 = getelementptr inbounds i8, ptr %237, i64 %add444, !dbg !3537
  %240 = load i8, ptr %ptradd454, align 1, !dbg !3537
  store i8 %240, ptr %c409, align 1, !dbg !3537
  %eq455 = icmp eq i8 %240, 48, !dbg !3538
  br label %and.phi456, !dbg !3538

and.phi456:                                       ; preds = %checkok453, %if.exit440
  %val457 = phi i1 [ false, %if.exit440 ], [ %eq455, %checkok453 ], !dbg !3538
  br i1 %val457, label %if.then458, label %if.exit481, !dbg !3538

if.then458:                                       ; preds = %and.phi456
  %241 = load i64, ptr %lrp, align 8, !dbg !3539
  %sub459 = sub i64 %241, 1, !dbg !3539
  store i64 %sub459, ptr %lrp, align 8, !dbg !3539
  store i8 1, ptr %got_digit388, align 1, !dbg !3541
  br label %loop.cond460, !dbg !3542

loop.cond460:                                     ; preds = %loop.body478, %if.then458
  %242 = load i64, ptr %last_char404, align 8, !dbg !3543
  %243 = load i64, ptr %index387, align 8, !dbg !3545
  %neq461 = icmp ne i64 %242, %243, !dbg !3543
  br i1 %neq461, label %and.rhs462, label %and.phi476, !dbg !3543

and.rhs462:                                       ; preds = %loop.cond460
  %ptradd463 = getelementptr inbounds i8, ptr %chars381, i64 8, !dbg !3546
  %244 = load i64, ptr %ptradd463, align 8, !dbg !3546
  %245 = load ptr, ptr %chars381, align 8, !dbg !3546
  %246 = load i64, ptr %index387, align 8, !dbg !3547
  %add464 = add i64 %246, 1, !dbg !3547
  store i64 %add464, ptr %index387, align 8, !dbg !3547
  %ge465 = icmp uge i64 %add464, %244, !dbg !3547
  %247 = call i1 @llvm.expect.i1(i1 %ge465, i1 false), !dbg !3547
  br i1 %247, label %panic466, label %checkok473, !dbg !3547

checkok473:                                       ; preds = %and.rhs462
  %ptradd474 = getelementptr inbounds i8, ptr %245, i64 %add464, !dbg !3548
  %248 = load i8, ptr %ptradd474, align 1, !dbg !3548
  store i8 %248, ptr %c409, align 1, !dbg !3548
  %eq475 = icmp eq i8 %248, 48, !dbg !3549
  br label %and.phi476, !dbg !3549

and.phi476:                                       ; preds = %checkok473, %loop.cond460
  %val477 = phi i1 [ false, %loop.cond460 ], [ %eq475, %checkok473 ], !dbg !3549
  br i1 %val477, label %loop.body478, label %loop.exit480, !dbg !3549

loop.body478:                                     ; preds = %and.phi476
  %249 = load i64, ptr %lrp, align 8, !dbg !3550
  %sub479 = sub i64 %249, 1, !dbg !3550
  store i64 %sub479, ptr %lrp, align 8, !dbg !3550
  br label %loop.cond460, !dbg !3550

loop.exit480:                                     ; preds = %and.phi476
  br label %if.exit481, !dbg !3550

if.exit481:                                       ; preds = %loop.exit480, %and.phi456
  br label %if.exit482, !dbg !3550

if.exit482:                                       ; preds = %if.exit481, %loop.exit430
  br label %loop.cond483, !dbg !3552

loop.cond483:                                     ; preds = %checkok599, %if.exit482
  %250 = load i8, ptr %c409, align 1, !dbg !3553
  %zext484 = zext i8 %250 to i32, !dbg !3553
  %sub485 = sub i32 %zext484, 48, !dbg !3553
  %lt486 = icmp ult i32 %sub485, 10, !dbg !3553
  br i1 %lt486, label %or.phi489, label %or.rhs487, !dbg !3553

or.rhs487:                                        ; preds = %loop.cond483
  %251 = load i8, ptr %c409, align 1, !dbg !3555
  %eq488 = icmp eq i8 %251, 46, !dbg !3555
  br label %or.phi489, !dbg !3555

or.phi489:                                        ; preds = %or.rhs487, %loop.cond483
  %val490 = phi i1 [ true, %loop.cond483 ], [ %eq488, %or.rhs487 ], !dbg !3555
  br i1 %val490, label %loop.body491, label %loop.exit601, !dbg !3555

loop.body491:                                     ; preds = %or.phi489
  store i8 1, ptr %switch492, align 1
  br label %switch.entry493

switch.entry493:                                  ; preds = %loop.body491
  %252 = load i8, ptr %switch492, align 1
  %253 = trunc i8 %252 to i1
  %254 = load i8, ptr %c409, align 1, !dbg !3556
  %eq494 = icmp eq i8 %254, 46, !dbg !3556
  %eq495 = icmp eq i1 %eq494, %253, !dbg !3556
  br i1 %eq495, label %switch.case496, label %next_if499, !dbg !3556

switch.case496:                                   ; preds = %switch.entry493
  %255 = load i8, ptr %got_rad400, align 1, !dbg !3559
  %256 = trunc i8 %255 to i1, !dbg !3559
  br i1 %256, label %if.then497, label %if.exit498, !dbg !3559

if.then497:                                       ; preds = %switch.case496
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3561
  br label %err_retblock, !dbg !3561

if.exit498:                                       ; preds = %switch.case496
  store i8 1, ptr %got_rad400, align 1, !dbg !3562
  %257 = load i64, ptr %dc401, align 8, !dbg !3563
  store i64 %257, ptr %lrp, align 8, !dbg !3563
  br label %switch.exit582, !dbg !3563

next_if499:                                       ; preds = %switch.entry493
  %258 = load i32, ptr %k, align 4, !dbg !3564
  %lt500 = icmp slt i32 %258, 125, !dbg !3564
  %eq501 = icmp eq i1 %lt500, %253, !dbg !3564
  br i1 %eq501, label %switch.case502, label %next_if575, !dbg !3564

switch.case502:                                   ; preds = %next_if499
  %259 = load i64, ptr %dc401, align 8, !dbg !3565
  %add503 = add i64 %259, 1, !dbg !3565
  store i64 %add503, ptr %dc401, align 8, !dbg !3565
  %260 = load i8, ptr %c409, align 1, !dbg !3567
  %neq504 = icmp ne i8 %260, 48, !dbg !3567
  br i1 %neq504, label %if.then505, label %if.exit507, !dbg !3567

if.then505:                                       ; preds = %switch.case502
  %261 = load i64, ptr %dc401, align 8, !dbg !3568
  %trunc506 = trunc i64 %261 to i32, !dbg !3568
  store i32 %trunc506, ptr %lnz, align 4, !dbg !3568
  br label %if.exit507, !dbg !3568

if.exit507:                                       ; preds = %if.then505, %switch.case502
  %262 = load i32, ptr %j, align 4, !dbg !3569
  %i2b508 = icmp ne i32 %262, 0, !dbg !3569
  br i1 %i2b508, label %if.then509, label %if.else548, !dbg !3569

if.then509:                                       ; preds = %if.exit507
  %263 = load i32, ptr %k, align 4, !dbg !3570
  %sext = sext i32 %263 to i64, !dbg !3570
  %lt510 = icmp slt i64 %sext, 0, !dbg !3570
  %264 = call i1 @llvm.expect.i1(i1 %lt510, i1 false), !dbg !3570
  br i1 %264, label %panic511, label %checkok516, !dbg !3570

checkok516:                                       ; preds = %if.then509
  %ge517 = icmp sge i64 %sext, 128, !dbg !3570
  %265 = call i1 @llvm.expect.i1(i1 %ge517, i1 false), !dbg !3570
  br i1 %265, label %panic518, label %checkok525, !dbg !3570

checkok525:                                       ; preds = %checkok516
  %ptroffset = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext, !dbg !3570
  %266 = load i32, ptr %k, align 4, !dbg !3572
  %sext526 = sext i32 %266 to i64, !dbg !3572
  %lt527 = icmp slt i64 %sext526, 0, !dbg !3572
  %267 = call i1 @llvm.expect.i1(i1 %lt527, i1 false), !dbg !3572
  br i1 %267, label %panic528, label %checkok533, !dbg !3572

checkok533:                                       ; preds = %checkok525
  %ge534 = icmp sge i64 %sext526, 128, !dbg !3572
  %268 = call i1 @llvm.expect.i1(i1 %ge534, i1 false), !dbg !3572
  br i1 %268, label %panic535, label %checkok542, !dbg !3572

checkok542:                                       ; preds = %checkok533
  %ptroffset543 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext526, !dbg !3572
  %269 = load i32, ptr %ptroffset543, align 4, !dbg !3572
  %mul544 = mul i32 %269, 10, !dbg !3573
  %270 = load i8, ptr %c409, align 1, !dbg !3574
  %zext545 = zext i8 %270 to i32, !dbg !3574
  %add546 = add i32 %mul544, %zext545, !dbg !3573
  %sub547 = sub i32 %add546, 48, !dbg !3573
  store i32 %sub547, ptr %ptroffset, align 4, !dbg !3573
  br label %if.exit569, !dbg !3573

if.else548:                                       ; preds = %if.exit507
  %271 = load i32, ptr %k, align 4, !dbg !3575
  %sext549 = sext i32 %271 to i64, !dbg !3575
  %lt550 = icmp slt i64 %sext549, 0, !dbg !3575
  %272 = call i1 @llvm.expect.i1(i1 %lt550, i1 false), !dbg !3575
  br i1 %272, label %panic551, label %checkok556, !dbg !3575

checkok556:                                       ; preds = %if.else548
  %ge557 = icmp sge i64 %sext549, 128, !dbg !3575
  %273 = call i1 @llvm.expect.i1(i1 %ge557, i1 false), !dbg !3575
  br i1 %273, label %panic558, label %checkok565, !dbg !3575

checkok565:                                       ; preds = %checkok556
  %ptroffset566 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext549, !dbg !3575
  %274 = load i8, ptr %c409, align 1, !dbg !3577
  %zext567 = zext i8 %274 to i32, !dbg !3577
  %sub568 = sub i32 %zext567, 48, !dbg !3577
  store i32 %sub568, ptr %ptroffset566, align 4, !dbg !3577
  br label %if.exit569, !dbg !3577

if.exit569:                                       ; preds = %checkok565, %checkok542
  %275 = load i32, ptr %j, align 4, !dbg !3578
  %add570 = add i32 %275, 1, !dbg !3578
  store i32 %add570, ptr %j, align 4, !dbg !3578
  %eq571 = icmp eq i32 %add570, 9, !dbg !3579
  br i1 %eq571, label %if.then572, label %if.exit574, !dbg !3579

if.then572:                                       ; preds = %if.exit569
  %276 = load i32, ptr %k, align 4, !dbg !3580
  %add573 = add i32 %276, 1, !dbg !3580
  store i32 %add573, ptr %k, align 4, !dbg !3580
  store i32 0, ptr %j, align 4, !dbg !3582
  br label %if.exit574, !dbg !3582

if.exit574:                                       ; preds = %if.then572, %if.exit569
  store i8 1, ptr %got_digit388, align 1, !dbg !3583
  br label %switch.exit582, !dbg !3583

next_if575:                                       ; preds = %next_if499
  br label %switch.default, !dbg !3583

switch.default:                                   ; preds = %next_if575
  %277 = load i64, ptr %dc401, align 8, !dbg !3584
  %add576 = add i64 %277, 1, !dbg !3584
  store i64 %add576, ptr %dc401, align 8, !dbg !3584
  %278 = load i8, ptr %c409, align 1, !dbg !3586
  %neq577 = icmp ne i8 %278, 48, !dbg !3586
  br i1 %neq577, label %if.then578, label %if.exit581, !dbg !3586

if.then578:                                       ; preds = %switch.default
  %ptradd579 = getelementptr inbounds i8, ptr %x386, i64 496, !dbg !3587
  %279 = load i32, ptr %ptradd579, align 4, !dbg !3587
  %or580 = or i32 %279, 1, !dbg !3588
  store i32 %or580, ptr %ptradd579, align 4, !dbg !3588
  br label %if.exit581, !dbg !3588

if.exit581:                                       ; preds = %if.then578, %switch.default
  br label %switch.exit582, !dbg !3588

switch.exit582:                                   ; preds = %if.exit581, %if.exit574, %if.exit498
  %280 = load i64, ptr %index387, align 8, !dbg !3589
  %281 = load i64, ptr %last_char404, align 8, !dbg !3590
  %eq583 = icmp eq i64 %280, %281, !dbg !3589
  br i1 %eq583, label %if.then584, label %if.exit585, !dbg !3589

if.then584:                                       ; preds = %switch.exit582
  br label %loop.exit601, !dbg !3591

if.exit585:                                       ; preds = %switch.exit582
  %282 = load i64, ptr %index387, align 8, !dbg !3592
  %283 = load i64, ptr %last_char404, align 8, !dbg !3593
  %lt586 = icmp ult i64 %282, %283, !dbg !3592
  br i1 %lt586, label %assert_ok588, label %assert_fail587, !dbg !3592

assert_fail587:                                   ; preds = %if.exit585
  %284 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3592
  call void %284(ptr @.panic_msg.83, i64 16, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 112) #5, !dbg !3592
  unreachable, !dbg !3592

assert_ok588:                                     ; preds = %if.exit585
  %ptradd589 = getelementptr inbounds i8, ptr %chars381, i64 8, !dbg !3594
  %285 = load i64, ptr %ptradd589, align 8, !dbg !3594
  %286 = load ptr, ptr %chars381, align 8, !dbg !3594
  %287 = load i64, ptr %index387, align 8, !dbg !3595
  %add590 = add i64 %287, 1, !dbg !3595
  store i64 %add590, ptr %index387, align 8, !dbg !3595
  %ge591 = icmp uge i64 %add590, %285, !dbg !3595
  %288 = call i1 @llvm.expect.i1(i1 %ge591, i1 false), !dbg !3595
  br i1 %288, label %panic592, label %checkok599, !dbg !3595

checkok599:                                       ; preds = %assert_ok588
  %ptradd600 = getelementptr inbounds i8, ptr %286, i64 %add590, !dbg !3596
  %289 = load i8, ptr %ptradd600, align 1, !dbg !3596
  store i8 %289, ptr %c409, align 1, !dbg !3596
  br label %loop.cond483, !dbg !3596

loop.exit601:                                     ; preds = %if.then584, %or.phi489
  %290 = load i8, ptr %got_rad400, align 1, !dbg !3597
  %291 = trunc i8 %290 to i1, !dbg !3597
  %not602 = xor i1 %291, true, !dbg !3597
  br i1 %not602, label %if.then603, label %if.exit604, !dbg !3597

if.then603:                                       ; preds = %loop.exit601
  %292 = load i64, ptr %dc401, align 8, !dbg !3598
  store i64 %292, ptr %lrp, align 8, !dbg !3598
  br label %if.exit604, !dbg !3598

if.exit604:                                       ; preds = %if.then603, %loop.exit601
  %293 = load i8, ptr %got_digit388, align 1, !dbg !3599
  %294 = trunc i8 %293 to i1, !dbg !3599
  %not605 = xor i1 %294, true, !dbg !3599
  br i1 %not605, label %if.then606, label %if.exit607, !dbg !3599

if.then606:                                       ; preds = %if.exit604
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3600
  br label %err_retblock, !dbg !3600

if.exit607:                                       ; preds = %if.exit604
  %295 = load i8, ptr %c409, align 1, !dbg !3601
  %zext608 = zext i8 %295 to i32, !dbg !3601
  %or609 = or i32 %zext608, 32, !dbg !3601
  %eq610 = icmp eq i32 %or609, 101, !dbg !3601
  %check611 = icmp sge i32 %or609, 0, !dbg !3601
  %siui-eq612 = and i1 %check611, %eq610, !dbg !3601
  br i1 %siui-eq612, label %if.then613, label %if.else644, !dbg !3601

if.then613:                                       ; preds = %if.exit607
  %296 = load i64, ptr %last_char404, align 8, !dbg !3602
  %297 = load i64, ptr %index387, align 8, !dbg !3604
  %eq614 = icmp eq i64 %296, %297, !dbg !3602
  br i1 %eq614, label %if.then615, label %if.exit616, !dbg !3602

if.then615:                                       ; preds = %if.then613
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3605
  br label %err_retblock, !dbg !3605

if.exit616:                                       ; preds = %if.then613
    #dbg_declare(ptr %e10, !3606, !DIExpression(), !3607)
  %298 = load %"char[]", ptr %chars381, align 8, !dbg !3608
  %299 = extractvalue %"char[]" %298, 0, !dbg !3608
  %300 = load i64, ptr %index387, align 8, !dbg !3609
  %add617 = add i64 %300, 1, !dbg !3609
  %301 = extractvalue %"char[]" %298, 1, !dbg !3609
  %gt618 = icmp sgt i64 %add617, %301, !dbg !3609
  %302 = call i1 @llvm.expect.i1(i1 %gt618, i1 false), !dbg !3609
  br i1 %302, label %panic619, label %checkok626, !dbg !3609

checkok626:                                       ; preds = %if.exit616
  %underflow627 = icmp slt i64 %add617, 0, !dbg !3610
  %303 = call i1 @llvm.expect.i1(i1 %underflow627, i1 false), !dbg !3610
  br i1 %303, label %panic628, label %checkok633, !dbg !3610

checkok633:                                       ; preds = %checkok626
  %size634 = sub i64 %301, %add617, !dbg !3609
  %ptradd635 = getelementptr inbounds i8, ptr %299, i64 %add617, !dbg !3609
  %304 = insertvalue %"char[]" undef, ptr %ptradd635, 0, !dbg !3609
  %305 = insertvalue %"char[]" %304, i64 %size634, 1, !dbg !3609
  %306 = call i64 @std.core.String.to_long(ptr %retparam636, ptr %ptradd635, i64 %size634, i32 10), !dbg !3611
  %not_err637 = icmp eq i64 %306, 0, !dbg !3611
  %307 = call i1 @llvm.expect.i1(i1 %not_err637, i1 true), !dbg !3611
  br i1 %307, label %after_check638, label %else_block639, !dbg !3611

after_check638:                                   ; preds = %checkok633
  %308 = load i64, ptr %retparam636, align 8, !dbg !3611
  br label %phi_block642, !dbg !3611

else_block639:                                    ; preds = %checkok633
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %error_var640, align 8, !dbg !3612
  br label %guard_block641, !dbg !3612

guard_block641:                                   ; preds = %else_block639
  %309 = load i64, ptr %error_var640, align 8, !dbg !3612
  store i64 %309, ptr %reterr, align 8, !dbg !3612
  br label %err_retblock, !dbg !3612

phi_block642:                                     ; preds = %after_check638
  store i64 %308, ptr %e10, align 8, !dbg !3612
  %310 = load i64, ptr %lrp, align 8, !dbg !3613
  %311 = load i64, ptr %e10, align 8, !dbg !3614
  %add643 = add i64 %310, %311, !dbg !3613
  store i64 %add643, ptr %lrp, align 8, !dbg !3613
  br label %if.exit648, !dbg !3613

if.else644:                                       ; preds = %if.exit607
  %312 = load i64, ptr %index387, align 8, !dbg !3615
  %313 = load i64, ptr %last_char404, align 8, !dbg !3616
  %neq645 = icmp ne i64 %312, %313, !dbg !3615
  br i1 %neq645, label %if.then646, label %if.exit647, !dbg !3615

if.then646:                                       ; preds = %if.else644
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3617
  br label %err_retblock, !dbg !3617

if.exit647:                                       ; preds = %if.else644
  br label %if.exit648, !dbg !3617

if.exit648:                                       ; preds = %if.exit647, %phi_block642
  %314 = load i32, ptr %x386, align 4, !dbg !3619
  %i2nb649 = icmp eq i32 %314, 0, !dbg !3619
  br i1 %i2nb649, label %if.then650, label %if.exit653, !dbg !3619

if.then650:                                       ; preds = %if.exit648
  %315 = load i32, ptr %sign382, align 4, !dbg !3620
  %sifp651 = sitofp i32 %315 to double, !dbg !3620
  %fmul652 = fmul double %sifp651, 0.000000e+00, !dbg !3620
  store double %fmul652, ptr %blockret383, align 8, !dbg !3620
  br label %expr_block.exit1645, !dbg !3620

if.exit653:                                       ; preds = %if.exit648
  %316 = load i64, ptr %lrp, align 8, !dbg !3621
  %317 = load i64, ptr %dc401, align 8, !dbg !3622
  %eq654 = icmp eq i64 %316, %317, !dbg !3621
  br i1 %eq654, label %and.rhs655, label %and.phi657, !dbg !3621

and.rhs655:                                       ; preds = %if.exit653
  %318 = load i64, ptr %dc401, align 8, !dbg !3623
  %lt656 = icmp slt i64 %318, 10, !dbg !3623
  br label %and.phi657, !dbg !3623

and.phi657:                                       ; preds = %and.rhs655, %if.exit653
  %val658 = phi i1 [ false, %if.exit653 ], [ %lt656, %and.rhs655 ], !dbg !3623
  br i1 %val658, label %and.rhs659, label %and.phi665, !dbg !3623

and.rhs659:                                       ; preds = %and.phi657
  br i1 false, label %or.phi663, label %or.rhs660, !dbg !3624

or.rhs660:                                        ; preds = %and.rhs659
  %319 = load i32, ptr %x386, align 4, !dbg !3625
  %zext661 = zext i32 %319 to i64, !dbg !3625
  %lshr = lshr i64 %zext661, 24, !dbg !3626
  %320 = freeze i64 %lshr, !dbg !3626
  %eq662 = icmp eq i64 0, %320, !dbg !3626
  br label %or.phi663, !dbg !3626

or.phi663:                                        ; preds = %or.rhs660, %and.rhs659
  %val664 = phi i1 [ true, %and.rhs659 ], [ %eq662, %or.rhs660 ], !dbg !3626
  br label %and.phi665, !dbg !3626

and.phi665:                                       ; preds = %or.phi663, %and.phi657
  %val666 = phi i1 [ false, %and.phi657 ], [ %val664, %or.phi663 ], !dbg !3626
  br i1 %val666, label %if.then667, label %if.exit671, !dbg !3626

if.then667:                                       ; preds = %and.phi665
  %321 = load i32, ptr %sign382, align 4, !dbg !3627
  %sifp668 = sitofp i32 %321 to double, !dbg !3627
  %322 = load i32, ptr %x386, align 4, !dbg !3628
  %uifp669 = uitofp i32 %322 to double, !dbg !3628
  %fmul670 = fmul double %sifp668, %uifp669, !dbg !3627
  store double %fmul670, ptr %blockret383, align 8, !dbg !3627
  br label %expr_block.exit1645, !dbg !3627

if.exit671:                                       ; preds = %and.phi665
  %323 = load i64, ptr %lrp, align 8, !dbg !3629
  %gt672 = icmp sgt i64 %323, 74, !dbg !3629
  br i1 %gt672, label %if.then673, label %if.exit674, !dbg !3629

if.then673:                                       ; preds = %if.exit671
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !3630
  br label %err_retblock, !dbg !3630

if.exit674:                                       ; preds = %if.exit671
  %324 = load i64, ptr %lrp, align 8, !dbg !3631
  %lt675 = icmp slt i64 %324, -255, !dbg !3631
  br i1 %lt675, label %if.then676, label %if.exit677, !dbg !3631

if.then676:                                       ; preds = %if.exit674
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !3632
  br label %err_retblock, !dbg !3632

if.exit677:                                       ; preds = %if.exit674
  %325 = load i32, ptr %j, align 4, !dbg !3633
  %i2b678 = icmp ne i32 %325, 0, !dbg !3633
  br i1 %i2b678, label %if.then679, label %if.exit705, !dbg !3633

if.then679:                                       ; preds = %if.exit677
  br label %loop.cond680, !dbg !3634

loop.cond680:                                     ; preds = %checkok699, %if.then679
  %326 = load i32, ptr %j, align 4, !dbg !3636
  %lt681 = icmp slt i32 %326, 9, !dbg !3636
  br i1 %lt681, label %loop.body682, label %loop.exit703, !dbg !3636

loop.body682:                                     ; preds = %loop.cond680
  %327 = load i32, ptr %k, align 4, !dbg !3638
  %sext683 = sext i32 %327 to i64, !dbg !3638
  %lt684 = icmp slt i64 %sext683, 0, !dbg !3638
  %328 = call i1 @llvm.expect.i1(i1 %lt684, i1 false), !dbg !3638
  br i1 %328, label %panic685, label %checkok690, !dbg !3638

checkok690:                                       ; preds = %loop.body682
  %ge691 = icmp sge i64 %sext683, 128, !dbg !3638
  %329 = call i1 @llvm.expect.i1(i1 %ge691, i1 false), !dbg !3638
  br i1 %329, label %panic692, label %checkok699, !dbg !3638

checkok699:                                       ; preds = %checkok690
  %ptroffset700 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext683, !dbg !3638
  %330 = load i32, ptr %ptroffset700, align 4, !dbg !3638
  %mul701 = mul i32 %330, 10, !dbg !3639
  store i32 %mul701, ptr %ptroffset700, align 4, !dbg !3639
  %331 = load i32, ptr %j, align 4, !dbg !3640
  %add702 = add i32 %331, 1, !dbg !3640
  store i32 %add702, ptr %j, align 4, !dbg !3640
  br label %loop.cond680, !dbg !3640

loop.exit703:                                     ; preds = %loop.cond680
  %332 = load i32, ptr %k, align 4, !dbg !3641
  %add704 = add i32 %332, 1, !dbg !3641
  store i32 %add704, ptr %k, align 4, !dbg !3641
  store i32 0, ptr %j, align 4, !dbg !3642
  br label %if.exit705, !dbg !3642

if.exit705:                                       ; preds = %loop.exit703, %if.exit677
    #dbg_declare(ptr %a, !3643, !DIExpression(), !3644)
  store i32 0, ptr %a, align 4, !dbg !3644
    #dbg_declare(ptr %z, !3645, !DIExpression(), !3646)
  %333 = load i32, ptr %k, align 4, !dbg !3647
  store i32 %333, ptr %z, align 4, !dbg !3647
    #dbg_declare(ptr %e2706, !3648, !DIExpression(), !3649)
  store i32 0, ptr %e2706, align 4, !dbg !3649
    #dbg_declare(ptr %rp707, !3650, !DIExpression(), !3651)
  %334 = load i64, ptr %lrp, align 8, !dbg !3652
  store i64 %334, ptr %rp707, align 8, !dbg !3652
  %335 = load i32, ptr %lnz, align 4, !dbg !3653
  %lt708 = icmp slt i32 %335, 9, !dbg !3653
  br i1 %lt708, label %and.rhs709, label %and.phi711, !dbg !3653

and.rhs709:                                       ; preds = %if.exit705
  %336 = load i32, ptr %lnz, align 4, !dbg !3654
  %sext710 = sext i32 %336 to i64, !dbg !3654
  %337 = load i64, ptr %rp707, align 8, !dbg !3655
  %le = icmp sle i64 %sext710, %337, !dbg !3654
  br label %and.phi711, !dbg !3654

and.phi711:                                       ; preds = %and.rhs709, %if.exit705
  %val712 = phi i1 [ false, %if.exit705 ], [ %le, %and.rhs709 ], !dbg !3654
  br i1 %val712, label %and.rhs713, label %and.phi715, !dbg !3654

and.rhs713:                                       ; preds = %and.phi711
  %338 = load i64, ptr %rp707, align 8, !dbg !3656
  %lt714 = icmp slt i64 %338, 18, !dbg !3656
  br label %and.phi715, !dbg !3656

and.phi715:                                       ; preds = %and.rhs713, %and.phi711
  %val716 = phi i1 [ false, %and.phi711 ], [ %lt714, %and.rhs713 ], !dbg !3656
  br i1 %val716, label %if.then717, label %if.exit793, !dbg !3656

if.then717:                                       ; preds = %and.phi715
  %339 = load i64, ptr %rp707, align 8, !dbg !3657
  %eq718 = icmp eq i64 %339, 9, !dbg !3657
  br i1 %eq718, label %if.then719, label %if.exit723, !dbg !3657

if.then719:                                       ; preds = %if.then717
  %340 = load i32, ptr %sign382, align 4, !dbg !3659
  %sifp720 = sitofp i32 %340 to double, !dbg !3659
  %341 = load i32, ptr %x386, align 4, !dbg !3660
  %uifp721 = uitofp i32 %341 to double, !dbg !3660
  %fmul722 = fmul double %sifp720, %uifp721, !dbg !3659
  store double %fmul722, ptr %blockret383, align 8, !dbg !3659
  br label %expr_block.exit1645, !dbg !3659

if.exit723:                                       ; preds = %if.then717
  %342 = load i64, ptr %rp707, align 8, !dbg !3661
  %lt724 = icmp slt i64 %342, 9, !dbg !3661
  br i1 %lt724, label %if.then725, label %if.exit751, !dbg !3661

if.then725:                                       ; preds = %if.exit723
  %343 = load i32, ptr %sign382, align 4, !dbg !3662
  %sifp726 = sitofp i32 %343 to double, !dbg !3662
  %344 = load i32, ptr %x386, align 4, !dbg !3663
  %uifp727 = uitofp i32 %344 to double, !dbg !3663
  %fmul728 = fmul double %sifp726, %uifp727, !dbg !3662
  %345 = load i64, ptr %rp707, align 8, !dbg !3664
  %sub729 = sub i64 8, %345, !dbg !3665
  %lt730 = icmp slt i64 %sub729, 0, !dbg !3665
  %346 = call i1 @llvm.expect.i1(i1 %lt730, i1 false), !dbg !3665
  br i1 %346, label %panic731, label %checkok736, !dbg !3665

checkok736:                                       ; preds = %if.then725
  %ge737 = icmp sge i64 %sub729, 8, !dbg !3665
  %347 = call i1 @llvm.expect.i1(i1 %ge737, i1 false), !dbg !3665
  br i1 %347, label %panic738, label %checkok745, !dbg !3665

checkok745:                                       ; preds = %checkok736
  %ptroffset746 = getelementptr inbounds [4 x i8], ptr @to_float.P10S, i64 %sub729, !dbg !3665
  %348 = load i32, ptr %ptroffset746, align 4, !dbg !3665
  %sifp747 = sitofp i32 %348 to double, !dbg !3665
  %zero = fcmp ueq double %sifp747, 0.000000e+00, !dbg !3662
  %349 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !3662
  br i1 %349, label %panic748, label %checkok749, !dbg !3662

checkok749:                                       ; preds = %checkok745
  %fdiv750 = fdiv double %fmul728, %sifp747, !dbg !3662
  store double %fdiv750, ptr %blockret383, align 8, !dbg !3662
  br label %expr_block.exit1645, !dbg !3662

if.exit751:                                       ; preds = %if.exit723
    #dbg_declare(ptr %bitlim, !3666, !DIExpression(), !3667)
  %350 = load i64, ptr %rp707, align 8, !dbg !3668
  %sub752 = sub i64 %350, 9, !dbg !3669
  %trunc753 = trunc i64 %sub752 to i32, !dbg !3669
  %mul754 = mul i32 3, %trunc753, !dbg !3670
  %sub755 = sub i32 24, %mul754, !dbg !3671
  store i32 %sub755, ptr %bitlim, align 4, !dbg !3671
  %351 = load i32, ptr %bitlim, align 4, !dbg !3672
  %gt756 = icmp sgt i32 %351, 30, !dbg !3672
  br i1 %gt756, label %or.phi766, label %or.rhs757, !dbg !3672

or.rhs757:                                        ; preds = %if.exit751
  %352 = load i32, ptr %x386, align 4, !dbg !3673
  %353 = load i32, ptr %bitlim, align 4, !dbg !3674
  %shift_exceeds = icmp uge i32 %353, 32, !dbg !3675
  %354 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !3675
  br i1 %354, label %panic758, label %checkok763, !dbg !3675

checkok763:                                       ; preds = %or.rhs757
  %lshr764 = lshr i32 %352, %353, !dbg !3675
  %355 = freeze i32 %lshr764, !dbg !3675
  %eq765 = icmp eq i32 0, %355, !dbg !3675
  br label %or.phi766, !dbg !3675

or.phi766:                                        ; preds = %checkok763, %if.exit751
  %val767 = phi i1 [ true, %if.exit751 ], [ %eq765, %checkok763 ], !dbg !3675
  br i1 %val767, label %if.then768, label %if.exit792, !dbg !3675

if.then768:                                       ; preds = %or.phi766
  %356 = load i32, ptr %sign382, align 4, !dbg !3676
  %sifp769 = sitofp i32 %356 to double, !dbg !3676
  %357 = load i32, ptr %x386, align 4, !dbg !3677
  %uifp770 = uitofp i32 %357 to double, !dbg !3677
  %fmul771 = fmul double %sifp769, %uifp770, !dbg !3676
  %358 = load i64, ptr %rp707, align 8, !dbg !3678
  %sub772 = sub i64 %358, 10, !dbg !3678
  %lt773 = icmp slt i64 %sub772, 0, !dbg !3678
  %359 = call i1 @llvm.expect.i1(i1 %lt773, i1 false), !dbg !3678
  br i1 %359, label %panic774, label %checkok779, !dbg !3678

checkok779:                                       ; preds = %if.then768
  %ge780 = icmp sge i64 %sub772, 8, !dbg !3678
  %360 = call i1 @llvm.expect.i1(i1 %ge780, i1 false), !dbg !3678
  br i1 %360, label %panic781, label %checkok788, !dbg !3678

checkok788:                                       ; preds = %checkok779
  %ptroffset789 = getelementptr inbounds [4 x i8], ptr @to_float.P10S, i64 %sub772, !dbg !3678
  %361 = load i32, ptr %ptroffset789, align 4, !dbg !3678
  %sifp790 = sitofp i32 %361 to double, !dbg !3678
  %fmul791 = fmul double %fmul771, %sifp790, !dbg !3676
  store double %fmul791, ptr %blockret383, align 8, !dbg !3676
  br label %expr_block.exit1645, !dbg !3676

if.exit792:                                       ; preds = %or.phi766
  br label %if.exit793, !dbg !3676

if.exit793:                                       ; preds = %if.exit792, %and.phi715
  %362 = load i64, ptr %rp707, align 8, !dbg !3679
  %smod = srem i64 %362, 9, !dbg !3679
  %i2b794 = icmp ne i64 %smod, 0, !dbg !3679
  br i1 %i2b794, label %if.then795, label %if.exit943, !dbg !3679

if.then795:                                       ; preds = %if.exit793
    #dbg_declare(ptr %rpm9, !3680, !DIExpression(), !3682)
  %363 = load i64, ptr %rp707, align 8, !dbg !3683
  %ge796 = icmp sge i64 %363, 0, !dbg !3683
  br i1 %ge796, label %cond.lhs, label %cond.rhs, !dbg !3683

cond.lhs:                                         ; preds = %if.then795
  %364 = load i64, ptr %rp707, align 8, !dbg !3684
  %smod797 = srem i64 %364, 9, !dbg !3684
  br label %cond.phi, !dbg !3684

cond.rhs:                                         ; preds = %if.then795
  %365 = load i64, ptr %rp707, align 8, !dbg !3685
  %smod798 = srem i64 %365, 9, !dbg !3685
  %add799 = add i64 %smod798, 9, !dbg !3685
  br label %cond.phi, !dbg !3685

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val800 = phi i64 [ %smod797, %cond.lhs ], [ %add799, %cond.rhs ], !dbg !3685
  store i64 %val800, ptr %rpm9, align 8, !dbg !3685
    #dbg_declare(ptr %p10, !3686, !DIExpression(), !3687)
  %366 = load i64, ptr %rpm9, align 8, !dbg !3688
  %sub801 = sub i64 8, %366, !dbg !3689
  %lt802 = icmp slt i64 %sub801, 0, !dbg !3689
  %367 = call i1 @llvm.expect.i1(i1 %lt802, i1 false), !dbg !3689
  br i1 %367, label %panic803, label %checkok808, !dbg !3689

checkok808:                                       ; preds = %cond.phi
  %ge809 = icmp sge i64 %sub801, 8, !dbg !3689
  %368 = call i1 @llvm.expect.i1(i1 %ge809, i1 false), !dbg !3689
  br i1 %368, label %panic810, label %checkok817, !dbg !3689

checkok817:                                       ; preds = %checkok808
  %ptroffset818 = getelementptr inbounds [4 x i8], ptr @to_float.P10S, i64 %sub801, !dbg !3689
  %369 = load i32, ptr %ptroffset818, align 4, !dbg !3689
  store i32 %369, ptr %p10, align 4, !dbg !3689
    #dbg_declare(ptr %carry, !3690, !DIExpression(), !3691)
  store i32 0, ptr %carry, align 4, !dbg !3692
  %370 = load i32, ptr %a, align 4, !dbg !3693
  store i32 %370, ptr %k, align 4, !dbg !3693
  br label %loop.cond819, !dbg !3693

loop.cond819:                                     ; preds = %if.exit916, %checkok817
  %371 = load i32, ptr %k, align 4, !dbg !3695
  %372 = load i32, ptr %z, align 4, !dbg !3696
  %neq820 = icmp ne i32 %371, %372, !dbg !3695
  br i1 %neq820, label %loop.body821, label %loop.exit918, !dbg !3695

loop.body821:                                     ; preds = %loop.cond819
    #dbg_declare(ptr %tmp, !3697, !DIExpression(), !3699)
  %373 = load i32, ptr %k, align 4, !dbg !3700
  %sext822 = sext i32 %373 to i64, !dbg !3700
  %lt823 = icmp slt i64 %sext822, 0, !dbg !3700
  %374 = call i1 @llvm.expect.i1(i1 %lt823, i1 false), !dbg !3700
  br i1 %374, label %panic824, label %checkok829, !dbg !3700

checkok829:                                       ; preds = %loop.body821
  %ge830 = icmp sge i64 %sext822, 128, !dbg !3700
  %375 = call i1 @llvm.expect.i1(i1 %ge830, i1 false), !dbg !3700
  br i1 %375, label %panic831, label %checkok838, !dbg !3700

checkok838:                                       ; preds = %checkok829
  %ptroffset839 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext822, !dbg !3700
  %376 = load i32, ptr %ptroffset839, align 4, !dbg !3700
  %377 = load i32, ptr %p10, align 4, !dbg !3701
  %zero840 = icmp eq i32 %377, 0, !dbg !3702
  %378 = call i1 @llvm.expect.i1(i1 %zero840, i1 false), !dbg !3702
  br i1 %378, label %panic841, label %checkok842, !dbg !3702

checkok842:                                       ; preds = %checkok838
  %smod843 = srem i32 %376, %377, !dbg !3702
  store i32 %smod843, ptr %tmp, align 4, !dbg !3702
  %379 = load i32, ptr %k, align 4, !dbg !3703
  %sext844 = sext i32 %379 to i64, !dbg !3703
  %lt845 = icmp slt i64 %sext844, 0, !dbg !3703
  %380 = call i1 @llvm.expect.i1(i1 %lt845, i1 false), !dbg !3703
  br i1 %380, label %panic846, label %checkok851, !dbg !3703

checkok851:                                       ; preds = %checkok842
  %ge852 = icmp sge i64 %sext844, 128, !dbg !3703
  %381 = call i1 @llvm.expect.i1(i1 %ge852, i1 false), !dbg !3703
  br i1 %381, label %panic853, label %checkok860, !dbg !3703

checkok860:                                       ; preds = %checkok851
  %ptroffset861 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext844, !dbg !3703
  %382 = load i32, ptr %k, align 4, !dbg !3704
  %sext862 = sext i32 %382 to i64, !dbg !3704
  %lt863 = icmp slt i64 %sext862, 0, !dbg !3704
  %383 = call i1 @llvm.expect.i1(i1 %lt863, i1 false), !dbg !3704
  br i1 %383, label %panic864, label %checkok869, !dbg !3704

checkok869:                                       ; preds = %checkok860
  %ge870 = icmp sge i64 %sext862, 128, !dbg !3704
  %384 = call i1 @llvm.expect.i1(i1 %ge870, i1 false), !dbg !3704
  br i1 %384, label %panic871, label %checkok878, !dbg !3704

checkok878:                                       ; preds = %checkok869
  %ptroffset879 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext862, !dbg !3704
  %385 = load i32, ptr %ptroffset879, align 4, !dbg !3704
  %386 = load i32, ptr %p10, align 4, !dbg !3705
  %zero880 = icmp eq i32 %386, 0, !dbg !3706
  %387 = call i1 @llvm.expect.i1(i1 %zero880, i1 false), !dbg !3706
  br i1 %387, label %panic881, label %checkok882, !dbg !3706

checkok882:                                       ; preds = %checkok878
  %sdiv = sdiv i32 %385, %386, !dbg !3706
  %388 = load i32, ptr %carry, align 4, !dbg !3707
  %add883 = add i32 %sdiv, %388, !dbg !3706
  store i32 %add883, ptr %ptroffset861, align 4, !dbg !3706
  %389 = load i32, ptr %p10, align 4, !dbg !3708
  %zero884 = icmp eq i32 %389, 0, !dbg !3709
  %390 = call i1 @llvm.expect.i1(i1 %zero884, i1 false), !dbg !3709
  br i1 %390, label %panic885, label %checkok886, !dbg !3709

checkok886:                                       ; preds = %checkok882
  %sdiv887 = sdiv i32 1000000000, %389, !dbg !3709
  %391 = load i32, ptr %tmp, align 4, !dbg !3710
  %mul888 = mul i32 %sdiv887, %391, !dbg !3709
  store i32 %mul888, ptr %carry, align 4, !dbg !3709
  %392 = load i32, ptr %k, align 4, !dbg !3711
  %393 = load i32, ptr %a, align 4, !dbg !3712
  %eq889 = icmp eq i32 %392, %393, !dbg !3711
  br i1 %eq889, label %and.rhs890, label %and.phi910, !dbg !3711

and.rhs890:                                       ; preds = %checkok886
  %394 = load i32, ptr %k, align 4, !dbg !3713
  %sext891 = sext i32 %394 to i64, !dbg !3713
  %lt892 = icmp slt i64 %sext891, 0, !dbg !3713
  %395 = call i1 @llvm.expect.i1(i1 %lt892, i1 false), !dbg !3713
  br i1 %395, label %panic893, label %checkok898, !dbg !3713

checkok898:                                       ; preds = %and.rhs890
  %ge899 = icmp sge i64 %sext891, 128, !dbg !3713
  %396 = call i1 @llvm.expect.i1(i1 %ge899, i1 false), !dbg !3713
  br i1 %396, label %panic900, label %checkok907, !dbg !3713

checkok907:                                       ; preds = %checkok898
  %ptroffset908 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext891, !dbg !3713
  %397 = load i32, ptr %ptroffset908, align 4, !dbg !3713
  %i2nb909 = icmp eq i32 %397, 0, !dbg !3713
  br label %and.phi910, !dbg !3713

and.phi910:                                       ; preds = %checkok907, %checkok886
  %val911 = phi i1 [ false, %checkok886 ], [ %i2nb909, %checkok907 ], !dbg !3713
  br i1 %val911, label %if.then912, label %if.exit916, !dbg !3713

if.then912:                                       ; preds = %and.phi910
  %398 = load i32, ptr %a, align 4, !dbg !3714
  %add913 = add i32 %398, 1, !dbg !3714
  %and914 = and i32 %add913, 127, !dbg !3714
  store i32 %and914, ptr %a, align 4, !dbg !3714
  %399 = load i64, ptr %rp707, align 8, !dbg !3716
  %sub915 = sub i64 %399, 9, !dbg !3716
  store i64 %sub915, ptr %rp707, align 8, !dbg !3716
  br label %if.exit916, !dbg !3716

if.exit916:                                       ; preds = %if.then912, %and.phi910
  %400 = load i32, ptr %k, align 4, !dbg !3717
  %add917 = add i32 %400, 1, !dbg !3717
  store i32 %add917, ptr %k, align 4, !dbg !3717
  br label %loop.cond819, !dbg !3717

loop.exit918:                                     ; preds = %loop.cond819
  %401 = load i32, ptr %carry, align 4, !dbg !3718
  %i2b919 = icmp ne i32 %401, 0, !dbg !3718
  br i1 %i2b919, label %if.then920, label %if.exit940, !dbg !3718

if.then920:                                       ; preds = %loop.exit918
  %402 = load i32, ptr %z, align 4, !dbg !3719
  %add921 = add i32 %402, 1, !dbg !3719
  store i32 %add921, ptr %z, align 4, !dbg !3719
  %sext922 = sext i32 %402 to i64, !dbg !3719
  %lt923 = icmp slt i64 %sext922, 0, !dbg !3719
  %403 = call i1 @llvm.expect.i1(i1 %lt923, i1 false), !dbg !3719
  br i1 %403, label %panic924, label %checkok929, !dbg !3719

checkok929:                                       ; preds = %if.then920
  %ge930 = icmp sge i64 %sext922, 128, !dbg !3719
  %404 = call i1 @llvm.expect.i1(i1 %ge930, i1 false), !dbg !3719
  br i1 %404, label %panic931, label %checkok938, !dbg !3719

checkok938:                                       ; preds = %checkok929
  %ptroffset939 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext922, !dbg !3719
  %405 = load i32, ptr %carry, align 4, !dbg !3720
  store i32 %405, ptr %ptroffset939, align 4, !dbg !3720
  br label %if.exit940, !dbg !3720

if.exit940:                                       ; preds = %checkok938, %loop.exit918
  %406 = load i64, ptr %rp707, align 8, !dbg !3721
  %407 = load i64, ptr %rpm9, align 8, !dbg !3722
  %sub941 = sub i64 9, %407, !dbg !3723
  %add942 = add i64 %406, %sub941, !dbg !3721
  store i64 %add942, ptr %rp707, align 8, !dbg !3721
  br label %if.exit943, !dbg !3721

if.exit943:                                       ; preds = %if.exit940, %if.exit793
  br label %loop.cond944, !dbg !3724

loop.cond944:                                     ; preds = %if.exit1149, %if.exit943
  %408 = load i64, ptr %rp707, align 8, !dbg !3725
  %lt945 = icmp slt i64 %408, 18, !dbg !3725
  br i1 %lt945, label %or.phi970, label %or.rhs946, !dbg !3725

or.rhs946:                                        ; preds = %loop.cond944
  %409 = load i64, ptr %rp707, align 8, !dbg !3727
  %eq947 = icmp eq i64 %409, 18, !dbg !3727
  br i1 %eq947, label %and.rhs948, label %and.phi968, !dbg !3727

and.rhs948:                                       ; preds = %or.rhs946
  %410 = load i32, ptr %a, align 4, !dbg !3728
  %sext949 = sext i32 %410 to i64, !dbg !3728
  %lt950 = icmp slt i64 %sext949, 0, !dbg !3728
  %411 = call i1 @llvm.expect.i1(i1 %lt950, i1 false), !dbg !3728
  br i1 %411, label %panic951, label %checkok956, !dbg !3728

checkok956:                                       ; preds = %and.rhs948
  %ge957 = icmp sge i64 %sext949, 128, !dbg !3728
  %412 = call i1 @llvm.expect.i1(i1 %ge957, i1 false), !dbg !3728
  br i1 %412, label %panic958, label %checkok965, !dbg !3728

checkok965:                                       ; preds = %checkok956
  %ptroffset966 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext949, !dbg !3728
  %413 = load i32, ptr %ptroffset966, align 4, !dbg !3728
  %lt967 = icmp ult i32 %413, 9007199, !dbg !3729
  br label %and.phi968, !dbg !3729

and.phi968:                                       ; preds = %checkok965, %or.rhs946
  %val969 = phi i1 [ false, %or.rhs946 ], [ %lt967, %checkok965 ], !dbg !3729
  br label %or.phi970, !dbg !3729

or.phi970:                                        ; preds = %and.phi968, %loop.cond944
  %val971 = phi i1 [ true, %loop.cond944 ], [ %val969, %and.phi968 ], !dbg !3729
  br i1 %val971, label %loop.body972, label %loop.exit1150, !dbg !3729

loop.body972:                                     ; preds = %or.phi970
    #dbg_declare(ptr %carry973, !3730, !DIExpression(), !3732)
  store i32 0, ptr %carry973, align 4, !dbg !3733
  %414 = load i32, ptr %e2706, align 4, !dbg !3734
  %sub974 = sub i32 %414, 29, !dbg !3734
  store i32 %sub974, ptr %e2706, align 4, !dbg !3734
  %415 = load i32, ptr %z, align 4, !dbg !3735
  %sub975 = sub i32 %415, 1, !dbg !3735
  %and976 = and i32 %sub975, 127, !dbg !3735
  store i32 %and976, ptr %k, align 4, !dbg !3735
  br label %loop.body977, !dbg !3735

loop.body977:                                     ; preds = %if.exit1078, %loop.body972
    #dbg_declare(ptr %tmp978, !3737, !DIExpression(), !3739)
  %416 = load i32, ptr %k, align 4, !dbg !3740
  %sext979 = sext i32 %416 to i64, !dbg !3740
  %lt980 = icmp slt i64 %sext979, 0, !dbg !3740
  %417 = call i1 @llvm.expect.i1(i1 %lt980, i1 false), !dbg !3740
  br i1 %417, label %panic981, label %checkok986, !dbg !3740

checkok986:                                       ; preds = %loop.body977
  %ge987 = icmp sge i64 %sext979, 128, !dbg !3740
  %418 = call i1 @llvm.expect.i1(i1 %ge987, i1 false), !dbg !3740
  br i1 %418, label %panic988, label %checkok995, !dbg !3740

checkok995:                                       ; preds = %checkok986
  %ptroffset996 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext979, !dbg !3740
  %419 = load i32, ptr %ptroffset996, align 4, !dbg !3740
  %zext997 = zext i32 %419 to i64, !dbg !3740
  %shl = shl i64 %zext997, 29, !dbg !3741
  %420 = freeze i64 %shl, !dbg !3741
  %421 = load i32, ptr %carry973, align 4, !dbg !3742
  %zext998 = zext i32 %421 to i64, !dbg !3742
  %add999 = add i64 %420, %zext998, !dbg !3741
  store i64 %add999, ptr %tmp978, align 8, !dbg !3741
  %422 = load i64, ptr %tmp978, align 8, !dbg !3743
  %lt1000 = icmp ult i64 1000000000, %422, !dbg !3743
  br i1 %lt1000, label %if.then1001, label %if.else1024, !dbg !3743

if.then1001:                                      ; preds = %checkok995
  %423 = load i64, ptr %tmp978, align 8, !dbg !3744
  %sdiv1002 = sdiv i64 %423, 1000000000, !dbg !3746
  %trunc1003 = trunc i64 %sdiv1002 to i32, !dbg !3746
  store i32 %trunc1003, ptr %carry973, align 4, !dbg !3746
  %424 = load i32, ptr %k, align 4, !dbg !3747
  %sext1004 = sext i32 %424 to i64, !dbg !3747
  %lt1005 = icmp slt i64 %sext1004, 0, !dbg !3747
  %425 = call i1 @llvm.expect.i1(i1 %lt1005, i1 false), !dbg !3747
  br i1 %425, label %panic1006, label %checkok1011, !dbg !3747

checkok1011:                                      ; preds = %if.then1001
  %ge1012 = icmp sge i64 %sext1004, 128, !dbg !3747
  %426 = call i1 @llvm.expect.i1(i1 %ge1012, i1 false), !dbg !3747
  br i1 %426, label %panic1013, label %checkok1020, !dbg !3747

checkok1020:                                      ; preds = %checkok1011
  %ptroffset1021 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1004, !dbg !3747
  %427 = load i64, ptr %tmp978, align 8, !dbg !3748
  %smod1022 = srem i64 %427, 1000000000, !dbg !3749
  %trunc1023 = trunc i64 %smod1022 to i32, !dbg !3749
  store i32 %trunc1023, ptr %ptroffset1021, align 4, !dbg !3749
  br label %if.exit1044, !dbg !3749

if.else1024:                                      ; preds = %checkok995
  store i32 0, ptr %carry973, align 4, !dbg !3750
  %428 = load i32, ptr %k, align 4, !dbg !3752
  %sext1025 = sext i32 %428 to i64, !dbg !3752
  %lt1026 = icmp slt i64 %sext1025, 0, !dbg !3752
  %429 = call i1 @llvm.expect.i1(i1 %lt1026, i1 false), !dbg !3752
  br i1 %429, label %panic1027, label %checkok1032, !dbg !3752

checkok1032:                                      ; preds = %if.else1024
  %ge1033 = icmp sge i64 %sext1025, 128, !dbg !3752
  %430 = call i1 @llvm.expect.i1(i1 %ge1033, i1 false), !dbg !3752
  br i1 %430, label %panic1034, label %checkok1041, !dbg !3752

checkok1041:                                      ; preds = %checkok1032
  %ptroffset1042 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1025, !dbg !3752
  %431 = load i64, ptr %tmp978, align 8, !dbg !3753
  %trunc1043 = trunc i64 %431 to i32, !dbg !3753
  store i32 %trunc1043, ptr %ptroffset1042, align 4, !dbg !3753
  br label %if.exit1044, !dbg !3753

if.exit1044:                                      ; preds = %checkok1041, %checkok1020
  %432 = load i32, ptr %k, align 4, !dbg !3754
  %433 = load i32, ptr %z, align 4, !dbg !3755
  %sub1045 = sub i32 %433, 1, !dbg !3755
  %and1046 = and i32 %sub1045, 127, !dbg !3755
  %eq1047 = icmp eq i32 %432, %and1046, !dbg !3754
  br i1 %eq1047, label %and.rhs1048, label %and.phi1050, !dbg !3754

and.rhs1048:                                      ; preds = %if.exit1044
  %434 = load i32, ptr %k, align 4, !dbg !3756
  %435 = load i32, ptr %a, align 4, !dbg !3757
  %neq1049 = icmp ne i32 %434, %435, !dbg !3756
  br label %and.phi1050, !dbg !3756

and.phi1050:                                      ; preds = %and.rhs1048, %if.exit1044
  %val1051 = phi i1 [ false, %if.exit1044 ], [ %neq1049, %and.rhs1048 ], !dbg !3756
  br i1 %val1051, label %and.rhs1052, label %and.phi1072, !dbg !3756

and.rhs1052:                                      ; preds = %and.phi1050
  %436 = load i32, ptr %k, align 4, !dbg !3758
  %sext1053 = sext i32 %436 to i64, !dbg !3758
  %lt1054 = icmp slt i64 %sext1053, 0, !dbg !3758
  %437 = call i1 @llvm.expect.i1(i1 %lt1054, i1 false), !dbg !3758
  br i1 %437, label %panic1055, label %checkok1060, !dbg !3758

checkok1060:                                      ; preds = %and.rhs1052
  %ge1061 = icmp sge i64 %sext1053, 128, !dbg !3758
  %438 = call i1 @llvm.expect.i1(i1 %ge1061, i1 false), !dbg !3758
  br i1 %438, label %panic1062, label %checkok1069, !dbg !3758

checkok1069:                                      ; preds = %checkok1060
  %ptroffset1070 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1053, !dbg !3758
  %439 = load i32, ptr %ptroffset1070, align 4, !dbg !3758
  %i2nb1071 = icmp eq i32 %439, 0, !dbg !3758
  br label %and.phi1072, !dbg !3758

and.phi1072:                                      ; preds = %checkok1069, %and.phi1050
  %val1073 = phi i1 [ false, %and.phi1050 ], [ %i2nb1071, %checkok1069 ], !dbg !3758
  br i1 %val1073, label %if.then1074, label %if.exit1075, !dbg !3758

if.then1074:                                      ; preds = %and.phi1072
  %440 = load i32, ptr %k, align 4, !dbg !3759
  store i32 %440, ptr %z, align 4, !dbg !3759
  br label %if.exit1075, !dbg !3759

if.exit1075:                                      ; preds = %if.then1074, %and.phi1072
  %441 = load i32, ptr %k, align 4, !dbg !3760
  %442 = load i32, ptr %a, align 4, !dbg !3761
  %eq1076 = icmp eq i32 %441, %442, !dbg !3760
  br i1 %eq1076, label %if.then1077, label %if.exit1078, !dbg !3760

if.then1077:                                      ; preds = %if.exit1075
  br label %loop.exit1081, !dbg !3762

if.exit1078:                                      ; preds = %if.exit1075
  %443 = load i32, ptr %k, align 4, !dbg !3763
  %sub1079 = sub i32 %443, 1, !dbg !3763
  %and1080 = and i32 %sub1079, 127, !dbg !3763
  store i32 %and1080, ptr %k, align 4, !dbg !3763
  br label %loop.body977, !dbg !3763

loop.exit1081:                                    ; preds = %if.then1077
  %444 = load i32, ptr %carry973, align 4, !dbg !3764
  %i2b1082 = icmp ne i32 %444, 0, !dbg !3764
  br i1 %i2b1082, label %if.then1083, label %if.exit1149, !dbg !3764

if.then1083:                                      ; preds = %loop.exit1081
  %445 = load i64, ptr %rp707, align 8, !dbg !3765
  %add1084 = add i64 %445, 9, !dbg !3765
  store i64 %add1084, ptr %rp707, align 8, !dbg !3765
  %446 = load i32, ptr %a, align 4, !dbg !3767
  %sub1085 = sub i32 %446, 1, !dbg !3767
  %and1086 = and i32 %sub1085, 127, !dbg !3767
  store i32 %and1086, ptr %a, align 4, !dbg !3767
  %447 = load i32, ptr %a, align 4, !dbg !3768
  %448 = load i32, ptr %z, align 4, !dbg !3769
  %eq1087 = icmp eq i32 %447, %448, !dbg !3768
  br i1 %eq1087, label %if.then1088, label %if.exit1130, !dbg !3768

if.then1088:                                      ; preds = %if.then1083
  %449 = load i32, ptr %z, align 4, !dbg !3770
  %sub1089 = sub i32 %449, 1, !dbg !3770
  %and1090 = and i32 %sub1089, 127, !dbg !3770
  store i32 %and1090, ptr %z, align 4, !dbg !3770
  %450 = load i32, ptr %z, align 4, !dbg !3772
  %sub1091 = sub i32 %450, 1, !dbg !3772
  %and1092 = and i32 %sub1091, 127, !dbg !3772
  %sext1093 = sext i32 %and1092 to i64, !dbg !3772
  %lt1094 = icmp slt i64 %sext1093, 0, !dbg !3772
  %451 = call i1 @llvm.expect.i1(i1 %lt1094, i1 false), !dbg !3772
  br i1 %451, label %panic1095, label %checkok1100, !dbg !3772

checkok1100:                                      ; preds = %if.then1088
  %ge1101 = icmp sge i64 %sext1093, 128, !dbg !3772
  %452 = call i1 @llvm.expect.i1(i1 %ge1101, i1 false), !dbg !3772
  br i1 %452, label %panic1102, label %checkok1109, !dbg !3772

checkok1109:                                      ; preds = %checkok1100
  %ptroffset1110 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1093, !dbg !3772
  %453 = load i32, ptr %ptroffset1110, align 4, !dbg !3772
  %454 = load i32, ptr %z, align 4, !dbg !3773
  %sext1111 = sext i32 %454 to i64, !dbg !3773
  %lt1112 = icmp slt i64 %sext1111, 0, !dbg !3773
  %455 = call i1 @llvm.expect.i1(i1 %lt1112, i1 false), !dbg !3773
  br i1 %455, label %panic1113, label %checkok1118, !dbg !3773

checkok1118:                                      ; preds = %checkok1109
  %ge1119 = icmp sge i64 %sext1111, 128, !dbg !3773
  %456 = call i1 @llvm.expect.i1(i1 %ge1119, i1 false), !dbg !3773
  br i1 %456, label %panic1120, label %checkok1127, !dbg !3773

checkok1127:                                      ; preds = %checkok1118
  %ptroffset1128 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1111, !dbg !3773
  %457 = load i32, ptr %ptroffset1128, align 4, !dbg !3773
  %or1129 = or i32 %453, %457, !dbg !3774
  store i32 %or1129, ptr %ptroffset1110, align 4, !dbg !3774
  br label %if.exit1130, !dbg !3774

if.exit1130:                                      ; preds = %checkok1127, %if.then1083
  %458 = load i32, ptr %a, align 4, !dbg !3775
  %sext1131 = sext i32 %458 to i64, !dbg !3775
  %lt1132 = icmp slt i64 %sext1131, 0, !dbg !3775
  %459 = call i1 @llvm.expect.i1(i1 %lt1132, i1 false), !dbg !3775
  br i1 %459, label %panic1133, label %checkok1138, !dbg !3775

checkok1138:                                      ; preds = %if.exit1130
  %ge1139 = icmp sge i64 %sext1131, 128, !dbg !3775
  %460 = call i1 @llvm.expect.i1(i1 %ge1139, i1 false), !dbg !3775
  br i1 %460, label %panic1140, label %checkok1147, !dbg !3775

checkok1147:                                      ; preds = %checkok1138
  %ptroffset1148 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1131, !dbg !3775
  %461 = load i32, ptr %carry973, align 4, !dbg !3776
  store i32 %461, ptr %ptroffset1148, align 4, !dbg !3776
  br label %if.exit1149, !dbg !3776

if.exit1149:                                      ; preds = %checkok1147, %loop.exit1081
  br label %loop.cond944, !dbg !3776

loop.exit1150:                                    ; preds = %or.phi970
  br label %loop.body1151, !dbg !3777

loop.body1151:                                    ; preds = %if.exit1434, %loop.exit1150
    #dbg_declare(ptr %carry1152, !3778, !DIExpression(), !3781)
  store i32 0, ptr %carry1152, align 4, !dbg !3782
    #dbg_declare(ptr %sh, !3783, !DIExpression(), !3784)
  store i32 1, ptr %sh, align 4, !dbg !3785
    #dbg_declare(ptr %i, !3786, !DIExpression(), !3787)
  store i32 0, ptr %i, align 4, !dbg !3787
  store i32 0, ptr %i, align 4, !dbg !3788
  br label %loop.cond1153, !dbg !3788

loop.cond1153:                                    ; preds = %if.exit1241, %loop.body1151
  %462 = load i32, ptr %i, align 4, !dbg !3790
  %lt1154 = icmp slt i32 %462, 2, !dbg !3790
  br i1 %lt1154, label %loop.body1155, label %loop.exit1243, !dbg !3790

loop.body1155:                                    ; preds = %loop.cond1153
  %463 = load i32, ptr %a, align 4, !dbg !3791
  %464 = load i32, ptr %i, align 4, !dbg !3793
  %add1156 = add i32 %463, %464, !dbg !3791
  %and1157 = and i32 %add1156, 127, !dbg !3791
  store i32 %and1157, ptr %k, align 4, !dbg !3791
  %465 = load i32, ptr %k, align 4, !dbg !3794
  %466 = load i32, ptr %z, align 4, !dbg !3795
  %eq1158 = icmp eq i32 %465, %466, !dbg !3794
  br i1 %eq1158, label %or.phi1197, label %or.rhs1159, !dbg !3794

or.rhs1159:                                       ; preds = %loop.body1155
  %467 = load i32, ptr %k, align 4, !dbg !3796
  %sext1160 = sext i32 %467 to i64, !dbg !3796
  %lt1161 = icmp slt i64 %sext1160, 0, !dbg !3796
  %468 = call i1 @llvm.expect.i1(i1 %lt1161, i1 false), !dbg !3796
  br i1 %468, label %panic1162, label %checkok1167, !dbg !3796

checkok1167:                                      ; preds = %or.rhs1159
  %ge1168 = icmp sge i64 %sext1160, 128, !dbg !3796
  %469 = call i1 @llvm.expect.i1(i1 %ge1168, i1 false), !dbg !3796
  br i1 %469, label %panic1169, label %checkok1176, !dbg !3796

checkok1176:                                      ; preds = %checkok1167
  %ptroffset1177 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1160, !dbg !3796
  %470 = load i32, ptr %ptroffset1177, align 4, !dbg !3796
  %471 = load i32, ptr %i, align 4, !dbg !3797
  %sext1178 = sext i32 %471 to i64, !dbg !3797
  %lt1179 = icmp slt i64 %sext1178, 0, !dbg !3797
  %472 = call i1 @llvm.expect.i1(i1 %lt1179, i1 false), !dbg !3797
  br i1 %472, label %panic1180, label %checkok1185, !dbg !3797

checkok1185:                                      ; preds = %checkok1176
  %ge1186 = icmp sge i64 %sext1178, 2, !dbg !3797
  %473 = call i1 @llvm.expect.i1(i1 %ge1186, i1 false), !dbg !3797
  br i1 %473, label %panic1187, label %checkok1194, !dbg !3797

checkok1194:                                      ; preds = %checkok1185
  %ptroffset1195 = getelementptr inbounds [4 x i8], ptr @to_float.TH, i64 %sext1178, !dbg !3797
  %474 = load i32, ptr %ptroffset1195, align 4, !dbg !3797
  %lt1196 = icmp ult i32 %470, %474, !dbg !3798
  br label %or.phi1197, !dbg !3798

or.phi1197:                                       ; preds = %checkok1194, %loop.body1155
  %val1198 = phi i1 [ true, %loop.body1155 ], [ %lt1196, %checkok1194 ], !dbg !3798
  br i1 %val1198, label %if.then1199, label %if.exit1200, !dbg !3798

if.then1199:                                      ; preds = %or.phi1197
  store i32 2, ptr %i, align 4, !dbg !3799
  br label %loop.exit1243, !dbg !3801

if.exit1200:                                      ; preds = %or.phi1197
  %475 = load i32, ptr %a, align 4, !dbg !3802
  %476 = load i32, ptr %i, align 4, !dbg !3803
  %add1201 = add i32 %475, %476, !dbg !3802
  %and1202 = and i32 %add1201, 127, !dbg !3802
  %sext1203 = sext i32 %and1202 to i64, !dbg !3802
  %lt1204 = icmp slt i64 %sext1203, 0, !dbg !3802
  %477 = call i1 @llvm.expect.i1(i1 %lt1204, i1 false), !dbg !3802
  br i1 %477, label %panic1205, label %checkok1210, !dbg !3802

checkok1210:                                      ; preds = %if.exit1200
  %ge1211 = icmp sge i64 %sext1203, 128, !dbg !3802
  %478 = call i1 @llvm.expect.i1(i1 %ge1211, i1 false), !dbg !3802
  br i1 %478, label %panic1212, label %checkok1219, !dbg !3802

checkok1219:                                      ; preds = %checkok1210
  %ptroffset1220 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1203, !dbg !3802
  %479 = load i32, ptr %ptroffset1220, align 4, !dbg !3802
  %480 = load i32, ptr %i, align 4, !dbg !3804
  %sext1221 = sext i32 %480 to i64, !dbg !3804
  %lt1222 = icmp slt i64 %sext1221, 0, !dbg !3804
  %481 = call i1 @llvm.expect.i1(i1 %lt1222, i1 false), !dbg !3804
  br i1 %481, label %panic1223, label %checkok1228, !dbg !3804

checkok1228:                                      ; preds = %checkok1219
  %ge1229 = icmp sge i64 %sext1221, 2, !dbg !3804
  %482 = call i1 @llvm.expect.i1(i1 %ge1229, i1 false), !dbg !3804
  br i1 %482, label %panic1230, label %checkok1237, !dbg !3804

checkok1237:                                      ; preds = %checkok1228
  %ptroffset1238 = getelementptr inbounds [4 x i8], ptr @to_float.TH, i64 %sext1221, !dbg !3804
  %483 = load i32, ptr %ptroffset1238, align 4, !dbg !3804
  %gt1239 = icmp ugt i32 %479, %483, !dbg !3805
  br i1 %gt1239, label %if.then1240, label %if.exit1241, !dbg !3805

if.then1240:                                      ; preds = %checkok1237
  br label %loop.exit1243, !dbg !3806

if.exit1241:                                      ; preds = %checkok1237
  %484 = load i32, ptr %i, align 4, !dbg !3807
  %add1242 = add i32 %484, 1, !dbg !3807
  store i32 %add1242, ptr %i, align 4, !dbg !3807
  br label %loop.cond1153, !dbg !3807

loop.exit1243:                                    ; preds = %if.then1240, %if.then1199, %loop.cond1153
  %485 = load i32, ptr %i, align 4, !dbg !3808
  %eq1244 = icmp eq i32 %485, 2, !dbg !3808
  br i1 %eq1244, label %and.rhs1245, label %and.phi1247, !dbg !3808

and.rhs1245:                                      ; preds = %loop.exit1243
  %486 = load i64, ptr %rp707, align 8, !dbg !3809
  %eq1246 = icmp eq i64 %486, 18, !dbg !3809
  br label %and.phi1247, !dbg !3809

and.phi1247:                                      ; preds = %and.rhs1245, %loop.exit1243
  %val1248 = phi i1 [ false, %loop.exit1243 ], [ %eq1246, %and.rhs1245 ], !dbg !3809
  br i1 %val1248, label %if.then1249, label %if.exit1250, !dbg !3809

if.then1249:                                      ; preds = %and.phi1247
  br label %loop.exit1435, !dbg !3810

if.exit1250:                                      ; preds = %and.phi1247
  %487 = load i64, ptr %rp707, align 8, !dbg !3811
  %gt1251 = icmp sgt i64 %487, 27, !dbg !3811
  br i1 %gt1251, label %if.then1252, label %if.exit1253, !dbg !3811

if.then1252:                                      ; preds = %if.exit1250
  store i32 9, ptr %sh, align 4, !dbg !3812
  br label %if.exit1253, !dbg !3812

if.exit1253:                                      ; preds = %if.then1252, %if.exit1250
  %488 = load i32, ptr %e2706, align 4, !dbg !3813
  %489 = load i32, ptr %sh, align 4, !dbg !3814
  %add1254 = add i32 %488, %489, !dbg !3813
  store i32 %add1254, ptr %e2706, align 4, !dbg !3813
  %490 = load i32, ptr %a, align 4, !dbg !3815
  store i32 %490, ptr %k, align 4, !dbg !3815
  br label %loop.cond1255, !dbg !3815

loop.cond1255:                                    ; preds = %if.exit1381, %if.exit1253
  %491 = load i32, ptr %k, align 4, !dbg !3817
  %492 = load i32, ptr %z, align 4, !dbg !3818
  %neq1256 = icmp ne i32 %491, %492, !dbg !3817
  br i1 %neq1256, label %loop.body1257, label %loop.exit1384, !dbg !3817

loop.body1257:                                    ; preds = %loop.cond1255
    #dbg_declare(ptr %tmp1258, !3819, !DIExpression(), !3821)
  %493 = load i32, ptr %k, align 4, !dbg !3822
  %sext1259 = sext i32 %493 to i64, !dbg !3822
  %lt1260 = icmp slt i64 %sext1259, 0, !dbg !3822
  %494 = call i1 @llvm.expect.i1(i1 %lt1260, i1 false), !dbg !3822
  br i1 %494, label %panic1261, label %checkok1266, !dbg !3822

checkok1266:                                      ; preds = %loop.body1257
  %ge1267 = icmp sge i64 %sext1259, 128, !dbg !3822
  %495 = call i1 @llvm.expect.i1(i1 %ge1267, i1 false), !dbg !3822
  br i1 %495, label %panic1268, label %checkok1275, !dbg !3822

checkok1275:                                      ; preds = %checkok1266
  %ptroffset1276 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1259, !dbg !3822
  %496 = load i32, ptr %ptroffset1276, align 4, !dbg !3822
  %497 = load i32, ptr %sh, align 4, !dbg !3823
  %shift_underflow = icmp slt i32 %497, 0, !dbg !3824
  %498 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !3824
  br i1 %498, label %panic1277, label %checkok1282, !dbg !3824

checkok1282:                                      ; preds = %checkok1275
  %shift_exceeds1283 = icmp sge i32 %497, 32, !dbg !3824
  %499 = call i1 @llvm.expect.i1(i1 %shift_exceeds1283, i1 false), !dbg !3824
  br i1 %499, label %panic1284, label %checkok1289, !dbg !3824

checkok1289:                                      ; preds = %checkok1282
  %shl1290 = shl i32 1, %497, !dbg !3824
  %500 = freeze i32 %shl1290, !dbg !3824
  %sub1291 = sub i32 %500, 1, !dbg !3824
  %and1292 = and i32 %496, %sub1291, !dbg !3825
  store i32 %and1292, ptr %tmp1258, align 4, !dbg !3825
  %501 = load i32, ptr %k, align 4, !dbg !3826
  %sext1293 = sext i32 %501 to i64, !dbg !3826
  %lt1294 = icmp slt i64 %sext1293, 0, !dbg !3826
  %502 = call i1 @llvm.expect.i1(i1 %lt1294, i1 false), !dbg !3826
  br i1 %502, label %panic1295, label %checkok1300, !dbg !3826

checkok1300:                                      ; preds = %checkok1289
  %ge1301 = icmp sge i64 %sext1293, 128, !dbg !3826
  %503 = call i1 @llvm.expect.i1(i1 %ge1301, i1 false), !dbg !3826
  br i1 %503, label %panic1302, label %checkok1309, !dbg !3826

checkok1309:                                      ; preds = %checkok1300
  %ptroffset1310 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1293, !dbg !3826
  %504 = load i32, ptr %k, align 4, !dbg !3827
  %sext1311 = sext i32 %504 to i64, !dbg !3827
  %lt1312 = icmp slt i64 %sext1311, 0, !dbg !3827
  %505 = call i1 @llvm.expect.i1(i1 %lt1312, i1 false), !dbg !3827
  br i1 %505, label %panic1313, label %checkok1318, !dbg !3827

checkok1318:                                      ; preds = %checkok1309
  %ge1319 = icmp sge i64 %sext1311, 128, !dbg !3827
  %506 = call i1 @llvm.expect.i1(i1 %ge1319, i1 false), !dbg !3827
  br i1 %506, label %panic1320, label %checkok1327, !dbg !3827

checkok1327:                                      ; preds = %checkok1318
  %ptroffset1328 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1311, !dbg !3827
  %507 = load i32, ptr %ptroffset1328, align 4, !dbg !3827
  %508 = load i32, ptr %sh, align 4, !dbg !3828
  %shift_exceeds1329 = icmp uge i32 %508, 32, !dbg !3829
  %509 = call i1 @llvm.expect.i1(i1 %shift_exceeds1329, i1 false), !dbg !3829
  br i1 %509, label %panic1330, label %checkok1335, !dbg !3829

checkok1335:                                      ; preds = %checkok1327
  %lshr1336 = lshr i32 %507, %508, !dbg !3829
  %510 = freeze i32 %lshr1336, !dbg !3829
  %511 = load i32, ptr %carry1152, align 4, !dbg !3830
  %add1337 = add i32 %510, %511, !dbg !3829
  store i32 %add1337, ptr %ptroffset1310, align 4, !dbg !3829
  %512 = load i32, ptr %sh, align 4, !dbg !3831
  %shift_underflow1338 = icmp slt i32 %512, 0, !dbg !3832
  %513 = call i1 @llvm.expect.i1(i1 %shift_underflow1338, i1 false), !dbg !3832
  br i1 %513, label %panic1339, label %checkok1344, !dbg !3832

checkok1344:                                      ; preds = %checkok1335
  %shift_exceeds1345 = icmp sge i32 %512, 32, !dbg !3832
  %514 = call i1 @llvm.expect.i1(i1 %shift_exceeds1345, i1 false), !dbg !3832
  br i1 %514, label %panic1346, label %checkok1351, !dbg !3832

checkok1351:                                      ; preds = %checkok1344
  %ashr = ashr i32 1000000000, %512, !dbg !3832
  %515 = freeze i32 %ashr, !dbg !3832
  %516 = load i32, ptr %tmp1258, align 4, !dbg !3833
  %mul1352 = mul i32 %515, %516, !dbg !3832
  store i32 %mul1352, ptr %carry1152, align 4, !dbg !3832
  %517 = load i32, ptr %k, align 4, !dbg !3834
  %518 = load i32, ptr %a, align 4, !dbg !3835
  %eq1353 = icmp eq i32 %517, %518, !dbg !3834
  br i1 %eq1353, label %and.rhs1354, label %and.phi1374, !dbg !3834

and.rhs1354:                                      ; preds = %checkok1351
  %519 = load i32, ptr %k, align 4, !dbg !3836
  %sext1355 = sext i32 %519 to i64, !dbg !3836
  %lt1356 = icmp slt i64 %sext1355, 0, !dbg !3836
  %520 = call i1 @llvm.expect.i1(i1 %lt1356, i1 false), !dbg !3836
  br i1 %520, label %panic1357, label %checkok1362, !dbg !3836

checkok1362:                                      ; preds = %and.rhs1354
  %ge1363 = icmp sge i64 %sext1355, 128, !dbg !3836
  %521 = call i1 @llvm.expect.i1(i1 %ge1363, i1 false), !dbg !3836
  br i1 %521, label %panic1364, label %checkok1371, !dbg !3836

checkok1371:                                      ; preds = %checkok1362
  %ptroffset1372 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1355, !dbg !3836
  %522 = load i32, ptr %ptroffset1372, align 4, !dbg !3836
  %i2nb1373 = icmp eq i32 %522, 0, !dbg !3836
  br label %and.phi1374, !dbg !3836

and.phi1374:                                      ; preds = %checkok1371, %checkok1351
  %val1375 = phi i1 [ false, %checkok1351 ], [ %i2nb1373, %checkok1371 ], !dbg !3836
  br i1 %val1375, label %if.then1376, label %if.exit1381, !dbg !3836

if.then1376:                                      ; preds = %and.phi1374
  %523 = load i32, ptr %a, align 4, !dbg !3837
  %add1377 = add i32 %523, 1, !dbg !3837
  %and1378 = and i32 %add1377, 127, !dbg !3837
  store i32 %and1378, ptr %a, align 4, !dbg !3837
  %524 = load i32, ptr %i, align 4, !dbg !3839
  %sub1379 = sub i32 %524, 1, !dbg !3839
  store i32 %sub1379, ptr %i, align 4, !dbg !3839
  %525 = load i64, ptr %rp707, align 8, !dbg !3840
  %sub1380 = sub i64 %525, 9, !dbg !3840
  store i64 %sub1380, ptr %rp707, align 8, !dbg !3840
  br label %if.exit1381, !dbg !3840

if.exit1381:                                      ; preds = %if.then1376, %and.phi1374
  %526 = load i32, ptr %k, align 4, !dbg !3841
  %add1382 = add i32 %526, 1, !dbg !3841
  %and1383 = and i32 %add1382, 127, !dbg !3841
  store i32 %and1383, ptr %k, align 4, !dbg !3841
  br label %loop.cond1255, !dbg !3841

loop.exit1384:                                    ; preds = %loop.cond1255
  %527 = load i32, ptr %carry1152, align 4, !dbg !3842
  %i2b1385 = icmp ne i32 %527, 0, !dbg !3842
  br i1 %i2b1385, label %if.then1386, label %if.exit1434, !dbg !3842

if.then1386:                                      ; preds = %loop.exit1384
  %528 = load i32, ptr %z, align 4, !dbg !3843
  %add1387 = add i32 %528, 1, !dbg !3843
  %and1388 = and i32 %add1387, 127, !dbg !3843
  %529 = load i32, ptr %a, align 4, !dbg !3845
  %neq1389 = icmp ne i32 %and1388, %529, !dbg !3843
  br i1 %neq1389, label %if.then1390, label %if.else1411, !dbg !3843

if.then1390:                                      ; preds = %if.then1386
  %530 = load i32, ptr %z, align 4, !dbg !3846
  %sext1391 = sext i32 %530 to i64, !dbg !3846
  %lt1392 = icmp slt i64 %sext1391, 0, !dbg !3846
  %531 = call i1 @llvm.expect.i1(i1 %lt1392, i1 false), !dbg !3846
  br i1 %531, label %panic1393, label %checkok1398, !dbg !3846

checkok1398:                                      ; preds = %if.then1390
  %ge1399 = icmp sge i64 %sext1391, 128, !dbg !3846
  %532 = call i1 @llvm.expect.i1(i1 %ge1399, i1 false), !dbg !3846
  br i1 %532, label %panic1400, label %checkok1407, !dbg !3846

checkok1407:                                      ; preds = %checkok1398
  %ptroffset1408 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1391, !dbg !3846
  %533 = load i32, ptr %carry1152, align 4, !dbg !3848
  store i32 %533, ptr %ptroffset1408, align 4, !dbg !3848
  %534 = load i32, ptr %z, align 4, !dbg !3849
  %add1409 = add i32 %534, 1, !dbg !3849
  %and1410 = and i32 %add1409, 127, !dbg !3849
  store i32 %and1410, ptr %z, align 4, !dbg !3849
  br label %if.exit1433, !dbg !3849

if.else1411:                                      ; preds = %if.then1386
  %535 = load i32, ptr %z, align 4, !dbg !3850
  %sub1412 = sub i32 %535, 1, !dbg !3850
  %and1413 = and i32 %sub1412, 127, !dbg !3850
  %sext1414 = sext i32 %and1413 to i64, !dbg !3850
  %lt1415 = icmp slt i64 %sext1414, 0, !dbg !3850
  %536 = call i1 @llvm.expect.i1(i1 %lt1415, i1 false), !dbg !3850
  br i1 %536, label %panic1416, label %checkok1421, !dbg !3850

checkok1421:                                      ; preds = %if.else1411
  %ge1422 = icmp sge i64 %sext1414, 128, !dbg !3850
  %537 = call i1 @llvm.expect.i1(i1 %ge1422, i1 false), !dbg !3850
  br i1 %537, label %panic1423, label %checkok1430, !dbg !3850

checkok1430:                                      ; preds = %checkok1421
  %ptroffset1431 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1414, !dbg !3850
  %538 = load i32, ptr %ptroffset1431, align 4, !dbg !3850
  %or1432 = or i32 %538, 1, !dbg !3852
  store i32 %or1432, ptr %ptroffset1431, align 4, !dbg !3852
  br label %if.exit1433, !dbg !3852

if.exit1433:                                      ; preds = %checkok1430, %checkok1407
  br label %if.exit1434, !dbg !3852

if.exit1434:                                      ; preds = %if.exit1433, %loop.exit1384
  br label %loop.body1151, !dbg !3852

loop.exit1435:                                    ; preds = %if.then1249
    #dbg_declare(ptr %y1436, !3853, !DIExpression(), !3854)
  store double 0.000000e+00, ptr %y1436, align 8, !dbg !3854
    #dbg_declare(ptr %i1437, !3855, !DIExpression(), !3856)
  store i32 0, ptr %i1437, align 4, !dbg !3856
  store i32 0, ptr %i1437, align 4, !dbg !3857
  br label %loop.cond1438, !dbg !3857

loop.cond1438:                                    ; preds = %checkok1486, %loop.exit1435
  %539 = load i32, ptr %i1437, align 4, !dbg !3859
  %lt1439 = icmp slt i32 %539, 2, !dbg !3859
  br i1 %lt1439, label %loop.body1440, label %loop.exit1491, !dbg !3859

loop.body1440:                                    ; preds = %loop.cond1438
  %540 = load i32, ptr %a, align 4, !dbg !3860
  %541 = load i32, ptr %i1437, align 4, !dbg !3862
  %add1441 = add i32 %540, %541, !dbg !3860
  %and1442 = and i32 %add1441, 127, !dbg !3860
  %542 = load i32, ptr %z, align 4, !dbg !3863
  %eq1443 = icmp eq i32 %and1442, %542, !dbg !3860
  br i1 %eq1443, label %if.then1444, label %if.exit1466, !dbg !3860

if.then1444:                                      ; preds = %loop.body1440
  %543 = load i32, ptr %z, align 4, !dbg !3864
  %add1445 = add i32 %543, 1, !dbg !3864
  %and1446 = and i32 %add1445, 127, !dbg !3864
  store i32 %and1446, ptr %z, align 4, !dbg !3864
  %sub1447 = sub i32 %and1446, 1, !dbg !3865
  %sext1448 = sext i32 %sub1447 to i64, !dbg !3865
  %lt1449 = icmp slt i64 %sext1448, 0, !dbg !3865
  %544 = call i1 @llvm.expect.i1(i1 %lt1449, i1 false), !dbg !3865
  br i1 %544, label %panic1450, label %checkok1455, !dbg !3865

checkok1455:                                      ; preds = %if.then1444
  %ge1456 = icmp sge i64 %sext1448, 128, !dbg !3865
  %545 = call i1 @llvm.expect.i1(i1 %ge1456, i1 false), !dbg !3865
  br i1 %545, label %panic1457, label %checkok1464, !dbg !3865

checkok1464:                                      ; preds = %checkok1455
  %ptroffset1465 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1448, !dbg !3865
  store i32 0, ptr %ptroffset1465, align 4, !dbg !3866
  br label %if.exit1466, !dbg !3866

if.exit1466:                                      ; preds = %checkok1464, %loop.body1440
  %546 = load double, ptr %y1436, align 8, !dbg !3867
  %fmul1467 = fmul double 1.000000e+09, %546, !dbg !3868
  %547 = load i32, ptr %a, align 4, !dbg !3869
  %548 = load i32, ptr %i1437, align 4, !dbg !3870
  %add1468 = add i32 %547, %548, !dbg !3869
  %and1469 = and i32 %add1468, 127, !dbg !3869
  %sext1470 = sext i32 %and1469 to i64, !dbg !3869
  %lt1471 = icmp slt i64 %sext1470, 0, !dbg !3869
  %549 = call i1 @llvm.expect.i1(i1 %lt1471, i1 false), !dbg !3869
  br i1 %549, label %panic1472, label %checkok1477, !dbg !3869

checkok1477:                                      ; preds = %if.exit1466
  %ge1478 = icmp sge i64 %sext1470, 128, !dbg !3869
  %550 = call i1 @llvm.expect.i1(i1 %ge1478, i1 false), !dbg !3869
  br i1 %550, label %panic1479, label %checkok1486, !dbg !3869

checkok1486:                                      ; preds = %checkok1477
  %ptroffset1487 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1470, !dbg !3869
  %551 = load i32, ptr %ptroffset1487, align 4, !dbg !3869
  %uifp1488 = uitofp i32 %551 to double, !dbg !3869
  %fadd1489 = fadd double %fmul1467, %uifp1488, !dbg !3868
  store double %fadd1489, ptr %y1436, align 8, !dbg !3868
  %552 = load i32, ptr %i1437, align 4, !dbg !3871
  %add1490 = add i32 %552, 1, !dbg !3871
  store i32 %add1490, ptr %i1437, align 4, !dbg !3871
  br label %loop.cond1438, !dbg !3871

loop.exit1491:                                    ; preds = %loop.cond1438
  %553 = load double, ptr %y1436, align 8, !dbg !3872
  %554 = load i32, ptr %sign382, align 4, !dbg !3873
  %sifp1492 = sitofp i32 %554 to double, !dbg !3873
  %fmul1493 = fmul double %553, %sifp1492, !dbg !3872
  store double %fmul1493, ptr %y1436, align 8, !dbg !3872
    #dbg_declare(ptr %denormal, !3874, !DIExpression(), !3875)
  store i8 0, ptr %denormal, align 1, !dbg !3875
    #dbg_declare(ptr %bits1494, !3876, !DIExpression(), !3877)
  store i32 24, ptr %bits1494, align 4, !dbg !3878
  %555 = load i32, ptr %bits1494, align 4, !dbg !3879
  %556 = load i32, ptr %e2706, align 4, !dbg !3880
  %add1495 = add i32 53, %556, !dbg !3881
  %sub1496 = sub i32 %add1495, -149, !dbg !3881
  %lt1497 = icmp slt i32 %sub1496, %555, !dbg !3879
  %check1498 = icmp slt i32 %555, 0, !dbg !3879
  %siui-lt1499 = or i1 %check1498, %lt1497, !dbg !3879
  br i1 %siui-lt1499, label %if.then1500, label %if.exit1506, !dbg !3879

if.then1500:                                      ; preds = %loop.exit1491
  %557 = load i32, ptr %e2706, align 4, !dbg !3882
  %add1501 = add i32 53, %557, !dbg !3884
  %sub1502 = sub i32 %add1501, -149, !dbg !3884
  store i32 %sub1502, ptr %bits1494, align 4, !dbg !3884
  %558 = load i32, ptr %bits1494, align 4, !dbg !3885
  %gt1503 = icmp ugt i32 0, %558, !dbg !3885
  br i1 %gt1503, label %if.then1504, label %if.exit1505, !dbg !3885

if.then1504:                                      ; preds = %if.then1500
  store i32 0, ptr %bits1494, align 4, !dbg !3886
  br label %if.exit1505, !dbg !3886

if.exit1505:                                      ; preds = %if.then1504, %if.then1500
  store i8 1, ptr %denormal, align 1, !dbg !3887
  br label %if.exit1506, !dbg !3887

if.exit1506:                                      ; preds = %if.exit1505, %loop.exit1491
    #dbg_declare(ptr %bias1507, !3888, !DIExpression(), !3889)
  store double 0.000000e+00, ptr %bias1507, align 8, !dbg !3889
    #dbg_declare(ptr %frac, !3890, !DIExpression(), !3891)
  store double 0.000000e+00, ptr %frac, align 8, !dbg !3891
  %559 = load i32, ptr %bits1494, align 4, !dbg !3892
  %gt1508 = icmp ugt i32 53, %559, !dbg !3892
  br i1 %gt1508, label %if.then1509, label %if.exit1526, !dbg !3892

if.then1509:                                      ; preds = %if.exit1506
  store double 1.000000e+00, ptr %x1510, align 8
  %560 = load i32, ptr %bits1494, align 4, !dbg !3893
  %sub1511 = sub i32 106, %560, !dbg !3895
  %sub1512 = sub i32 %sub1511, 1, !dbg !3895
  store i32 %sub1512, ptr %n1513, align 4
  %561 = load double, ptr %x1510, align 8, !dbg !3896
  %562 = load i32, ptr %n1513, align 4, !dbg !3896
  %563 = call double @scalbn(double %561, i32 %562), !dbg !3899
  store double %563, ptr %mag1514, align 8
  %564 = load double, ptr %y1436, align 8
  store double %564, ptr %sgn1515, align 8
  %565 = load double, ptr %mag1514, align 8
  store double %565, ptr %x1516, align 8
  %566 = load double, ptr %sgn1515, align 8
  store double %566, ptr %y1517, align 8
  %567 = load double, ptr %x1516, align 8, !dbg !3900
  %568 = load double, ptr %sgn1515, align 8, !dbg !3905
  %569 = call double @llvm.copysign.f64(double %567, double %568), !dbg !3905
  store double %569, ptr %bias1507, align 8, !dbg !3905
  %570 = load double, ptr %y1436, align 8, !dbg !3906
  store double 1.000000e+00, ptr %x1518, align 8
  %571 = load i32, ptr %bits1494, align 4, !dbg !3907
  %sub1519 = sub i32 53, %571, !dbg !3908
  store i32 %sub1519, ptr %n1520, align 4
  %572 = load double, ptr %x1518, align 8, !dbg !3909
  %573 = load i32, ptr %n1520, align 4, !dbg !3909
  %574 = call double @scalbn(double %572, i32 %573), !dbg !3912
  %zero1521 = fcmp ueq double %574, 0.000000e+00, !dbg !3906
  %575 = call i1 @llvm.expect.i1(i1 %zero1521, i1 false), !dbg !3906
  br i1 %575, label %panic1522, label %checkok1523, !dbg !3906

checkok1523:                                      ; preds = %if.then1509
  %fmod = frem double %570, %574, !dbg !3906
  store double %fmod, ptr %frac, align 8, !dbg !3906
  %576 = load double, ptr %y1436, align 8, !dbg !3913
  %577 = load double, ptr %frac, align 8, !dbg !3914
  %fsub1524 = fsub double %576, %577, !dbg !3913
  store double %fsub1524, ptr %y1436, align 8, !dbg !3913
  %578 = load double, ptr %y1436, align 8, !dbg !3915
  %579 = load double, ptr %bias1507, align 8, !dbg !3916
  %fadd1525 = fadd double %578, %579, !dbg !3915
  store double %fadd1525, ptr %y1436, align 8, !dbg !3915
  br label %if.exit1526, !dbg !3915

if.exit1526:                                      ; preds = %checkok1523, %if.exit1506
  %580 = load i32, ptr %a, align 4, !dbg !3917
  %581 = load i32, ptr %i1437, align 4, !dbg !3918
  %add1527 = add i32 %580, %581, !dbg !3917
  %and1528 = and i32 %add1527, 127, !dbg !3917
  %582 = load i32, ptr %z, align 4, !dbg !3919
  %neq1529 = icmp ne i32 %and1528, %582, !dbg !3917
  br i1 %neq1529, label %if.then1530, label %if.exit1606, !dbg !3917

if.then1530:                                      ; preds = %if.exit1526
    #dbg_declare(ptr %t, !3920, !DIExpression(), !3922)
  %583 = load i32, ptr %a, align 4, !dbg !3923
  %584 = load i32, ptr %i1437, align 4, !dbg !3924
  %add1531 = add i32 %583, %584, !dbg !3923
  %and1532 = and i32 %add1531, 127, !dbg !3923
  %sext1533 = sext i32 %and1532 to i64, !dbg !3923
  %lt1534 = icmp slt i64 %sext1533, 0, !dbg !3923
  %585 = call i1 @llvm.expect.i1(i1 %lt1534, i1 false), !dbg !3923
  br i1 %585, label %panic1535, label %checkok1540, !dbg !3923

checkok1540:                                      ; preds = %if.then1530
  %ge1541 = icmp sge i64 %sext1533, 128, !dbg !3923
  %586 = call i1 @llvm.expect.i1(i1 %ge1541, i1 false), !dbg !3923
  br i1 %586, label %panic1542, label %checkok1549, !dbg !3923

checkok1549:                                      ; preds = %checkok1540
  %ptroffset1550 = getelementptr inbounds [4 x i8], ptr %x386, i64 %sext1533, !dbg !3923
  %587 = load i32, ptr %ptroffset1550, align 4, !dbg !3923
  store i32 %587, ptr %t, align 4, !dbg !3923
  store i8 1, ptr %switch1551, align 1
  br label %switch.entry1552

switch.entry1552:                                 ; preds = %checkok1549
  %588 = load i8, ptr %switch1551, align 1
  %589 = trunc i8 %588 to i1
  %590 = load i32, ptr %t, align 4, !dbg !3925
  %gt1553 = icmp ugt i32 500000000, %590, !dbg !3925
  br i1 %gt1553, label %and.rhs1554, label %and.phi1563, !dbg !3925

and.rhs1554:                                      ; preds = %switch.entry1552
  %591 = load i32, ptr %t, align 4, !dbg !3927
  %i2b1555 = icmp ne i32 %591, 0, !dbg !3927
  br i1 %i2b1555, label %or.phi1561, label %or.rhs1556, !dbg !3927

or.rhs1556:                                       ; preds = %and.rhs1554
  %592 = load i32, ptr %a, align 4, !dbg !3928
  %593 = load i32, ptr %i1437, align 4, !dbg !3929
  %add1557 = add i32 %592, %593, !dbg !3928
  %add1558 = add i32 %add1557, 1, !dbg !3928
  %and1559 = and i32 %add1558, 127, !dbg !3928
  %594 = load i32, ptr %z, align 4, !dbg !3930
  %neq1560 = icmp ne i32 %and1559, %594, !dbg !3928
  br label %or.phi1561, !dbg !3928

or.phi1561:                                       ; preds = %or.rhs1556, %and.rhs1554
  %val1562 = phi i1 [ true, %and.rhs1554 ], [ %neq1560, %or.rhs1556 ], !dbg !3928
  br label %and.phi1563, !dbg !3928

and.phi1563:                                      ; preds = %or.phi1561, %switch.entry1552
  %val1564 = phi i1 [ false, %switch.entry1552 ], [ %val1562, %or.phi1561 ], !dbg !3928
  %eq1565 = icmp eq i1 %val1564, %589, !dbg !3928
  br i1 %eq1565, label %switch.case1566, label %next_if1570, !dbg !3928

switch.case1566:                                  ; preds = %and.phi1563
  %595 = load double, ptr %frac, align 8, !dbg !3931
  %596 = load i32, ptr %sign382, align 4, !dbg !3933
  %sifp1567 = sitofp i32 %596 to double, !dbg !3933
  %fmul1568 = fmul double 2.500000e-01, %sifp1567, !dbg !3934
  %fadd1569 = fadd double %595, %fmul1568, !dbg !3931
  store double %fadd1569, ptr %frac, align 8, !dbg !3931
  br label %switch.exit1595, !dbg !3931

next_if1570:                                      ; preds = %and.phi1563
  %597 = load i32, ptr %t, align 4, !dbg !3935
  %lt1571 = icmp ult i32 500000000, %597, !dbg !3935
  %eq1572 = icmp eq i1 %lt1571, %589, !dbg !3935
  br i1 %eq1572, label %switch.case1573, label %next_if1577, !dbg !3935

switch.case1573:                                  ; preds = %next_if1570
  %598 = load double, ptr %frac, align 8, !dbg !3936
  %599 = load i32, ptr %sign382, align 4, !dbg !3938
  %sifp1574 = sitofp i32 %599 to double, !dbg !3938
  %fmul1575 = fmul double 7.500000e-01, %sifp1574, !dbg !3939
  %fadd1576 = fadd double %598, %fmul1575, !dbg !3936
  store double %fadd1576, ptr %frac, align 8, !dbg !3936
  br label %switch.exit1595, !dbg !3936

next_if1577:                                      ; preds = %next_if1570
  %600 = load i32, ptr %t, align 4, !dbg !3940
  %eq1578 = icmp eq i32 500000000, %600, !dbg !3940
  %eq1579 = icmp eq i1 %eq1578, %589, !dbg !3940
  br i1 %eq1579, label %switch.case1580, label %next_if1594, !dbg !3940

switch.case1580:                                  ; preds = %next_if1577
  %601 = load i32, ptr %a, align 4, !dbg !3941
  %602 = load i32, ptr %i1437, align 4, !dbg !3943
  %add1581 = add i32 %601, %602, !dbg !3941
  %add1582 = add i32 %add1581, 1, !dbg !3941
  %and1583 = and i32 %add1582, 127, !dbg !3941
  %603 = load i32, ptr %z, align 4, !dbg !3944
  %eq1584 = icmp eq i32 %and1583, %603, !dbg !3941
  br i1 %eq1584, label %if.then1585, label %if.else1589, !dbg !3941

if.then1585:                                      ; preds = %switch.case1580
  %604 = load double, ptr %frac, align 8, !dbg !3945
  %605 = load i32, ptr %sign382, align 4, !dbg !3947
  %sifp1586 = sitofp i32 %605 to double, !dbg !3947
  %fmul1587 = fmul double 5.000000e-01, %sifp1586, !dbg !3948
  %fadd1588 = fadd double %604, %fmul1587, !dbg !3945
  store double %fadd1588, ptr %frac, align 8, !dbg !3945
  br label %if.exit1593, !dbg !3945

if.else1589:                                      ; preds = %switch.case1580
  %606 = load double, ptr %frac, align 8, !dbg !3949
  %607 = load i32, ptr %sign382, align 4, !dbg !3951
  %sifp1590 = sitofp i32 %607 to double, !dbg !3951
  %fmul1591 = fmul double 7.500000e-01, %sifp1590, !dbg !3952
  %fadd1592 = fadd double %606, %fmul1591, !dbg !3949
  store double %fadd1592, ptr %frac, align 8, !dbg !3949
  br label %if.exit1593, !dbg !3949

if.exit1593:                                      ; preds = %if.else1589, %if.then1585
  br label %switch.exit1595, !dbg !3949

next_if1594:                                      ; preds = %next_if1577
  br label %switch.exit1595, !dbg !3949

switch.exit1595:                                  ; preds = %next_if1594, %if.exit1593, %switch.case1573, %switch.case1566
  %608 = load i32, ptr %bits1494, align 4, !dbg !3953
  %sub1596 = sub i32 53, %608, !dbg !3954
  %ge1597 = icmp sge i32 %sub1596, 2, !dbg !3954
  br i1 %ge1597, label %and.rhs1598, label %and.phi1602, !dbg !3954

and.rhs1598:                                      ; preds = %switch.exit1595
  %609 = load double, ptr %frac, align 8, !dbg !3955
  %fmod1599 = frem double %609, 1.000000e+00, !dbg !3955
  %neq1600 = fcmp one double %fmod1599, 0.000000e+00, !dbg !3955
  %not1601 = xor i1 %neq1600, true, !dbg !3955
  br label %and.phi1602, !dbg !3955

and.phi1602:                                      ; preds = %and.rhs1598, %switch.exit1595
  %val1603 = phi i1 [ false, %switch.exit1595 ], [ %not1601, %and.rhs1598 ], !dbg !3955
  br i1 %val1603, label %if.then1604, label %if.exit1605, !dbg !3955

if.then1604:                                      ; preds = %and.phi1602
  %610 = load double, ptr %frac, align 8, !dbg !3956
  %fincdec = fadd double %610, 1.000000e+00, !dbg !3956
  store double %fincdec, ptr %frac, align 8, !dbg !3956
  br label %if.exit1605, !dbg !3956

if.exit1605:                                      ; preds = %if.then1604, %and.phi1602
  br label %if.exit1606, !dbg !3956

if.exit1606:                                      ; preds = %if.exit1605, %if.exit1526
  %611 = load double, ptr %y1436, align 8, !dbg !3957
  %612 = load double, ptr %frac, align 8, !dbg !3958
  %fadd1607 = fadd double %611, %612, !dbg !3957
  store double %fadd1607, ptr %y1436, align 8, !dbg !3957
  %613 = load double, ptr %y1436, align 8, !dbg !3959
  %614 = load double, ptr %bias1507, align 8, !dbg !3960
  %fsub1608 = fsub double %613, %614, !dbg !3959
  store double %fsub1608, ptr %y1436, align 8, !dbg !3959
  %615 = load i32, ptr %e2706, align 4, !dbg !3961
  %add1609 = add i32 %615, 53, !dbg !3961
  %and1610 = and i32 %add1609, 2147483647, !dbg !3961
  %616 = load i32, ptr %emax, align 4, !dbg !3962
  %sub1611 = sub i32 %616, 5, !dbg !3962
  %gt1612 = icmp sgt i32 %and1610, %sub1611, !dbg !3961
  br i1 %gt1612, label %if.then1613, label %if.exit1641, !dbg !3961

if.then1613:                                      ; preds = %if.exit1606
  %617 = load double, ptr %y1436, align 8
  store double %617, ptr %x1614, align 8
  %618 = load double, ptr %x1614, align 8, !dbg !3963
  %619 = call double @llvm.fabs.f64(double %618), !dbg !3963
  %ge1615 = fcmp oge double %619, 0x4340000000000000, !dbg !3965
  br i1 %ge1615, label %if.then1616, label %if.exit1629, !dbg !3965

if.then1616:                                      ; preds = %if.then1613
  %620 = load i8, ptr %denormal, align 1, !dbg !3967
  %621 = trunc i8 %620 to i1, !dbg !3967
  br i1 %621, label %and.rhs1617, label %and.phi1623, !dbg !3967

and.rhs1617:                                      ; preds = %if.then1616
  %622 = load i32, ptr %bits1494, align 4, !dbg !3969
  %623 = load i32, ptr %e2706, align 4, !dbg !3970
  %add1618 = add i32 53, %623, !dbg !3971
  %sub1619 = sub i32 %add1618, -149, !dbg !3971
  %eq1620 = icmp eq i32 %sub1619, %622, !dbg !3969
  %check1621 = icmp sge i32 %sub1619, 0, !dbg !3969
  %siui-eq1622 = and i1 %check1621, %eq1620, !dbg !3969
  br label %and.phi1623, !dbg !3969

and.phi1623:                                      ; preds = %and.rhs1617, %if.then1616
  %val1624 = phi i1 [ false, %if.then1616 ], [ %siui-eq1622, %and.rhs1617 ], !dbg !3969
  br i1 %val1624, label %if.then1625, label %if.exit1626, !dbg !3969

if.then1625:                                      ; preds = %and.phi1623
  store i8 0, ptr %denormal, align 1, !dbg !3972
  br label %if.exit1626, !dbg !3972

if.exit1626:                                      ; preds = %if.then1625, %and.phi1623
  %624 = load double, ptr %y1436, align 8, !dbg !3973
  %fmul1627 = fmul double %624, 5.000000e-01, !dbg !3973
  store double %fmul1627, ptr %y1436, align 8, !dbg !3973
  %625 = load i32, ptr %e2706, align 4, !dbg !3974
  %add1628 = add i32 %625, 1, !dbg !3974
  store i32 %add1628, ptr %e2706, align 4, !dbg !3974
  br label %if.exit1629, !dbg !3974

if.exit1629:                                      ; preds = %if.exit1626, %if.then1613
  %626 = load i32, ptr %e2706, align 4, !dbg !3975
  %add1630 = add i32 %626, 53, !dbg !3975
  %627 = load i32, ptr %emax, align 4, !dbg !3976
  %gt1631 = icmp sgt i32 %add1630, %627, !dbg !3975
  br i1 %gt1631, label %or.phi1637, label %or.rhs1632, !dbg !3975

or.rhs1632:                                       ; preds = %if.exit1629
  %628 = load i8, ptr %denormal, align 1, !dbg !3977
  %629 = trunc i8 %628 to i1, !dbg !3977
  br i1 %629, label %and.rhs1633, label %and.phi1635, !dbg !3977

and.rhs1633:                                      ; preds = %or.rhs1632
  %630 = load double, ptr %frac, align 8, !dbg !3978
  %neq1634 = fcmp one double %630, 0.000000e+00, !dbg !3978
  br label %and.phi1635, !dbg !3978

and.phi1635:                                      ; preds = %and.rhs1633, %or.rhs1632
  %val1636 = phi i1 [ false, %or.rhs1632 ], [ %neq1634, %and.rhs1633 ], !dbg !3978
  br label %or.phi1637, !dbg !3978

or.phi1637:                                       ; preds = %and.phi1635, %if.exit1629
  %val1638 = phi i1 [ true, %if.exit1629 ], [ %val1636, %and.phi1635 ], !dbg !3978
  br i1 %val1638, label %if.then1639, label %if.exit1640, !dbg !3978

if.then1639:                                      ; preds = %or.phi1637
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3979
  br label %err_retblock, !dbg !3979

if.exit1640:                                      ; preds = %or.phi1637
  br label %if.exit1641, !dbg !3979

if.exit1641:                                      ; preds = %if.exit1640, %if.exit1606
  %631 = load double, ptr %y1436, align 8
  store double %631, ptr %x1642, align 8
  %632 = load i32, ptr %e2706, align 4
  store i32 %632, ptr %n1643, align 4
  %633 = load double, ptr %x1642, align 8, !dbg !3980
  %634 = load i32, ptr %n1643, align 4, !dbg !3980
  %635 = call double @scalbn(double %633, i32 %634), !dbg !3983
  store double %635, ptr %blockret383, align 8, !dbg !3983
  br label %expr_block.exit1645, !dbg !3983

expr_block.exit1645:                              ; preds = %if.exit1641, %checkok788, %checkok749, %if.then719, %if.then667, %if.then650, %if.exit437, %if.then425
  %636 = load double, ptr %blockret383, align 8, !dbg !3983
  %fpfptrunc1646 = fptrunc double %636 to float, !dbg !3983
  store float %fpfptrunc1646, ptr %blockret, align 4, !dbg !3983
  br label %expr_block.exit1647, !dbg !3983

expr_block.exit1647:                              ; preds = %expr_block.exit1645, %expr_block.exit379, %if.then80, %if.then53
  %637 = load float, ptr %blockret, align 4, !dbg !3983
  store float %637, ptr %0, align 4, !dbg !3983
  ret i64 0, !dbg !3983

err_retblock:                                     ; preds = %if.then1639, %if.then676, %if.then673, %if.then646, %guard_block641, %if.then615, %if.then606, %if.then497, %if.then436, %if.then373, %if.then317, %if.then314, %guard_block, %if.then269, %if.then215, %if.then151, %if.then
  %638 = load i64, ptr %reterr, align 8, !dbg !3983
  ret i64 %638, !dbg !3983

panic:                                            ; preds = %and.rhs
  store i64 %4, ptr %taddr, align 8
  %639 = insertvalue %any undef, ptr %taddr, 0
  %640 = insertvalue %any %639, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr3, align 8
  %641 = insertvalue %any undef, ptr %taddr3, 0
  %642 = insertvalue %any %641, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %640, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %642, ptr %ptradd4, align 16
  %643 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %643, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 468, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3241
  unreachable, !dbg !3241

panic5:                                           ; preds = %loop.body
  store i64 %10, ptr %taddr6, align 8
  %644 = insertvalue %any undef, ptr %taddr6, 0
  %645 = insertvalue %any %644, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr7, align 8
  %646 = insertvalue %any undef, ptr %taddr7, 0
  %647 = insertvalue %any %646, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %645, ptr %varargslots8, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots8, i64 16
  store %any %647, ptr %ptradd9, align 16
  %648 = insertvalue %"any[]" undef, ptr %varargslots8, 0
  %"$$temp10" = insertvalue %"any[]" %648, i64 2, 1
  store %"any[]" %"$$temp10", ptr %indirectarg11, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 61, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 468, ptr byval(%"any[]") align 8 %indirectarg11) #5, !dbg !3242
  unreachable, !dbg !3242

panic17:                                          ; preds = %if.exit
  store i64 %15, ptr %taddr18, align 8
  %649 = insertvalue %any undef, ptr %taddr18, 0
  %650 = insertvalue %any %649, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr19, align 8
  %651 = insertvalue %any undef, ptr %taddr19, 0
  %652 = insertvalue %any %651, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %650, ptr %varargslots20, align 16
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots20, i64 16
  store %any %652, ptr %ptradd21, align 16
  %653 = insertvalue %"any[]" undef, ptr %varargslots20, 0
  %"$$temp22" = insertvalue %"any[]" %653, i64 2, 1
  store %"any[]" %"$$temp22", ptr %indirectarg23, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 470, ptr byval(%"any[]") align 8 %indirectarg23) #5, !dbg !3248
  unreachable, !dbg !3248

panic27:                                          ; preds = %switch.case25
  store i64 %22, ptr %taddr28, align 8
  %654 = insertvalue %any undef, ptr %taddr28, 0
  %655 = insertvalue %any %654, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr29, align 8
  %656 = insertvalue %any undef, ptr %taddr29, 0
  %657 = insertvalue %any %656, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %655, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %657, ptr %ptradd31, align 16
  %658 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %658, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 61, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 476, ptr byval(%"any[]") align 8 %indirectarg33) #5, !dbg !3252
  unreachable, !dbg !3252

panic87:                                          ; preds = %and.rhs84
  store i64 %56, ptr %taddr88, align 8
  %659 = insertvalue %any undef, ptr %taddr88, 0
  %660 = insertvalue %any %659, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr89, align 8
  %661 = insertvalue %any undef, ptr %taddr89, 0
  %662 = insertvalue %any %661, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %660, ptr %varargslots90, align 16
  %ptradd91 = getelementptr inbounds i8, ptr %varargslots90, i64 16
  store %any %662, ptr %ptradd91, align 16
  %663 = insertvalue %"any[]" undef, ptr %varargslots90, 0
  %"$$temp92" = insertvalue %"any[]" %663, i64 2, 1
  store %"any[]" %"$$temp92", ptr %indirectarg93, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 481, ptr byval(%"any[]") align 8 %indirectarg93) #5, !dbg !3263
  unreachable, !dbg !3263

panic101:                                         ; preds = %and.rhs98
  store i64 %60, ptr %taddr102, align 8
  %664 = insertvalue %any undef, ptr %taddr102, 0
  %665 = insertvalue %any %664, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr103, align 8
  %666 = insertvalue %any undef, ptr %taddr103, 0
  %667 = insertvalue %any %666, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %665, ptr %varargslots104, align 16
  %ptradd105 = getelementptr inbounds i8, ptr %varargslots104, i64 16
  store %any %667, ptr %ptradd105, align 16
  %668 = insertvalue %"any[]" undef, ptr %varargslots104, 0
  %"$$temp106" = insertvalue %"any[]" %668, i64 2, 1
  store %"any[]" %"$$temp106", ptr %indirectarg107, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 481, ptr byval(%"any[]") align 8 %indirectarg107) #5, !dbg !3265
  unreachable, !dbg !3265

panic115:                                         ; preds = %if.then113
  store i64 %66, ptr %taddr116, align 8
  %669 = insertvalue %any undef, ptr %taddr116, 0
  %670 = insertvalue %any %669, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 2, ptr %taddr117, align 8
  %671 = insertvalue %any undef, ptr %taddr117, 0
  %672 = insertvalue %any %671, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %670, ptr %varargslots118, align 16
  %ptradd119 = getelementptr inbounds i8, ptr %varargslots118, i64 16
  store %any %672, ptr %ptradd119, align 16
  %673 = insertvalue %"any[]" undef, ptr %varargslots118, 0
  %"$$temp120" = insertvalue %"any[]" %673, i64 2, 1
  store %"any[]" %"$$temp120", ptr %indirectarg121, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 61, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 483, ptr byval(%"any[]") align 8 %indirectarg121) #5, !dbg !3269
  unreachable, !dbg !3269

panic132:                                         ; preds = %loop.cond129
  store i64 %73, ptr %taddr133, align 8
  %674 = insertvalue %any undef, ptr %taddr133, 0
  %675 = insertvalue %any %674, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %75, ptr %taddr134, align 8
  %676 = insertvalue %any undef, ptr %taddr134, 0
  %677 = insertvalue %any %676, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %675, ptr %varargslots135, align 16
  %ptradd136 = getelementptr inbounds i8, ptr %varargslots135, i64 16
  store %any %677, ptr %ptradd136, align 16
  %678 = insertvalue %"any[]" undef, ptr %varargslots135, 0
  %"$$temp137" = insertvalue %"any[]" %678, i64 2, 1
  store %"any[]" %"$$temp137", ptr %indirectarg138, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 344, ptr byval(%"any[]") align 8 %indirectarg138) #5, !dbg !3302
  unreachable, !dbg !3302

panic160:                                         ; preds = %and.rhs156
  store i64 %89, ptr %taddr161, align 8
  %679 = insertvalue %any undef, ptr %taddr161, 0
  %680 = insertvalue %any %679, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add158, ptr %taddr162, align 8
  %681 = insertvalue %any undef, ptr %taddr162, 0
  %682 = insertvalue %any %681, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %680, ptr %varargslots163, align 16
  %ptradd164 = getelementptr inbounds i8, ptr %varargslots163, i64 16
  store %any %682, ptr %ptradd164, align 16
  %683 = insertvalue %"any[]" undef, ptr %varargslots163, 0
  %"$$temp165" = insertvalue %"any[]" %683, i64 2, 1
  store %"any[]" %"$$temp165", ptr %indirectarg166, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 357, ptr byval(%"any[]") align 8 %indirectarg166) #5, !dbg !3322
  unreachable, !dbg !3322

panic180:                                         ; preds = %and.rhs176
  store i64 %97, ptr %taddr181, align 8
  %684 = insertvalue %any undef, ptr %taddr181, 0
  %685 = insertvalue %any %684, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add178, ptr %taddr182, align 8
  %686 = insertvalue %any undef, ptr %taddr182, 0
  %687 = insertvalue %any %686, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %685, ptr %varargslots183, align 16
  %ptradd184 = getelementptr inbounds i8, ptr %varargslots183, i64 16
  store %any %687, ptr %ptradd184, align 16
  %688 = insertvalue %"any[]" undef, ptr %varargslots183, 0
  %"$$temp185" = insertvalue %"any[]" %688, i64 2, 1
  store %"any[]" %"$$temp185", ptr %indirectarg186, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 361, ptr byval(%"any[]") align 8 %indirectarg186) #5, !dbg !3333
  unreachable, !dbg !3333

panic258:                                         ; preds = %if.exit254
  store i64 %131, ptr %taddr259, align 8
  %689 = insertvalue %any undef, ptr %taddr259, 0
  %690 = insertvalue %any %689, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add256, ptr %taddr260, align 8
  %691 = insertvalue %any undef, ptr %taddr260, 0
  %692 = insertvalue %any %691, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %690, ptr %varargslots261, align 16
  %ptradd262 = getelementptr inbounds i8, ptr %varargslots261, i64 16
  store %any %692, ptr %ptradd262, align 16
  %693 = insertvalue %"any[]" undef, ptr %varargslots261, 0
  %"$$temp263" = insertvalue %"any[]" %693, i64 2, 1
  store %"any[]" %"$$temp263", ptr %indirectarg264, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 397, ptr byval(%"any[]") align 8 %indirectarg264) #5, !dbg !3381
  unreachable, !dbg !3381

panic288:                                         ; preds = %if.then285
  store i64 %148, ptr %taddr289, align 8
  %694 = insertvalue %any undef, ptr %taddr289, 0
  %695 = insertvalue %any %694, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %add286, ptr %taddr290, align 8
  %696 = insertvalue %any undef, ptr %taddr290, 0
  %697 = insertvalue %any %696, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %695, ptr %varargslots291, align 16
  %ptradd292 = getelementptr inbounds i8, ptr %varargslots291, i64 16
  store %any %697, ptr %ptradd292, align 16
  %698 = insertvalue %"any[]" undef, ptr %varargslots291, 0
  %"$$temp293" = insertvalue %"any[]" %698, i64 2, 1
  store %"any[]" %"$$temp293", ptr %indirectarg294, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 61, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 406, ptr byval(%"any[]") align 8 %indirectarg294) #5, !dbg !3399
  unreachable, !dbg !3399

panic296:                                         ; preds = %checkok295
  store i64 %add286, ptr %taddr297, align 8
  %699 = insertvalue %any undef, ptr %taddr297, 0
  %700 = insertvalue %any %699, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %700, ptr %varargslots298, align 16
  %701 = insertvalue %"any[]" undef, ptr %varargslots298, 0
  %"$$temp299" = insertvalue %"any[]" %701, i64 1, 1
  store %"any[]" %"$$temp299", ptr %indirectarg300, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.81, i64 22, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 406, ptr byval(%"any[]") align 8 %indirectarg300) #5, !dbg !3398
  unreachable, !dbg !3398

panic391:                                         ; preds = %assert_ok
  store i64 %210, ptr %taddr392, align 8
  %702 = insertvalue %any undef, ptr %taddr392, 0
  %703 = insertvalue %any %702, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr393, align 8
  %704 = insertvalue %any undef, ptr %taddr393, 0
  %705 = insertvalue %any %704, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %703, ptr %varargslots394, align 16
  %ptradd395 = getelementptr inbounds i8, ptr %varargslots394, i64 16
  store %any %705, ptr %ptradd395, align 16
  %706 = insertvalue %"any[]" undef, ptr %varargslots394, 0
  %"$$temp396" = insertvalue %"any[]" %706, i64 2, 1
  store %"any[]" %"$$temp396", ptr %indirectarg397, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 45, ptr byval(%"any[]") align 8 %indirectarg397) #5, !dbg !3492
  unreachable, !dbg !3492

panic413:                                         ; preds = %loop.cond410
  store i64 %219, ptr %taddr414, align 8
  %707 = insertvalue %any undef, ptr %taddr414, 0
  %708 = insertvalue %any %707, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %221, ptr %taddr415, align 8
  %709 = insertvalue %any undef, ptr %taddr415, 0
  %710 = insertvalue %any %709, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %708, ptr %varargslots416, align 16
  %ptradd417 = getelementptr inbounds i8, ptr %varargslots416, i64 16
  store %any %710, ptr %ptradd417, align 16
  %711 = insertvalue %"any[]" undef, ptr %varargslots416, 0
  %"$$temp418" = insertvalue %"any[]" %711, i64 2, 1
  store %"any[]" %"$$temp418", ptr %indirectarg419, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 56, ptr byval(%"any[]") align 8 %indirectarg419) #5, !dbg !3517
  unreachable, !dbg !3517

panic446:                                         ; preds = %and.rhs442
  store i64 %236, ptr %taddr447, align 8
  %712 = insertvalue %any undef, ptr %taddr447, 0
  %713 = insertvalue %any %712, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add444, ptr %taddr448, align 8
  %714 = insertvalue %any undef, ptr %taddr448, 0
  %715 = insertvalue %any %714, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %713, ptr %varargslots449, align 16
  %ptradd450 = getelementptr inbounds i8, ptr %varargslots449, i64 16
  store %any %715, ptr %ptradd450, align 16
  %716 = insertvalue %"any[]" undef, ptr %varargslots449, 0
  %"$$temp451" = insertvalue %"any[]" %716, i64 2, 1
  store %"any[]" %"$$temp451", ptr %indirectarg452, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 70, ptr byval(%"any[]") align 8 %indirectarg452) #5, !dbg !3537
  unreachable, !dbg !3537

panic466:                                         ; preds = %and.rhs462
  store i64 %244, ptr %taddr467, align 8
  %717 = insertvalue %any undef, ptr %taddr467, 0
  %718 = insertvalue %any %717, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add464, ptr %taddr468, align 8
  %719 = insertvalue %any undef, ptr %taddr468, 0
  %720 = insertvalue %any %719, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %718, ptr %varargslots469, align 16
  %ptradd470 = getelementptr inbounds i8, ptr %varargslots469, i64 16
  store %any %720, ptr %ptradd470, align 16
  %721 = insertvalue %"any[]" undef, ptr %varargslots469, 0
  %"$$temp471" = insertvalue %"any[]" %721, i64 2, 1
  store %"any[]" %"$$temp471", ptr %indirectarg472, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 74, ptr byval(%"any[]") align 8 %indirectarg472) #5, !dbg !3548
  unreachable, !dbg !3548

panic511:                                         ; preds = %if.then509
  store i64 %sext, ptr %taddr512, align 8
  %722 = insertvalue %any undef, ptr %taddr512, 0
  %723 = insertvalue %any %722, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %723, ptr %varargslots513, align 16
  %724 = insertvalue %"any[]" undef, ptr %varargslots513, 0
  %"$$temp514" = insertvalue %"any[]" %724, i64 1, 1
  store %"any[]" %"$$temp514", ptr %indirectarg515, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 94, ptr byval(%"any[]") align 8 %indirectarg515) #5, !dbg !3570
  unreachable, !dbg !3570

panic518:                                         ; preds = %checkok516
  store i64 128, ptr %taddr519, align 8
  %725 = insertvalue %any undef, ptr %taddr519, 0
  %726 = insertvalue %any %725, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext, ptr %taddr520, align 8
  %727 = insertvalue %any undef, ptr %taddr520, 0
  %728 = insertvalue %any %727, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %726, ptr %varargslots521, align 16
  %ptradd522 = getelementptr inbounds i8, ptr %varargslots521, i64 16
  store %any %728, ptr %ptradd522, align 16
  %729 = insertvalue %"any[]" undef, ptr %varargslots521, 0
  %"$$temp523" = insertvalue %"any[]" %729, i64 2, 1
  store %"any[]" %"$$temp523", ptr %indirectarg524, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 94, ptr byval(%"any[]") align 8 %indirectarg524) #5, !dbg !3570
  unreachable, !dbg !3570

panic528:                                         ; preds = %checkok525
  store i64 %sext526, ptr %taddr529, align 8
  %730 = insertvalue %any undef, ptr %taddr529, 0
  %731 = insertvalue %any %730, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %731, ptr %varargslots530, align 16
  %732 = insertvalue %"any[]" undef, ptr %varargslots530, 0
  %"$$temp531" = insertvalue %"any[]" %732, i64 1, 1
  store %"any[]" %"$$temp531", ptr %indirectarg532, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 94, ptr byval(%"any[]") align 8 %indirectarg532) #5, !dbg !3572
  unreachable, !dbg !3572

panic535:                                         ; preds = %checkok533
  store i64 128, ptr %taddr536, align 8
  %733 = insertvalue %any undef, ptr %taddr536, 0
  %734 = insertvalue %any %733, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext526, ptr %taddr537, align 8
  %735 = insertvalue %any undef, ptr %taddr537, 0
  %736 = insertvalue %any %735, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %734, ptr %varargslots538, align 16
  %ptradd539 = getelementptr inbounds i8, ptr %varargslots538, i64 16
  store %any %736, ptr %ptradd539, align 16
  %737 = insertvalue %"any[]" undef, ptr %varargslots538, 0
  %"$$temp540" = insertvalue %"any[]" %737, i64 2, 1
  store %"any[]" %"$$temp540", ptr %indirectarg541, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 94, ptr byval(%"any[]") align 8 %indirectarg541) #5, !dbg !3572
  unreachable, !dbg !3572

panic551:                                         ; preds = %if.else548
  store i64 %sext549, ptr %taddr552, align 8
  %738 = insertvalue %any undef, ptr %taddr552, 0
  %739 = insertvalue %any %738, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %739, ptr %varargslots553, align 16
  %740 = insertvalue %"any[]" undef, ptr %varargslots553, 0
  %"$$temp554" = insertvalue %"any[]" %740, i64 1, 1
  store %"any[]" %"$$temp554", ptr %indirectarg555, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 98, ptr byval(%"any[]") align 8 %indirectarg555) #5, !dbg !3575
  unreachable, !dbg !3575

panic558:                                         ; preds = %checkok556
  store i64 128, ptr %taddr559, align 8
  %741 = insertvalue %any undef, ptr %taddr559, 0
  %742 = insertvalue %any %741, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext549, ptr %taddr560, align 8
  %743 = insertvalue %any undef, ptr %taddr560, 0
  %744 = insertvalue %any %743, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %742, ptr %varargslots561, align 16
  %ptradd562 = getelementptr inbounds i8, ptr %varargslots561, i64 16
  store %any %744, ptr %ptradd562, align 16
  %745 = insertvalue %"any[]" undef, ptr %varargslots561, 0
  %"$$temp563" = insertvalue %"any[]" %745, i64 2, 1
  store %"any[]" %"$$temp563", ptr %indirectarg564, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 98, ptr byval(%"any[]") align 8 %indirectarg564) #5, !dbg !3575
  unreachable, !dbg !3575

panic592:                                         ; preds = %assert_ok588
  store i64 %285, ptr %taddr593, align 8
  %746 = insertvalue %any undef, ptr %taddr593, 0
  %747 = insertvalue %any %746, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add590, ptr %taddr594, align 8
  %748 = insertvalue %any undef, ptr %taddr594, 0
  %749 = insertvalue %any %748, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %747, ptr %varargslots595, align 16
  %ptradd596 = getelementptr inbounds i8, ptr %varargslots595, i64 16
  store %any %749, ptr %ptradd596, align 16
  %750 = insertvalue %"any[]" undef, ptr %varargslots595, 0
  %"$$temp597" = insertvalue %"any[]" %750, i64 2, 1
  store %"any[]" %"$$temp597", ptr %indirectarg598, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 113, ptr byval(%"any[]") align 8 %indirectarg598) #5, !dbg !3596
  unreachable, !dbg !3596

panic619:                                         ; preds = %if.exit616
  store i64 %301, ptr %taddr620, align 8
  %751 = insertvalue %any undef, ptr %taddr620, 0
  %752 = insertvalue %any %751, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %add617, ptr %taddr621, align 8
  %753 = insertvalue %any undef, ptr %taddr621, 0
  %754 = insertvalue %any %753, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %752, ptr %varargslots622, align 16
  %ptradd623 = getelementptr inbounds i8, ptr %varargslots622, i64 16
  store %any %754, ptr %ptradd623, align 16
  %755 = insertvalue %"any[]" undef, ptr %varargslots622, 0
  %"$$temp624" = insertvalue %"any[]" %755, i64 2, 1
  store %"any[]" %"$$temp624", ptr %indirectarg625, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 61, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 120, ptr byval(%"any[]") align 8 %indirectarg625) #5, !dbg !3610
  unreachable, !dbg !3610

panic628:                                         ; preds = %checkok626
  store i64 %add617, ptr %taddr629, align 8
  %756 = insertvalue %any undef, ptr %taddr629, 0
  %757 = insertvalue %any %756, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %757, ptr %varargslots630, align 16
  %758 = insertvalue %"any[]" undef, ptr %varargslots630, 0
  %"$$temp631" = insertvalue %"any[]" %758, i64 1, 1
  store %"any[]" %"$$temp631", ptr %indirectarg632, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.81, i64 22, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 120, ptr byval(%"any[]") align 8 %indirectarg632) #5, !dbg !3609
  unreachable, !dbg !3609

panic685:                                         ; preds = %loop.body682
  store i64 %sext683, ptr %taddr686, align 8
  %759 = insertvalue %any undef, ptr %taddr686, 0
  %760 = insertvalue %any %759, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %760, ptr %varargslots687, align 16
  %761 = insertvalue %"any[]" undef, ptr %varargslots687, 0
  %"$$temp688" = insertvalue %"any[]" %761, i64 1, 1
  store %"any[]" %"$$temp688", ptr %indirectarg689, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 138, ptr byval(%"any[]") align 8 %indirectarg689) #5, !dbg !3638
  unreachable, !dbg !3638

panic692:                                         ; preds = %checkok690
  store i64 128, ptr %taddr693, align 8
  %762 = insertvalue %any undef, ptr %taddr693, 0
  %763 = insertvalue %any %762, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext683, ptr %taddr694, align 8
  %764 = insertvalue %any undef, ptr %taddr694, 0
  %765 = insertvalue %any %764, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %763, ptr %varargslots695, align 16
  %ptradd696 = getelementptr inbounds i8, ptr %varargslots695, i64 16
  store %any %765, ptr %ptradd696, align 16
  %766 = insertvalue %"any[]" undef, ptr %varargslots695, 0
  %"$$temp697" = insertvalue %"any[]" %766, i64 2, 1
  store %"any[]" %"$$temp697", ptr %indirectarg698, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 138, ptr byval(%"any[]") align 8 %indirectarg698) #5, !dbg !3638
  unreachable, !dbg !3638

panic731:                                         ; preds = %if.then725
  store i64 %sub729, ptr %taddr732, align 8
  %767 = insertvalue %any undef, ptr %taddr732, 0
  %768 = insertvalue %any %767, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %768, ptr %varargslots733, align 16
  %769 = insertvalue %"any[]" undef, ptr %varargslots733, 0
  %"$$temp734" = insertvalue %"any[]" %769, i64 1, 1
  store %"any[]" %"$$temp734", ptr %indirectarg735, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 152, ptr byval(%"any[]") align 8 %indirectarg735) #5, !dbg !3665
  unreachable, !dbg !3665

panic738:                                         ; preds = %checkok736
  store i64 8, ptr %taddr739, align 8
  %770 = insertvalue %any undef, ptr %taddr739, 0
  %771 = insertvalue %any %770, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub729, ptr %taddr740, align 8
  %772 = insertvalue %any undef, ptr %taddr740, 0
  %773 = insertvalue %any %772, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %771, ptr %varargslots741, align 16
  %ptradd742 = getelementptr inbounds i8, ptr %varargslots741, i64 16
  store %any %773, ptr %ptradd742, align 16
  %774 = insertvalue %"any[]" undef, ptr %varargslots741, 0
  %"$$temp743" = insertvalue %"any[]" %774, i64 2, 1
  store %"any[]" %"$$temp743", ptr %indirectarg744, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 152, ptr byval(%"any[]") align 8 %indirectarg744) #5, !dbg !3665
  unreachable, !dbg !3665

panic748:                                         ; preds = %checkok745
  %775 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3662
  call void %775(ptr @.panic_msg.84, i64 17, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 152) #5, !dbg !3662
  unreachable, !dbg !3662

panic758:                                         ; preds = %or.rhs757
  store i32 %353, ptr %taddr759, align 4
  %776 = insertvalue %any undef, ptr %taddr759, 0
  %777 = insertvalue %any %776, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %777, ptr %varargslots760, align 16
  %778 = insertvalue %"any[]" undef, ptr %varargslots760, 0
  %"$$temp761" = insertvalue %"any[]" %778, i64 1, 1
  store %"any[]" %"$$temp761", ptr %indirectarg762, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.85, i64 35, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 154, ptr byval(%"any[]") align 8 %indirectarg762) #5, !dbg !3675
  unreachable, !dbg !3675

panic774:                                         ; preds = %if.then768
  store i64 %sub772, ptr %taddr775, align 8
  %779 = insertvalue %any undef, ptr %taddr775, 0
  %780 = insertvalue %any %779, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %780, ptr %varargslots776, align 16
  %781 = insertvalue %"any[]" undef, ptr %varargslots776, 0
  %"$$temp777" = insertvalue %"any[]" %781, i64 1, 1
  store %"any[]" %"$$temp777", ptr %indirectarg778, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 154, ptr byval(%"any[]") align 8 %indirectarg778) #5, !dbg !3678
  unreachable, !dbg !3678

panic781:                                         ; preds = %checkok779
  store i64 8, ptr %taddr782, align 8
  %782 = insertvalue %any undef, ptr %taddr782, 0
  %783 = insertvalue %any %782, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub772, ptr %taddr783, align 8
  %784 = insertvalue %any undef, ptr %taddr783, 0
  %785 = insertvalue %any %784, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %783, ptr %varargslots784, align 16
  %ptradd785 = getelementptr inbounds i8, ptr %varargslots784, i64 16
  store %any %785, ptr %ptradd785, align 16
  %786 = insertvalue %"any[]" undef, ptr %varargslots784, 0
  %"$$temp786" = insertvalue %"any[]" %786, i64 2, 1
  store %"any[]" %"$$temp786", ptr %indirectarg787, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 154, ptr byval(%"any[]") align 8 %indirectarg787) #5, !dbg !3678
  unreachable, !dbg !3678

panic803:                                         ; preds = %cond.phi
  store i64 %sub801, ptr %taddr804, align 8
  %787 = insertvalue %any undef, ptr %taddr804, 0
  %788 = insertvalue %any %787, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %788, ptr %varargslots805, align 16
  %789 = insertvalue %"any[]" undef, ptr %varargslots805, 0
  %"$$temp806" = insertvalue %"any[]" %789, i64 1, 1
  store %"any[]" %"$$temp806", ptr %indirectarg807, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 161, ptr byval(%"any[]") align 8 %indirectarg807) #5, !dbg !3689
  unreachable, !dbg !3689

panic810:                                         ; preds = %checkok808
  store i64 8, ptr %taddr811, align 8
  %790 = insertvalue %any undef, ptr %taddr811, 0
  %791 = insertvalue %any %790, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub801, ptr %taddr812, align 8
  %792 = insertvalue %any undef, ptr %taddr812, 0
  %793 = insertvalue %any %792, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %791, ptr %varargslots813, align 16
  %ptradd814 = getelementptr inbounds i8, ptr %varargslots813, i64 16
  store %any %793, ptr %ptradd814, align 16
  %794 = insertvalue %"any[]" undef, ptr %varargslots813, 0
  %"$$temp815" = insertvalue %"any[]" %794, i64 2, 1
  store %"any[]" %"$$temp815", ptr %indirectarg816, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 161, ptr byval(%"any[]") align 8 %indirectarg816) #5, !dbg !3689
  unreachable, !dbg !3689

panic824:                                         ; preds = %loop.body821
  store i64 %sext822, ptr %taddr825, align 8
  %795 = insertvalue %any undef, ptr %taddr825, 0
  %796 = insertvalue %any %795, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %796, ptr %varargslots826, align 16
  %797 = insertvalue %"any[]" undef, ptr %varargslots826, 0
  %"$$temp827" = insertvalue %"any[]" %797, i64 1, 1
  store %"any[]" %"$$temp827", ptr %indirectarg828, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 165, ptr byval(%"any[]") align 8 %indirectarg828) #5, !dbg !3700
  unreachable, !dbg !3700

panic831:                                         ; preds = %checkok829
  store i64 128, ptr %taddr832, align 8
  %798 = insertvalue %any undef, ptr %taddr832, 0
  %799 = insertvalue %any %798, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext822, ptr %taddr833, align 8
  %800 = insertvalue %any undef, ptr %taddr833, 0
  %801 = insertvalue %any %800, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %799, ptr %varargslots834, align 16
  %ptradd835 = getelementptr inbounds i8, ptr %varargslots834, i64 16
  store %any %801, ptr %ptradd835, align 16
  %802 = insertvalue %"any[]" undef, ptr %varargslots834, 0
  %"$$temp836" = insertvalue %"any[]" %802, i64 2, 1
  store %"any[]" %"$$temp836", ptr %indirectarg837, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 165, ptr byval(%"any[]") align 8 %indirectarg837) #5, !dbg !3700
  unreachable, !dbg !3700

panic841:                                         ; preds = %checkok838
  %803 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3702
  call void %803(ptr @.panic_msg.86, i64 10, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 165) #5, !dbg !3702
  unreachable, !dbg !3702

panic846:                                         ; preds = %checkok842
  store i64 %sext844, ptr %taddr847, align 8
  %804 = insertvalue %any undef, ptr %taddr847, 0
  %805 = insertvalue %any %804, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %805, ptr %varargslots848, align 16
  %806 = insertvalue %"any[]" undef, ptr %varargslots848, 0
  %"$$temp849" = insertvalue %"any[]" %806, i64 1, 1
  store %"any[]" %"$$temp849", ptr %indirectarg850, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 166, ptr byval(%"any[]") align 8 %indirectarg850) #5, !dbg !3703
  unreachable, !dbg !3703

panic853:                                         ; preds = %checkok851
  store i64 128, ptr %taddr854, align 8
  %807 = insertvalue %any undef, ptr %taddr854, 0
  %808 = insertvalue %any %807, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext844, ptr %taddr855, align 8
  %809 = insertvalue %any undef, ptr %taddr855, 0
  %810 = insertvalue %any %809, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %808, ptr %varargslots856, align 16
  %ptradd857 = getelementptr inbounds i8, ptr %varargslots856, i64 16
  store %any %810, ptr %ptradd857, align 16
  %811 = insertvalue %"any[]" undef, ptr %varargslots856, 0
  %"$$temp858" = insertvalue %"any[]" %811, i64 2, 1
  store %"any[]" %"$$temp858", ptr %indirectarg859, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 166, ptr byval(%"any[]") align 8 %indirectarg859) #5, !dbg !3703
  unreachable, !dbg !3703

panic864:                                         ; preds = %checkok860
  store i64 %sext862, ptr %taddr865, align 8
  %812 = insertvalue %any undef, ptr %taddr865, 0
  %813 = insertvalue %any %812, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %813, ptr %varargslots866, align 16
  %814 = insertvalue %"any[]" undef, ptr %varargslots866, 0
  %"$$temp867" = insertvalue %"any[]" %814, i64 1, 1
  store %"any[]" %"$$temp867", ptr %indirectarg868, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 166, ptr byval(%"any[]") align 8 %indirectarg868) #5, !dbg !3704
  unreachable, !dbg !3704

panic871:                                         ; preds = %checkok869
  store i64 128, ptr %taddr872, align 8
  %815 = insertvalue %any undef, ptr %taddr872, 0
  %816 = insertvalue %any %815, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext862, ptr %taddr873, align 8
  %817 = insertvalue %any undef, ptr %taddr873, 0
  %818 = insertvalue %any %817, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %816, ptr %varargslots874, align 16
  %ptradd875 = getelementptr inbounds i8, ptr %varargslots874, i64 16
  store %any %818, ptr %ptradd875, align 16
  %819 = insertvalue %"any[]" undef, ptr %varargslots874, 0
  %"$$temp876" = insertvalue %"any[]" %819, i64 2, 1
  store %"any[]" %"$$temp876", ptr %indirectarg877, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 166, ptr byval(%"any[]") align 8 %indirectarg877) #5, !dbg !3704
  unreachable, !dbg !3704

panic881:                                         ; preds = %checkok878
  %820 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3706
  call void %820(ptr @.panic_msg.84, i64 17, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 166) #5, !dbg !3706
  unreachable, !dbg !3706

panic885:                                         ; preds = %checkok882
  %821 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3709
  call void %821(ptr @.panic_msg.84, i64 17, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 167) #5, !dbg !3709
  unreachable, !dbg !3709

panic893:                                         ; preds = %and.rhs890
  store i64 %sext891, ptr %taddr894, align 8
  %822 = insertvalue %any undef, ptr %taddr894, 0
  %823 = insertvalue %any %822, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %823, ptr %varargslots895, align 16
  %824 = insertvalue %"any[]" undef, ptr %varargslots895, 0
  %"$$temp896" = insertvalue %"any[]" %824, i64 1, 1
  store %"any[]" %"$$temp896", ptr %indirectarg897, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 168, ptr byval(%"any[]") align 8 %indirectarg897) #5, !dbg !3713
  unreachable, !dbg !3713

panic900:                                         ; preds = %checkok898
  store i64 128, ptr %taddr901, align 8
  %825 = insertvalue %any undef, ptr %taddr901, 0
  %826 = insertvalue %any %825, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext891, ptr %taddr902, align 8
  %827 = insertvalue %any undef, ptr %taddr902, 0
  %828 = insertvalue %any %827, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %826, ptr %varargslots903, align 16
  %ptradd904 = getelementptr inbounds i8, ptr %varargslots903, i64 16
  store %any %828, ptr %ptradd904, align 16
  %829 = insertvalue %"any[]" undef, ptr %varargslots903, 0
  %"$$temp905" = insertvalue %"any[]" %829, i64 2, 1
  store %"any[]" %"$$temp905", ptr %indirectarg906, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 168, ptr byval(%"any[]") align 8 %indirectarg906) #5, !dbg !3713
  unreachable, !dbg !3713

panic924:                                         ; preds = %if.then920
  store i64 %sext922, ptr %taddr925, align 8
  %830 = insertvalue %any undef, ptr %taddr925, 0
  %831 = insertvalue %any %830, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %831, ptr %varargslots926, align 16
  %832 = insertvalue %"any[]" undef, ptr %varargslots926, 0
  %"$$temp927" = insertvalue %"any[]" %832, i64 1, 1
  store %"any[]" %"$$temp927", ptr %indirectarg928, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 174, ptr byval(%"any[]") align 8 %indirectarg928) #5, !dbg !3719
  unreachable, !dbg !3719

panic931:                                         ; preds = %checkok929
  store i64 128, ptr %taddr932, align 8
  %833 = insertvalue %any undef, ptr %taddr932, 0
  %834 = insertvalue %any %833, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext922, ptr %taddr933, align 8
  %835 = insertvalue %any undef, ptr %taddr933, 0
  %836 = insertvalue %any %835, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %834, ptr %varargslots934, align 16
  %ptradd935 = getelementptr inbounds i8, ptr %varargslots934, i64 16
  store %any %836, ptr %ptradd935, align 16
  %837 = insertvalue %"any[]" undef, ptr %varargslots934, 0
  %"$$temp936" = insertvalue %"any[]" %837, i64 2, 1
  store %"any[]" %"$$temp936", ptr %indirectarg937, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 174, ptr byval(%"any[]") align 8 %indirectarg937) #5, !dbg !3719
  unreachable, !dbg !3719

panic951:                                         ; preds = %and.rhs948
  store i64 %sext949, ptr %taddr952, align 8
  %838 = insertvalue %any undef, ptr %taddr952, 0
  %839 = insertvalue %any %838, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %839, ptr %varargslots953, align 16
  %840 = insertvalue %"any[]" undef, ptr %varargslots953, 0
  %"$$temp954" = insertvalue %"any[]" %840, i64 1, 1
  store %"any[]" %"$$temp954", ptr %indirectarg955, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 179, ptr byval(%"any[]") align 8 %indirectarg955) #5, !dbg !3728
  unreachable, !dbg !3728

panic958:                                         ; preds = %checkok956
  store i64 128, ptr %taddr959, align 8
  %841 = insertvalue %any undef, ptr %taddr959, 0
  %842 = insertvalue %any %841, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext949, ptr %taddr960, align 8
  %843 = insertvalue %any undef, ptr %taddr960, 0
  %844 = insertvalue %any %843, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %842, ptr %varargslots961, align 16
  %ptradd962 = getelementptr inbounds i8, ptr %varargslots961, i64 16
  store %any %844, ptr %ptradd962, align 16
  %845 = insertvalue %"any[]" undef, ptr %varargslots961, 0
  %"$$temp963" = insertvalue %"any[]" %845, i64 2, 1
  store %"any[]" %"$$temp963", ptr %indirectarg964, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 179, ptr byval(%"any[]") align 8 %indirectarg964) #5, !dbg !3728
  unreachable, !dbg !3728

panic981:                                         ; preds = %loop.body977
  store i64 %sext979, ptr %taddr982, align 8
  %846 = insertvalue %any undef, ptr %taddr982, 0
  %847 = insertvalue %any %846, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %847, ptr %varargslots983, align 16
  %848 = insertvalue %"any[]" undef, ptr %varargslots983, 0
  %"$$temp984" = insertvalue %"any[]" %848, i64 1, 1
  store %"any[]" %"$$temp984", ptr %indirectarg985, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 185, ptr byval(%"any[]") align 8 %indirectarg985) #5, !dbg !3740
  unreachable, !dbg !3740

panic988:                                         ; preds = %checkok986
  store i64 128, ptr %taddr989, align 8
  %849 = insertvalue %any undef, ptr %taddr989, 0
  %850 = insertvalue %any %849, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext979, ptr %taddr990, align 8
  %851 = insertvalue %any undef, ptr %taddr990, 0
  %852 = insertvalue %any %851, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %850, ptr %varargslots991, align 16
  %ptradd992 = getelementptr inbounds i8, ptr %varargslots991, i64 16
  store %any %852, ptr %ptradd992, align 16
  %853 = insertvalue %"any[]" undef, ptr %varargslots991, 0
  %"$$temp993" = insertvalue %"any[]" %853, i64 2, 1
  store %"any[]" %"$$temp993", ptr %indirectarg994, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 185, ptr byval(%"any[]") align 8 %indirectarg994) #5, !dbg !3740
  unreachable, !dbg !3740

panic1006:                                        ; preds = %if.then1001
  store i64 %sext1004, ptr %taddr1007, align 8
  %854 = insertvalue %any undef, ptr %taddr1007, 0
  %855 = insertvalue %any %854, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %855, ptr %varargslots1008, align 16
  %856 = insertvalue %"any[]" undef, ptr %varargslots1008, 0
  %"$$temp1009" = insertvalue %"any[]" %856, i64 1, 1
  store %"any[]" %"$$temp1009", ptr %indirectarg1010, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 189, ptr byval(%"any[]") align 8 %indirectarg1010) #5, !dbg !3747
  unreachable, !dbg !3747

panic1013:                                        ; preds = %checkok1011
  store i64 128, ptr %taddr1014, align 8
  %857 = insertvalue %any undef, ptr %taddr1014, 0
  %858 = insertvalue %any %857, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1004, ptr %taddr1015, align 8
  %859 = insertvalue %any undef, ptr %taddr1015, 0
  %860 = insertvalue %any %859, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %858, ptr %varargslots1016, align 16
  %ptradd1017 = getelementptr inbounds i8, ptr %varargslots1016, i64 16
  store %any %860, ptr %ptradd1017, align 16
  %861 = insertvalue %"any[]" undef, ptr %varargslots1016, 0
  %"$$temp1018" = insertvalue %"any[]" %861, i64 2, 1
  store %"any[]" %"$$temp1018", ptr %indirectarg1019, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 189, ptr byval(%"any[]") align 8 %indirectarg1019) #5, !dbg !3747
  unreachable, !dbg !3747

panic1027:                                        ; preds = %if.else1024
  store i64 %sext1025, ptr %taddr1028, align 8
  %862 = insertvalue %any undef, ptr %taddr1028, 0
  %863 = insertvalue %any %862, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %863, ptr %varargslots1029, align 16
  %864 = insertvalue %"any[]" undef, ptr %varargslots1029, 0
  %"$$temp1030" = insertvalue %"any[]" %864, i64 1, 1
  store %"any[]" %"$$temp1030", ptr %indirectarg1031, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 194, ptr byval(%"any[]") align 8 %indirectarg1031) #5, !dbg !3752
  unreachable, !dbg !3752

panic1034:                                        ; preds = %checkok1032
  store i64 128, ptr %taddr1035, align 8
  %865 = insertvalue %any undef, ptr %taddr1035, 0
  %866 = insertvalue %any %865, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1025, ptr %taddr1036, align 8
  %867 = insertvalue %any undef, ptr %taddr1036, 0
  %868 = insertvalue %any %867, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %866, ptr %varargslots1037, align 16
  %ptradd1038 = getelementptr inbounds i8, ptr %varargslots1037, i64 16
  store %any %868, ptr %ptradd1038, align 16
  %869 = insertvalue %"any[]" undef, ptr %varargslots1037, 0
  %"$$temp1039" = insertvalue %"any[]" %869, i64 2, 1
  store %"any[]" %"$$temp1039", ptr %indirectarg1040, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 194, ptr byval(%"any[]") align 8 %indirectarg1040) #5, !dbg !3752
  unreachable, !dbg !3752

panic1055:                                        ; preds = %and.rhs1052
  store i64 %sext1053, ptr %taddr1056, align 8
  %870 = insertvalue %any undef, ptr %taddr1056, 0
  %871 = insertvalue %any %870, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %871, ptr %varargslots1057, align 16
  %872 = insertvalue %"any[]" undef, ptr %varargslots1057, 0
  %"$$temp1058" = insertvalue %"any[]" %872, i64 1, 1
  store %"any[]" %"$$temp1058", ptr %indirectarg1059, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 196, ptr byval(%"any[]") align 8 %indirectarg1059) #5, !dbg !3758
  unreachable, !dbg !3758

panic1062:                                        ; preds = %checkok1060
  store i64 128, ptr %taddr1063, align 8
  %873 = insertvalue %any undef, ptr %taddr1063, 0
  %874 = insertvalue %any %873, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1053, ptr %taddr1064, align 8
  %875 = insertvalue %any undef, ptr %taddr1064, 0
  %876 = insertvalue %any %875, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %874, ptr %varargslots1065, align 16
  %ptradd1066 = getelementptr inbounds i8, ptr %varargslots1065, i64 16
  store %any %876, ptr %ptradd1066, align 16
  %877 = insertvalue %"any[]" undef, ptr %varargslots1065, 0
  %"$$temp1067" = insertvalue %"any[]" %877, i64 2, 1
  store %"any[]" %"$$temp1067", ptr %indirectarg1068, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 196, ptr byval(%"any[]") align 8 %indirectarg1068) #5, !dbg !3758
  unreachable, !dbg !3758

panic1095:                                        ; preds = %if.then1088
  store i64 %sext1093, ptr %taddr1096, align 8
  %878 = insertvalue %any undef, ptr %taddr1096, 0
  %879 = insertvalue %any %878, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %879, ptr %varargslots1097, align 16
  %880 = insertvalue %"any[]" undef, ptr %varargslots1097, 0
  %"$$temp1098" = insertvalue %"any[]" %880, i64 1, 1
  store %"any[]" %"$$temp1098", ptr %indirectarg1099, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 206, ptr byval(%"any[]") align 8 %indirectarg1099) #5, !dbg !3772
  unreachable, !dbg !3772

panic1102:                                        ; preds = %checkok1100
  store i64 128, ptr %taddr1103, align 8
  %881 = insertvalue %any undef, ptr %taddr1103, 0
  %882 = insertvalue %any %881, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1093, ptr %taddr1104, align 8
  %883 = insertvalue %any undef, ptr %taddr1104, 0
  %884 = insertvalue %any %883, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %882, ptr %varargslots1105, align 16
  %ptradd1106 = getelementptr inbounds i8, ptr %varargslots1105, i64 16
  store %any %884, ptr %ptradd1106, align 16
  %885 = insertvalue %"any[]" undef, ptr %varargslots1105, 0
  %"$$temp1107" = insertvalue %"any[]" %885, i64 2, 1
  store %"any[]" %"$$temp1107", ptr %indirectarg1108, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 206, ptr byval(%"any[]") align 8 %indirectarg1108) #5, !dbg !3772
  unreachable, !dbg !3772

panic1113:                                        ; preds = %checkok1109
  store i64 %sext1111, ptr %taddr1114, align 8
  %886 = insertvalue %any undef, ptr %taddr1114, 0
  %887 = insertvalue %any %886, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %887, ptr %varargslots1115, align 16
  %888 = insertvalue %"any[]" undef, ptr %varargslots1115, 0
  %"$$temp1116" = insertvalue %"any[]" %888, i64 1, 1
  store %"any[]" %"$$temp1116", ptr %indirectarg1117, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 206, ptr byval(%"any[]") align 8 %indirectarg1117) #5, !dbg !3773
  unreachable, !dbg !3773

panic1120:                                        ; preds = %checkok1118
  store i64 128, ptr %taddr1121, align 8
  %889 = insertvalue %any undef, ptr %taddr1121, 0
  %890 = insertvalue %any %889, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1111, ptr %taddr1122, align 8
  %891 = insertvalue %any undef, ptr %taddr1122, 0
  %892 = insertvalue %any %891, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %890, ptr %varargslots1123, align 16
  %ptradd1124 = getelementptr inbounds i8, ptr %varargslots1123, i64 16
  store %any %892, ptr %ptradd1124, align 16
  %893 = insertvalue %"any[]" undef, ptr %varargslots1123, 0
  %"$$temp1125" = insertvalue %"any[]" %893, i64 2, 1
  store %"any[]" %"$$temp1125", ptr %indirectarg1126, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 206, ptr byval(%"any[]") align 8 %indirectarg1126) #5, !dbg !3773
  unreachable, !dbg !3773

panic1133:                                        ; preds = %if.exit1130
  store i64 %sext1131, ptr %taddr1134, align 8
  %894 = insertvalue %any undef, ptr %taddr1134, 0
  %895 = insertvalue %any %894, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %895, ptr %varargslots1135, align 16
  %896 = insertvalue %"any[]" undef, ptr %varargslots1135, 0
  %"$$temp1136" = insertvalue %"any[]" %896, i64 1, 1
  store %"any[]" %"$$temp1136", ptr %indirectarg1137, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 208, ptr byval(%"any[]") align 8 %indirectarg1137) #5, !dbg !3775
  unreachable, !dbg !3775

panic1140:                                        ; preds = %checkok1138
  store i64 128, ptr %taddr1141, align 8
  %897 = insertvalue %any undef, ptr %taddr1141, 0
  %898 = insertvalue %any %897, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1131, ptr %taddr1142, align 8
  %899 = insertvalue %any undef, ptr %taddr1142, 0
  %900 = insertvalue %any %899, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %898, ptr %varargslots1143, align 16
  %ptradd1144 = getelementptr inbounds i8, ptr %varargslots1143, i64 16
  store %any %900, ptr %ptradd1144, align 16
  %901 = insertvalue %"any[]" undef, ptr %varargslots1143, 0
  %"$$temp1145" = insertvalue %"any[]" %901, i64 2, 1
  store %"any[]" %"$$temp1145", ptr %indirectarg1146, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 208, ptr byval(%"any[]") align 8 %indirectarg1146) #5, !dbg !3775
  unreachable, !dbg !3775

panic1162:                                        ; preds = %or.rhs1159
  store i64 %sext1160, ptr %taddr1163, align 8
  %902 = insertvalue %any undef, ptr %taddr1163, 0
  %903 = insertvalue %any %902, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %903, ptr %varargslots1164, align 16
  %904 = insertvalue %"any[]" undef, ptr %varargslots1164, 0
  %"$$temp1165" = insertvalue %"any[]" %904, i64 1, 1
  store %"any[]" %"$$temp1165", ptr %indirectarg1166, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 221, ptr byval(%"any[]") align 8 %indirectarg1166) #5, !dbg !3796
  unreachable, !dbg !3796

panic1169:                                        ; preds = %checkok1167
  store i64 128, ptr %taddr1170, align 8
  %905 = insertvalue %any undef, ptr %taddr1170, 0
  %906 = insertvalue %any %905, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1160, ptr %taddr1171, align 8
  %907 = insertvalue %any undef, ptr %taddr1171, 0
  %908 = insertvalue %any %907, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %906, ptr %varargslots1172, align 16
  %ptradd1173 = getelementptr inbounds i8, ptr %varargslots1172, i64 16
  store %any %908, ptr %ptradd1173, align 16
  %909 = insertvalue %"any[]" undef, ptr %varargslots1172, 0
  %"$$temp1174" = insertvalue %"any[]" %909, i64 2, 1
  store %"any[]" %"$$temp1174", ptr %indirectarg1175, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 221, ptr byval(%"any[]") align 8 %indirectarg1175) #5, !dbg !3796
  unreachable, !dbg !3796

panic1180:                                        ; preds = %checkok1176
  store i64 %sext1178, ptr %taddr1181, align 8
  %910 = insertvalue %any undef, ptr %taddr1181, 0
  %911 = insertvalue %any %910, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %911, ptr %varargslots1182, align 16
  %912 = insertvalue %"any[]" undef, ptr %varargslots1182, 0
  %"$$temp1183" = insertvalue %"any[]" %912, i64 1, 1
  store %"any[]" %"$$temp1183", ptr %indirectarg1184, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 221, ptr byval(%"any[]") align 8 %indirectarg1184) #5, !dbg !3797
  unreachable, !dbg !3797

panic1187:                                        ; preds = %checkok1185
  store i64 2, ptr %taddr1188, align 8
  %913 = insertvalue %any undef, ptr %taddr1188, 0
  %914 = insertvalue %any %913, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1178, ptr %taddr1189, align 8
  %915 = insertvalue %any undef, ptr %taddr1189, 0
  %916 = insertvalue %any %915, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %914, ptr %varargslots1190, align 16
  %ptradd1191 = getelementptr inbounds i8, ptr %varargslots1190, i64 16
  store %any %916, ptr %ptradd1191, align 16
  %917 = insertvalue %"any[]" undef, ptr %varargslots1190, 0
  %"$$temp1192" = insertvalue %"any[]" %917, i64 2, 1
  store %"any[]" %"$$temp1192", ptr %indirectarg1193, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 221, ptr byval(%"any[]") align 8 %indirectarg1193) #5, !dbg !3797
  unreachable, !dbg !3797

panic1205:                                        ; preds = %if.exit1200
  store i64 %sext1203, ptr %taddr1206, align 8
  %918 = insertvalue %any undef, ptr %taddr1206, 0
  %919 = insertvalue %any %918, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %919, ptr %varargslots1207, align 16
  %920 = insertvalue %"any[]" undef, ptr %varargslots1207, 0
  %"$$temp1208" = insertvalue %"any[]" %920, i64 1, 1
  store %"any[]" %"$$temp1208", ptr %indirectarg1209, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 226, ptr byval(%"any[]") align 8 %indirectarg1209) #5, !dbg !3802
  unreachable, !dbg !3802

panic1212:                                        ; preds = %checkok1210
  store i64 128, ptr %taddr1213, align 8
  %921 = insertvalue %any undef, ptr %taddr1213, 0
  %922 = insertvalue %any %921, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1203, ptr %taddr1214, align 8
  %923 = insertvalue %any undef, ptr %taddr1214, 0
  %924 = insertvalue %any %923, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %922, ptr %varargslots1215, align 16
  %ptradd1216 = getelementptr inbounds i8, ptr %varargslots1215, i64 16
  store %any %924, ptr %ptradd1216, align 16
  %925 = insertvalue %"any[]" undef, ptr %varargslots1215, 0
  %"$$temp1217" = insertvalue %"any[]" %925, i64 2, 1
  store %"any[]" %"$$temp1217", ptr %indirectarg1218, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 226, ptr byval(%"any[]") align 8 %indirectarg1218) #5, !dbg !3802
  unreachable, !dbg !3802

panic1223:                                        ; preds = %checkok1219
  store i64 %sext1221, ptr %taddr1224, align 8
  %926 = insertvalue %any undef, ptr %taddr1224, 0
  %927 = insertvalue %any %926, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %927, ptr %varargslots1225, align 16
  %928 = insertvalue %"any[]" undef, ptr %varargslots1225, 0
  %"$$temp1226" = insertvalue %"any[]" %928, i64 1, 1
  store %"any[]" %"$$temp1226", ptr %indirectarg1227, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 226, ptr byval(%"any[]") align 8 %indirectarg1227) #5, !dbg !3804
  unreachable, !dbg !3804

panic1230:                                        ; preds = %checkok1228
  store i64 2, ptr %taddr1231, align 8
  %929 = insertvalue %any undef, ptr %taddr1231, 0
  %930 = insertvalue %any %929, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1221, ptr %taddr1232, align 8
  %931 = insertvalue %any undef, ptr %taddr1232, 0
  %932 = insertvalue %any %931, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %930, ptr %varargslots1233, align 16
  %ptradd1234 = getelementptr inbounds i8, ptr %varargslots1233, i64 16
  store %any %932, ptr %ptradd1234, align 16
  %933 = insertvalue %"any[]" undef, ptr %varargslots1233, 0
  %"$$temp1235" = insertvalue %"any[]" %933, i64 2, 1
  store %"any[]" %"$$temp1235", ptr %indirectarg1236, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 226, ptr byval(%"any[]") align 8 %indirectarg1236) #5, !dbg !3804
  unreachable, !dbg !3804

panic1261:                                        ; preds = %loop.body1257
  store i64 %sext1259, ptr %taddr1262, align 8
  %934 = insertvalue %any undef, ptr %taddr1262, 0
  %935 = insertvalue %any %934, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %935, ptr %varargslots1263, align 16
  %936 = insertvalue %"any[]" undef, ptr %varargslots1263, 0
  %"$$temp1264" = insertvalue %"any[]" %936, i64 1, 1
  store %"any[]" %"$$temp1264", ptr %indirectarg1265, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 233, ptr byval(%"any[]") align 8 %indirectarg1265) #5, !dbg !3822
  unreachable, !dbg !3822

panic1268:                                        ; preds = %checkok1266
  store i64 128, ptr %taddr1269, align 8
  %937 = insertvalue %any undef, ptr %taddr1269, 0
  %938 = insertvalue %any %937, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1259, ptr %taddr1270, align 8
  %939 = insertvalue %any undef, ptr %taddr1270, 0
  %940 = insertvalue %any %939, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %938, ptr %varargslots1271, align 16
  %ptradd1272 = getelementptr inbounds i8, ptr %varargslots1271, i64 16
  store %any %940, ptr %ptradd1272, align 16
  %941 = insertvalue %"any[]" undef, ptr %varargslots1271, 0
  %"$$temp1273" = insertvalue %"any[]" %941, i64 2, 1
  store %"any[]" %"$$temp1273", ptr %indirectarg1274, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 233, ptr byval(%"any[]") align 8 %indirectarg1274) #5, !dbg !3822
  unreachable, !dbg !3822

panic1277:                                        ; preds = %checkok1275
  store i32 %497, ptr %taddr1278, align 4
  %942 = insertvalue %any undef, ptr %taddr1278, 0
  %943 = insertvalue %any %942, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %943, ptr %varargslots1279, align 16
  %944 = insertvalue %"any[]" undef, ptr %varargslots1279, 0
  %"$$temp1280" = insertvalue %"any[]" %944, i64 1, 1
  store %"any[]" %"$$temp1280", ptr %indirectarg1281, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.85, i64 35, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 233, ptr byval(%"any[]") align 8 %indirectarg1281) #5, !dbg !3824
  unreachable, !dbg !3824

panic1284:                                        ; preds = %checkok1282
  store i32 %497, ptr %taddr1285, align 4
  %945 = insertvalue %any undef, ptr %taddr1285, 0
  %946 = insertvalue %any %945, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %946, ptr %varargslots1286, align 16
  %947 = insertvalue %"any[]" undef, ptr %varargslots1286, 0
  %"$$temp1287" = insertvalue %"any[]" %947, i64 1, 1
  store %"any[]" %"$$temp1287", ptr %indirectarg1288, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.85, i64 35, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 233, ptr byval(%"any[]") align 8 %indirectarg1288) #5, !dbg !3824
  unreachable, !dbg !3824

panic1295:                                        ; preds = %checkok1289
  store i64 %sext1293, ptr %taddr1296, align 8
  %948 = insertvalue %any undef, ptr %taddr1296, 0
  %949 = insertvalue %any %948, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %949, ptr %varargslots1297, align 16
  %950 = insertvalue %"any[]" undef, ptr %varargslots1297, 0
  %"$$temp1298" = insertvalue %"any[]" %950, i64 1, 1
  store %"any[]" %"$$temp1298", ptr %indirectarg1299, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 234, ptr byval(%"any[]") align 8 %indirectarg1299) #5, !dbg !3826
  unreachable, !dbg !3826

panic1302:                                        ; preds = %checkok1300
  store i64 128, ptr %taddr1303, align 8
  %951 = insertvalue %any undef, ptr %taddr1303, 0
  %952 = insertvalue %any %951, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1293, ptr %taddr1304, align 8
  %953 = insertvalue %any undef, ptr %taddr1304, 0
  %954 = insertvalue %any %953, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %952, ptr %varargslots1305, align 16
  %ptradd1306 = getelementptr inbounds i8, ptr %varargslots1305, i64 16
  store %any %954, ptr %ptradd1306, align 16
  %955 = insertvalue %"any[]" undef, ptr %varargslots1305, 0
  %"$$temp1307" = insertvalue %"any[]" %955, i64 2, 1
  store %"any[]" %"$$temp1307", ptr %indirectarg1308, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 234, ptr byval(%"any[]") align 8 %indirectarg1308) #5, !dbg !3826
  unreachable, !dbg !3826

panic1313:                                        ; preds = %checkok1309
  store i64 %sext1311, ptr %taddr1314, align 8
  %956 = insertvalue %any undef, ptr %taddr1314, 0
  %957 = insertvalue %any %956, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %957, ptr %varargslots1315, align 16
  %958 = insertvalue %"any[]" undef, ptr %varargslots1315, 0
  %"$$temp1316" = insertvalue %"any[]" %958, i64 1, 1
  store %"any[]" %"$$temp1316", ptr %indirectarg1317, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 234, ptr byval(%"any[]") align 8 %indirectarg1317) #5, !dbg !3827
  unreachable, !dbg !3827

panic1320:                                        ; preds = %checkok1318
  store i64 128, ptr %taddr1321, align 8
  %959 = insertvalue %any undef, ptr %taddr1321, 0
  %960 = insertvalue %any %959, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1311, ptr %taddr1322, align 8
  %961 = insertvalue %any undef, ptr %taddr1322, 0
  %962 = insertvalue %any %961, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %960, ptr %varargslots1323, align 16
  %ptradd1324 = getelementptr inbounds i8, ptr %varargslots1323, i64 16
  store %any %962, ptr %ptradd1324, align 16
  %963 = insertvalue %"any[]" undef, ptr %varargslots1323, 0
  %"$$temp1325" = insertvalue %"any[]" %963, i64 2, 1
  store %"any[]" %"$$temp1325", ptr %indirectarg1326, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 234, ptr byval(%"any[]") align 8 %indirectarg1326) #5, !dbg !3827
  unreachable, !dbg !3827

panic1330:                                        ; preds = %checkok1327
  store i32 %508, ptr %taddr1331, align 4
  %964 = insertvalue %any undef, ptr %taddr1331, 0
  %965 = insertvalue %any %964, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %965, ptr %varargslots1332, align 16
  %966 = insertvalue %"any[]" undef, ptr %varargslots1332, 0
  %"$$temp1333" = insertvalue %"any[]" %966, i64 1, 1
  store %"any[]" %"$$temp1333", ptr %indirectarg1334, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.85, i64 35, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 234, ptr byval(%"any[]") align 8 %indirectarg1334) #5, !dbg !3829
  unreachable, !dbg !3829

panic1339:                                        ; preds = %checkok1335
  store i32 %512, ptr %taddr1340, align 4
  %967 = insertvalue %any undef, ptr %taddr1340, 0
  %968 = insertvalue %any %967, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %968, ptr %varargslots1341, align 16
  %969 = insertvalue %"any[]" undef, ptr %varargslots1341, 0
  %"$$temp1342" = insertvalue %"any[]" %969, i64 1, 1
  store %"any[]" %"$$temp1342", ptr %indirectarg1343, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.85, i64 35, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 235, ptr byval(%"any[]") align 8 %indirectarg1343) #5, !dbg !3832
  unreachable, !dbg !3832

panic1346:                                        ; preds = %checkok1344
  store i32 %512, ptr %taddr1347, align 4
  %970 = insertvalue %any undef, ptr %taddr1347, 0
  %971 = insertvalue %any %970, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %971, ptr %varargslots1348, align 16
  %972 = insertvalue %"any[]" undef, ptr %varargslots1348, 0
  %"$$temp1349" = insertvalue %"any[]" %972, i64 1, 1
  store %"any[]" %"$$temp1349", ptr %indirectarg1350, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.85, i64 35, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 235, ptr byval(%"any[]") align 8 %indirectarg1350) #5, !dbg !3832
  unreachable, !dbg !3832

panic1357:                                        ; preds = %and.rhs1354
  store i64 %sext1355, ptr %taddr1358, align 8
  %973 = insertvalue %any undef, ptr %taddr1358, 0
  %974 = insertvalue %any %973, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %974, ptr %varargslots1359, align 16
  %975 = insertvalue %"any[]" undef, ptr %varargslots1359, 0
  %"$$temp1360" = insertvalue %"any[]" %975, i64 1, 1
  store %"any[]" %"$$temp1360", ptr %indirectarg1361, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 236, ptr byval(%"any[]") align 8 %indirectarg1361) #5, !dbg !3836
  unreachable, !dbg !3836

panic1364:                                        ; preds = %checkok1362
  store i64 128, ptr %taddr1365, align 8
  %976 = insertvalue %any undef, ptr %taddr1365, 0
  %977 = insertvalue %any %976, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1355, ptr %taddr1366, align 8
  %978 = insertvalue %any undef, ptr %taddr1366, 0
  %979 = insertvalue %any %978, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %977, ptr %varargslots1367, align 16
  %ptradd1368 = getelementptr inbounds i8, ptr %varargslots1367, i64 16
  store %any %979, ptr %ptradd1368, align 16
  %980 = insertvalue %"any[]" undef, ptr %varargslots1367, 0
  %"$$temp1369" = insertvalue %"any[]" %980, i64 2, 1
  store %"any[]" %"$$temp1369", ptr %indirectarg1370, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 236, ptr byval(%"any[]") align 8 %indirectarg1370) #5, !dbg !3836
  unreachable, !dbg !3836

panic1393:                                        ; preds = %if.then1390
  store i64 %sext1391, ptr %taddr1394, align 8
  %981 = insertvalue %any undef, ptr %taddr1394, 0
  %982 = insertvalue %any %981, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %982, ptr %varargslots1395, align 16
  %983 = insertvalue %"any[]" undef, ptr %varargslots1395, 0
  %"$$temp1396" = insertvalue %"any[]" %983, i64 1, 1
  store %"any[]" %"$$temp1396", ptr %indirectarg1397, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 247, ptr byval(%"any[]") align 8 %indirectarg1397) #5, !dbg !3846
  unreachable, !dbg !3846

panic1400:                                        ; preds = %checkok1398
  store i64 128, ptr %taddr1401, align 8
  %984 = insertvalue %any undef, ptr %taddr1401, 0
  %985 = insertvalue %any %984, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1391, ptr %taddr1402, align 8
  %986 = insertvalue %any undef, ptr %taddr1402, 0
  %987 = insertvalue %any %986, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %985, ptr %varargslots1403, align 16
  %ptradd1404 = getelementptr inbounds i8, ptr %varargslots1403, i64 16
  store %any %987, ptr %ptradd1404, align 16
  %988 = insertvalue %"any[]" undef, ptr %varargslots1403, 0
  %"$$temp1405" = insertvalue %"any[]" %988, i64 2, 1
  store %"any[]" %"$$temp1405", ptr %indirectarg1406, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 247, ptr byval(%"any[]") align 8 %indirectarg1406) #5, !dbg !3846
  unreachable, !dbg !3846

panic1416:                                        ; preds = %if.else1411
  store i64 %sext1414, ptr %taddr1417, align 8
  %989 = insertvalue %any undef, ptr %taddr1417, 0
  %990 = insertvalue %any %989, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %990, ptr %varargslots1418, align 16
  %991 = insertvalue %"any[]" undef, ptr %varargslots1418, 0
  %"$$temp1419" = insertvalue %"any[]" %991, i64 1, 1
  store %"any[]" %"$$temp1419", ptr %indirectarg1420, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 252, ptr byval(%"any[]") align 8 %indirectarg1420) #5, !dbg !3850
  unreachable, !dbg !3850

panic1423:                                        ; preds = %checkok1421
  store i64 128, ptr %taddr1424, align 8
  %992 = insertvalue %any undef, ptr %taddr1424, 0
  %993 = insertvalue %any %992, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1414, ptr %taddr1425, align 8
  %994 = insertvalue %any undef, ptr %taddr1425, 0
  %995 = insertvalue %any %994, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %993, ptr %varargslots1426, align 16
  %ptradd1427 = getelementptr inbounds i8, ptr %varargslots1426, i64 16
  store %any %995, ptr %ptradd1427, align 16
  %996 = insertvalue %"any[]" undef, ptr %varargslots1426, 0
  %"$$temp1428" = insertvalue %"any[]" %996, i64 2, 1
  store %"any[]" %"$$temp1428", ptr %indirectarg1429, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 252, ptr byval(%"any[]") align 8 %indirectarg1429) #5, !dbg !3850
  unreachable, !dbg !3850

panic1450:                                        ; preds = %if.then1444
  store i64 %sext1448, ptr %taddr1451, align 8
  %997 = insertvalue %any undef, ptr %taddr1451, 0
  %998 = insertvalue %any %997, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %998, ptr %varargslots1452, align 16
  %999 = insertvalue %"any[]" undef, ptr %varargslots1452, 0
  %"$$temp1453" = insertvalue %"any[]" %999, i64 1, 1
  store %"any[]" %"$$temp1453", ptr %indirectarg1454, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 262, ptr byval(%"any[]") align 8 %indirectarg1454) #5, !dbg !3865
  unreachable, !dbg !3865

panic1457:                                        ; preds = %checkok1455
  store i64 128, ptr %taddr1458, align 8
  %1000 = insertvalue %any undef, ptr %taddr1458, 0
  %1001 = insertvalue %any %1000, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1448, ptr %taddr1459, align 8
  %1002 = insertvalue %any undef, ptr %taddr1459, 0
  %1003 = insertvalue %any %1002, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1001, ptr %varargslots1460, align 16
  %ptradd1461 = getelementptr inbounds i8, ptr %varargslots1460, i64 16
  store %any %1003, ptr %ptradd1461, align 16
  %1004 = insertvalue %"any[]" undef, ptr %varargslots1460, 0
  %"$$temp1462" = insertvalue %"any[]" %1004, i64 2, 1
  store %"any[]" %"$$temp1462", ptr %indirectarg1463, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 262, ptr byval(%"any[]") align 8 %indirectarg1463) #5, !dbg !3865
  unreachable, !dbg !3865

panic1472:                                        ; preds = %if.exit1466
  store i64 %sext1470, ptr %taddr1473, align 8
  %1005 = insertvalue %any undef, ptr %taddr1473, 0
  %1006 = insertvalue %any %1005, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1006, ptr %varargslots1474, align 16
  %1007 = insertvalue %"any[]" undef, ptr %varargslots1474, 0
  %"$$temp1475" = insertvalue %"any[]" %1007, i64 1, 1
  store %"any[]" %"$$temp1475", ptr %indirectarg1476, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 263, ptr byval(%"any[]") align 8 %indirectarg1476) #5, !dbg !3869
  unreachable, !dbg !3869

panic1479:                                        ; preds = %checkok1477
  store i64 128, ptr %taddr1480, align 8
  %1008 = insertvalue %any undef, ptr %taddr1480, 0
  %1009 = insertvalue %any %1008, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1470, ptr %taddr1481, align 8
  %1010 = insertvalue %any undef, ptr %taddr1481, 0
  %1011 = insertvalue %any %1010, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1009, ptr %varargslots1482, align 16
  %ptradd1483 = getelementptr inbounds i8, ptr %varargslots1482, i64 16
  store %any %1011, ptr %ptradd1483, align 16
  %1012 = insertvalue %"any[]" undef, ptr %varargslots1482, 0
  %"$$temp1484" = insertvalue %"any[]" %1012, i64 2, 1
  store %"any[]" %"$$temp1484", ptr %indirectarg1485, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 263, ptr byval(%"any[]") align 8 %indirectarg1485) #5, !dbg !3869
  unreachable, !dbg !3869

panic1522:                                        ; preds = %if.then1509
  %1013 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3906
  call void %1013(ptr @.panic_msg.86, i64 10, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 284) #5, !dbg !3906
  unreachable, !dbg !3906

panic1535:                                        ; preds = %if.then1530
  store i64 %sext1533, ptr %taddr1536, align 8
  %1014 = insertvalue %any undef, ptr %taddr1536, 0
  %1015 = insertvalue %any %1014, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1015, ptr %varargslots1537, align 16
  %1016 = insertvalue %"any[]" undef, ptr %varargslots1537, 0
  %"$$temp1538" = insertvalue %"any[]" %1016, i64 1, 1
  store %"any[]" %"$$temp1538", ptr %indirectarg1539, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.28, i64 38, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 292, ptr byval(%"any[]") align 8 %indirectarg1539) #5, !dbg !3923
  unreachable, !dbg !3923

panic1542:                                        ; preds = %checkok1540
  store i64 128, ptr %taddr1543, align 8
  %1017 = insertvalue %any undef, ptr %taddr1543, 0
  %1018 = insertvalue %any %1017, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1533, ptr %taddr1544, align 8
  %1019 = insertvalue %any undef, ptr %taddr1544, 0
  %1020 = insertvalue %any %1019, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1018, ptr %varargslots1545, align 16
  %ptradd1546 = getelementptr inbounds i8, ptr %varargslots1545, i64 16
  store %any %1020, ptr %ptradd1546, align 16
  %1021 = insertvalue %"any[]" undef, ptr %varargslots1545, 0
  %"$$temp1547" = insertvalue %"any[]" %1021, i64 2, 1
  store %"any[]" %"$$temp1547", ptr %indirectarg1548, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.76, i64 17, ptr @.func.87, i64 8, i32 292, ptr byval(%"any[]") align 8 %indirectarg1548) #5, !dbg !3923
  unreachable, !dbg !3923
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.splitter(ptr noalias sret(%Splitter) align 8 %0, ptr %1, i64 %2, ptr %3, i64 %4) #0 comdat !dbg !3984 {
entry:
  %self = alloca %"char[]", align 8
  %split = alloca %"char[]", align 8
  %literal = alloca %Splitter, align 8
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !3994, !DIExpression(), !3995)
  store ptr %3, ptr %split, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %split, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %split, !3996, !DIExpression(), !3997)
  call void @llvm.memset.p0.i64(ptr align 8 %literal, i8 0, i64 48, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 %self, i32 16, i1 false), !dbg !3998
  %ptradd2 = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !3998
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd2, ptr align 8 %split, i32 16, i1 false), !dbg !3999
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 48, i1 false), !dbg !3999
  ret void, !dbg !3999
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.tokenize(ptr noalias sret(%Splitter) align 8 %0, ptr %1, i64 %2, ptr %3, i64 %4) #0 comdat !dbg !4000 {
entry:
  %self = alloca %"char[]", align 8
  %split = alloca %"char[]", align 8
  %literal = alloca %Splitter, align 8
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !4001, !DIExpression(), !4002)
  store ptr %3, ptr %split, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %split, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %split, !4003, !DIExpression(), !4004)
  call void @llvm.memset.p0.i64(ptr align 8 %literal, i8 0, i64 48, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 %self, i32 16, i1 false), !dbg !4005
  %ptradd2 = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !4005
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd2, ptr align 8 %split, i32 16, i1 false), !dbg !4006
  %ptradd3 = getelementptr inbounds i8, ptr %literal, i64 40, !dbg !4006
  store i8 1, ptr %ptradd3, align 8, !dbg !4007
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 48, i1 false), !dbg !4007
  ret void, !dbg !4007
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.string.Splitter.reset(ptr %0) #0 comdat !dbg !4008 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !4012
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !4012
  br i1 %2, label %panic, label %checkok, !dbg !4012

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !4013, !DIExpression(), !4014)
  %3 = load ptr, ptr %self, align 8, !dbg !4015
  %ptradd = getelementptr inbounds i8, ptr %3, i64 32, !dbg !4015
  store i64 0, ptr %ptradd, align 8, !dbg !4016
  ret void, !dbg !4016

panic:                                            ; preds = %entry
  %4 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4014
  call void %4(ptr @.panic_msg.92, i64 62, ptr @.file.18, i64 9, ptr @.func.93, i64 5, i32 841) #5, !dbg !4014
  unreachable, !dbg !4014
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.Splitter.next(ptr %0, ptr %1) #0 comdat !dbg !4017 {
entry:
  %self = alloca ptr, align 8
  %len = alloca i64, align 8
  %current = alloca i64, align 8
  %remaining = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %next = alloca i64, align 8
  %next.f = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %varargslots33 = alloca [2 x %any], align 16
  %indirectarg36 = alloca %"any[]", align 8
  %reterr41 = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !4020
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !4020
  br i1 %3, label %panic, label %checkok, !dbg !4020

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !4021, !DIExpression(), !4022)
  br label %loop.body, !dbg !4023

loop.body:                                        ; preds = %if.then18, %checkok
    #dbg_declare(ptr %len, !4024, !DIExpression(), !4027)
  %4 = load ptr, ptr %self, align 8, !dbg !4028
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !4028
  %5 = load i64, ptr %ptradd, align 8, !dbg !4028
  store i64 %5, ptr %len, align 8, !dbg !4028
    #dbg_declare(ptr %current, !4029, !DIExpression(), !4030)
  %6 = load ptr, ptr %self, align 8, !dbg !4031
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 32, !dbg !4031
  %7 = load i64, ptr %ptradd1, align 8, !dbg !4031
  store i64 %7, ptr %current, align 8, !dbg !4031
  %8 = load i64, ptr %current, align 8, !dbg !4032
  %9 = load i64, ptr %len, align 8, !dbg !4033
  %ge = icmp uge i64 %8, %9, !dbg !4032
  br i1 %ge, label %if.then, label %if.exit, !dbg !4032

if.then:                                          ; preds = %loop.body
  ret i64 ptrtoint (ptr @"std.core.builtin.IteratorResult$NO_MORE_ELEMENT" to i64), !dbg !4034

if.exit:                                          ; preds = %loop.body
    #dbg_declare(ptr %remaining, !4035, !DIExpression(), !4036)
  %10 = load ptr, ptr %self, align 8, !dbg !4037
  %11 = load %"char[]", ptr %10, align 8, !dbg !4037
  %12 = extractvalue %"char[]" %11, 0, !dbg !4037
  %13 = load i64, ptr %current, align 8, !dbg !4038
  %14 = extractvalue %"char[]" %11, 1, !dbg !4038
  %gt = icmp ugt i64 %13, %14, !dbg !4038
  %15 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !4038
  br i1 %15, label %panic2, label %checkok5, !dbg !4038

checkok5:                                         ; preds = %if.exit
  %size = sub i64 %14, %13, !dbg !4037
  %ptradd6 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !4037
  %16 = insertvalue %"char[]" undef, ptr %ptradd6, 0, !dbg !4037
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !4037
  store %"char[]" %17, ptr %remaining, align 8, !dbg !4037
    #dbg_declare(ptr %next, !4039, !DIExpression(), !4040)
  %18 = load ptr, ptr %self, align 8, !dbg !4041
  %ptradd7 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !4041
  %lo = load ptr, ptr %remaining, align 8
  %ptradd8 = getelementptr inbounds i8, ptr %remaining, i64 8
  %hi = load i64, ptr %ptradd8, align 8
  %lo9 = load ptr, ptr %ptradd7, align 8
  %ptradd10 = getelementptr inbounds i8, ptr %ptradd7, i64 8
  %hi11 = load i64, ptr %ptradd10, align 8
  %19 = call i64 @std.core.String.index_of(ptr %retparam, ptr %lo, i64 %hi, ptr %lo9, i64 %hi11), !dbg !4042
  %not_err = icmp eq i64 %19, 0, !dbg !4042
  %20 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4042
  br i1 %20, label %after_check, label %assign_optional, !dbg !4042

assign_optional:                                  ; preds = %checkok5
  store i64 %19, ptr %next.f, align 8, !dbg !4042
  br label %after_assign, !dbg !4042

after_check:                                      ; preds = %checkok5
  %21 = load i64, ptr %retparam, align 8, !dbg !4042
  store i64 %21, ptr %next, align 8, !dbg !4042
  store i64 0, ptr %next.f, align 8, !dbg !4042
  br label %after_assign, !dbg !4042

after_assign:                                     ; preds = %after_check, %assign_optional
  %load.err = load i64, ptr %next.f, align 8, !dbg !4043
  %result = icmp eq i64 %load.err, 0, !dbg !4043
  br i1 %result, label %if.then12, label %if.exit39, !dbg !4043

if.then12:                                        ; preds = %after_assign
  %22 = load ptr, ptr %self, align 8, !dbg !4044
  %ptradd13 = getelementptr inbounds i8, ptr %22, i64 32, !dbg !4044
  %23 = load i64, ptr %current, align 8, !dbg !4046
  %24 = load i64, ptr %next, align 8, !dbg !4047
  %add = add i64 %23, %24, !dbg !4046
  %25 = load ptr, ptr %self, align 8, !dbg !4048
  %ptradd14 = getelementptr inbounds i8, ptr %25, i64 16, !dbg !4048
  %ptradd15 = getelementptr inbounds i8, ptr %ptradd14, i64 8, !dbg !4048
  %26 = load i64, ptr %ptradd15, align 8, !dbg !4048
  %add16 = add i64 %add, %26, !dbg !4046
  store i64 %add16, ptr %ptradd13, align 8, !dbg !4046
  %27 = load i64, ptr %next, align 8, !dbg !4049
  %i2nb = icmp eq i64 %27, 0, !dbg !4049
  br i1 %i2nb, label %and.rhs, label %and.phi, !dbg !4049

and.rhs:                                          ; preds = %if.then12
  %28 = load ptr, ptr %self, align 8, !dbg !4050
  %ptradd17 = getelementptr inbounds i8, ptr %28, i64 40, !dbg !4050
  %29 = load i8, ptr %ptradd17, align 8, !dbg !4050
  %30 = trunc i8 %29 to i1, !dbg !4050
  br label %and.phi, !dbg !4050

and.phi:                                          ; preds = %and.rhs, %if.then12
  %val = phi i1 [ false, %if.then12 ], [ %30, %and.rhs ], !dbg !4050
  br i1 %val, label %if.then18, label %if.exit19, !dbg !4050

if.then18:                                        ; preds = %and.phi
  br label %loop.body, !dbg !4051

if.exit19:                                        ; preds = %and.phi
  %31 = load %"char[]", ptr %remaining, align 8, !dbg !4052
  %32 = extractvalue %"char[]" %31, 0, !dbg !4052
  %33 = extractvalue %"char[]" %31, 1, !dbg !4053
  %gt20 = icmp ugt i64 0, %33, !dbg !4053
  %34 = call i1 @llvm.expect.i1(i1 %gt20, i1 false), !dbg !4053
  br i1 %34, label %panic21, label %checkok28, !dbg !4053

checkok28:                                        ; preds = %if.exit19
  %35 = load i64, ptr %next, align 8, !dbg !4054
  %add29 = add i64 0, %35, !dbg !4054
  %lt = icmp ult i64 %33, %add29, !dbg !4054
  %sub = sub i64 %add29, 1, !dbg !4054
  %36 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !4054
  br i1 %36, label %panic30, label %checkok37, !dbg !4054

checkok37:                                        ; preds = %checkok28
  %size38 = sub i64 %add29, 0, !dbg !4052
  %37 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !4052
  %38 = insertvalue %"char[]" %37, i64 %size38, 1, !dbg !4052
  store %"char[]" %38, ptr %0, align 8, !dbg !4052
  ret i64 0, !dbg !4052

if.exit39:                                        ; preds = %after_assign
  %39 = load ptr, ptr %self, align 8, !dbg !4055
  %ptradd40 = getelementptr inbounds i8, ptr %39, i64 32, !dbg !4055
  %40 = load i64, ptr %len, align 8, !dbg !4056
  store i64 %40, ptr %ptradd40, align 8, !dbg !4056
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %remaining, i32 16, i1 false), !dbg !4057
  ret i64 0, !dbg !4057

panic:                                            ; preds = %entry
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4022
  call void %41(ptr @.panic_msg.92, i64 62, ptr @.file.18, i64 9, ptr @.func.94, i64 4, i32 846) #5, !dbg !4022
  unreachable, !dbg !4022

panic2:                                           ; preds = %if.exit
  store i64 %14, ptr %taddr, align 8
  %42 = insertvalue %any undef, ptr %taddr, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr3, align 8
  %44 = insertvalue %any undef, ptr %taddr3, 0
  %45 = insertvalue %any %44, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %43, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %45, ptr %ptradd4, align 16
  %46 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %46, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 61, ptr @.file.18, i64 9, ptr @.func.94, i64 4, i32 853, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !4037
  unreachable, !dbg !4037

panic21:                                          ; preds = %if.exit19
  store i64 %33, ptr %taddr22, align 8
  %47 = insertvalue %any undef, ptr %taddr22, 0
  %48 = insertvalue %any %47, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr23, align 8
  %49 = insertvalue %any undef, ptr %taddr23, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %48, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %50, ptr %ptradd25, align 16
  %51 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %51, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 61, ptr @.file.18, i64 9, ptr @.func.94, i64 4, i32 859, ptr byval(%"any[]") align 8 %indirectarg27) #5, !dbg !4052
  unreachable, !dbg !4052

panic30:                                          ; preds = %checkok28
  store i64 %sub, ptr %taddr31, align 8
  %52 = insertvalue %any undef, ptr %taddr31, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr32, align 8
  %54 = insertvalue %any undef, ptr %taddr32, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots33, align 16
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots33, i64 16
  store %any %55, ptr %ptradd34, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots33, 0
  %"$$temp35" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp35", ptr %indirectarg36, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 60, ptr @.file.18, i64 9, ptr @.func.94, i64 4, i32 859, ptr byval(%"any[]") align 8 %indirectarg36) #5, !dbg !4052
  unreachable, !dbg !4052
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.core.string.tformat_zstr(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !4058 {
entry:
  %fmt = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %str = alloca ptr, align 8
  %retparam = alloca i64, align 8
  store ptr %0, ptr %fmt, align 8
  %ptradd = getelementptr inbounds i8, ptr %fmt, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %fmt, !4070, !DIExpression(), !4071)
  store ptr %2, ptr %args, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %args, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %args, !4072, !DIExpression(), !4073)
    #dbg_declare(ptr %str, !4074, !DIExpression(), !4078)
  %ptradd2 = getelementptr inbounds i8, ptr %fmt, i64 8, !dbg !4079
  %4 = load i64, ptr %ptradd2, align 8, !dbg !4079
  %ptradd3 = getelementptr inbounds i8, ptr %args, i64 8, !dbg !4080
  %5 = load i64, ptr %ptradd3, align 8, !dbg !4080
  %mul = mul i64 %5, 8, !dbg !4080
  %add = add i64 %4, %mul, !dbg !4079
  %6 = call ptr @std.core.dstring.temp_with_capacity(i64 %add), !dbg !4081
  store ptr %6, ptr %str, align 8, !dbg !4081
  %lo = load ptr, ptr %fmt, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %fmt, i64 8
  %hi = load i64, ptr %ptradd4, align 8
  %lo5 = load ptr, ptr %args, align 8
  %ptradd6 = getelementptr inbounds i8, ptr %args, i64 8
  %hi7 = load i64, ptr %ptradd6, align 8
  %7 = call i64 @std.core.dstring.DString.appendf(ptr %retparam, ptr %str, ptr %lo, i64 %hi, ptr %lo5, i64 %hi7), !dbg !4082
  %8 = call ptr @std.core.dstring.DString.zstr_view(ptr %str), !dbg !4083
  ret ptr %8, !dbg !4083
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.string.format(ptr %0, i64 %1, ptr %2, i64 %3, i64 %4, ptr %5) #0 comdat !dbg !4084 {
entry:
  %fmt = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %allocator = alloca %any, align 8
  %current = alloca ptr, align 8
  %original = alloca ptr, align 8
  %mark = alloca i64, align 8
  %str = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %result = alloca %"char[]", align 8
  %taddr = alloca %"char[]", align 8
  store ptr %0, ptr %fmt, align 8
  %ptradd = getelementptr inbounds i8, ptr %fmt, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %fmt, !4087, !DIExpression(), !4088)
  store ptr %2, ptr %args, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %args, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %args, !4089, !DIExpression(), !4090)
  store i64 %4, ptr %allocator, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %5, ptr %ptradd2, align 8
    #dbg_declare(ptr %allocator, !4091, !DIExpression(), !4092)
    #dbg_declare(ptr %current, !4093, !DIExpression(), !4115)
  %6 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4117
  %i2nb = icmp eq ptr %6, null, !dbg !4117
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !4117

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !4120
  br label %if.exit, !dbg !4120

if.exit:                                          ; preds = %if.then, %entry
  %7 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4122
  store ptr %7, ptr %current, align 8, !dbg !4122
    #dbg_declare(ptr %original, !4123, !DIExpression(), !4124)
  %8 = load ptr, ptr %current, align 8, !dbg !4125
  store ptr %8, ptr %original, align 8, !dbg !4125
  %9 = load ptr, ptr %current, align 8, !dbg !4126
  %10 = load ptr, ptr %allocator, align 8, !dbg !4127
  %eq = icmp eq ptr %9, %10, !dbg !4126
  br i1 %eq, label %if.then3, label %if.exit4, !dbg !4126

if.then3:                                         ; preds = %if.exit
  %11 = call ptr @std.core.mem.allocator.temp_allocator_next(), !dbg !4128
  store ptr %11, ptr %current, align 8, !dbg !4128
  br label %if.exit4, !dbg !4128

if.exit4:                                         ; preds = %if.then3, %if.exit
    #dbg_declare(ptr %mark, !4129, !DIExpression(), !4130)
  %12 = load ptr, ptr %current, align 8, !dbg !4131
  %ptradd5 = getelementptr inbounds i8, ptr %12, i64 24, !dbg !4131
  %13 = load i64, ptr %ptradd5, align 8, !dbg !4131
  store i64 %13, ptr %mark, align 8, !dbg !4131
    #dbg_declare(ptr %str, !4132, !DIExpression(), !4134)
  %ptradd6 = getelementptr inbounds i8, ptr %fmt, i64 8, !dbg !4135
  %14 = load i64, ptr %ptradd6, align 8, !dbg !4135
  %ptradd7 = getelementptr inbounds i8, ptr %args, i64 8, !dbg !4136
  %15 = load i64, ptr %ptradd7, align 8, !dbg !4136
  %mul = mul i64 %15, 8, !dbg !4136
  %add = add i64 %14, %mul, !dbg !4135
  %16 = call ptr @std.core.dstring.temp_with_capacity(i64 %add), !dbg !4137
  store ptr %16, ptr %str, align 8, !dbg !4137
  %lo = load ptr, ptr %fmt, align 8
  %ptradd8 = getelementptr inbounds i8, ptr %fmt, i64 8
  %hi = load i64, ptr %ptradd8, align 8
  %lo9 = load ptr, ptr %args, align 8
  %ptradd10 = getelementptr inbounds i8, ptr %args, i64 8
  %hi11 = load i64, ptr %ptradd10, align 8
  %17 = call i64 @std.core.dstring.DString.appendf(ptr %retparam, ptr %str, ptr %lo, i64 %hi, ptr %lo9, i64 %hi11), !dbg !4138
  %18 = load ptr, ptr %str, align 8, !dbg !4139
  %lo12 = load i64, ptr %allocator, align 8, !dbg !4139
  %ptradd13 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !4139
  %hi14 = load ptr, ptr %ptradd13, align 8, !dbg !4139
  %19 = call { ptr, i64 } @std.core.dstring.DString.copy_str(ptr %18, i64 %lo12, ptr %hi14), !dbg !4140
  store { ptr, i64 } %19, ptr %result, align 8
  %20 = load %"char[]", ptr %result, align 8
  %21 = load ptr, ptr %current, align 8, !dbg !4141
  %22 = load i64, ptr %mark, align 8, !dbg !4141
  call void @std.core.mem.allocator.TempAllocator.reset(ptr %21, i64 %22), !dbg !4143
  %23 = load ptr, ptr %original, align 8, !dbg !4144
  store ptr %23, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4144
  store %"char[]" %20, ptr %taddr, align 8
  %24 = load { ptr, i64 }, ptr %taddr, align 8
  ret { ptr, i64 } %24
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.string.new_format(ptr %0, i64 %1, ptr %2, i64 %3, i64 %4, ptr %5) #0 comdat !dbg !4145 {
entry:
  %fmt = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %allocator = alloca %any, align 8
  %taddr = alloca %any, align 8
  %result = alloca %"char[]", align 8
  store ptr %0, ptr %fmt, align 8
  %ptradd = getelementptr inbounds i8, ptr %fmt, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %fmt, !4146, !DIExpression(), !4147)
  store ptr %2, ptr %args, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %args, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %args, !4148, !DIExpression(), !4149)
  store i64 %4, ptr %allocator, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %5, ptr %ptradd2, align 8
    #dbg_declare(ptr %allocator, !4150, !DIExpression(), !4151)
  %6 = load %any, ptr %allocator, align 8, !dbg !4152
  %7 = extractvalue %any %6, 0, !dbg !4152
  %i2b = icmp ne ptr %7, null, !dbg !4152
  br i1 %i2b, label %cond.lhs, label %cond.rhs, !dbg !4152

cond.lhs:                                         ; preds = %entry
  br label %cond.phi, !dbg !4152

cond.rhs:                                         ; preds = %entry
  %8 = load %any, ptr @std.core.mem.allocator.thread_allocator, align 8, !dbg !4153
  br label %cond.phi, !dbg !4153

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi %any [ %6, %cond.lhs ], [ %8, %cond.rhs ], !dbg !4153
  %lo = load ptr, ptr %fmt, align 8, !dbg !4153
  %ptradd3 = getelementptr inbounds i8, ptr %fmt, i64 8, !dbg !4153
  %hi = load i64, ptr %ptradd3, align 8, !dbg !4153
  %lo4 = load ptr, ptr %args, align 8, !dbg !4153
  %ptradd5 = getelementptr inbounds i8, ptr %args, i64 8, !dbg !4153
  %hi6 = load i64, ptr %ptradd5, align 8, !dbg !4153
  store %any %val, ptr %taddr, align 8
  %lo7 = load i64, ptr %taddr, align 8
  %ptradd8 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi9 = load ptr, ptr %ptradd8, align 8
  %9 = call { ptr, i64 } @std.core.string.format(ptr %lo, i64 %hi, ptr %lo4, i64 %hi6, i64 %lo7, ptr %hi9), !dbg !4156
  store { ptr, i64 } %9, ptr %result, align 8
  %10 = load { ptr, i64 }, ptr %result, align 8
  ret { ptr, i64 } %10
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.string.tformat(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !4157 {
entry:
  %fmt = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %str = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %result = alloca %"char[]", align 8
  store ptr %0, ptr %fmt, align 8
  %ptradd = getelementptr inbounds i8, ptr %fmt, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %fmt, !4160, !DIExpression(), !4161)
  store ptr %2, ptr %args, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %args, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %args, !4162, !DIExpression(), !4163)
    #dbg_declare(ptr %str, !4164, !DIExpression(), !4165)
  %ptradd2 = getelementptr inbounds i8, ptr %fmt, i64 8, !dbg !4166
  %4 = load i64, ptr %ptradd2, align 8, !dbg !4166
  %ptradd3 = getelementptr inbounds i8, ptr %args, i64 8, !dbg !4167
  %5 = load i64, ptr %ptradd3, align 8, !dbg !4167
  %mul = mul i64 %5, 8, !dbg !4167
  %add = add i64 %4, %mul, !dbg !4166
  %6 = call ptr @std.core.dstring.temp_with_capacity(i64 %add), !dbg !4168
  store ptr %6, ptr %str, align 8, !dbg !4168
  %lo = load ptr, ptr %fmt, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %fmt, i64 8
  %hi = load i64, ptr %ptradd4, align 8
  %lo5 = load ptr, ptr %args, align 8
  %ptradd6 = getelementptr inbounds i8, ptr %args, i64 8
  %hi7 = load i64, ptr %ptradd6, align 8
  %7 = call i64 @std.core.dstring.DString.appendf(ptr %retparam, ptr %str, ptr %lo, i64 %hi, ptr %lo5, i64 %hi7), !dbg !4169
  %8 = load ptr, ptr %str, align 8, !dbg !4170
  %9 = call { ptr, i64 } @std.core.dstring.DString.str_view(ptr %8), !dbg !4170
  store { ptr, i64 } %9, ptr %result, align 8
  %10 = load { ptr, i64 }, ptr %result, align 8
  ret { ptr, i64 } %10
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.core.string.new_format_zstr(ptr %0, i64 %1, ptr %2, i64 %3, i64 %4, ptr %5) #0 comdat !dbg !4171 {
entry:
  %fmt = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %allocator = alloca %any, align 8
  %current = alloca ptr, align 8
  %original = alloca ptr, align 8
  %mark = alloca i64, align 8
  %str = alloca ptr, align 8
  %retparam = alloca i64, align 8
  store ptr %0, ptr %fmt, align 8
  %ptradd = getelementptr inbounds i8, ptr %fmt, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %fmt, !4174, !DIExpression(), !4175)
  store ptr %2, ptr %args, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %args, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %args, !4176, !DIExpression(), !4177)
  store i64 %4, ptr %allocator, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %5, ptr %ptradd2, align 8
    #dbg_declare(ptr %allocator, !4178, !DIExpression(), !4179)
    #dbg_declare(ptr %current, !4180, !DIExpression(), !4182)
  %6 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4184
  %i2nb = icmp eq ptr %6, null, !dbg !4184
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !4184

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !4187
  br label %if.exit, !dbg !4187

if.exit:                                          ; preds = %if.then, %entry
  %7 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4189
  store ptr %7, ptr %current, align 8, !dbg !4189
    #dbg_declare(ptr %original, !4190, !DIExpression(), !4191)
  %8 = load ptr, ptr %current, align 8, !dbg !4192
  store ptr %8, ptr %original, align 8, !dbg !4192
  %9 = load ptr, ptr %current, align 8, !dbg !4193
  %10 = load ptr, ptr %allocator, align 8, !dbg !4194
  %eq = icmp eq ptr %9, %10, !dbg !4193
  br i1 %eq, label %if.then3, label %if.exit4, !dbg !4193

if.then3:                                         ; preds = %if.exit
  %11 = call ptr @std.core.mem.allocator.temp_allocator_next(), !dbg !4195
  store ptr %11, ptr %current, align 8, !dbg !4195
  br label %if.exit4, !dbg !4195

if.exit4:                                         ; preds = %if.then3, %if.exit
    #dbg_declare(ptr %mark, !4196, !DIExpression(), !4197)
  %12 = load ptr, ptr %current, align 8, !dbg !4198
  %ptradd5 = getelementptr inbounds i8, ptr %12, i64 24, !dbg !4198
  %13 = load i64, ptr %ptradd5, align 8, !dbg !4198
  store i64 %13, ptr %mark, align 8, !dbg !4198
    #dbg_declare(ptr %str, !4199, !DIExpression(), !4201)
  %ptradd6 = getelementptr inbounds i8, ptr %fmt, i64 8, !dbg !4202
  %14 = load i64, ptr %ptradd6, align 8, !dbg !4202
  %ptradd7 = getelementptr inbounds i8, ptr %args, i64 8, !dbg !4203
  %15 = load i64, ptr %ptradd7, align 8, !dbg !4203
  %mul = mul i64 %15, 8, !dbg !4203
  %add = add i64 %14, %mul, !dbg !4202
  %16 = call ptr @std.core.dstring.temp_with_capacity(i64 %add), !dbg !4204
  store ptr %16, ptr %str, align 8, !dbg !4204
  %lo = load ptr, ptr %fmt, align 8
  %ptradd8 = getelementptr inbounds i8, ptr %fmt, i64 8
  %hi = load i64, ptr %ptradd8, align 8
  %lo9 = load ptr, ptr %args, align 8
  %ptradd10 = getelementptr inbounds i8, ptr %args, i64 8
  %hi11 = load i64, ptr %ptradd10, align 8
  %17 = call i64 @std.core.dstring.DString.appendf(ptr %retparam, ptr %str, ptr %lo, i64 %hi, ptr %lo9, i64 %hi11), !dbg !4205
  %18 = load ptr, ptr %str, align 8, !dbg !4206
  %lo12 = load i64, ptr %allocator, align 8, !dbg !4206
  %ptradd13 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !4206
  %hi14 = load ptr, ptr %ptradd13, align 8, !dbg !4206
  %19 = call ptr @std.core.dstring.DString.copy_zstr(ptr %18, i64 %lo12, ptr %hi14), !dbg !4207
  %20 = load ptr, ptr %current, align 8, !dbg !4208
  %21 = load i64, ptr %mark, align 8, !dbg !4208
  call void @std.core.mem.allocator.TempAllocator.reset(ptr %20, i64 %21), !dbg !4210
  %22 = load ptr, ptr %original, align 8, !dbg !4211
  store ptr %22, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4211
  ret ptr %19, !dbg !4212
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.string.join_new(ptr %0, i64 %1, ptr %2, i64 %3, i64 %4, ptr %5) #0 comdat !dbg !4213 {
entry:
  %s = alloca %"char[][]", align 8
  %joiner = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %allocator4 = alloca %any, align 8
  %elements = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator5 = alloca %any, align 8
  %elements6 = alloca i64, align 8
  %allocator7 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %taddr13 = alloca i64, align 8
  %taddr14 = alloca i64, align 8
  %varargslots15 = alloca [2 x %any], align 16
  %indirectarg18 = alloca %"any[]", align 8
  %taddr20 = alloca i64, align 8
  %taddr21 = alloca i64, align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr27 = alloca %"char[]", align 8
  %total_size = alloca i64, align 8
  %.anon = alloca i64, align 8
  %str = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %varargslots38 = alloca [2 x %any], align 16
  %indirectarg41 = alloca %"any[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %varargslots48 = alloca [2 x %any], align 16
  %indirectarg51 = alloca %"any[]", align 8
  %current = alloca ptr, align 8
  %original = alloca ptr, align 8
  %mark = alloca i64, align 8
  %res = alloca ptr, align 8
  %self = alloca ptr, align 8
  %taddr65 = alloca i64, align 8
  %taddr66 = alloca i64, align 8
  %varargslots67 = alloca [2 x %any], align 16
  %indirectarg70 = alloca %"any[]", align 8
  %value = alloca %"char[]", align 8
  %taddr75 = alloca i64, align 8
  %taddr76 = alloca i64, align 8
  %varargslots77 = alloca [2 x %any], align 16
  %indirectarg80 = alloca %"any[]", align 8
  %taddr84 = alloca %"char[][]", align 8
  %taddr89 = alloca i64, align 8
  %taddr90 = alloca i64, align 8
  %varargslots91 = alloca [2 x %any], align 16
  %indirectarg94 = alloca %"any[]", align 8
  %.anon97 = alloca i64, align 8
  %str101 = alloca ptr, align 8
  %taddr106 = alloca i64, align 8
  %taddr107 = alloca i64, align 8
  %varargslots108 = alloca [2 x %any], align 16
  %indirectarg111 = alloca %"any[]", align 8
  %taddr116 = alloca i64, align 8
  %taddr117 = alloca i64, align 8
  %varargslots118 = alloca [2 x %any], align 16
  %indirectarg121 = alloca %"any[]", align 8
  %self124 = alloca ptr, align 8
  %value125 = alloca %"char[]", align 8
  %self129 = alloca ptr, align 8
  %taddr134 = alloca i64, align 8
  %taddr135 = alloca i64, align 8
  %varargslots136 = alloca [2 x %any], align 16
  %indirectarg139 = alloca %"any[]", align 8
  %value141 = alloca %"char[]", align 8
  %result = alloca %"char[]", align 8
  %taddr150 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !4216, !DIExpression(), !4217)
  store ptr %2, ptr %joiner, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %joiner, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %joiner, !4218, !DIExpression(), !4219)
  store i64 %4, ptr %allocator, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %5, ptr %ptradd2, align 8
    #dbg_declare(ptr %allocator, !4220, !DIExpression(), !4221)
  %ptradd3 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !4222
  %6 = load i64, ptr %ptradd3, align 8, !dbg !4222
  %neq = icmp ne i64 %6, 0, !dbg !4222
  %not = xor i1 %neq, true, !dbg !4222
  br i1 %not, label %if.then, label %if.exit28, !dbg !4222

if.then:                                          ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator4, ptr align 8 %allocator, i32 16, i1 false)
  store i64 2, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator5, ptr align 8 %allocator4, i32 16, i1 false)
  %7 = load i64, ptr %elements, align 8
  store i64 %7, ptr %elements6, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator7, ptr align 8 %allocator5, i32 16, i1 false)
  %8 = load i64, ptr %elements6, align 8, !dbg !4223
  %mul = mul i64 1, %8, !dbg !4229
  store i64 %mul, ptr %size, align 8
  %9 = load i64, ptr %size, align 8, !dbg !4230
  %i2nb = icmp eq i64 %9, 0, !dbg !4230
  br i1 %i2nb, label %if.then8, label %if.exit, !dbg !4230

if.then8:                                         ; preds = %if.then
  store ptr null, ptr %blockret, align 8, !dbg !4233
  br label %expr_block.exit, !dbg !4233

if.exit:                                          ; preds = %if.then
  %ptradd9 = getelementptr inbounds i8, ptr %allocator7, i64 8, !dbg !4234
  %10 = load i64, ptr %ptradd9, align 8, !dbg !4234
  %11 = inttoptr i64 %10 to ptr, !dbg !4234
  %type = load ptr, ptr %.cachedtype, align 8
  %12 = icmp eq ptr %11, %type
  br i1 %12, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd10 = getelementptr inbounds i8, ptr %11, i64 16
  %13 = load ptr, ptr %ptradd10, align 8
  %14 = call ptr @.dyn_search(ptr %13, ptr @"$sel.acquire")
  store ptr %14, ptr %.inlinecache, align 8
  store ptr %11, ptr %.cachedtype, align 8
  br label %15

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %15

15:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %14, %cache_miss ]
  %16 = icmp eq ptr %fn_phi, null
  br i1 %16, label %missing_function, label %match

missing_function:                                 ; preds = %15
  %17 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4236
  call void %17(ptr @.panic_msg, i64 44, ptr @.file, i64 16, ptr @.func, i64 8, i32 80) #5, !dbg !4236
  unreachable, !dbg !4236

match:                                            ; preds = %15
  %18 = load ptr, ptr %allocator7, align 8
  %19 = load i64, ptr %size, align 8
  %20 = call i64 %fn_phi(ptr %retparam, ptr %18, i64 %19, i32 1, i64 0), !dbg !4236
  %not_err = icmp eq i64 %20, 0, !dbg !4236
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4236
  br i1 %21, label %after_check, label %assign_optional, !dbg !4236

assign_optional:                                  ; preds = %match
  store i64 %20, ptr %error_var, align 8, !dbg !4236
  br label %panic_block, !dbg !4236

after_check:                                      ; preds = %match
  %22 = load ptr, ptr %retparam, align 8, !dbg !4236
  store ptr %22, ptr %blockret, align 8, !dbg !4236
  br label %expr_block.exit, !dbg !4236

expr_block.exit:                                  ; preds = %after_check, %if.then8
  %23 = load ptr, ptr %blockret, align 8, !dbg !4236
  store ptr %23, ptr %taddr, align 8
  %24 = load ptr, ptr %taddr, align 8
  %25 = load i64, ptr %elements6, align 8, !dbg !4237
  %add = add i64 0, %25, !dbg !4237
  %size11 = sub i64 %add, 0, !dbg !4237
  %26 = insertvalue %"char[]" undef, ptr %24, 0, !dbg !4237
  %27 = insertvalue %"char[]" %26, i64 %size11, 1, !dbg !4237
  br label %noerr_block, !dbg !4237

panic_block:                                      ; preds = %assign_optional
  %28 = insertvalue %any undef, ptr %error_var, 0, !dbg !4237
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !4237
  store %any %29, ptr %varargslots, align 16
  %30 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %30, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 36, ptr @.file, i64 16, ptr @.func, i64 8, i32 244, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !4225
  unreachable, !dbg !4225

noerr_block:                                      ; preds = %expr_block.exit
  store %"char[]" %27, ptr %taddr12, align 8
  %31 = load %"char[]", ptr %taddr12, align 8
  %32 = extractvalue %"char[]" %31, 0
  %33 = extractvalue %"char[]" %31, 1
  %gt = icmp sgt i64 0, %33
  %34 = call i1 @llvm.expect.i1(i1 %gt, i1 false)
  br i1 %34, label %panic, label %checkok

checkok:                                          ; preds = %noerr_block
  %lt = icmp slt i64 %33, 0, !dbg !4238
  %35 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !4238
  br i1 %35, label %panic19, label %checkok26, !dbg !4238

checkok26:                                        ; preds = %checkok
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !4238
  %37 = insertvalue %"char[]" %36, i64 0, 1, !dbg !4238
  store %"char[]" %37, ptr %taddr27, align 8
  %38 = load { ptr, i64 }, ptr %taddr27, align 8
  ret { ptr, i64 } %38

if.exit28:                                        ; preds = %entry
    #dbg_declare(ptr %total_size, !4239, !DIExpression(), !4240)
  %ptradd29 = getelementptr inbounds i8, ptr %joiner, i64 8, !dbg !4241
  %39 = load i64, ptr %ptradd29, align 8, !dbg !4241
  %ptradd30 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !4242
  %40 = load i64, ptr %ptradd30, align 8, !dbg !4242
  %mul31 = mul i64 %39, %40, !dbg !4241
  store i64 %mul31, ptr %total_size, align 8, !dbg !4241
  %ptradd32 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !4243
  %41 = load i64, ptr %ptradd32, align 8, !dbg !4243
    #dbg_declare(ptr %.anon, !4245, !DIExpression(), !4243)
  store i64 0, ptr %.anon, align 8, !dbg !4243
  br label %loop.cond, !dbg !4243

loop.cond:                                        ; preds = %checkok52, %if.exit28
  %42 = load i64, ptr %.anon, align 8, !dbg !4243
  %lt33 = icmp ult i64 %42, %41, !dbg !4243
  br i1 %lt33, label %loop.body, label %loop.exit, !dbg !4243

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %str, !4246, !DIExpression(), !4248)
  %ptradd34 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !4249
  %43 = load i64, ptr %ptradd34, align 8, !dbg !4249
  %44 = load ptr, ptr %s, align 8, !dbg !4249
  %45 = load i64, ptr %.anon, align 8, !dbg !4249
  %ge = icmp uge i64 %45, %43, !dbg !4249
  %46 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !4249
  br i1 %46, label %panic35, label %checkok42, !dbg !4249

checkok42:                                        ; preds = %loop.body
  %ptroffset = getelementptr inbounds [16 x i8], ptr %44, i64 %45, !dbg !4249
  store ptr %ptroffset, ptr %str, align 8, !dbg !4249
  %47 = load i64, ptr %total_size, align 8, !dbg !4250
  %48 = load ptr, ptr %str, align 8, !dbg !4252
  %checknull = icmp eq ptr %48, null, !dbg !4252
  %49 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !4252
  br i1 %49, label %panic43, label %checkok44, !dbg !4252

checkok44:                                        ; preds = %checkok42
  %50 = ptrtoint ptr %48 to i64, !dbg !4252
  %51 = urem i64 %50, 8, !dbg !4252
  %52 = icmp ne i64 %51, 0, !dbg !4252
  %53 = call i1 @llvm.expect.i1(i1 %52, i1 false), !dbg !4252
  br i1 %53, label %panic45, label %checkok52, !dbg !4252

checkok52:                                        ; preds = %checkok44
  %ptradd53 = getelementptr inbounds i8, ptr %48, i64 8, !dbg !4252
  %54 = load i64, ptr %ptradd53, align 8, !dbg !4252
  %add54 = add i64 %47, %54, !dbg !4250
  store i64 %add54, ptr %total_size, align 8, !dbg !4250
  %55 = load i64, ptr %.anon, align 8, !dbg !4243
  %addnuw = add nuw i64 %55, 1, !dbg !4243
  store i64 %addnuw, ptr %.anon, align 8, !dbg !4243
  br label %loop.cond, !dbg !4243

loop.exit:                                        ; preds = %loop.cond
    #dbg_declare(ptr %current, !4253, !DIExpression(), !4255)
  %56 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4257
  %i2nb56 = icmp eq ptr %56, null, !dbg !4257
  br i1 %i2nb56, label %if.then57, label %if.exit58, !dbg !4257

if.then57:                                        ; preds = %loop.exit
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !4260
  br label %if.exit58, !dbg !4260

if.exit58:                                        ; preds = %if.then57, %loop.exit
  %57 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4262
  store ptr %57, ptr %current, align 8, !dbg !4262
    #dbg_declare(ptr %original, !4263, !DIExpression(), !4264)
  %58 = load ptr, ptr %current, align 8, !dbg !4265
  store ptr %58, ptr %original, align 8, !dbg !4265
  %59 = load ptr, ptr %current, align 8, !dbg !4266
  %60 = load ptr, ptr %allocator, align 8, !dbg !4267
  %eq = icmp eq ptr %59, %60, !dbg !4266
  br i1 %eq, label %if.then59, label %if.exit60, !dbg !4266

if.then59:                                        ; preds = %if.exit58
  %61 = call ptr @std.core.mem.allocator.temp_allocator_next(), !dbg !4268
  store ptr %61, ptr %current, align 8, !dbg !4268
  br label %if.exit60, !dbg !4268

if.exit60:                                        ; preds = %if.then59, %if.exit58
    #dbg_declare(ptr %mark, !4269, !DIExpression(), !4270)
  %62 = load ptr, ptr %current, align 8, !dbg !4271
  %ptradd61 = getelementptr inbounds i8, ptr %62, i64 24, !dbg !4271
  %63 = load i64, ptr %ptradd61, align 8, !dbg !4271
  store i64 %63, ptr %mark, align 8, !dbg !4271
    #dbg_declare(ptr %res, !4272, !DIExpression(), !4274)
  %64 = load i64, ptr %total_size, align 8, !dbg !4275
  %65 = call ptr @std.core.dstring.temp_with_capacity(i64 %64), !dbg !4276
  store ptr %65, ptr %res, align 8, !dbg !4276
  store ptr %res, ptr %self, align 8
  %ptradd62 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !4277
  %66 = load i64, ptr %ptradd62, align 8, !dbg !4277
  %67 = load ptr, ptr %s, align 8, !dbg !4277
  %ge63 = icmp sge i64 0, %66, !dbg !4278
  %68 = call i1 @llvm.expect.i1(i1 %ge63, i1 false), !dbg !4278
  br i1 %68, label %panic64, label %checkok71, !dbg !4278

checkok71:                                        ; preds = %if.exit60
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value, ptr align 8 %67, i32 16, i1 false)
  %69 = load ptr, ptr %self, align 8, !dbg !4279
  %lo = load ptr, ptr %value, align 8, !dbg !4279
  %ptradd72 = getelementptr inbounds i8, ptr %value, i64 8, !dbg !4279
  %hi = load i64, ptr %ptradd72, align 8, !dbg !4279
  call void @std.core.dstring.DString.append_chars(ptr %69, ptr %lo, i64 %hi), !dbg !4283
  %70 = load %"char[][]", ptr %s, align 8, !dbg !4284
  %71 = extractvalue %"char[][]" %70, 0, !dbg !4284
  %72 = extractvalue %"char[][]" %70, 1, !dbg !4286
  %gt73 = icmp sgt i64 1, %72, !dbg !4286
  %73 = call i1 @llvm.expect.i1(i1 %gt73, i1 false), !dbg !4286
  br i1 %73, label %panic74, label %checkok81, !dbg !4286

checkok81:                                        ; preds = %checkok71
  %size82 = sub i64 %72, 1, !dbg !4284
  %ptradd83 = getelementptr inbounds i8, ptr %71, i64 16, !dbg !4284
  %74 = insertvalue %"char[][]" undef, ptr %ptradd83, 0, !dbg !4284
  %75 = insertvalue %"char[][]" %74, i64 %size82, 1, !dbg !4284
  store %"char[][]" %75, ptr %taddr84, align 8
  %checknull85 = icmp eq ptr %taddr84, null, !dbg !4284
  %76 = call i1 @llvm.expect.i1(i1 %checknull85, i1 false), !dbg !4284
  br i1 %76, label %panic86, label %checkok87, !dbg !4284

checkok87:                                        ; preds = %checkok81
  %77 = ptrtoint ptr %taddr84 to i64, !dbg !4284
  %78 = urem i64 %77, 8, !dbg !4284
  %79 = icmp ne i64 %78, 0, !dbg !4284
  %80 = call i1 @llvm.expect.i1(i1 %79, i1 false), !dbg !4284
  br i1 %80, label %panic88, label %checkok95, !dbg !4284

checkok95:                                        ; preds = %checkok87
  %ptradd96 = getelementptr inbounds i8, ptr %taddr84, i64 8, !dbg !4284
  %81 = load i64, ptr %ptradd96, align 8, !dbg !4284
    #dbg_declare(ptr %.anon97, !4287, !DIExpression(), !4284)
  store i64 0, ptr %.anon97, align 8, !dbg !4284
  br label %loop.cond98, !dbg !4284

loop.cond98:                                      ; preds = %checkok140, %checkok95
  %82 = load i64, ptr %.anon97, align 8, !dbg !4284
  %lt99 = icmp ult i64 %82, %81, !dbg !4284
  br i1 %lt99, label %loop.body100, label %loop.exit146, !dbg !4284

loop.body100:                                     ; preds = %loop.cond98
    #dbg_declare(ptr %str101, !4288, !DIExpression(), !4290)
  %checknull102 = icmp eq ptr %taddr84, null, !dbg !4291
  %83 = call i1 @llvm.expect.i1(i1 %checknull102, i1 false), !dbg !4291
  br i1 %83, label %panic103, label %checkok104, !dbg !4291

checkok104:                                       ; preds = %loop.body100
  %84 = ptrtoint ptr %taddr84 to i64, !dbg !4291
  %85 = urem i64 %84, 8, !dbg !4291
  %86 = icmp ne i64 %85, 0, !dbg !4291
  %87 = call i1 @llvm.expect.i1(i1 %86, i1 false), !dbg !4291
  br i1 %87, label %panic105, label %checkok112, !dbg !4291

checkok112:                                       ; preds = %checkok104
  %ptradd113 = getelementptr inbounds i8, ptr %taddr84, i64 8, !dbg !4291
  %88 = load i64, ptr %ptradd113, align 8, !dbg !4291
  %89 = load ptr, ptr %taddr84, align 8, !dbg !4291
  %90 = load i64, ptr %.anon97, align 8, !dbg !4291
  %ge114 = icmp uge i64 %90, %88, !dbg !4291
  %91 = call i1 @llvm.expect.i1(i1 %ge114, i1 false), !dbg !4291
  br i1 %91, label %panic115, label %checkok122, !dbg !4291

checkok122:                                       ; preds = %checkok112
  %ptroffset123 = getelementptr inbounds [16 x i8], ptr %89, i64 %90, !dbg !4291
  store ptr %ptroffset123, ptr %str101, align 8, !dbg !4291
  store ptr %res, ptr %self124, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value125, ptr align 8 %joiner, i32 16, i1 false)
  %92 = load ptr, ptr %self124, align 8, !dbg !4292
  %lo126 = load ptr, ptr %value125, align 8, !dbg !4292
  %ptradd127 = getelementptr inbounds i8, ptr %value125, i64 8, !dbg !4292
  %hi128 = load i64, ptr %ptradd127, align 8, !dbg !4292
  call void @std.core.dstring.DString.append_chars(ptr %92, ptr %lo126, i64 %hi128), !dbg !4296
  store ptr %res, ptr %self129, align 8
  %93 = load ptr, ptr %str101, align 8, !dbg !4297
  %checknull130 = icmp eq ptr %93, null, !dbg !4297
  %94 = call i1 @llvm.expect.i1(i1 %checknull130, i1 false), !dbg !4297
  br i1 %94, label %panic131, label %checkok132, !dbg !4297

checkok132:                                       ; preds = %checkok122
  %95 = ptrtoint ptr %93 to i64, !dbg !4297
  %96 = urem i64 %95, 8, !dbg !4297
  %97 = icmp ne i64 %96, 0, !dbg !4297
  %98 = call i1 @llvm.expect.i1(i1 %97, i1 false), !dbg !4297
  br i1 %98, label %panic133, label %checkok140, !dbg !4297

checkok140:                                       ; preds = %checkok132
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value141, ptr align 8 %93, i32 16, i1 false)
  %99 = load ptr, ptr %self129, align 8, !dbg !4298
  %lo142 = load ptr, ptr %value141, align 8, !dbg !4298
  %ptradd143 = getelementptr inbounds i8, ptr %value141, i64 8, !dbg !4298
  %hi144 = load i64, ptr %ptradd143, align 8, !dbg !4298
  call void @std.core.dstring.DString.append_chars(ptr %99, ptr %lo142, i64 %hi144), !dbg !4301
  %100 = load i64, ptr %.anon97, align 8, !dbg !4284
  %addnuw145 = add nuw i64 %100, 1, !dbg !4284
  store i64 %addnuw145, ptr %.anon97, align 8, !dbg !4284
  br label %loop.cond98, !dbg !4284

loop.exit146:                                     ; preds = %loop.cond98
  %101 = load ptr, ptr %res, align 8, !dbg !4302
  %lo147 = load i64, ptr %allocator, align 8, !dbg !4302
  %ptradd148 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !4302
  %hi149 = load ptr, ptr %ptradd148, align 8, !dbg !4302
  %102 = call { ptr, i64 } @std.core.dstring.DString.copy_str(ptr %101, i64 %lo147, ptr %hi149), !dbg !4303
  store { ptr, i64 } %102, ptr %result, align 8
  %103 = load %"char[]", ptr %result, align 8
  %104 = load ptr, ptr %current, align 8, !dbg !4304
  %105 = load i64, ptr %mark, align 8, !dbg !4304
  call void @std.core.mem.allocator.TempAllocator.reset(ptr %104, i64 %105), !dbg !4306
  %106 = load ptr, ptr %original, align 8, !dbg !4307
  store ptr %106, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4307
  store %"char[]" %103, ptr %taddr150, align 8
  %107 = load { ptr, i64 }, ptr %taddr150, align 8
  ret { ptr, i64 } %107

panic:                                            ; preds = %noerr_block
  store i64 %33, ptr %taddr13, align 8
  %108 = insertvalue %any undef, ptr %taddr13, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr14, align 8
  %110 = insertvalue %any undef, ptr %taddr14, 0
  %111 = insertvalue %any %110, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %109, ptr %varargslots15, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots15, i64 16
  store %any %111, ptr %ptradd16, align 16
  %112 = insertvalue %"any[]" undef, ptr %varargslots15, 0
  %"$$temp17" = insertvalue %"any[]" %112, i64 2, 1
  store %"any[]" %"$$temp17", ptr %indirectarg18, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 61, ptr @.file.18, i64 9, ptr @.func, i64 8, i32 112, ptr byval(%"any[]") align 8 %indirectarg18) #5, !dbg !4238
  unreachable, !dbg !4238

panic19:                                          ; preds = %checkok
  store i64 -1, ptr %taddr20, align 8
  %113 = insertvalue %any undef, ptr %taddr20, 0
  %114 = insertvalue %any %113, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr21, align 8
  %115 = insertvalue %any undef, ptr %taddr21, 0
  %116 = insertvalue %any %115, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %114, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %116, ptr %ptradd23, align 16
  %117 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %117, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 60, ptr @.file.18, i64 9, ptr @.func, i64 8, i32 112, ptr byval(%"any[]") align 8 %indirectarg25) #5, !dbg !4238
  unreachable, !dbg !4238

panic35:                                          ; preds = %loop.body
  store i64 %43, ptr %taddr36, align 8
  %118 = insertvalue %any undef, ptr %taddr36, 0
  %119 = insertvalue %any %118, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %45, ptr %taddr37, align 8
  %120 = insertvalue %any undef, ptr %taddr37, 0
  %121 = insertvalue %any %120, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %119, ptr %varargslots38, align 16
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %121, ptr %ptradd39, align 16
  %122 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %122, i64 2, 1
  store %"any[]" %"$$temp40", ptr %indirectarg41, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func, i64 8, i32 116, ptr byval(%"any[]") align 8 %indirectarg41) #5, !dbg !4249
  unreachable, !dbg !4249

panic43:                                          ; preds = %checkok42
  %123 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4252
  call void %123(ptr @.panic_msg.21, i64 44, ptr @.file.18, i64 9, ptr @.func, i64 8, i32 118) #5, !dbg !4252
  unreachable, !dbg !4252

panic45:                                          ; preds = %checkok44
  store i64 8, ptr %taddr46, align 8
  %124 = insertvalue %any undef, ptr %taddr46, 0
  %125 = insertvalue %any %124, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %51, ptr %taddr47, align 8
  %126 = insertvalue %any undef, ptr %taddr47, 0
  %127 = insertvalue %any %126, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %125, ptr %varargslots48, align 16
  %ptradd49 = getelementptr inbounds i8, ptr %varargslots48, i64 16
  store %any %127, ptr %ptradd49, align 16
  %128 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp50" = insertvalue %"any[]" %128, i64 2, 1
  store %"any[]" %"$$temp50", ptr %indirectarg51, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 94, ptr @.file.18, i64 9, ptr @.func, i64 8, i32 118, ptr byval(%"any[]") align 8 %indirectarg51) #5, !dbg !4252
  unreachable, !dbg !4252

panic64:                                          ; preds = %if.exit60
  store i64 %66, ptr %taddr65, align 8
  %129 = insertvalue %any undef, ptr %taddr65, 0
  %130 = insertvalue %any %129, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr66, align 8
  %131 = insertvalue %any undef, ptr %taddr66, 0
  %132 = insertvalue %any %131, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %130, ptr %varargslots67, align 16
  %ptradd68 = getelementptr inbounds i8, ptr %varargslots67, i64 16
  store %any %132, ptr %ptradd68, align 16
  %133 = insertvalue %"any[]" undef, ptr %varargslots67, 0
  %"$$temp69" = insertvalue %"any[]" %133, i64 2, 1
  store %"any[]" %"$$temp69", ptr %indirectarg70, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func, i64 8, i32 123, ptr byval(%"any[]") align 8 %indirectarg70) #5, !dbg !4278
  unreachable, !dbg !4278

panic74:                                          ; preds = %checkok71
  store i64 %72, ptr %taddr75, align 8
  %134 = insertvalue %any undef, ptr %taddr75, 0
  %135 = insertvalue %any %134, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr76, align 8
  %136 = insertvalue %any undef, ptr %taddr76, 0
  %137 = insertvalue %any %136, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %135, ptr %varargslots77, align 16
  %ptradd78 = getelementptr inbounds i8, ptr %varargslots77, i64 16
  store %any %137, ptr %ptradd78, align 16
  %138 = insertvalue %"any[]" undef, ptr %varargslots77, 0
  %"$$temp79" = insertvalue %"any[]" %138, i64 2, 1
  store %"any[]" %"$$temp79", ptr %indirectarg80, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 61, ptr @.file.18, i64 9, ptr @.func, i64 8, i32 124, ptr byval(%"any[]") align 8 %indirectarg80) #5, !dbg !4284
  unreachable, !dbg !4284

panic86:                                          ; preds = %checkok81
  %139 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4284
  call void %139(ptr @.panic_msg.23, i64 47, ptr @.file.18, i64 9, ptr @.func, i64 8, i32 124) #5, !dbg !4284
  unreachable, !dbg !4284

panic88:                                          ; preds = %checkok87
  store i64 8, ptr %taddr89, align 8
  %140 = insertvalue %any undef, ptr %taddr89, 0
  %141 = insertvalue %any %140, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %78, ptr %taddr90, align 8
  %142 = insertvalue %any undef, ptr %taddr90, 0
  %143 = insertvalue %any %142, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %141, ptr %varargslots91, align 16
  %ptradd92 = getelementptr inbounds i8, ptr %varargslots91, i64 16
  store %any %143, ptr %ptradd92, align 16
  %144 = insertvalue %"any[]" undef, ptr %varargslots91, 0
  %"$$temp93" = insertvalue %"any[]" %144, i64 2, 1
  store %"any[]" %"$$temp93", ptr %indirectarg94, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 94, ptr @.file.18, i64 9, ptr @.func, i64 8, i32 124, ptr byval(%"any[]") align 8 %indirectarg94) #5, !dbg !4284
  unreachable, !dbg !4284

panic103:                                         ; preds = %loop.body100
  %145 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4291
  call void %145(ptr @.panic_msg.23, i64 47, ptr @.file.18, i64 9, ptr @.func, i64 8, i32 124) #5, !dbg !4291
  unreachable, !dbg !4291

panic105:                                         ; preds = %checkok104
  store i64 8, ptr %taddr106, align 8
  %146 = insertvalue %any undef, ptr %taddr106, 0
  %147 = insertvalue %any %146, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %85, ptr %taddr107, align 8
  %148 = insertvalue %any undef, ptr %taddr107, 0
  %149 = insertvalue %any %148, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %147, ptr %varargslots108, align 16
  %ptradd109 = getelementptr inbounds i8, ptr %varargslots108, i64 16
  store %any %149, ptr %ptradd109, align 16
  %150 = insertvalue %"any[]" undef, ptr %varargslots108, 0
  %"$$temp110" = insertvalue %"any[]" %150, i64 2, 1
  store %"any[]" %"$$temp110", ptr %indirectarg111, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 94, ptr @.file.18, i64 9, ptr @.func, i64 8, i32 124, ptr byval(%"any[]") align 8 %indirectarg111) #5, !dbg !4291
  unreachable, !dbg !4291

panic115:                                         ; preds = %checkok112
  store i64 %88, ptr %taddr116, align 8
  %151 = insertvalue %any undef, ptr %taddr116, 0
  %152 = insertvalue %any %151, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %90, ptr %taddr117, align 8
  %153 = insertvalue %any undef, ptr %taddr117, 0
  %154 = insertvalue %any %153, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %152, ptr %varargslots118, align 16
  %ptradd119 = getelementptr inbounds i8, ptr %varargslots118, i64 16
  store %any %154, ptr %ptradd119, align 16
  %155 = insertvalue %"any[]" undef, ptr %varargslots118, 0
  %"$$temp120" = insertvalue %"any[]" %155, i64 2, 1
  store %"any[]" %"$$temp120", ptr %indirectarg121, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 59, ptr @.file.18, i64 9, ptr @.func, i64 8, i32 124, ptr byval(%"any[]") align 8 %indirectarg121) #5, !dbg !4291
  unreachable, !dbg !4291

panic131:                                         ; preds = %checkok122
  %156 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4297
  call void %156(ptr @.panic_msg.21, i64 44, ptr @.file.18, i64 9, ptr @.func, i64 8, i32 127) #5, !dbg !4297
  unreachable, !dbg !4297

panic133:                                         ; preds = %checkok132
  store i64 8, ptr %taddr134, align 8
  %157 = insertvalue %any undef, ptr %taddr134, 0
  %158 = insertvalue %any %157, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %96, ptr %taddr135, align 8
  %159 = insertvalue %any undef, ptr %taddr135, 0
  %160 = insertvalue %any %159, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %158, ptr %varargslots136, align 16
  %ptradd137 = getelementptr inbounds i8, ptr %varargslots136, i64 16
  store %any %160, ptr %ptradd137, align 16
  %161 = insertvalue %"any[]" undef, ptr %varargslots136, 0
  %"$$temp138" = insertvalue %"any[]" %161, i64 2, 1
  store %"any[]" %"$$temp138", ptr %indirectarg139, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 94, ptr @.file.18, i64 9, ptr @.func, i64 8, i32 127, ptr byval(%"any[]") align 8 %indirectarg139) #5, !dbg !4297
  unreachable, !dbg !4297
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.new_from_utf32(ptr %0, ptr %1, i64 %2, i64 %3, ptr %4) #0 comdat !dbg !4308 {
entry:
  %utf32 = alloca %"uint[]", align 8
  %allocator = alloca %any, align 8
  %len = alloca i64, align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator3 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %1, ptr %utf32, align 8
  %ptradd = getelementptr inbounds i8, ptr %utf32, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %utf32, !4315, !DIExpression(), !4316)
  store i64 %3, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %allocator, !4317, !DIExpression(), !4318)
    #dbg_declare(ptr %len, !4319, !DIExpression(), !4320)
  %lo = load ptr, ptr %utf32, align 8, !dbg !4321
  %ptradd2 = getelementptr inbounds i8, ptr %utf32, i64 8, !dbg !4321
  %hi = load i64, ptr %ptradd2, align 8, !dbg !4321
  %5 = call i64 @std.core.string.conv.utf8len_for_utf32(ptr %lo, i64 %hi), !dbg !4322
  store i64 %5, ptr %len, align 8, !dbg !4322
    #dbg_declare(ptr %data, !4323, !DIExpression(), !4324)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %6 = load i64, ptr %len, align 8, !dbg !4325
  %add = add i64 %6, 1, !dbg !4325
  store i64 %add, ptr %size, align 8
  %7 = load i64, ptr %size, align 8, !dbg !4326
  %i2nb = icmp eq i64 %7, 0, !dbg !4326
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !4326

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !4329
  br label %expr_block.exit, !dbg !4329

if.exit:                                          ; preds = %entry
  %ptradd4 = getelementptr inbounds i8, ptr %allocator3, i64 8, !dbg !4330
  %8 = load i64, ptr %ptradd4, align 8, !dbg !4330
  %9 = inttoptr i64 %8 to ptr, !dbg !4330
  %type = load ptr, ptr %.cachedtype, align 8
  %10 = icmp eq ptr %9, %type
  br i1 %10, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd5 = getelementptr inbounds i8, ptr %9, i64 16
  %11 = load ptr, ptr %ptradd5, align 8
  %12 = call ptr @.dyn_search(ptr %11, ptr @"$sel.acquire")
  store ptr %12, ptr %.inlinecache, align 8
  store ptr %9, ptr %.cachedtype, align 8
  br label %13

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %13

13:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %12, %cache_miss ]
  %14 = icmp eq ptr %fn_phi, null
  br i1 %14, label %missing_function, label %match

missing_function:                                 ; preds = %13
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4332
  call void %15(ptr @.panic_msg, i64 44, ptr @.file, i64 16, ptr @.func.24, i64 14, i32 68) #5, !dbg !4332
  unreachable, !dbg !4332

match:                                            ; preds = %13
  %16 = load ptr, ptr %allocator3, align 8
  %17 = load i64, ptr %size, align 8
  %18 = call i64 %fn_phi(ptr %retparam, ptr %16, i64 %17, i32 0, i64 0), !dbg !4332
  %not_err = icmp eq i64 %18, 0, !dbg !4332
  %19 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4332
  br i1 %19, label %after_check, label %assign_optional, !dbg !4332

assign_optional:                                  ; preds = %match
  store i64 %18, ptr %error_var, align 8, !dbg !4332
  br label %guard_block, !dbg !4332

after_check:                                      ; preds = %match
  %20 = load ptr, ptr %retparam, align 8, !dbg !4332
  store ptr %20, ptr %blockret, align 8, !dbg !4332
  br label %expr_block.exit, !dbg !4332

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !4332

guard_block:                                      ; preds = %assign_optional
  %21 = load i64, ptr %error_var, align 8, !dbg !4332
  ret i64 %21, !dbg !4332

noerr_block:                                      ; preds = %expr_block.exit
  %22 = load ptr, ptr %blockret, align 8, !dbg !4332
  store ptr %22, ptr %data, align 8, !dbg !4332
  %lo6 = load ptr, ptr %utf32, align 8, !dbg !4333
  %ptradd7 = getelementptr inbounds i8, ptr %utf32, i64 8, !dbg !4333
  %hi8 = load i64, ptr %ptradd7, align 8, !dbg !4333
  %23 = load ptr, ptr %data, align 8, !dbg !4333
  call void @std.core.string.conv.utf32to8_unsafe(ptr %lo6, i64 %hi8, ptr %23), !dbg !4334
  %24 = load ptr, ptr %data, align 8, !dbg !4335
  %25 = load i64, ptr %len, align 8, !dbg !4336
  %ptradd9 = getelementptr inbounds i8, ptr %24, i64 %25, !dbg !4336
  store i8 0, ptr %ptradd9, align 1, !dbg !4337
  %26 = load ptr, ptr %data, align 8, !dbg !4338
  %27 = load i64, ptr %len, align 8, !dbg !4339
  %add10 = add i64 0, %27, !dbg !4339
  %size11 = sub i64 %add10, 0, !dbg !4339
  %28 = insertvalue %"char[]" undef, ptr %26, 0, !dbg !4339
  %29 = insertvalue %"char[]" %28, i64 %size11, 1, !dbg !4339
  store %"char[]" %29, ptr %0, align 8, !dbg !4339
  ret i64 0, !dbg !4339
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.new_from_utf16(ptr %0, ptr %1, i64 %2, i64 %3, ptr %4) #0 comdat !dbg !4340 {
entry:
  %utf16 = alloca %"ushort[]", align 8
  %allocator = alloca %any, align 8
  %len = alloca i64, align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator3 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %error_var6 = alloca i64, align 8
  %allocator14 = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %.inlinecache19 = alloca ptr, align 8
  %.cachedtype20 = alloca ptr, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype20, align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %1, ptr %utf16, align 8
  %ptradd = getelementptr inbounds i8, ptr %utf16, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %utf16, !4347, !DIExpression(), !4348)
  store i64 %3, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %allocator, !4349, !DIExpression(), !4350)
    #dbg_declare(ptr %len, !4351, !DIExpression(), !4352)
  %lo = load ptr, ptr %utf16, align 8, !dbg !4353
  %ptradd2 = getelementptr inbounds i8, ptr %utf16, i64 8, !dbg !4353
  %hi = load i64, ptr %ptradd2, align 8, !dbg !4353
  %5 = call i64 @std.core.string.conv.utf8len_for_utf16(ptr %lo, i64 %hi), !dbg !4354
  store i64 %5, ptr %len, align 8, !dbg !4354
    #dbg_declare(ptr %data, !4355, !DIExpression(), !4356)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %6 = load i64, ptr %len, align 8, !dbg !4357
  %add = add i64 %6, 1, !dbg !4357
  store i64 %add, ptr %size, align 8
  %7 = load i64, ptr %size, align 8, !dbg !4358
  %i2nb = icmp eq i64 %7, 0, !dbg !4358
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !4358

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !4361
  br label %expr_block.exit, !dbg !4361

if.exit:                                          ; preds = %entry
  %ptradd4 = getelementptr inbounds i8, ptr %allocator3, i64 8, !dbg !4362
  %8 = load i64, ptr %ptradd4, align 8, !dbg !4362
  %9 = inttoptr i64 %8 to ptr, !dbg !4362
  %type = load ptr, ptr %.cachedtype, align 8
  %10 = icmp eq ptr %9, %type
  br i1 %10, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd5 = getelementptr inbounds i8, ptr %9, i64 16
  %11 = load ptr, ptr %ptradd5, align 8
  %12 = call ptr @.dyn_search(ptr %11, ptr @"$sel.acquire")
  store ptr %12, ptr %.inlinecache, align 8
  store ptr %9, ptr %.cachedtype, align 8
  br label %13

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %13

13:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %12, %cache_miss ]
  %14 = icmp eq ptr %fn_phi, null
  br i1 %14, label %missing_function, label %match

missing_function:                                 ; preds = %13
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4364
  call void %15(ptr @.panic_msg, i64 44, ptr @.file, i64 16, ptr @.func.25, i64 14, i32 68) #5, !dbg !4364
  unreachable, !dbg !4364

match:                                            ; preds = %13
  %16 = load ptr, ptr %allocator3, align 8
  %17 = load i64, ptr %size, align 8
  %18 = call i64 %fn_phi(ptr %retparam, ptr %16, i64 %17, i32 0, i64 0), !dbg !4364
  %not_err = icmp eq i64 %18, 0, !dbg !4364
  %19 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4364
  br i1 %19, label %after_check, label %assign_optional, !dbg !4364

assign_optional:                                  ; preds = %match
  store i64 %18, ptr %error_var, align 8, !dbg !4364
  br label %guard_block, !dbg !4364

after_check:                                      ; preds = %match
  %20 = load ptr, ptr %retparam, align 8, !dbg !4364
  store ptr %20, ptr %blockret, align 8, !dbg !4364
  br label %expr_block.exit, !dbg !4364

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !4364

guard_block:                                      ; preds = %assign_optional
  %21 = load i64, ptr %error_var, align 8, !dbg !4364
  ret i64 %21, !dbg !4364

noerr_block:                                      ; preds = %expr_block.exit
  %22 = load ptr, ptr %blockret, align 8, !dbg !4364
  store ptr %22, ptr %data, align 8, !dbg !4364
  %lo7 = load ptr, ptr %utf16, align 8, !dbg !4365
  %ptradd8 = getelementptr inbounds i8, ptr %utf16, i64 8, !dbg !4365
  %hi9 = load i64, ptr %ptradd8, align 8, !dbg !4365
  %23 = load ptr, ptr %data, align 8, !dbg !4365
  %24 = call i64 @std.core.string.conv.utf16to8_unsafe(ptr %lo7, i64 %hi9, ptr %23), !dbg !4366
  %not_err10 = icmp eq i64 %24, 0, !dbg !4366
  %25 = call i1 @llvm.expect.i1(i1 %not_err10, i1 true), !dbg !4366
  br i1 %25, label %after_check12, label %assign_optional11, !dbg !4366

assign_optional11:                                ; preds = %noerr_block
  store i64 %24, ptr %error_var6, align 8, !dbg !4366
  br label %guard_block13, !dbg !4366

after_check12:                                    ; preds = %noerr_block
  br label %noerr_block30, !dbg !4366

guard_block13:                                    ; preds = %assign_optional11
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator14, ptr align 8 %allocator, i32 16, i1 false)
  %26 = load ptr, ptr %data, align 8, !dbg !4367
  store ptr %26, ptr %ptr, align 8
  %27 = load ptr, ptr %ptr, align 8, !dbg !4369
  %i2nb15 = icmp eq ptr %27, null, !dbg !4369
  br i1 %i2nb15, label %if.then16, label %if.exit17, !dbg !4369

if.then16:                                        ; preds = %guard_block13
  br label %expr_block.exit29, !dbg !4372

if.exit17:                                        ; preds = %guard_block13
  %ptradd18 = getelementptr inbounds i8, ptr %allocator14, i64 8, !dbg !4373
  %28 = load i64, ptr %ptradd18, align 8, !dbg !4373
  %29 = inttoptr i64 %28 to ptr, !dbg !4373
  %type21 = load ptr, ptr %.cachedtype20, align 8
  %30 = icmp eq ptr %29, %type21
  br i1 %30, label %cache_hit24, label %cache_miss22

cache_miss22:                                     ; preds = %if.exit17
  %ptradd23 = getelementptr inbounds i8, ptr %29, i64 16
  %31 = load ptr, ptr %ptradd23, align 8
  %32 = call ptr @.dyn_search(ptr %31, ptr @"$sel.release")
  store ptr %32, ptr %.inlinecache19, align 8
  store ptr %29, ptr %.cachedtype20, align 8
  br label %33

cache_hit24:                                      ; preds = %if.exit17
  %cache_hit_fn25 = load ptr, ptr %.inlinecache19, align 8
  br label %33

33:                                               ; preds = %cache_hit24, %cache_miss22
  %fn_phi26 = phi ptr [ %cache_hit_fn25, %cache_hit24 ], [ %32, %cache_miss22 ]
  %34 = icmp eq ptr %fn_phi26, null
  br i1 %34, label %missing_function27, label %match28

missing_function27:                               ; preds = %33
  %35 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4374
  call void %35(ptr @.panic_msg.26, i64 44, ptr @.file, i64 16, ptr @.func.25, i64 14, i32 105) #5, !dbg !4374
  unreachable, !dbg !4374

match28:                                          ; preds = %33
  %36 = load ptr, ptr %allocator14, align 8, !dbg !4374
  %37 = load ptr, ptr %ptr, align 8, !dbg !4374
  call void %fn_phi26(ptr %36, ptr %37, i8 zeroext 0), !dbg !4374
  br label %expr_block.exit29, !dbg !4374

expr_block.exit29:                                ; preds = %match28, %if.then16
  %38 = load i64, ptr %error_var6, align 8, !dbg !4374
  ret i64 %38, !dbg !4374

noerr_block30:                                    ; preds = %after_check12
  %39 = load ptr, ptr %data, align 8, !dbg !4375
  %40 = load i64, ptr %len, align 8, !dbg !4376
  %ptradd31 = getelementptr inbounds i8, ptr %39, i64 %40, !dbg !4376
  store i8 0, ptr %ptradd31, align 1, !dbg !4377
  %41 = load ptr, ptr %data, align 8, !dbg !4378
  %42 = load i64, ptr %len, align 8, !dbg !4379
  %add32 = add i64 0, %42, !dbg !4379
  %size33 = sub i64 %add32, 0, !dbg !4379
  %43 = insertvalue %"char[]" undef, ptr %41, 0, !dbg !4379
  %44 = insertvalue %"char[]" %43, i64 %size33, 1, !dbg !4379
  store %"char[]" %44, ptr %0, align 8, !dbg !4379
  ret i64 0, !dbg !4379
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.new_from_wstring(ptr %0, ptr %1, i64 %2, ptr %3) #0 comdat !dbg !4380 {
entry:
  %wstring = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %utf16_len = alloca i64, align 8
  %utf16 = alloca %"ushort[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"char[]", align 8
  store ptr %1, ptr %wstring, align 8
    #dbg_declare(ptr %wstring, !4383, !DIExpression(), !4384)
  store i64 %2, ptr %allocator, align 8
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %3, ptr %ptradd, align 8
    #dbg_declare(ptr %allocator, !4385, !DIExpression(), !4386)
    #dbg_declare(ptr %utf16_len, !4387, !DIExpression(), !4388)
  store i64 0, ptr %utf16_len, align 8, !dbg !4388
  br label %loop.cond, !dbg !4389

loop.cond:                                        ; preds = %loop.body, %entry
  %4 = load ptr, ptr %wstring, align 8, !dbg !4390
  %5 = load i64, ptr %utf16_len, align 8, !dbg !4392
  %ptroffset = getelementptr inbounds [2 x i8], ptr %4, i64 %5, !dbg !4392
  %6 = load i16, ptr %ptroffset, align 2, !dbg !4392
  %zext = zext i16 %6 to i32, !dbg !4392
  %neq = icmp ne i32 0, %zext, !dbg !4390
  br i1 %neq, label %loop.body, label %loop.exit, !dbg !4390

loop.body:                                        ; preds = %loop.cond
  %7 = load i64, ptr %utf16_len, align 8, !dbg !4393
  %add = add i64 %7, 1, !dbg !4393
  store i64 %add, ptr %utf16_len, align 8, !dbg !4393
  br label %loop.cond, !dbg !4393

loop.exit:                                        ; preds = %loop.cond
    #dbg_declare(ptr %utf16, !4394, !DIExpression(), !4395)
  %8 = load ptr, ptr %wstring, align 8, !dbg !4396
  %9 = load i64, ptr %utf16_len, align 8, !dbg !4397
  %add1 = add i64 0, %9, !dbg !4397
  %size = sub i64 %add1, 0, !dbg !4397
  %10 = insertvalue %"ushort[]" undef, ptr %8, 0, !dbg !4397
  %11 = insertvalue %"ushort[]" %10, i64 %size, 1, !dbg !4397
  store %"ushort[]" %11, ptr %utf16, align 8, !dbg !4397
  %lo = load ptr, ptr %utf16, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %utf16, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load i64, ptr %allocator, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %allocator, i64 8
  %hi5 = load ptr, ptr %ptradd4, align 8
  %12 = call i64 @std.core.string.new_from_utf16(ptr %retparam, ptr %lo, i64 %hi, i64 %lo3, ptr %hi5), !dbg !4398
  %not_err = icmp eq i64 %12, 0, !dbg !4398
  %13 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4398
  br i1 %13, label %after_check, label %assign_optional, !dbg !4398

assign_optional:                                  ; preds = %loop.exit
  store i64 %12, ptr %reterr, align 8, !dbg !4398
  br label %err_retblock, !dbg !4398

after_check:                                      ; preds = %loop.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !4398
  ret i64 0, !dbg !4398

err_retblock:                                     ; preds = %assign_optional
  %14 = load i64, ptr %reterr, align 8, !dbg !4398
  ret i64 %14, !dbg !4398
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.temp_from_wstring(ptr %0, ptr %1) #0 comdat !dbg !4399 {
entry:
  %wstring = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"char[]", align 8
  %taddr = alloca %any, align 8
  store ptr %1, ptr %wstring, align 8
    #dbg_declare(ptr %wstring, !4402, !DIExpression(), !4403)
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4404
  %i2nb = icmp eq ptr %2, null, !dbg !4404
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !4404

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !4407
  br label %if.exit, !dbg !4407

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4409
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !4406
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !4406
  %6 = load ptr, ptr %wstring, align 8
  store %any %5, ptr %taddr, align 8
  %lo = load i64, ptr %taddr, align 8
  %ptradd = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi = load ptr, ptr %ptradd, align 8
  %7 = call i64 @std.core.string.new_from_wstring(ptr %retparam, ptr %6, i64 %lo, ptr %hi) #6, !dbg !4410
  %not_err = icmp eq i64 %7, 0, !dbg !4410
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4410
  br i1 %8, label %after_check, label %assign_optional, !dbg !4410

assign_optional:                                  ; preds = %if.exit
  store i64 %7, ptr %reterr, align 8, !dbg !4410
  br label %err_retblock, !dbg !4410

after_check:                                      ; preds = %if.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !4410
  ret i64 0, !dbg !4410

err_retblock:                                     ; preds = %assign_optional
  %9 = load i64, ptr %reterr, align 8, !dbg !4410
  ret i64 %9, !dbg !4410
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.temp_from_utf16(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !4411 {
entry:
  %utf16 = alloca %"ushort[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"char[]", align 8
  %taddr = alloca %any, align 8
  store ptr %1, ptr %utf16, align 8
  %ptradd = getelementptr inbounds i8, ptr %utf16, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %utf16, !4414, !DIExpression(), !4415)
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4416
  %i2nb = icmp eq ptr %3, null, !dbg !4416
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !4416

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !4419
  br label %if.exit, !dbg !4419

if.exit:                                          ; preds = %if.then, %entry
  %4 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4421
  %5 = insertvalue %any undef, ptr %4, 0, !dbg !4418
  %6 = insertvalue %any %5, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !4418
  %lo = load ptr, ptr %utf16, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %utf16, i64 8
  %hi = load i64, ptr %ptradd1, align 8
  store %any %6, ptr %taddr, align 8
  %lo2 = load i64, ptr %taddr, align 8
  %ptradd3 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi4 = load ptr, ptr %ptradd3, align 8
  %7 = call i64 @std.core.string.new_from_utf16(ptr %retparam, ptr %lo, i64 %hi, i64 %lo2, ptr %hi4) #6, !dbg !4422
  %not_err = icmp eq i64 %7, 0, !dbg !4422
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4422
  br i1 %8, label %after_check, label %assign_optional, !dbg !4422

assign_optional:                                  ; preds = %if.exit
  store i64 %7, ptr %reterr, align 8, !dbg !4422
  br label %err_retblock, !dbg !4422

after_check:                                      ; preds = %if.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !4422
  ret i64 0, !dbg !4422

err_retblock:                                     ; preds = %assign_optional
  %9 = load i64, ptr %reterr, align 8, !dbg !4422
  ret i64 %9, !dbg !4422
}

; Function Attrs: nounwind ssp uwtable
declare extern_weak ptr @std.core.dstring.temp_with_capacity(i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.dstring.DString.appendf(ptr, ptr, ptr, i64, ptr, i64) #0

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare i1 @llvm.expect.i1(i1, i1) #1

; Function Attrs: nounwind ssp uwtable
declare extern_weak ptr @std.core.dstring.DString.zstr_view(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.mem.allocator.init_default_temp_allocators() #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak ptr @std.core.mem.allocator.temp_allocator_next() #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak { ptr, i64 } @std.core.dstring.DString.copy_str(ptr, i64, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.mem.allocator.TempAllocator.reset(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak { ptr, i64 } @std.core.dstring.DString.str_view(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak ptr @std.core.dstring.DString.copy_zstr(ptr, i64, ptr) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i32(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i32, i1 immarg) #2

define weak ptr @.dyn_search(ptr %0, ptr %1) unnamed_addr comdat {
entry:
  br label %check

check:                                            ; preds = %no_match, %entry
  %2 = phi ptr [ %0, %entry ], [ %9, %no_match ]
  %3 = icmp eq ptr %2, null
  br i1 %3, label %missing_function, label %compare

missing_function:                                 ; preds = %check
  ret ptr null

compare:                                          ; preds = %check
  %4 = getelementptr inbounds { ptr, ptr, ptr }, ptr %2, i32 0, i32 1
  %5 = load ptr, ptr %4, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %match, label %no_match

match:                                            ; preds = %compare
  %7 = load ptr, ptr %2, align 8
  ret ptr %7

no_match:                                         ; preds = %compare
  %8 = getelementptr inbounds { ptr, ptr, ptr }, ptr %2, i32 0, i32 2
  %9 = load ptr, ptr %8, align 8
  br label %check
}

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.builtin.panicf(ptr, i64, ptr, i64, ptr, i64, i32, ptr byval(%"any[]") align 8) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.dstring.DString.append_chars(ptr, ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.string.conv.utf8len_for_utf32(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.string.conv.utf32to8_unsafe(ptr, i64, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.string.conv.utf8len_for_utf16(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.string.conv.utf16to8_unsafe(ptr, i64, ptr) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.string.conv.utf16len_for_utf8(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.string.conv.utf8to16_unsafe(ptr, i64, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.string.conv.utf8_codepoints(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.string.conv.utf8to32_unsafe(ptr, i64, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak zeroext i8 @std.ascii.char.is_upper(i8 zeroext) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak zeroext i8 @std.ascii.char.is_lower(i8 zeroext) #0

; Function Attrs: nounwind ssp uwtable
declare double @scalbn(double, i32) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.copysign.f64(double, double) #3

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fabs.f64(double) #3

attributes #0 = { nounwind ssp uwtable "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #5 = { noreturn }
attributes #6 = { alwaysinline }

!llvm.module.flags = !{!48, !49, !50, !51, !52, !53, !54}
!llvm.dbg.cu = !{!55}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "SURROGATE_OFFSET", linkageName: "std.core.string.SURROGATE_OFFSET", scope: !2, file: !2, line: 18, type: !3, isLocal: true, isDefinition: true, align: 4)
!2 = !DIFile(filename: "string.c3", directory: "/usr/local/lib/c3/std/core")
!3 = !DIBasicType(name: "uint", size: 32, encoding: DW_ATE_unsigned)
!4 = !DIGlobalVariableExpression(var: !5, expr: !DIExpression())
!5 = distinct !DIGlobalVariable(name: "SURROGATE_GENERIC_MASK", linkageName: "std.core.string.SURROGATE_GENERIC_MASK", scope: !2, file: !2, line: 19, type: !3, isLocal: true, isDefinition: true, align: 4)
!6 = !DIGlobalVariableExpression(var: !7, expr: !DIExpression())
!7 = distinct !DIGlobalVariable(name: "SURROGATE_MASK", linkageName: "std.core.string.SURROGATE_MASK", scope: !2, file: !2, line: 20, type: !3, isLocal: true, isDefinition: true, align: 4)
!8 = !DIGlobalVariableExpression(var: !9, expr: !DIExpression())
!9 = distinct !DIGlobalVariable(name: "SURROGATE_CODEPOINT_MASK", linkageName: "std.core.string.SURROGATE_CODEPOINT_MASK", scope: !2, file: !2, line: 21, type: !3, isLocal: true, isDefinition: true, align: 4)
!10 = !DIGlobalVariableExpression(var: !11, expr: !DIExpression())
!11 = distinct !DIGlobalVariable(name: "SURROGATE_BITS", linkageName: "std.core.string.SURROGATE_BITS", scope: !2, file: !2, line: 22, type: !3, isLocal: true, isDefinition: true, align: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(name: "SURROGATE_LOW_VALUE", linkageName: "std.core.string.SURROGATE_LOW_VALUE", scope: !2, file: !2, line: 23, type: !3, isLocal: true, isDefinition: true, align: 4)
!14 = !DIGlobalVariableExpression(var: !15, expr: !DIExpression())
!15 = distinct !DIGlobalVariable(name: "SURROGATE_HIGH_VALUE", linkageName: "std.core.string.SURROGATE_HIGH_VALUE", scope: !2, file: !2, line: 24, type: !3, isLocal: true, isDefinition: true, align: 4)
!16 = !DIGlobalVariableExpression(var: !17, expr: !DIExpression())
!17 = distinct !DIGlobalVariable(name: "BITS", linkageName: "to_double.BITS", scope: !2, file: !2, line: 460, type: !18, isLocal: true, isDefinition: true, align: 4)
!18 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!19 = !DIGlobalVariableExpression(var: !20, expr: !DIExpression())
!20 = distinct !DIGlobalVariable(name: "EMIN", linkageName: "to_double.EMIN", scope: !2, file: !2, line: 461, type: !18, isLocal: true, isDefinition: true, align: 4)
!21 = !DIGlobalVariableExpression(var: !22, expr: !DIExpression())
!22 = distinct !DIGlobalVariable(name: "TH", linkageName: "to_double.TH", scope: !2, file: !2, line: 40, type: !23, isLocal: true, isDefinition: true, align: 4)
!23 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3, size: 64, align: 32, elements: !24)
!24 = !{!25}
!25 = !DISubrange(count: 2, lowerBound: 0)
!26 = !DIGlobalVariableExpression(var: !27, expr: !DIExpression())
!27 = distinct !DIGlobalVariable(name: "P10S", linkageName: "to_double.P10S", scope: !2, file: !2, line: 43, type: !28, isLocal: true, isDefinition: true, align: 16)
!28 = !DICompositeType(tag: DW_TAG_array_type, baseType: !18, size: 256, align: 32, elements: !29)
!29 = !{!30}
!30 = !DISubrange(count: 8, lowerBound: 0)
!31 = !DIGlobalVariableExpression(var: !32, expr: !DIExpression())
!32 = distinct !DIGlobalVariable(name: "BITS", linkageName: "to_float.BITS", scope: !2, file: !2, line: 457, type: !18, isLocal: true, isDefinition: true, align: 4)
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(name: "EMIN", linkageName: "to_float.EMIN", scope: !2, file: !2, line: 458, type: !18, isLocal: true, isDefinition: true, align: 4)
!35 = !DIGlobalVariableExpression(var: !36, expr: !DIExpression())
!36 = distinct !DIGlobalVariable(name: "TH", linkageName: "to_float.TH", scope: !2, file: !2, line: 40, type: !23, isLocal: true, isDefinition: true, align: 4)
!37 = !DIGlobalVariableExpression(var: !38, expr: !DIExpression())
!38 = distinct !DIGlobalVariable(name: "P10S", linkageName: "to_float.P10S", scope: !2, file: !2, line: 43, type: !28, isLocal: true, isDefinition: true, align: 16)
!39 = !DIGlobalVariableExpression(var: !40, expr: !DIExpression())
!40 = distinct !DIGlobalVariable(name: "KMAX", linkageName: "std.core.string.KMAX", scope: !41, file: !41, line: 29, type: !18, isLocal: false, isDefinition: true, align: 4)
!41 = !DIFile(filename: "string_to_real.c3", directory: "/usr/local/lib/c3/std/core")
!42 = !DIGlobalVariableExpression(var: !43, expr: !DIExpression())
!43 = distinct !DIGlobalVariable(name: "MASK", linkageName: "std.core.string.MASK", scope: !41, file: !41, line: 30, type: !18, isLocal: false, isDefinition: true, align: 4)
!44 = !DIGlobalVariableExpression(var: !45, expr: !DIExpression())
!45 = distinct !DIGlobalVariable(name: "B1B_DIG", linkageName: "std.core.string.B1B_DIG", scope: !41, file: !41, line: 31, type: !18, isLocal: false, isDefinition: true, align: 4)
!46 = !DIGlobalVariableExpression(var: !47, expr: !DIExpression())
!47 = distinct !DIGlobalVariable(name: "B1B_MAX", linkageName: "std.core.string.B1B_MAX", scope: !41, file: !41, line: 32, type: !23, isLocal: false, isDefinition: true, align: 4)
!48 = !{i32 2, !"Dwarf Version", i32 4}
!49 = !{i32 2, !"Debug Info Version", i32 3}
!50 = !{i32 2, !"wchar_size", i32 4}
!51 = !{i32 4, !"PIE Level", i32 2}
!52 = !{i32 4, !"PIC Level", i32 2}
!53 = !{i32 1, !"uwtable", i32 2}
!54 = !{i32 2, !"frame-pointer", i32 2}
!55 = distinct !DICompileUnit(language: DW_LANG_C11, file: !2, producer: "c3c", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !56, splitDebugInlining: false)
!56 = !{!0, !4, !6, !8, !10, !12, !14, !16, !19, !21, !26, !31, !33, !35, !37, !39, !42, !44, !46}
!57 = distinct !DISubprogram(name: "trim", linkageName: "std.core.String.trim", scope: !2, file: !2, line: 141, type: !58, scopeLine: 141, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!58 = !DISubroutineType(types: !59)
!59 = !{!60, !60, !60}
!60 = !DIDerivedType(tag: DW_TAG_typedef, name: "String", baseType: !61)
!61 = !DICompositeType(tag: DW_TAG_structure_type, name: "char[]", size: 128, align: 64, elements: !62, identifier: "char[]")
!62 = !{!63, !66}
!63 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !61, baseType: !64, size: 64, align: 64)
!64 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "char*", baseType: !65, size: 64, align: 64, dwarfAddressSpace: 0)
!65 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_unsigned_char)
!66 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !61, baseType: !67, size: 64, align: 64, offset: 64)
!67 = !DIDerivedType(tag: DW_TAG_typedef, name: "usz", baseType: !68)
!68 = !DIBasicType(name: "ulong", size: 64, encoding: DW_ATE_unsigned)
!69 = !{}
!70 = !DILocalVariable(name: "string", arg: 1, scope: !57, file: !2, line: 141, type: !60)
!71 = !DILocation(line: 141, column: 23, scope: !57)
!72 = !DILocalVariable(name: "to_trim", arg: 2, scope: !57, file: !2, line: 141, type: !60)
!73 = !DILocation(line: 141, column: 38, scope: !57)
!74 = !DILocation(line: 143, column: 29, scope: !57)
!75 = !DILocation(line: 143, column: 12, scope: !57)
!76 = !DILocation(line: 143, column: 49, scope: !57)
!77 = distinct !DISubprogram(name: "trim_left", linkageName: "std.core.String.trim_left", scope: !2, file: !2, line: 154, type: !58, scopeLine: 154, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!78 = !DILocalVariable(name: "string", arg: 1, scope: !77, file: !2, line: 154, type: !60)
!79 = !DILocation(line: 154, column: 28, scope: !77)
!80 = !DILocalVariable(name: "to_trim", arg: 2, scope: !77, file: !2, line: 154, type: !60)
!81 = !DILocation(line: 154, column: 43, scope: !77)
!82 = !DILocalVariable(name: "start", scope: !77, file: !2, line: 156, type: !67, align: 8)
!83 = !DILocation(line: 156, column: 6, scope: !77)
!84 = !DILocation(line: 156, column: 14, scope: !77)
!85 = !DILocalVariable(name: "len", scope: !77, file: !2, line: 157, type: !67, align: 8)
!86 = !DILocation(line: 157, column: 6, scope: !77)
!87 = !DILocation(line: 157, column: 12, scope: !77)
!88 = !DILocation(line: 158, column: 2, scope: !77)
!89 = !DILocation(line: 158, column: 9, scope: !90)
!90 = distinct !DILexicalBlock(scope: !77, file: !2, line: 158, column: 2)
!91 = !DILocation(line: 158, column: 17, scope: !90)
!92 = !DILocation(line: 158, column: 36, scope: !90)
!93 = !DILocation(line: 158, column: 43, scope: !90)
!94 = !DILocation(line: 104, column: 16, scope: !95, inlinedAt: !97)
!95 = distinct !DILexicalBlock(scope: !96, file: !2, line: 104, column: 2)
!96 = distinct !DISubprogram(name: "char_in_set", linkageName: "char_in_set", scope: !2, file: !2, line: 102, scopeLine: 102, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !69)
!97 = !DILocation(line: 158, column: 24, scope: !90)
!98 = !DILocalVariable(name: ".temp", scope: !95, file: !2, line: 104, type: !67, align: 8)
!99 = !DILocalVariable(name: "ch", scope: !100, file: !2, line: 104, type: !65, align: 1)
!100 = distinct !DILexicalBlock(scope: !95, file: !2, line: 104, column: 21)
!101 = !DILocation(line: 104, column: 11, scope: !100, inlinedAt: !97)
!102 = !DILocation(line: 104, column: 16, scope: !100, inlinedAt: !97)
!103 = !DILocation(line: 104, column: 25, scope: !100, inlinedAt: !97)
!104 = !DILocation(line: 104, column: 31, scope: !100, inlinedAt: !97)
!105 = !DILocation(line: 104, column: 41, scope: !100, inlinedAt: !97)
!106 = !DILocation(line: 105, column: 9, scope: !96, inlinedAt: !97)
!107 = !DILocation(line: 158, column: 61, scope: !90)
!108 = !DILocation(line: 159, column: 6, scope: !77)
!109 = !DILocation(line: 159, column: 15, scope: !77)
!110 = !DILocation(line: 159, column: 27, scope: !77)
!111 = !DILocation(line: 160, column: 9, scope: !77)
!112 = !DILocation(line: 160, column: 16, scope: !77)
!113 = distinct !DISubprogram(name: "trim_right", linkageName: "std.core.String.trim_right", scope: !2, file: !2, line: 171, type: !58, scopeLine: 171, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!114 = !DILocalVariable(name: "string", arg: 1, scope: !113, file: !2, line: 171, type: !60)
!115 = !DILocation(line: 171, column: 29, scope: !113)
!116 = !DILocalVariable(name: "to_trim", arg: 2, scope: !113, file: !2, line: 171, type: !60)
!117 = !DILocation(line: 171, column: 44, scope: !113)
!118 = !DILocalVariable(name: "len", scope: !113, file: !2, line: 173, type: !67, align: 8)
!119 = !DILocation(line: 173, column: 6, scope: !113)
!120 = !DILocation(line: 173, column: 12, scope: !113)
!121 = !DILocation(line: 174, column: 2, scope: !113)
!122 = !DILocation(line: 174, column: 9, scope: !123)
!123 = distinct !DILexicalBlock(scope: !113, file: !2, line: 174, column: 2)
!124 = !DILocation(line: 174, column: 32, scope: !123)
!125 = !DILocation(line: 174, column: 39, scope: !123)
!126 = !DILocation(line: 104, column: 16, scope: !127, inlinedAt: !129)
!127 = distinct !DILexicalBlock(scope: !128, file: !2, line: 104, column: 2)
!128 = distinct !DISubprogram(name: "char_in_set", linkageName: "char_in_set", scope: !2, file: !2, line: 102, scopeLine: 102, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !69)
!129 = !DILocation(line: 174, column: 20, scope: !123)
!130 = !DILocalVariable(name: ".temp", scope: !127, file: !2, line: 104, type: !67, align: 8)
!131 = !DILocalVariable(name: "ch", scope: !132, file: !2, line: 104, type: !65, align: 1)
!132 = distinct !DILexicalBlock(scope: !127, file: !2, line: 104, column: 21)
!133 = !DILocation(line: 104, column: 11, scope: !132, inlinedAt: !129)
!134 = !DILocation(line: 104, column: 16, scope: !132, inlinedAt: !129)
!135 = !DILocation(line: 104, column: 25, scope: !132, inlinedAt: !129)
!136 = !DILocation(line: 104, column: 31, scope: !132, inlinedAt: !129)
!137 = !DILocation(line: 104, column: 41, scope: !132, inlinedAt: !129)
!138 = !DILocation(line: 105, column: 9, scope: !128, inlinedAt: !129)
!139 = !DILocation(line: 174, column: 59, scope: !123)
!140 = !DILocation(line: 175, column: 9, scope: !113)
!141 = !DILocation(line: 175, column: 16, scope: !113)
!142 = !DILocation(line: 175, column: 17, scope: !113)
!143 = distinct !DISubprogram(name: "starts_with", linkageName: "std.core.String.starts_with", scope: !2, file: !2, line: 186, type: !144, scopeLine: 186, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!144 = !DISubroutineType(types: !145)
!145 = !{!146, !60, !60}
!146 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!147 = !DILocalVariable(name: "string", arg: 1, scope: !143, file: !2, line: 186, type: !60)
!148 = !DILocation(line: 186, column: 28, scope: !143)
!149 = !DILocalVariable(name: "needle", arg: 2, scope: !143, file: !2, line: 186, type: !60)
!150 = !DILocation(line: 186, column: 43, scope: !143)
!151 = !DILocation(line: 188, column: 6, scope: !143)
!152 = !DILocation(line: 188, column: 19, scope: !143)
!153 = !DILocation(line: 188, column: 38, scope: !143)
!154 = !DILocation(line: 189, column: 6, scope: !143)
!155 = !DILocation(line: 189, column: 26, scope: !143)
!156 = !DILocation(line: 190, column: 9, scope: !143)
!157 = !DILocation(line: 190, column: 16, scope: !143)
!158 = !DILocation(line: 190, column: 17, scope: !143)
!159 = !DILocation(line: 190, column: 32, scope: !143)
!160 = distinct !DISubprogram(name: "ends_with", linkageName: "std.core.String.ends_with", scope: !2, file: !2, line: 201, type: !144, scopeLine: 201, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!161 = !DILocalVariable(name: "string", arg: 1, scope: !160, file: !2, line: 201, type: !60)
!162 = !DILocation(line: 201, column: 26, scope: !160)
!163 = !DILocalVariable(name: "needle", arg: 2, scope: !160, file: !2, line: 201, type: !60)
!164 = !DILocation(line: 201, column: 41, scope: !160)
!165 = !DILocation(line: 203, column: 6, scope: !160)
!166 = !DILocation(line: 203, column: 19, scope: !160)
!167 = !DILocation(line: 203, column: 38, scope: !160)
!168 = !DILocation(line: 204, column: 6, scope: !160)
!169 = !DILocation(line: 204, column: 26, scope: !160)
!170 = !DILocation(line: 205, column: 9, scope: !160)
!171 = !DILocation(line: 205, column: 17, scope: !160)
!172 = !DILocation(line: 205, column: 34, scope: !160)
!173 = distinct !DISubprogram(name: "strip", linkageName: "std.core.String.strip", scope: !2, file: !2, line: 216, type: !58, scopeLine: 216, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!174 = !DILocalVariable(name: "string", arg: 1, scope: !173, file: !2, line: 216, type: !60)
!175 = !DILocation(line: 216, column: 24, scope: !173)
!176 = !DILocalVariable(name: "needle", arg: 2, scope: !173, file: !2, line: 216, type: !60)
!177 = !DILocation(line: 216, column: 39, scope: !173)
!178 = !DILocation(line: 218, column: 6, scope: !173)
!179 = !DILocation(line: 218, column: 41, scope: !173)
!180 = !DILocation(line: 218, column: 22, scope: !173)
!181 = !DILocation(line: 218, column: 57, scope: !173)
!182 = !DILocation(line: 219, column: 9, scope: !173)
!183 = !DILocation(line: 219, column: 16, scope: !173)
!184 = distinct !DISubprogram(name: "strip_end", linkageName: "std.core.String.strip_end", scope: !2, file: !2, line: 230, type: !58, scopeLine: 230, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!185 = !DILocalVariable(name: "string", arg: 1, scope: !184, file: !2, line: 230, type: !60)
!186 = !DILocation(line: 230, column: 28, scope: !184)
!187 = !DILocalVariable(name: "needle", arg: 2, scope: !184, file: !2, line: 230, type: !60)
!188 = !DILocation(line: 230, column: 43, scope: !184)
!189 = !DILocation(line: 232, column: 6, scope: !184)
!190 = !DILocation(line: 232, column: 39, scope: !184)
!191 = !DILocation(line: 232, column: 22, scope: !184)
!192 = !DILocation(line: 232, column: 55, scope: !184)
!193 = !DILocation(line: 234, column: 9, scope: !184)
!194 = !DILocation(line: 234, column: 16, scope: !184)
!195 = !DILocation(line: 234, column: 18, scope: !184)
!196 = !DILocation(line: 234, column: 31, scope: !184)
!197 = distinct !DISubprogram(name: "split", linkageName: "std.core.String.split", scope: !2, file: !2, line: 249, type: !198, scopeLine: 249, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!198 = !DISubroutineType(types: !199)
!199 = !{!200, !60, !60, !68, !205, !146}
!200 = !DICompositeType(tag: DW_TAG_structure_type, name: "String[]", size: 128, align: 64, elements: !201, identifier: "String[]")
!201 = !{!202, !204}
!202 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !200, baseType: !203, size: 64, align: 64)
!203 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "String*", baseType: !60, size: 64, align: 64, dwarfAddressSpace: 0)
!204 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !200, baseType: !67, size: 64, align: 64, offset: 64)
!205 = !DICompositeType(tag: DW_TAG_structure_type, name: "Allocator", size: 128, align: 64, elements: !206, identifier: "Allocator")
!206 = !{!207, !209}
!207 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !205, baseType: !208, size: 64, align: 64)
!208 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "void*", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!209 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !205, baseType: !210, size: 64, align: 64, offset: 64)
!210 = !DIBasicType(name: "typeid", size: 64, encoding: DW_ATE_address)
!211 = !DILocalVariable(name: "s", arg: 1, scope: !197, file: !2, line: 249, type: !60)
!212 = !DILocation(line: 249, column: 26, scope: !197)
!213 = !DILocalVariable(name: "needle", arg: 2, scope: !197, file: !2, line: 249, type: !60)
!214 = !DILocation(line: 249, column: 36, scope: !197)
!215 = !DILocalVariable(name: "max", arg: 3, scope: !197, file: !2, line: 249, type: !67)
!216 = !DILocation(line: 249, column: 48, scope: !197)
!217 = !DILocalVariable(name: "allocator", arg: 4, scope: !197, file: !2, line: 249, type: !205)
!218 = !DILocation(line: 249, column: 67, scope: !197)
!219 = !DILocalVariable(name: "skip_empty", arg: 5, scope: !197, file: !2, line: 249, type: !146)
!220 = !DILocation(line: 249, column: 103, scope: !197)
!221 = !DILocation(line: 246, column: 11, scope: !222)
!222 = distinct !DILexicalBlock(scope: !197, file: !2, line: 250, column: 1)
!223 = !DILocalVariable(name: "capacity", scope: !197, file: !2, line: 251, type: !67, align: 8)
!224 = !DILocation(line: 251, column: 6, scope: !197)
!225 = !DILocation(line: 251, column: 17, scope: !197)
!226 = !DILocalVariable(name: "i", scope: !197, file: !2, line: 252, type: !67, align: 8)
!227 = !DILocation(line: 252, column: 6, scope: !197)
!228 = !DILocation(line: 252, column: 10, scope: !197)
!229 = !DILocalVariable(name: "holder", scope: !197, file: !2, line: 253, type: !203, align: 8)
!230 = !DILocation(line: 253, column: 10, scope: !197)
!231 = !DILocation(line: 286, column: 55, scope: !232, inlinedAt: !234)
!232 = distinct !DISubprogram(name: "alloc_array_try", linkageName: "alloc_array_try", scope: !233, file: !233, line: 284, scopeLine: 284, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!233 = !DIFile(filename: "mem_allocator.c3", directory: "/usr/local/lib/c3/std/core")
!234 = !DILocation(line: 269, column: 9, scope: !235, inlinedAt: !236)
!235 = distinct !DISubprogram(name: "alloc_array", linkageName: "alloc_array", scope: !233, file: !233, line: 267, scopeLine: 267, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!236 = !DILocation(line: 253, column: 19, scope: !197)
!237 = !DILocation(line: 286, column: 40, scope: !232, inlinedAt: !234)
!238 = !DILocation(line: 62, column: 6, scope: !239, inlinedAt: !240)
!239 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !233, file: !233, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!240 = !DILocation(line: 286, column: 18, scope: !232, inlinedAt: !234)
!241 = !DILocation(line: 62, column: 20, scope: !239, inlinedAt: !240)
!242 = !DILocation(line: 28, column: 71, scope: !243, inlinedAt: !244)
!243 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !233, file: !233, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!244 = !DILocation(line: 68, column: 10, scope: !239, inlinedAt: !240)
!245 = !DILocation(line: 286, column: 67, scope: !232, inlinedAt: !234)
!246 = !DILocalVariable(name: "no_more", scope: !197, file: !2, line: 254, type: !146, align: 1)
!247 = !DILocation(line: 254, column: 7, scope: !197)
!248 = !DILocation(line: 254, column: 17, scope: !197)
!249 = !DILocation(line: 255, column: 2, scope: !197)
!250 = !DILocation(line: 255, column: 10, scope: !251)
!251 = distinct !DILexicalBlock(scope: !197, file: !2, line: 255, column: 2)
!252 = !DILocalVariable(name: "index", scope: !253, file: !2, line: 257, type: !68, align: 8)
!253 = distinct !DILexicalBlock(scope: !251, file: !2, line: 256, column: 2)
!254 = !DILocation(line: 257, column: 8, scope: !253)
!255 = !DILocation(line: 257, column: 16, scope: !253)
!256 = !DILocation(line: 257, column: 21, scope: !253)
!257 = !DILocation(line: 257, column: 31, scope: !253)
!258 = !DILocation(line: 257, column: 55, scope: !253)
!259 = !DILocalVariable(name: "res", scope: !253, file: !2, line: 258, type: !60, align: 8)
!260 = !DILocation(line: 258, column: 10, scope: !253)
!261 = !DILocation(line: 259, column: 7, scope: !253)
!262 = !DILocation(line: 261, column: 10, scope: !263)
!263 = distinct !DILexicalBlock(scope: !253, file: !2, line: 260, column: 3)
!264 = !DILocation(line: 261, column: 12, scope: !263)
!265 = !DILocation(line: 261, column: 13, scope: !263)
!266 = !DILocation(line: 262, column: 8, scope: !263)
!267 = !DILocation(line: 262, column: 10, scope: !263)
!268 = !DILocation(line: 262, column: 18, scope: !263)
!269 = !DILocation(line: 266, column: 10, scope: !270)
!270 = distinct !DILexicalBlock(scope: !253, file: !2, line: 265, column: 3)
!271 = !DILocation(line: 267, column: 14, scope: !270)
!272 = !DILocation(line: 269, column: 7, scope: !253)
!273 = !DILocation(line: 269, column: 19, scope: !253)
!274 = !DILocation(line: 271, column: 10, scope: !275)
!275 = distinct !DILexicalBlock(scope: !253, file: !2, line: 270, column: 9)
!276 = !DILocation(line: 274, column: 7, scope: !253)
!277 = !DILocation(line: 274, column: 12, scope: !253)
!278 = !DILocation(line: 276, column: 4, scope: !279)
!279 = distinct !DILexicalBlock(scope: !253, file: !2, line: 275, column: 3)
!280 = !DILocation(line: 277, column: 43, scope: !279)
!281 = !DILocation(line: 277, column: 67, scope: !279)
!282 = !DILocation(line: 277, column: 51, scope: !279)
!283 = !DILocation(line: 90, column: 6, scope: !284, inlinedAt: !285)
!284 = distinct !DISubprogram(name: "realloc_try", linkageName: "realloc_try", scope: !233, file: !233, line: 88, scopeLine: 88, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!285 = !DILocation(line: 85, column: 9, scope: !286, inlinedAt: !287)
!286 = distinct !DISubprogram(name: "realloc", linkageName: "realloc", scope: !233, file: !233, line: 83, scopeLine: 83, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!287 = !DILocation(line: 277, column: 13, scope: !279)
!288 = !DILocation(line: 101, column: 6, scope: !289, inlinedAt: !290)
!289 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !233, file: !233, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!290 = !DILocation(line: 92, column: 3, scope: !291, inlinedAt: !285)
!291 = distinct !DILexicalBlock(scope: !284, file: !233, line: 91, column: 2)
!292 = !DILocation(line: 101, column: 18, scope: !289, inlinedAt: !290)
!293 = !DILocation(line: 105, column: 25, scope: !289, inlinedAt: !290)
!294 = !DILocation(line: 105, column: 2, scope: !289, inlinedAt: !290)
!295 = !DILocation(line: 93, column: 10, scope: !291, inlinedAt: !285)
!296 = !DILocation(line: 95, column: 6, scope: !284, inlinedAt: !285)
!297 = !DILocation(line: 28, column: 71, scope: !298, inlinedAt: !299)
!298 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !233, file: !233, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!299 = !DILocation(line: 95, column: 19, scope: !284, inlinedAt: !285)
!300 = !DILocation(line: 35, column: 60, scope: !301, inlinedAt: !302)
!301 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !233, file: !233, line: 35, scopeLine: 35, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!302 = !DILocation(line: 96, column: 9, scope: !284, inlinedAt: !285)
!303 = !DILocation(line: 279, column: 3, scope: !253)
!304 = !DILocation(line: 279, column: 10, scope: !253)
!305 = !DILocation(line: 279, column: 17, scope: !253)
!306 = !DILocation(line: 281, column: 9, scope: !197)
!307 = !DILocation(line: 281, column: 17, scope: !197)
!308 = !DILocation(line: 247, column: 10, scope: !197)
!309 = distinct !DISubprogram(name: "new_split", linkageName: "std.core.String.new_split", scope: !2, file: !2, line: 295, type: !310, scopeLine: 295, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!310 = !DISubroutineType(types: !311)
!311 = !{!200, !60, !60, !68, !146}
!312 = !DILocalVariable(name: "s", arg: 1, scope: !309, file: !2, line: 295, type: !60)
!313 = !DILocation(line: 295, column: 30, scope: !309)
!314 = !DILocalVariable(name: "needle", arg: 2, scope: !309, file: !2, line: 295, type: !60)
!315 = !DILocation(line: 295, column: 40, scope: !309)
!316 = !DILocalVariable(name: "max", arg: 3, scope: !309, file: !2, line: 295, type: !67)
!317 = !DILocation(line: 295, column: 52, scope: !309)
!318 = !DILocalVariable(name: "skip_empty", arg: 4, scope: !309, file: !2, line: 295, type: !146)
!319 = !DILocation(line: 295, column: 66, scope: !309)
!320 = !DILocation(line: 292, column: 11, scope: !321)
!321 = distinct !DILexicalBlock(scope: !309, file: !2, line: 295, column: 81)
!322 = !DILocation(line: 295, column: 121, scope: !309)
!323 = !DILocation(line: 295, column: 81, scope: !309)
!324 = !DILocation(line: 293, column: 10, scope: !309)
!325 = distinct !DISubprogram(name: "tsplit", linkageName: "std.core.String.tsplit", scope: !2, file: !2, line: 306, type: !310, scopeLine: 306, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!326 = !DILocalVariable(name: "s", arg: 1, scope: !325, file: !2, line: 306, type: !60)
!327 = !DILocation(line: 306, column: 27, scope: !325)
!328 = !DILocalVariable(name: "needle", arg: 2, scope: !325, file: !2, line: 306, type: !60)
!329 = !DILocation(line: 306, column: 37, scope: !325)
!330 = !DILocalVariable(name: "max", arg: 3, scope: !325, file: !2, line: 306, type: !67)
!331 = !DILocation(line: 306, column: 49, scope: !325)
!332 = !DILocalVariable(name: "skip_empty", arg: 4, scope: !325, file: !2, line: 306, type: !146)
!333 = !DILocation(line: 306, column: 63, scope: !325)
!334 = !DILocation(line: 396, column: 6, scope: !335, inlinedAt: !336)
!335 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !233, file: !233, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!336 = !DILocation(line: 306, column: 107, scope: !325)
!337 = !DILocation(line: 398, column: 3, scope: !338, inlinedAt: !336)
!338 = distinct !DILexicalBlock(scope: !335, file: !233, line: 397, column: 2)
!339 = !DILocation(line: 400, column: 9, scope: !335, inlinedAt: !336)
!340 = !DILocation(line: 306, column: 126, scope: !325)
!341 = !DILocation(line: 306, column: 86, scope: !325)
!342 = distinct !DISubprogram(name: "split_to_buffer", linkageName: "std.core.String.split_to_buffer", scope: !2, file: !2, line: 321, type: !343, scopeLine: 321, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!343 = !DISubroutineType(types: !344)
!344 = !{!345, !347, !60, !60, !200, !68, !146}
!345 = !DIDerivedType(tag: DW_TAG_typedef, name: "anyfault", baseType: !346)
!346 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!347 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "String[]*", baseType: !200, size: 64, align: 64, dwarfAddressSpace: 0)
!348 = !DILocalVariable(name: "s", arg: 1, scope: !342, file: !2, line: 321, type: !60)
!349 = !DILocation(line: 321, column: 37, scope: !342)
!350 = !DILocalVariable(name: "needle", arg: 2, scope: !342, file: !2, line: 321, type: !60)
!351 = !DILocation(line: 321, column: 47, scope: !342)
!352 = !DILocalVariable(name: "buffer", arg: 3, scope: !342, file: !2, line: 321, type: !200)
!353 = !DILocation(line: 321, column: 64, scope: !342)
!354 = !DILocalVariable(name: "max", arg: 4, scope: !342, file: !2, line: 321, type: !67)
!355 = !DILocation(line: 321, column: 76, scope: !342)
!356 = !DILocalVariable(name: "skip_empty", arg: 5, scope: !342, file: !2, line: 321, type: !146)
!357 = !DILocation(line: 321, column: 90, scope: !342)
!358 = !DILocation(line: 317, column: 11, scope: !359)
!359 = distinct !DILexicalBlock(scope: !342, file: !2, line: 322, column: 1)
!360 = !DILocalVariable(name: "max_capacity", scope: !342, file: !2, line: 323, type: !67, align: 8)
!361 = !DILocation(line: 323, column: 6, scope: !342)
!362 = !DILocation(line: 323, column: 21, scope: !342)
!363 = !DILocalVariable(name: "i", scope: !342, file: !2, line: 324, type: !67, align: 8)
!364 = !DILocation(line: 324, column: 6, scope: !342)
!365 = !DILocation(line: 324, column: 10, scope: !342)
!366 = !DILocalVariable(name: "no_more", scope: !342, file: !2, line: 325, type: !146, align: 1)
!367 = !DILocation(line: 325, column: 7, scope: !342)
!368 = !DILocation(line: 325, column: 17, scope: !342)
!369 = !DILocation(line: 326, column: 2, scope: !342)
!370 = !DILocation(line: 326, column: 10, scope: !371)
!371 = distinct !DILexicalBlock(scope: !342, file: !2, line: 326, column: 2)
!372 = !DILocalVariable(name: "index", scope: !373, file: !2, line: 328, type: !68, align: 8)
!373 = distinct !DILexicalBlock(scope: !371, file: !2, line: 327, column: 2)
!374 = !DILocation(line: 328, column: 8, scope: !373)
!375 = !DILocation(line: 328, column: 16, scope: !373)
!376 = !DILocation(line: 328, column: 21, scope: !373)
!377 = !DILocation(line: 328, column: 31, scope: !373)
!378 = !DILocation(line: 328, column: 55, scope: !373)
!379 = !DILocalVariable(name: "res", scope: !373, file: !2, line: 329, type: !60, align: 8)
!380 = !DILocation(line: 329, column: 10, scope: !373)
!381 = !DILocation(line: 330, column: 7, scope: !373)
!382 = !DILocation(line: 332, column: 10, scope: !383)
!383 = distinct !DILexicalBlock(scope: !373, file: !2, line: 331, column: 3)
!384 = !DILocation(line: 332, column: 12, scope: !383)
!385 = !DILocation(line: 332, column: 13, scope: !383)
!386 = !DILocation(line: 333, column: 8, scope: !383)
!387 = !DILocation(line: 333, column: 10, scope: !383)
!388 = !DILocation(line: 333, column: 18, scope: !383)
!389 = !DILocation(line: 337, column: 10, scope: !390)
!390 = distinct !DILexicalBlock(scope: !373, file: !2, line: 336, column: 3)
!391 = !DILocation(line: 338, column: 14, scope: !390)
!392 = !DILocation(line: 340, column: 7, scope: !373)
!393 = !DILocation(line: 340, column: 19, scope: !373)
!394 = !DILocation(line: 342, column: 4, scope: !395)
!395 = distinct !DILexicalBlock(scope: !373, file: !2, line: 341, column: 3)
!396 = !DILocation(line: 344, column: 7, scope: !373)
!397 = !DILocation(line: 344, column: 12, scope: !373)
!398 = !DILocation(line: 346, column: 11, scope: !399)
!399 = distinct !DILexicalBlock(scope: !373, file: !2, line: 345, column: 3)
!400 = !DILocation(line: 348, column: 3, scope: !373)
!401 = !DILocation(line: 348, column: 10, scope: !373)
!402 = !DILocation(line: 348, column: 17, scope: !373)
!403 = !DILocation(line: 350, column: 9, scope: !342)
!404 = !DILocation(line: 350, column: 16, scope: !342)
!405 = !DILocation(line: 350, column: 17, scope: !342)
!406 = !DILocation(line: 318, column: 10, scope: !342)
!407 = distinct !DISubprogram(name: "contains", linkageName: "std.core.String.contains", scope: !2, file: !2, line: 361, type: !144, scopeLine: 361, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!408 = !DILocalVariable(name: "s", arg: 1, scope: !407, file: !2, line: 361, type: !60)
!409 = !DILocation(line: 361, column: 25, scope: !407)
!410 = !DILocalVariable(name: "needle", arg: 2, scope: !407, file: !2, line: 361, type: !60)
!411 = !DILocation(line: 361, column: 35, scope: !407)
!412 = !DILocation(line: 365, column: 12, scope: !413, inlinedAt: !415)
!413 = distinct !DISubprogram(name: "@ok", linkageName: "@ok", scope: !414, file: !414, line: 363, scopeLine: 363, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!414 = !DIFile(filename: "builtin.c3", directory: "/usr/local/lib/c3/std/core")
!415 = !DILocation(line: 363, column: 9, scope: !407)
!416 = !DILocation(line: 365, column: 26, scope: !413, inlinedAt: !415)
!417 = !DILocation(line: 366, column: 9, scope: !413, inlinedAt: !415)
!418 = distinct !DISubprogram(name: "index_of_char", linkageName: "std.core.String.index_of_char", scope: !2, file: !2, line: 376, type: !419, scopeLine: 376, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!419 = !DISubroutineType(types: !420)
!420 = !{!345, !421, !60, !65}
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "usz*", baseType: !67, size: 64, align: 64, dwarfAddressSpace: 0)
!422 = !DILocalVariable(name: "s", arg: 1, scope: !418, file: !2, line: 376, type: !60)
!423 = !DILocation(line: 376, column: 30, scope: !418)
!424 = !DILocalVariable(name: "needle", arg: 2, scope: !418, file: !2, line: 376, type: !65)
!425 = !DILocation(line: 376, column: 38, scope: !418)
!426 = !DILocation(line: 378, column: 18, scope: !427)
!427 = distinct !DILexicalBlock(scope: !418, file: !2, line: 378, column: 2)
!428 = !DILocalVariable(name: ".temp", scope: !427, file: !2, line: 378, type: !67, align: 8)
!429 = !DILocation(line: 378, column: 11, scope: !427)
!430 = !DILocalVariable(name: "i", scope: !431, file: !2, line: 378, type: !67, align: 8)
!431 = distinct !DILexicalBlock(scope: !427, file: !2, line: 379, column: 2)
!432 = !DILocation(line: 378, column: 11, scope: !431)
!433 = !DILocalVariable(name: "c", scope: !431, file: !2, line: 378, type: !65, align: 1)
!434 = !DILocation(line: 378, column: 14, scope: !431)
!435 = !DILocation(line: 378, column: 18, scope: !431)
!436 = !DILocation(line: 380, column: 7, scope: !437)
!437 = distinct !DILexicalBlock(scope: !431, file: !2, line: 379, column: 2)
!438 = !DILocation(line: 380, column: 12, scope: !437)
!439 = !DILocation(line: 380, column: 27, scope: !437)
!440 = !DILocation(line: 372, column: 10, scope: !437)
!441 = !DILocation(line: 372, column: 19, scope: !437)
!442 = !DILocation(line: 382, column: 9, scope: !418)
!443 = distinct !DISubprogram(name: "index_of_chars", linkageName: "std.core.String.index_of_chars", scope: !2, file: !2, line: 395, type: !444, scopeLine: 395, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!444 = !DISubroutineType(types: !445)
!445 = !{!345, !421, !60, !61}
!446 = !DILocalVariable(name: "s", arg: 1, scope: !443, file: !2, line: 395, type: !60)
!447 = !DILocation(line: 395, column: 38, scope: !443)
!448 = !DILocalVariable(name: "needle", arg: 2, scope: !443, file: !2, line: 395, type: !61)
!449 = !DILocation(line: 395, column: 48, scope: !443)
!450 = !DILocation(line: 397, column: 21, scope: !451)
!451 = distinct !DILexicalBlock(scope: !443, file: !2, line: 397, column: 5)
!452 = !DILocalVariable(name: ".temp", scope: !451, file: !2, line: 397, type: !67, align: 8)
!453 = !DILocation(line: 397, column: 14, scope: !451)
!454 = !DILocalVariable(name: "i", scope: !455, file: !2, line: 397, type: !67, align: 8)
!455 = distinct !DILexicalBlock(scope: !451, file: !2, line: 398, column: 5)
!456 = !DILocation(line: 397, column: 14, scope: !455)
!457 = !DILocalVariable(name: "c", scope: !455, file: !2, line: 397, type: !65, align: 1)
!458 = !DILocation(line: 397, column: 17, scope: !455)
!459 = !DILocation(line: 397, column: 21, scope: !455)
!460 = !DILocation(line: 399, column: 27, scope: !461)
!461 = distinct !DILexicalBlock(scope: !462, file: !2, line: 399, column: 9)
!462 = distinct !DILexicalBlock(scope: !455, file: !2, line: 398, column: 5)
!463 = !DILocalVariable(name: ".temp", scope: !461, file: !2, line: 399, type: !67, align: 8)
!464 = !DILocation(line: 399, column: 18, scope: !461)
!465 = !DILocalVariable(name: "j", scope: !466, file: !2, line: 399, type: !67, align: 8)
!466 = distinct !DILexicalBlock(scope: !461, file: !2, line: 400, column: 9)
!467 = !DILocation(line: 399, column: 18, scope: !466)
!468 = !DILocalVariable(name: "pin", scope: !466, file: !2, line: 399, type: !65, align: 1)
!469 = !DILocation(line: 399, column: 21, scope: !466)
!470 = !DILocation(line: 399, column: 27, scope: !466)
!471 = !DILocation(line: 401, column: 17, scope: !472)
!472 = distinct !DILexicalBlock(scope: !466, file: !2, line: 400, column: 9)
!473 = !DILocation(line: 401, column: 22, scope: !472)
!474 = !DILocation(line: 401, column: 34, scope: !472)
!475 = !DILocation(line: 391, column: 10, scope: !472)
!476 = !DILocation(line: 391, column: 19, scope: !472)
!477 = !DILocation(line: 405, column: 12, scope: !443)
!478 = distinct !DISubprogram(name: "index_of_char_from", linkageName: "std.core.String.index_of_char_from", scope: !2, file: !2, line: 419, type: !479, scopeLine: 419, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!479 = !DISubroutineType(types: !480)
!480 = !{!345, !421, !60, !65, !68}
!481 = !DILocalVariable(name: "s", arg: 1, scope: !478, file: !2, line: 419, type: !60)
!482 = !DILocation(line: 419, column: 35, scope: !478)
!483 = !DILocalVariable(name: "needle", arg: 2, scope: !478, file: !2, line: 419, type: !65)
!484 = !DILocation(line: 419, column: 43, scope: !478)
!485 = !DILocalVariable(name: "start_index", arg: 3, scope: !478, file: !2, line: 419, type: !67)
!486 = !DILocation(line: 419, column: 55, scope: !478)
!487 = !DILocalVariable(name: "len", scope: !478, file: !2, line: 421, type: !67, align: 8)
!488 = !DILocation(line: 421, column: 6, scope: !478)
!489 = !DILocation(line: 421, column: 12, scope: !478)
!490 = !DILocation(line: 422, column: 6, scope: !478)
!491 = !DILocation(line: 422, column: 13, scope: !478)
!492 = !DILocation(line: 422, column: 33, scope: !478)
!493 = !DILocalVariable(name: "i", scope: !494, file: !2, line: 423, type: !67, align: 8)
!494 = distinct !DILexicalBlock(scope: !478, file: !2, line: 423, column: 2)
!495 = !DILocation(line: 423, column: 11, scope: !494)
!496 = !DILocation(line: 423, column: 15, scope: !494)
!497 = !DILocation(line: 423, column: 28, scope: !494)
!498 = !DILocation(line: 423, column: 32, scope: !494)
!499 = !DILocation(line: 425, column: 7, scope: !500)
!500 = distinct !DILexicalBlock(scope: !494, file: !2, line: 424, column: 2)
!501 = !DILocation(line: 425, column: 9, scope: !500)
!502 = !DILocation(line: 425, column: 15, scope: !500)
!503 = !DILocation(line: 425, column: 30, scope: !500)
!504 = !DILocation(line: 415, column: 10, scope: !500)
!505 = !DILocation(line: 415, column: 19, scope: !500)
!506 = !DILocation(line: 423, column: 37, scope: !494)
!507 = !DILocation(line: 427, column: 9, scope: !478)
!508 = distinct !DISubprogram(name: "rindex_of_char", linkageName: "std.core.String.rindex_of_char", scope: !2, file: !2, line: 440, type: !419, scopeLine: 440, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!509 = !DILocalVariable(name: "s", arg: 1, scope: !508, file: !2, line: 440, type: !60)
!510 = !DILocation(line: 440, column: 31, scope: !508)
!511 = !DILocalVariable(name: "needle", arg: 2, scope: !508, file: !2, line: 440, type: !65)
!512 = !DILocation(line: 440, column: 39, scope: !508)
!513 = !DILocalVariable(name: ".temp", scope: !514, file: !2, line: 442, type: !67, align: 8)
!514 = distinct !DILexicalBlock(scope: !508, file: !2, line: 442, column: 2)
!515 = !DILocation(line: 442, column: 13, scope: !514)
!516 = !DILocation(line: 442, column: 20, scope: !514)
!517 = !DILocalVariable(name: "i", scope: !518, file: !2, line: 442, type: !67, align: 8)
!518 = distinct !DILexicalBlock(scope: !514, file: !2, line: 443, column: 2)
!519 = !DILocation(line: 442, column: 13, scope: !518)
!520 = !DILocalVariable(name: "c", scope: !518, file: !2, line: 442, type: !65, align: 1)
!521 = !DILocation(line: 442, column: 16, scope: !518)
!522 = !DILocation(line: 442, column: 20, scope: !518)
!523 = !DILocation(line: 444, column: 7, scope: !524)
!524 = distinct !DILexicalBlock(scope: !518, file: !2, line: 443, column: 2)
!525 = !DILocation(line: 444, column: 12, scope: !524)
!526 = !DILocation(line: 444, column: 27, scope: !524)
!527 = !DILocation(line: 436, column: 10, scope: !524)
!528 = !DILocation(line: 436, column: 19, scope: !524)
!529 = !DILocation(line: 446, column: 9, scope: !508)
!530 = distinct !DISubprogram(name: "index_of", linkageName: "std.core.String.index_of", scope: !2, file: !2, line: 460, type: !531, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!531 = !DISubroutineType(types: !532)
!532 = !{!345, !421, !60, !60}
!533 = !DILocalVariable(name: "s", arg: 1, scope: !530, file: !2, line: 460, type: !60)
!534 = !DILocation(line: 460, column: 25, scope: !530)
!535 = !DILocalVariable(name: "needle", arg: 2, scope: !530, file: !2, line: 460, type: !60)
!536 = !DILocation(line: 460, column: 35, scope: !530)
!537 = !DILocation(line: 456, column: 11, scope: !538)
!538 = distinct !DILexicalBlock(scope: !530, file: !2, line: 461, column: 1)
!539 = !DILocalVariable(name: "needed", scope: !530, file: !2, line: 462, type: !67, align: 8)
!540 = !DILocation(line: 462, column: 6, scope: !530)
!541 = !DILocation(line: 462, column: 15, scope: !530)
!542 = !DILocation(line: 463, column: 6, scope: !530)
!543 = !DILocation(line: 463, column: 20, scope: !530)
!544 = !DILocation(line: 463, column: 29, scope: !530)
!545 = !DILocalVariable(name: "first", scope: !546, file: !2, line: 465, type: !65, align: 1)
!546 = distinct !DILexicalBlock(scope: !530, file: !2, line: 464, column: 2)
!547 = !DILocation(line: 465, column: 8, scope: !546)
!548 = !DILocation(line: 465, column: 16, scope: !546)
!549 = !DILocation(line: 465, column: 23, scope: !546)
!550 = !DILocation(line: 466, column: 18, scope: !551)
!551 = distinct !DILexicalBlock(scope: !546, file: !2, line: 466, column: 3)
!552 = !DILocation(line: 466, column: 20, scope: !551)
!553 = !DILocation(line: 466, column: 23, scope: !551)
!554 = !DILocalVariable(name: ".temp", scope: !551, file: !2, line: 466, type: !67, align: 8)
!555 = !DILocation(line: 466, column: 12, scope: !551)
!556 = !DILocalVariable(name: "i", scope: !557, file: !2, line: 466, type: !67, align: 8)
!557 = distinct !DILexicalBlock(scope: !551, file: !2, line: 467, column: 3)
!558 = !DILocation(line: 466, column: 12, scope: !557)
!559 = !DILocalVariable(name: "c", scope: !557, file: !2, line: 466, type: !65, align: 1)
!560 = !DILocation(line: 466, column: 15, scope: !557)
!561 = !DILocation(line: 466, column: 18, scope: !557)
!562 = !DILocation(line: 468, column: 8, scope: !563)
!563 = distinct !DILexicalBlock(scope: !557, file: !2, line: 467, column: 3)
!564 = !DILocation(line: 468, column: 13, scope: !563)
!565 = !DILocation(line: 468, column: 22, scope: !563)
!566 = !DILocation(line: 468, column: 24, scope: !563)
!567 = !DILocation(line: 468, column: 26, scope: !563)
!568 = !DILocation(line: 468, column: 37, scope: !563)
!569 = !DILocation(line: 468, column: 52, scope: !563)
!570 = !DILocation(line: 455, column: 10, scope: !563)
!571 = !DILocation(line: 455, column: 19, scope: !563)
!572 = !DILocation(line: 471, column: 9, scope: !530)
!573 = distinct !DISubprogram(name: "rindex_of", linkageName: "std.core.String.rindex_of", scope: !2, file: !2, line: 485, type: !531, scopeLine: 485, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!574 = !DILocalVariable(name: "s", arg: 1, scope: !573, file: !2, line: 485, type: !60)
!575 = !DILocation(line: 485, column: 26, scope: !573)
!576 = !DILocalVariable(name: "needle", arg: 2, scope: !573, file: !2, line: 485, type: !60)
!577 = !DILocation(line: 485, column: 36, scope: !573)
!578 = !DILocation(line: 481, column: 11, scope: !579)
!579 = distinct !DILexicalBlock(scope: !573, file: !2, line: 486, column: 1)
!580 = !DILocalVariable(name: "needed", scope: !573, file: !2, line: 487, type: !67, align: 8)
!581 = !DILocation(line: 487, column: 6, scope: !573)
!582 = !DILocation(line: 487, column: 15, scope: !573)
!583 = !DILocation(line: 488, column: 6, scope: !573)
!584 = !DILocation(line: 488, column: 20, scope: !573)
!585 = !DILocation(line: 488, column: 29, scope: !573)
!586 = !DILocalVariable(name: "first", scope: !587, file: !2, line: 490, type: !65, align: 1)
!587 = distinct !DILexicalBlock(scope: !573, file: !2, line: 489, column: 2)
!588 = !DILocation(line: 490, column: 8, scope: !587)
!589 = !DILocation(line: 490, column: 16, scope: !587)
!590 = !DILocation(line: 490, column: 23, scope: !587)
!591 = !DILocation(line: 491, column: 20, scope: !592)
!592 = distinct !DILexicalBlock(scope: !587, file: !2, line: 491, column: 3)
!593 = !DILocation(line: 491, column: 22, scope: !592)
!594 = !DILocation(line: 491, column: 25, scope: !592)
!595 = !DILocalVariable(name: ".temp", scope: !592, file: !2, line: 491, type: !67, align: 8)
!596 = !DILocation(line: 491, column: 14, scope: !592)
!597 = !DILocalVariable(name: "i", scope: !598, file: !2, line: 491, type: !67, align: 8)
!598 = distinct !DILexicalBlock(scope: !592, file: !2, line: 492, column: 3)
!599 = !DILocation(line: 491, column: 14, scope: !598)
!600 = !DILocalVariable(name: "c", scope: !598, file: !2, line: 491, type: !65, align: 1)
!601 = !DILocation(line: 491, column: 17, scope: !598)
!602 = !DILocation(line: 491, column: 20, scope: !598)
!603 = !DILocation(line: 493, column: 8, scope: !604)
!604 = distinct !DILexicalBlock(scope: !598, file: !2, line: 492, column: 3)
!605 = !DILocation(line: 493, column: 13, scope: !604)
!606 = !DILocation(line: 493, column: 22, scope: !604)
!607 = !DILocation(line: 493, column: 24, scope: !604)
!608 = !DILocation(line: 493, column: 26, scope: !604)
!609 = !DILocation(line: 493, column: 37, scope: !604)
!610 = !DILocation(line: 493, column: 52, scope: !604)
!611 = !DILocation(line: 480, column: 10, scope: !604)
!612 = !DILocation(line: 480, column: 19, scope: !604)
!613 = !DILocation(line: 496, column: 9, scope: !573)
!614 = distinct !DISubprogram(name: "str_view", linkageName: "std.core.string.ZString.str_view", scope: !2, file: !2, line: 499, type: !615, scopeLine: 499, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!615 = !DISubroutineType(types: !616)
!616 = !{!60, !617}
!617 = !DIDerivedType(tag: DW_TAG_typedef, name: "ZString", scope: !2, file: !2, line: 6, baseType: !64, align: 8)
!618 = !DILocalVariable(name: "str", arg: 1, scope: !614, file: !2, line: 499, type: !617)
!619 = !DILocation(line: 499, column: 28, scope: !614)
!620 = !DILocation(line: 501, column: 18, scope: !614)
!621 = !DILocation(line: 501, column: 23, scope: !614)
!622 = distinct !DISubprogram(name: "char_len", linkageName: "std.core.string.ZString.char_len", scope: !2, file: !2, line: 504, type: !623, scopeLine: 504, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!623 = !DISubroutineType(types: !624)
!624 = !{!68, !617}
!625 = !DILocalVariable(name: "str", arg: 1, scope: !622, file: !2, line: 504, type: !617)
!626 = !DILocation(line: 504, column: 25, scope: !622)
!627 = !DILocalVariable(name: "len", scope: !622, file: !2, line: 506, type: !67, align: 8)
!628 = !DILocation(line: 506, column: 6, scope: !622)
!629 = !DILocation(line: 506, column: 12, scope: !622)
!630 = !DILocalVariable(name: "ptr", scope: !622, file: !2, line: 507, type: !64, align: 8)
!631 = !DILocation(line: 507, column: 8, scope: !622)
!632 = !DILocation(line: 507, column: 15, scope: !622)
!633 = !DILocation(line: 508, column: 2, scope: !622)
!634 = !DILocalVariable(name: "c", scope: !635, file: !2, line: 508, type: !65, align: 1)
!635 = distinct !DILexicalBlock(scope: !622, file: !2, line: 508, column: 2)
!636 = !DILocation(line: 508, column: 14, scope: !635)
!637 = !DILocation(line: 508, column: 18, scope: !635)
!638 = !DILocation(line: 508, column: 24, scope: !635)
!639 = !DILocation(line: 510, column: 7, scope: !640)
!640 = distinct !DILexicalBlock(scope: !635, file: !2, line: 509, column: 2)
!641 = !DILocation(line: 510, column: 25, scope: !640)
!642 = !DILocation(line: 512, column: 9, scope: !622)
!643 = distinct !DISubprogram(name: "len", linkageName: "std.core.string.ZString.len", scope: !2, file: !2, line: 515, type: !623, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!644 = !DILocalVariable(name: "str", arg: 1, scope: !643, file: !2, line: 515, type: !617)
!645 = !DILocation(line: 515, column: 20, scope: !643)
!646 = !DILocalVariable(name: "len", scope: !643, file: !2, line: 517, type: !67, align: 8)
!647 = !DILocation(line: 517, column: 6, scope: !643)
!648 = !DILocation(line: 517, column: 12, scope: !643)
!649 = !DILocalVariable(name: "ptr", scope: !643, file: !2, line: 518, type: !64, align: 8)
!650 = !DILocation(line: 518, column: 8, scope: !643)
!651 = !DILocation(line: 518, column: 15, scope: !643)
!652 = !DILocation(line: 519, column: 2, scope: !643)
!653 = !DILocalVariable(name: "c", scope: !654, file: !2, line: 519, type: !65, align: 1)
!654 = distinct !DILexicalBlock(scope: !643, file: !2, line: 519, column: 2)
!655 = !DILocation(line: 519, column: 14, scope: !654)
!656 = !DILocation(line: 519, column: 18, scope: !654)
!657 = !DILocation(line: 519, column: 24, scope: !654)
!658 = !DILocation(line: 519, column: 28, scope: !654)
!659 = !DILocation(line: 520, column: 9, scope: !643)
!660 = distinct !DISubprogram(name: "zstr_copy", linkageName: "std.core.String.zstr_copy", scope: !2, file: !2, line: 524, type: !661, scopeLine: 524, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!661 = !DISubroutineType(types: !662)
!662 = !{!617, !60, !205}
!663 = !DILocalVariable(name: "s", arg: 1, scope: !660, file: !2, line: 524, type: !60)
!664 = !DILocation(line: 524, column: 29, scope: !660)
!665 = !DILocalVariable(name: "allocator", arg: 2, scope: !660, file: !2, line: 524, type: !205)
!666 = !DILocation(line: 524, column: 42, scope: !660)
!667 = !DILocalVariable(name: "len", scope: !660, file: !2, line: 526, type: !67, align: 8)
!668 = !DILocation(line: 526, column: 6, scope: !660)
!669 = !DILocation(line: 526, column: 12, scope: !660)
!670 = !DILocalVariable(name: "str", scope: !660, file: !2, line: 527, type: !64, align: 8)
!671 = !DILocation(line: 527, column: 8, scope: !660)
!672 = !DILocation(line: 527, column: 43, scope: !660)
!673 = !DILocation(line: 62, column: 6, scope: !674, inlinedAt: !675)
!674 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !233, file: !233, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!675 = !DILocation(line: 57, column: 9, scope: !676, inlinedAt: !677)
!676 = distinct !DISubprogram(name: "malloc", linkageName: "malloc", scope: !233, file: !233, line: 55, scopeLine: 55, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!677 = !DILocation(line: 527, column: 14, scope: !660)
!678 = !DILocation(line: 62, column: 20, scope: !674, inlinedAt: !675)
!679 = !DILocation(line: 28, column: 71, scope: !680, inlinedAt: !681)
!680 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !233, file: !233, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!681 = !DILocation(line: 68, column: 10, scope: !674, inlinedAt: !675)
!682 = !DILocation(line: 528, column: 12, scope: !660)
!683 = !DILocation(line: 528, column: 17, scope: !660)
!684 = !DILocation(line: 324, column: 11, scope: !685, inlinedAt: !688)
!685 = distinct !DILexicalBlock(scope: !687, file: !686, line: 327, column: 1)
!686 = !DIFile(filename: "mem.c3", directory: "/usr/local/lib/c3/std/core")
!687 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !686, file: !686, line: 326, scopeLine: 326, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!688 = !DILocation(line: 528, column: 2, scope: !660)
!689 = !DILocation(line: 324, column: 23, scope: !685, inlinedAt: !688)
!690 = !DILocation(line: 324, column: 29, scope: !685, inlinedAt: !688)
!691 = !DILocation(line: 324, column: 36, scope: !685, inlinedAt: !688)
!692 = !DILocation(line: 324, column: 43, scope: !685, inlinedAt: !688)
!693 = !DILocation(line: 324, column: 49, scope: !685, inlinedAt: !688)
!694 = !DILocation(line: 324, column: 56, scope: !685, inlinedAt: !688)
!695 = !DILocation(line: 328, column: 11, scope: !687, inlinedAt: !688)
!696 = !DILocation(line: 328, column: 16, scope: !687, inlinedAt: !688)
!697 = !DILocation(line: 328, column: 21, scope: !687, inlinedAt: !688)
!698 = !DILocation(line: 328, column: 26, scope: !687, inlinedAt: !688)
!699 = !DILocation(line: 529, column: 2, scope: !660)
!700 = !DILocation(line: 529, column: 6, scope: !660)
!701 = !DILocation(line: 529, column: 13, scope: !660)
!702 = !DILocation(line: 530, column: 10, scope: !660)
!703 = distinct !DISubprogram(name: "concat", linkageName: "std.core.String.concat", scope: !2, file: !2, line: 533, type: !704, scopeLine: 533, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!704 = !DISubroutineType(types: !705)
!705 = !{!60, !60, !60, !205}
!706 = !DILocalVariable(name: "s1", arg: 1, scope: !703, file: !2, line: 533, type: !60)
!707 = !DILocation(line: 533, column: 25, scope: !703)
!708 = !DILocalVariable(name: "s2", arg: 2, scope: !703, file: !2, line: 533, type: !60)
!709 = !DILocation(line: 533, column: 36, scope: !703)
!710 = !DILocalVariable(name: "allocator", arg: 3, scope: !703, file: !2, line: 533, type: !205)
!711 = !DILocation(line: 533, column: 50, scope: !703)
!712 = !DILocalVariable(name: "full_len", scope: !703, file: !2, line: 535, type: !67, align: 8)
!713 = !DILocation(line: 535, column: 6, scope: !703)
!714 = !DILocation(line: 535, column: 17, scope: !703)
!715 = !DILocation(line: 535, column: 26, scope: !703)
!716 = !DILocalVariable(name: "str", scope: !703, file: !2, line: 536, type: !64, align: 8)
!717 = !DILocation(line: 536, column: 8, scope: !703)
!718 = !DILocation(line: 536, column: 43, scope: !703)
!719 = !DILocation(line: 62, column: 6, scope: !720, inlinedAt: !721)
!720 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !233, file: !233, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!721 = !DILocation(line: 57, column: 9, scope: !722, inlinedAt: !723)
!722 = distinct !DISubprogram(name: "malloc", linkageName: "malloc", scope: !233, file: !233, line: 55, scopeLine: 55, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!723 = !DILocation(line: 536, column: 14, scope: !703)
!724 = !DILocation(line: 62, column: 20, scope: !720, inlinedAt: !721)
!725 = !DILocation(line: 28, column: 71, scope: !726, inlinedAt: !727)
!726 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !233, file: !233, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!727 = !DILocation(line: 68, column: 10, scope: !720, inlinedAt: !721)
!728 = !DILocalVariable(name: "s1_len", scope: !703, file: !2, line: 537, type: !67, align: 8)
!729 = !DILocation(line: 537, column: 6, scope: !703)
!730 = !DILocation(line: 537, column: 15, scope: !703)
!731 = !DILocation(line: 538, column: 12, scope: !703)
!732 = !DILocation(line: 538, column: 17, scope: !703)
!733 = !DILocation(line: 324, column: 11, scope: !734, inlinedAt: !736)
!734 = distinct !DILexicalBlock(scope: !735, file: !686, line: 327, column: 1)
!735 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !686, file: !686, line: 326, scopeLine: 326, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!736 = !DILocation(line: 538, column: 2, scope: !703)
!737 = !DILocation(line: 324, column: 23, scope: !734, inlinedAt: !736)
!738 = !DILocation(line: 324, column: 29, scope: !734, inlinedAt: !736)
!739 = !DILocation(line: 324, column: 36, scope: !734, inlinedAt: !736)
!740 = !DILocation(line: 324, column: 43, scope: !734, inlinedAt: !736)
!741 = !DILocation(line: 324, column: 49, scope: !734, inlinedAt: !736)
!742 = !DILocation(line: 324, column: 56, scope: !734, inlinedAt: !736)
!743 = !DILocation(line: 328, column: 11, scope: !735, inlinedAt: !736)
!744 = !DILocation(line: 328, column: 16, scope: !735, inlinedAt: !736)
!745 = !DILocation(line: 328, column: 21, scope: !735, inlinedAt: !736)
!746 = !DILocation(line: 328, column: 26, scope: !735, inlinedAt: !736)
!747 = !DILocation(line: 539, column: 12, scope: !703)
!748 = !DILocation(line: 539, column: 18, scope: !703)
!749 = !DILocation(line: 539, column: 26, scope: !703)
!750 = !DILocation(line: 539, column: 34, scope: !703)
!751 = !DILocation(line: 324, column: 11, scope: !752, inlinedAt: !754)
!752 = distinct !DILexicalBlock(scope: !753, file: !686, line: 327, column: 1)
!753 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !686, file: !686, line: 326, scopeLine: 326, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!754 = !DILocation(line: 539, column: 2, scope: !703)
!755 = !DILocation(line: 324, column: 23, scope: !752, inlinedAt: !754)
!756 = !DILocation(line: 324, column: 29, scope: !752, inlinedAt: !754)
!757 = !DILocation(line: 324, column: 36, scope: !752, inlinedAt: !754)
!758 = !DILocation(line: 324, column: 43, scope: !752, inlinedAt: !754)
!759 = !DILocation(line: 324, column: 49, scope: !752, inlinedAt: !754)
!760 = !DILocation(line: 324, column: 56, scope: !752, inlinedAt: !754)
!761 = !DILocation(line: 328, column: 11, scope: !753, inlinedAt: !754)
!762 = !DILocation(line: 328, column: 16, scope: !753, inlinedAt: !754)
!763 = !DILocation(line: 328, column: 21, scope: !753, inlinedAt: !754)
!764 = !DILocation(line: 328, column: 26, scope: !753, inlinedAt: !754)
!765 = !DILocation(line: 540, column: 2, scope: !703)
!766 = !DILocation(line: 540, column: 6, scope: !703)
!767 = !DILocation(line: 540, column: 18, scope: !703)
!768 = !DILocation(line: 541, column: 17, scope: !703)
!769 = !DILocation(line: 541, column: 22, scope: !703)
!770 = distinct !DISubprogram(name: "tconcat", linkageName: "std.core.String.tconcat", scope: !2, file: !2, line: 544, type: !58, scopeLine: 544, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!771 = !DILocalVariable(name: "s1", arg: 1, scope: !770, file: !2, line: 544, type: !60)
!772 = !DILocation(line: 544, column: 26, scope: !770)
!773 = !DILocalVariable(name: "s2", arg: 2, scope: !770, file: !2, line: 544, type: !60)
!774 = !DILocation(line: 544, column: 37, scope: !770)
!775 = !DILocation(line: 396, column: 6, scope: !776, inlinedAt: !777)
!776 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !233, file: !233, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!777 = !DILocation(line: 544, column: 58, scope: !770)
!778 = !DILocation(line: 398, column: 3, scope: !779, inlinedAt: !777)
!779 = distinct !DILexicalBlock(scope: !776, file: !233, line: 397, column: 2)
!780 = !DILocation(line: 400, column: 9, scope: !776, inlinedAt: !777)
!781 = !DILocation(line: 544, column: 44, scope: !770)
!782 = distinct !DISubprogram(name: "zstr_tcopy", linkageName: "std.core.String.zstr_tcopy", scope: !2, file: !2, line: 547, type: !783, scopeLine: 547, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!783 = !DISubroutineType(types: !784)
!784 = !{!617, !60}
!785 = !DILocalVariable(name: "s", arg: 1, scope: !782, file: !2, line: 547, type: !60)
!786 = !DILocation(line: 547, column: 30, scope: !782)
!787 = !DILocation(line: 396, column: 6, scope: !788, inlinedAt: !789)
!788 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !233, file: !233, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!789 = !DILocation(line: 547, column: 48, scope: !782)
!790 = !DILocation(line: 398, column: 3, scope: !791, inlinedAt: !789)
!791 = distinct !DILexicalBlock(scope: !788, file: !233, line: 397, column: 2)
!792 = !DILocation(line: 400, column: 9, scope: !788, inlinedAt: !789)
!793 = !DILocation(line: 547, column: 36, scope: !782)
!794 = distinct !DISubprogram(name: "copy", linkageName: "std.core.String.copy", scope: !2, file: !2, line: 554, type: !795, scopeLine: 554, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!795 = !DISubroutineType(types: !796)
!796 = !{!60, !60, !205}
!797 = !DILocalVariable(name: "s", arg: 1, scope: !794, file: !2, line: 554, type: !60)
!798 = !DILocation(line: 554, column: 23, scope: !794)
!799 = !DILocalVariable(name: "allocator", arg: 2, scope: !794, file: !2, line: 554, type: !205)
!800 = !DILocation(line: 554, column: 36, scope: !794)
!801 = !DILocalVariable(name: "len", scope: !794, file: !2, line: 556, type: !67, align: 8)
!802 = !DILocation(line: 556, column: 6, scope: !794)
!803 = !DILocation(line: 556, column: 12, scope: !794)
!804 = !DILocalVariable(name: "str", scope: !794, file: !2, line: 557, type: !64, align: 8)
!805 = !DILocation(line: 557, column: 8, scope: !794)
!806 = !DILocation(line: 557, column: 43, scope: !794)
!807 = !DILocation(line: 62, column: 6, scope: !808, inlinedAt: !809)
!808 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !233, file: !233, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!809 = !DILocation(line: 57, column: 9, scope: !810, inlinedAt: !811)
!810 = distinct !DISubprogram(name: "malloc", linkageName: "malloc", scope: !233, file: !233, line: 55, scopeLine: 55, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!811 = !DILocation(line: 557, column: 14, scope: !794)
!812 = !DILocation(line: 62, column: 20, scope: !808, inlinedAt: !809)
!813 = !DILocation(line: 28, column: 71, scope: !814, inlinedAt: !815)
!814 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !233, file: !233, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!815 = !DILocation(line: 68, column: 10, scope: !808, inlinedAt: !809)
!816 = !DILocation(line: 558, column: 12, scope: !794)
!817 = !DILocation(line: 558, column: 17, scope: !794)
!818 = !DILocation(line: 324, column: 11, scope: !819, inlinedAt: !821)
!819 = distinct !DILexicalBlock(scope: !820, file: !686, line: 327, column: 1)
!820 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !686, file: !686, line: 326, scopeLine: 326, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!821 = !DILocation(line: 558, column: 2, scope: !794)
!822 = !DILocation(line: 324, column: 23, scope: !819, inlinedAt: !821)
!823 = !DILocation(line: 324, column: 29, scope: !819, inlinedAt: !821)
!824 = !DILocation(line: 324, column: 36, scope: !819, inlinedAt: !821)
!825 = !DILocation(line: 324, column: 43, scope: !819, inlinedAt: !821)
!826 = !DILocation(line: 324, column: 49, scope: !819, inlinedAt: !821)
!827 = !DILocation(line: 324, column: 56, scope: !819, inlinedAt: !821)
!828 = !DILocation(line: 328, column: 11, scope: !820, inlinedAt: !821)
!829 = !DILocation(line: 328, column: 16, scope: !820, inlinedAt: !821)
!830 = !DILocation(line: 328, column: 21, scope: !820, inlinedAt: !821)
!831 = !DILocation(line: 328, column: 26, scope: !820, inlinedAt: !821)
!832 = !DILocation(line: 559, column: 2, scope: !794)
!833 = !DILocation(line: 559, column: 6, scope: !794)
!834 = !DILocation(line: 559, column: 13, scope: !794)
!835 = !DILocation(line: 560, column: 17, scope: !794)
!836 = !DILocation(line: 560, column: 22, scope: !794)
!837 = distinct !DISubprogram(name: "free", linkageName: "std.core.String.free", scope: !2, file: !2, line: 563, type: !838, scopeLine: 563, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!838 = !DISubroutineType(types: !839)
!839 = !{null, !203, !205}
!840 = !DILocation(line: 564, column: 1, scope: !837)
!841 = !DILocalVariable(name: "s", arg: 1, scope: !837, file: !2, line: 563, type: !203)
!842 = !DILocation(line: 563, column: 21, scope: !837)
!843 = !DILocalVariable(name: "allocator", arg: 2, scope: !837, file: !2, line: 563, type: !205)
!844 = !DILocation(line: 563, column: 35, scope: !837)
!845 = !DILocation(line: 565, column: 7, scope: !837)
!846 = !DILocation(line: 565, column: 20, scope: !837)
!847 = !DILocation(line: 566, column: 29, scope: !837)
!848 = !DILocation(line: 101, column: 6, scope: !849, inlinedAt: !850)
!849 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !233, file: !233, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!850 = !DILocation(line: 566, column: 2, scope: !837)
!851 = !DILocation(line: 101, column: 18, scope: !849, inlinedAt: !850)
!852 = !DILocation(line: 105, column: 25, scope: !849, inlinedAt: !850)
!853 = !DILocation(line: 105, column: 2, scope: !849, inlinedAt: !850)
!854 = !DILocation(line: 567, column: 3, scope: !837)
!855 = !DILocation(line: 567, column: 7, scope: !837)
!856 = distinct !DISubprogram(name: "tcopy", linkageName: "std.core.String.tcopy", scope: !2, file: !2, line: 570, type: !857, scopeLine: 570, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!857 = !DISubroutineType(types: !858)
!858 = !{!60, !60}
!859 = !DILocalVariable(name: "s", arg: 1, scope: !856, file: !2, line: 570, type: !60)
!860 = !DILocation(line: 570, column: 24, scope: !856)
!861 = !DILocation(line: 396, column: 6, scope: !862, inlinedAt: !863)
!862 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !233, file: !233, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!863 = !DILocation(line: 570, column: 37, scope: !856)
!864 = !DILocation(line: 398, column: 3, scope: !865, inlinedAt: !863)
!865 = distinct !DILexicalBlock(scope: !862, file: !233, line: 397, column: 2)
!866 = !DILocation(line: 400, column: 9, scope: !862, inlinedAt: !863)
!867 = !DILocation(line: 570, column: 30, scope: !856)
!868 = distinct !DISubprogram(name: "copy", linkageName: "std.core.string.ZString.copy", scope: !2, file: !2, line: 572, type: !869, scopeLine: 572, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!869 = !DISubroutineType(types: !870)
!870 = !{!60, !617, !205}
!871 = !DILocalVariable(name: "z", arg: 1, scope: !868, file: !2, line: 572, type: !617)
!872 = !DILocation(line: 572, column: 24, scope: !868)
!873 = !DILocalVariable(name: "allocator", arg: 2, scope: !868, file: !2, line: 572, type: !205)
!874 = !DILocation(line: 572, column: 37, scope: !868)
!875 = !DILocation(line: 574, column: 9, scope: !868)
!876 = !DILocation(line: 574, column: 27, scope: !868)
!877 = distinct !DISubprogram(name: "tcopy", linkageName: "std.core.string.ZString.tcopy", scope: !2, file: !2, line: 577, type: !615, scopeLine: 577, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!878 = !DILocalVariable(name: "z", arg: 1, scope: !877, file: !2, line: 577, type: !617)
!879 = !DILocation(line: 577, column: 25, scope: !877)
!880 = !DILocation(line: 579, column: 9, scope: !877)
!881 = !DILocation(line: 396, column: 6, scope: !882, inlinedAt: !883)
!882 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !233, file: !233, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!883 = !DILocation(line: 579, column: 27, scope: !877)
!884 = !DILocation(line: 398, column: 3, scope: !885, inlinedAt: !883)
!885 = distinct !DILexicalBlock(scope: !882, file: !233, line: 397, column: 2)
!886 = !DILocation(line: 400, column: 9, scope: !882, inlinedAt: !883)
!887 = distinct !DISubprogram(name: "to_new_utf16", linkageName: "std.core.String.to_new_utf16", scope: !2, file: !2, line: 588, type: !888, scopeLine: 588, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!888 = !DISubroutineType(types: !889)
!889 = !{!345, !890, !60, !205}
!890 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Char16[]*", baseType: !891, size: 64, align: 64, dwarfAddressSpace: 0)
!891 = !DICompositeType(tag: DW_TAG_structure_type, name: "Char16[]", size: 128, align: 64, elements: !892, identifier: "Char16[]")
!892 = !{!893, !897}
!893 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !891, baseType: !894, size: 64, align: 64)
!894 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Char16*", baseType: !895, size: 64, align: 64, dwarfAddressSpace: 0)
!895 = !DIDerivedType(tag: DW_TAG_typedef, name: "Char16", scope: !2, file: !2, line: 9, baseType: !896, align: 2)
!896 = !DIBasicType(name: "ushort", size: 16, encoding: DW_ATE_unsigned)
!897 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !891, baseType: !67, size: 64, align: 64, offset: 64)
!898 = !DILocalVariable(name: "s", arg: 1, scope: !887, file: !2, line: 588, type: !60)
!899 = !DILocation(line: 588, column: 34, scope: !887)
!900 = !DILocalVariable(name: "allocator", arg: 2, scope: !887, file: !2, line: 588, type: !205)
!901 = !DILocation(line: 588, column: 47, scope: !887)
!902 = !DILocalVariable(name: "len16", scope: !887, file: !2, line: 590, type: !67, align: 8)
!903 = !DILocation(line: 590, column: 6, scope: !887)
!904 = !DILocation(line: 590, column: 38, scope: !887)
!905 = !DILocation(line: 590, column: 14, scope: !887)
!906 = !DILocalVariable(name: "data", scope: !887, file: !2, line: 591, type: !894, align: 8)
!907 = !DILocation(line: 591, column: 10, scope: !887)
!908 = !DILocation(line: 591, column: 63, scope: !887)
!909 = !DILocation(line: 286, column: 55, scope: !910, inlinedAt: !911)
!910 = distinct !DISubprogram(name: "alloc_array_try", linkageName: "alloc_array_try", scope: !233, file: !233, line: 284, scopeLine: 284, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!911 = !DILocation(line: 591, column: 17, scope: !887)
!912 = !DILocation(line: 286, column: 40, scope: !910, inlinedAt: !911)
!913 = !DILocation(line: 62, column: 6, scope: !914, inlinedAt: !915)
!914 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !233, file: !233, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!915 = !DILocation(line: 286, column: 18, scope: !910, inlinedAt: !911)
!916 = !DILocation(line: 62, column: 20, scope: !914, inlinedAt: !915)
!917 = !DILocation(line: 28, column: 71, scope: !918, inlinedAt: !919)
!918 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !233, file: !233, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!919 = !DILocation(line: 68, column: 10, scope: !914, inlinedAt: !915)
!920 = !DILocation(line: 286, column: 67, scope: !910, inlinedAt: !911)
!921 = !DILocation(line: 592, column: 27, scope: !887)
!922 = !DILocation(line: 592, column: 2, scope: !887)
!923 = !DILocation(line: 593, column: 2, scope: !887)
!924 = !DILocation(line: 593, column: 7, scope: !887)
!925 = !DILocation(line: 593, column: 16, scope: !887)
!926 = !DILocation(line: 594, column: 9, scope: !887)
!927 = !DILocation(line: 594, column: 15, scope: !887)
!928 = distinct !DISubprogram(name: "to_temp_utf16", linkageName: "std.core.String.to_temp_utf16", scope: !2, file: !2, line: 603, type: !929, scopeLine: 603, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!929 = !DISubroutineType(types: !930)
!930 = !{!345, !890, !60}
!931 = !DILocalVariable(name: "s", arg: 1, scope: !928, file: !2, line: 603, type: !60)
!932 = !DILocation(line: 603, column: 35, scope: !928)
!933 = !DILocation(line: 396, column: 6, scope: !934, inlinedAt: !935)
!934 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !233, file: !233, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!935 = !DILocation(line: 605, column: 24, scope: !928)
!936 = !DILocation(line: 398, column: 3, scope: !937, inlinedAt: !935)
!937 = distinct !DILexicalBlock(scope: !934, file: !233, line: 397, column: 2)
!938 = !DILocation(line: 400, column: 9, scope: !934, inlinedAt: !935)
!939 = !DILocation(line: 605, column: 9, scope: !928)
!940 = distinct !DISubprogram(name: "to_wstring", linkageName: "std.core.String.to_wstring", scope: !2, file: !2, line: 608, type: !941, scopeLine: 608, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!941 = !DISubroutineType(types: !942)
!942 = !{!345, !943, !60, !205}
!943 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "WString*", baseType: !944, size: 64, align: 64, dwarfAddressSpace: 0)
!944 = !DIDerivedType(tag: DW_TAG_typedef, name: "WString", scope: !2, file: !2, line: 7, baseType: !945, align: 8)
!945 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ushort*", baseType: !896, size: 64, align: 64, dwarfAddressSpace: 0)
!946 = !DILocalVariable(name: "s", arg: 1, scope: !940, file: !2, line: 608, type: !60)
!947 = !DILocation(line: 608, column: 31, scope: !940)
!948 = !DILocalVariable(name: "allocator", arg: 2, scope: !940, file: !2, line: 608, type: !205)
!949 = !DILocation(line: 608, column: 44, scope: !940)
!950 = !DILocation(line: 610, column: 10, scope: !940)
!951 = distinct !DISubprogram(name: "to_temp_wstring", linkageName: "std.core.String.to_temp_wstring", scope: !2, file: !2, line: 613, type: !952, scopeLine: 613, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!952 = !DISubroutineType(types: !953)
!953 = !{!345, !943, !60}
!954 = !DILocalVariable(name: "s", arg: 1, scope: !951, file: !2, line: 613, type: !60)
!955 = !DILocation(line: 613, column: 36, scope: !951)
!956 = !DILocation(line: 396, column: 6, scope: !957, inlinedAt: !958)
!957 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !233, file: !233, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!958 = !DILocation(line: 613, column: 55, scope: !951)
!959 = !DILocation(line: 398, column: 3, scope: !960, inlinedAt: !958)
!960 = distinct !DILexicalBlock(scope: !957, file: !233, line: 397, column: 2)
!961 = !DILocation(line: 400, column: 9, scope: !957, inlinedAt: !958)
!962 = !DILocation(line: 613, column: 42, scope: !951)
!963 = distinct !DISubprogram(name: "to_new_wstring", linkageName: "std.core.String.to_new_wstring", scope: !2, file: !2, line: 614, type: !952, scopeLine: 614, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!964 = !DILocalVariable(name: "s", arg: 1, scope: !963, file: !2, line: 614, type: !60)
!965 = !DILocation(line: 614, column: 35, scope: !963)
!966 = !DILocation(line: 614, column: 41, scope: !963)
!967 = distinct !DISubprogram(name: "to_utf32", linkageName: "std.core.String.to_utf32", scope: !2, file: !2, line: 616, type: !968, scopeLine: 616, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!968 = !DISubroutineType(types: !969)
!969 = !{!345, !970, !60, !205}
!970 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Char32[]*", baseType: !971, size: 64, align: 64, dwarfAddressSpace: 0)
!971 = !DICompositeType(tag: DW_TAG_structure_type, name: "Char32[]", size: 128, align: 64, elements: !972, identifier: "Char32[]")
!972 = !{!973, !976}
!973 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !971, baseType: !974, size: 64, align: 64)
!974 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Char32*", baseType: !975, size: 64, align: 64, dwarfAddressSpace: 0)
!975 = !DIDerivedType(tag: DW_TAG_typedef, name: "Char32", scope: !2, file: !2, line: 8, baseType: !3, align: 4)
!976 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !971, baseType: !67, size: 64, align: 64, offset: 64)
!977 = !DILocalVariable(name: "s", arg: 1, scope: !967, file: !2, line: 616, type: !60)
!978 = !DILocation(line: 616, column: 30, scope: !967)
!979 = !DILocalVariable(name: "allocator", arg: 2, scope: !967, file: !2, line: 616, type: !205)
!980 = !DILocation(line: 616, column: 43, scope: !967)
!981 = !DILocalVariable(name: "codepoints", scope: !967, file: !2, line: 618, type: !67, align: 8)
!982 = !DILocation(line: 618, column: 6, scope: !967)
!983 = !DILocation(line: 618, column: 41, scope: !967)
!984 = !DILocation(line: 618, column: 19, scope: !967)
!985 = !DILocalVariable(name: "data", scope: !967, file: !2, line: 619, type: !974, align: 8)
!986 = !DILocation(line: 619, column: 10, scope: !967)
!987 = !DILocation(line: 619, column: 63, scope: !967)
!988 = !DILocation(line: 286, column: 55, scope: !989, inlinedAt: !990)
!989 = distinct !DISubprogram(name: "alloc_array_try", linkageName: "alloc_array_try", scope: !233, file: !233, line: 284, scopeLine: 284, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!990 = !DILocation(line: 619, column: 17, scope: !967)
!991 = !DILocation(line: 286, column: 40, scope: !989, inlinedAt: !990)
!992 = !DILocation(line: 62, column: 6, scope: !993, inlinedAt: !994)
!993 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !233, file: !233, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!994 = !DILocation(line: 286, column: 18, scope: !989, inlinedAt: !990)
!995 = !DILocation(line: 62, column: 20, scope: !993, inlinedAt: !994)
!996 = !DILocation(line: 28, column: 71, scope: !997, inlinedAt: !998)
!997 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !233, file: !233, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!998 = !DILocation(line: 68, column: 10, scope: !993, inlinedAt: !994)
!999 = !DILocation(line: 286, column: 67, scope: !989, inlinedAt: !990)
!1000 = !DILocation(line: 620, column: 27, scope: !967)
!1001 = !DILocation(line: 620, column: 2, scope: !967)
!1002 = !DILocation(line: 621, column: 2, scope: !967)
!1003 = !DILocation(line: 621, column: 7, scope: !967)
!1004 = !DILocation(line: 621, column: 21, scope: !967)
!1005 = !DILocation(line: 622, column: 9, scope: !967)
!1006 = !DILocation(line: 622, column: 15, scope: !967)
!1007 = distinct !DISubprogram(name: "to_new_utf32", linkageName: "std.core.String.to_new_utf32", scope: !2, file: !2, line: 625, type: !1008, scopeLine: 625, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!1008 = !DISubroutineType(types: !1009)
!1009 = !{!345, !970, !60}
!1010 = !DILocalVariable(name: "s", arg: 1, scope: !1007, file: !2, line: 625, type: !60)
!1011 = !DILocation(line: 625, column: 34, scope: !1007)
!1012 = !DILocation(line: 625, column: 40, scope: !1007)
!1013 = distinct !DISubprogram(name: "to_temp_utf32", linkageName: "std.core.String.to_temp_utf32", scope: !2, file: !2, line: 626, type: !1008, scopeLine: 626, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!1014 = !DILocalVariable(name: "s", arg: 1, scope: !1013, file: !2, line: 626, type: !60)
!1015 = !DILocation(line: 626, column: 35, scope: !1013)
!1016 = !DILocation(line: 396, column: 6, scope: !1017, inlinedAt: !1018)
!1017 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !233, file: !233, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1018 = !DILocation(line: 626, column: 52, scope: !1013)
!1019 = !DILocation(line: 398, column: 3, scope: !1020, inlinedAt: !1018)
!1020 = distinct !DILexicalBlock(scope: !1017, file: !233, line: 397, column: 2)
!1021 = !DILocation(line: 400, column: 9, scope: !1017, inlinedAt: !1018)
!1022 = !DILocation(line: 626, column: 41, scope: !1013)
!1023 = distinct !DISubprogram(name: "convert_ascii_to_lower", linkageName: "std.core.String.convert_ascii_to_lower", scope: !2, file: !2, line: 634, type: !1024, scopeLine: 634, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!1024 = !DISubroutineType(types: !1025)
!1025 = !{null, !60}
!1026 = !DILocalVariable(name: "s", arg: 1, scope: !1023, file: !2, line: 634, type: !60)
!1027 = !DILocation(line: 634, column: 39, scope: !1023)
!1028 = !DILocation(line: 636, column: 16, scope: !1029)
!1029 = distinct !DILexicalBlock(scope: !1023, file: !2, line: 636, column: 2)
!1030 = !DILocalVariable(name: ".temp", scope: !1029, file: !2, line: 636, type: !67, align: 8)
!1031 = !DILocalVariable(name: "c", scope: !1032, file: !2, line: 636, type: !64, align: 8)
!1032 = distinct !DILexicalBlock(scope: !1029, file: !2, line: 636, column: 19)
!1033 = !DILocation(line: 636, column: 12, scope: !1032)
!1034 = !DILocation(line: 636, column: 16, scope: !1032)
!1035 = !DILocation(line: 636, column: 23, scope: !1032)
!1036 = !DILocation(line: 636, column: 44, scope: !1032)
!1037 = !DILocation(line: 636, column: 43, scope: !1032)
!1038 = distinct !DISubprogram(name: "new_ascii_to_lower", linkageName: "std.core.String.new_ascii_to_lower", scope: !2, file: !2, line: 639, type: !795, scopeLine: 639, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!1039 = !DILocalVariable(name: "s", arg: 1, scope: !1038, file: !2, line: 639, type: !60)
!1040 = !DILocation(line: 639, column: 37, scope: !1038)
!1041 = !DILocalVariable(name: "allocator", arg: 2, scope: !1038, file: !2, line: 639, type: !205)
!1042 = !DILocation(line: 639, column: 50, scope: !1038)
!1043 = !DILocalVariable(name: "copy", scope: !1038, file: !2, line: 641, type: !60, align: 8)
!1044 = !DILocation(line: 641, column: 9, scope: !1038)
!1045 = !DILocation(line: 641, column: 23, scope: !1038)
!1046 = !DILocation(line: 641, column: 16, scope: !1038)
!1047 = !DILocation(line: 642, column: 2, scope: !1038)
!1048 = !DILocation(line: 643, column: 9, scope: !1038)
!1049 = distinct !DISubprogram(name: "temp_ascii_to_lower", linkageName: "std.core.String.temp_ascii_to_lower", scope: !2, file: !2, line: 646, type: !857, scopeLine: 646, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!1050 = !DILocalVariable(name: "s", arg: 1, scope: !1049, file: !2, line: 646, type: !60)
!1051 = !DILocation(line: 646, column: 38, scope: !1049)
!1052 = !DILocation(line: 396, column: 6, scope: !1053, inlinedAt: !1054)
!1053 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !233, file: !233, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1054 = !DILocation(line: 648, column: 30, scope: !1049)
!1055 = !DILocation(line: 398, column: 3, scope: !1056, inlinedAt: !1054)
!1056 = distinct !DILexicalBlock(scope: !1053, file: !233, line: 397, column: 2)
!1057 = !DILocation(line: 400, column: 9, scope: !1053, inlinedAt: !1054)
!1058 = !DILocation(line: 648, column: 9, scope: !1049)
!1059 = distinct !DISubprogram(name: "convert_ascii_to_upper", linkageName: "std.core.String.convert_ascii_to_upper", scope: !2, file: !2, line: 657, type: !1024, scopeLine: 657, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!1060 = !DILocalVariable(name: "s", arg: 1, scope: !1059, file: !2, line: 657, type: !60)
!1061 = !DILocation(line: 657, column: 39, scope: !1059)
!1062 = !DILocation(line: 659, column: 16, scope: !1063)
!1063 = distinct !DILexicalBlock(scope: !1059, file: !2, line: 659, column: 2)
!1064 = !DILocalVariable(name: ".temp", scope: !1063, file: !2, line: 659, type: !67, align: 8)
!1065 = !DILocalVariable(name: "c", scope: !1066, file: !2, line: 659, type: !64, align: 8)
!1066 = distinct !DILexicalBlock(scope: !1063, file: !2, line: 659, column: 19)
!1067 = !DILocation(line: 659, column: 12, scope: !1066)
!1068 = !DILocation(line: 659, column: 16, scope: !1066)
!1069 = !DILocation(line: 659, column: 23, scope: !1066)
!1070 = !DILocation(line: 659, column: 44, scope: !1066)
!1071 = !DILocation(line: 659, column: 43, scope: !1066)
!1072 = distinct !DISubprogram(name: "new_ascii_to_upper", linkageName: "std.core.String.new_ascii_to_upper", scope: !2, file: !2, line: 670, type: !795, scopeLine: 670, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!1073 = !DILocalVariable(name: "s", arg: 1, scope: !1072, file: !2, line: 670, type: !60)
!1074 = !DILocation(line: 670, column: 37, scope: !1072)
!1075 = !DILocalVariable(name: "allocator", arg: 2, scope: !1072, file: !2, line: 670, type: !205)
!1076 = !DILocation(line: 670, column: 50, scope: !1072)
!1077 = !DILocalVariable(name: "copy", scope: !1072, file: !2, line: 672, type: !60, align: 8)
!1078 = !DILocation(line: 672, column: 9, scope: !1072)
!1079 = !DILocation(line: 672, column: 23, scope: !1072)
!1080 = !DILocation(line: 672, column: 16, scope: !1072)
!1081 = !DILocation(line: 673, column: 2, scope: !1072)
!1082 = !DILocation(line: 674, column: 9, scope: !1072)
!1083 = distinct !DISubprogram(name: "iterator", linkageName: "std.core.String.iterator", scope: !2, file: !2, line: 677, type: !1084, scopeLine: 677, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!1084 = !DISubroutineType(types: !1085)
!1085 = !{!1086, !60}
!1086 = !DICompositeType(tag: DW_TAG_structure_type, name: "StringIterator", scope: !2, file: !2, line: 3, size: 192, align: 64, elements: !1087, identifier: "std.core.string.iterator.StringIterator")
!1087 = !{!1088, !1089}
!1088 = !DIDerivedType(tag: DW_TAG_member, name: "utf8", scope: !1086, file: !2, line: 5, baseType: !60, size: 128, align: 64)
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1086, file: !2, line: 6, baseType: !67, size: 64, align: 64, offset: 128)
!1090 = !DILocalVariable(name: "s", arg: 1, scope: !1083, file: !2, line: 677, type: !60)
!1091 = !DILocation(line: 677, column: 35, scope: !1083)
!1092 = !DILocation(line: 679, column: 11, scope: !1083)
!1093 = !DILocation(line: 679, column: 14, scope: !1083)
!1094 = distinct !DISubprogram(name: "temp_ascii_to_upper", linkageName: "std.core.String.temp_ascii_to_upper", scope: !2, file: !2, line: 686, type: !857, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!1095 = !DILocalVariable(name: "s", arg: 1, scope: !1094, file: !2, line: 686, type: !60)
!1096 = !DILocation(line: 686, column: 38, scope: !1094)
!1097 = !DILocation(line: 396, column: 6, scope: !1098, inlinedAt: !1099)
!1098 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !233, file: !233, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1099 = !DILocation(line: 688, column: 30, scope: !1094)
!1100 = !DILocation(line: 398, column: 3, scope: !1101, inlinedAt: !1099)
!1101 = distinct !DILexicalBlock(scope: !1098, file: !233, line: 397, column: 2)
!1102 = !DILocation(line: 400, column: 9, scope: !1098, inlinedAt: !1099)
!1103 = !DILocation(line: 688, column: 9, scope: !1094)
!1104 = distinct !DISubprogram(name: "utf8_codepoints", linkageName: "std.core.String.utf8_codepoints", scope: !2, file: !2, line: 722, type: !1105, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!1105 = !DISubroutineType(types: !1106)
!1106 = !{!67, !60}
!1107 = !DILocalVariable(name: "s", arg: 1, scope: !1104, file: !2, line: 722, type: !60)
!1108 = !DILocation(line: 722, column: 31, scope: !1104)
!1109 = !DILocalVariable(name: "len", scope: !1104, file: !2, line: 724, type: !67, align: 8)
!1110 = !DILocation(line: 724, column: 6, scope: !1104)
!1111 = !DILocation(line: 724, column: 12, scope: !1104)
!1112 = !DILocation(line: 725, column: 20, scope: !1113)
!1113 = distinct !DILexicalBlock(scope: !1104, file: !2, line: 725, column: 2)
!1114 = !DILocalVariable(name: ".temp", scope: !1113, file: !2, line: 725, type: !67, align: 8)
!1115 = !DILocalVariable(name: "c", scope: !1116, file: !2, line: 725, type: !65, align: 1)
!1116 = distinct !DILexicalBlock(scope: !1113, file: !2, line: 726, column: 2)
!1117 = !DILocation(line: 725, column: 16, scope: !1116)
!1118 = !DILocation(line: 725, column: 20, scope: !1116)
!1119 = !DILocation(line: 727, column: 7, scope: !1120)
!1120 = distinct !DILexicalBlock(scope: !1116, file: !2, line: 726, column: 2)
!1121 = !DILocation(line: 727, column: 25, scope: !1120)
!1122 = !DILocation(line: 729, column: 9, scope: !1104)
!1123 = distinct !DISubprogram(name: "to_int128", linkageName: "std.core.String.to_int128", scope: !2, file: !2, line: 807, type: !1124, scopeLine: 807, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!1124 = !DISubroutineType(types: !1125)
!1125 = !{!345, !1126, !60, !18}
!1126 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "int128*", baseType: !1127, size: 64, align: 64, dwarfAddressSpace: 0)
!1127 = !DIBasicType(name: "int128", size: 128, encoding: DW_ATE_signed)
!1128 = !DILocalVariable(name: "s", arg: 1, scope: !1123, file: !2, line: 807, type: !60)
!1129 = !DILocation(line: 807, column: 29, scope: !1123)
!1130 = !DILocalVariable(name: "base", arg: 2, scope: !1123, file: !2, line: 807, type: !18)
!1131 = !DILocation(line: 807, column: 36, scope: !1123)
!1132 = !DILocation(line: 734, column: 12, scope: !1133, inlinedAt: !1135)
!1133 = distinct !DILexicalBlock(scope: !1134, file: !2, line: 737, column: 1)
!1134 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 736, scopeLine: 736, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !69)
!1135 = !DILocation(line: 807, column: 50, scope: !1123)
!1136 = !DILocation(line: 734, column: 26, scope: !1133, inlinedAt: !1135)
!1137 = !DILocation(line: 734, column: 39, scope: !1133, inlinedAt: !1135)
!1138 = !DILocalVariable(name: "len", scope: !1134, file: !2, line: 738, type: !67, align: 8)
!1139 = !DILocation(line: 738, column: 6, scope: !1134, inlinedAt: !1135)
!1140 = !DILocation(line: 738, column: 12, scope: !1134, inlinedAt: !1135)
!1141 = !DILocalVariable(name: "index", scope: !1134, file: !2, line: 739, type: !67, align: 8)
!1142 = !DILocation(line: 739, column: 6, scope: !1134, inlinedAt: !1135)
!1143 = !DILocation(line: 739, column: 14, scope: !1134, inlinedAt: !1135)
!1144 = !DILocalVariable(name: "ptr", scope: !1134, file: !2, line: 740, type: !64, align: 8)
!1145 = !DILocation(line: 740, column: 8, scope: !1134, inlinedAt: !1135)
!1146 = !DILocation(line: 740, column: 14, scope: !1134, inlinedAt: !1135)
!1147 = !DILocation(line: 741, column: 2, scope: !1134, inlinedAt: !1135)
!1148 = !DILocation(line: 741, column: 9, scope: !1149, inlinedAt: !1135)
!1149 = distinct !DILexicalBlock(scope: !1134, file: !2, line: 741, column: 2)
!1150 = !DILocation(line: 741, column: 17, scope: !1149, inlinedAt: !1135)
!1151 = !DILocation(line: 741, column: 42, scope: !1149, inlinedAt: !1135)
!1152 = !DILocation(line: 741, column: 46, scope: !1149, inlinedAt: !1135)
!1153 = !DILocation(line: 16, column: 29, scope: !1154, inlinedAt: !1156)
!1154 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1155, file: !1155, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1155 = !DIFile(filename: "ascii.c3", directory: "/usr/local/lib/c3/std")
!1156 = !DILocation(line: 741, column: 24, scope: !1149, inlinedAt: !1135)
!1157 = !DILocation(line: 16, column: 42, scope: !1154, inlinedAt: !1156)
!1158 = !DILocation(line: 741, column: 55, scope: !1149, inlinedAt: !1135)
!1159 = !DILocation(line: 742, column: 6, scope: !1134, inlinedAt: !1135)
!1160 = !DILocation(line: 742, column: 13, scope: !1134, inlinedAt: !1135)
!1161 = !DILocation(line: 742, column: 27, scope: !1134, inlinedAt: !1135)
!1162 = !DILocalVariable(name: "is_negative", scope: !1134, file: !2, line: 743, type: !146, align: 1)
!1163 = !DILocation(line: 743, column: 7, scope: !1134, inlinedAt: !1135)
!1164 = !DILocation(line: 744, column: 10, scope: !1165, inlinedAt: !1135)
!1165 = distinct !DILexicalBlock(scope: !1134, file: !2, line: 744, column: 2)
!1166 = !DILocation(line: 744, column: 17, scope: !1165, inlinedAt: !1135)
!1167 = !DILocation(line: 747, column: 8, scope: !1168, inlinedAt: !1135)
!1168 = distinct !DILexicalBlock(scope: !1165, file: !2, line: 747, column: 4)
!1169 = !DILocation(line: 748, column: 18, scope: !1168, inlinedAt: !1135)
!1170 = !DILocation(line: 749, column: 4, scope: !1168, inlinedAt: !1135)
!1171 = !DILocation(line: 751, column: 4, scope: !1172, inlinedAt: !1135)
!1172 = distinct !DILexicalBlock(scope: !1165, file: !2, line: 751, column: 4)
!1173 = !DILocation(line: 753, column: 4, scope: !1174, inlinedAt: !1135)
!1174 = distinct !DILexicalBlock(scope: !1165, file: !2, line: 753, column: 4)
!1175 = !DILocation(line: 755, column: 6, scope: !1134, inlinedAt: !1135)
!1176 = !DILocation(line: 755, column: 13, scope: !1134, inlinedAt: !1135)
!1177 = !DILocation(line: 755, column: 27, scope: !1134, inlinedAt: !1135)
!1178 = !DILocalVariable(name: "base_used", scope: !1134, file: !2, line: 756, type: !1127, align: 16)
!1179 = !DILocation(line: 756, column: 8, scope: !1134, inlinedAt: !1135)
!1180 = !DILocation(line: 756, column: 21, scope: !1134, inlinedAt: !1135)
!1181 = !DILocation(line: 757, column: 6, scope: !1134, inlinedAt: !1135)
!1182 = !DILocation(line: 757, column: 13, scope: !1134, inlinedAt: !1135)
!1183 = !DILocation(line: 757, column: 30, scope: !1134, inlinedAt: !1135)
!1184 = !DILocation(line: 759, column: 3, scope: !1185, inlinedAt: !1135)
!1185 = distinct !DILexicalBlock(scope: !1134, file: !2, line: 758, column: 2)
!1186 = !DILocation(line: 760, column: 7, scope: !1185, inlinedAt: !1135)
!1187 = !DILocation(line: 760, column: 16, scope: !1185, inlinedAt: !1135)
!1188 = !DILocation(line: 760, column: 29, scope: !1185, inlinedAt: !1135)
!1189 = !DILocation(line: 761, column: 11, scope: !1190, inlinedAt: !1135)
!1190 = distinct !DILexicalBlock(scope: !1185, file: !2, line: 761, column: 3)
!1191 = !DILocation(line: 761, column: 18, scope: !1190, inlinedAt: !1135)
!1192 = !DILocation(line: 765, column: 17, scope: !1193, inlinedAt: !1135)
!1193 = distinct !DILexicalBlock(scope: !1190, file: !2, line: 765, column: 5)
!1194 = !DILocation(line: 766, column: 5, scope: !1193, inlinedAt: !1135)
!1195 = !DILocation(line: 769, column: 17, scope: !1196, inlinedAt: !1135)
!1196 = distinct !DILexicalBlock(scope: !1190, file: !2, line: 769, column: 5)
!1197 = !DILocation(line: 770, column: 5, scope: !1196, inlinedAt: !1135)
!1198 = !DILocation(line: 773, column: 17, scope: !1199, inlinedAt: !1135)
!1199 = distinct !DILexicalBlock(scope: !1190, file: !2, line: 773, column: 5)
!1200 = !DILocation(line: 774, column: 5, scope: !1199, inlinedAt: !1135)
!1201 = !DILocation(line: 776, column: 5, scope: !1202, inlinedAt: !1135)
!1202 = distinct !DILexicalBlock(scope: !1190, file: !2, line: 776, column: 5)
!1203 = !DILocation(line: 778, column: 7, scope: !1185, inlinedAt: !1135)
!1204 = !DILocation(line: 778, column: 14, scope: !1185, inlinedAt: !1135)
!1205 = !DILocation(line: 778, column: 28, scope: !1185, inlinedAt: !1135)
!1206 = !DILocalVariable(name: "value", scope: !1134, file: !2, line: 780, type: !1127, align: 16)
!1207 = !DILocation(line: 780, column: 8, scope: !1134, inlinedAt: !1135)
!1208 = !DILocation(line: 780, column: 16, scope: !1134, inlinedAt: !1135)
!1209 = !DILocation(line: 781, column: 2, scope: !1134, inlinedAt: !1135)
!1210 = !DILocation(line: 781, column: 9, scope: !1211, inlinedAt: !1135)
!1211 = distinct !DILexicalBlock(scope: !1134, file: !2, line: 781, column: 2)
!1212 = !DILocation(line: 781, column: 18, scope: !1211, inlinedAt: !1135)
!1213 = !DILocalVariable(name: "c", scope: !1214, file: !2, line: 783, type: !65, align: 1)
!1214 = distinct !DILexicalBlock(scope: !1211, file: !2, line: 782, column: 2)
!1215 = !DILocation(line: 783, column: 8, scope: !1214, inlinedAt: !1135)
!1216 = !DILocalVariable(name: "ch", scope: !1217, file: !2, line: 784, type: !65, align: 1)
!1217 = distinct !DILexicalBlock(scope: !1214, file: !2, line: 784, column: 4)
!1218 = !DILocation(line: 784, column: 9, scope: !1217, inlinedAt: !1135)
!1219 = !DILocation(line: 784, column: 14, scope: !1217, inlinedAt: !1135)
!1220 = !DILocation(line: 784, column: 21, scope: !1217, inlinedAt: !1135)
!1221 = !DILocation(line: 785, column: 8, scope: !1217, inlinedAt: !1135)
!1222 = !DILocation(line: 785, column: 27, scope: !1217, inlinedAt: !1135)
!1223 = !DILocation(line: 785, column: 51, scope: !1217, inlinedAt: !1135)
!1224 = !DILocation(line: 785, column: 45, scope: !1217, inlinedAt: !1135)
!1225 = !DILocation(line: 786, column: 8, scope: !1217, inlinedAt: !1135)
!1226 = !DILocation(line: 786, column: 33, scope: !1217, inlinedAt: !1135)
!1227 = !DILocation(line: 786, column: 27, scope: !1217, inlinedAt: !1135)
!1228 = !DILocation(line: 787, column: 8, scope: !1217, inlinedAt: !1135)
!1229 = !DILocation(line: 787, column: 25, scope: !1217, inlinedAt: !1135)
!1230 = !DILocation(line: 788, column: 8, scope: !1217, inlinedAt: !1135)
!1231 = !DILocation(line: 788, column: 25, scope: !1217, inlinedAt: !1135)
!1232 = !DILocation(line: 789, column: 18, scope: !1217, inlinedAt: !1135)
!1233 = !DILocation(line: 789, column: 12, scope: !1217, inlinedAt: !1135)
!1234 = !DILocation(line: 791, column: 7, scope: !1214, inlinedAt: !1135)
!1235 = !DILocation(line: 791, column: 12, scope: !1214, inlinedAt: !1135)
!1236 = !DILocation(line: 791, column: 30, scope: !1214, inlinedAt: !1135)
!1237 = !DILocation(line: 793, column: 8, scope: !1238, inlinedAt: !1135)
!1238 = distinct !DILexicalBlock(scope: !1214, file: !2, line: 793, column: 4)
!1239 = !DILocalVariable(name: "new_value", scope: !1240, file: !2, line: 795, type: !1127, align: 16)
!1240 = distinct !DILexicalBlock(scope: !1238, file: !2, line: 794, column: 4)
!1241 = !DILocation(line: 795, column: 11, scope: !1240, inlinedAt: !1135)
!1242 = !DILocation(line: 795, column: 23, scope: !1240, inlinedAt: !1135)
!1243 = !DILocation(line: 795, column: 31, scope: !1240, inlinedAt: !1135)
!1244 = !DILocation(line: 795, column: 43, scope: !1240, inlinedAt: !1135)
!1245 = !DILocation(line: 796, column: 9, scope: !1240, inlinedAt: !1135)
!1246 = !DILocation(line: 796, column: 21, scope: !1240, inlinedAt: !1135)
!1247 = !DILocation(line: 796, column: 35, scope: !1240, inlinedAt: !1135)
!1248 = !DILocation(line: 797, column: 12, scope: !1240, inlinedAt: !1135)
!1249 = !DILocalVariable(name: "new_value", scope: !1238, file: !2, line: 799, type: !1127, align: 16)
!1250 = !DILocation(line: 799, column: 10, scope: !1238, inlinedAt: !1135)
!1251 = !DILocation(line: 799, column: 22, scope: !1238, inlinedAt: !1135)
!1252 = !DILocation(line: 799, column: 30, scope: !1238, inlinedAt: !1135)
!1253 = !DILocation(line: 799, column: 42, scope: !1238, inlinedAt: !1135)
!1254 = !DILocation(line: 800, column: 8, scope: !1238, inlinedAt: !1135)
!1255 = !DILocation(line: 800, column: 20, scope: !1238, inlinedAt: !1135)
!1256 = !DILocation(line: 800, column: 34, scope: !1238, inlinedAt: !1135)
!1257 = !DILocation(line: 801, column: 11, scope: !1238, inlinedAt: !1135)
!1258 = !DILocation(line: 804, column: 9, scope: !1134, inlinedAt: !1135)
!1259 = distinct !DISubprogram(name: "to_long", linkageName: "std.core.String.to_long", scope: !2, file: !2, line: 808, type: !1260, scopeLine: 808, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!1260 = !DISubroutineType(types: !1261)
!1261 = !{!345, !1262, !60, !18}
!1262 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "long*", baseType: !346, size: 64, align: 64, dwarfAddressSpace: 0)
!1263 = !DILocalVariable(name: "s", arg: 1, scope: !1259, file: !2, line: 808, type: !60)
!1264 = !DILocation(line: 808, column: 25, scope: !1259)
!1265 = !DILocalVariable(name: "base", arg: 2, scope: !1259, file: !2, line: 808, type: !18)
!1266 = !DILocation(line: 808, column: 32, scope: !1259)
!1267 = !DILocation(line: 734, column: 12, scope: !1268, inlinedAt: !1270)
!1268 = distinct !DILexicalBlock(scope: !1269, file: !2, line: 737, column: 1)
!1269 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 736, scopeLine: 736, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !69)
!1270 = !DILocation(line: 808, column: 46, scope: !1259)
!1271 = !DILocation(line: 734, column: 26, scope: !1268, inlinedAt: !1270)
!1272 = !DILocation(line: 734, column: 39, scope: !1268, inlinedAt: !1270)
!1273 = !DILocalVariable(name: "len", scope: !1269, file: !2, line: 738, type: !67, align: 8)
!1274 = !DILocation(line: 738, column: 6, scope: !1269, inlinedAt: !1270)
!1275 = !DILocation(line: 738, column: 12, scope: !1269, inlinedAt: !1270)
!1276 = !DILocalVariable(name: "index", scope: !1269, file: !2, line: 739, type: !67, align: 8)
!1277 = !DILocation(line: 739, column: 6, scope: !1269, inlinedAt: !1270)
!1278 = !DILocation(line: 739, column: 14, scope: !1269, inlinedAt: !1270)
!1279 = !DILocalVariable(name: "ptr", scope: !1269, file: !2, line: 740, type: !64, align: 8)
!1280 = !DILocation(line: 740, column: 8, scope: !1269, inlinedAt: !1270)
!1281 = !DILocation(line: 740, column: 14, scope: !1269, inlinedAt: !1270)
!1282 = !DILocation(line: 741, column: 2, scope: !1269, inlinedAt: !1270)
!1283 = !DILocation(line: 741, column: 9, scope: !1284, inlinedAt: !1270)
!1284 = distinct !DILexicalBlock(scope: !1269, file: !2, line: 741, column: 2)
!1285 = !DILocation(line: 741, column: 17, scope: !1284, inlinedAt: !1270)
!1286 = !DILocation(line: 741, column: 42, scope: !1284, inlinedAt: !1270)
!1287 = !DILocation(line: 741, column: 46, scope: !1284, inlinedAt: !1270)
!1288 = !DILocation(line: 16, column: 29, scope: !1289, inlinedAt: !1290)
!1289 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1155, file: !1155, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1290 = !DILocation(line: 741, column: 24, scope: !1284, inlinedAt: !1270)
!1291 = !DILocation(line: 16, column: 42, scope: !1289, inlinedAt: !1290)
!1292 = !DILocation(line: 741, column: 55, scope: !1284, inlinedAt: !1270)
!1293 = !DILocation(line: 742, column: 6, scope: !1269, inlinedAt: !1270)
!1294 = !DILocation(line: 742, column: 13, scope: !1269, inlinedAt: !1270)
!1295 = !DILocation(line: 742, column: 27, scope: !1269, inlinedAt: !1270)
!1296 = !DILocalVariable(name: "is_negative", scope: !1269, file: !2, line: 743, type: !146, align: 1)
!1297 = !DILocation(line: 743, column: 7, scope: !1269, inlinedAt: !1270)
!1298 = !DILocation(line: 744, column: 10, scope: !1299, inlinedAt: !1270)
!1299 = distinct !DILexicalBlock(scope: !1269, file: !2, line: 744, column: 2)
!1300 = !DILocation(line: 744, column: 17, scope: !1299, inlinedAt: !1270)
!1301 = !DILocation(line: 747, column: 8, scope: !1302, inlinedAt: !1270)
!1302 = distinct !DILexicalBlock(scope: !1299, file: !2, line: 747, column: 4)
!1303 = !DILocation(line: 748, column: 18, scope: !1302, inlinedAt: !1270)
!1304 = !DILocation(line: 749, column: 4, scope: !1302, inlinedAt: !1270)
!1305 = !DILocation(line: 751, column: 4, scope: !1306, inlinedAt: !1270)
!1306 = distinct !DILexicalBlock(scope: !1299, file: !2, line: 751, column: 4)
!1307 = !DILocation(line: 753, column: 4, scope: !1308, inlinedAt: !1270)
!1308 = distinct !DILexicalBlock(scope: !1299, file: !2, line: 753, column: 4)
!1309 = !DILocation(line: 755, column: 6, scope: !1269, inlinedAt: !1270)
!1310 = !DILocation(line: 755, column: 13, scope: !1269, inlinedAt: !1270)
!1311 = !DILocation(line: 755, column: 27, scope: !1269, inlinedAt: !1270)
!1312 = !DILocalVariable(name: "base_used", scope: !1269, file: !2, line: 756, type: !346, align: 8)
!1313 = !DILocation(line: 756, column: 8, scope: !1269, inlinedAt: !1270)
!1314 = !DILocation(line: 756, column: 21, scope: !1269, inlinedAt: !1270)
!1315 = !DILocation(line: 757, column: 6, scope: !1269, inlinedAt: !1270)
!1316 = !DILocation(line: 757, column: 13, scope: !1269, inlinedAt: !1270)
!1317 = !DILocation(line: 757, column: 30, scope: !1269, inlinedAt: !1270)
!1318 = !DILocation(line: 759, column: 3, scope: !1319, inlinedAt: !1270)
!1319 = distinct !DILexicalBlock(scope: !1269, file: !2, line: 758, column: 2)
!1320 = !DILocation(line: 760, column: 7, scope: !1319, inlinedAt: !1270)
!1321 = !DILocation(line: 760, column: 16, scope: !1319, inlinedAt: !1270)
!1322 = !DILocation(line: 760, column: 29, scope: !1319, inlinedAt: !1270)
!1323 = !DILocation(line: 761, column: 11, scope: !1324, inlinedAt: !1270)
!1324 = distinct !DILexicalBlock(scope: !1319, file: !2, line: 761, column: 3)
!1325 = !DILocation(line: 761, column: 18, scope: !1324, inlinedAt: !1270)
!1326 = !DILocation(line: 765, column: 17, scope: !1327, inlinedAt: !1270)
!1327 = distinct !DILexicalBlock(scope: !1324, file: !2, line: 765, column: 5)
!1328 = !DILocation(line: 766, column: 5, scope: !1327, inlinedAt: !1270)
!1329 = !DILocation(line: 769, column: 17, scope: !1330, inlinedAt: !1270)
!1330 = distinct !DILexicalBlock(scope: !1324, file: !2, line: 769, column: 5)
!1331 = !DILocation(line: 770, column: 5, scope: !1330, inlinedAt: !1270)
!1332 = !DILocation(line: 773, column: 17, scope: !1333, inlinedAt: !1270)
!1333 = distinct !DILexicalBlock(scope: !1324, file: !2, line: 773, column: 5)
!1334 = !DILocation(line: 774, column: 5, scope: !1333, inlinedAt: !1270)
!1335 = !DILocation(line: 776, column: 5, scope: !1336, inlinedAt: !1270)
!1336 = distinct !DILexicalBlock(scope: !1324, file: !2, line: 776, column: 5)
!1337 = !DILocation(line: 778, column: 7, scope: !1319, inlinedAt: !1270)
!1338 = !DILocation(line: 778, column: 14, scope: !1319, inlinedAt: !1270)
!1339 = !DILocation(line: 778, column: 28, scope: !1319, inlinedAt: !1270)
!1340 = !DILocalVariable(name: "value", scope: !1269, file: !2, line: 780, type: !346, align: 8)
!1341 = !DILocation(line: 780, column: 8, scope: !1269, inlinedAt: !1270)
!1342 = !DILocation(line: 780, column: 16, scope: !1269, inlinedAt: !1270)
!1343 = !DILocation(line: 781, column: 2, scope: !1269, inlinedAt: !1270)
!1344 = !DILocation(line: 781, column: 9, scope: !1345, inlinedAt: !1270)
!1345 = distinct !DILexicalBlock(scope: !1269, file: !2, line: 781, column: 2)
!1346 = !DILocation(line: 781, column: 18, scope: !1345, inlinedAt: !1270)
!1347 = !DILocalVariable(name: "c", scope: !1348, file: !2, line: 783, type: !65, align: 1)
!1348 = distinct !DILexicalBlock(scope: !1345, file: !2, line: 782, column: 2)
!1349 = !DILocation(line: 783, column: 8, scope: !1348, inlinedAt: !1270)
!1350 = !DILocalVariable(name: "ch", scope: !1351, file: !2, line: 784, type: !65, align: 1)
!1351 = distinct !DILexicalBlock(scope: !1348, file: !2, line: 784, column: 4)
!1352 = !DILocation(line: 784, column: 9, scope: !1351, inlinedAt: !1270)
!1353 = !DILocation(line: 784, column: 14, scope: !1351, inlinedAt: !1270)
!1354 = !DILocation(line: 784, column: 21, scope: !1351, inlinedAt: !1270)
!1355 = !DILocation(line: 785, column: 8, scope: !1351, inlinedAt: !1270)
!1356 = !DILocation(line: 785, column: 27, scope: !1351, inlinedAt: !1270)
!1357 = !DILocation(line: 785, column: 51, scope: !1351, inlinedAt: !1270)
!1358 = !DILocation(line: 785, column: 45, scope: !1351, inlinedAt: !1270)
!1359 = !DILocation(line: 786, column: 8, scope: !1351, inlinedAt: !1270)
!1360 = !DILocation(line: 786, column: 33, scope: !1351, inlinedAt: !1270)
!1361 = !DILocation(line: 786, column: 27, scope: !1351, inlinedAt: !1270)
!1362 = !DILocation(line: 787, column: 8, scope: !1351, inlinedAt: !1270)
!1363 = !DILocation(line: 787, column: 25, scope: !1351, inlinedAt: !1270)
!1364 = !DILocation(line: 788, column: 8, scope: !1351, inlinedAt: !1270)
!1365 = !DILocation(line: 788, column: 25, scope: !1351, inlinedAt: !1270)
!1366 = !DILocation(line: 789, column: 18, scope: !1351, inlinedAt: !1270)
!1367 = !DILocation(line: 789, column: 12, scope: !1351, inlinedAt: !1270)
!1368 = !DILocation(line: 791, column: 7, scope: !1348, inlinedAt: !1270)
!1369 = !DILocation(line: 791, column: 12, scope: !1348, inlinedAt: !1270)
!1370 = !DILocation(line: 791, column: 30, scope: !1348, inlinedAt: !1270)
!1371 = !DILocation(line: 793, column: 8, scope: !1372, inlinedAt: !1270)
!1372 = distinct !DILexicalBlock(scope: !1348, file: !2, line: 793, column: 4)
!1373 = !DILocalVariable(name: "new_value", scope: !1374, file: !2, line: 795, type: !346, align: 8)
!1374 = distinct !DILexicalBlock(scope: !1372, file: !2, line: 794, column: 4)
!1375 = !DILocation(line: 795, column: 11, scope: !1374, inlinedAt: !1270)
!1376 = !DILocation(line: 795, column: 23, scope: !1374, inlinedAt: !1270)
!1377 = !DILocation(line: 795, column: 31, scope: !1374, inlinedAt: !1270)
!1378 = !DILocation(line: 795, column: 43, scope: !1374, inlinedAt: !1270)
!1379 = !DILocation(line: 796, column: 9, scope: !1374, inlinedAt: !1270)
!1380 = !DILocation(line: 796, column: 21, scope: !1374, inlinedAt: !1270)
!1381 = !DILocation(line: 796, column: 35, scope: !1374, inlinedAt: !1270)
!1382 = !DILocation(line: 797, column: 12, scope: !1374, inlinedAt: !1270)
!1383 = !DILocalVariable(name: "new_value", scope: !1372, file: !2, line: 799, type: !346, align: 8)
!1384 = !DILocation(line: 799, column: 10, scope: !1372, inlinedAt: !1270)
!1385 = !DILocation(line: 799, column: 22, scope: !1372, inlinedAt: !1270)
!1386 = !DILocation(line: 799, column: 30, scope: !1372, inlinedAt: !1270)
!1387 = !DILocation(line: 799, column: 42, scope: !1372, inlinedAt: !1270)
!1388 = !DILocation(line: 800, column: 8, scope: !1372, inlinedAt: !1270)
!1389 = !DILocation(line: 800, column: 20, scope: !1372, inlinedAt: !1270)
!1390 = !DILocation(line: 800, column: 34, scope: !1372, inlinedAt: !1270)
!1391 = !DILocation(line: 801, column: 11, scope: !1372, inlinedAt: !1270)
!1392 = !DILocation(line: 804, column: 9, scope: !1269, inlinedAt: !1270)
!1393 = distinct !DISubprogram(name: "to_int", linkageName: "std.core.String.to_int", scope: !2, file: !2, line: 809, type: !1394, scopeLine: 809, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!1394 = !DISubroutineType(types: !1395)
!1395 = !{!345, !1396, !60, !18}
!1396 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "int*", baseType: !18, size: 64, align: 64, dwarfAddressSpace: 0)
!1397 = !DILocalVariable(name: "s", arg: 1, scope: !1393, file: !2, line: 809, type: !60)
!1398 = !DILocation(line: 809, column: 23, scope: !1393)
!1399 = !DILocalVariable(name: "base", arg: 2, scope: !1393, file: !2, line: 809, type: !18)
!1400 = !DILocation(line: 809, column: 30, scope: !1393)
!1401 = !DILocation(line: 734, column: 12, scope: !1402, inlinedAt: !1404)
!1402 = distinct !DILexicalBlock(scope: !1403, file: !2, line: 737, column: 1)
!1403 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 736, scopeLine: 736, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !69)
!1404 = !DILocation(line: 809, column: 44, scope: !1393)
!1405 = !DILocation(line: 734, column: 26, scope: !1402, inlinedAt: !1404)
!1406 = !DILocation(line: 734, column: 39, scope: !1402, inlinedAt: !1404)
!1407 = !DILocalVariable(name: "len", scope: !1403, file: !2, line: 738, type: !67, align: 8)
!1408 = !DILocation(line: 738, column: 6, scope: !1403, inlinedAt: !1404)
!1409 = !DILocation(line: 738, column: 12, scope: !1403, inlinedAt: !1404)
!1410 = !DILocalVariable(name: "index", scope: !1403, file: !2, line: 739, type: !67, align: 8)
!1411 = !DILocation(line: 739, column: 6, scope: !1403, inlinedAt: !1404)
!1412 = !DILocation(line: 739, column: 14, scope: !1403, inlinedAt: !1404)
!1413 = !DILocalVariable(name: "ptr", scope: !1403, file: !2, line: 740, type: !64, align: 8)
!1414 = !DILocation(line: 740, column: 8, scope: !1403, inlinedAt: !1404)
!1415 = !DILocation(line: 740, column: 14, scope: !1403, inlinedAt: !1404)
!1416 = !DILocation(line: 741, column: 2, scope: !1403, inlinedAt: !1404)
!1417 = !DILocation(line: 741, column: 9, scope: !1418, inlinedAt: !1404)
!1418 = distinct !DILexicalBlock(scope: !1403, file: !2, line: 741, column: 2)
!1419 = !DILocation(line: 741, column: 17, scope: !1418, inlinedAt: !1404)
!1420 = !DILocation(line: 741, column: 42, scope: !1418, inlinedAt: !1404)
!1421 = !DILocation(line: 741, column: 46, scope: !1418, inlinedAt: !1404)
!1422 = !DILocation(line: 16, column: 29, scope: !1423, inlinedAt: !1424)
!1423 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1155, file: !1155, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1424 = !DILocation(line: 741, column: 24, scope: !1418, inlinedAt: !1404)
!1425 = !DILocation(line: 16, column: 42, scope: !1423, inlinedAt: !1424)
!1426 = !DILocation(line: 741, column: 55, scope: !1418, inlinedAt: !1404)
!1427 = !DILocation(line: 742, column: 6, scope: !1403, inlinedAt: !1404)
!1428 = !DILocation(line: 742, column: 13, scope: !1403, inlinedAt: !1404)
!1429 = !DILocation(line: 742, column: 27, scope: !1403, inlinedAt: !1404)
!1430 = !DILocalVariable(name: "is_negative", scope: !1403, file: !2, line: 743, type: !146, align: 1)
!1431 = !DILocation(line: 743, column: 7, scope: !1403, inlinedAt: !1404)
!1432 = !DILocation(line: 744, column: 10, scope: !1433, inlinedAt: !1404)
!1433 = distinct !DILexicalBlock(scope: !1403, file: !2, line: 744, column: 2)
!1434 = !DILocation(line: 744, column: 17, scope: !1433, inlinedAt: !1404)
!1435 = !DILocation(line: 747, column: 8, scope: !1436, inlinedAt: !1404)
!1436 = distinct !DILexicalBlock(scope: !1433, file: !2, line: 747, column: 4)
!1437 = !DILocation(line: 748, column: 18, scope: !1436, inlinedAt: !1404)
!1438 = !DILocation(line: 749, column: 4, scope: !1436, inlinedAt: !1404)
!1439 = !DILocation(line: 751, column: 4, scope: !1440, inlinedAt: !1404)
!1440 = distinct !DILexicalBlock(scope: !1433, file: !2, line: 751, column: 4)
!1441 = !DILocation(line: 753, column: 4, scope: !1442, inlinedAt: !1404)
!1442 = distinct !DILexicalBlock(scope: !1433, file: !2, line: 753, column: 4)
!1443 = !DILocation(line: 755, column: 6, scope: !1403, inlinedAt: !1404)
!1444 = !DILocation(line: 755, column: 13, scope: !1403, inlinedAt: !1404)
!1445 = !DILocation(line: 755, column: 27, scope: !1403, inlinedAt: !1404)
!1446 = !DILocalVariable(name: "base_used", scope: !1403, file: !2, line: 756, type: !18, align: 4)
!1447 = !DILocation(line: 756, column: 8, scope: !1403, inlinedAt: !1404)
!1448 = !DILocation(line: 756, column: 21, scope: !1403, inlinedAt: !1404)
!1449 = !DILocation(line: 757, column: 6, scope: !1403, inlinedAt: !1404)
!1450 = !DILocation(line: 757, column: 13, scope: !1403, inlinedAt: !1404)
!1451 = !DILocation(line: 757, column: 30, scope: !1403, inlinedAt: !1404)
!1452 = !DILocation(line: 759, column: 3, scope: !1453, inlinedAt: !1404)
!1453 = distinct !DILexicalBlock(scope: !1403, file: !2, line: 758, column: 2)
!1454 = !DILocation(line: 760, column: 7, scope: !1453, inlinedAt: !1404)
!1455 = !DILocation(line: 760, column: 16, scope: !1453, inlinedAt: !1404)
!1456 = !DILocation(line: 760, column: 29, scope: !1453, inlinedAt: !1404)
!1457 = !DILocation(line: 761, column: 11, scope: !1458, inlinedAt: !1404)
!1458 = distinct !DILexicalBlock(scope: !1453, file: !2, line: 761, column: 3)
!1459 = !DILocation(line: 761, column: 18, scope: !1458, inlinedAt: !1404)
!1460 = !DILocation(line: 765, column: 17, scope: !1461, inlinedAt: !1404)
!1461 = distinct !DILexicalBlock(scope: !1458, file: !2, line: 765, column: 5)
!1462 = !DILocation(line: 766, column: 5, scope: !1461, inlinedAt: !1404)
!1463 = !DILocation(line: 769, column: 17, scope: !1464, inlinedAt: !1404)
!1464 = distinct !DILexicalBlock(scope: !1458, file: !2, line: 769, column: 5)
!1465 = !DILocation(line: 770, column: 5, scope: !1464, inlinedAt: !1404)
!1466 = !DILocation(line: 773, column: 17, scope: !1467, inlinedAt: !1404)
!1467 = distinct !DILexicalBlock(scope: !1458, file: !2, line: 773, column: 5)
!1468 = !DILocation(line: 774, column: 5, scope: !1467, inlinedAt: !1404)
!1469 = !DILocation(line: 776, column: 5, scope: !1470, inlinedAt: !1404)
!1470 = distinct !DILexicalBlock(scope: !1458, file: !2, line: 776, column: 5)
!1471 = !DILocation(line: 778, column: 7, scope: !1453, inlinedAt: !1404)
!1472 = !DILocation(line: 778, column: 14, scope: !1453, inlinedAt: !1404)
!1473 = !DILocation(line: 778, column: 28, scope: !1453, inlinedAt: !1404)
!1474 = !DILocalVariable(name: "value", scope: !1403, file: !2, line: 780, type: !18, align: 4)
!1475 = !DILocation(line: 780, column: 8, scope: !1403, inlinedAt: !1404)
!1476 = !DILocation(line: 780, column: 16, scope: !1403, inlinedAt: !1404)
!1477 = !DILocation(line: 781, column: 2, scope: !1403, inlinedAt: !1404)
!1478 = !DILocation(line: 781, column: 9, scope: !1479, inlinedAt: !1404)
!1479 = distinct !DILexicalBlock(scope: !1403, file: !2, line: 781, column: 2)
!1480 = !DILocation(line: 781, column: 18, scope: !1479, inlinedAt: !1404)
!1481 = !DILocalVariable(name: "c", scope: !1482, file: !2, line: 783, type: !65, align: 1)
!1482 = distinct !DILexicalBlock(scope: !1479, file: !2, line: 782, column: 2)
!1483 = !DILocation(line: 783, column: 8, scope: !1482, inlinedAt: !1404)
!1484 = !DILocalVariable(name: "ch", scope: !1485, file: !2, line: 784, type: !65, align: 1)
!1485 = distinct !DILexicalBlock(scope: !1482, file: !2, line: 784, column: 4)
!1486 = !DILocation(line: 784, column: 9, scope: !1485, inlinedAt: !1404)
!1487 = !DILocation(line: 784, column: 14, scope: !1485, inlinedAt: !1404)
!1488 = !DILocation(line: 784, column: 21, scope: !1485, inlinedAt: !1404)
!1489 = !DILocation(line: 785, column: 8, scope: !1485, inlinedAt: !1404)
!1490 = !DILocation(line: 785, column: 27, scope: !1485, inlinedAt: !1404)
!1491 = !DILocation(line: 785, column: 51, scope: !1485, inlinedAt: !1404)
!1492 = !DILocation(line: 785, column: 45, scope: !1485, inlinedAt: !1404)
!1493 = !DILocation(line: 786, column: 8, scope: !1485, inlinedAt: !1404)
!1494 = !DILocation(line: 786, column: 33, scope: !1485, inlinedAt: !1404)
!1495 = !DILocation(line: 786, column: 27, scope: !1485, inlinedAt: !1404)
!1496 = !DILocation(line: 787, column: 8, scope: !1485, inlinedAt: !1404)
!1497 = !DILocation(line: 787, column: 25, scope: !1485, inlinedAt: !1404)
!1498 = !DILocation(line: 788, column: 8, scope: !1485, inlinedAt: !1404)
!1499 = !DILocation(line: 788, column: 25, scope: !1485, inlinedAt: !1404)
!1500 = !DILocation(line: 789, column: 18, scope: !1485, inlinedAt: !1404)
!1501 = !DILocation(line: 789, column: 12, scope: !1485, inlinedAt: !1404)
!1502 = !DILocation(line: 791, column: 7, scope: !1482, inlinedAt: !1404)
!1503 = !DILocation(line: 791, column: 12, scope: !1482, inlinedAt: !1404)
!1504 = !DILocation(line: 791, column: 30, scope: !1482, inlinedAt: !1404)
!1505 = !DILocation(line: 793, column: 8, scope: !1506, inlinedAt: !1404)
!1506 = distinct !DILexicalBlock(scope: !1482, file: !2, line: 793, column: 4)
!1507 = !DILocalVariable(name: "new_value", scope: !1508, file: !2, line: 795, type: !18, align: 4)
!1508 = distinct !DILexicalBlock(scope: !1506, file: !2, line: 794, column: 4)
!1509 = !DILocation(line: 795, column: 11, scope: !1508, inlinedAt: !1404)
!1510 = !DILocation(line: 795, column: 23, scope: !1508, inlinedAt: !1404)
!1511 = !DILocation(line: 795, column: 31, scope: !1508, inlinedAt: !1404)
!1512 = !DILocation(line: 795, column: 43, scope: !1508, inlinedAt: !1404)
!1513 = !DILocation(line: 796, column: 9, scope: !1508, inlinedAt: !1404)
!1514 = !DILocation(line: 796, column: 21, scope: !1508, inlinedAt: !1404)
!1515 = !DILocation(line: 796, column: 35, scope: !1508, inlinedAt: !1404)
!1516 = !DILocation(line: 797, column: 12, scope: !1508, inlinedAt: !1404)
!1517 = !DILocalVariable(name: "new_value", scope: !1506, file: !2, line: 799, type: !18, align: 4)
!1518 = !DILocation(line: 799, column: 10, scope: !1506, inlinedAt: !1404)
!1519 = !DILocation(line: 799, column: 22, scope: !1506, inlinedAt: !1404)
!1520 = !DILocation(line: 799, column: 30, scope: !1506, inlinedAt: !1404)
!1521 = !DILocation(line: 799, column: 42, scope: !1506, inlinedAt: !1404)
!1522 = !DILocation(line: 800, column: 8, scope: !1506, inlinedAt: !1404)
!1523 = !DILocation(line: 800, column: 20, scope: !1506, inlinedAt: !1404)
!1524 = !DILocation(line: 800, column: 34, scope: !1506, inlinedAt: !1404)
!1525 = !DILocation(line: 801, column: 11, scope: !1506, inlinedAt: !1404)
!1526 = !DILocation(line: 804, column: 9, scope: !1403, inlinedAt: !1404)
!1527 = distinct !DISubprogram(name: "to_short", linkageName: "std.core.String.to_short", scope: !2, file: !2, line: 810, type: !1528, scopeLine: 810, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!1528 = !DISubroutineType(types: !1529)
!1529 = !{!345, !1530, !60, !18}
!1530 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "short*", baseType: !1531, size: 64, align: 64, dwarfAddressSpace: 0)
!1531 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!1532 = !DILocalVariable(name: "s", arg: 1, scope: !1527, file: !2, line: 810, type: !60)
!1533 = !DILocation(line: 810, column: 27, scope: !1527)
!1534 = !DILocalVariable(name: "base", arg: 2, scope: !1527, file: !2, line: 810, type: !18)
!1535 = !DILocation(line: 810, column: 34, scope: !1527)
!1536 = !DILocation(line: 734, column: 12, scope: !1537, inlinedAt: !1539)
!1537 = distinct !DILexicalBlock(scope: !1538, file: !2, line: 737, column: 1)
!1538 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 736, scopeLine: 736, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !69)
!1539 = !DILocation(line: 810, column: 48, scope: !1527)
!1540 = !DILocation(line: 734, column: 26, scope: !1537, inlinedAt: !1539)
!1541 = !DILocation(line: 734, column: 39, scope: !1537, inlinedAt: !1539)
!1542 = !DILocalVariable(name: "len", scope: !1538, file: !2, line: 738, type: !67, align: 8)
!1543 = !DILocation(line: 738, column: 6, scope: !1538, inlinedAt: !1539)
!1544 = !DILocation(line: 738, column: 12, scope: !1538, inlinedAt: !1539)
!1545 = !DILocalVariable(name: "index", scope: !1538, file: !2, line: 739, type: !67, align: 8)
!1546 = !DILocation(line: 739, column: 6, scope: !1538, inlinedAt: !1539)
!1547 = !DILocation(line: 739, column: 14, scope: !1538, inlinedAt: !1539)
!1548 = !DILocalVariable(name: "ptr", scope: !1538, file: !2, line: 740, type: !64, align: 8)
!1549 = !DILocation(line: 740, column: 8, scope: !1538, inlinedAt: !1539)
!1550 = !DILocation(line: 740, column: 14, scope: !1538, inlinedAt: !1539)
!1551 = !DILocation(line: 741, column: 2, scope: !1538, inlinedAt: !1539)
!1552 = !DILocation(line: 741, column: 9, scope: !1553, inlinedAt: !1539)
!1553 = distinct !DILexicalBlock(scope: !1538, file: !2, line: 741, column: 2)
!1554 = !DILocation(line: 741, column: 17, scope: !1553, inlinedAt: !1539)
!1555 = !DILocation(line: 741, column: 42, scope: !1553, inlinedAt: !1539)
!1556 = !DILocation(line: 741, column: 46, scope: !1553, inlinedAt: !1539)
!1557 = !DILocation(line: 16, column: 29, scope: !1558, inlinedAt: !1559)
!1558 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1155, file: !1155, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1559 = !DILocation(line: 741, column: 24, scope: !1553, inlinedAt: !1539)
!1560 = !DILocation(line: 16, column: 42, scope: !1558, inlinedAt: !1559)
!1561 = !DILocation(line: 741, column: 55, scope: !1553, inlinedAt: !1539)
!1562 = !DILocation(line: 742, column: 6, scope: !1538, inlinedAt: !1539)
!1563 = !DILocation(line: 742, column: 13, scope: !1538, inlinedAt: !1539)
!1564 = !DILocation(line: 742, column: 27, scope: !1538, inlinedAt: !1539)
!1565 = !DILocalVariable(name: "is_negative", scope: !1538, file: !2, line: 743, type: !146, align: 1)
!1566 = !DILocation(line: 743, column: 7, scope: !1538, inlinedAt: !1539)
!1567 = !DILocation(line: 744, column: 10, scope: !1568, inlinedAt: !1539)
!1568 = distinct !DILexicalBlock(scope: !1538, file: !2, line: 744, column: 2)
!1569 = !DILocation(line: 744, column: 17, scope: !1568, inlinedAt: !1539)
!1570 = !DILocation(line: 747, column: 8, scope: !1571, inlinedAt: !1539)
!1571 = distinct !DILexicalBlock(scope: !1568, file: !2, line: 747, column: 4)
!1572 = !DILocation(line: 748, column: 18, scope: !1571, inlinedAt: !1539)
!1573 = !DILocation(line: 749, column: 4, scope: !1571, inlinedAt: !1539)
!1574 = !DILocation(line: 751, column: 4, scope: !1575, inlinedAt: !1539)
!1575 = distinct !DILexicalBlock(scope: !1568, file: !2, line: 751, column: 4)
!1576 = !DILocation(line: 753, column: 4, scope: !1577, inlinedAt: !1539)
!1577 = distinct !DILexicalBlock(scope: !1568, file: !2, line: 753, column: 4)
!1578 = !DILocation(line: 755, column: 6, scope: !1538, inlinedAt: !1539)
!1579 = !DILocation(line: 755, column: 13, scope: !1538, inlinedAt: !1539)
!1580 = !DILocation(line: 755, column: 27, scope: !1538, inlinedAt: !1539)
!1581 = !DILocalVariable(name: "base_used", scope: !1538, file: !2, line: 756, type: !1531, align: 2)
!1582 = !DILocation(line: 756, column: 8, scope: !1538, inlinedAt: !1539)
!1583 = !DILocation(line: 756, column: 21, scope: !1538, inlinedAt: !1539)
!1584 = !DILocation(line: 757, column: 6, scope: !1538, inlinedAt: !1539)
!1585 = !DILocation(line: 757, column: 13, scope: !1538, inlinedAt: !1539)
!1586 = !DILocation(line: 757, column: 30, scope: !1538, inlinedAt: !1539)
!1587 = !DILocation(line: 759, column: 3, scope: !1588, inlinedAt: !1539)
!1588 = distinct !DILexicalBlock(scope: !1538, file: !2, line: 758, column: 2)
!1589 = !DILocation(line: 760, column: 7, scope: !1588, inlinedAt: !1539)
!1590 = !DILocation(line: 760, column: 16, scope: !1588, inlinedAt: !1539)
!1591 = !DILocation(line: 760, column: 29, scope: !1588, inlinedAt: !1539)
!1592 = !DILocation(line: 761, column: 11, scope: !1593, inlinedAt: !1539)
!1593 = distinct !DILexicalBlock(scope: !1588, file: !2, line: 761, column: 3)
!1594 = !DILocation(line: 761, column: 18, scope: !1593, inlinedAt: !1539)
!1595 = !DILocation(line: 765, column: 17, scope: !1596, inlinedAt: !1539)
!1596 = distinct !DILexicalBlock(scope: !1593, file: !2, line: 765, column: 5)
!1597 = !DILocation(line: 766, column: 5, scope: !1596, inlinedAt: !1539)
!1598 = !DILocation(line: 769, column: 17, scope: !1599, inlinedAt: !1539)
!1599 = distinct !DILexicalBlock(scope: !1593, file: !2, line: 769, column: 5)
!1600 = !DILocation(line: 770, column: 5, scope: !1599, inlinedAt: !1539)
!1601 = !DILocation(line: 773, column: 17, scope: !1602, inlinedAt: !1539)
!1602 = distinct !DILexicalBlock(scope: !1593, file: !2, line: 773, column: 5)
!1603 = !DILocation(line: 774, column: 5, scope: !1602, inlinedAt: !1539)
!1604 = !DILocation(line: 776, column: 5, scope: !1605, inlinedAt: !1539)
!1605 = distinct !DILexicalBlock(scope: !1593, file: !2, line: 776, column: 5)
!1606 = !DILocation(line: 778, column: 7, scope: !1588, inlinedAt: !1539)
!1607 = !DILocation(line: 778, column: 14, scope: !1588, inlinedAt: !1539)
!1608 = !DILocation(line: 778, column: 28, scope: !1588, inlinedAt: !1539)
!1609 = !DILocalVariable(name: "value", scope: !1538, file: !2, line: 780, type: !1531, align: 2)
!1610 = !DILocation(line: 780, column: 8, scope: !1538, inlinedAt: !1539)
!1611 = !DILocation(line: 780, column: 16, scope: !1538, inlinedAt: !1539)
!1612 = !DILocation(line: 781, column: 2, scope: !1538, inlinedAt: !1539)
!1613 = !DILocation(line: 781, column: 9, scope: !1614, inlinedAt: !1539)
!1614 = distinct !DILexicalBlock(scope: !1538, file: !2, line: 781, column: 2)
!1615 = !DILocation(line: 781, column: 18, scope: !1614, inlinedAt: !1539)
!1616 = !DILocalVariable(name: "c", scope: !1617, file: !2, line: 783, type: !65, align: 1)
!1617 = distinct !DILexicalBlock(scope: !1614, file: !2, line: 782, column: 2)
!1618 = !DILocation(line: 783, column: 8, scope: !1617, inlinedAt: !1539)
!1619 = !DILocalVariable(name: "ch", scope: !1620, file: !2, line: 784, type: !65, align: 1)
!1620 = distinct !DILexicalBlock(scope: !1617, file: !2, line: 784, column: 4)
!1621 = !DILocation(line: 784, column: 9, scope: !1620, inlinedAt: !1539)
!1622 = !DILocation(line: 784, column: 14, scope: !1620, inlinedAt: !1539)
!1623 = !DILocation(line: 784, column: 21, scope: !1620, inlinedAt: !1539)
!1624 = !DILocation(line: 785, column: 8, scope: !1620, inlinedAt: !1539)
!1625 = !DILocation(line: 785, column: 27, scope: !1620, inlinedAt: !1539)
!1626 = !DILocation(line: 785, column: 51, scope: !1620, inlinedAt: !1539)
!1627 = !DILocation(line: 785, column: 45, scope: !1620, inlinedAt: !1539)
!1628 = !DILocation(line: 786, column: 8, scope: !1620, inlinedAt: !1539)
!1629 = !DILocation(line: 786, column: 33, scope: !1620, inlinedAt: !1539)
!1630 = !DILocation(line: 786, column: 27, scope: !1620, inlinedAt: !1539)
!1631 = !DILocation(line: 787, column: 8, scope: !1620, inlinedAt: !1539)
!1632 = !DILocation(line: 787, column: 25, scope: !1620, inlinedAt: !1539)
!1633 = !DILocation(line: 788, column: 8, scope: !1620, inlinedAt: !1539)
!1634 = !DILocation(line: 788, column: 25, scope: !1620, inlinedAt: !1539)
!1635 = !DILocation(line: 789, column: 18, scope: !1620, inlinedAt: !1539)
!1636 = !DILocation(line: 789, column: 12, scope: !1620, inlinedAt: !1539)
!1637 = !DILocation(line: 791, column: 7, scope: !1617, inlinedAt: !1539)
!1638 = !DILocation(line: 791, column: 12, scope: !1617, inlinedAt: !1539)
!1639 = !DILocation(line: 791, column: 30, scope: !1617, inlinedAt: !1539)
!1640 = !DILocation(line: 793, column: 8, scope: !1641, inlinedAt: !1539)
!1641 = distinct !DILexicalBlock(scope: !1617, file: !2, line: 793, column: 4)
!1642 = !DILocalVariable(name: "new_value", scope: !1643, file: !2, line: 795, type: !1531, align: 2)
!1643 = distinct !DILexicalBlock(scope: !1641, file: !2, line: 794, column: 4)
!1644 = !DILocation(line: 795, column: 11, scope: !1643, inlinedAt: !1539)
!1645 = !DILocation(line: 795, column: 23, scope: !1643, inlinedAt: !1539)
!1646 = !DILocation(line: 795, column: 31, scope: !1643, inlinedAt: !1539)
!1647 = !DILocation(line: 795, column: 43, scope: !1643, inlinedAt: !1539)
!1648 = !DILocation(line: 796, column: 9, scope: !1643, inlinedAt: !1539)
!1649 = !DILocation(line: 796, column: 21, scope: !1643, inlinedAt: !1539)
!1650 = !DILocation(line: 796, column: 35, scope: !1643, inlinedAt: !1539)
!1651 = !DILocation(line: 797, column: 12, scope: !1643, inlinedAt: !1539)
!1652 = !DILocalVariable(name: "new_value", scope: !1641, file: !2, line: 799, type: !1531, align: 2)
!1653 = !DILocation(line: 799, column: 10, scope: !1641, inlinedAt: !1539)
!1654 = !DILocation(line: 799, column: 22, scope: !1641, inlinedAt: !1539)
!1655 = !DILocation(line: 799, column: 30, scope: !1641, inlinedAt: !1539)
!1656 = !DILocation(line: 799, column: 42, scope: !1641, inlinedAt: !1539)
!1657 = !DILocation(line: 800, column: 8, scope: !1641, inlinedAt: !1539)
!1658 = !DILocation(line: 800, column: 20, scope: !1641, inlinedAt: !1539)
!1659 = !DILocation(line: 800, column: 34, scope: !1641, inlinedAt: !1539)
!1660 = !DILocation(line: 801, column: 11, scope: !1641, inlinedAt: !1539)
!1661 = !DILocation(line: 804, column: 9, scope: !1538, inlinedAt: !1539)
!1662 = distinct !DISubprogram(name: "to_ichar", linkageName: "std.core.String.to_ichar", scope: !2, file: !2, line: 811, type: !1663, scopeLine: 811, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!1663 = !DISubroutineType(types: !1664)
!1664 = !{!345, !1665, !60, !18}
!1665 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ichar*", baseType: !1666, size: 64, align: 64, dwarfAddressSpace: 0)
!1666 = !DIBasicType(name: "ichar", size: 8, encoding: DW_ATE_signed_char)
!1667 = !DILocalVariable(name: "s", arg: 1, scope: !1662, file: !2, line: 811, type: !60)
!1668 = !DILocation(line: 811, column: 27, scope: !1662)
!1669 = !DILocalVariable(name: "base", arg: 2, scope: !1662, file: !2, line: 811, type: !18)
!1670 = !DILocation(line: 811, column: 34, scope: !1662)
!1671 = !DILocation(line: 734, column: 12, scope: !1672, inlinedAt: !1674)
!1672 = distinct !DILexicalBlock(scope: !1673, file: !2, line: 737, column: 1)
!1673 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 736, scopeLine: 736, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !69)
!1674 = !DILocation(line: 811, column: 48, scope: !1662)
!1675 = !DILocation(line: 734, column: 26, scope: !1672, inlinedAt: !1674)
!1676 = !DILocation(line: 734, column: 39, scope: !1672, inlinedAt: !1674)
!1677 = !DILocalVariable(name: "len", scope: !1673, file: !2, line: 738, type: !67, align: 8)
!1678 = !DILocation(line: 738, column: 6, scope: !1673, inlinedAt: !1674)
!1679 = !DILocation(line: 738, column: 12, scope: !1673, inlinedAt: !1674)
!1680 = !DILocalVariable(name: "index", scope: !1673, file: !2, line: 739, type: !67, align: 8)
!1681 = !DILocation(line: 739, column: 6, scope: !1673, inlinedAt: !1674)
!1682 = !DILocation(line: 739, column: 14, scope: !1673, inlinedAt: !1674)
!1683 = !DILocalVariable(name: "ptr", scope: !1673, file: !2, line: 740, type: !64, align: 8)
!1684 = !DILocation(line: 740, column: 8, scope: !1673, inlinedAt: !1674)
!1685 = !DILocation(line: 740, column: 14, scope: !1673, inlinedAt: !1674)
!1686 = !DILocation(line: 741, column: 2, scope: !1673, inlinedAt: !1674)
!1687 = !DILocation(line: 741, column: 9, scope: !1688, inlinedAt: !1674)
!1688 = distinct !DILexicalBlock(scope: !1673, file: !2, line: 741, column: 2)
!1689 = !DILocation(line: 741, column: 17, scope: !1688, inlinedAt: !1674)
!1690 = !DILocation(line: 741, column: 42, scope: !1688, inlinedAt: !1674)
!1691 = !DILocation(line: 741, column: 46, scope: !1688, inlinedAt: !1674)
!1692 = !DILocation(line: 16, column: 29, scope: !1693, inlinedAt: !1694)
!1693 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1155, file: !1155, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1694 = !DILocation(line: 741, column: 24, scope: !1688, inlinedAt: !1674)
!1695 = !DILocation(line: 16, column: 42, scope: !1693, inlinedAt: !1694)
!1696 = !DILocation(line: 741, column: 55, scope: !1688, inlinedAt: !1674)
!1697 = !DILocation(line: 742, column: 6, scope: !1673, inlinedAt: !1674)
!1698 = !DILocation(line: 742, column: 13, scope: !1673, inlinedAt: !1674)
!1699 = !DILocation(line: 742, column: 27, scope: !1673, inlinedAt: !1674)
!1700 = !DILocalVariable(name: "is_negative", scope: !1673, file: !2, line: 743, type: !146, align: 1)
!1701 = !DILocation(line: 743, column: 7, scope: !1673, inlinedAt: !1674)
!1702 = !DILocation(line: 744, column: 10, scope: !1703, inlinedAt: !1674)
!1703 = distinct !DILexicalBlock(scope: !1673, file: !2, line: 744, column: 2)
!1704 = !DILocation(line: 744, column: 17, scope: !1703, inlinedAt: !1674)
!1705 = !DILocation(line: 747, column: 8, scope: !1706, inlinedAt: !1674)
!1706 = distinct !DILexicalBlock(scope: !1703, file: !2, line: 747, column: 4)
!1707 = !DILocation(line: 748, column: 18, scope: !1706, inlinedAt: !1674)
!1708 = !DILocation(line: 749, column: 4, scope: !1706, inlinedAt: !1674)
!1709 = !DILocation(line: 751, column: 4, scope: !1710, inlinedAt: !1674)
!1710 = distinct !DILexicalBlock(scope: !1703, file: !2, line: 751, column: 4)
!1711 = !DILocation(line: 753, column: 4, scope: !1712, inlinedAt: !1674)
!1712 = distinct !DILexicalBlock(scope: !1703, file: !2, line: 753, column: 4)
!1713 = !DILocation(line: 755, column: 6, scope: !1673, inlinedAt: !1674)
!1714 = !DILocation(line: 755, column: 13, scope: !1673, inlinedAt: !1674)
!1715 = !DILocation(line: 755, column: 27, scope: !1673, inlinedAt: !1674)
!1716 = !DILocalVariable(name: "base_used", scope: !1673, file: !2, line: 756, type: !1666, align: 1)
!1717 = !DILocation(line: 756, column: 8, scope: !1673, inlinedAt: !1674)
!1718 = !DILocation(line: 756, column: 21, scope: !1673, inlinedAt: !1674)
!1719 = !DILocation(line: 757, column: 6, scope: !1673, inlinedAt: !1674)
!1720 = !DILocation(line: 757, column: 13, scope: !1673, inlinedAt: !1674)
!1721 = !DILocation(line: 757, column: 30, scope: !1673, inlinedAt: !1674)
!1722 = !DILocation(line: 759, column: 3, scope: !1723, inlinedAt: !1674)
!1723 = distinct !DILexicalBlock(scope: !1673, file: !2, line: 758, column: 2)
!1724 = !DILocation(line: 760, column: 7, scope: !1723, inlinedAt: !1674)
!1725 = !DILocation(line: 760, column: 16, scope: !1723, inlinedAt: !1674)
!1726 = !DILocation(line: 760, column: 29, scope: !1723, inlinedAt: !1674)
!1727 = !DILocation(line: 761, column: 11, scope: !1728, inlinedAt: !1674)
!1728 = distinct !DILexicalBlock(scope: !1723, file: !2, line: 761, column: 3)
!1729 = !DILocation(line: 761, column: 18, scope: !1728, inlinedAt: !1674)
!1730 = !DILocation(line: 765, column: 17, scope: !1731, inlinedAt: !1674)
!1731 = distinct !DILexicalBlock(scope: !1728, file: !2, line: 765, column: 5)
!1732 = !DILocation(line: 766, column: 5, scope: !1731, inlinedAt: !1674)
!1733 = !DILocation(line: 769, column: 17, scope: !1734, inlinedAt: !1674)
!1734 = distinct !DILexicalBlock(scope: !1728, file: !2, line: 769, column: 5)
!1735 = !DILocation(line: 770, column: 5, scope: !1734, inlinedAt: !1674)
!1736 = !DILocation(line: 773, column: 17, scope: !1737, inlinedAt: !1674)
!1737 = distinct !DILexicalBlock(scope: !1728, file: !2, line: 773, column: 5)
!1738 = !DILocation(line: 774, column: 5, scope: !1737, inlinedAt: !1674)
!1739 = !DILocation(line: 776, column: 5, scope: !1740, inlinedAt: !1674)
!1740 = distinct !DILexicalBlock(scope: !1728, file: !2, line: 776, column: 5)
!1741 = !DILocation(line: 778, column: 7, scope: !1723, inlinedAt: !1674)
!1742 = !DILocation(line: 778, column: 14, scope: !1723, inlinedAt: !1674)
!1743 = !DILocation(line: 778, column: 28, scope: !1723, inlinedAt: !1674)
!1744 = !DILocalVariable(name: "value", scope: !1673, file: !2, line: 780, type: !1666, align: 1)
!1745 = !DILocation(line: 780, column: 8, scope: !1673, inlinedAt: !1674)
!1746 = !DILocation(line: 780, column: 16, scope: !1673, inlinedAt: !1674)
!1747 = !DILocation(line: 781, column: 2, scope: !1673, inlinedAt: !1674)
!1748 = !DILocation(line: 781, column: 9, scope: !1749, inlinedAt: !1674)
!1749 = distinct !DILexicalBlock(scope: !1673, file: !2, line: 781, column: 2)
!1750 = !DILocation(line: 781, column: 18, scope: !1749, inlinedAt: !1674)
!1751 = !DILocalVariable(name: "c", scope: !1752, file: !2, line: 783, type: !65, align: 1)
!1752 = distinct !DILexicalBlock(scope: !1749, file: !2, line: 782, column: 2)
!1753 = !DILocation(line: 783, column: 8, scope: !1752, inlinedAt: !1674)
!1754 = !DILocalVariable(name: "ch", scope: !1755, file: !2, line: 784, type: !65, align: 1)
!1755 = distinct !DILexicalBlock(scope: !1752, file: !2, line: 784, column: 4)
!1756 = !DILocation(line: 784, column: 9, scope: !1755, inlinedAt: !1674)
!1757 = !DILocation(line: 784, column: 14, scope: !1755, inlinedAt: !1674)
!1758 = !DILocation(line: 784, column: 21, scope: !1755, inlinedAt: !1674)
!1759 = !DILocation(line: 785, column: 8, scope: !1755, inlinedAt: !1674)
!1760 = !DILocation(line: 785, column: 27, scope: !1755, inlinedAt: !1674)
!1761 = !DILocation(line: 785, column: 51, scope: !1755, inlinedAt: !1674)
!1762 = !DILocation(line: 785, column: 45, scope: !1755, inlinedAt: !1674)
!1763 = !DILocation(line: 786, column: 8, scope: !1755, inlinedAt: !1674)
!1764 = !DILocation(line: 786, column: 33, scope: !1755, inlinedAt: !1674)
!1765 = !DILocation(line: 786, column: 27, scope: !1755, inlinedAt: !1674)
!1766 = !DILocation(line: 787, column: 8, scope: !1755, inlinedAt: !1674)
!1767 = !DILocation(line: 787, column: 25, scope: !1755, inlinedAt: !1674)
!1768 = !DILocation(line: 788, column: 8, scope: !1755, inlinedAt: !1674)
!1769 = !DILocation(line: 788, column: 25, scope: !1755, inlinedAt: !1674)
!1770 = !DILocation(line: 789, column: 18, scope: !1755, inlinedAt: !1674)
!1771 = !DILocation(line: 789, column: 12, scope: !1755, inlinedAt: !1674)
!1772 = !DILocation(line: 791, column: 7, scope: !1752, inlinedAt: !1674)
!1773 = !DILocation(line: 791, column: 12, scope: !1752, inlinedAt: !1674)
!1774 = !DILocation(line: 791, column: 30, scope: !1752, inlinedAt: !1674)
!1775 = !DILocation(line: 793, column: 8, scope: !1776, inlinedAt: !1674)
!1776 = distinct !DILexicalBlock(scope: !1752, file: !2, line: 793, column: 4)
!1777 = !DILocalVariable(name: "new_value", scope: !1778, file: !2, line: 795, type: !1666, align: 1)
!1778 = distinct !DILexicalBlock(scope: !1776, file: !2, line: 794, column: 4)
!1779 = !DILocation(line: 795, column: 11, scope: !1778, inlinedAt: !1674)
!1780 = !DILocation(line: 795, column: 23, scope: !1778, inlinedAt: !1674)
!1781 = !DILocation(line: 795, column: 31, scope: !1778, inlinedAt: !1674)
!1782 = !DILocation(line: 795, column: 43, scope: !1778, inlinedAt: !1674)
!1783 = !DILocation(line: 796, column: 9, scope: !1778, inlinedAt: !1674)
!1784 = !DILocation(line: 796, column: 21, scope: !1778, inlinedAt: !1674)
!1785 = !DILocation(line: 796, column: 35, scope: !1778, inlinedAt: !1674)
!1786 = !DILocation(line: 797, column: 12, scope: !1778, inlinedAt: !1674)
!1787 = !DILocalVariable(name: "new_value", scope: !1776, file: !2, line: 799, type: !1666, align: 1)
!1788 = !DILocation(line: 799, column: 10, scope: !1776, inlinedAt: !1674)
!1789 = !DILocation(line: 799, column: 22, scope: !1776, inlinedAt: !1674)
!1790 = !DILocation(line: 799, column: 30, scope: !1776, inlinedAt: !1674)
!1791 = !DILocation(line: 799, column: 42, scope: !1776, inlinedAt: !1674)
!1792 = !DILocation(line: 800, column: 8, scope: !1776, inlinedAt: !1674)
!1793 = !DILocation(line: 800, column: 20, scope: !1776, inlinedAt: !1674)
!1794 = !DILocation(line: 800, column: 34, scope: !1776, inlinedAt: !1674)
!1795 = !DILocation(line: 801, column: 11, scope: !1776, inlinedAt: !1674)
!1796 = !DILocation(line: 804, column: 9, scope: !1673, inlinedAt: !1674)
!1797 = distinct !DISubprogram(name: "to_uint128", linkageName: "std.core.String.to_uint128", scope: !2, file: !2, line: 813, type: !1798, scopeLine: 813, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!1798 = !DISubroutineType(types: !1799)
!1799 = !{!345, !1800, !60, !18}
!1800 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint128*", baseType: !1801, size: 64, align: 64, dwarfAddressSpace: 0)
!1801 = !DIBasicType(name: "uint128", size: 128, encoding: DW_ATE_unsigned)
!1802 = !DILocalVariable(name: "s", arg: 1, scope: !1797, file: !2, line: 813, type: !60)
!1803 = !DILocation(line: 813, column: 31, scope: !1797)
!1804 = !DILocalVariable(name: "base", arg: 2, scope: !1797, file: !2, line: 813, type: !18)
!1805 = !DILocation(line: 813, column: 38, scope: !1797)
!1806 = !DILocation(line: 734, column: 12, scope: !1807, inlinedAt: !1809)
!1807 = distinct !DILexicalBlock(scope: !1808, file: !2, line: 737, column: 1)
!1808 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 736, scopeLine: 736, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !69)
!1809 = !DILocation(line: 813, column: 52, scope: !1797)
!1810 = !DILocation(line: 734, column: 26, scope: !1807, inlinedAt: !1809)
!1811 = !DILocation(line: 734, column: 39, scope: !1807, inlinedAt: !1809)
!1812 = !DILocalVariable(name: "len", scope: !1808, file: !2, line: 738, type: !67, align: 8)
!1813 = !DILocation(line: 738, column: 6, scope: !1808, inlinedAt: !1809)
!1814 = !DILocation(line: 738, column: 12, scope: !1808, inlinedAt: !1809)
!1815 = !DILocalVariable(name: "index", scope: !1808, file: !2, line: 739, type: !67, align: 8)
!1816 = !DILocation(line: 739, column: 6, scope: !1808, inlinedAt: !1809)
!1817 = !DILocation(line: 739, column: 14, scope: !1808, inlinedAt: !1809)
!1818 = !DILocalVariable(name: "ptr", scope: !1808, file: !2, line: 740, type: !64, align: 8)
!1819 = !DILocation(line: 740, column: 8, scope: !1808, inlinedAt: !1809)
!1820 = !DILocation(line: 740, column: 14, scope: !1808, inlinedAt: !1809)
!1821 = !DILocation(line: 741, column: 2, scope: !1808, inlinedAt: !1809)
!1822 = !DILocation(line: 741, column: 9, scope: !1823, inlinedAt: !1809)
!1823 = distinct !DILexicalBlock(scope: !1808, file: !2, line: 741, column: 2)
!1824 = !DILocation(line: 741, column: 17, scope: !1823, inlinedAt: !1809)
!1825 = !DILocation(line: 741, column: 42, scope: !1823, inlinedAt: !1809)
!1826 = !DILocation(line: 741, column: 46, scope: !1823, inlinedAt: !1809)
!1827 = !DILocation(line: 16, column: 29, scope: !1828, inlinedAt: !1829)
!1828 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1155, file: !1155, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1829 = !DILocation(line: 741, column: 24, scope: !1823, inlinedAt: !1809)
!1830 = !DILocation(line: 16, column: 42, scope: !1828, inlinedAt: !1829)
!1831 = !DILocation(line: 741, column: 55, scope: !1823, inlinedAt: !1809)
!1832 = !DILocation(line: 742, column: 6, scope: !1808, inlinedAt: !1809)
!1833 = !DILocation(line: 742, column: 13, scope: !1808, inlinedAt: !1809)
!1834 = !DILocation(line: 742, column: 27, scope: !1808, inlinedAt: !1809)
!1835 = !DILocalVariable(name: "is_negative", scope: !1808, file: !2, line: 743, type: !146, align: 1)
!1836 = !DILocation(line: 743, column: 7, scope: !1808, inlinedAt: !1809)
!1837 = !DILocation(line: 744, column: 10, scope: !1838, inlinedAt: !1809)
!1838 = distinct !DILexicalBlock(scope: !1808, file: !2, line: 744, column: 2)
!1839 = !DILocation(line: 744, column: 17, scope: !1838, inlinedAt: !1809)
!1840 = !DILocation(line: 747, column: 8, scope: !1841, inlinedAt: !1809)
!1841 = distinct !DILexicalBlock(scope: !1838, file: !2, line: 747, column: 4)
!1842 = !DILocation(line: 747, column: 31, scope: !1841, inlinedAt: !1809)
!1843 = !DILocation(line: 751, column: 4, scope: !1844, inlinedAt: !1809)
!1844 = distinct !DILexicalBlock(scope: !1838, file: !2, line: 751, column: 4)
!1845 = !DILocation(line: 753, column: 4, scope: !1846, inlinedAt: !1809)
!1846 = distinct !DILexicalBlock(scope: !1838, file: !2, line: 753, column: 4)
!1847 = !DILocation(line: 755, column: 6, scope: !1808, inlinedAt: !1809)
!1848 = !DILocation(line: 755, column: 13, scope: !1808, inlinedAt: !1809)
!1849 = !DILocation(line: 755, column: 27, scope: !1808, inlinedAt: !1809)
!1850 = !DILocalVariable(name: "base_used", scope: !1808, file: !2, line: 756, type: !1801, align: 16)
!1851 = !DILocation(line: 756, column: 8, scope: !1808, inlinedAt: !1809)
!1852 = !DILocation(line: 756, column: 21, scope: !1808, inlinedAt: !1809)
!1853 = !DILocation(line: 757, column: 6, scope: !1808, inlinedAt: !1809)
!1854 = !DILocation(line: 757, column: 13, scope: !1808, inlinedAt: !1809)
!1855 = !DILocation(line: 757, column: 30, scope: !1808, inlinedAt: !1809)
!1856 = !DILocation(line: 759, column: 3, scope: !1857, inlinedAt: !1809)
!1857 = distinct !DILexicalBlock(scope: !1808, file: !2, line: 758, column: 2)
!1858 = !DILocation(line: 760, column: 7, scope: !1857, inlinedAt: !1809)
!1859 = !DILocation(line: 760, column: 16, scope: !1857, inlinedAt: !1809)
!1860 = !DILocation(line: 760, column: 29, scope: !1857, inlinedAt: !1809)
!1861 = !DILocation(line: 761, column: 11, scope: !1862, inlinedAt: !1809)
!1862 = distinct !DILexicalBlock(scope: !1857, file: !2, line: 761, column: 3)
!1863 = !DILocation(line: 761, column: 18, scope: !1862, inlinedAt: !1809)
!1864 = !DILocation(line: 765, column: 17, scope: !1865, inlinedAt: !1809)
!1865 = distinct !DILexicalBlock(scope: !1862, file: !2, line: 765, column: 5)
!1866 = !DILocation(line: 766, column: 5, scope: !1865, inlinedAt: !1809)
!1867 = !DILocation(line: 769, column: 17, scope: !1868, inlinedAt: !1809)
!1868 = distinct !DILexicalBlock(scope: !1862, file: !2, line: 769, column: 5)
!1869 = !DILocation(line: 770, column: 5, scope: !1868, inlinedAt: !1809)
!1870 = !DILocation(line: 773, column: 17, scope: !1871, inlinedAt: !1809)
!1871 = distinct !DILexicalBlock(scope: !1862, file: !2, line: 773, column: 5)
!1872 = !DILocation(line: 774, column: 5, scope: !1871, inlinedAt: !1809)
!1873 = !DILocation(line: 776, column: 5, scope: !1874, inlinedAt: !1809)
!1874 = distinct !DILexicalBlock(scope: !1862, file: !2, line: 776, column: 5)
!1875 = !DILocation(line: 778, column: 7, scope: !1857, inlinedAt: !1809)
!1876 = !DILocation(line: 778, column: 14, scope: !1857, inlinedAt: !1809)
!1877 = !DILocation(line: 778, column: 28, scope: !1857, inlinedAt: !1809)
!1878 = !DILocalVariable(name: "value", scope: !1808, file: !2, line: 780, type: !1801, align: 16)
!1879 = !DILocation(line: 780, column: 8, scope: !1808, inlinedAt: !1809)
!1880 = !DILocation(line: 780, column: 16, scope: !1808, inlinedAt: !1809)
!1881 = !DILocation(line: 781, column: 2, scope: !1808, inlinedAt: !1809)
!1882 = !DILocation(line: 781, column: 9, scope: !1883, inlinedAt: !1809)
!1883 = distinct !DILexicalBlock(scope: !1808, file: !2, line: 781, column: 2)
!1884 = !DILocation(line: 781, column: 18, scope: !1883, inlinedAt: !1809)
!1885 = !DILocalVariable(name: "c", scope: !1886, file: !2, line: 783, type: !65, align: 1)
!1886 = distinct !DILexicalBlock(scope: !1883, file: !2, line: 782, column: 2)
!1887 = !DILocation(line: 783, column: 8, scope: !1886, inlinedAt: !1809)
!1888 = !DILocalVariable(name: "ch", scope: !1889, file: !2, line: 784, type: !65, align: 1)
!1889 = distinct !DILexicalBlock(scope: !1886, file: !2, line: 784, column: 4)
!1890 = !DILocation(line: 784, column: 9, scope: !1889, inlinedAt: !1809)
!1891 = !DILocation(line: 784, column: 14, scope: !1889, inlinedAt: !1809)
!1892 = !DILocation(line: 784, column: 21, scope: !1889, inlinedAt: !1809)
!1893 = !DILocation(line: 785, column: 8, scope: !1889, inlinedAt: !1809)
!1894 = !DILocation(line: 785, column: 27, scope: !1889, inlinedAt: !1809)
!1895 = !DILocation(line: 785, column: 51, scope: !1889, inlinedAt: !1809)
!1896 = !DILocation(line: 785, column: 45, scope: !1889, inlinedAt: !1809)
!1897 = !DILocation(line: 786, column: 8, scope: !1889, inlinedAt: !1809)
!1898 = !DILocation(line: 786, column: 33, scope: !1889, inlinedAt: !1809)
!1899 = !DILocation(line: 786, column: 27, scope: !1889, inlinedAt: !1809)
!1900 = !DILocation(line: 787, column: 8, scope: !1889, inlinedAt: !1809)
!1901 = !DILocation(line: 787, column: 25, scope: !1889, inlinedAt: !1809)
!1902 = !DILocation(line: 788, column: 8, scope: !1889, inlinedAt: !1809)
!1903 = !DILocation(line: 788, column: 25, scope: !1889, inlinedAt: !1809)
!1904 = !DILocation(line: 789, column: 18, scope: !1889, inlinedAt: !1809)
!1905 = !DILocation(line: 789, column: 12, scope: !1889, inlinedAt: !1809)
!1906 = !DILocation(line: 791, column: 7, scope: !1886, inlinedAt: !1809)
!1907 = !DILocation(line: 791, column: 12, scope: !1886, inlinedAt: !1809)
!1908 = !DILocation(line: 791, column: 30, scope: !1886, inlinedAt: !1809)
!1909 = !DILocation(line: 793, column: 8, scope: !1910, inlinedAt: !1809)
!1910 = distinct !DILexicalBlock(scope: !1886, file: !2, line: 793, column: 4)
!1911 = !DILocalVariable(name: "new_value", scope: !1912, file: !2, line: 795, type: !1801, align: 16)
!1912 = distinct !DILexicalBlock(scope: !1910, file: !2, line: 794, column: 4)
!1913 = !DILocation(line: 795, column: 11, scope: !1912, inlinedAt: !1809)
!1914 = !DILocation(line: 795, column: 23, scope: !1912, inlinedAt: !1809)
!1915 = !DILocation(line: 795, column: 31, scope: !1912, inlinedAt: !1809)
!1916 = !DILocation(line: 795, column: 43, scope: !1912, inlinedAt: !1809)
!1917 = !DILocation(line: 796, column: 9, scope: !1912, inlinedAt: !1809)
!1918 = !DILocation(line: 796, column: 21, scope: !1912, inlinedAt: !1809)
!1919 = !DILocation(line: 796, column: 35, scope: !1912, inlinedAt: !1809)
!1920 = !DILocation(line: 797, column: 12, scope: !1912, inlinedAt: !1809)
!1921 = !DILocalVariable(name: "new_value", scope: !1910, file: !2, line: 799, type: !1801, align: 16)
!1922 = !DILocation(line: 799, column: 10, scope: !1910, inlinedAt: !1809)
!1923 = !DILocation(line: 799, column: 22, scope: !1910, inlinedAt: !1809)
!1924 = !DILocation(line: 799, column: 30, scope: !1910, inlinedAt: !1809)
!1925 = !DILocation(line: 799, column: 42, scope: !1910, inlinedAt: !1809)
!1926 = !DILocation(line: 800, column: 8, scope: !1910, inlinedAt: !1809)
!1927 = !DILocation(line: 800, column: 20, scope: !1910, inlinedAt: !1809)
!1928 = !DILocation(line: 800, column: 34, scope: !1910, inlinedAt: !1809)
!1929 = !DILocation(line: 801, column: 11, scope: !1910, inlinedAt: !1809)
!1930 = !DILocation(line: 804, column: 9, scope: !1808, inlinedAt: !1809)
!1931 = distinct !DISubprogram(name: "to_ulong", linkageName: "std.core.String.to_ulong", scope: !2, file: !2, line: 814, type: !1932, scopeLine: 814, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!1932 = !DISubroutineType(types: !1933)
!1933 = !{!345, !1934, !60, !18}
!1934 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ulong*", baseType: !68, size: 64, align: 64, dwarfAddressSpace: 0)
!1935 = !DILocalVariable(name: "s", arg: 1, scope: !1931, file: !2, line: 814, type: !60)
!1936 = !DILocation(line: 814, column: 27, scope: !1931)
!1937 = !DILocalVariable(name: "base", arg: 2, scope: !1931, file: !2, line: 814, type: !18)
!1938 = !DILocation(line: 814, column: 34, scope: !1931)
!1939 = !DILocation(line: 734, column: 12, scope: !1940, inlinedAt: !1942)
!1940 = distinct !DILexicalBlock(scope: !1941, file: !2, line: 737, column: 1)
!1941 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 736, scopeLine: 736, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !69)
!1942 = !DILocation(line: 814, column: 48, scope: !1931)
!1943 = !DILocation(line: 734, column: 26, scope: !1940, inlinedAt: !1942)
!1944 = !DILocation(line: 734, column: 39, scope: !1940, inlinedAt: !1942)
!1945 = !DILocalVariable(name: "len", scope: !1941, file: !2, line: 738, type: !67, align: 8)
!1946 = !DILocation(line: 738, column: 6, scope: !1941, inlinedAt: !1942)
!1947 = !DILocation(line: 738, column: 12, scope: !1941, inlinedAt: !1942)
!1948 = !DILocalVariable(name: "index", scope: !1941, file: !2, line: 739, type: !67, align: 8)
!1949 = !DILocation(line: 739, column: 6, scope: !1941, inlinedAt: !1942)
!1950 = !DILocation(line: 739, column: 14, scope: !1941, inlinedAt: !1942)
!1951 = !DILocalVariable(name: "ptr", scope: !1941, file: !2, line: 740, type: !64, align: 8)
!1952 = !DILocation(line: 740, column: 8, scope: !1941, inlinedAt: !1942)
!1953 = !DILocation(line: 740, column: 14, scope: !1941, inlinedAt: !1942)
!1954 = !DILocation(line: 741, column: 2, scope: !1941, inlinedAt: !1942)
!1955 = !DILocation(line: 741, column: 9, scope: !1956, inlinedAt: !1942)
!1956 = distinct !DILexicalBlock(scope: !1941, file: !2, line: 741, column: 2)
!1957 = !DILocation(line: 741, column: 17, scope: !1956, inlinedAt: !1942)
!1958 = !DILocation(line: 741, column: 42, scope: !1956, inlinedAt: !1942)
!1959 = !DILocation(line: 741, column: 46, scope: !1956, inlinedAt: !1942)
!1960 = !DILocation(line: 16, column: 29, scope: !1961, inlinedAt: !1962)
!1961 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1155, file: !1155, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1962 = !DILocation(line: 741, column: 24, scope: !1956, inlinedAt: !1942)
!1963 = !DILocation(line: 16, column: 42, scope: !1961, inlinedAt: !1962)
!1964 = !DILocation(line: 741, column: 55, scope: !1956, inlinedAt: !1942)
!1965 = !DILocation(line: 742, column: 6, scope: !1941, inlinedAt: !1942)
!1966 = !DILocation(line: 742, column: 13, scope: !1941, inlinedAt: !1942)
!1967 = !DILocation(line: 742, column: 27, scope: !1941, inlinedAt: !1942)
!1968 = !DILocalVariable(name: "is_negative", scope: !1941, file: !2, line: 743, type: !146, align: 1)
!1969 = !DILocation(line: 743, column: 7, scope: !1941, inlinedAt: !1942)
!1970 = !DILocation(line: 744, column: 10, scope: !1971, inlinedAt: !1942)
!1971 = distinct !DILexicalBlock(scope: !1941, file: !2, line: 744, column: 2)
!1972 = !DILocation(line: 744, column: 17, scope: !1971, inlinedAt: !1942)
!1973 = !DILocation(line: 747, column: 8, scope: !1974, inlinedAt: !1942)
!1974 = distinct !DILexicalBlock(scope: !1971, file: !2, line: 747, column: 4)
!1975 = !DILocation(line: 747, column: 31, scope: !1974, inlinedAt: !1942)
!1976 = !DILocation(line: 751, column: 4, scope: !1977, inlinedAt: !1942)
!1977 = distinct !DILexicalBlock(scope: !1971, file: !2, line: 751, column: 4)
!1978 = !DILocation(line: 753, column: 4, scope: !1979, inlinedAt: !1942)
!1979 = distinct !DILexicalBlock(scope: !1971, file: !2, line: 753, column: 4)
!1980 = !DILocation(line: 755, column: 6, scope: !1941, inlinedAt: !1942)
!1981 = !DILocation(line: 755, column: 13, scope: !1941, inlinedAt: !1942)
!1982 = !DILocation(line: 755, column: 27, scope: !1941, inlinedAt: !1942)
!1983 = !DILocalVariable(name: "base_used", scope: !1941, file: !2, line: 756, type: !68, align: 8)
!1984 = !DILocation(line: 756, column: 8, scope: !1941, inlinedAt: !1942)
!1985 = !DILocation(line: 756, column: 21, scope: !1941, inlinedAt: !1942)
!1986 = !DILocation(line: 757, column: 6, scope: !1941, inlinedAt: !1942)
!1987 = !DILocation(line: 757, column: 13, scope: !1941, inlinedAt: !1942)
!1988 = !DILocation(line: 757, column: 30, scope: !1941, inlinedAt: !1942)
!1989 = !DILocation(line: 759, column: 3, scope: !1990, inlinedAt: !1942)
!1990 = distinct !DILexicalBlock(scope: !1941, file: !2, line: 758, column: 2)
!1991 = !DILocation(line: 760, column: 7, scope: !1990, inlinedAt: !1942)
!1992 = !DILocation(line: 760, column: 16, scope: !1990, inlinedAt: !1942)
!1993 = !DILocation(line: 760, column: 29, scope: !1990, inlinedAt: !1942)
!1994 = !DILocation(line: 761, column: 11, scope: !1995, inlinedAt: !1942)
!1995 = distinct !DILexicalBlock(scope: !1990, file: !2, line: 761, column: 3)
!1996 = !DILocation(line: 761, column: 18, scope: !1995, inlinedAt: !1942)
!1997 = !DILocation(line: 765, column: 17, scope: !1998, inlinedAt: !1942)
!1998 = distinct !DILexicalBlock(scope: !1995, file: !2, line: 765, column: 5)
!1999 = !DILocation(line: 766, column: 5, scope: !1998, inlinedAt: !1942)
!2000 = !DILocation(line: 769, column: 17, scope: !2001, inlinedAt: !1942)
!2001 = distinct !DILexicalBlock(scope: !1995, file: !2, line: 769, column: 5)
!2002 = !DILocation(line: 770, column: 5, scope: !2001, inlinedAt: !1942)
!2003 = !DILocation(line: 773, column: 17, scope: !2004, inlinedAt: !1942)
!2004 = distinct !DILexicalBlock(scope: !1995, file: !2, line: 773, column: 5)
!2005 = !DILocation(line: 774, column: 5, scope: !2004, inlinedAt: !1942)
!2006 = !DILocation(line: 776, column: 5, scope: !2007, inlinedAt: !1942)
!2007 = distinct !DILexicalBlock(scope: !1995, file: !2, line: 776, column: 5)
!2008 = !DILocation(line: 778, column: 7, scope: !1990, inlinedAt: !1942)
!2009 = !DILocation(line: 778, column: 14, scope: !1990, inlinedAt: !1942)
!2010 = !DILocation(line: 778, column: 28, scope: !1990, inlinedAt: !1942)
!2011 = !DILocalVariable(name: "value", scope: !1941, file: !2, line: 780, type: !68, align: 8)
!2012 = !DILocation(line: 780, column: 8, scope: !1941, inlinedAt: !1942)
!2013 = !DILocation(line: 780, column: 16, scope: !1941, inlinedAt: !1942)
!2014 = !DILocation(line: 781, column: 2, scope: !1941, inlinedAt: !1942)
!2015 = !DILocation(line: 781, column: 9, scope: !2016, inlinedAt: !1942)
!2016 = distinct !DILexicalBlock(scope: !1941, file: !2, line: 781, column: 2)
!2017 = !DILocation(line: 781, column: 18, scope: !2016, inlinedAt: !1942)
!2018 = !DILocalVariable(name: "c", scope: !2019, file: !2, line: 783, type: !65, align: 1)
!2019 = distinct !DILexicalBlock(scope: !2016, file: !2, line: 782, column: 2)
!2020 = !DILocation(line: 783, column: 8, scope: !2019, inlinedAt: !1942)
!2021 = !DILocalVariable(name: "ch", scope: !2022, file: !2, line: 784, type: !65, align: 1)
!2022 = distinct !DILexicalBlock(scope: !2019, file: !2, line: 784, column: 4)
!2023 = !DILocation(line: 784, column: 9, scope: !2022, inlinedAt: !1942)
!2024 = !DILocation(line: 784, column: 14, scope: !2022, inlinedAt: !1942)
!2025 = !DILocation(line: 784, column: 21, scope: !2022, inlinedAt: !1942)
!2026 = !DILocation(line: 785, column: 8, scope: !2022, inlinedAt: !1942)
!2027 = !DILocation(line: 785, column: 27, scope: !2022, inlinedAt: !1942)
!2028 = !DILocation(line: 785, column: 51, scope: !2022, inlinedAt: !1942)
!2029 = !DILocation(line: 785, column: 45, scope: !2022, inlinedAt: !1942)
!2030 = !DILocation(line: 786, column: 8, scope: !2022, inlinedAt: !1942)
!2031 = !DILocation(line: 786, column: 33, scope: !2022, inlinedAt: !1942)
!2032 = !DILocation(line: 786, column: 27, scope: !2022, inlinedAt: !1942)
!2033 = !DILocation(line: 787, column: 8, scope: !2022, inlinedAt: !1942)
!2034 = !DILocation(line: 787, column: 25, scope: !2022, inlinedAt: !1942)
!2035 = !DILocation(line: 788, column: 8, scope: !2022, inlinedAt: !1942)
!2036 = !DILocation(line: 788, column: 25, scope: !2022, inlinedAt: !1942)
!2037 = !DILocation(line: 789, column: 18, scope: !2022, inlinedAt: !1942)
!2038 = !DILocation(line: 789, column: 12, scope: !2022, inlinedAt: !1942)
!2039 = !DILocation(line: 791, column: 7, scope: !2019, inlinedAt: !1942)
!2040 = !DILocation(line: 791, column: 12, scope: !2019, inlinedAt: !1942)
!2041 = !DILocation(line: 791, column: 30, scope: !2019, inlinedAt: !1942)
!2042 = !DILocation(line: 793, column: 8, scope: !2043, inlinedAt: !1942)
!2043 = distinct !DILexicalBlock(scope: !2019, file: !2, line: 793, column: 4)
!2044 = !DILocalVariable(name: "new_value", scope: !2045, file: !2, line: 795, type: !68, align: 8)
!2045 = distinct !DILexicalBlock(scope: !2043, file: !2, line: 794, column: 4)
!2046 = !DILocation(line: 795, column: 11, scope: !2045, inlinedAt: !1942)
!2047 = !DILocation(line: 795, column: 23, scope: !2045, inlinedAt: !1942)
!2048 = !DILocation(line: 795, column: 31, scope: !2045, inlinedAt: !1942)
!2049 = !DILocation(line: 795, column: 43, scope: !2045, inlinedAt: !1942)
!2050 = !DILocation(line: 796, column: 9, scope: !2045, inlinedAt: !1942)
!2051 = !DILocation(line: 796, column: 21, scope: !2045, inlinedAt: !1942)
!2052 = !DILocation(line: 796, column: 35, scope: !2045, inlinedAt: !1942)
!2053 = !DILocation(line: 797, column: 12, scope: !2045, inlinedAt: !1942)
!2054 = !DILocalVariable(name: "new_value", scope: !2043, file: !2, line: 799, type: !68, align: 8)
!2055 = !DILocation(line: 799, column: 10, scope: !2043, inlinedAt: !1942)
!2056 = !DILocation(line: 799, column: 22, scope: !2043, inlinedAt: !1942)
!2057 = !DILocation(line: 799, column: 30, scope: !2043, inlinedAt: !1942)
!2058 = !DILocation(line: 799, column: 42, scope: !2043, inlinedAt: !1942)
!2059 = !DILocation(line: 800, column: 8, scope: !2043, inlinedAt: !1942)
!2060 = !DILocation(line: 800, column: 20, scope: !2043, inlinedAt: !1942)
!2061 = !DILocation(line: 800, column: 34, scope: !2043, inlinedAt: !1942)
!2062 = !DILocation(line: 801, column: 11, scope: !2043, inlinedAt: !1942)
!2063 = !DILocation(line: 804, column: 9, scope: !1941, inlinedAt: !1942)
!2064 = distinct !DISubprogram(name: "to_uint", linkageName: "std.core.String.to_uint", scope: !2, file: !2, line: 815, type: !2065, scopeLine: 815, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!2065 = !DISubroutineType(types: !2066)
!2066 = !{!345, !2067, !60, !18}
!2067 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint*", baseType: !3, size: 64, align: 64, dwarfAddressSpace: 0)
!2068 = !DILocalVariable(name: "s", arg: 1, scope: !2064, file: !2, line: 815, type: !60)
!2069 = !DILocation(line: 815, column: 25, scope: !2064)
!2070 = !DILocalVariable(name: "base", arg: 2, scope: !2064, file: !2, line: 815, type: !18)
!2071 = !DILocation(line: 815, column: 32, scope: !2064)
!2072 = !DILocation(line: 734, column: 12, scope: !2073, inlinedAt: !2075)
!2073 = distinct !DILexicalBlock(scope: !2074, file: !2, line: 737, column: 1)
!2074 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 736, scopeLine: 736, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !69)
!2075 = !DILocation(line: 815, column: 46, scope: !2064)
!2076 = !DILocation(line: 734, column: 26, scope: !2073, inlinedAt: !2075)
!2077 = !DILocation(line: 734, column: 39, scope: !2073, inlinedAt: !2075)
!2078 = !DILocalVariable(name: "len", scope: !2074, file: !2, line: 738, type: !67, align: 8)
!2079 = !DILocation(line: 738, column: 6, scope: !2074, inlinedAt: !2075)
!2080 = !DILocation(line: 738, column: 12, scope: !2074, inlinedAt: !2075)
!2081 = !DILocalVariable(name: "index", scope: !2074, file: !2, line: 739, type: !67, align: 8)
!2082 = !DILocation(line: 739, column: 6, scope: !2074, inlinedAt: !2075)
!2083 = !DILocation(line: 739, column: 14, scope: !2074, inlinedAt: !2075)
!2084 = !DILocalVariable(name: "ptr", scope: !2074, file: !2, line: 740, type: !64, align: 8)
!2085 = !DILocation(line: 740, column: 8, scope: !2074, inlinedAt: !2075)
!2086 = !DILocation(line: 740, column: 14, scope: !2074, inlinedAt: !2075)
!2087 = !DILocation(line: 741, column: 2, scope: !2074, inlinedAt: !2075)
!2088 = !DILocation(line: 741, column: 9, scope: !2089, inlinedAt: !2075)
!2089 = distinct !DILexicalBlock(scope: !2074, file: !2, line: 741, column: 2)
!2090 = !DILocation(line: 741, column: 17, scope: !2089, inlinedAt: !2075)
!2091 = !DILocation(line: 741, column: 42, scope: !2089, inlinedAt: !2075)
!2092 = !DILocation(line: 741, column: 46, scope: !2089, inlinedAt: !2075)
!2093 = !DILocation(line: 16, column: 29, scope: !2094, inlinedAt: !2095)
!2094 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1155, file: !1155, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!2095 = !DILocation(line: 741, column: 24, scope: !2089, inlinedAt: !2075)
!2096 = !DILocation(line: 16, column: 42, scope: !2094, inlinedAt: !2095)
!2097 = !DILocation(line: 741, column: 55, scope: !2089, inlinedAt: !2075)
!2098 = !DILocation(line: 742, column: 6, scope: !2074, inlinedAt: !2075)
!2099 = !DILocation(line: 742, column: 13, scope: !2074, inlinedAt: !2075)
!2100 = !DILocation(line: 742, column: 27, scope: !2074, inlinedAt: !2075)
!2101 = !DILocalVariable(name: "is_negative", scope: !2074, file: !2, line: 743, type: !146, align: 1)
!2102 = !DILocation(line: 743, column: 7, scope: !2074, inlinedAt: !2075)
!2103 = !DILocation(line: 744, column: 10, scope: !2104, inlinedAt: !2075)
!2104 = distinct !DILexicalBlock(scope: !2074, file: !2, line: 744, column: 2)
!2105 = !DILocation(line: 744, column: 17, scope: !2104, inlinedAt: !2075)
!2106 = !DILocation(line: 747, column: 8, scope: !2107, inlinedAt: !2075)
!2107 = distinct !DILexicalBlock(scope: !2104, file: !2, line: 747, column: 4)
!2108 = !DILocation(line: 747, column: 31, scope: !2107, inlinedAt: !2075)
!2109 = !DILocation(line: 751, column: 4, scope: !2110, inlinedAt: !2075)
!2110 = distinct !DILexicalBlock(scope: !2104, file: !2, line: 751, column: 4)
!2111 = !DILocation(line: 753, column: 4, scope: !2112, inlinedAt: !2075)
!2112 = distinct !DILexicalBlock(scope: !2104, file: !2, line: 753, column: 4)
!2113 = !DILocation(line: 755, column: 6, scope: !2074, inlinedAt: !2075)
!2114 = !DILocation(line: 755, column: 13, scope: !2074, inlinedAt: !2075)
!2115 = !DILocation(line: 755, column: 27, scope: !2074, inlinedAt: !2075)
!2116 = !DILocalVariable(name: "base_used", scope: !2074, file: !2, line: 756, type: !3, align: 4)
!2117 = !DILocation(line: 756, column: 8, scope: !2074, inlinedAt: !2075)
!2118 = !DILocation(line: 756, column: 21, scope: !2074, inlinedAt: !2075)
!2119 = !DILocation(line: 757, column: 6, scope: !2074, inlinedAt: !2075)
!2120 = !DILocation(line: 757, column: 13, scope: !2074, inlinedAt: !2075)
!2121 = !DILocation(line: 757, column: 30, scope: !2074, inlinedAt: !2075)
!2122 = !DILocation(line: 759, column: 3, scope: !2123, inlinedAt: !2075)
!2123 = distinct !DILexicalBlock(scope: !2074, file: !2, line: 758, column: 2)
!2124 = !DILocation(line: 760, column: 7, scope: !2123, inlinedAt: !2075)
!2125 = !DILocation(line: 760, column: 16, scope: !2123, inlinedAt: !2075)
!2126 = !DILocation(line: 760, column: 29, scope: !2123, inlinedAt: !2075)
!2127 = !DILocation(line: 761, column: 11, scope: !2128, inlinedAt: !2075)
!2128 = distinct !DILexicalBlock(scope: !2123, file: !2, line: 761, column: 3)
!2129 = !DILocation(line: 761, column: 18, scope: !2128, inlinedAt: !2075)
!2130 = !DILocation(line: 765, column: 17, scope: !2131, inlinedAt: !2075)
!2131 = distinct !DILexicalBlock(scope: !2128, file: !2, line: 765, column: 5)
!2132 = !DILocation(line: 766, column: 5, scope: !2131, inlinedAt: !2075)
!2133 = !DILocation(line: 769, column: 17, scope: !2134, inlinedAt: !2075)
!2134 = distinct !DILexicalBlock(scope: !2128, file: !2, line: 769, column: 5)
!2135 = !DILocation(line: 770, column: 5, scope: !2134, inlinedAt: !2075)
!2136 = !DILocation(line: 773, column: 17, scope: !2137, inlinedAt: !2075)
!2137 = distinct !DILexicalBlock(scope: !2128, file: !2, line: 773, column: 5)
!2138 = !DILocation(line: 774, column: 5, scope: !2137, inlinedAt: !2075)
!2139 = !DILocation(line: 776, column: 5, scope: !2140, inlinedAt: !2075)
!2140 = distinct !DILexicalBlock(scope: !2128, file: !2, line: 776, column: 5)
!2141 = !DILocation(line: 778, column: 7, scope: !2123, inlinedAt: !2075)
!2142 = !DILocation(line: 778, column: 14, scope: !2123, inlinedAt: !2075)
!2143 = !DILocation(line: 778, column: 28, scope: !2123, inlinedAt: !2075)
!2144 = !DILocalVariable(name: "value", scope: !2074, file: !2, line: 780, type: !3, align: 4)
!2145 = !DILocation(line: 780, column: 8, scope: !2074, inlinedAt: !2075)
!2146 = !DILocation(line: 780, column: 16, scope: !2074, inlinedAt: !2075)
!2147 = !DILocation(line: 781, column: 2, scope: !2074, inlinedAt: !2075)
!2148 = !DILocation(line: 781, column: 9, scope: !2149, inlinedAt: !2075)
!2149 = distinct !DILexicalBlock(scope: !2074, file: !2, line: 781, column: 2)
!2150 = !DILocation(line: 781, column: 18, scope: !2149, inlinedAt: !2075)
!2151 = !DILocalVariable(name: "c", scope: !2152, file: !2, line: 783, type: !65, align: 1)
!2152 = distinct !DILexicalBlock(scope: !2149, file: !2, line: 782, column: 2)
!2153 = !DILocation(line: 783, column: 8, scope: !2152, inlinedAt: !2075)
!2154 = !DILocalVariable(name: "ch", scope: !2155, file: !2, line: 784, type: !65, align: 1)
!2155 = distinct !DILexicalBlock(scope: !2152, file: !2, line: 784, column: 4)
!2156 = !DILocation(line: 784, column: 9, scope: !2155, inlinedAt: !2075)
!2157 = !DILocation(line: 784, column: 14, scope: !2155, inlinedAt: !2075)
!2158 = !DILocation(line: 784, column: 21, scope: !2155, inlinedAt: !2075)
!2159 = !DILocation(line: 785, column: 8, scope: !2155, inlinedAt: !2075)
!2160 = !DILocation(line: 785, column: 27, scope: !2155, inlinedAt: !2075)
!2161 = !DILocation(line: 785, column: 51, scope: !2155, inlinedAt: !2075)
!2162 = !DILocation(line: 785, column: 45, scope: !2155, inlinedAt: !2075)
!2163 = !DILocation(line: 786, column: 8, scope: !2155, inlinedAt: !2075)
!2164 = !DILocation(line: 786, column: 33, scope: !2155, inlinedAt: !2075)
!2165 = !DILocation(line: 786, column: 27, scope: !2155, inlinedAt: !2075)
!2166 = !DILocation(line: 787, column: 8, scope: !2155, inlinedAt: !2075)
!2167 = !DILocation(line: 787, column: 25, scope: !2155, inlinedAt: !2075)
!2168 = !DILocation(line: 788, column: 8, scope: !2155, inlinedAt: !2075)
!2169 = !DILocation(line: 788, column: 25, scope: !2155, inlinedAt: !2075)
!2170 = !DILocation(line: 789, column: 18, scope: !2155, inlinedAt: !2075)
!2171 = !DILocation(line: 789, column: 12, scope: !2155, inlinedAt: !2075)
!2172 = !DILocation(line: 791, column: 7, scope: !2152, inlinedAt: !2075)
!2173 = !DILocation(line: 791, column: 12, scope: !2152, inlinedAt: !2075)
!2174 = !DILocation(line: 791, column: 30, scope: !2152, inlinedAt: !2075)
!2175 = !DILocation(line: 793, column: 8, scope: !2176, inlinedAt: !2075)
!2176 = distinct !DILexicalBlock(scope: !2152, file: !2, line: 793, column: 4)
!2177 = !DILocalVariable(name: "new_value", scope: !2178, file: !2, line: 795, type: !3, align: 4)
!2178 = distinct !DILexicalBlock(scope: !2176, file: !2, line: 794, column: 4)
!2179 = !DILocation(line: 795, column: 11, scope: !2178, inlinedAt: !2075)
!2180 = !DILocation(line: 795, column: 23, scope: !2178, inlinedAt: !2075)
!2181 = !DILocation(line: 795, column: 31, scope: !2178, inlinedAt: !2075)
!2182 = !DILocation(line: 795, column: 43, scope: !2178, inlinedAt: !2075)
!2183 = !DILocation(line: 796, column: 9, scope: !2178, inlinedAt: !2075)
!2184 = !DILocation(line: 796, column: 21, scope: !2178, inlinedAt: !2075)
!2185 = !DILocation(line: 796, column: 35, scope: !2178, inlinedAt: !2075)
!2186 = !DILocation(line: 797, column: 12, scope: !2178, inlinedAt: !2075)
!2187 = !DILocalVariable(name: "new_value", scope: !2176, file: !2, line: 799, type: !3, align: 4)
!2188 = !DILocation(line: 799, column: 10, scope: !2176, inlinedAt: !2075)
!2189 = !DILocation(line: 799, column: 22, scope: !2176, inlinedAt: !2075)
!2190 = !DILocation(line: 799, column: 30, scope: !2176, inlinedAt: !2075)
!2191 = !DILocation(line: 799, column: 42, scope: !2176, inlinedAt: !2075)
!2192 = !DILocation(line: 800, column: 8, scope: !2176, inlinedAt: !2075)
!2193 = !DILocation(line: 800, column: 20, scope: !2176, inlinedAt: !2075)
!2194 = !DILocation(line: 800, column: 34, scope: !2176, inlinedAt: !2075)
!2195 = !DILocation(line: 801, column: 11, scope: !2176, inlinedAt: !2075)
!2196 = !DILocation(line: 804, column: 9, scope: !2074, inlinedAt: !2075)
!2197 = distinct !DISubprogram(name: "to_ushort", linkageName: "std.core.String.to_ushort", scope: !2, file: !2, line: 816, type: !2198, scopeLine: 816, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!2198 = !DISubroutineType(types: !2199)
!2199 = !{!345, !945, !60, !18}
!2200 = !DILocalVariable(name: "s", arg: 1, scope: !2197, file: !2, line: 816, type: !60)
!2201 = !DILocation(line: 816, column: 29, scope: !2197)
!2202 = !DILocalVariable(name: "base", arg: 2, scope: !2197, file: !2, line: 816, type: !18)
!2203 = !DILocation(line: 816, column: 36, scope: !2197)
!2204 = !DILocation(line: 734, column: 12, scope: !2205, inlinedAt: !2207)
!2205 = distinct !DILexicalBlock(scope: !2206, file: !2, line: 737, column: 1)
!2206 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 736, scopeLine: 736, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !69)
!2207 = !DILocation(line: 816, column: 50, scope: !2197)
!2208 = !DILocation(line: 734, column: 26, scope: !2205, inlinedAt: !2207)
!2209 = !DILocation(line: 734, column: 39, scope: !2205, inlinedAt: !2207)
!2210 = !DILocalVariable(name: "len", scope: !2206, file: !2, line: 738, type: !67, align: 8)
!2211 = !DILocation(line: 738, column: 6, scope: !2206, inlinedAt: !2207)
!2212 = !DILocation(line: 738, column: 12, scope: !2206, inlinedAt: !2207)
!2213 = !DILocalVariable(name: "index", scope: !2206, file: !2, line: 739, type: !67, align: 8)
!2214 = !DILocation(line: 739, column: 6, scope: !2206, inlinedAt: !2207)
!2215 = !DILocation(line: 739, column: 14, scope: !2206, inlinedAt: !2207)
!2216 = !DILocalVariable(name: "ptr", scope: !2206, file: !2, line: 740, type: !64, align: 8)
!2217 = !DILocation(line: 740, column: 8, scope: !2206, inlinedAt: !2207)
!2218 = !DILocation(line: 740, column: 14, scope: !2206, inlinedAt: !2207)
!2219 = !DILocation(line: 741, column: 2, scope: !2206, inlinedAt: !2207)
!2220 = !DILocation(line: 741, column: 9, scope: !2221, inlinedAt: !2207)
!2221 = distinct !DILexicalBlock(scope: !2206, file: !2, line: 741, column: 2)
!2222 = !DILocation(line: 741, column: 17, scope: !2221, inlinedAt: !2207)
!2223 = !DILocation(line: 741, column: 42, scope: !2221, inlinedAt: !2207)
!2224 = !DILocation(line: 741, column: 46, scope: !2221, inlinedAt: !2207)
!2225 = !DILocation(line: 16, column: 29, scope: !2226, inlinedAt: !2227)
!2226 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1155, file: !1155, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!2227 = !DILocation(line: 741, column: 24, scope: !2221, inlinedAt: !2207)
!2228 = !DILocation(line: 16, column: 42, scope: !2226, inlinedAt: !2227)
!2229 = !DILocation(line: 741, column: 55, scope: !2221, inlinedAt: !2207)
!2230 = !DILocation(line: 742, column: 6, scope: !2206, inlinedAt: !2207)
!2231 = !DILocation(line: 742, column: 13, scope: !2206, inlinedAt: !2207)
!2232 = !DILocation(line: 742, column: 27, scope: !2206, inlinedAt: !2207)
!2233 = !DILocalVariable(name: "is_negative", scope: !2206, file: !2, line: 743, type: !146, align: 1)
!2234 = !DILocation(line: 743, column: 7, scope: !2206, inlinedAt: !2207)
!2235 = !DILocation(line: 744, column: 10, scope: !2236, inlinedAt: !2207)
!2236 = distinct !DILexicalBlock(scope: !2206, file: !2, line: 744, column: 2)
!2237 = !DILocation(line: 744, column: 17, scope: !2236, inlinedAt: !2207)
!2238 = !DILocation(line: 747, column: 8, scope: !2239, inlinedAt: !2207)
!2239 = distinct !DILexicalBlock(scope: !2236, file: !2, line: 747, column: 4)
!2240 = !DILocation(line: 747, column: 31, scope: !2239, inlinedAt: !2207)
!2241 = !DILocation(line: 751, column: 4, scope: !2242, inlinedAt: !2207)
!2242 = distinct !DILexicalBlock(scope: !2236, file: !2, line: 751, column: 4)
!2243 = !DILocation(line: 753, column: 4, scope: !2244, inlinedAt: !2207)
!2244 = distinct !DILexicalBlock(scope: !2236, file: !2, line: 753, column: 4)
!2245 = !DILocation(line: 755, column: 6, scope: !2206, inlinedAt: !2207)
!2246 = !DILocation(line: 755, column: 13, scope: !2206, inlinedAt: !2207)
!2247 = !DILocation(line: 755, column: 27, scope: !2206, inlinedAt: !2207)
!2248 = !DILocalVariable(name: "base_used", scope: !2206, file: !2, line: 756, type: !896, align: 2)
!2249 = !DILocation(line: 756, column: 8, scope: !2206, inlinedAt: !2207)
!2250 = !DILocation(line: 756, column: 21, scope: !2206, inlinedAt: !2207)
!2251 = !DILocation(line: 757, column: 6, scope: !2206, inlinedAt: !2207)
!2252 = !DILocation(line: 757, column: 13, scope: !2206, inlinedAt: !2207)
!2253 = !DILocation(line: 757, column: 30, scope: !2206, inlinedAt: !2207)
!2254 = !DILocation(line: 759, column: 3, scope: !2255, inlinedAt: !2207)
!2255 = distinct !DILexicalBlock(scope: !2206, file: !2, line: 758, column: 2)
!2256 = !DILocation(line: 760, column: 7, scope: !2255, inlinedAt: !2207)
!2257 = !DILocation(line: 760, column: 16, scope: !2255, inlinedAt: !2207)
!2258 = !DILocation(line: 760, column: 29, scope: !2255, inlinedAt: !2207)
!2259 = !DILocation(line: 761, column: 11, scope: !2260, inlinedAt: !2207)
!2260 = distinct !DILexicalBlock(scope: !2255, file: !2, line: 761, column: 3)
!2261 = !DILocation(line: 761, column: 18, scope: !2260, inlinedAt: !2207)
!2262 = !DILocation(line: 765, column: 17, scope: !2263, inlinedAt: !2207)
!2263 = distinct !DILexicalBlock(scope: !2260, file: !2, line: 765, column: 5)
!2264 = !DILocation(line: 766, column: 5, scope: !2263, inlinedAt: !2207)
!2265 = !DILocation(line: 769, column: 17, scope: !2266, inlinedAt: !2207)
!2266 = distinct !DILexicalBlock(scope: !2260, file: !2, line: 769, column: 5)
!2267 = !DILocation(line: 770, column: 5, scope: !2266, inlinedAt: !2207)
!2268 = !DILocation(line: 773, column: 17, scope: !2269, inlinedAt: !2207)
!2269 = distinct !DILexicalBlock(scope: !2260, file: !2, line: 773, column: 5)
!2270 = !DILocation(line: 774, column: 5, scope: !2269, inlinedAt: !2207)
!2271 = !DILocation(line: 776, column: 5, scope: !2272, inlinedAt: !2207)
!2272 = distinct !DILexicalBlock(scope: !2260, file: !2, line: 776, column: 5)
!2273 = !DILocation(line: 778, column: 7, scope: !2255, inlinedAt: !2207)
!2274 = !DILocation(line: 778, column: 14, scope: !2255, inlinedAt: !2207)
!2275 = !DILocation(line: 778, column: 28, scope: !2255, inlinedAt: !2207)
!2276 = !DILocalVariable(name: "value", scope: !2206, file: !2, line: 780, type: !896, align: 2)
!2277 = !DILocation(line: 780, column: 8, scope: !2206, inlinedAt: !2207)
!2278 = !DILocation(line: 780, column: 16, scope: !2206, inlinedAt: !2207)
!2279 = !DILocation(line: 781, column: 2, scope: !2206, inlinedAt: !2207)
!2280 = !DILocation(line: 781, column: 9, scope: !2281, inlinedAt: !2207)
!2281 = distinct !DILexicalBlock(scope: !2206, file: !2, line: 781, column: 2)
!2282 = !DILocation(line: 781, column: 18, scope: !2281, inlinedAt: !2207)
!2283 = !DILocalVariable(name: "c", scope: !2284, file: !2, line: 783, type: !65, align: 1)
!2284 = distinct !DILexicalBlock(scope: !2281, file: !2, line: 782, column: 2)
!2285 = !DILocation(line: 783, column: 8, scope: !2284, inlinedAt: !2207)
!2286 = !DILocalVariable(name: "ch", scope: !2287, file: !2, line: 784, type: !65, align: 1)
!2287 = distinct !DILexicalBlock(scope: !2284, file: !2, line: 784, column: 4)
!2288 = !DILocation(line: 784, column: 9, scope: !2287, inlinedAt: !2207)
!2289 = !DILocation(line: 784, column: 14, scope: !2287, inlinedAt: !2207)
!2290 = !DILocation(line: 784, column: 21, scope: !2287, inlinedAt: !2207)
!2291 = !DILocation(line: 785, column: 8, scope: !2287, inlinedAt: !2207)
!2292 = !DILocation(line: 785, column: 27, scope: !2287, inlinedAt: !2207)
!2293 = !DILocation(line: 785, column: 51, scope: !2287, inlinedAt: !2207)
!2294 = !DILocation(line: 785, column: 45, scope: !2287, inlinedAt: !2207)
!2295 = !DILocation(line: 786, column: 8, scope: !2287, inlinedAt: !2207)
!2296 = !DILocation(line: 786, column: 33, scope: !2287, inlinedAt: !2207)
!2297 = !DILocation(line: 786, column: 27, scope: !2287, inlinedAt: !2207)
!2298 = !DILocation(line: 787, column: 8, scope: !2287, inlinedAt: !2207)
!2299 = !DILocation(line: 787, column: 25, scope: !2287, inlinedAt: !2207)
!2300 = !DILocation(line: 788, column: 8, scope: !2287, inlinedAt: !2207)
!2301 = !DILocation(line: 788, column: 25, scope: !2287, inlinedAt: !2207)
!2302 = !DILocation(line: 789, column: 18, scope: !2287, inlinedAt: !2207)
!2303 = !DILocation(line: 789, column: 12, scope: !2287, inlinedAt: !2207)
!2304 = !DILocation(line: 791, column: 7, scope: !2284, inlinedAt: !2207)
!2305 = !DILocation(line: 791, column: 12, scope: !2284, inlinedAt: !2207)
!2306 = !DILocation(line: 791, column: 30, scope: !2284, inlinedAt: !2207)
!2307 = !DILocation(line: 793, column: 8, scope: !2308, inlinedAt: !2207)
!2308 = distinct !DILexicalBlock(scope: !2284, file: !2, line: 793, column: 4)
!2309 = !DILocalVariable(name: "new_value", scope: !2310, file: !2, line: 795, type: !896, align: 2)
!2310 = distinct !DILexicalBlock(scope: !2308, file: !2, line: 794, column: 4)
!2311 = !DILocation(line: 795, column: 11, scope: !2310, inlinedAt: !2207)
!2312 = !DILocation(line: 795, column: 23, scope: !2310, inlinedAt: !2207)
!2313 = !DILocation(line: 795, column: 31, scope: !2310, inlinedAt: !2207)
!2314 = !DILocation(line: 795, column: 43, scope: !2310, inlinedAt: !2207)
!2315 = !DILocation(line: 796, column: 9, scope: !2310, inlinedAt: !2207)
!2316 = !DILocation(line: 796, column: 21, scope: !2310, inlinedAt: !2207)
!2317 = !DILocation(line: 796, column: 35, scope: !2310, inlinedAt: !2207)
!2318 = !DILocation(line: 797, column: 12, scope: !2310, inlinedAt: !2207)
!2319 = !DILocalVariable(name: "new_value", scope: !2308, file: !2, line: 799, type: !896, align: 2)
!2320 = !DILocation(line: 799, column: 10, scope: !2308, inlinedAt: !2207)
!2321 = !DILocation(line: 799, column: 22, scope: !2308, inlinedAt: !2207)
!2322 = !DILocation(line: 799, column: 30, scope: !2308, inlinedAt: !2207)
!2323 = !DILocation(line: 799, column: 42, scope: !2308, inlinedAt: !2207)
!2324 = !DILocation(line: 800, column: 8, scope: !2308, inlinedAt: !2207)
!2325 = !DILocation(line: 800, column: 20, scope: !2308, inlinedAt: !2207)
!2326 = !DILocation(line: 800, column: 34, scope: !2308, inlinedAt: !2207)
!2327 = !DILocation(line: 801, column: 11, scope: !2308, inlinedAt: !2207)
!2328 = !DILocation(line: 804, column: 9, scope: !2206, inlinedAt: !2207)
!2329 = distinct !DISubprogram(name: "to_uchar", linkageName: "std.core.String.to_uchar", scope: !2, file: !2, line: 817, type: !2330, scopeLine: 817, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!2330 = !DISubroutineType(types: !2331)
!2331 = !{!345, !64, !60, !18}
!2332 = !DILocalVariable(name: "s", arg: 1, scope: !2329, file: !2, line: 817, type: !60)
!2333 = !DILocation(line: 817, column: 26, scope: !2329)
!2334 = !DILocalVariable(name: "base", arg: 2, scope: !2329, file: !2, line: 817, type: !18)
!2335 = !DILocation(line: 817, column: 33, scope: !2329)
!2336 = !DILocation(line: 734, column: 12, scope: !2337, inlinedAt: !2339)
!2337 = distinct !DILexicalBlock(scope: !2338, file: !2, line: 737, column: 1)
!2338 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 736, scopeLine: 736, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !69)
!2339 = !DILocation(line: 817, column: 47, scope: !2329)
!2340 = !DILocation(line: 734, column: 26, scope: !2337, inlinedAt: !2339)
!2341 = !DILocation(line: 734, column: 39, scope: !2337, inlinedAt: !2339)
!2342 = !DILocalVariable(name: "len", scope: !2338, file: !2, line: 738, type: !67, align: 8)
!2343 = !DILocation(line: 738, column: 6, scope: !2338, inlinedAt: !2339)
!2344 = !DILocation(line: 738, column: 12, scope: !2338, inlinedAt: !2339)
!2345 = !DILocalVariable(name: "index", scope: !2338, file: !2, line: 739, type: !67, align: 8)
!2346 = !DILocation(line: 739, column: 6, scope: !2338, inlinedAt: !2339)
!2347 = !DILocation(line: 739, column: 14, scope: !2338, inlinedAt: !2339)
!2348 = !DILocalVariable(name: "ptr", scope: !2338, file: !2, line: 740, type: !64, align: 8)
!2349 = !DILocation(line: 740, column: 8, scope: !2338, inlinedAt: !2339)
!2350 = !DILocation(line: 740, column: 14, scope: !2338, inlinedAt: !2339)
!2351 = !DILocation(line: 741, column: 2, scope: !2338, inlinedAt: !2339)
!2352 = !DILocation(line: 741, column: 9, scope: !2353, inlinedAt: !2339)
!2353 = distinct !DILexicalBlock(scope: !2338, file: !2, line: 741, column: 2)
!2354 = !DILocation(line: 741, column: 17, scope: !2353, inlinedAt: !2339)
!2355 = !DILocation(line: 741, column: 42, scope: !2353, inlinedAt: !2339)
!2356 = !DILocation(line: 741, column: 46, scope: !2353, inlinedAt: !2339)
!2357 = !DILocation(line: 16, column: 29, scope: !2358, inlinedAt: !2359)
!2358 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1155, file: !1155, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!2359 = !DILocation(line: 741, column: 24, scope: !2353, inlinedAt: !2339)
!2360 = !DILocation(line: 16, column: 42, scope: !2358, inlinedAt: !2359)
!2361 = !DILocation(line: 741, column: 55, scope: !2353, inlinedAt: !2339)
!2362 = !DILocation(line: 742, column: 6, scope: !2338, inlinedAt: !2339)
!2363 = !DILocation(line: 742, column: 13, scope: !2338, inlinedAt: !2339)
!2364 = !DILocation(line: 742, column: 27, scope: !2338, inlinedAt: !2339)
!2365 = !DILocalVariable(name: "is_negative", scope: !2338, file: !2, line: 743, type: !146, align: 1)
!2366 = !DILocation(line: 743, column: 7, scope: !2338, inlinedAt: !2339)
!2367 = !DILocation(line: 744, column: 10, scope: !2368, inlinedAt: !2339)
!2368 = distinct !DILexicalBlock(scope: !2338, file: !2, line: 744, column: 2)
!2369 = !DILocation(line: 744, column: 17, scope: !2368, inlinedAt: !2339)
!2370 = !DILocation(line: 747, column: 8, scope: !2371, inlinedAt: !2339)
!2371 = distinct !DILexicalBlock(scope: !2368, file: !2, line: 747, column: 4)
!2372 = !DILocation(line: 747, column: 31, scope: !2371, inlinedAt: !2339)
!2373 = !DILocation(line: 751, column: 4, scope: !2374, inlinedAt: !2339)
!2374 = distinct !DILexicalBlock(scope: !2368, file: !2, line: 751, column: 4)
!2375 = !DILocation(line: 753, column: 4, scope: !2376, inlinedAt: !2339)
!2376 = distinct !DILexicalBlock(scope: !2368, file: !2, line: 753, column: 4)
!2377 = !DILocation(line: 755, column: 6, scope: !2338, inlinedAt: !2339)
!2378 = !DILocation(line: 755, column: 13, scope: !2338, inlinedAt: !2339)
!2379 = !DILocation(line: 755, column: 27, scope: !2338, inlinedAt: !2339)
!2380 = !DILocalVariable(name: "base_used", scope: !2338, file: !2, line: 756, type: !65, align: 1)
!2381 = !DILocation(line: 756, column: 8, scope: !2338, inlinedAt: !2339)
!2382 = !DILocation(line: 756, column: 21, scope: !2338, inlinedAt: !2339)
!2383 = !DILocation(line: 757, column: 6, scope: !2338, inlinedAt: !2339)
!2384 = !DILocation(line: 757, column: 13, scope: !2338, inlinedAt: !2339)
!2385 = !DILocation(line: 757, column: 30, scope: !2338, inlinedAt: !2339)
!2386 = !DILocation(line: 759, column: 3, scope: !2387, inlinedAt: !2339)
!2387 = distinct !DILexicalBlock(scope: !2338, file: !2, line: 758, column: 2)
!2388 = !DILocation(line: 760, column: 7, scope: !2387, inlinedAt: !2339)
!2389 = !DILocation(line: 760, column: 16, scope: !2387, inlinedAt: !2339)
!2390 = !DILocation(line: 760, column: 29, scope: !2387, inlinedAt: !2339)
!2391 = !DILocation(line: 761, column: 11, scope: !2392, inlinedAt: !2339)
!2392 = distinct !DILexicalBlock(scope: !2387, file: !2, line: 761, column: 3)
!2393 = !DILocation(line: 761, column: 18, scope: !2392, inlinedAt: !2339)
!2394 = !DILocation(line: 765, column: 17, scope: !2395, inlinedAt: !2339)
!2395 = distinct !DILexicalBlock(scope: !2392, file: !2, line: 765, column: 5)
!2396 = !DILocation(line: 766, column: 5, scope: !2395, inlinedAt: !2339)
!2397 = !DILocation(line: 769, column: 17, scope: !2398, inlinedAt: !2339)
!2398 = distinct !DILexicalBlock(scope: !2392, file: !2, line: 769, column: 5)
!2399 = !DILocation(line: 770, column: 5, scope: !2398, inlinedAt: !2339)
!2400 = !DILocation(line: 773, column: 17, scope: !2401, inlinedAt: !2339)
!2401 = distinct !DILexicalBlock(scope: !2392, file: !2, line: 773, column: 5)
!2402 = !DILocation(line: 774, column: 5, scope: !2401, inlinedAt: !2339)
!2403 = !DILocation(line: 776, column: 5, scope: !2404, inlinedAt: !2339)
!2404 = distinct !DILexicalBlock(scope: !2392, file: !2, line: 776, column: 5)
!2405 = !DILocation(line: 778, column: 7, scope: !2387, inlinedAt: !2339)
!2406 = !DILocation(line: 778, column: 14, scope: !2387, inlinedAt: !2339)
!2407 = !DILocation(line: 778, column: 28, scope: !2387, inlinedAt: !2339)
!2408 = !DILocalVariable(name: "value", scope: !2338, file: !2, line: 780, type: !65, align: 1)
!2409 = !DILocation(line: 780, column: 8, scope: !2338, inlinedAt: !2339)
!2410 = !DILocation(line: 780, column: 16, scope: !2338, inlinedAt: !2339)
!2411 = !DILocation(line: 781, column: 2, scope: !2338, inlinedAt: !2339)
!2412 = !DILocation(line: 781, column: 9, scope: !2413, inlinedAt: !2339)
!2413 = distinct !DILexicalBlock(scope: !2338, file: !2, line: 781, column: 2)
!2414 = !DILocation(line: 781, column: 18, scope: !2413, inlinedAt: !2339)
!2415 = !DILocalVariable(name: "c", scope: !2416, file: !2, line: 783, type: !65, align: 1)
!2416 = distinct !DILexicalBlock(scope: !2413, file: !2, line: 782, column: 2)
!2417 = !DILocation(line: 783, column: 8, scope: !2416, inlinedAt: !2339)
!2418 = !DILocalVariable(name: "ch", scope: !2419, file: !2, line: 784, type: !65, align: 1)
!2419 = distinct !DILexicalBlock(scope: !2416, file: !2, line: 784, column: 4)
!2420 = !DILocation(line: 784, column: 9, scope: !2419, inlinedAt: !2339)
!2421 = !DILocation(line: 784, column: 14, scope: !2419, inlinedAt: !2339)
!2422 = !DILocation(line: 784, column: 21, scope: !2419, inlinedAt: !2339)
!2423 = !DILocation(line: 785, column: 8, scope: !2419, inlinedAt: !2339)
!2424 = !DILocation(line: 785, column: 27, scope: !2419, inlinedAt: !2339)
!2425 = !DILocation(line: 785, column: 51, scope: !2419, inlinedAt: !2339)
!2426 = !DILocation(line: 785, column: 45, scope: !2419, inlinedAt: !2339)
!2427 = !DILocation(line: 786, column: 8, scope: !2419, inlinedAt: !2339)
!2428 = !DILocation(line: 786, column: 33, scope: !2419, inlinedAt: !2339)
!2429 = !DILocation(line: 786, column: 27, scope: !2419, inlinedAt: !2339)
!2430 = !DILocation(line: 787, column: 8, scope: !2419, inlinedAt: !2339)
!2431 = !DILocation(line: 787, column: 25, scope: !2419, inlinedAt: !2339)
!2432 = !DILocation(line: 788, column: 8, scope: !2419, inlinedAt: !2339)
!2433 = !DILocation(line: 788, column: 25, scope: !2419, inlinedAt: !2339)
!2434 = !DILocation(line: 789, column: 18, scope: !2419, inlinedAt: !2339)
!2435 = !DILocation(line: 789, column: 12, scope: !2419, inlinedAt: !2339)
!2436 = !DILocation(line: 791, column: 7, scope: !2416, inlinedAt: !2339)
!2437 = !DILocation(line: 791, column: 12, scope: !2416, inlinedAt: !2339)
!2438 = !DILocation(line: 791, column: 30, scope: !2416, inlinedAt: !2339)
!2439 = !DILocation(line: 793, column: 8, scope: !2440, inlinedAt: !2339)
!2440 = distinct !DILexicalBlock(scope: !2416, file: !2, line: 793, column: 4)
!2441 = !DILocalVariable(name: "new_value", scope: !2442, file: !2, line: 795, type: !65, align: 1)
!2442 = distinct !DILexicalBlock(scope: !2440, file: !2, line: 794, column: 4)
!2443 = !DILocation(line: 795, column: 11, scope: !2442, inlinedAt: !2339)
!2444 = !DILocation(line: 795, column: 23, scope: !2442, inlinedAt: !2339)
!2445 = !DILocation(line: 795, column: 31, scope: !2442, inlinedAt: !2339)
!2446 = !DILocation(line: 795, column: 43, scope: !2442, inlinedAt: !2339)
!2447 = !DILocation(line: 796, column: 9, scope: !2442, inlinedAt: !2339)
!2448 = !DILocation(line: 796, column: 21, scope: !2442, inlinedAt: !2339)
!2449 = !DILocation(line: 796, column: 35, scope: !2442, inlinedAt: !2339)
!2450 = !DILocation(line: 797, column: 12, scope: !2442, inlinedAt: !2339)
!2451 = !DILocalVariable(name: "new_value", scope: !2440, file: !2, line: 799, type: !65, align: 1)
!2452 = !DILocation(line: 799, column: 10, scope: !2440, inlinedAt: !2339)
!2453 = !DILocation(line: 799, column: 22, scope: !2440, inlinedAt: !2339)
!2454 = !DILocation(line: 799, column: 30, scope: !2440, inlinedAt: !2339)
!2455 = !DILocation(line: 799, column: 42, scope: !2440, inlinedAt: !2339)
!2456 = !DILocation(line: 800, column: 8, scope: !2440, inlinedAt: !2339)
!2457 = !DILocation(line: 800, column: 20, scope: !2440, inlinedAt: !2339)
!2458 = !DILocation(line: 800, column: 34, scope: !2440, inlinedAt: !2339)
!2459 = !DILocation(line: 801, column: 11, scope: !2440, inlinedAt: !2339)
!2460 = !DILocation(line: 804, column: 9, scope: !2338, inlinedAt: !2339)
!2461 = distinct !DISubprogram(name: "to_double", linkageName: "std.core.String.to_double", scope: !2, file: !2, line: 819, type: !2462, scopeLine: 819, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!2462 = !DISubroutineType(types: !2463)
!2463 = !{!345, !2464, !60}
!2464 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "double*", baseType: !2465, size: 64, align: 64, dwarfAddressSpace: 0)
!2465 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!2466 = !DILocalVariable(name: "s", arg: 1, scope: !2461, file: !2, line: 819, type: !60)
!2467 = !DILocation(line: 819, column: 29, scope: !2461)
!2468 = !DILocalVariable(name: "sign", scope: !2469, file: !2, line: 454, type: !18, align: 4)
!2469 = distinct !DISubprogram(name: "to_real", linkageName: "to_real", scope: !41, file: !41, line: 452, scopeLine: 452, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !69)
!2470 = !DILocation(line: 454, column: 6, scope: !2469, inlinedAt: !2471)
!2471 = !DILocation(line: 819, column: 35, scope: !2461)
!2472 = !DILocation(line: 454, column: 13, scope: !2469, inlinedAt: !2471)
!2473 = !DILocation(line: 468, column: 2, scope: !2469, inlinedAt: !2471)
!2474 = !DILocation(line: 468, column: 9, scope: !2475, inlinedAt: !2471)
!2475 = distinct !DILexicalBlock(scope: !2469, file: !41, line: 468, column: 2)
!2476 = !DILocation(line: 468, column: 22, scope: !2475, inlinedAt: !2471)
!2477 = !DILocation(line: 468, column: 28, scope: !2475, inlinedAt: !2471)
!2478 = !DILocation(line: 468, column: 47, scope: !2475, inlinedAt: !2471)
!2479 = !DILocation(line: 468, column: 53, scope: !2475, inlinedAt: !2471)
!2480 = !DILocation(line: 469, column: 6, scope: !2469, inlinedAt: !2471)
!2481 = !DILocation(line: 469, column: 25, scope: !2469, inlinedAt: !2471)
!2482 = !DILocation(line: 470, column: 10, scope: !2483, inlinedAt: !2471)
!2483 = distinct !DILexicalBlock(scope: !2469, file: !41, line: 470, column: 2)
!2484 = !DILocation(line: 470, column: 16, scope: !2483, inlinedAt: !2471)
!2485 = !DILocation(line: 473, column: 11, scope: !2486, inlinedAt: !2471)
!2486 = distinct !DILexicalBlock(scope: !2483, file: !41, line: 473, column: 4)
!2487 = !DILocation(line: 474, column: 4, scope: !2486, inlinedAt: !2471)
!2488 = !DILocation(line: 476, column: 12, scope: !2489, inlinedAt: !2471)
!2489 = distinct !DILexicalBlock(scope: !2483, file: !41, line: 476, column: 4)
!2490 = !DILocation(line: 476, column: 18, scope: !2489, inlinedAt: !2471)
!2491 = !DILocation(line: 478, column: 6, scope: !2469, inlinedAt: !2471)
!2492 = !DILocation(line: 478, column: 29, scope: !2469, inlinedAt: !2471)
!2493 = !DILocation(line: 478, column: 57, scope: !2469, inlinedAt: !2471)
!2494 = !DILocation(line: 479, column: 6, scope: !2469, inlinedAt: !2471)
!2495 = !DILocation(line: 479, column: 24, scope: !2469, inlinedAt: !2471)
!2496 = !DILocation(line: 479, column: 47, scope: !2469, inlinedAt: !2471)
!2497 = !DILocation(line: 481, column: 6, scope: !2469, inlinedAt: !2471)
!2498 = !DILocation(line: 481, column: 23, scope: !2469, inlinedAt: !2471)
!2499 = !DILocation(line: 481, column: 29, scope: !2469, inlinedAt: !2471)
!2500 = !DILocation(line: 481, column: 43, scope: !2469, inlinedAt: !2471)
!2501 = !DILocation(line: 481, column: 49, scope: !2469, inlinedAt: !2471)
!2502 = !DILocation(line: 483, column: 34, scope: !2503, inlinedAt: !2471)
!2503 = distinct !DILexicalBlock(scope: !2469, file: !41, line: 482, column: 2)
!2504 = !DILocation(line: 483, column: 40, scope: !2503, inlinedAt: !2471)
!2505 = !DILocation(line: 483, column: 27, scope: !2503, inlinedAt: !2471)
!2506 = !DILocalVariable(name: "scale", scope: !2507, file: !2, line: 330, type: !2465, align: 8)
!2507 = distinct !DISubprogram(name: "hexfloat", linkageName: "hexfloat", scope: !41, file: !41, line: 328, scopeLine: 328, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !69)
!2508 = !DILocation(line: 330, column: 9, scope: !2507, inlinedAt: !2509)
!2509 = !DILocation(line: 483, column: 11, scope: !2503, inlinedAt: !2471)
!2510 = !DILocation(line: 330, column: 17, scope: !2507, inlinedAt: !2509)
!2511 = !DILocalVariable(name: "x", scope: !2507, file: !2, line: 331, type: !3, align: 4)
!2512 = !DILocation(line: 331, column: 7, scope: !2507, inlinedAt: !2509)
!2513 = !DILocalVariable(name: "rp", scope: !2507, file: !2, line: 332, type: !346, align: 8)
!2514 = !DILocation(line: 332, column: 7, scope: !2507, inlinedAt: !2509)
!2515 = !DILocalVariable(name: "dc", scope: !2507, file: !2, line: 333, type: !346, align: 8)
!2516 = !DILocation(line: 333, column: 7, scope: !2507, inlinedAt: !2509)
!2517 = !DILocalVariable(name: "c", scope: !2507, file: !2, line: 334, type: !65, align: 1)
!2518 = !DILocation(line: 334, column: 7, scope: !2507, inlinedAt: !2509)
!2519 = !DILocalVariable(name: "got_rad", scope: !2507, file: !2, line: 335, type: !146, align: 1)
!2520 = !DILocation(line: 335, column: 7, scope: !2507, inlinedAt: !2509)
!2521 = !DILocalVariable(name: "got_digit", scope: !2507, file: !2, line: 336, type: !146, align: 1)
!2522 = !DILocation(line: 336, column: 7, scope: !2507, inlinedAt: !2509)
!2523 = !DILocalVariable(name: "got_tail", scope: !2507, file: !2, line: 337, type: !146, align: 1)
!2524 = !DILocation(line: 337, column: 7, scope: !2507, inlinedAt: !2509)
!2525 = !DILocalVariable(name: "len", scope: !2507, file: !2, line: 338, type: !67, align: 8)
!2526 = !DILocation(line: 338, column: 6, scope: !2507, inlinedAt: !2509)
!2527 = !DILocation(line: 338, column: 12, scope: !2507, inlinedAt: !2509)
!2528 = !DILocalVariable(name: "last_char", scope: !2507, file: !2, line: 339, type: !67, align: 8)
!2529 = !DILocation(line: 339, column: 6, scope: !2507, inlinedAt: !2509)
!2530 = !DILocation(line: 339, column: 18, scope: !2507, inlinedAt: !2509)
!2531 = !DILocalVariable(name: "index", scope: !2507, file: !2, line: 340, type: !67, align: 8)
!2532 = !DILocation(line: 340, column: 6, scope: !2507, inlinedAt: !2509)
!2533 = !DILocalVariable(name: "y", scope: !2507, file: !2, line: 341, type: !2465, align: 8)
!2534 = !DILocation(line: 341, column: 9, scope: !2507, inlinedAt: !2509)
!2535 = !DILocation(line: 344, column: 2, scope: !2507, inlinedAt: !2509)
!2536 = !DILocation(line: 344, column: 14, scope: !2537, inlinedAt: !2509)
!2537 = distinct !DILexicalBlock(scope: !2507, file: !41, line: 344, column: 2)
!2538 = !DILocation(line: 344, column: 20, scope: !2537, inlinedAt: !2509)
!2539 = !DILocation(line: 344, column: 10, scope: !2537, inlinedAt: !2509)
!2540 = !DILocation(line: 346, column: 7, scope: !2541, inlinedAt: !2509)
!2541 = distinct !DILexicalBlock(scope: !2537, file: !41, line: 345, column: 2)
!2542 = !DILocation(line: 346, column: 16, scope: !2541, inlinedAt: !2509)
!2543 = !DILocation(line: 346, column: 34, scope: !2541, inlinedAt: !2509)
!2544 = !DILocation(line: 347, column: 3, scope: !2541, inlinedAt: !2509)
!2545 = !DILocation(line: 349, column: 6, scope: !2507, inlinedAt: !2509)
!2546 = !DILocation(line: 351, column: 13, scope: !2547, inlinedAt: !2509)
!2547 = distinct !DILexicalBlock(scope: !2507, file: !41, line: 350, column: 2)
!2548 = !DILocation(line: 352, column: 7, scope: !2547, inlinedAt: !2509)
!2549 = !DILocation(line: 352, column: 16, scope: !2547, inlinedAt: !2509)
!2550 = !DILocation(line: 354, column: 9, scope: !2551, inlinedAt: !2509)
!2551 = distinct !DILexicalBlock(scope: !2547, file: !41, line: 353, column: 3)
!2552 = !DILocation(line: 354, column: 27, scope: !2551, inlinedAt: !2509)
!2553 = !DILocation(line: 355, column: 11, scope: !2551, inlinedAt: !2509)
!2554 = !DILocation(line: 357, column: 7, scope: !2547, inlinedAt: !2509)
!2555 = !DILocation(line: 357, column: 16, scope: !2547, inlinedAt: !2509)
!2556 = !DILocation(line: 357, column: 34, scope: !2547, inlinedAt: !2509)
!2557 = !DILocation(line: 357, column: 42, scope: !2547, inlinedAt: !2509)
!2558 = !DILocation(line: 357, column: 40, scope: !2547, inlinedAt: !2509)
!2559 = !DILocation(line: 357, column: 30, scope: !2547, inlinedAt: !2509)
!2560 = !DILocation(line: 359, column: 4, scope: !2561, inlinedAt: !2509)
!2561 = distinct !DILexicalBlock(scope: !2547, file: !41, line: 358, column: 3)
!2562 = !DILocation(line: 360, column: 16, scope: !2561, inlinedAt: !2509)
!2563 = !DILocation(line: 361, column: 4, scope: !2561, inlinedAt: !2509)
!2564 = !DILocation(line: 361, column: 11, scope: !2565, inlinedAt: !2509)
!2565 = distinct !DILexicalBlock(scope: !2561, file: !41, line: 361, column: 4)
!2566 = !DILocation(line: 361, column: 24, scope: !2565, inlinedAt: !2509)
!2567 = !DILocation(line: 361, column: 38, scope: !2565, inlinedAt: !2509)
!2568 = !DILocation(line: 361, column: 46, scope: !2565, inlinedAt: !2509)
!2569 = !DILocation(line: 361, column: 44, scope: !2565, inlinedAt: !2509)
!2570 = !DILocation(line: 361, column: 34, scope: !2565, inlinedAt: !2509)
!2571 = !DILocation(line: 363, column: 5, scope: !2572, inlinedAt: !2509)
!2572 = distinct !DILexicalBlock(scope: !2565, file: !41, line: 362, column: 4)
!2573 = !DILocation(line: 368, column: 2, scope: !2507, inlinedAt: !2509)
!2574 = !DILocation(line: 368, column: 10, scope: !2575, inlinedAt: !2509)
!2575 = distinct !DILexicalBlock(scope: !2507, file: !41, line: 368, column: 2)
!2576 = !DILocation(line: 368, column: 30, scope: !2575, inlinedAt: !2509)
!2577 = !DILocation(line: 368, column: 53, scope: !2575, inlinedAt: !2509)
!2578 = !DILocation(line: 370, column: 7, scope: !2579, inlinedAt: !2509)
!2579 = distinct !DILexicalBlock(scope: !2575, file: !41, line: 369, column: 2)
!2580 = !DILocation(line: 372, column: 8, scope: !2581, inlinedAt: !2509)
!2581 = distinct !DILexicalBlock(scope: !2579, file: !41, line: 371, column: 3)
!2582 = !DILocation(line: 372, column: 24, scope: !2581, inlinedAt: !2509)
!2583 = !DILocation(line: 373, column: 14, scope: !2581, inlinedAt: !2509)
!2584 = !DILocation(line: 374, column: 9, scope: !2581, inlinedAt: !2509)
!2585 = !DILocation(line: 378, column: 16, scope: !2586, inlinedAt: !2509)
!2586 = distinct !DILexicalBlock(scope: !2579, file: !41, line: 377, column: 3)
!2587 = !DILocalVariable(name: "d", scope: !2586, file: !2, line: 379, type: !18, align: 4)
!2588 = !DILocation(line: 379, column: 8, scope: !2586, inlinedAt: !2509)
!2589 = !DILocation(line: 380, column: 9, scope: !2590, inlinedAt: !2509)
!2590 = distinct !DILexicalBlock(scope: !2586, file: !41, line: 380, column: 5)
!2591 = !DILocation(line: 380, column: 26, scope: !2590, inlinedAt: !2509)
!2592 = !DILocation(line: 381, column: 12, scope: !2590, inlinedAt: !2509)
!2593 = !DILocation(line: 385, column: 10, scope: !2594, inlinedAt: !2509)
!2594 = distinct !DILexicalBlock(scope: !2586, file: !41, line: 383, column: 4)
!2595 = !DILocation(line: 386, column: 10, scope: !2596, inlinedAt: !2509)
!2596 = distinct !DILexicalBlock(scope: !2594, file: !41, line: 386, column: 6)
!2597 = !DILocation(line: 386, column: 19, scope: !2596, inlinedAt: !2509)
!2598 = !DILocation(line: 387, column: 10, scope: !2594, inlinedAt: !2509)
!2599 = !DILocation(line: 388, column: 6, scope: !2600, inlinedAt: !2509)
!2600 = distinct !DILexicalBlock(scope: !2594, file: !41, line: 388, column: 6)
!2601 = !DILocation(line: 388, column: 11, scope: !2600, inlinedAt: !2509)
!2602 = !DILocation(line: 388, column: 16, scope: !2600, inlinedAt: !2509)
!2603 = !DILocation(line: 389, column: 17, scope: !2600, inlinedAt: !2509)
!2604 = !DILocation(line: 390, column: 10, scope: !2594, inlinedAt: !2509)
!2605 = !DILocation(line: 390, column: 16, scope: !2594, inlinedAt: !2509)
!2606 = !DILocation(line: 391, column: 6, scope: !2607, inlinedAt: !2509)
!2607 = distinct !DILexicalBlock(scope: !2594, file: !41, line: 391, column: 6)
!2608 = !DILocation(line: 391, column: 17, scope: !2607, inlinedAt: !2509)
!2609 = !DILocation(line: 391, column: 11, scope: !2607, inlinedAt: !2509)
!2610 = !DILocation(line: 392, column: 17, scope: !2607, inlinedAt: !2509)
!2611 = !DILocation(line: 394, column: 4, scope: !2586, inlinedAt: !2509)
!2612 = !DILocation(line: 396, column: 7, scope: !2579, inlinedAt: !2509)
!2613 = !DILocation(line: 396, column: 16, scope: !2579, inlinedAt: !2509)
!2614 = !DILocation(line: 396, column: 27, scope: !2579, inlinedAt: !2509)
!2615 = !DILocation(line: 397, column: 7, scope: !2579, inlinedAt: !2509)
!2616 = !DILocation(line: 397, column: 15, scope: !2579, inlinedAt: !2509)
!2617 = !DILocation(line: 397, column: 13, scope: !2579, inlinedAt: !2509)
!2618 = !DILocation(line: 399, column: 7, scope: !2507, inlinedAt: !2509)
!2619 = !DILocation(line: 399, column: 25, scope: !2507, inlinedAt: !2509)
!2620 = !DILocation(line: 400, column: 7, scope: !2507, inlinedAt: !2509)
!2621 = !DILocation(line: 400, column: 21, scope: !2507, inlinedAt: !2509)
!2622 = !DILocation(line: 401, column: 2, scope: !2507, inlinedAt: !2509)
!2623 = !DILocation(line: 401, column: 9, scope: !2624, inlinedAt: !2509)
!2624 = distinct !DILexicalBlock(scope: !2507, file: !41, line: 401, column: 2)
!2625 = !DILocation(line: 401, column: 23, scope: !2624, inlinedAt: !2509)
!2626 = !DILocation(line: 401, column: 17, scope: !2624, inlinedAt: !2509)
!2627 = !DILocalVariable(name: "e2", scope: !2507, file: !2, line: 403, type: !346, align: 8)
!2628 = !DILocation(line: 403, column: 7, scope: !2507, inlinedAt: !2509)
!2629 = !DILocation(line: 404, column: 7, scope: !2507, inlinedAt: !2509)
!2630 = !DILocalVariable(name: "e2val", scope: !2631, file: !2, line: 406, type: !346, align: 8)
!2631 = distinct !DILexicalBlock(scope: !2507, file: !41, line: 405, column: 2)
!2632 = !DILocation(line: 406, column: 8, scope: !2631, inlinedAt: !2509)
!2633 = !DILocation(line: 406, column: 39, scope: !2631, inlinedAt: !2509)
!2634 = !DILocation(line: 406, column: 45, scope: !2631, inlinedAt: !2509)
!2635 = !DILocation(line: 406, column: 32, scope: !2631, inlinedAt: !2509)
!2636 = !DILocation(line: 406, column: 16, scope: !2631, inlinedAt: !2509)
!2637 = !DILocation(line: 406, column: 63, scope: !2631, inlinedAt: !2509)
!2638 = !DILocation(line: 407, column: 8, scope: !2631, inlinedAt: !2509)
!2639 = !DILocation(line: 409, column: 2, scope: !2507, inlinedAt: !2509)
!2640 = !DILocation(line: 409, column: 12, scope: !2507, inlinedAt: !2509)
!2641 = !DILocation(line: 409, column: 8, scope: !2507, inlinedAt: !2509)
!2642 = !DILocation(line: 410, column: 6, scope: !2507, inlinedAt: !2509)
!2643 = !DILocation(line: 410, column: 17, scope: !2507, inlinedAt: !2509)
!2644 = !DILocation(line: 411, column: 6, scope: !2507, inlinedAt: !2509)
!2645 = !DILocation(line: 411, column: 26, scope: !2507, inlinedAt: !2509)
!2646 = !DILocation(line: 412, column: 6, scope: !2507, inlinedAt: !2509)
!2647 = !DILocation(line: 412, column: 53, scope: !2507, inlinedAt: !2509)
!2648 = !DILocation(line: 414, column: 2, scope: !2507, inlinedAt: !2509)
!2649 = !DILocation(line: 414, column: 9, scope: !2650, inlinedAt: !2509)
!2650 = distinct !DILexicalBlock(scope: !2507, file: !41, line: 414, column: 2)
!2651 = !DILocation(line: 416, column: 7, scope: !2652, inlinedAt: !2509)
!2652 = distinct !DILexicalBlock(scope: !2650, file: !41, line: 415, column: 2)
!2653 = !DILocation(line: 418, column: 4, scope: !2654, inlinedAt: !2509)
!2654 = distinct !DILexicalBlock(scope: !2652, file: !41, line: 417, column: 3)
!2655 = !DILocation(line: 418, column: 9, scope: !2654, inlinedAt: !2509)
!2656 = !DILocation(line: 419, column: 4, scope: !2654, inlinedAt: !2509)
!2657 = !DILocation(line: 419, column: 9, scope: !2654, inlinedAt: !2509)
!2658 = !DILocation(line: 423, column: 4, scope: !2659, inlinedAt: !2509)
!2659 = distinct !DILexicalBlock(scope: !2652, file: !41, line: 422, column: 3)
!2660 = !DILocation(line: 423, column: 9, scope: !2659, inlinedAt: !2509)
!2661 = !DILocation(line: 424, column: 4, scope: !2659, inlinedAt: !2509)
!2662 = !DILocation(line: 424, column: 9, scope: !2659, inlinedAt: !2509)
!2663 = !DILocation(line: 426, column: 3, scope: !2652, inlinedAt: !2509)
!2664 = !DILocalVariable(name: "bits", scope: !2507, file: !2, line: 428, type: !18, align: 4)
!2665 = !DILocation(line: 428, column: 6, scope: !2507, inlinedAt: !2509)
!2666 = !DILocation(line: 428, column: 13, scope: !2507, inlinedAt: !2509)
!2667 = !DILocation(line: 429, column: 19, scope: !2507, inlinedAt: !2509)
!2668 = !DILocation(line: 429, column: 14, scope: !2507, inlinedAt: !2509)
!2669 = !DILocation(line: 429, column: 6, scope: !2507, inlinedAt: !2509)
!2670 = !DILocation(line: 431, column: 21, scope: !2671, inlinedAt: !2509)
!2671 = distinct !DILexicalBlock(scope: !2507, file: !41, line: 430, column: 2)
!2672 = !DILocation(line: 431, column: 16, scope: !2671, inlinedAt: !2509)
!2673 = !DILocation(line: 431, column: 11, scope: !2671, inlinedAt: !2509)
!2674 = !DILocation(line: 432, column: 7, scope: !2671, inlinedAt: !2509)
!2675 = !DILocation(line: 432, column: 24, scope: !2671, inlinedAt: !2509)
!2676 = !DILocalVariable(name: "bias", scope: !2507, file: !2, line: 434, type: !2465, align: 8)
!2677 = !DILocation(line: 434, column: 9, scope: !2507, inlinedAt: !2509)
!2678 = !DILocation(line: 435, column: 6, scope: !2507, inlinedAt: !2509)
!2679 = !DILocation(line: 437, column: 70, scope: !2680, inlinedAt: !2509)
!2680 = distinct !DILexicalBlock(scope: !2507, file: !41, line: 436, column: 2)
!2681 = !DILocation(line: 437, column: 41, scope: !2680, inlinedAt: !2509)
!2682 = !DILocation(line: 1061, column: 52, scope: !2683, inlinedAt: !2685)
!2683 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2684, file: !2684, line: 1061, scopeLine: 1061, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!2684 = !DIFile(filename: "math.c3", directory: "/usr/local/lib/c3/std/math")
!2685 = !DILocation(line: 437, column: 25, scope: !2680, inlinedAt: !2509)
!2686 = !DILocation(line: 1061, column: 41, scope: !2683, inlinedAt: !2685)
!2687 = !DILocation(line: 437, column: 82, scope: !2680, inlinedAt: !2509)
!2688 = !DILocation(line: 61, column: 10, scope: !2689, inlinedAt: !2691)
!2689 = distinct !DISubprogram(name: "promote_int_same", linkageName: "promote_int_same", scope: !2690, file: !2690, line: 49, scopeLine: 49, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!2690 = !DIFile(filename: "values.c3", directory: "/usr/local/lib/c3/std/core")
!2691 = !DILocation(line: 310, column: 40, scope: !2692, inlinedAt: !2693)
!2692 = distinct !DISubprogram(name: "copysign", linkageName: "copysign", scope: !2684, file: !2684, line: 310, scopeLine: 310, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!2693 = !DILocation(line: 437, column: 10, scope: !2680, inlinedAt: !2509)
!2694 = !DILocation(line: 310, column: 77, scope: !2692, inlinedAt: !2693)
!2695 = !DILocation(line: 440, column: 6, scope: !2507, inlinedAt: !2509)
!2696 = !DILocation(line: 440, column: 19, scope: !2507, inlinedAt: !2509)
!2697 = !DILocation(line: 440, column: 26, scope: !2507, inlinedAt: !2509)
!2698 = !DILocation(line: 440, column: 24, scope: !2507, inlinedAt: !2509)
!2699 = !DILocation(line: 442, column: 3, scope: !2700, inlinedAt: !2509)
!2700 = distinct !DILexicalBlock(scope: !2507, file: !41, line: 441, column: 2)
!2701 = !DILocation(line: 443, column: 7, scope: !2700, inlinedAt: !2509)
!2702 = !DILocation(line: 445, column: 6, scope: !2507, inlinedAt: !2509)
!2703 = !DILocation(line: 445, column: 13, scope: !2507, inlinedAt: !2509)
!2704 = !DILocation(line: 445, column: 21, scope: !2507, inlinedAt: !2509)
!2705 = !DILocation(line: 445, column: 32, scope: !2507, inlinedAt: !2509)
!2706 = !DILocation(line: 445, column: 39, scope: !2507, inlinedAt: !2509)
!2707 = !DILocation(line: 446, column: 2, scope: !2507, inlinedAt: !2509)
!2708 = !DILocation(line: 446, column: 7, scope: !2507, inlinedAt: !2509)
!2709 = !DILocation(line: 447, column: 7, scope: !2507, inlinedAt: !2509)
!2710 = !DILocation(line: 447, column: 17, scope: !2507, inlinedAt: !2509)
!2711 = !DILocation(line: 449, column: 26, scope: !2507, inlinedAt: !2509)
!2712 = !DILocation(line: 1061, column: 52, scope: !2713, inlinedAt: !2714)
!2713 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2684, file: !2684, line: 1061, scopeLine: 1061, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!2714 = !DILocation(line: 449, column: 9, scope: !2507, inlinedAt: !2509)
!2715 = !DILocation(line: 1061, column: 41, scope: !2713, inlinedAt: !2714)
!2716 = !DILocation(line: 35, column: 11, scope: !2717, inlinedAt: !2719)
!2717 = distinct !DILexicalBlock(scope: !2718, file: !41, line: 38, column: 1)
!2718 = distinct !DISubprogram(name: "decfloat", linkageName: "decfloat", scope: !41, file: !41, line: 37, scopeLine: 37, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !69)
!2719 = !DILocation(line: 485, column: 10, scope: !2469, inlinedAt: !2471)
!2720 = !DILocalVariable(name: "x", scope: !2718, file: !2, line: 39, type: !2721, align: 16)
!2721 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3, size: 4096, align: 32, elements: !2722)
!2722 = !{!2723}
!2723 = !DISubrange(count: 128, lowerBound: 0)
!2724 = !DILocation(line: 39, column: 13, scope: !2718, inlinedAt: !2719)
!2725 = !DILocalVariable(name: "emax", scope: !2718, file: !2, line: 41, type: !18, align: 4)
!2726 = !DILocation(line: 41, column: 6, scope: !2718, inlinedAt: !2719)
!2727 = !DILocation(line: 41, column: 13, scope: !2718, inlinedAt: !2719)
!2728 = !DILocalVariable(name: "index", scope: !2718, file: !2, line: 44, type: !67, align: 8)
!2729 = !DILocation(line: 44, column: 6, scope: !2718, inlinedAt: !2719)
!2730 = !DILocalVariable(name: "got_digit", scope: !2718, file: !2, line: 45, type: !146, align: 1)
!2731 = !DILocation(line: 45, column: 7, scope: !2718, inlinedAt: !2719)
!2732 = !DILocation(line: 45, column: 19, scope: !2718, inlinedAt: !2719)
!2733 = !DILocation(line: 45, column: 25, scope: !2718, inlinedAt: !2719)
!2734 = !DILocalVariable(name: "got_rad", scope: !2718, file: !2, line: 46, type: !146, align: 1)
!2735 = !DILocation(line: 46, column: 7, scope: !2718, inlinedAt: !2719)
!2736 = !DILocalVariable(name: "lrp", scope: !2718, file: !2, line: 47, type: !346, align: 8)
!2737 = !DILocation(line: 47, column: 7, scope: !2718, inlinedAt: !2719)
!2738 = !DILocalVariable(name: "dc", scope: !2718, file: !2, line: 47, type: !346, align: 8)
!2739 = !DILocation(line: 47, column: 12, scope: !2718, inlinedAt: !2719)
!2740 = !DILocalVariable(name: "k", scope: !2718, file: !2, line: 48, type: !18, align: 4)
!2741 = !DILocation(line: 48, column: 6, scope: !2718, inlinedAt: !2719)
!2742 = !DILocalVariable(name: "j", scope: !2718, file: !2, line: 48, type: !18, align: 4)
!2743 = !DILocation(line: 48, column: 9, scope: !2718, inlinedAt: !2719)
!2744 = !DILocalVariable(name: "lnz", scope: !2718, file: !2, line: 48, type: !18, align: 4)
!2745 = !DILocation(line: 48, column: 12, scope: !2718, inlinedAt: !2719)
!2746 = !DILocalVariable(name: "len", scope: !2718, file: !2, line: 49, type: !67, align: 8)
!2747 = !DILocation(line: 49, column: 6, scope: !2718, inlinedAt: !2719)
!2748 = !DILocation(line: 49, column: 12, scope: !2718, inlinedAt: !2719)
!2749 = !DILocalVariable(name: "last_char", scope: !2718, file: !2, line: 50, type: !67, align: 8)
!2750 = !DILocation(line: 50, column: 6, scope: !2718, inlinedAt: !2719)
!2751 = !DILocation(line: 50, column: 18, scope: !2718, inlinedAt: !2719)
!2752 = !DILocation(line: 52, column: 9, scope: !2718, inlinedAt: !2719)
!2753 = !DILocalVariable(name: "c", scope: !2718, file: !2, line: 54, type: !65, align: 1)
!2754 = !DILocation(line: 54, column: 7, scope: !2718, inlinedAt: !2719)
!2755 = !DILocation(line: 56, column: 2, scope: !2718, inlinedAt: !2719)
!2756 = !DILocation(line: 56, column: 14, scope: !2757, inlinedAt: !2719)
!2757 = distinct !DILexicalBlock(scope: !2718, file: !41, line: 56, column: 2)
!2758 = !DILocation(line: 56, column: 20, scope: !2757, inlinedAt: !2719)
!2759 = !DILocation(line: 56, column: 10, scope: !2757, inlinedAt: !2719)
!2760 = !DILocation(line: 58, column: 7, scope: !2761, inlinedAt: !2719)
!2761 = distinct !DILexicalBlock(scope: !2757, file: !41, line: 57, column: 2)
!2762 = !DILocation(line: 58, column: 16, scope: !2761, inlinedAt: !2719)
!2763 = !DILocation(line: 58, column: 34, scope: !2761, inlinedAt: !2719)
!2764 = !DILocation(line: 59, column: 3, scope: !2761, inlinedAt: !2719)
!2765 = !DILocation(line: 62, column: 6, scope: !2718, inlinedAt: !2719)
!2766 = !DILocation(line: 64, column: 13, scope: !2767, inlinedAt: !2719)
!2767 = distinct !DILexicalBlock(scope: !2718, file: !41, line: 63, column: 2)
!2768 = !DILocation(line: 65, column: 7, scope: !2767, inlinedAt: !2719)
!2769 = !DILocation(line: 65, column: 16, scope: !2767, inlinedAt: !2719)
!2770 = !DILocation(line: 67, column: 9, scope: !2771, inlinedAt: !2719)
!2771 = distinct !DILexicalBlock(scope: !2767, file: !41, line: 66, column: 3)
!2772 = !DILocation(line: 67, column: 27, scope: !2771, inlinedAt: !2719)
!2773 = !DILocation(line: 68, column: 11, scope: !2771, inlinedAt: !2719)
!2774 = !DILocation(line: 70, column: 7, scope: !2767, inlinedAt: !2719)
!2775 = !DILocation(line: 70, column: 16, scope: !2767, inlinedAt: !2719)
!2776 = !DILocation(line: 70, column: 34, scope: !2767, inlinedAt: !2719)
!2777 = !DILocation(line: 70, column: 42, scope: !2767, inlinedAt: !2719)
!2778 = !DILocation(line: 70, column: 40, scope: !2767, inlinedAt: !2719)
!2779 = !DILocation(line: 70, column: 30, scope: !2767, inlinedAt: !2719)
!2780 = !DILocation(line: 72, column: 4, scope: !2781, inlinedAt: !2719)
!2781 = distinct !DILexicalBlock(scope: !2767, file: !41, line: 71, column: 3)
!2782 = !DILocation(line: 73, column: 16, scope: !2781, inlinedAt: !2719)
!2783 = !DILocation(line: 74, column: 4, scope: !2781, inlinedAt: !2719)
!2784 = !DILocation(line: 74, column: 11, scope: !2785, inlinedAt: !2719)
!2785 = distinct !DILexicalBlock(scope: !2781, file: !41, line: 74, column: 4)
!2786 = !DILocation(line: 74, column: 24, scope: !2785, inlinedAt: !2719)
!2787 = !DILocation(line: 74, column: 38, scope: !2785, inlinedAt: !2719)
!2788 = !DILocation(line: 74, column: 46, scope: !2785, inlinedAt: !2719)
!2789 = !DILocation(line: 74, column: 44, scope: !2785, inlinedAt: !2719)
!2790 = !DILocation(line: 74, column: 34, scope: !2785, inlinedAt: !2719)
!2791 = !DILocation(line: 76, column: 5, scope: !2792, inlinedAt: !2719)
!2792 = distinct !DILexicalBlock(scope: !2785, file: !41, line: 75, column: 4)
!2793 = !DILocation(line: 81, column: 2, scope: !2718, inlinedAt: !2719)
!2794 = !DILocation(line: 81, column: 9, scope: !2795, inlinedAt: !2719)
!2795 = distinct !DILexicalBlock(scope: !2718, file: !41, line: 81, column: 2)
!2796 = !DILocation(line: 81, column: 26, scope: !2795, inlinedAt: !2719)
!2797 = !DILocation(line: 85, column: 9, scope: !2798, inlinedAt: !2719)
!2798 = distinct !DILexicalBlock(scope: !2799, file: !41, line: 83, column: 3)
!2799 = distinct !DILexicalBlock(scope: !2795, file: !41, line: 82, column: 2)
!2800 = !DILocation(line: 86, column: 9, scope: !2801, inlinedAt: !2719)
!2801 = distinct !DILexicalBlock(scope: !2798, file: !41, line: 86, column: 5)
!2802 = !DILocation(line: 86, column: 25, scope: !2801, inlinedAt: !2719)
!2803 = !DILocation(line: 87, column: 15, scope: !2801, inlinedAt: !2719)
!2804 = !DILocation(line: 88, column: 11, scope: !2801, inlinedAt: !2719)
!2805 = !DILocation(line: 89, column: 9, scope: !2798, inlinedAt: !2719)
!2806 = !DILocation(line: 90, column: 5, scope: !2807, inlinedAt: !2719)
!2807 = distinct !DILexicalBlock(scope: !2798, file: !41, line: 90, column: 5)
!2808 = !DILocation(line: 91, column: 9, scope: !2807, inlinedAt: !2719)
!2809 = !DILocation(line: 91, column: 26, scope: !2807, inlinedAt: !2719)
!2810 = !DILocation(line: 92, column: 9, scope: !2807, inlinedAt: !2719)
!2811 = !DILocation(line: 94, column: 8, scope: !2812, inlinedAt: !2719)
!2812 = distinct !DILexicalBlock(scope: !2807, file: !41, line: 93, column: 5)
!2813 = !DILocation(line: 94, column: 15, scope: !2812, inlinedAt: !2719)
!2814 = !DILocation(line: 94, column: 13, scope: !2812, inlinedAt: !2719)
!2815 = !DILocation(line: 94, column: 25, scope: !2812, inlinedAt: !2719)
!2816 = !DILocation(line: 98, column: 8, scope: !2817, inlinedAt: !2719)
!2817 = distinct !DILexicalBlock(scope: !2807, file: !41, line: 97, column: 5)
!2818 = !DILocation(line: 98, column: 13, scope: !2817, inlinedAt: !2719)
!2819 = !DILocation(line: 100, column: 11, scope: !2807, inlinedAt: !2719)
!2820 = !DILocation(line: 100, column: 9, scope: !2807, inlinedAt: !2719)
!2821 = !DILocation(line: 102, column: 6, scope: !2822, inlinedAt: !2719)
!2822 = distinct !DILexicalBlock(scope: !2807, file: !41, line: 101, column: 5)
!2823 = !DILocation(line: 103, column: 10, scope: !2822, inlinedAt: !2719)
!2824 = !DILocation(line: 105, column: 17, scope: !2807, inlinedAt: !2719)
!2825 = !DILocation(line: 107, column: 5, scope: !2826, inlinedAt: !2719)
!2826 = distinct !DILexicalBlock(scope: !2798, file: !41, line: 107, column: 5)
!2827 = !DILocation(line: 108, column: 9, scope: !2826, inlinedAt: !2719)
!2828 = !DILocation(line: 108, column: 21, scope: !2826, inlinedAt: !2719)
!2829 = !DILocation(line: 108, column: 19, scope: !2826, inlinedAt: !2719)
!2830 = !DILocation(line: 111, column: 7, scope: !2799, inlinedAt: !2719)
!2831 = !DILocation(line: 111, column: 16, scope: !2799, inlinedAt: !2719)
!2832 = !DILocation(line: 111, column: 27, scope: !2799, inlinedAt: !2719)
!2833 = !DILocation(line: 112, column: 10, scope: !2799, inlinedAt: !2719)
!2834 = !DILocation(line: 112, column: 18, scope: !2799, inlinedAt: !2719)
!2835 = !DILocation(line: 113, column: 7, scope: !2799, inlinedAt: !2719)
!2836 = !DILocation(line: 113, column: 15, scope: !2799, inlinedAt: !2719)
!2837 = !DILocation(line: 113, column: 13, scope: !2799, inlinedAt: !2719)
!2838 = !DILocation(line: 115, column: 7, scope: !2718, inlinedAt: !2719)
!2839 = !DILocation(line: 115, column: 22, scope: !2718, inlinedAt: !2719)
!2840 = !DILocation(line: 116, column: 7, scope: !2718, inlinedAt: !2719)
!2841 = !DILocation(line: 116, column: 25, scope: !2718, inlinedAt: !2719)
!2842 = !DILocation(line: 117, column: 7, scope: !2718, inlinedAt: !2719)
!2843 = !DILocation(line: 119, column: 7, scope: !2844, inlinedAt: !2719)
!2844 = distinct !DILexicalBlock(scope: !2718, file: !41, line: 118, column: 2)
!2845 = !DILocation(line: 119, column: 20, scope: !2844, inlinedAt: !2719)
!2846 = !DILocation(line: 119, column: 34, scope: !2844, inlinedAt: !2719)
!2847 = !DILocalVariable(name: "e10", scope: !2844, file: !2, line: 120, type: !346, align: 8)
!2848 = !DILocation(line: 120, column: 8, scope: !2844, inlinedAt: !2719)
!2849 = !DILocation(line: 120, column: 37, scope: !2844, inlinedAt: !2719)
!2850 = !DILocation(line: 120, column: 43, scope: !2844, inlinedAt: !2719)
!2851 = !DILocation(line: 120, column: 30, scope: !2844, inlinedAt: !2719)
!2852 = !DILocation(line: 120, column: 14, scope: !2844, inlinedAt: !2719)
!2853 = !DILocation(line: 120, column: 60, scope: !2844, inlinedAt: !2719)
!2854 = !DILocation(line: 121, column: 3, scope: !2844, inlinedAt: !2719)
!2855 = !DILocation(line: 121, column: 10, scope: !2844, inlinedAt: !2719)
!2856 = !DILocation(line: 123, column: 11, scope: !2718, inlinedAt: !2719)
!2857 = !DILocation(line: 123, column: 20, scope: !2718, inlinedAt: !2719)
!2858 = !DILocation(line: 125, column: 10, scope: !2859, inlinedAt: !2719)
!2859 = distinct !DILexicalBlock(scope: !2718, file: !41, line: 124, column: 2)
!2860 = !DILocation(line: 128, column: 9, scope: !2718, inlinedAt: !2719)
!2861 = !DILocation(line: 128, column: 20, scope: !2718, inlinedAt: !2719)
!2862 = !DILocation(line: 131, column: 6, scope: !2718, inlinedAt: !2719)
!2863 = !DILocation(line: 131, column: 13, scope: !2718, inlinedAt: !2719)
!2864 = !DILocation(line: 131, column: 19, scope: !2718, inlinedAt: !2719)
!2865 = !DILocation(line: 131, column: 31, scope: !2718, inlinedAt: !2719)
!2866 = !DILocation(line: 131, column: 54, scope: !2718, inlinedAt: !2719)
!2867 = !DILocation(line: 131, column: 46, scope: !2718, inlinedAt: !2719)
!2868 = !DILocation(line: 131, column: 80, scope: !2718, inlinedAt: !2719)
!2869 = !DILocation(line: 131, column: 97, scope: !2718, inlinedAt: !2719)
!2870 = !DILocation(line: 132, column: 6, scope: !2718, inlinedAt: !2719)
!2871 = !DILocation(line: 132, column: 32, scope: !2718, inlinedAt: !2719)
!2872 = !DILocation(line: 133, column: 6, scope: !2718, inlinedAt: !2719)
!2873 = !DILocation(line: 133, column: 54, scope: !2718, inlinedAt: !2719)
!2874 = !DILocation(line: 136, column: 6, scope: !2718, inlinedAt: !2719)
!2875 = !DILocation(line: 138, column: 3, scope: !2876, inlinedAt: !2719)
!2876 = distinct !DILexicalBlock(scope: !2718, file: !41, line: 137, column: 2)
!2877 = !DILocation(line: 138, column: 10, scope: !2878, inlinedAt: !2719)
!2878 = distinct !DILexicalBlock(scope: !2876, file: !41, line: 138, column: 3)
!2879 = !DILocation(line: 138, column: 24, scope: !2878, inlinedAt: !2719)
!2880 = !DILocation(line: 138, column: 22, scope: !2878, inlinedAt: !2719)
!2881 = !DILocation(line: 138, column: 17, scope: !2878, inlinedAt: !2719)
!2882 = !DILocation(line: 139, column: 3, scope: !2876, inlinedAt: !2719)
!2883 = !DILocation(line: 140, column: 7, scope: !2876, inlinedAt: !2719)
!2884 = !DILocalVariable(name: "a", scope: !2718, file: !2, line: 143, type: !18, align: 4)
!2885 = !DILocation(line: 143, column: 6, scope: !2718, inlinedAt: !2719)
!2886 = !DILocalVariable(name: "z", scope: !2718, file: !2, line: 144, type: !18, align: 4)
!2887 = !DILocation(line: 144, column: 6, scope: !2718, inlinedAt: !2719)
!2888 = !DILocation(line: 144, column: 10, scope: !2718, inlinedAt: !2719)
!2889 = !DILocalVariable(name: "e2", scope: !2718, file: !2, line: 145, type: !18, align: 4)
!2890 = !DILocation(line: 145, column: 6, scope: !2718, inlinedAt: !2719)
!2891 = !DILocalVariable(name: "rp", scope: !2718, file: !2, line: 146, type: !346, align: 8)
!2892 = !DILocation(line: 146, column: 7, scope: !2718, inlinedAt: !2719)
!2893 = !DILocation(line: 146, column: 12, scope: !2718, inlinedAt: !2719)
!2894 = !DILocation(line: 149, column: 6, scope: !2718, inlinedAt: !2719)
!2895 = !DILocation(line: 149, column: 17, scope: !2718, inlinedAt: !2719)
!2896 = !DILocation(line: 149, column: 24, scope: !2718, inlinedAt: !2719)
!2897 = !DILocation(line: 149, column: 30, scope: !2718, inlinedAt: !2719)
!2898 = !DILocation(line: 151, column: 7, scope: !2899, inlinedAt: !2719)
!2899 = distinct !DILexicalBlock(scope: !2718, file: !41, line: 150, column: 2)
!2900 = !DILocation(line: 151, column: 23, scope: !2899, inlinedAt: !2719)
!2901 = !DILocation(line: 151, column: 40, scope: !2899, inlinedAt: !2719)
!2902 = !DILocation(line: 152, column: 7, scope: !2899, inlinedAt: !2719)
!2903 = !DILocation(line: 152, column: 22, scope: !2899, inlinedAt: !2719)
!2904 = !DILocation(line: 152, column: 39, scope: !2899, inlinedAt: !2719)
!2905 = !DILocation(line: 152, column: 53, scope: !2899, inlinedAt: !2719)
!2906 = !DILocation(line: 152, column: 49, scope: !2899, inlinedAt: !2719)
!2907 = !DILocalVariable(name: "bitlim", scope: !2899, file: !2, line: 153, type: !18, align: 4)
!2908 = !DILocation(line: 153, column: 7, scope: !2899, inlinedAt: !2719)
!2909 = !DILocation(line: 153, column: 34, scope: !2899, inlinedAt: !2719)
!2910 = !DILocation(line: 153, column: 29, scope: !2899, inlinedAt: !2719)
!2911 = !DILocation(line: 153, column: 24, scope: !2899, inlinedAt: !2719)
!2912 = !DILocation(line: 153, column: 16, scope: !2899, inlinedAt: !2719)
!2913 = !DILocation(line: 154, column: 7, scope: !2899, inlinedAt: !2719)
!2914 = !DILocation(line: 154, column: 24, scope: !2899, inlinedAt: !2719)
!2915 = !DILocation(line: 154, column: 30, scope: !2899, inlinedAt: !2719)
!2916 = !DILocation(line: 154, column: 22, scope: !2899, inlinedAt: !2719)
!2917 = !DILocation(line: 154, column: 50, scope: !2899, inlinedAt: !2719)
!2918 = !DILocation(line: 154, column: 67, scope: !2899, inlinedAt: !2719)
!2919 = !DILocation(line: 154, column: 77, scope: !2899, inlinedAt: !2719)
!2920 = !DILocation(line: 158, column: 6, scope: !2718, inlinedAt: !2719)
!2921 = !DILocalVariable(name: "rpm9", scope: !2922, file: !2, line: 160, type: !346, align: 8)
!2922 = distinct !DILexicalBlock(scope: !2718, file: !41, line: 159, column: 2)
!2923 = !DILocation(line: 160, column: 8, scope: !2922, inlinedAt: !2719)
!2924 = !DILocation(line: 160, column: 15, scope: !2922, inlinedAt: !2719)
!2925 = !DILocation(line: 160, column: 25, scope: !2922, inlinedAt: !2719)
!2926 = !DILocation(line: 160, column: 34, scope: !2922, inlinedAt: !2719)
!2927 = !DILocalVariable(name: "p10", scope: !2922, file: !2, line: 161, type: !18, align: 4)
!2928 = !DILocation(line: 161, column: 7, scope: !2922, inlinedAt: !2719)
!2929 = !DILocation(line: 161, column: 22, scope: !2922, inlinedAt: !2719)
!2930 = !DILocation(line: 161, column: 18, scope: !2922, inlinedAt: !2719)
!2931 = !DILocalVariable(name: "carry", scope: !2922, file: !2, line: 162, type: !3, align: 4)
!2932 = !DILocation(line: 162, column: 8, scope: !2922, inlinedAt: !2719)
!2933 = !DILocation(line: 162, column: 16, scope: !2922, inlinedAt: !2719)
!2934 = !DILocation(line: 163, column: 12, scope: !2935, inlinedAt: !2719)
!2935 = distinct !DILexicalBlock(scope: !2922, file: !41, line: 163, column: 3)
!2936 = !DILocation(line: 163, column: 15, scope: !2935, inlinedAt: !2719)
!2937 = !DILocation(line: 163, column: 20, scope: !2935, inlinedAt: !2719)
!2938 = !DILocalVariable(name: "tmp", scope: !2939, file: !2, line: 165, type: !3, align: 4)
!2939 = distinct !DILexicalBlock(scope: !2935, file: !41, line: 164, column: 3)
!2940 = !DILocation(line: 165, column: 9, scope: !2939, inlinedAt: !2719)
!2941 = !DILocation(line: 165, column: 17, scope: !2939, inlinedAt: !2719)
!2942 = !DILocation(line: 165, column: 22, scope: !2939, inlinedAt: !2719)
!2943 = !DILocation(line: 165, column: 15, scope: !2939, inlinedAt: !2719)
!2944 = !DILocation(line: 166, column: 6, scope: !2939, inlinedAt: !2719)
!2945 = !DILocation(line: 166, column: 13, scope: !2939, inlinedAt: !2719)
!2946 = !DILocation(line: 166, column: 18, scope: !2939, inlinedAt: !2719)
!2947 = !DILocation(line: 166, column: 11, scope: !2939, inlinedAt: !2719)
!2948 = !DILocation(line: 166, column: 24, scope: !2939, inlinedAt: !2719)
!2949 = !DILocation(line: 167, column: 25, scope: !2939, inlinedAt: !2719)
!2950 = !DILocation(line: 167, column: 12, scope: !2939, inlinedAt: !2719)
!2951 = !DILocation(line: 167, column: 31, scope: !2939, inlinedAt: !2719)
!2952 = !DILocation(line: 168, column: 8, scope: !2939, inlinedAt: !2719)
!2953 = !DILocation(line: 168, column: 13, scope: !2939, inlinedAt: !2719)
!2954 = !DILocation(line: 168, column: 21, scope: !2939, inlinedAt: !2719)
!2955 = !DILocation(line: 170, column: 10, scope: !2956, inlinedAt: !2719)
!2956 = distinct !DILexicalBlock(scope: !2939, file: !41, line: 169, column: 4)
!2957 = !DILocation(line: 171, column: 5, scope: !2956, inlinedAt: !2719)
!2958 = !DILocation(line: 163, column: 23, scope: !2935, inlinedAt: !2719)
!2959 = !DILocation(line: 174, column: 7, scope: !2922, inlinedAt: !2719)
!2960 = !DILocation(line: 174, column: 16, scope: !2922, inlinedAt: !2719)
!2961 = !DILocation(line: 174, column: 23, scope: !2922, inlinedAt: !2719)
!2962 = !DILocation(line: 175, column: 3, scope: !2922, inlinedAt: !2719)
!2963 = !DILocation(line: 175, column: 13, scope: !2922, inlinedAt: !2719)
!2964 = !DILocation(line: 175, column: 9, scope: !2922, inlinedAt: !2719)
!2965 = !DILocation(line: 179, column: 2, scope: !2718, inlinedAt: !2719)
!2966 = !DILocation(line: 179, column: 9, scope: !2967, inlinedAt: !2719)
!2967 = distinct !DILexicalBlock(scope: !2718, file: !41, line: 179, column: 2)
!2968 = !DILocation(line: 179, column: 30, scope: !2967, inlinedAt: !2719)
!2969 = !DILocation(line: 179, column: 53, scope: !2967, inlinedAt: !2719)
!2970 = !DILocation(line: 179, column: 51, scope: !2967, inlinedAt: !2719)
!2971 = !DILocalVariable(name: "carry", scope: !2972, file: !2, line: 181, type: !3, align: 4)
!2972 = distinct !DILexicalBlock(scope: !2967, file: !41, line: 180, column: 2)
!2973 = !DILocation(line: 181, column: 8, scope: !2972, inlinedAt: !2719)
!2974 = !DILocation(line: 181, column: 16, scope: !2972, inlinedAt: !2719)
!2975 = !DILocation(line: 182, column: 3, scope: !2972, inlinedAt: !2719)
!2976 = !DILocation(line: 183, column: 13, scope: !2977, inlinedAt: !2719)
!2977 = distinct !DILexicalBlock(scope: !2972, file: !41, line: 183, column: 3)
!2978 = !DILocalVariable(name: "tmp", scope: !2979, file: !2, line: 185, type: !68, align: 8)
!2979 = distinct !DILexicalBlock(scope: !2977, file: !41, line: 184, column: 3)
!2980 = !DILocation(line: 185, column: 10, scope: !2979, inlinedAt: !2719)
!2981 = !DILocation(line: 185, column: 25, scope: !2979, inlinedAt: !2719)
!2982 = !DILocation(line: 185, column: 17, scope: !2979, inlinedAt: !2719)
!2983 = !DILocation(line: 185, column: 36, scope: !2979, inlinedAt: !2719)
!2984 = !DILocation(line: 186, column: 8, scope: !2979, inlinedAt: !2719)
!2985 = !DILocation(line: 188, column: 20, scope: !2986, inlinedAt: !2719)
!2986 = distinct !DILexicalBlock(scope: !2979, file: !41, line: 187, column: 4)
!2987 = !DILocation(line: 188, column: 14, scope: !2986, inlinedAt: !2719)
!2988 = !DILocation(line: 189, column: 7, scope: !2986, inlinedAt: !2719)
!2989 = !DILocation(line: 189, column: 19, scope: !2986, inlinedAt: !2719)
!2990 = !DILocation(line: 189, column: 13, scope: !2986, inlinedAt: !2719)
!2991 = !DILocation(line: 193, column: 13, scope: !2992, inlinedAt: !2719)
!2992 = distinct !DILexicalBlock(scope: !2979, file: !41, line: 192, column: 4)
!2993 = !DILocation(line: 194, column: 7, scope: !2992, inlinedAt: !2719)
!2994 = !DILocation(line: 194, column: 13, scope: !2992, inlinedAt: !2719)
!2995 = !DILocation(line: 196, column: 8, scope: !2979, inlinedAt: !2719)
!2996 = !DILocation(line: 196, column: 14, scope: !2979, inlinedAt: !2719)
!2997 = !DILocation(line: 196, column: 31, scope: !2979, inlinedAt: !2719)
!2998 = !DILocation(line: 196, column: 36, scope: !2979, inlinedAt: !2719)
!2999 = !DILocation(line: 196, column: 44, scope: !2979, inlinedAt: !2719)
!3000 = !DILocation(line: 196, column: 52, scope: !2979, inlinedAt: !2719)
!3001 = !DILocation(line: 197, column: 8, scope: !2979, inlinedAt: !2719)
!3002 = !DILocation(line: 197, column: 13, scope: !2979, inlinedAt: !2719)
!3003 = !DILocation(line: 197, column: 16, scope: !2979, inlinedAt: !2719)
!3004 = !DILocation(line: 183, column: 35, scope: !2977, inlinedAt: !2719)
!3005 = !DILocation(line: 199, column: 7, scope: !2972, inlinedAt: !2719)
!3006 = !DILocation(line: 201, column: 4, scope: !3007, inlinedAt: !2719)
!3007 = distinct !DILexicalBlock(scope: !2972, file: !41, line: 200, column: 3)
!3008 = !DILocation(line: 202, column: 9, scope: !3007, inlinedAt: !2719)
!3009 = !DILocation(line: 203, column: 8, scope: !3007, inlinedAt: !2719)
!3010 = !DILocation(line: 203, column: 13, scope: !3007, inlinedAt: !2719)
!3011 = !DILocation(line: 205, column: 10, scope: !3012, inlinedAt: !2719)
!3012 = distinct !DILexicalBlock(scope: !3007, file: !41, line: 204, column: 4)
!3013 = !DILocation(line: 206, column: 8, scope: !3012, inlinedAt: !2719)
!3014 = !DILocation(line: 206, column: 28, scope: !3012, inlinedAt: !2719)
!3015 = !DILocation(line: 206, column: 5, scope: !3012, inlinedAt: !2719)
!3016 = !DILocation(line: 208, column: 6, scope: !3007, inlinedAt: !2719)
!3017 = !DILocation(line: 208, column: 11, scope: !3007, inlinedAt: !2719)
!3018 = !DILocation(line: 213, column: 2, scope: !2718, inlinedAt: !2719)
!3019 = !DILocalVariable(name: "carry", scope: !3020, file: !2, line: 215, type: !3, align: 4)
!3020 = distinct !DILexicalBlock(scope: !3021, file: !41, line: 214, column: 2)
!3021 = distinct !DILexicalBlock(scope: !2718, file: !41, line: 213, column: 2)
!3022 = !DILocation(line: 215, column: 8, scope: !3020, inlinedAt: !2719)
!3023 = !DILocation(line: 215, column: 16, scope: !3020, inlinedAt: !2719)
!3024 = !DILocalVariable(name: "sh", scope: !3020, file: !2, line: 216, type: !18, align: 4)
!3025 = !DILocation(line: 216, column: 7, scope: !3020, inlinedAt: !2719)
!3026 = !DILocation(line: 216, column: 12, scope: !3020, inlinedAt: !2719)
!3027 = !DILocalVariable(name: "i", scope: !3020, file: !2, line: 217, type: !18, align: 4)
!3028 = !DILocation(line: 217, column: 7, scope: !3020, inlinedAt: !2719)
!3029 = !DILocation(line: 218, column: 12, scope: !3030, inlinedAt: !2719)
!3030 = distinct !DILexicalBlock(scope: !3020, file: !41, line: 218, column: 3)
!3031 = !DILocation(line: 218, column: 15, scope: !3030, inlinedAt: !2719)
!3032 = !DILocation(line: 220, column: 9, scope: !3033, inlinedAt: !2719)
!3033 = distinct !DILexicalBlock(scope: !3030, file: !41, line: 219, column: 3)
!3034 = !DILocation(line: 220, column: 13, scope: !3033, inlinedAt: !2719)
!3035 = !DILocation(line: 221, column: 8, scope: !3033, inlinedAt: !2719)
!3036 = !DILocation(line: 221, column: 13, scope: !3033, inlinedAt: !2719)
!3037 = !DILocation(line: 221, column: 20, scope: !3033, inlinedAt: !2719)
!3038 = !DILocation(line: 221, column: 28, scope: !3033, inlinedAt: !2719)
!3039 = !DILocation(line: 221, column: 18, scope: !3033, inlinedAt: !2719)
!3040 = !DILocation(line: 223, column: 9, scope: !3041, inlinedAt: !2719)
!3041 = distinct !DILexicalBlock(scope: !3033, file: !41, line: 222, column: 4)
!3042 = !DILocation(line: 224, column: 5, scope: !3041, inlinedAt: !2719)
!3043 = !DILocation(line: 226, column: 11, scope: !3033, inlinedAt: !2719)
!3044 = !DILocation(line: 226, column: 15, scope: !3033, inlinedAt: !2719)
!3045 = !DILocation(line: 226, column: 31, scope: !3033, inlinedAt: !2719)
!3046 = !DILocation(line: 226, column: 8, scope: !3033, inlinedAt: !2719)
!3047 = !DILocation(line: 226, column: 35, scope: !3033, inlinedAt: !2719)
!3048 = !DILocation(line: 218, column: 28, scope: !3030, inlinedAt: !2719)
!3049 = !DILocation(line: 228, column: 7, scope: !3020, inlinedAt: !2719)
!3050 = !DILocation(line: 228, column: 23, scope: !3020, inlinedAt: !2719)
!3051 = !DILocation(line: 228, column: 42, scope: !3020, inlinedAt: !2719)
!3052 = !DILocation(line: 229, column: 7, scope: !3020, inlinedAt: !2719)
!3053 = !DILocation(line: 229, column: 34, scope: !3020, inlinedAt: !2719)
!3054 = !DILocation(line: 230, column: 3, scope: !3020, inlinedAt: !2719)
!3055 = !DILocation(line: 230, column: 9, scope: !3020, inlinedAt: !2719)
!3056 = !DILocation(line: 231, column: 12, scope: !3057, inlinedAt: !2719)
!3057 = distinct !DILexicalBlock(scope: !3020, file: !41, line: 231, column: 3)
!3058 = !DILocation(line: 231, column: 15, scope: !3057, inlinedAt: !2719)
!3059 = !DILocation(line: 231, column: 20, scope: !3057, inlinedAt: !2719)
!3060 = !DILocalVariable(name: "tmp", scope: !3061, file: !2, line: 233, type: !3, align: 4)
!3061 = distinct !DILexicalBlock(scope: !3057, file: !41, line: 232, column: 3)
!3062 = !DILocation(line: 233, column: 9, scope: !3061, inlinedAt: !2719)
!3063 = !DILocation(line: 233, column: 17, scope: !3061, inlinedAt: !2719)
!3064 = !DILocation(line: 233, column: 28, scope: !3061, inlinedAt: !2719)
!3065 = !DILocation(line: 233, column: 23, scope: !3061, inlinedAt: !2719)
!3066 = !DILocation(line: 233, column: 15, scope: !3061, inlinedAt: !2719)
!3067 = !DILocation(line: 234, column: 6, scope: !3061, inlinedAt: !2719)
!3068 = !DILocation(line: 234, column: 13, scope: !3061, inlinedAt: !2719)
!3069 = !DILocation(line: 234, column: 19, scope: !3061, inlinedAt: !2719)
!3070 = !DILocation(line: 234, column: 11, scope: !3061, inlinedAt: !2719)
!3071 = !DILocation(line: 234, column: 24, scope: !3061, inlinedAt: !2719)
!3072 = !DILocation(line: 235, column: 27, scope: !3061, inlinedAt: !2719)
!3073 = !DILocation(line: 235, column: 13, scope: !3061, inlinedAt: !2719)
!3074 = !DILocation(line: 235, column: 33, scope: !3061, inlinedAt: !2719)
!3075 = !DILocation(line: 236, column: 8, scope: !3061, inlinedAt: !2719)
!3076 = !DILocation(line: 236, column: 13, scope: !3061, inlinedAt: !2719)
!3077 = !DILocation(line: 236, column: 21, scope: !3061, inlinedAt: !2719)
!3078 = !DILocation(line: 238, column: 10, scope: !3079, inlinedAt: !2719)
!3079 = distinct !DILexicalBlock(scope: !3061, file: !41, line: 237, column: 4)
!3080 = !DILocation(line: 239, column: 5, scope: !3079, inlinedAt: !2719)
!3081 = !DILocation(line: 240, column: 5, scope: !3079, inlinedAt: !2719)
!3082 = !DILocation(line: 231, column: 28, scope: !3057, inlinedAt: !2719)
!3083 = !DILocation(line: 243, column: 7, scope: !3020, inlinedAt: !2719)
!3084 = !DILocation(line: 245, column: 9, scope: !3085, inlinedAt: !2719)
!3085 = distinct !DILexicalBlock(scope: !3020, file: !41, line: 244, column: 3)
!3086 = !DILocation(line: 245, column: 26, scope: !3085, inlinedAt: !2719)
!3087 = !DILocation(line: 247, column: 7, scope: !3088, inlinedAt: !2719)
!3088 = distinct !DILexicalBlock(scope: !3085, file: !41, line: 246, column: 4)
!3089 = !DILocation(line: 247, column: 12, scope: !3088, inlinedAt: !2719)
!3090 = !DILocation(line: 248, column: 10, scope: !3088, inlinedAt: !2719)
!3091 = !DILocation(line: 252, column: 8, scope: !3092, inlinedAt: !2719)
!3092 = distinct !DILexicalBlock(scope: !3085, file: !41, line: 251, column: 4)
!3093 = !DILocation(line: 252, column: 5, scope: !3092, inlinedAt: !2719)
!3094 = !DILocalVariable(name: "y", scope: !2718, file: !2, line: 258, type: !2465, align: 8)
!3095 = !DILocation(line: 258, column: 9, scope: !2718, inlinedAt: !2719)
!3096 = !DILocalVariable(name: "i", scope: !2718, file: !2, line: 259, type: !18, align: 4)
!3097 = !DILocation(line: 259, column: 6, scope: !2718, inlinedAt: !2719)
!3098 = !DILocation(line: 260, column: 11, scope: !3099, inlinedAt: !2719)
!3099 = distinct !DILexicalBlock(scope: !2718, file: !41, line: 260, column: 2)
!3100 = !DILocation(line: 260, column: 14, scope: !3099, inlinedAt: !2719)
!3101 = !DILocation(line: 262, column: 8, scope: !3102, inlinedAt: !2719)
!3102 = distinct !DILexicalBlock(scope: !3099, file: !41, line: 261, column: 2)
!3103 = !DILocation(line: 262, column: 12, scope: !3102, inlinedAt: !2719)
!3104 = !DILocation(line: 262, column: 25, scope: !3102, inlinedAt: !2719)
!3105 = !DILocation(line: 262, column: 36, scope: !3102, inlinedAt: !2719)
!3106 = !DILocation(line: 262, column: 31, scope: !3102, inlinedAt: !2719)
!3107 = !DILocation(line: 262, column: 58, scope: !3102, inlinedAt: !2719)
!3108 = !DILocation(line: 263, column: 22, scope: !3102, inlinedAt: !2719)
!3109 = !DILocation(line: 263, column: 7, scope: !3102, inlinedAt: !2719)
!3110 = !DILocation(line: 263, column: 29, scope: !3102, inlinedAt: !2719)
!3111 = !DILocation(line: 263, column: 33, scope: !3102, inlinedAt: !2719)
!3112 = !DILocation(line: 260, column: 27, scope: !3099, inlinedAt: !2719)
!3113 = !DILocation(line: 266, column: 2, scope: !2718, inlinedAt: !2719)
!3114 = !DILocation(line: 266, column: 7, scope: !2718, inlinedAt: !2719)
!3115 = !DILocalVariable(name: "denormal", scope: !2718, file: !2, line: 268, type: !146, align: 1)
!3116 = !DILocation(line: 268, column: 7, scope: !2718, inlinedAt: !2719)
!3117 = !DILocalVariable(name: "bits", scope: !2718, file: !2, line: 270, type: !3, align: 4)
!3118 = !DILocation(line: 270, column: 7, scope: !2718, inlinedAt: !2719)
!3119 = !DILocation(line: 270, column: 14, scope: !2718, inlinedAt: !2719)
!3120 = !DILocation(line: 271, column: 6, scope: !2718, inlinedAt: !2719)
!3121 = !DILocation(line: 271, column: 37, scope: !2718, inlinedAt: !2719)
!3122 = !DILocation(line: 271, column: 13, scope: !2718, inlinedAt: !2719)
!3123 = !DILocation(line: 273, column: 34, scope: !3124, inlinedAt: !2719)
!3124 = distinct !DILexicalBlock(scope: !2718, file: !41, line: 272, column: 2)
!3125 = !DILocation(line: 273, column: 10, scope: !3124, inlinedAt: !2719)
!3126 = !DILocation(line: 274, column: 7, scope: !3124, inlinedAt: !2719)
!3127 = !DILocation(line: 274, column: 24, scope: !3124, inlinedAt: !2719)
!3128 = !DILocation(line: 275, column: 14, scope: !3124, inlinedAt: !2719)
!3129 = !DILocalVariable(name: "bias", scope: !2718, file: !2, line: 279, type: !2465, align: 8)
!3130 = !DILocation(line: 279, column: 9, scope: !2718, inlinedAt: !2719)
!3131 = !DILocalVariable(name: "frac", scope: !2718, file: !2, line: 280, type: !2465, align: 8)
!3132 = !DILocation(line: 280, column: 9, scope: !2718, inlinedAt: !2719)
!3133 = !DILocation(line: 281, column: 6, scope: !2718, inlinedAt: !2719)
!3134 = !DILocation(line: 283, column: 69, scope: !3135, inlinedAt: !2719)
!3135 = distinct !DILexicalBlock(scope: !2718, file: !41, line: 282, column: 2)
!3136 = !DILocation(line: 283, column: 41, scope: !3135, inlinedAt: !2719)
!3137 = !DILocation(line: 1061, column: 52, scope: !3138, inlinedAt: !3139)
!3138 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2684, file: !2684, line: 1061, scopeLine: 1061, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!3139 = !DILocation(line: 283, column: 25, scope: !3135, inlinedAt: !2719)
!3140 = !DILocation(line: 1061, column: 41, scope: !3138, inlinedAt: !3139)
!3141 = !DILocation(line: 61, column: 10, scope: !3142, inlinedAt: !3143)
!3142 = distinct !DISubprogram(name: "promote_int_same", linkageName: "promote_int_same", scope: !2690, file: !2690, line: 49, scopeLine: 49, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!3143 = !DILocation(line: 310, column: 40, scope: !3144, inlinedAt: !3145)
!3144 = distinct !DISubprogram(name: "copysign", linkageName: "copysign", scope: !2684, file: !2684, line: 310, scopeLine: 310, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!3145 = !DILocation(line: 283, column: 10, scope: !3135, inlinedAt: !2719)
!3146 = !DILocation(line: 310, column: 77, scope: !3144, inlinedAt: !3145)
!3147 = !DILocation(line: 284, column: 10, scope: !3135, inlinedAt: !2719)
!3148 = !DILocation(line: 284, column: 54, scope: !3135, inlinedAt: !2719)
!3149 = !DILocation(line: 284, column: 30, scope: !3135, inlinedAt: !2719)
!3150 = !DILocation(line: 1061, column: 52, scope: !3151, inlinedAt: !3152)
!3151 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2684, file: !2684, line: 1061, scopeLine: 1061, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!3152 = !DILocation(line: 284, column: 14, scope: !3135, inlinedAt: !2719)
!3153 = !DILocation(line: 1061, column: 41, scope: !3151, inlinedAt: !3152)
!3154 = !DILocation(line: 285, column: 3, scope: !3135, inlinedAt: !2719)
!3155 = !DILocation(line: 285, column: 8, scope: !3135, inlinedAt: !2719)
!3156 = !DILocation(line: 286, column: 3, scope: !3135, inlinedAt: !2719)
!3157 = !DILocation(line: 286, column: 8, scope: !3135, inlinedAt: !2719)
!3158 = !DILocation(line: 290, column: 7, scope: !2718, inlinedAt: !2719)
!3159 = !DILocation(line: 290, column: 11, scope: !2718, inlinedAt: !2719)
!3160 = !DILocation(line: 290, column: 24, scope: !2718, inlinedAt: !2719)
!3161 = !DILocalVariable(name: "t", scope: !3162, file: !2, line: 292, type: !3, align: 4)
!3162 = distinct !DILexicalBlock(scope: !2718, file: !41, line: 291, column: 2)
!3163 = !DILocation(line: 292, column: 8, scope: !3162, inlinedAt: !2719)
!3164 = !DILocation(line: 292, column: 15, scope: !3162, inlinedAt: !2719)
!3165 = !DILocation(line: 292, column: 19, scope: !3162, inlinedAt: !2719)
!3166 = !DILocation(line: 295, column: 9, scope: !3167, inlinedAt: !2719)
!3167 = distinct !DILexicalBlock(scope: !3162, file: !41, line: 293, column: 3)
!3168 = !DILocation(line: 295, column: 27, scope: !3167, inlinedAt: !2719)
!3169 = !DILocation(line: 295, column: 33, scope: !3167, inlinedAt: !2719)
!3170 = !DILocation(line: 295, column: 37, scope: !3167, inlinedAt: !2719)
!3171 = !DILocation(line: 295, column: 54, scope: !3167, inlinedAt: !2719)
!3172 = !DILocation(line: 296, column: 5, scope: !3173, inlinedAt: !2719)
!3173 = distinct !DILexicalBlock(scope: !3167, file: !41, line: 296, column: 5)
!3174 = !DILocation(line: 296, column: 20, scope: !3173, inlinedAt: !2719)
!3175 = !DILocation(line: 296, column: 13, scope: !3173, inlinedAt: !2719)
!3176 = !DILocation(line: 297, column: 9, scope: !3167, inlinedAt: !2719)
!3177 = !DILocation(line: 298, column: 5, scope: !3178, inlinedAt: !2719)
!3178 = distinct !DILexicalBlock(scope: !3167, file: !41, line: 298, column: 5)
!3179 = !DILocation(line: 298, column: 20, scope: !3178, inlinedAt: !2719)
!3180 = !DILocation(line: 298, column: 13, scope: !3178, inlinedAt: !2719)
!3181 = !DILocation(line: 299, column: 9, scope: !3167, inlinedAt: !2719)
!3182 = !DILocation(line: 300, column: 10, scope: !3183, inlinedAt: !2719)
!3183 = distinct !DILexicalBlock(scope: !3167, file: !41, line: 300, column: 5)
!3184 = !DILocation(line: 300, column: 14, scope: !3183, inlinedAt: !2719)
!3185 = !DILocation(line: 300, column: 31, scope: !3183, inlinedAt: !2719)
!3186 = !DILocation(line: 302, column: 6, scope: !3187, inlinedAt: !2719)
!3187 = distinct !DILexicalBlock(scope: !3183, file: !41, line: 301, column: 5)
!3188 = !DILocation(line: 302, column: 20, scope: !3187, inlinedAt: !2719)
!3189 = !DILocation(line: 302, column: 14, scope: !3187, inlinedAt: !2719)
!3190 = !DILocation(line: 306, column: 6, scope: !3191, inlinedAt: !2719)
!3191 = distinct !DILexicalBlock(scope: !3183, file: !41, line: 305, column: 5)
!3192 = !DILocation(line: 306, column: 21, scope: !3191, inlinedAt: !2719)
!3193 = !DILocation(line: 306, column: 14, scope: !3191, inlinedAt: !2719)
!3194 = !DILocation(line: 309, column: 31, scope: !3162, inlinedAt: !2719)
!3195 = !DILocation(line: 309, column: 7, scope: !3162, inlinedAt: !2719)
!3196 = !DILocation(line: 309, column: 46, scope: !3162, inlinedAt: !2719)
!3197 = !DILocation(line: 309, column: 57, scope: !3162, inlinedAt: !2719)
!3198 = !DILocation(line: 312, column: 2, scope: !2718, inlinedAt: !2719)
!3199 = !DILocation(line: 312, column: 7, scope: !2718, inlinedAt: !2719)
!3200 = !DILocation(line: 313, column: 2, scope: !2718, inlinedAt: !2719)
!3201 = !DILocation(line: 313, column: 7, scope: !2718, inlinedAt: !2719)
!3202 = !DILocation(line: 315, column: 8, scope: !2718, inlinedAt: !2719)
!3203 = !DILocation(line: 315, column: 49, scope: !2718, inlinedAt: !2719)
!3204 = !DILocation(line: 132, column: 23, scope: !3205, inlinedAt: !3206)
!3205 = distinct !DISubprogram(name: "abs", linkageName: "abs", scope: !2684, file: !2684, line: 132, scopeLine: 132, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!3206 = !DILocation(line: 317, column: 7, scope: !3207, inlinedAt: !2719)
!3207 = distinct !DILexicalBlock(scope: !2718, file: !41, line: 316, column: 2)
!3208 = !DILocation(line: 319, column: 8, scope: !3209, inlinedAt: !2719)
!3209 = distinct !DILexicalBlock(scope: !3207, file: !41, line: 318, column: 3)
!3210 = !DILocation(line: 319, column: 20, scope: !3209, inlinedAt: !2719)
!3211 = !DILocation(line: 319, column: 52, scope: !3209, inlinedAt: !2719)
!3212 = !DILocation(line: 319, column: 28, scope: !3209, inlinedAt: !2719)
!3213 = !DILocation(line: 319, column: 75, scope: !3209, inlinedAt: !2719)
!3214 = !DILocation(line: 320, column: 4, scope: !3209, inlinedAt: !2719)
!3215 = !DILocation(line: 321, column: 4, scope: !3209, inlinedAt: !2719)
!3216 = !DILocation(line: 323, column: 7, scope: !3207, inlinedAt: !2719)
!3217 = !DILocation(line: 323, column: 36, scope: !3207, inlinedAt: !2719)
!3218 = !DILocation(line: 323, column: 45, scope: !3207, inlinedAt: !2719)
!3219 = !DILocation(line: 323, column: 57, scope: !3207, inlinedAt: !2719)
!3220 = !DILocation(line: 323, column: 71, scope: !3207, inlinedAt: !2719)
!3221 = !DILocation(line: 1061, column: 52, scope: !3222, inlinedAt: !3223)
!3222 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2684, file: !2684, line: 1061, scopeLine: 1061, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!3223 = !DILocation(line: 325, column: 9, scope: !2718, inlinedAt: !2719)
!3224 = !DILocation(line: 1061, column: 41, scope: !3222, inlinedAt: !3223)
!3225 = distinct !DISubprogram(name: "to_float", linkageName: "std.core.String.to_float", scope: !2, file: !2, line: 820, type: !3226, scopeLine: 820, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!3226 = !DISubroutineType(types: !3227)
!3227 = !{!345, !3228, !60}
!3228 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "float*", baseType: !3229, size: 64, align: 64, dwarfAddressSpace: 0)
!3229 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!3230 = !DILocalVariable(name: "s", arg: 1, scope: !3225, file: !2, line: 820, type: !60)
!3231 = !DILocation(line: 820, column: 27, scope: !3225)
!3232 = !DILocalVariable(name: "sign", scope: !3233, file: !2, line: 454, type: !18, align: 4)
!3233 = distinct !DISubprogram(name: "to_real", linkageName: "to_real", scope: !41, file: !41, line: 452, scopeLine: 452, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !69)
!3234 = !DILocation(line: 454, column: 6, scope: !3233, inlinedAt: !3235)
!3235 = !DILocation(line: 820, column: 33, scope: !3225)
!3236 = !DILocation(line: 454, column: 13, scope: !3233, inlinedAt: !3235)
!3237 = !DILocation(line: 468, column: 2, scope: !3233, inlinedAt: !3235)
!3238 = !DILocation(line: 468, column: 9, scope: !3239, inlinedAt: !3235)
!3239 = distinct !DILexicalBlock(scope: !3233, file: !41, line: 468, column: 2)
!3240 = !DILocation(line: 468, column: 22, scope: !3239, inlinedAt: !3235)
!3241 = !DILocation(line: 468, column: 28, scope: !3239, inlinedAt: !3235)
!3242 = !DILocation(line: 468, column: 47, scope: !3239, inlinedAt: !3235)
!3243 = !DILocation(line: 468, column: 53, scope: !3239, inlinedAt: !3235)
!3244 = !DILocation(line: 469, column: 6, scope: !3233, inlinedAt: !3235)
!3245 = !DILocation(line: 469, column: 25, scope: !3233, inlinedAt: !3235)
!3246 = !DILocation(line: 470, column: 10, scope: !3247, inlinedAt: !3235)
!3247 = distinct !DILexicalBlock(scope: !3233, file: !41, line: 470, column: 2)
!3248 = !DILocation(line: 470, column: 16, scope: !3247, inlinedAt: !3235)
!3249 = !DILocation(line: 473, column: 11, scope: !3250, inlinedAt: !3235)
!3250 = distinct !DILexicalBlock(scope: !3247, file: !41, line: 473, column: 4)
!3251 = !DILocation(line: 474, column: 4, scope: !3250, inlinedAt: !3235)
!3252 = !DILocation(line: 476, column: 12, scope: !3253, inlinedAt: !3235)
!3253 = distinct !DILexicalBlock(scope: !3247, file: !41, line: 476, column: 4)
!3254 = !DILocation(line: 476, column: 18, scope: !3253, inlinedAt: !3235)
!3255 = !DILocation(line: 478, column: 6, scope: !3233, inlinedAt: !3235)
!3256 = !DILocation(line: 478, column: 29, scope: !3233, inlinedAt: !3235)
!3257 = !DILocation(line: 478, column: 57, scope: !3233, inlinedAt: !3235)
!3258 = !DILocation(line: 479, column: 6, scope: !3233, inlinedAt: !3235)
!3259 = !DILocation(line: 479, column: 24, scope: !3233, inlinedAt: !3235)
!3260 = !DILocation(line: 479, column: 47, scope: !3233, inlinedAt: !3235)
!3261 = !DILocation(line: 481, column: 6, scope: !3233, inlinedAt: !3235)
!3262 = !DILocation(line: 481, column: 23, scope: !3233, inlinedAt: !3235)
!3263 = !DILocation(line: 481, column: 29, scope: !3233, inlinedAt: !3235)
!3264 = !DILocation(line: 481, column: 43, scope: !3233, inlinedAt: !3235)
!3265 = !DILocation(line: 481, column: 49, scope: !3233, inlinedAt: !3235)
!3266 = !DILocation(line: 483, column: 34, scope: !3267, inlinedAt: !3235)
!3267 = distinct !DILexicalBlock(scope: !3233, file: !41, line: 482, column: 2)
!3268 = !DILocation(line: 483, column: 40, scope: !3267, inlinedAt: !3235)
!3269 = !DILocation(line: 483, column: 27, scope: !3267, inlinedAt: !3235)
!3270 = !DILocalVariable(name: "scale", scope: !3271, file: !2, line: 330, type: !2465, align: 8)
!3271 = distinct !DISubprogram(name: "hexfloat", linkageName: "hexfloat", scope: !41, file: !41, line: 328, scopeLine: 328, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !69)
!3272 = !DILocation(line: 330, column: 9, scope: !3271, inlinedAt: !3273)
!3273 = !DILocation(line: 483, column: 11, scope: !3267, inlinedAt: !3235)
!3274 = !DILocation(line: 330, column: 17, scope: !3271, inlinedAt: !3273)
!3275 = !DILocalVariable(name: "x", scope: !3271, file: !2, line: 331, type: !3, align: 4)
!3276 = !DILocation(line: 331, column: 7, scope: !3271, inlinedAt: !3273)
!3277 = !DILocalVariable(name: "rp", scope: !3271, file: !2, line: 332, type: !346, align: 8)
!3278 = !DILocation(line: 332, column: 7, scope: !3271, inlinedAt: !3273)
!3279 = !DILocalVariable(name: "dc", scope: !3271, file: !2, line: 333, type: !346, align: 8)
!3280 = !DILocation(line: 333, column: 7, scope: !3271, inlinedAt: !3273)
!3281 = !DILocalVariable(name: "c", scope: !3271, file: !2, line: 334, type: !65, align: 1)
!3282 = !DILocation(line: 334, column: 7, scope: !3271, inlinedAt: !3273)
!3283 = !DILocalVariable(name: "got_rad", scope: !3271, file: !2, line: 335, type: !146, align: 1)
!3284 = !DILocation(line: 335, column: 7, scope: !3271, inlinedAt: !3273)
!3285 = !DILocalVariable(name: "got_digit", scope: !3271, file: !2, line: 336, type: !146, align: 1)
!3286 = !DILocation(line: 336, column: 7, scope: !3271, inlinedAt: !3273)
!3287 = !DILocalVariable(name: "got_tail", scope: !3271, file: !2, line: 337, type: !146, align: 1)
!3288 = !DILocation(line: 337, column: 7, scope: !3271, inlinedAt: !3273)
!3289 = !DILocalVariable(name: "len", scope: !3271, file: !2, line: 338, type: !67, align: 8)
!3290 = !DILocation(line: 338, column: 6, scope: !3271, inlinedAt: !3273)
!3291 = !DILocation(line: 338, column: 12, scope: !3271, inlinedAt: !3273)
!3292 = !DILocalVariable(name: "last_char", scope: !3271, file: !2, line: 339, type: !67, align: 8)
!3293 = !DILocation(line: 339, column: 6, scope: !3271, inlinedAt: !3273)
!3294 = !DILocation(line: 339, column: 18, scope: !3271, inlinedAt: !3273)
!3295 = !DILocalVariable(name: "index", scope: !3271, file: !2, line: 340, type: !67, align: 8)
!3296 = !DILocation(line: 340, column: 6, scope: !3271, inlinedAt: !3273)
!3297 = !DILocalVariable(name: "y", scope: !3271, file: !2, line: 341, type: !2465, align: 8)
!3298 = !DILocation(line: 341, column: 9, scope: !3271, inlinedAt: !3273)
!3299 = !DILocation(line: 344, column: 2, scope: !3271, inlinedAt: !3273)
!3300 = !DILocation(line: 344, column: 14, scope: !3301, inlinedAt: !3273)
!3301 = distinct !DILexicalBlock(scope: !3271, file: !41, line: 344, column: 2)
!3302 = !DILocation(line: 344, column: 20, scope: !3301, inlinedAt: !3273)
!3303 = !DILocation(line: 344, column: 10, scope: !3301, inlinedAt: !3273)
!3304 = !DILocation(line: 346, column: 7, scope: !3305, inlinedAt: !3273)
!3305 = distinct !DILexicalBlock(scope: !3301, file: !41, line: 345, column: 2)
!3306 = !DILocation(line: 346, column: 16, scope: !3305, inlinedAt: !3273)
!3307 = !DILocation(line: 346, column: 34, scope: !3305, inlinedAt: !3273)
!3308 = !DILocation(line: 347, column: 3, scope: !3305, inlinedAt: !3273)
!3309 = !DILocation(line: 349, column: 6, scope: !3271, inlinedAt: !3273)
!3310 = !DILocation(line: 351, column: 13, scope: !3311, inlinedAt: !3273)
!3311 = distinct !DILexicalBlock(scope: !3271, file: !41, line: 350, column: 2)
!3312 = !DILocation(line: 352, column: 7, scope: !3311, inlinedAt: !3273)
!3313 = !DILocation(line: 352, column: 16, scope: !3311, inlinedAt: !3273)
!3314 = !DILocation(line: 354, column: 9, scope: !3315, inlinedAt: !3273)
!3315 = distinct !DILexicalBlock(scope: !3311, file: !41, line: 353, column: 3)
!3316 = !DILocation(line: 354, column: 27, scope: !3315, inlinedAt: !3273)
!3317 = !DILocation(line: 355, column: 11, scope: !3315, inlinedAt: !3273)
!3318 = !DILocation(line: 357, column: 7, scope: !3311, inlinedAt: !3273)
!3319 = !DILocation(line: 357, column: 16, scope: !3311, inlinedAt: !3273)
!3320 = !DILocation(line: 357, column: 34, scope: !3311, inlinedAt: !3273)
!3321 = !DILocation(line: 357, column: 42, scope: !3311, inlinedAt: !3273)
!3322 = !DILocation(line: 357, column: 40, scope: !3311, inlinedAt: !3273)
!3323 = !DILocation(line: 357, column: 30, scope: !3311, inlinedAt: !3273)
!3324 = !DILocation(line: 359, column: 4, scope: !3325, inlinedAt: !3273)
!3325 = distinct !DILexicalBlock(scope: !3311, file: !41, line: 358, column: 3)
!3326 = !DILocation(line: 360, column: 16, scope: !3325, inlinedAt: !3273)
!3327 = !DILocation(line: 361, column: 4, scope: !3325, inlinedAt: !3273)
!3328 = !DILocation(line: 361, column: 11, scope: !3329, inlinedAt: !3273)
!3329 = distinct !DILexicalBlock(scope: !3325, file: !41, line: 361, column: 4)
!3330 = !DILocation(line: 361, column: 24, scope: !3329, inlinedAt: !3273)
!3331 = !DILocation(line: 361, column: 38, scope: !3329, inlinedAt: !3273)
!3332 = !DILocation(line: 361, column: 46, scope: !3329, inlinedAt: !3273)
!3333 = !DILocation(line: 361, column: 44, scope: !3329, inlinedAt: !3273)
!3334 = !DILocation(line: 361, column: 34, scope: !3329, inlinedAt: !3273)
!3335 = !DILocation(line: 363, column: 5, scope: !3336, inlinedAt: !3273)
!3336 = distinct !DILexicalBlock(scope: !3329, file: !41, line: 362, column: 4)
!3337 = !DILocation(line: 368, column: 2, scope: !3271, inlinedAt: !3273)
!3338 = !DILocation(line: 368, column: 10, scope: !3339, inlinedAt: !3273)
!3339 = distinct !DILexicalBlock(scope: !3271, file: !41, line: 368, column: 2)
!3340 = !DILocation(line: 368, column: 30, scope: !3339, inlinedAt: !3273)
!3341 = !DILocation(line: 368, column: 53, scope: !3339, inlinedAt: !3273)
!3342 = !DILocation(line: 370, column: 7, scope: !3343, inlinedAt: !3273)
!3343 = distinct !DILexicalBlock(scope: !3339, file: !41, line: 369, column: 2)
!3344 = !DILocation(line: 372, column: 8, scope: !3345, inlinedAt: !3273)
!3345 = distinct !DILexicalBlock(scope: !3343, file: !41, line: 371, column: 3)
!3346 = !DILocation(line: 372, column: 24, scope: !3345, inlinedAt: !3273)
!3347 = !DILocation(line: 373, column: 14, scope: !3345, inlinedAt: !3273)
!3348 = !DILocation(line: 374, column: 9, scope: !3345, inlinedAt: !3273)
!3349 = !DILocation(line: 378, column: 16, scope: !3350, inlinedAt: !3273)
!3350 = distinct !DILexicalBlock(scope: !3343, file: !41, line: 377, column: 3)
!3351 = !DILocalVariable(name: "d", scope: !3350, file: !2, line: 379, type: !18, align: 4)
!3352 = !DILocation(line: 379, column: 8, scope: !3350, inlinedAt: !3273)
!3353 = !DILocation(line: 380, column: 9, scope: !3354, inlinedAt: !3273)
!3354 = distinct !DILexicalBlock(scope: !3350, file: !41, line: 380, column: 5)
!3355 = !DILocation(line: 380, column: 26, scope: !3354, inlinedAt: !3273)
!3356 = !DILocation(line: 381, column: 12, scope: !3354, inlinedAt: !3273)
!3357 = !DILocation(line: 385, column: 10, scope: !3358, inlinedAt: !3273)
!3358 = distinct !DILexicalBlock(scope: !3350, file: !41, line: 383, column: 4)
!3359 = !DILocation(line: 386, column: 10, scope: !3360, inlinedAt: !3273)
!3360 = distinct !DILexicalBlock(scope: !3358, file: !41, line: 386, column: 6)
!3361 = !DILocation(line: 386, column: 19, scope: !3360, inlinedAt: !3273)
!3362 = !DILocation(line: 387, column: 10, scope: !3358, inlinedAt: !3273)
!3363 = !DILocation(line: 388, column: 6, scope: !3364, inlinedAt: !3273)
!3364 = distinct !DILexicalBlock(scope: !3358, file: !41, line: 388, column: 6)
!3365 = !DILocation(line: 388, column: 11, scope: !3364, inlinedAt: !3273)
!3366 = !DILocation(line: 388, column: 16, scope: !3364, inlinedAt: !3273)
!3367 = !DILocation(line: 389, column: 17, scope: !3364, inlinedAt: !3273)
!3368 = !DILocation(line: 390, column: 10, scope: !3358, inlinedAt: !3273)
!3369 = !DILocation(line: 390, column: 16, scope: !3358, inlinedAt: !3273)
!3370 = !DILocation(line: 391, column: 6, scope: !3371, inlinedAt: !3273)
!3371 = distinct !DILexicalBlock(scope: !3358, file: !41, line: 391, column: 6)
!3372 = !DILocation(line: 391, column: 17, scope: !3371, inlinedAt: !3273)
!3373 = !DILocation(line: 391, column: 11, scope: !3371, inlinedAt: !3273)
!3374 = !DILocation(line: 392, column: 17, scope: !3371, inlinedAt: !3273)
!3375 = !DILocation(line: 394, column: 4, scope: !3350, inlinedAt: !3273)
!3376 = !DILocation(line: 396, column: 7, scope: !3343, inlinedAt: !3273)
!3377 = !DILocation(line: 396, column: 16, scope: !3343, inlinedAt: !3273)
!3378 = !DILocation(line: 396, column: 27, scope: !3343, inlinedAt: !3273)
!3379 = !DILocation(line: 397, column: 7, scope: !3343, inlinedAt: !3273)
!3380 = !DILocation(line: 397, column: 15, scope: !3343, inlinedAt: !3273)
!3381 = !DILocation(line: 397, column: 13, scope: !3343, inlinedAt: !3273)
!3382 = !DILocation(line: 399, column: 7, scope: !3271, inlinedAt: !3273)
!3383 = !DILocation(line: 399, column: 25, scope: !3271, inlinedAt: !3273)
!3384 = !DILocation(line: 400, column: 7, scope: !3271, inlinedAt: !3273)
!3385 = !DILocation(line: 400, column: 21, scope: !3271, inlinedAt: !3273)
!3386 = !DILocation(line: 401, column: 2, scope: !3271, inlinedAt: !3273)
!3387 = !DILocation(line: 401, column: 9, scope: !3388, inlinedAt: !3273)
!3388 = distinct !DILexicalBlock(scope: !3271, file: !41, line: 401, column: 2)
!3389 = !DILocation(line: 401, column: 23, scope: !3388, inlinedAt: !3273)
!3390 = !DILocation(line: 401, column: 17, scope: !3388, inlinedAt: !3273)
!3391 = !DILocalVariable(name: "e2", scope: !3271, file: !2, line: 403, type: !346, align: 8)
!3392 = !DILocation(line: 403, column: 7, scope: !3271, inlinedAt: !3273)
!3393 = !DILocation(line: 404, column: 7, scope: !3271, inlinedAt: !3273)
!3394 = !DILocalVariable(name: "e2val", scope: !3395, file: !2, line: 406, type: !346, align: 8)
!3395 = distinct !DILexicalBlock(scope: !3271, file: !41, line: 405, column: 2)
!3396 = !DILocation(line: 406, column: 8, scope: !3395, inlinedAt: !3273)
!3397 = !DILocation(line: 406, column: 39, scope: !3395, inlinedAt: !3273)
!3398 = !DILocation(line: 406, column: 45, scope: !3395, inlinedAt: !3273)
!3399 = !DILocation(line: 406, column: 32, scope: !3395, inlinedAt: !3273)
!3400 = !DILocation(line: 406, column: 16, scope: !3395, inlinedAt: !3273)
!3401 = !DILocation(line: 406, column: 63, scope: !3395, inlinedAt: !3273)
!3402 = !DILocation(line: 407, column: 8, scope: !3395, inlinedAt: !3273)
!3403 = !DILocation(line: 409, column: 2, scope: !3271, inlinedAt: !3273)
!3404 = !DILocation(line: 409, column: 12, scope: !3271, inlinedAt: !3273)
!3405 = !DILocation(line: 409, column: 8, scope: !3271, inlinedAt: !3273)
!3406 = !DILocation(line: 410, column: 6, scope: !3271, inlinedAt: !3273)
!3407 = !DILocation(line: 410, column: 17, scope: !3271, inlinedAt: !3273)
!3408 = !DILocation(line: 411, column: 6, scope: !3271, inlinedAt: !3273)
!3409 = !DILocation(line: 411, column: 26, scope: !3271, inlinedAt: !3273)
!3410 = !DILocation(line: 412, column: 6, scope: !3271, inlinedAt: !3273)
!3411 = !DILocation(line: 412, column: 53, scope: !3271, inlinedAt: !3273)
!3412 = !DILocation(line: 414, column: 2, scope: !3271, inlinedAt: !3273)
!3413 = !DILocation(line: 414, column: 9, scope: !3414, inlinedAt: !3273)
!3414 = distinct !DILexicalBlock(scope: !3271, file: !41, line: 414, column: 2)
!3415 = !DILocation(line: 416, column: 7, scope: !3416, inlinedAt: !3273)
!3416 = distinct !DILexicalBlock(scope: !3414, file: !41, line: 415, column: 2)
!3417 = !DILocation(line: 418, column: 4, scope: !3418, inlinedAt: !3273)
!3418 = distinct !DILexicalBlock(scope: !3416, file: !41, line: 417, column: 3)
!3419 = !DILocation(line: 418, column: 9, scope: !3418, inlinedAt: !3273)
!3420 = !DILocation(line: 419, column: 4, scope: !3418, inlinedAt: !3273)
!3421 = !DILocation(line: 419, column: 9, scope: !3418, inlinedAt: !3273)
!3422 = !DILocation(line: 423, column: 4, scope: !3423, inlinedAt: !3273)
!3423 = distinct !DILexicalBlock(scope: !3416, file: !41, line: 422, column: 3)
!3424 = !DILocation(line: 423, column: 9, scope: !3423, inlinedAt: !3273)
!3425 = !DILocation(line: 424, column: 4, scope: !3423, inlinedAt: !3273)
!3426 = !DILocation(line: 424, column: 9, scope: !3423, inlinedAt: !3273)
!3427 = !DILocation(line: 426, column: 3, scope: !3416, inlinedAt: !3273)
!3428 = !DILocalVariable(name: "bits", scope: !3271, file: !2, line: 428, type: !18, align: 4)
!3429 = !DILocation(line: 428, column: 6, scope: !3271, inlinedAt: !3273)
!3430 = !DILocation(line: 428, column: 13, scope: !3271, inlinedAt: !3273)
!3431 = !DILocation(line: 429, column: 19, scope: !3271, inlinedAt: !3273)
!3432 = !DILocation(line: 429, column: 14, scope: !3271, inlinedAt: !3273)
!3433 = !DILocation(line: 429, column: 6, scope: !3271, inlinedAt: !3273)
!3434 = !DILocation(line: 431, column: 21, scope: !3435, inlinedAt: !3273)
!3435 = distinct !DILexicalBlock(scope: !3271, file: !41, line: 430, column: 2)
!3436 = !DILocation(line: 431, column: 16, scope: !3435, inlinedAt: !3273)
!3437 = !DILocation(line: 431, column: 11, scope: !3435, inlinedAt: !3273)
!3438 = !DILocation(line: 432, column: 7, scope: !3435, inlinedAt: !3273)
!3439 = !DILocation(line: 432, column: 24, scope: !3435, inlinedAt: !3273)
!3440 = !DILocalVariable(name: "bias", scope: !3271, file: !2, line: 434, type: !2465, align: 8)
!3441 = !DILocation(line: 434, column: 9, scope: !3271, inlinedAt: !3273)
!3442 = !DILocation(line: 435, column: 6, scope: !3271, inlinedAt: !3273)
!3443 = !DILocation(line: 437, column: 70, scope: !3444, inlinedAt: !3273)
!3444 = distinct !DILexicalBlock(scope: !3271, file: !41, line: 436, column: 2)
!3445 = !DILocation(line: 437, column: 41, scope: !3444, inlinedAt: !3273)
!3446 = !DILocation(line: 1061, column: 52, scope: !3447, inlinedAt: !3448)
!3447 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2684, file: !2684, line: 1061, scopeLine: 1061, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!3448 = !DILocation(line: 437, column: 25, scope: !3444, inlinedAt: !3273)
!3449 = !DILocation(line: 1061, column: 41, scope: !3447, inlinedAt: !3448)
!3450 = !DILocation(line: 437, column: 82, scope: !3444, inlinedAt: !3273)
!3451 = !DILocation(line: 61, column: 10, scope: !3452, inlinedAt: !3453)
!3452 = distinct !DISubprogram(name: "promote_int_same", linkageName: "promote_int_same", scope: !2690, file: !2690, line: 49, scopeLine: 49, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!3453 = !DILocation(line: 310, column: 40, scope: !3454, inlinedAt: !3455)
!3454 = distinct !DISubprogram(name: "copysign", linkageName: "copysign", scope: !2684, file: !2684, line: 310, scopeLine: 310, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!3455 = !DILocation(line: 437, column: 10, scope: !3444, inlinedAt: !3273)
!3456 = !DILocation(line: 310, column: 77, scope: !3454, inlinedAt: !3455)
!3457 = !DILocation(line: 440, column: 6, scope: !3271, inlinedAt: !3273)
!3458 = !DILocation(line: 440, column: 19, scope: !3271, inlinedAt: !3273)
!3459 = !DILocation(line: 440, column: 26, scope: !3271, inlinedAt: !3273)
!3460 = !DILocation(line: 440, column: 24, scope: !3271, inlinedAt: !3273)
!3461 = !DILocation(line: 442, column: 3, scope: !3462, inlinedAt: !3273)
!3462 = distinct !DILexicalBlock(scope: !3271, file: !41, line: 441, column: 2)
!3463 = !DILocation(line: 443, column: 7, scope: !3462, inlinedAt: !3273)
!3464 = !DILocation(line: 445, column: 6, scope: !3271, inlinedAt: !3273)
!3465 = !DILocation(line: 445, column: 13, scope: !3271, inlinedAt: !3273)
!3466 = !DILocation(line: 445, column: 21, scope: !3271, inlinedAt: !3273)
!3467 = !DILocation(line: 445, column: 32, scope: !3271, inlinedAt: !3273)
!3468 = !DILocation(line: 445, column: 39, scope: !3271, inlinedAt: !3273)
!3469 = !DILocation(line: 446, column: 2, scope: !3271, inlinedAt: !3273)
!3470 = !DILocation(line: 446, column: 7, scope: !3271, inlinedAt: !3273)
!3471 = !DILocation(line: 447, column: 7, scope: !3271, inlinedAt: !3273)
!3472 = !DILocation(line: 447, column: 17, scope: !3271, inlinedAt: !3273)
!3473 = !DILocation(line: 449, column: 26, scope: !3271, inlinedAt: !3273)
!3474 = !DILocation(line: 1061, column: 52, scope: !3475, inlinedAt: !3476)
!3475 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2684, file: !2684, line: 1061, scopeLine: 1061, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!3476 = !DILocation(line: 449, column: 9, scope: !3271, inlinedAt: !3273)
!3477 = !DILocation(line: 1061, column: 41, scope: !3475, inlinedAt: !3476)
!3478 = !DILocation(line: 35, column: 11, scope: !3479, inlinedAt: !3481)
!3479 = distinct !DILexicalBlock(scope: !3480, file: !41, line: 38, column: 1)
!3480 = distinct !DISubprogram(name: "decfloat", linkageName: "decfloat", scope: !41, file: !41, line: 37, scopeLine: 37, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !69)
!3481 = !DILocation(line: 485, column: 10, scope: !3233, inlinedAt: !3235)
!3482 = !DILocalVariable(name: "x", scope: !3480, file: !2, line: 39, type: !2721, align: 16)
!3483 = !DILocation(line: 39, column: 13, scope: !3480, inlinedAt: !3481)
!3484 = !DILocalVariable(name: "emax", scope: !3480, file: !2, line: 41, type: !18, align: 4)
!3485 = !DILocation(line: 41, column: 6, scope: !3480, inlinedAt: !3481)
!3486 = !DILocation(line: 41, column: 13, scope: !3480, inlinedAt: !3481)
!3487 = !DILocalVariable(name: "index", scope: !3480, file: !2, line: 44, type: !67, align: 8)
!3488 = !DILocation(line: 44, column: 6, scope: !3480, inlinedAt: !3481)
!3489 = !DILocalVariable(name: "got_digit", scope: !3480, file: !2, line: 45, type: !146, align: 1)
!3490 = !DILocation(line: 45, column: 7, scope: !3480, inlinedAt: !3481)
!3491 = !DILocation(line: 45, column: 19, scope: !3480, inlinedAt: !3481)
!3492 = !DILocation(line: 45, column: 25, scope: !3480, inlinedAt: !3481)
!3493 = !DILocalVariable(name: "got_rad", scope: !3480, file: !2, line: 46, type: !146, align: 1)
!3494 = !DILocation(line: 46, column: 7, scope: !3480, inlinedAt: !3481)
!3495 = !DILocalVariable(name: "lrp", scope: !3480, file: !2, line: 47, type: !346, align: 8)
!3496 = !DILocation(line: 47, column: 7, scope: !3480, inlinedAt: !3481)
!3497 = !DILocalVariable(name: "dc", scope: !3480, file: !2, line: 47, type: !346, align: 8)
!3498 = !DILocation(line: 47, column: 12, scope: !3480, inlinedAt: !3481)
!3499 = !DILocalVariable(name: "k", scope: !3480, file: !2, line: 48, type: !18, align: 4)
!3500 = !DILocation(line: 48, column: 6, scope: !3480, inlinedAt: !3481)
!3501 = !DILocalVariable(name: "j", scope: !3480, file: !2, line: 48, type: !18, align: 4)
!3502 = !DILocation(line: 48, column: 9, scope: !3480, inlinedAt: !3481)
!3503 = !DILocalVariable(name: "lnz", scope: !3480, file: !2, line: 48, type: !18, align: 4)
!3504 = !DILocation(line: 48, column: 12, scope: !3480, inlinedAt: !3481)
!3505 = !DILocalVariable(name: "len", scope: !3480, file: !2, line: 49, type: !67, align: 8)
!3506 = !DILocation(line: 49, column: 6, scope: !3480, inlinedAt: !3481)
!3507 = !DILocation(line: 49, column: 12, scope: !3480, inlinedAt: !3481)
!3508 = !DILocalVariable(name: "last_char", scope: !3480, file: !2, line: 50, type: !67, align: 8)
!3509 = !DILocation(line: 50, column: 6, scope: !3480, inlinedAt: !3481)
!3510 = !DILocation(line: 50, column: 18, scope: !3480, inlinedAt: !3481)
!3511 = !DILocation(line: 52, column: 9, scope: !3480, inlinedAt: !3481)
!3512 = !DILocalVariable(name: "c", scope: !3480, file: !2, line: 54, type: !65, align: 1)
!3513 = !DILocation(line: 54, column: 7, scope: !3480, inlinedAt: !3481)
!3514 = !DILocation(line: 56, column: 2, scope: !3480, inlinedAt: !3481)
!3515 = !DILocation(line: 56, column: 14, scope: !3516, inlinedAt: !3481)
!3516 = distinct !DILexicalBlock(scope: !3480, file: !41, line: 56, column: 2)
!3517 = !DILocation(line: 56, column: 20, scope: !3516, inlinedAt: !3481)
!3518 = !DILocation(line: 56, column: 10, scope: !3516, inlinedAt: !3481)
!3519 = !DILocation(line: 58, column: 7, scope: !3520, inlinedAt: !3481)
!3520 = distinct !DILexicalBlock(scope: !3516, file: !41, line: 57, column: 2)
!3521 = !DILocation(line: 58, column: 16, scope: !3520, inlinedAt: !3481)
!3522 = !DILocation(line: 58, column: 34, scope: !3520, inlinedAt: !3481)
!3523 = !DILocation(line: 59, column: 3, scope: !3520, inlinedAt: !3481)
!3524 = !DILocation(line: 62, column: 6, scope: !3480, inlinedAt: !3481)
!3525 = !DILocation(line: 64, column: 13, scope: !3526, inlinedAt: !3481)
!3526 = distinct !DILexicalBlock(scope: !3480, file: !41, line: 63, column: 2)
!3527 = !DILocation(line: 65, column: 7, scope: !3526, inlinedAt: !3481)
!3528 = !DILocation(line: 65, column: 16, scope: !3526, inlinedAt: !3481)
!3529 = !DILocation(line: 67, column: 9, scope: !3530, inlinedAt: !3481)
!3530 = distinct !DILexicalBlock(scope: !3526, file: !41, line: 66, column: 3)
!3531 = !DILocation(line: 67, column: 27, scope: !3530, inlinedAt: !3481)
!3532 = !DILocation(line: 68, column: 11, scope: !3530, inlinedAt: !3481)
!3533 = !DILocation(line: 70, column: 7, scope: !3526, inlinedAt: !3481)
!3534 = !DILocation(line: 70, column: 16, scope: !3526, inlinedAt: !3481)
!3535 = !DILocation(line: 70, column: 34, scope: !3526, inlinedAt: !3481)
!3536 = !DILocation(line: 70, column: 42, scope: !3526, inlinedAt: !3481)
!3537 = !DILocation(line: 70, column: 40, scope: !3526, inlinedAt: !3481)
!3538 = !DILocation(line: 70, column: 30, scope: !3526, inlinedAt: !3481)
!3539 = !DILocation(line: 72, column: 4, scope: !3540, inlinedAt: !3481)
!3540 = distinct !DILexicalBlock(scope: !3526, file: !41, line: 71, column: 3)
!3541 = !DILocation(line: 73, column: 16, scope: !3540, inlinedAt: !3481)
!3542 = !DILocation(line: 74, column: 4, scope: !3540, inlinedAt: !3481)
!3543 = !DILocation(line: 74, column: 11, scope: !3544, inlinedAt: !3481)
!3544 = distinct !DILexicalBlock(scope: !3540, file: !41, line: 74, column: 4)
!3545 = !DILocation(line: 74, column: 24, scope: !3544, inlinedAt: !3481)
!3546 = !DILocation(line: 74, column: 38, scope: !3544, inlinedAt: !3481)
!3547 = !DILocation(line: 74, column: 46, scope: !3544, inlinedAt: !3481)
!3548 = !DILocation(line: 74, column: 44, scope: !3544, inlinedAt: !3481)
!3549 = !DILocation(line: 74, column: 34, scope: !3544, inlinedAt: !3481)
!3550 = !DILocation(line: 76, column: 5, scope: !3551, inlinedAt: !3481)
!3551 = distinct !DILexicalBlock(scope: !3544, file: !41, line: 75, column: 4)
!3552 = !DILocation(line: 81, column: 2, scope: !3480, inlinedAt: !3481)
!3553 = !DILocation(line: 81, column: 9, scope: !3554, inlinedAt: !3481)
!3554 = distinct !DILexicalBlock(scope: !3480, file: !41, line: 81, column: 2)
!3555 = !DILocation(line: 81, column: 26, scope: !3554, inlinedAt: !3481)
!3556 = !DILocation(line: 85, column: 9, scope: !3557, inlinedAt: !3481)
!3557 = distinct !DILexicalBlock(scope: !3558, file: !41, line: 83, column: 3)
!3558 = distinct !DILexicalBlock(scope: !3554, file: !41, line: 82, column: 2)
!3559 = !DILocation(line: 86, column: 9, scope: !3560, inlinedAt: !3481)
!3560 = distinct !DILexicalBlock(scope: !3557, file: !41, line: 86, column: 5)
!3561 = !DILocation(line: 86, column: 25, scope: !3560, inlinedAt: !3481)
!3562 = !DILocation(line: 87, column: 15, scope: !3560, inlinedAt: !3481)
!3563 = !DILocation(line: 88, column: 11, scope: !3560, inlinedAt: !3481)
!3564 = !DILocation(line: 89, column: 9, scope: !3557, inlinedAt: !3481)
!3565 = !DILocation(line: 90, column: 5, scope: !3566, inlinedAt: !3481)
!3566 = distinct !DILexicalBlock(scope: !3557, file: !41, line: 90, column: 5)
!3567 = !DILocation(line: 91, column: 9, scope: !3566, inlinedAt: !3481)
!3568 = !DILocation(line: 91, column: 26, scope: !3566, inlinedAt: !3481)
!3569 = !DILocation(line: 92, column: 9, scope: !3566, inlinedAt: !3481)
!3570 = !DILocation(line: 94, column: 8, scope: !3571, inlinedAt: !3481)
!3571 = distinct !DILexicalBlock(scope: !3566, file: !41, line: 93, column: 5)
!3572 = !DILocation(line: 94, column: 15, scope: !3571, inlinedAt: !3481)
!3573 = !DILocation(line: 94, column: 13, scope: !3571, inlinedAt: !3481)
!3574 = !DILocation(line: 94, column: 25, scope: !3571, inlinedAt: !3481)
!3575 = !DILocation(line: 98, column: 8, scope: !3576, inlinedAt: !3481)
!3576 = distinct !DILexicalBlock(scope: !3566, file: !41, line: 97, column: 5)
!3577 = !DILocation(line: 98, column: 13, scope: !3576, inlinedAt: !3481)
!3578 = !DILocation(line: 100, column: 11, scope: !3566, inlinedAt: !3481)
!3579 = !DILocation(line: 100, column: 9, scope: !3566, inlinedAt: !3481)
!3580 = !DILocation(line: 102, column: 6, scope: !3581, inlinedAt: !3481)
!3581 = distinct !DILexicalBlock(scope: !3566, file: !41, line: 101, column: 5)
!3582 = !DILocation(line: 103, column: 10, scope: !3581, inlinedAt: !3481)
!3583 = !DILocation(line: 105, column: 17, scope: !3566, inlinedAt: !3481)
!3584 = !DILocation(line: 107, column: 5, scope: !3585, inlinedAt: !3481)
!3585 = distinct !DILexicalBlock(scope: !3557, file: !41, line: 107, column: 5)
!3586 = !DILocation(line: 108, column: 9, scope: !3585, inlinedAt: !3481)
!3587 = !DILocation(line: 108, column: 21, scope: !3585, inlinedAt: !3481)
!3588 = !DILocation(line: 108, column: 19, scope: !3585, inlinedAt: !3481)
!3589 = !DILocation(line: 111, column: 7, scope: !3558, inlinedAt: !3481)
!3590 = !DILocation(line: 111, column: 16, scope: !3558, inlinedAt: !3481)
!3591 = !DILocation(line: 111, column: 27, scope: !3558, inlinedAt: !3481)
!3592 = !DILocation(line: 112, column: 10, scope: !3558, inlinedAt: !3481)
!3593 = !DILocation(line: 112, column: 18, scope: !3558, inlinedAt: !3481)
!3594 = !DILocation(line: 113, column: 7, scope: !3558, inlinedAt: !3481)
!3595 = !DILocation(line: 113, column: 15, scope: !3558, inlinedAt: !3481)
!3596 = !DILocation(line: 113, column: 13, scope: !3558, inlinedAt: !3481)
!3597 = !DILocation(line: 115, column: 7, scope: !3480, inlinedAt: !3481)
!3598 = !DILocation(line: 115, column: 22, scope: !3480, inlinedAt: !3481)
!3599 = !DILocation(line: 116, column: 7, scope: !3480, inlinedAt: !3481)
!3600 = !DILocation(line: 116, column: 25, scope: !3480, inlinedAt: !3481)
!3601 = !DILocation(line: 117, column: 7, scope: !3480, inlinedAt: !3481)
!3602 = !DILocation(line: 119, column: 7, scope: !3603, inlinedAt: !3481)
!3603 = distinct !DILexicalBlock(scope: !3480, file: !41, line: 118, column: 2)
!3604 = !DILocation(line: 119, column: 20, scope: !3603, inlinedAt: !3481)
!3605 = !DILocation(line: 119, column: 34, scope: !3603, inlinedAt: !3481)
!3606 = !DILocalVariable(name: "e10", scope: !3603, file: !2, line: 120, type: !346, align: 8)
!3607 = !DILocation(line: 120, column: 8, scope: !3603, inlinedAt: !3481)
!3608 = !DILocation(line: 120, column: 37, scope: !3603, inlinedAt: !3481)
!3609 = !DILocation(line: 120, column: 43, scope: !3603, inlinedAt: !3481)
!3610 = !DILocation(line: 120, column: 30, scope: !3603, inlinedAt: !3481)
!3611 = !DILocation(line: 120, column: 14, scope: !3603, inlinedAt: !3481)
!3612 = !DILocation(line: 120, column: 60, scope: !3603, inlinedAt: !3481)
!3613 = !DILocation(line: 121, column: 3, scope: !3603, inlinedAt: !3481)
!3614 = !DILocation(line: 121, column: 10, scope: !3603, inlinedAt: !3481)
!3615 = !DILocation(line: 123, column: 11, scope: !3480, inlinedAt: !3481)
!3616 = !DILocation(line: 123, column: 20, scope: !3480, inlinedAt: !3481)
!3617 = !DILocation(line: 125, column: 10, scope: !3618, inlinedAt: !3481)
!3618 = distinct !DILexicalBlock(scope: !3480, file: !41, line: 124, column: 2)
!3619 = !DILocation(line: 128, column: 9, scope: !3480, inlinedAt: !3481)
!3620 = !DILocation(line: 128, column: 20, scope: !3480, inlinedAt: !3481)
!3621 = !DILocation(line: 131, column: 6, scope: !3480, inlinedAt: !3481)
!3622 = !DILocation(line: 131, column: 13, scope: !3480, inlinedAt: !3481)
!3623 = !DILocation(line: 131, column: 19, scope: !3480, inlinedAt: !3481)
!3624 = !DILocation(line: 131, column: 31, scope: !3480, inlinedAt: !3481)
!3625 = !DILocation(line: 131, column: 54, scope: !3480, inlinedAt: !3481)
!3626 = !DILocation(line: 131, column: 46, scope: !3480, inlinedAt: !3481)
!3627 = !DILocation(line: 131, column: 80, scope: !3480, inlinedAt: !3481)
!3628 = !DILocation(line: 131, column: 97, scope: !3480, inlinedAt: !3481)
!3629 = !DILocation(line: 132, column: 6, scope: !3480, inlinedAt: !3481)
!3630 = !DILocation(line: 132, column: 32, scope: !3480, inlinedAt: !3481)
!3631 = !DILocation(line: 133, column: 6, scope: !3480, inlinedAt: !3481)
!3632 = !DILocation(line: 133, column: 54, scope: !3480, inlinedAt: !3481)
!3633 = !DILocation(line: 136, column: 6, scope: !3480, inlinedAt: !3481)
!3634 = !DILocation(line: 138, column: 3, scope: !3635, inlinedAt: !3481)
!3635 = distinct !DILexicalBlock(scope: !3480, file: !41, line: 137, column: 2)
!3636 = !DILocation(line: 138, column: 10, scope: !3637, inlinedAt: !3481)
!3637 = distinct !DILexicalBlock(scope: !3635, file: !41, line: 138, column: 3)
!3638 = !DILocation(line: 138, column: 24, scope: !3637, inlinedAt: !3481)
!3639 = !DILocation(line: 138, column: 22, scope: !3637, inlinedAt: !3481)
!3640 = !DILocation(line: 138, column: 17, scope: !3637, inlinedAt: !3481)
!3641 = !DILocation(line: 139, column: 3, scope: !3635, inlinedAt: !3481)
!3642 = !DILocation(line: 140, column: 7, scope: !3635, inlinedAt: !3481)
!3643 = !DILocalVariable(name: "a", scope: !3480, file: !2, line: 143, type: !18, align: 4)
!3644 = !DILocation(line: 143, column: 6, scope: !3480, inlinedAt: !3481)
!3645 = !DILocalVariable(name: "z", scope: !3480, file: !2, line: 144, type: !18, align: 4)
!3646 = !DILocation(line: 144, column: 6, scope: !3480, inlinedAt: !3481)
!3647 = !DILocation(line: 144, column: 10, scope: !3480, inlinedAt: !3481)
!3648 = !DILocalVariable(name: "e2", scope: !3480, file: !2, line: 145, type: !18, align: 4)
!3649 = !DILocation(line: 145, column: 6, scope: !3480, inlinedAt: !3481)
!3650 = !DILocalVariable(name: "rp", scope: !3480, file: !2, line: 146, type: !346, align: 8)
!3651 = !DILocation(line: 146, column: 7, scope: !3480, inlinedAt: !3481)
!3652 = !DILocation(line: 146, column: 12, scope: !3480, inlinedAt: !3481)
!3653 = !DILocation(line: 149, column: 6, scope: !3480, inlinedAt: !3481)
!3654 = !DILocation(line: 149, column: 17, scope: !3480, inlinedAt: !3481)
!3655 = !DILocation(line: 149, column: 24, scope: !3480, inlinedAt: !3481)
!3656 = !DILocation(line: 149, column: 30, scope: !3480, inlinedAt: !3481)
!3657 = !DILocation(line: 151, column: 7, scope: !3658, inlinedAt: !3481)
!3658 = distinct !DILexicalBlock(scope: !3480, file: !41, line: 150, column: 2)
!3659 = !DILocation(line: 151, column: 23, scope: !3658, inlinedAt: !3481)
!3660 = !DILocation(line: 151, column: 40, scope: !3658, inlinedAt: !3481)
!3661 = !DILocation(line: 152, column: 7, scope: !3658, inlinedAt: !3481)
!3662 = !DILocation(line: 152, column: 22, scope: !3658, inlinedAt: !3481)
!3663 = !DILocation(line: 152, column: 39, scope: !3658, inlinedAt: !3481)
!3664 = !DILocation(line: 152, column: 53, scope: !3658, inlinedAt: !3481)
!3665 = !DILocation(line: 152, column: 49, scope: !3658, inlinedAt: !3481)
!3666 = !DILocalVariable(name: "bitlim", scope: !3658, file: !2, line: 153, type: !18, align: 4)
!3667 = !DILocation(line: 153, column: 7, scope: !3658, inlinedAt: !3481)
!3668 = !DILocation(line: 153, column: 34, scope: !3658, inlinedAt: !3481)
!3669 = !DILocation(line: 153, column: 29, scope: !3658, inlinedAt: !3481)
!3670 = !DILocation(line: 153, column: 24, scope: !3658, inlinedAt: !3481)
!3671 = !DILocation(line: 153, column: 16, scope: !3658, inlinedAt: !3481)
!3672 = !DILocation(line: 154, column: 7, scope: !3658, inlinedAt: !3481)
!3673 = !DILocation(line: 154, column: 24, scope: !3658, inlinedAt: !3481)
!3674 = !DILocation(line: 154, column: 30, scope: !3658, inlinedAt: !3481)
!3675 = !DILocation(line: 154, column: 22, scope: !3658, inlinedAt: !3481)
!3676 = !DILocation(line: 154, column: 50, scope: !3658, inlinedAt: !3481)
!3677 = !DILocation(line: 154, column: 67, scope: !3658, inlinedAt: !3481)
!3678 = !DILocation(line: 154, column: 77, scope: !3658, inlinedAt: !3481)
!3679 = !DILocation(line: 158, column: 6, scope: !3480, inlinedAt: !3481)
!3680 = !DILocalVariable(name: "rpm9", scope: !3681, file: !2, line: 160, type: !346, align: 8)
!3681 = distinct !DILexicalBlock(scope: !3480, file: !41, line: 159, column: 2)
!3682 = !DILocation(line: 160, column: 8, scope: !3681, inlinedAt: !3481)
!3683 = !DILocation(line: 160, column: 15, scope: !3681, inlinedAt: !3481)
!3684 = !DILocation(line: 160, column: 25, scope: !3681, inlinedAt: !3481)
!3685 = !DILocation(line: 160, column: 34, scope: !3681, inlinedAt: !3481)
!3686 = !DILocalVariable(name: "p10", scope: !3681, file: !2, line: 161, type: !18, align: 4)
!3687 = !DILocation(line: 161, column: 7, scope: !3681, inlinedAt: !3481)
!3688 = !DILocation(line: 161, column: 22, scope: !3681, inlinedAt: !3481)
!3689 = !DILocation(line: 161, column: 18, scope: !3681, inlinedAt: !3481)
!3690 = !DILocalVariable(name: "carry", scope: !3681, file: !2, line: 162, type: !3, align: 4)
!3691 = !DILocation(line: 162, column: 8, scope: !3681, inlinedAt: !3481)
!3692 = !DILocation(line: 162, column: 16, scope: !3681, inlinedAt: !3481)
!3693 = !DILocation(line: 163, column: 12, scope: !3694, inlinedAt: !3481)
!3694 = distinct !DILexicalBlock(scope: !3681, file: !41, line: 163, column: 3)
!3695 = !DILocation(line: 163, column: 15, scope: !3694, inlinedAt: !3481)
!3696 = !DILocation(line: 163, column: 20, scope: !3694, inlinedAt: !3481)
!3697 = !DILocalVariable(name: "tmp", scope: !3698, file: !2, line: 165, type: !3, align: 4)
!3698 = distinct !DILexicalBlock(scope: !3694, file: !41, line: 164, column: 3)
!3699 = !DILocation(line: 165, column: 9, scope: !3698, inlinedAt: !3481)
!3700 = !DILocation(line: 165, column: 17, scope: !3698, inlinedAt: !3481)
!3701 = !DILocation(line: 165, column: 22, scope: !3698, inlinedAt: !3481)
!3702 = !DILocation(line: 165, column: 15, scope: !3698, inlinedAt: !3481)
!3703 = !DILocation(line: 166, column: 6, scope: !3698, inlinedAt: !3481)
!3704 = !DILocation(line: 166, column: 13, scope: !3698, inlinedAt: !3481)
!3705 = !DILocation(line: 166, column: 18, scope: !3698, inlinedAt: !3481)
!3706 = !DILocation(line: 166, column: 11, scope: !3698, inlinedAt: !3481)
!3707 = !DILocation(line: 166, column: 24, scope: !3698, inlinedAt: !3481)
!3708 = !DILocation(line: 167, column: 25, scope: !3698, inlinedAt: !3481)
!3709 = !DILocation(line: 167, column: 12, scope: !3698, inlinedAt: !3481)
!3710 = !DILocation(line: 167, column: 31, scope: !3698, inlinedAt: !3481)
!3711 = !DILocation(line: 168, column: 8, scope: !3698, inlinedAt: !3481)
!3712 = !DILocation(line: 168, column: 13, scope: !3698, inlinedAt: !3481)
!3713 = !DILocation(line: 168, column: 21, scope: !3698, inlinedAt: !3481)
!3714 = !DILocation(line: 170, column: 10, scope: !3715, inlinedAt: !3481)
!3715 = distinct !DILexicalBlock(scope: !3698, file: !41, line: 169, column: 4)
!3716 = !DILocation(line: 171, column: 5, scope: !3715, inlinedAt: !3481)
!3717 = !DILocation(line: 163, column: 23, scope: !3694, inlinedAt: !3481)
!3718 = !DILocation(line: 174, column: 7, scope: !3681, inlinedAt: !3481)
!3719 = !DILocation(line: 174, column: 16, scope: !3681, inlinedAt: !3481)
!3720 = !DILocation(line: 174, column: 23, scope: !3681, inlinedAt: !3481)
!3721 = !DILocation(line: 175, column: 3, scope: !3681, inlinedAt: !3481)
!3722 = !DILocation(line: 175, column: 13, scope: !3681, inlinedAt: !3481)
!3723 = !DILocation(line: 175, column: 9, scope: !3681, inlinedAt: !3481)
!3724 = !DILocation(line: 179, column: 2, scope: !3480, inlinedAt: !3481)
!3725 = !DILocation(line: 179, column: 9, scope: !3726, inlinedAt: !3481)
!3726 = distinct !DILexicalBlock(scope: !3480, file: !41, line: 179, column: 2)
!3727 = !DILocation(line: 179, column: 30, scope: !3726, inlinedAt: !3481)
!3728 = !DILocation(line: 179, column: 53, scope: !3726, inlinedAt: !3481)
!3729 = !DILocation(line: 179, column: 51, scope: !3726, inlinedAt: !3481)
!3730 = !DILocalVariable(name: "carry", scope: !3731, file: !2, line: 181, type: !3, align: 4)
!3731 = distinct !DILexicalBlock(scope: !3726, file: !41, line: 180, column: 2)
!3732 = !DILocation(line: 181, column: 8, scope: !3731, inlinedAt: !3481)
!3733 = !DILocation(line: 181, column: 16, scope: !3731, inlinedAt: !3481)
!3734 = !DILocation(line: 182, column: 3, scope: !3731, inlinedAt: !3481)
!3735 = !DILocation(line: 183, column: 13, scope: !3736, inlinedAt: !3481)
!3736 = distinct !DILexicalBlock(scope: !3731, file: !41, line: 183, column: 3)
!3737 = !DILocalVariable(name: "tmp", scope: !3738, file: !2, line: 185, type: !68, align: 8)
!3738 = distinct !DILexicalBlock(scope: !3736, file: !41, line: 184, column: 3)
!3739 = !DILocation(line: 185, column: 10, scope: !3738, inlinedAt: !3481)
!3740 = !DILocation(line: 185, column: 25, scope: !3738, inlinedAt: !3481)
!3741 = !DILocation(line: 185, column: 17, scope: !3738, inlinedAt: !3481)
!3742 = !DILocation(line: 185, column: 36, scope: !3738, inlinedAt: !3481)
!3743 = !DILocation(line: 186, column: 8, scope: !3738, inlinedAt: !3481)
!3744 = !DILocation(line: 188, column: 20, scope: !3745, inlinedAt: !3481)
!3745 = distinct !DILexicalBlock(scope: !3738, file: !41, line: 187, column: 4)
!3746 = !DILocation(line: 188, column: 14, scope: !3745, inlinedAt: !3481)
!3747 = !DILocation(line: 189, column: 7, scope: !3745, inlinedAt: !3481)
!3748 = !DILocation(line: 189, column: 19, scope: !3745, inlinedAt: !3481)
!3749 = !DILocation(line: 189, column: 13, scope: !3745, inlinedAt: !3481)
!3750 = !DILocation(line: 193, column: 13, scope: !3751, inlinedAt: !3481)
!3751 = distinct !DILexicalBlock(scope: !3738, file: !41, line: 192, column: 4)
!3752 = !DILocation(line: 194, column: 7, scope: !3751, inlinedAt: !3481)
!3753 = !DILocation(line: 194, column: 13, scope: !3751, inlinedAt: !3481)
!3754 = !DILocation(line: 196, column: 8, scope: !3738, inlinedAt: !3481)
!3755 = !DILocation(line: 196, column: 14, scope: !3738, inlinedAt: !3481)
!3756 = !DILocation(line: 196, column: 31, scope: !3738, inlinedAt: !3481)
!3757 = !DILocation(line: 196, column: 36, scope: !3738, inlinedAt: !3481)
!3758 = !DILocation(line: 196, column: 44, scope: !3738, inlinedAt: !3481)
!3759 = !DILocation(line: 196, column: 52, scope: !3738, inlinedAt: !3481)
!3760 = !DILocation(line: 197, column: 8, scope: !3738, inlinedAt: !3481)
!3761 = !DILocation(line: 197, column: 13, scope: !3738, inlinedAt: !3481)
!3762 = !DILocation(line: 197, column: 16, scope: !3738, inlinedAt: !3481)
!3763 = !DILocation(line: 183, column: 35, scope: !3736, inlinedAt: !3481)
!3764 = !DILocation(line: 199, column: 7, scope: !3731, inlinedAt: !3481)
!3765 = !DILocation(line: 201, column: 4, scope: !3766, inlinedAt: !3481)
!3766 = distinct !DILexicalBlock(scope: !3731, file: !41, line: 200, column: 3)
!3767 = !DILocation(line: 202, column: 9, scope: !3766, inlinedAt: !3481)
!3768 = !DILocation(line: 203, column: 8, scope: !3766, inlinedAt: !3481)
!3769 = !DILocation(line: 203, column: 13, scope: !3766, inlinedAt: !3481)
!3770 = !DILocation(line: 205, column: 10, scope: !3771, inlinedAt: !3481)
!3771 = distinct !DILexicalBlock(scope: !3766, file: !41, line: 204, column: 4)
!3772 = !DILocation(line: 206, column: 8, scope: !3771, inlinedAt: !3481)
!3773 = !DILocation(line: 206, column: 28, scope: !3771, inlinedAt: !3481)
!3774 = !DILocation(line: 206, column: 5, scope: !3771, inlinedAt: !3481)
!3775 = !DILocation(line: 208, column: 6, scope: !3766, inlinedAt: !3481)
!3776 = !DILocation(line: 208, column: 11, scope: !3766, inlinedAt: !3481)
!3777 = !DILocation(line: 213, column: 2, scope: !3480, inlinedAt: !3481)
!3778 = !DILocalVariable(name: "carry", scope: !3779, file: !2, line: 215, type: !3, align: 4)
!3779 = distinct !DILexicalBlock(scope: !3780, file: !41, line: 214, column: 2)
!3780 = distinct !DILexicalBlock(scope: !3480, file: !41, line: 213, column: 2)
!3781 = !DILocation(line: 215, column: 8, scope: !3779, inlinedAt: !3481)
!3782 = !DILocation(line: 215, column: 16, scope: !3779, inlinedAt: !3481)
!3783 = !DILocalVariable(name: "sh", scope: !3779, file: !2, line: 216, type: !18, align: 4)
!3784 = !DILocation(line: 216, column: 7, scope: !3779, inlinedAt: !3481)
!3785 = !DILocation(line: 216, column: 12, scope: !3779, inlinedAt: !3481)
!3786 = !DILocalVariable(name: "i", scope: !3779, file: !2, line: 217, type: !18, align: 4)
!3787 = !DILocation(line: 217, column: 7, scope: !3779, inlinedAt: !3481)
!3788 = !DILocation(line: 218, column: 12, scope: !3789, inlinedAt: !3481)
!3789 = distinct !DILexicalBlock(scope: !3779, file: !41, line: 218, column: 3)
!3790 = !DILocation(line: 218, column: 15, scope: !3789, inlinedAt: !3481)
!3791 = !DILocation(line: 220, column: 9, scope: !3792, inlinedAt: !3481)
!3792 = distinct !DILexicalBlock(scope: !3789, file: !41, line: 219, column: 3)
!3793 = !DILocation(line: 220, column: 13, scope: !3792, inlinedAt: !3481)
!3794 = !DILocation(line: 221, column: 8, scope: !3792, inlinedAt: !3481)
!3795 = !DILocation(line: 221, column: 13, scope: !3792, inlinedAt: !3481)
!3796 = !DILocation(line: 221, column: 20, scope: !3792, inlinedAt: !3481)
!3797 = !DILocation(line: 221, column: 28, scope: !3792, inlinedAt: !3481)
!3798 = !DILocation(line: 221, column: 18, scope: !3792, inlinedAt: !3481)
!3799 = !DILocation(line: 223, column: 9, scope: !3800, inlinedAt: !3481)
!3800 = distinct !DILexicalBlock(scope: !3792, file: !41, line: 222, column: 4)
!3801 = !DILocation(line: 224, column: 5, scope: !3800, inlinedAt: !3481)
!3802 = !DILocation(line: 226, column: 11, scope: !3792, inlinedAt: !3481)
!3803 = !DILocation(line: 226, column: 15, scope: !3792, inlinedAt: !3481)
!3804 = !DILocation(line: 226, column: 31, scope: !3792, inlinedAt: !3481)
!3805 = !DILocation(line: 226, column: 8, scope: !3792, inlinedAt: !3481)
!3806 = !DILocation(line: 226, column: 35, scope: !3792, inlinedAt: !3481)
!3807 = !DILocation(line: 218, column: 28, scope: !3789, inlinedAt: !3481)
!3808 = !DILocation(line: 228, column: 7, scope: !3779, inlinedAt: !3481)
!3809 = !DILocation(line: 228, column: 23, scope: !3779, inlinedAt: !3481)
!3810 = !DILocation(line: 228, column: 42, scope: !3779, inlinedAt: !3481)
!3811 = !DILocation(line: 229, column: 7, scope: !3779, inlinedAt: !3481)
!3812 = !DILocation(line: 229, column: 34, scope: !3779, inlinedAt: !3481)
!3813 = !DILocation(line: 230, column: 3, scope: !3779, inlinedAt: !3481)
!3814 = !DILocation(line: 230, column: 9, scope: !3779, inlinedAt: !3481)
!3815 = !DILocation(line: 231, column: 12, scope: !3816, inlinedAt: !3481)
!3816 = distinct !DILexicalBlock(scope: !3779, file: !41, line: 231, column: 3)
!3817 = !DILocation(line: 231, column: 15, scope: !3816, inlinedAt: !3481)
!3818 = !DILocation(line: 231, column: 20, scope: !3816, inlinedAt: !3481)
!3819 = !DILocalVariable(name: "tmp", scope: !3820, file: !2, line: 233, type: !3, align: 4)
!3820 = distinct !DILexicalBlock(scope: !3816, file: !41, line: 232, column: 3)
!3821 = !DILocation(line: 233, column: 9, scope: !3820, inlinedAt: !3481)
!3822 = !DILocation(line: 233, column: 17, scope: !3820, inlinedAt: !3481)
!3823 = !DILocation(line: 233, column: 28, scope: !3820, inlinedAt: !3481)
!3824 = !DILocation(line: 233, column: 23, scope: !3820, inlinedAt: !3481)
!3825 = !DILocation(line: 233, column: 15, scope: !3820, inlinedAt: !3481)
!3826 = !DILocation(line: 234, column: 6, scope: !3820, inlinedAt: !3481)
!3827 = !DILocation(line: 234, column: 13, scope: !3820, inlinedAt: !3481)
!3828 = !DILocation(line: 234, column: 19, scope: !3820, inlinedAt: !3481)
!3829 = !DILocation(line: 234, column: 11, scope: !3820, inlinedAt: !3481)
!3830 = !DILocation(line: 234, column: 24, scope: !3820, inlinedAt: !3481)
!3831 = !DILocation(line: 235, column: 27, scope: !3820, inlinedAt: !3481)
!3832 = !DILocation(line: 235, column: 13, scope: !3820, inlinedAt: !3481)
!3833 = !DILocation(line: 235, column: 33, scope: !3820, inlinedAt: !3481)
!3834 = !DILocation(line: 236, column: 8, scope: !3820, inlinedAt: !3481)
!3835 = !DILocation(line: 236, column: 13, scope: !3820, inlinedAt: !3481)
!3836 = !DILocation(line: 236, column: 21, scope: !3820, inlinedAt: !3481)
!3837 = !DILocation(line: 238, column: 10, scope: !3838, inlinedAt: !3481)
!3838 = distinct !DILexicalBlock(scope: !3820, file: !41, line: 237, column: 4)
!3839 = !DILocation(line: 239, column: 5, scope: !3838, inlinedAt: !3481)
!3840 = !DILocation(line: 240, column: 5, scope: !3838, inlinedAt: !3481)
!3841 = !DILocation(line: 231, column: 28, scope: !3816, inlinedAt: !3481)
!3842 = !DILocation(line: 243, column: 7, scope: !3779, inlinedAt: !3481)
!3843 = !DILocation(line: 245, column: 9, scope: !3844, inlinedAt: !3481)
!3844 = distinct !DILexicalBlock(scope: !3779, file: !41, line: 244, column: 3)
!3845 = !DILocation(line: 245, column: 26, scope: !3844, inlinedAt: !3481)
!3846 = !DILocation(line: 247, column: 7, scope: !3847, inlinedAt: !3481)
!3847 = distinct !DILexicalBlock(scope: !3844, file: !41, line: 246, column: 4)
!3848 = !DILocation(line: 247, column: 12, scope: !3847, inlinedAt: !3481)
!3849 = !DILocation(line: 248, column: 10, scope: !3847, inlinedAt: !3481)
!3850 = !DILocation(line: 252, column: 8, scope: !3851, inlinedAt: !3481)
!3851 = distinct !DILexicalBlock(scope: !3844, file: !41, line: 251, column: 4)
!3852 = !DILocation(line: 252, column: 5, scope: !3851, inlinedAt: !3481)
!3853 = !DILocalVariable(name: "y", scope: !3480, file: !2, line: 258, type: !2465, align: 8)
!3854 = !DILocation(line: 258, column: 9, scope: !3480, inlinedAt: !3481)
!3855 = !DILocalVariable(name: "i", scope: !3480, file: !2, line: 259, type: !18, align: 4)
!3856 = !DILocation(line: 259, column: 6, scope: !3480, inlinedAt: !3481)
!3857 = !DILocation(line: 260, column: 11, scope: !3858, inlinedAt: !3481)
!3858 = distinct !DILexicalBlock(scope: !3480, file: !41, line: 260, column: 2)
!3859 = !DILocation(line: 260, column: 14, scope: !3858, inlinedAt: !3481)
!3860 = !DILocation(line: 262, column: 8, scope: !3861, inlinedAt: !3481)
!3861 = distinct !DILexicalBlock(scope: !3858, file: !41, line: 261, column: 2)
!3862 = !DILocation(line: 262, column: 12, scope: !3861, inlinedAt: !3481)
!3863 = !DILocation(line: 262, column: 25, scope: !3861, inlinedAt: !3481)
!3864 = !DILocation(line: 262, column: 36, scope: !3861, inlinedAt: !3481)
!3865 = !DILocation(line: 262, column: 31, scope: !3861, inlinedAt: !3481)
!3866 = !DILocation(line: 262, column: 58, scope: !3861, inlinedAt: !3481)
!3867 = !DILocation(line: 263, column: 22, scope: !3861, inlinedAt: !3481)
!3868 = !DILocation(line: 263, column: 7, scope: !3861, inlinedAt: !3481)
!3869 = !DILocation(line: 263, column: 29, scope: !3861, inlinedAt: !3481)
!3870 = !DILocation(line: 263, column: 33, scope: !3861, inlinedAt: !3481)
!3871 = !DILocation(line: 260, column: 27, scope: !3858, inlinedAt: !3481)
!3872 = !DILocation(line: 266, column: 2, scope: !3480, inlinedAt: !3481)
!3873 = !DILocation(line: 266, column: 7, scope: !3480, inlinedAt: !3481)
!3874 = !DILocalVariable(name: "denormal", scope: !3480, file: !2, line: 268, type: !146, align: 1)
!3875 = !DILocation(line: 268, column: 7, scope: !3480, inlinedAt: !3481)
!3876 = !DILocalVariable(name: "bits", scope: !3480, file: !2, line: 270, type: !3, align: 4)
!3877 = !DILocation(line: 270, column: 7, scope: !3480, inlinedAt: !3481)
!3878 = !DILocation(line: 270, column: 14, scope: !3480, inlinedAt: !3481)
!3879 = !DILocation(line: 271, column: 6, scope: !3480, inlinedAt: !3481)
!3880 = !DILocation(line: 271, column: 37, scope: !3480, inlinedAt: !3481)
!3881 = !DILocation(line: 271, column: 13, scope: !3480, inlinedAt: !3481)
!3882 = !DILocation(line: 273, column: 34, scope: !3883, inlinedAt: !3481)
!3883 = distinct !DILexicalBlock(scope: !3480, file: !41, line: 272, column: 2)
!3884 = !DILocation(line: 273, column: 10, scope: !3883, inlinedAt: !3481)
!3885 = !DILocation(line: 274, column: 7, scope: !3883, inlinedAt: !3481)
!3886 = !DILocation(line: 274, column: 24, scope: !3883, inlinedAt: !3481)
!3887 = !DILocation(line: 275, column: 14, scope: !3883, inlinedAt: !3481)
!3888 = !DILocalVariable(name: "bias", scope: !3480, file: !2, line: 279, type: !2465, align: 8)
!3889 = !DILocation(line: 279, column: 9, scope: !3480, inlinedAt: !3481)
!3890 = !DILocalVariable(name: "frac", scope: !3480, file: !2, line: 280, type: !2465, align: 8)
!3891 = !DILocation(line: 280, column: 9, scope: !3480, inlinedAt: !3481)
!3892 = !DILocation(line: 281, column: 6, scope: !3480, inlinedAt: !3481)
!3893 = !DILocation(line: 283, column: 69, scope: !3894, inlinedAt: !3481)
!3894 = distinct !DILexicalBlock(scope: !3480, file: !41, line: 282, column: 2)
!3895 = !DILocation(line: 283, column: 41, scope: !3894, inlinedAt: !3481)
!3896 = !DILocation(line: 1061, column: 52, scope: !3897, inlinedAt: !3898)
!3897 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2684, file: !2684, line: 1061, scopeLine: 1061, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!3898 = !DILocation(line: 283, column: 25, scope: !3894, inlinedAt: !3481)
!3899 = !DILocation(line: 1061, column: 41, scope: !3897, inlinedAt: !3898)
!3900 = !DILocation(line: 61, column: 10, scope: !3901, inlinedAt: !3902)
!3901 = distinct !DISubprogram(name: "promote_int_same", linkageName: "promote_int_same", scope: !2690, file: !2690, line: 49, scopeLine: 49, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!3902 = !DILocation(line: 310, column: 40, scope: !3903, inlinedAt: !3904)
!3903 = distinct !DISubprogram(name: "copysign", linkageName: "copysign", scope: !2684, file: !2684, line: 310, scopeLine: 310, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!3904 = !DILocation(line: 283, column: 10, scope: !3894, inlinedAt: !3481)
!3905 = !DILocation(line: 310, column: 77, scope: !3903, inlinedAt: !3904)
!3906 = !DILocation(line: 284, column: 10, scope: !3894, inlinedAt: !3481)
!3907 = !DILocation(line: 284, column: 54, scope: !3894, inlinedAt: !3481)
!3908 = !DILocation(line: 284, column: 30, scope: !3894, inlinedAt: !3481)
!3909 = !DILocation(line: 1061, column: 52, scope: !3910, inlinedAt: !3911)
!3910 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2684, file: !2684, line: 1061, scopeLine: 1061, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!3911 = !DILocation(line: 284, column: 14, scope: !3894, inlinedAt: !3481)
!3912 = !DILocation(line: 1061, column: 41, scope: !3910, inlinedAt: !3911)
!3913 = !DILocation(line: 285, column: 3, scope: !3894, inlinedAt: !3481)
!3914 = !DILocation(line: 285, column: 8, scope: !3894, inlinedAt: !3481)
!3915 = !DILocation(line: 286, column: 3, scope: !3894, inlinedAt: !3481)
!3916 = !DILocation(line: 286, column: 8, scope: !3894, inlinedAt: !3481)
!3917 = !DILocation(line: 290, column: 7, scope: !3480, inlinedAt: !3481)
!3918 = !DILocation(line: 290, column: 11, scope: !3480, inlinedAt: !3481)
!3919 = !DILocation(line: 290, column: 24, scope: !3480, inlinedAt: !3481)
!3920 = !DILocalVariable(name: "t", scope: !3921, file: !2, line: 292, type: !3, align: 4)
!3921 = distinct !DILexicalBlock(scope: !3480, file: !41, line: 291, column: 2)
!3922 = !DILocation(line: 292, column: 8, scope: !3921, inlinedAt: !3481)
!3923 = !DILocation(line: 292, column: 15, scope: !3921, inlinedAt: !3481)
!3924 = !DILocation(line: 292, column: 19, scope: !3921, inlinedAt: !3481)
!3925 = !DILocation(line: 295, column: 9, scope: !3926, inlinedAt: !3481)
!3926 = distinct !DILexicalBlock(scope: !3921, file: !41, line: 293, column: 3)
!3927 = !DILocation(line: 295, column: 27, scope: !3926, inlinedAt: !3481)
!3928 = !DILocation(line: 295, column: 33, scope: !3926, inlinedAt: !3481)
!3929 = !DILocation(line: 295, column: 37, scope: !3926, inlinedAt: !3481)
!3930 = !DILocation(line: 295, column: 54, scope: !3926, inlinedAt: !3481)
!3931 = !DILocation(line: 296, column: 5, scope: !3932, inlinedAt: !3481)
!3932 = distinct !DILexicalBlock(scope: !3926, file: !41, line: 296, column: 5)
!3933 = !DILocation(line: 296, column: 20, scope: !3932, inlinedAt: !3481)
!3934 = !DILocation(line: 296, column: 13, scope: !3932, inlinedAt: !3481)
!3935 = !DILocation(line: 297, column: 9, scope: !3926, inlinedAt: !3481)
!3936 = !DILocation(line: 298, column: 5, scope: !3937, inlinedAt: !3481)
!3937 = distinct !DILexicalBlock(scope: !3926, file: !41, line: 298, column: 5)
!3938 = !DILocation(line: 298, column: 20, scope: !3937, inlinedAt: !3481)
!3939 = !DILocation(line: 298, column: 13, scope: !3937, inlinedAt: !3481)
!3940 = !DILocation(line: 299, column: 9, scope: !3926, inlinedAt: !3481)
!3941 = !DILocation(line: 300, column: 10, scope: !3942, inlinedAt: !3481)
!3942 = distinct !DILexicalBlock(scope: !3926, file: !41, line: 300, column: 5)
!3943 = !DILocation(line: 300, column: 14, scope: !3942, inlinedAt: !3481)
!3944 = !DILocation(line: 300, column: 31, scope: !3942, inlinedAt: !3481)
!3945 = !DILocation(line: 302, column: 6, scope: !3946, inlinedAt: !3481)
!3946 = distinct !DILexicalBlock(scope: !3942, file: !41, line: 301, column: 5)
!3947 = !DILocation(line: 302, column: 20, scope: !3946, inlinedAt: !3481)
!3948 = !DILocation(line: 302, column: 14, scope: !3946, inlinedAt: !3481)
!3949 = !DILocation(line: 306, column: 6, scope: !3950, inlinedAt: !3481)
!3950 = distinct !DILexicalBlock(scope: !3942, file: !41, line: 305, column: 5)
!3951 = !DILocation(line: 306, column: 21, scope: !3950, inlinedAt: !3481)
!3952 = !DILocation(line: 306, column: 14, scope: !3950, inlinedAt: !3481)
!3953 = !DILocation(line: 309, column: 31, scope: !3921, inlinedAt: !3481)
!3954 = !DILocation(line: 309, column: 7, scope: !3921, inlinedAt: !3481)
!3955 = !DILocation(line: 309, column: 46, scope: !3921, inlinedAt: !3481)
!3956 = !DILocation(line: 309, column: 57, scope: !3921, inlinedAt: !3481)
!3957 = !DILocation(line: 312, column: 2, scope: !3480, inlinedAt: !3481)
!3958 = !DILocation(line: 312, column: 7, scope: !3480, inlinedAt: !3481)
!3959 = !DILocation(line: 313, column: 2, scope: !3480, inlinedAt: !3481)
!3960 = !DILocation(line: 313, column: 7, scope: !3480, inlinedAt: !3481)
!3961 = !DILocation(line: 315, column: 8, scope: !3480, inlinedAt: !3481)
!3962 = !DILocation(line: 315, column: 49, scope: !3480, inlinedAt: !3481)
!3963 = !DILocation(line: 132, column: 23, scope: !3964, inlinedAt: !3965)
!3964 = distinct !DISubprogram(name: "abs", linkageName: "abs", scope: !2684, file: !2684, line: 132, scopeLine: 132, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!3965 = !DILocation(line: 317, column: 7, scope: !3966, inlinedAt: !3481)
!3966 = distinct !DILexicalBlock(scope: !3480, file: !41, line: 316, column: 2)
!3967 = !DILocation(line: 319, column: 8, scope: !3968, inlinedAt: !3481)
!3968 = distinct !DILexicalBlock(scope: !3966, file: !41, line: 318, column: 3)
!3969 = !DILocation(line: 319, column: 20, scope: !3968, inlinedAt: !3481)
!3970 = !DILocation(line: 319, column: 52, scope: !3968, inlinedAt: !3481)
!3971 = !DILocation(line: 319, column: 28, scope: !3968, inlinedAt: !3481)
!3972 = !DILocation(line: 319, column: 75, scope: !3968, inlinedAt: !3481)
!3973 = !DILocation(line: 320, column: 4, scope: !3968, inlinedAt: !3481)
!3974 = !DILocation(line: 321, column: 4, scope: !3968, inlinedAt: !3481)
!3975 = !DILocation(line: 323, column: 7, scope: !3966, inlinedAt: !3481)
!3976 = !DILocation(line: 323, column: 36, scope: !3966, inlinedAt: !3481)
!3977 = !DILocation(line: 323, column: 45, scope: !3966, inlinedAt: !3481)
!3978 = !DILocation(line: 323, column: 57, scope: !3966, inlinedAt: !3481)
!3979 = !DILocation(line: 323, column: 71, scope: !3966, inlinedAt: !3481)
!3980 = !DILocation(line: 1061, column: 52, scope: !3981, inlinedAt: !3982)
!3981 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2684, file: !2684, line: 1061, scopeLine: 1061, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!3982 = !DILocation(line: 325, column: 9, scope: !3480, inlinedAt: !3481)
!3983 = !DILocation(line: 1061, column: 41, scope: !3981, inlinedAt: !3982)
!3984 = distinct !DISubprogram(name: "splitter", linkageName: "std.core.String.splitter", scope: !2, file: !2, line: 822, type: !3985, scopeLine: 822, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!3985 = !DISubroutineType(types: !3986)
!3986 = !{!3987, !60, !60}
!3987 = !DICompositeType(tag: DW_TAG_structure_type, name: "Splitter", scope: !2, file: !2, line: 832, size: 384, align: 64, elements: !3988, identifier: "std.core.string.Splitter")
!3988 = !{!3989, !3990, !3991, !3992, !3993}
!3989 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !3987, file: !2, line: 834, baseType: !60, size: 128, align: 64)
!3990 = !DIDerivedType(tag: DW_TAG_member, name: "split", scope: !3987, file: !2, line: 835, baseType: !60, size: 128, align: 64, offset: 128)
!3991 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !3987, file: !2, line: 836, baseType: !67, size: 64, align: 64, offset: 256)
!3992 = !DIDerivedType(tag: DW_TAG_member, name: "tokenize", scope: !3987, file: !2, line: 837, baseType: !146, size: 8, align: 8, offset: 320)
!3993 = !DIDerivedType(tag: DW_TAG_member, name: "last_index", scope: !3987, file: !2, line: 838, baseType: !18, size: 32, align: 32, offset: 352)
!3994 = !DILocalVariable(name: "self", arg: 1, scope: !3984, file: !2, line: 822, type: !60)
!3995 = !DILocation(line: 822, column: 29, scope: !3984)
!3996 = !DILocalVariable(name: "split", arg: 2, scope: !3984, file: !2, line: 822, type: !60)
!3997 = !DILocation(line: 822, column: 42, scope: !3984)
!3998 = !DILocation(line: 824, column: 21, scope: !3984)
!3999 = !DILocation(line: 824, column: 36, scope: !3984)
!4000 = distinct !DISubprogram(name: "tokenize", linkageName: "std.core.String.tokenize", scope: !2, file: !2, line: 827, type: !3985, scopeLine: 827, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!4001 = !DILocalVariable(name: "self", arg: 1, scope: !4000, file: !2, line: 827, type: !60)
!4002 = !DILocation(line: 827, column: 29, scope: !4000)
!4003 = !DILocalVariable(name: "split", arg: 2, scope: !4000, file: !2, line: 827, type: !60)
!4004 = !DILocation(line: 827, column: 42, scope: !4000)
!4005 = !DILocation(line: 829, column: 21, scope: !4000)
!4006 = !DILocation(line: 829, column: 36, scope: !4000)
!4007 = !DILocation(line: 829, column: 55, scope: !4000)
!4008 = distinct !DISubprogram(name: "reset", linkageName: "std.core.string.Splitter.reset", scope: !2, file: !2, line: 841, type: !4009, scopeLine: 841, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!4009 = !DISubroutineType(types: !4010)
!4010 = !{null, !4011}
!4011 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Splitter*", baseType: !3987, size: 64, align: 64, dwarfAddressSpace: 0)
!4012 = !DILocation(line: 842, column: 1, scope: !4008)
!4013 = !DILocalVariable(name: "self", arg: 1, scope: !4008, file: !2, line: 841, type: !4011)
!4014 = !DILocation(line: 841, column: 24, scope: !4008)
!4015 = !DILocation(line: 843, column: 2, scope: !4008)
!4016 = !DILocation(line: 843, column: 17, scope: !4008)
!4017 = distinct !DISubprogram(name: "next", linkageName: "std.core.string.Splitter.next", scope: !2, file: !2, line: 846, type: !4018, scopeLine: 846, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!4018 = !DISubroutineType(types: !4019)
!4019 = !{!345, !203, !4011}
!4020 = !DILocation(line: 847, column: 1, scope: !4017)
!4021 = !DILocalVariable(name: "self", arg: 1, scope: !4017, file: !2, line: 846, type: !4011)
!4022 = !DILocation(line: 846, column: 26, scope: !4017)
!4023 = !DILocation(line: 848, column: 2, scope: !4017)
!4024 = !DILocalVariable(name: "len", scope: !4025, file: !2, line: 850, type: !67, align: 8)
!4025 = distinct !DILexicalBlock(scope: !4026, file: !2, line: 849, column: 2)
!4026 = distinct !DILexicalBlock(scope: !4017, file: !2, line: 848, column: 2)
!4027 = !DILocation(line: 850, column: 7, scope: !4025)
!4028 = !DILocation(line: 850, column: 13, scope: !4025)
!4029 = !DILocalVariable(name: "current", scope: !4025, file: !2, line: 851, type: !67, align: 8)
!4030 = !DILocation(line: 851, column: 7, scope: !4025)
!4031 = !DILocation(line: 851, column: 17, scope: !4025)
!4032 = !DILocation(line: 852, column: 7, scope: !4025)
!4033 = !DILocation(line: 852, column: 18, scope: !4025)
!4034 = !DILocation(line: 852, column: 30, scope: !4025)
!4035 = !DILocalVariable(name: "remaining", scope: !4025, file: !2, line: 853, type: !60, align: 8)
!4036 = !DILocation(line: 853, column: 10, scope: !4025)
!4037 = !DILocation(line: 853, column: 22, scope: !4025)
!4038 = !DILocation(line: 853, column: 34, scope: !4025)
!4039 = !DILocalVariable(name: "next", scope: !4025, file: !2, line: 854, type: !68, align: 8)
!4040 = !DILocation(line: 854, column: 8, scope: !4025)
!4041 = !DILocation(line: 854, column: 34, scope: !4025)
!4042 = !DILocation(line: 854, column: 15, scope: !4025)
!4043 = !DILocation(line: 855, column: 7, scope: !4025)
!4044 = !DILocation(line: 857, column: 4, scope: !4045)
!4045 = distinct !DILexicalBlock(scope: !4025, file: !2, line: 856, column: 3)
!4046 = !DILocation(line: 857, column: 19, scope: !4045)
!4047 = !DILocation(line: 857, column: 29, scope: !4045)
!4048 = !DILocation(line: 857, column: 36, scope: !4045)
!4049 = !DILocation(line: 858, column: 8, scope: !4045)
!4050 = !DILocation(line: 858, column: 17, scope: !4045)
!4051 = !DILocation(line: 858, column: 32, scope: !4045)
!4052 = !DILocation(line: 859, column: 11, scope: !4045)
!4053 = !DILocation(line: 859, column: 21, scope: !4045)
!4054 = !DILocation(line: 859, column: 22, scope: !4045)
!4055 = !DILocation(line: 861, column: 3, scope: !4025)
!4056 = !DILocation(line: 861, column: 18, scope: !4025)
!4057 = !DILocation(line: 862, column: 10, scope: !4025)
!4058 = distinct !DISubprogram(name: "tformat_zstr", linkageName: "std.core.string.tformat_zstr", scope: !2, file: !2, line: 42, type: !4059, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!4059 = !DISubroutineType(types: !4060)
!4060 = !{!617, !60, !4061}
!4061 = !DICompositeType(tag: DW_TAG_structure_type, name: "any[]", size: 128, align: 64, elements: !4062, identifier: "any[]")
!4062 = !{!4063, !4069}
!4063 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4061, baseType: !4064, size: 64, align: 64)
!4064 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "any*", baseType: !4065, size: 64, align: 64, dwarfAddressSpace: 0)
!4065 = !DICompositeType(tag: DW_TAG_structure_type, name: "any", size: 128, align: 64, elements: !4066, identifier: "any")
!4066 = !{!4067, !4068}
!4067 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4065, baseType: !208, size: 64, align: 64)
!4068 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !4065, baseType: !210, size: 64, align: 64, offset: 64)
!4069 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !4061, baseType: !67, size: 64, align: 64, offset: 64)
!4070 = !DILocalVariable(name: "fmt", arg: 1, scope: !4058, file: !2, line: 42, type: !60)
!4071 = !DILocation(line: 42, column: 32, scope: !4058)
!4072 = !DILocalVariable(name: "args", arg: 2, scope: !4058, file: !2, line: 42, type: !4061)
!4073 = !DILocation(line: 42, column: 37, scope: !4058)
!4074 = !DILocalVariable(name: "str", scope: !4058, file: !2, line: 44, type: !4075, align: 8)
!4075 = !DIDerivedType(tag: DW_TAG_typedef, name: "DString", scope: !2, file: !2, line: 4, baseType: !4076, align: 8)
!4076 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "DStringOpaque*", baseType: !4077, size: 64, align: 64, dwarfAddressSpace: 0)
!4077 = !DIDerivedType(tag: DW_TAG_typedef, name: "DStringOpaque", scope: !2, file: !2, line: 5, baseType: null, align: 1)
!4078 = !DILocation(line: 44, column: 10, scope: !4058)
!4079 = !DILocation(line: 44, column: 44, scope: !4058)
!4080 = !DILocation(line: 44, column: 54, scope: !4058)
!4081 = !DILocation(line: 44, column: 16, scope: !4058)
!4082 = !DILocation(line: 45, column: 2, scope: !4058)
!4083 = !DILocation(line: 46, column: 9, scope: !4058)
!4084 = distinct !DISubprogram(name: "format", linkageName: "std.core.string.format", scope: !2, file: !2, line: 55, type: !4085, scopeLine: 55, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!4085 = !DISubroutineType(types: !4086)
!4086 = !{!60, !60, !4061, !205}
!4087 = !DILocalVariable(name: "fmt", arg: 1, scope: !4084, file: !2, line: 55, type: !60)
!4088 = !DILocation(line: 55, column: 25, scope: !4084)
!4089 = !DILocalVariable(name: "args", arg: 2, scope: !4084, file: !2, line: 55, type: !4061)
!4090 = !DILocation(line: 55, column: 30, scope: !4084)
!4091 = !DILocalVariable(name: "allocator", arg: 3, scope: !4084, file: !2, line: 55, type: !205)
!4092 = !DILocation(line: 55, column: 49, scope: !4084)
!4093 = !DILocalVariable(name: "current", scope: !4094, file: !2, line: 592, type: !4095, align: 8)
!4094 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !686, file: !686, line: 590, scopeLine: 590, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !69)
!4095 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocator*", baseType: !4096, size: 64, align: 64, dwarfAddressSpace: 0)
!4096 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocator", scope: !2, file: !2, line: 10, size: 320, align: 64, elements: !4097, identifier: "std.core.mem.allocator.TempAllocator")
!4097 = !{!4098, !4099, !4112, !4113, !4114}
!4098 = !DIDerivedType(tag: DW_TAG_member, name: "backing_allocator", scope: !4096, file: !2, line: 12, baseType: !205, size: 128, align: 64)
!4099 = !DIDerivedType(tag: DW_TAG_member, name: "last_page", scope: !4096, file: !2, line: 13, baseType: !4100, size: 64, align: 64, offset: 128)
!4100 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocatorPage*", baseType: !4101, size: 64, align: 64, dwarfAddressSpace: 0)
!4101 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocatorPage", scope: !2, file: !2, line: 22, size: 320, align: 64, elements: !4102, identifier: "std.core.mem.allocator.TempAllocatorPage")
!4102 = !{!4103, !4104, !4105, !4106, !4107, !4108}
!4103 = !DIDerivedType(tag: DW_TAG_member, name: "prev_page", scope: !4101, file: !2, line: 24, baseType: !4100, size: 64, align: 64)
!4104 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !4101, file: !2, line: 25, baseType: !208, size: 64, align: 64, offset: 64)
!4105 = !DIDerivedType(tag: DW_TAG_member, name: "mark", scope: !4101, file: !2, line: 26, baseType: !67, size: 64, align: 64, offset: 128)
!4106 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4101, file: !2, line: 27, baseType: !67, size: 64, align: 64, offset: 192)
!4107 = !DIDerivedType(tag: DW_TAG_member, name: "ident", scope: !4101, file: !2, line: 28, baseType: !67, size: 64, align: 64, offset: 256)
!4108 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !4101, file: !2, line: 29, baseType: !4109, align: 8, offset: 320)
!4109 = !DICompositeType(tag: DW_TAG_array_type, baseType: !65, align: 8, elements: !4110)
!4110 = !{!4111}
!4111 = !DISubrange(count: 0, lowerBound: 0)
!4112 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !4096, file: !2, line: 14, baseType: !67, size: 64, align: 64, offset: 192)
!4113 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !4096, file: !2, line: 15, baseType: !67, size: 64, align: 64, offset: 256)
!4114 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !4096, file: !2, line: 16, baseType: !4109, align: 8, offset: 320)
!4115 = !DILocation(line: 592, column: 17, scope: !4094, inlinedAt: !4116)
!4116 = !DILocation(line: 55, column: 63, scope: !4084)
!4117 = !DILocation(line: 396, column: 6, scope: !4118, inlinedAt: !4119)
!4118 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !233, file: !233, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4119 = !DILocation(line: 592, column: 27, scope: !4094, inlinedAt: !4116)
!4120 = !DILocation(line: 398, column: 3, scope: !4121, inlinedAt: !4119)
!4121 = distinct !DILexicalBlock(scope: !4118, file: !233, line: 397, column: 2)
!4122 = !DILocation(line: 400, column: 9, scope: !4118, inlinedAt: !4119)
!4123 = !DILocalVariable(name: "original", scope: !4094, file: !2, line: 594, type: !4095, align: 8)
!4124 = !DILocation(line: 594, column: 18, scope: !4094, inlinedAt: !4116)
!4125 = !DILocation(line: 594, column: 29, scope: !4094, inlinedAt: !4116)
!4126 = !DILocation(line: 595, column: 7, scope: !4094, inlinedAt: !4116)
!4127 = !DILocation(line: 595, column: 18, scope: !4094, inlinedAt: !4116)
!4128 = !DILocation(line: 595, column: 45, scope: !4094, inlinedAt: !4116)
!4129 = !DILocalVariable(name: "mark", scope: !4094, file: !2, line: 597, type: !67, align: 8)
!4130 = !DILocation(line: 597, column: 6, scope: !4094, inlinedAt: !4116)
!4131 = !DILocation(line: 597, column: 13, scope: !4094, inlinedAt: !4116)
!4132 = !DILocalVariable(name: "str", scope: !4133, file: !2, line: 57, type: !4075, align: 8)
!4133 = distinct !DILexicalBlock(scope: !4084, file: !2, line: 56, column: 1)
!4134 = !DILocation(line: 57, column: 10, scope: !4133)
!4135 = !DILocation(line: 57, column: 44, scope: !4133)
!4136 = !DILocation(line: 57, column: 54, scope: !4133)
!4137 = !DILocation(line: 57, column: 16, scope: !4133)
!4138 = !DILocation(line: 58, column: 2, scope: !4133)
!4139 = !DILocation(line: 59, column: 22, scope: !4133)
!4140 = !DILocation(line: 59, column: 9, scope: !4133)
!4141 = !DILocation(line: 600, column: 17, scope: !4142, inlinedAt: !4116)
!4142 = distinct !DILexicalBlock(scope: !4094, file: !686, line: 599, column: 2)
!4143 = !DILocation(line: 600, column: 3, scope: !4142, inlinedAt: !4116)
!4144 = !DILocation(line: 602, column: 39, scope: !4142, inlinedAt: !4116)
!4145 = distinct !DISubprogram(name: "new_format", linkageName: "std.core.string.new_format", scope: !2, file: !2, line: 67, type: !4085, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!4146 = !DILocalVariable(name: "fmt", arg: 1, scope: !4145, file: !2, line: 67, type: !60)
!4147 = !DILocation(line: 67, column: 29, scope: !4145)
!4148 = !DILocalVariable(name: "args", arg: 2, scope: !4145, file: !2, line: 67, type: !4061)
!4149 = !DILocation(line: 67, column: 34, scope: !4145)
!4150 = !DILocalVariable(name: "allocator", arg: 3, scope: !4145, file: !2, line: 67, type: !205)
!4151 = !DILocation(line: 67, column: 53, scope: !4145)
!4152 = !DILocation(line: 67, column: 106, scope: !4145)
!4153 = !DILocation(line: 392, column: 27, scope: !4154, inlinedAt: !4155)
!4154 = distinct !DISubprogram(name: "heap", linkageName: "heap", scope: !233, file: !233, line: 392, scopeLine: 392, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4155 = !DILocation(line: 67, column: 119, scope: !4145)
!4156 = !DILocation(line: 67, column: 74, scope: !4145)
!4157 = distinct !DISubprogram(name: "tformat", linkageName: "std.core.string.tformat", scope: !2, file: !2, line: 74, type: !4158, scopeLine: 74, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!4158 = !DISubroutineType(types: !4159)
!4159 = !{!60, !60, !4061}
!4160 = !DILocalVariable(name: "fmt", arg: 1, scope: !4157, file: !2, line: 74, type: !60)
!4161 = !DILocation(line: 74, column: 26, scope: !4157)
!4162 = !DILocalVariable(name: "args", arg: 2, scope: !4157, file: !2, line: 74, type: !4061)
!4163 = !DILocation(line: 74, column: 31, scope: !4157)
!4164 = !DILocalVariable(name: "str", scope: !4157, file: !2, line: 76, type: !4075, align: 8)
!4165 = !DILocation(line: 76, column: 10, scope: !4157)
!4166 = !DILocation(line: 76, column: 44, scope: !4157)
!4167 = !DILocation(line: 76, column: 54, scope: !4157)
!4168 = !DILocation(line: 76, column: 16, scope: !4157)
!4169 = !DILocation(line: 77, column: 2, scope: !4157)
!4170 = !DILocation(line: 78, column: 9, scope: !4157)
!4171 = distinct !DISubprogram(name: "new_format_zstr", linkageName: "std.core.string.new_format_zstr", scope: !2, file: !2, line: 87, type: !4172, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!4172 = !DISubroutineType(types: !4173)
!4173 = !{!617, !60, !4061, !205}
!4174 = !DILocalVariable(name: "fmt", arg: 1, scope: !4171, file: !2, line: 87, type: !60)
!4175 = !DILocation(line: 87, column: 35, scope: !4171)
!4176 = !DILocalVariable(name: "args", arg: 2, scope: !4171, file: !2, line: 87, type: !4061)
!4177 = !DILocation(line: 87, column: 40, scope: !4171)
!4178 = !DILocalVariable(name: "allocator", arg: 3, scope: !4171, file: !2, line: 87, type: !205)
!4179 = !DILocation(line: 87, column: 59, scope: !4171)
!4180 = !DILocalVariable(name: "current", scope: !4181, file: !2, line: 592, type: !4095, align: 8)
!4181 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !686, file: !686, line: 590, scopeLine: 590, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !69)
!4182 = !DILocation(line: 592, column: 17, scope: !4181, inlinedAt: !4183)
!4183 = !DILocation(line: 87, column: 93, scope: !4171)
!4184 = !DILocation(line: 396, column: 6, scope: !4185, inlinedAt: !4186)
!4185 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !233, file: !233, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4186 = !DILocation(line: 592, column: 27, scope: !4181, inlinedAt: !4183)
!4187 = !DILocation(line: 398, column: 3, scope: !4188, inlinedAt: !4186)
!4188 = distinct !DILexicalBlock(scope: !4185, file: !233, line: 397, column: 2)
!4189 = !DILocation(line: 400, column: 9, scope: !4185, inlinedAt: !4186)
!4190 = !DILocalVariable(name: "original", scope: !4181, file: !2, line: 594, type: !4095, align: 8)
!4191 = !DILocation(line: 594, column: 18, scope: !4181, inlinedAt: !4183)
!4192 = !DILocation(line: 594, column: 29, scope: !4181, inlinedAt: !4183)
!4193 = !DILocation(line: 595, column: 7, scope: !4181, inlinedAt: !4183)
!4194 = !DILocation(line: 595, column: 18, scope: !4181, inlinedAt: !4183)
!4195 = !DILocation(line: 595, column: 45, scope: !4181, inlinedAt: !4183)
!4196 = !DILocalVariable(name: "mark", scope: !4181, file: !2, line: 597, type: !67, align: 8)
!4197 = !DILocation(line: 597, column: 6, scope: !4181, inlinedAt: !4183)
!4198 = !DILocation(line: 597, column: 13, scope: !4181, inlinedAt: !4183)
!4199 = !DILocalVariable(name: "str", scope: !4200, file: !2, line: 89, type: !4075, align: 8)
!4200 = distinct !DILexicalBlock(scope: !4171, file: !2, line: 88, column: 1)
!4201 = !DILocation(line: 89, column: 10, scope: !4200)
!4202 = !DILocation(line: 89, column: 44, scope: !4200)
!4203 = !DILocation(line: 89, column: 54, scope: !4200)
!4204 = !DILocation(line: 89, column: 16, scope: !4200)
!4205 = !DILocation(line: 90, column: 2, scope: !4200)
!4206 = !DILocation(line: 91, column: 23, scope: !4200)
!4207 = !DILocation(line: 91, column: 9, scope: !4200)
!4208 = !DILocation(line: 600, column: 17, scope: !4209, inlinedAt: !4183)
!4209 = distinct !DILexicalBlock(scope: !4181, file: !686, line: 599, column: 2)
!4210 = !DILocation(line: 600, column: 3, scope: !4209, inlinedAt: !4183)
!4211 = !DILocation(line: 602, column: 39, scope: !4209, inlinedAt: !4183)
!4212 = !DILocation(line: 603, column: 9, scope: !4209, inlinedAt: !4183)
!4213 = distinct !DISubprogram(name: "join_new", linkageName: "std.core.string.join_new", scope: !2, file: !2, line: 108, type: !4214, scopeLine: 108, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!4214 = !DISubroutineType(types: !4215)
!4215 = !{!60, !200, !60, !205}
!4216 = !DILocalVariable(name: "s", arg: 1, scope: !4213, file: !2, line: 108, type: !200)
!4217 = !DILocation(line: 108, column: 29, scope: !4213)
!4218 = !DILocalVariable(name: "joiner", arg: 2, scope: !4213, file: !2, line: 108, type: !60)
!4219 = !DILocation(line: 108, column: 39, scope: !4213)
!4220 = !DILocalVariable(name: "allocator", arg: 3, scope: !4213, file: !2, line: 108, type: !205)
!4221 = !DILocation(line: 108, column: 57, scope: !4213)
!4222 = !DILocation(line: 110, column: 7, scope: !4213)
!4223 = !DILocation(line: 252, column: 55, scope: !4224, inlinedAt: !4225)
!4224 = distinct !DISubprogram(name: "new_array_try", linkageName: "new_array_try", scope: !233, file: !233, line: 250, scopeLine: 250, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4225 = !DILocation(line: 244, column: 9, scope: !4226, inlinedAt: !4227)
!4226 = distinct !DISubprogram(name: "new_array", linkageName: "new_array", scope: !233, file: !233, line: 242, scopeLine: 242, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4227 = !DILocation(line: 112, column: 18, scope: !4228)
!4228 = distinct !DILexicalBlock(scope: !4213, file: !2, line: 111, column: 2)
!4229 = !DILocation(line: 252, column: 40, scope: !4224, inlinedAt: !4225)
!4230 = !DILocation(line: 79, column: 6, scope: !4231, inlinedAt: !4232)
!4231 = distinct !DISubprogram(name: "calloc_try", linkageName: "calloc_try", scope: !233, file: !233, line: 77, scopeLine: 77, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4232 = !DILocation(line: 252, column: 18, scope: !4224, inlinedAt: !4225)
!4233 = !DILocation(line: 79, column: 20, scope: !4231, inlinedAt: !4232)
!4234 = !DILocation(line: 28, column: 71, scope: !4235, inlinedAt: !4236)
!4235 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !233, file: !233, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4236 = !DILocation(line: 80, column: 9, scope: !4231, inlinedAt: !4232)
!4237 = !DILocation(line: 252, column: 67, scope: !4224, inlinedAt: !4225)
!4238 = !DILocation(line: 112, column: 11, scope: !4228)
!4239 = !DILocalVariable(name: "total_size", scope: !4213, file: !2, line: 115, type: !67, align: 8)
!4240 = !DILocation(line: 115, column: 6, scope: !4213)
!4241 = !DILocation(line: 115, column: 19, scope: !4213)
!4242 = !DILocation(line: 115, column: 32, scope: !4213)
!4243 = !DILocation(line: 116, column: 26, scope: !4244)
!4244 = distinct !DILexicalBlock(scope: !4213, file: !2, line: 116, column: 2)
!4245 = !DILocalVariable(name: ".temp", scope: !4244, file: !2, line: 116, type: !67, align: 8)
!4246 = !DILocalVariable(name: "str", scope: !4247, file: !2, line: 116, type: !203, align: 8)
!4247 = distinct !DILexicalBlock(scope: !4244, file: !2, line: 117, column: 2)
!4248 = !DILocation(line: 116, column: 20, scope: !4247)
!4249 = !DILocation(line: 116, column: 26, scope: !4247)
!4250 = !DILocation(line: 118, column: 3, scope: !4251)
!4251 = distinct !DILexicalBlock(scope: !4247, file: !2, line: 117, column: 2)
!4252 = !DILocation(line: 118, column: 17, scope: !4251)
!4253 = !DILocalVariable(name: "current", scope: !4254, file: !2, line: 592, type: !4095, align: 8)
!4254 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !686, file: !686, line: 590, scopeLine: 590, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !69)
!4255 = !DILocation(line: 592, column: 17, scope: !4254, inlinedAt: !4256)
!4256 = !DILocation(line: 120, column: 2, scope: !4213)
!4257 = !DILocation(line: 396, column: 6, scope: !4258, inlinedAt: !4259)
!4258 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !233, file: !233, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4259 = !DILocation(line: 592, column: 27, scope: !4254, inlinedAt: !4256)
!4260 = !DILocation(line: 398, column: 3, scope: !4261, inlinedAt: !4259)
!4261 = distinct !DILexicalBlock(scope: !4258, file: !233, line: 397, column: 2)
!4262 = !DILocation(line: 400, column: 9, scope: !4258, inlinedAt: !4259)
!4263 = !DILocalVariable(name: "original", scope: !4254, file: !2, line: 594, type: !4095, align: 8)
!4264 = !DILocation(line: 594, column: 18, scope: !4254, inlinedAt: !4256)
!4265 = !DILocation(line: 594, column: 29, scope: !4254, inlinedAt: !4256)
!4266 = !DILocation(line: 595, column: 7, scope: !4254, inlinedAt: !4256)
!4267 = !DILocation(line: 595, column: 18, scope: !4254, inlinedAt: !4256)
!4268 = !DILocation(line: 595, column: 45, scope: !4254, inlinedAt: !4256)
!4269 = !DILocalVariable(name: "mark", scope: !4254, file: !2, line: 597, type: !67, align: 8)
!4270 = !DILocation(line: 597, column: 6, scope: !4254, inlinedAt: !4256)
!4271 = !DILocation(line: 597, column: 13, scope: !4254, inlinedAt: !4256)
!4272 = !DILocalVariable(name: "res", scope: !4273, file: !2, line: 122, type: !4075, align: 8)
!4273 = distinct !DILexicalBlock(scope: !4213, file: !2, line: 121, column: 2)
!4274 = !DILocation(line: 122, column: 11, scope: !4273)
!4275 = !DILocation(line: 122, column: 45, scope: !4273)
!4276 = !DILocation(line: 122, column: 17, scope: !4273)
!4277 = !DILocation(line: 123, column: 14, scope: !4273)
!4278 = !DILocation(line: 123, column: 16, scope: !4273)
!4279 = !DILocation(line: 397, column: 22, scope: !4280, inlinedAt: !4282)
!4280 = distinct !DISubprogram(name: "append", linkageName: "append", scope: !4281, file: !4281, line: 387, scopeLine: 387, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4281 = !DIFile(filename: "dstring.c3", directory: "/usr/local/lib/c3/std/core")
!4282 = !DILocation(line: 123, column: 3, scope: !4273)
!4283 = !DILocation(line: 397, column: 4, scope: !4280, inlinedAt: !4282)
!4284 = !DILocation(line: 124, column: 27, scope: !4285)
!4285 = distinct !DILexicalBlock(scope: !4273, file: !2, line: 124, column: 3)
!4286 = !DILocation(line: 124, column: 29, scope: !4285)
!4287 = !DILocalVariable(name: ".temp", scope: !4285, file: !2, line: 124, type: !67, align: 8)
!4288 = !DILocalVariable(name: "str", scope: !4289, file: !2, line: 124, type: !203, align: 8)
!4289 = distinct !DILexicalBlock(scope: !4285, file: !2, line: 125, column: 3)
!4290 = !DILocation(line: 124, column: 21, scope: !4289)
!4291 = !DILocation(line: 124, column: 27, scope: !4289)
!4292 = !DILocation(line: 397, column: 22, scope: !4293, inlinedAt: !4294)
!4293 = distinct !DISubprogram(name: "append", linkageName: "append", scope: !4281, file: !4281, line: 387, scopeLine: 387, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4294 = !DILocation(line: 126, column: 4, scope: !4295)
!4295 = distinct !DILexicalBlock(scope: !4289, file: !2, line: 125, column: 3)
!4296 = !DILocation(line: 397, column: 4, scope: !4293, inlinedAt: !4294)
!4297 = !DILocation(line: 127, column: 16, scope: !4295)
!4298 = !DILocation(line: 397, column: 22, scope: !4299, inlinedAt: !4300)
!4299 = distinct !DISubprogram(name: "append", linkageName: "append", scope: !4281, file: !4281, line: 387, scopeLine: 387, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4300 = !DILocation(line: 127, column: 4, scope: !4295)
!4301 = !DILocation(line: 397, column: 4, scope: !4299, inlinedAt: !4300)
!4302 = !DILocation(line: 129, column: 23, scope: !4273)
!4303 = !DILocation(line: 129, column: 10, scope: !4273)
!4304 = !DILocation(line: 600, column: 17, scope: !4305, inlinedAt: !4256)
!4305 = distinct !DILexicalBlock(scope: !4254, file: !686, line: 599, column: 2)
!4306 = !DILocation(line: 600, column: 3, scope: !4305, inlinedAt: !4256)
!4307 = !DILocation(line: 602, column: 39, scope: !4305, inlinedAt: !4256)
!4308 = distinct !DISubprogram(name: "new_from_utf32", linkageName: "std.core.string.new_from_utf32", scope: !2, file: !2, line: 691, type: !4309, scopeLine: 691, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!4309 = !DISubroutineType(types: !4310)
!4310 = !{!345, !203, !4311, !205}
!4311 = !DICompositeType(tag: DW_TAG_structure_type, name: "uint[]", size: 128, align: 64, elements: !4312, identifier: "uint[]")
!4312 = !{!4313, !4314}
!4313 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4311, baseType: !2067, size: 64, align: 64)
!4314 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !4311, baseType: !67, size: 64, align: 64, offset: 64)
!4315 = !DILocalVariable(name: "utf32", arg: 1, scope: !4308, file: !2, line: 691, type: !971)
!4316 = !DILocation(line: 691, column: 36, scope: !4308)
!4317 = !DILocalVariable(name: "allocator", arg: 2, scope: !4308, file: !2, line: 691, type: !205)
!4318 = !DILocation(line: 691, column: 53, scope: !4308)
!4319 = !DILocalVariable(name: "len", scope: !4308, file: !2, line: 693, type: !67, align: 8)
!4320 = !DILocation(line: 693, column: 6, scope: !4308)
!4321 = !DILocation(line: 693, column: 36, scope: !4308)
!4322 = !DILocation(line: 693, column: 12, scope: !4308)
!4323 = !DILocalVariable(name: "data", scope: !4308, file: !2, line: 694, type: !64, align: 8)
!4324 = !DILocation(line: 694, column: 8, scope: !4308)
!4325 = !DILocation(line: 694, column: 48, scope: !4308)
!4326 = !DILocation(line: 62, column: 6, scope: !4327, inlinedAt: !4328)
!4327 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !233, file: !233, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4328 = !DILocation(line: 694, column: 15, scope: !4308)
!4329 = !DILocation(line: 62, column: 20, scope: !4327, inlinedAt: !4328)
!4330 = !DILocation(line: 28, column: 71, scope: !4331, inlinedAt: !4332)
!4331 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !233, file: !233, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4332 = !DILocation(line: 68, column: 10, scope: !4327, inlinedAt: !4328)
!4333 = !DILocation(line: 696, column: 31, scope: !4308)
!4334 = !DILocation(line: 696, column: 2, scope: !4308)
!4335 = !DILocation(line: 697, column: 2, scope: !4308)
!4336 = !DILocation(line: 697, column: 7, scope: !4308)
!4337 = !DILocation(line: 697, column: 14, scope: !4308)
!4338 = !DILocation(line: 698, column: 17, scope: !4308)
!4339 = !DILocation(line: 698, column: 23, scope: !4308)
!4340 = distinct !DISubprogram(name: "new_from_utf16", linkageName: "std.core.string.new_from_utf16", scope: !2, file: !2, line: 701, type: !4341, scopeLine: 701, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!4341 = !DISubroutineType(types: !4342)
!4342 = !{!345, !203, !4343, !205}
!4343 = !DICompositeType(tag: DW_TAG_structure_type, name: "ushort[]", size: 128, align: 64, elements: !4344, identifier: "ushort[]")
!4344 = !{!4345, !4346}
!4345 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4343, baseType: !945, size: 64, align: 64)
!4346 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !4343, baseType: !67, size: 64, align: 64, offset: 64)
!4347 = !DILocalVariable(name: "utf16", arg: 1, scope: !4340, file: !2, line: 701, type: !891)
!4348 = !DILocation(line: 701, column: 36, scope: !4340)
!4349 = !DILocalVariable(name: "allocator", arg: 2, scope: !4340, file: !2, line: 701, type: !205)
!4350 = !DILocation(line: 701, column: 53, scope: !4340)
!4351 = !DILocalVariable(name: "len", scope: !4340, file: !2, line: 703, type: !67, align: 8)
!4352 = !DILocation(line: 703, column: 6, scope: !4340)
!4353 = !DILocation(line: 703, column: 36, scope: !4340)
!4354 = !DILocation(line: 703, column: 12, scope: !4340)
!4355 = !DILocalVariable(name: "data", scope: !4340, file: !2, line: 704, type: !64, align: 8)
!4356 = !DILocation(line: 704, column: 8, scope: !4340)
!4357 = !DILocation(line: 704, column: 48, scope: !4340)
!4358 = !DILocation(line: 62, column: 6, scope: !4359, inlinedAt: !4360)
!4359 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !233, file: !233, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4360 = !DILocation(line: 704, column: 15, scope: !4340)
!4361 = !DILocation(line: 62, column: 20, scope: !4359, inlinedAt: !4360)
!4362 = !DILocation(line: 28, column: 71, scope: !4363, inlinedAt: !4364)
!4363 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !233, file: !233, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4364 = !DILocation(line: 68, column: 10, scope: !4359, inlinedAt: !4360)
!4365 = !DILocation(line: 706, column: 31, scope: !4340)
!4366 = !DILocation(line: 706, column: 2, scope: !4340)
!4367 = !DILocation(line: 705, column: 41, scope: !4368)
!4368 = distinct !DILexicalBlock(scope: !4340, file: !2, line: 705, column: 14)
!4369 = !DILocation(line: 101, column: 6, scope: !4370, inlinedAt: !4371)
!4370 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !233, file: !233, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4371 = !DILocation(line: 705, column: 14, scope: !4368)
!4372 = !DILocation(line: 101, column: 18, scope: !4370, inlinedAt: !4371)
!4373 = !DILocation(line: 105, column: 25, scope: !4370, inlinedAt: !4371)
!4374 = !DILocation(line: 105, column: 2, scope: !4370, inlinedAt: !4371)
!4375 = !DILocation(line: 707, column: 2, scope: !4340)
!4376 = !DILocation(line: 707, column: 7, scope: !4340)
!4377 = !DILocation(line: 707, column: 14, scope: !4340)
!4378 = !DILocation(line: 708, column: 17, scope: !4340)
!4379 = !DILocation(line: 708, column: 23, scope: !4340)
!4380 = distinct !DISubprogram(name: "new_from_wstring", linkageName: "std.core.string.new_from_wstring", scope: !2, file: !2, line: 711, type: !4381, scopeLine: 711, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!4381 = !DISubroutineType(types: !4382)
!4382 = !{!345, !203, !944, !205}
!4383 = !DILocalVariable(name: "wstring", arg: 1, scope: !4380, file: !2, line: 711, type: !944)
!4384 = !DILocation(line: 711, column: 37, scope: !4380)
!4385 = !DILocalVariable(name: "allocator", arg: 2, scope: !4380, file: !2, line: 711, type: !205)
!4386 = !DILocation(line: 711, column: 56, scope: !4380)
!4387 = !DILocalVariable(name: "utf16_len", scope: !4380, file: !2, line: 713, type: !67, align: 8)
!4388 = !DILocation(line: 713, column: 6, scope: !4380)
!4389 = !DILocation(line: 714, column: 2, scope: !4380)
!4390 = !DILocation(line: 714, column: 9, scope: !4391)
!4391 = distinct !DILexicalBlock(scope: !4380, file: !2, line: 714, column: 2)
!4392 = !DILocation(line: 714, column: 17, scope: !4391)
!4393 = !DILocation(line: 714, column: 34, scope: !4391)
!4394 = !DILocalVariable(name: "utf16", scope: !4380, file: !2, line: 715, type: !891, align: 8)
!4395 = !DILocation(line: 715, column: 11, scope: !4380)
!4396 = !DILocation(line: 715, column: 19, scope: !4380)
!4397 = !DILocation(line: 715, column: 28, scope: !4380)
!4398 = !DILocation(line: 716, column: 9, scope: !4380)
!4399 = distinct !DISubprogram(name: "temp_from_wstring", linkageName: "std.core.string.temp_from_wstring", scope: !2, file: !2, line: 719, type: !4400, scopeLine: 719, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!4400 = !DISubroutineType(types: !4401)
!4401 = !{!345, !203, !944}
!4402 = !DILocalVariable(name: "wstring", arg: 1, scope: !4399, file: !2, line: 719, type: !944)
!4403 = !DILocation(line: 719, column: 38, scope: !4399)
!4404 = !DILocation(line: 396, column: 6, scope: !4405, inlinedAt: !4406)
!4405 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !233, file: !233, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4406 = !DILocation(line: 719, column: 76, scope: !4399)
!4407 = !DILocation(line: 398, column: 3, scope: !4408, inlinedAt: !4406)
!4408 = distinct !DILexicalBlock(scope: !4405, file: !233, line: 397, column: 2)
!4409 = !DILocation(line: 400, column: 9, scope: !4405, inlinedAt: !4406)
!4410 = !DILocation(line: 719, column: 50, scope: !4399)
!4411 = distinct !DISubprogram(name: "temp_from_utf16", linkageName: "std.core.string.temp_from_utf16", scope: !2, file: !2, line: 720, type: !4412, scopeLine: 720, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !69)
!4412 = !DISubroutineType(types: !4413)
!4413 = !{!345, !203, !4343}
!4414 = !DILocalVariable(name: "utf16", arg: 1, scope: !4411, file: !2, line: 720, type: !891)
!4415 = !DILocation(line: 720, column: 37, scope: !4411)
!4416 = !DILocation(line: 396, column: 6, scope: !4417, inlinedAt: !4418)
!4417 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !233, file: !233, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4418 = !DILocation(line: 720, column: 69, scope: !4411)
!4419 = !DILocation(line: 398, column: 3, scope: !4420, inlinedAt: !4418)
!4420 = distinct !DILexicalBlock(scope: !4417, file: !233, line: 397, column: 2)
!4421 = !DILocation(line: 400, column: 9, scope: !4417, inlinedAt: !4418)
!4422 = !DILocation(line: 720, column: 47, scope: !4411)
