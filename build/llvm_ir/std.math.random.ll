; ModuleID = 'std::math::random'
source_filename = "std::math::random"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%.introspect = type { i8, i64, ptr, i64, i64, i64, [0 x i64] }
%any = type { ptr, i64 }
%"char[]" = type { ptr, i64 }
%"any[]" = type { ptr, i64 }
%"ulong[]" = type { ptr, i64 }

$std.math.random.srand = comdat any

$std.math.random.rand = comdat any

$std.math.random.rand_in_range = comdat any

$std.math.random.rnd = comdat any

$std.math.random.Pcg128Random.set_seed = comdat any

$std.math.random.Pcg128Random.next_long = comdat any

$std.math.random.Pcg128Random.next_bytes = comdat any

$std.math.random.Pcg128Random.next_int128 = comdat any

$std.math.random.Pcg128Random.next_int = comdat any

$std.math.random.Pcg128Random.next_short = comdat any

$std.math.random.Pcg128Random.next_byte = comdat any

$std.math.random.Pcg64Random.set_seed = comdat any

$std.math.random.Pcg64Random.next_int = comdat any

$std.math.random.Pcg64Random.next_bytes = comdat any

$std.math.random.Pcg64Random.next_int128 = comdat any

$std.math.random.Pcg64Random.next_long = comdat any

$std.math.random.Pcg64Random.next_short = comdat any

$std.math.random.Pcg64Random.next_byte = comdat any

$std.math.random.Pcg32Random.set_seed = comdat any

$std.math.random.Pcg32Random.next_short = comdat any

$std.math.random.Pcg32Random.next_bytes = comdat any

$std.math.random.Pcg32Random.next_int128 = comdat any

$std.math.random.Pcg32Random.next_long = comdat any

$std.math.random.Pcg32Random.next_int = comdat any

$std.math.random.Pcg32Random.next_byte = comdat any

$std.math.random.Pcg16Random.set_seed = comdat any

$std.math.random.Pcg16Random.next_byte = comdat any

$std.math.random.Pcg16Random.next_bytes = comdat any

$std.math.random.Pcg16Random.next_int128 = comdat any

$std.math.random.Pcg16Random.next_long = comdat any

$std.math.random.Pcg16Random.next_int = comdat any

$std.math.random.Pcg16Random.next_short = comdat any

$std.math.random.Mcg128Random.set_seed = comdat any

$std.math.random.Mcg128Random.next_bytes = comdat any

$std.math.random.Mcg128Random.next_long = comdat any

$std.math.random.Mcg128Random.next_int128 = comdat any

$std.math.random.Mcg128Random.next_int = comdat any

$std.math.random.Mcg128Random.next_short = comdat any

$std.math.random.Mcg128Random.next_byte = comdat any

$std.math.random.Mcg64Random.set_seed = comdat any

$std.math.random.Mcg64Random.next_bytes = comdat any

$std.math.random.Mcg64Random.next_int = comdat any

$std.math.random.Mcg64Random.next_int128 = comdat any

$std.math.random.Mcg64Random.next_long = comdat any

$std.math.random.Mcg64Random.next_short = comdat any

$std.math.random.Mcg64Random.next_byte = comdat any

$std.math.random.Mcg32Random.set_seed = comdat any

$std.math.random.Mcg32Random.next_short = comdat any

$std.math.random.Mcg32Random.next_bytes = comdat any

$std.math.random.Mcg32Random.next_int128 = comdat any

$std.math.random.Mcg32Random.next_long = comdat any

$std.math.random.Mcg32Random.next_int = comdat any

$std.math.random.Mcg32Random.next_byte = comdat any

$std.math.random.Mcg16Random.set_seed = comdat any

$std.math.random.Mcg16Random.next_byte = comdat any

$std.math.random.Mcg16Random.next_bytes = comdat any

$std.math.random.Mcg16Random.next_int128 = comdat any

$std.math.random.Mcg16Random.next_long = comdat any

$std.math.random.Mcg16Random.next_int = comdat any

$std.math.random.Mcg16Random.next_short = comdat any

$std.math.random.seeder = comdat any

$std.math.random.entropy = comdat any

$std.math.random.Lcg128Random.set_seed = comdat any

$std.math.random.Lcg128Random.next_long = comdat any

$std.math.random.Lcg128Random.next_bytes = comdat any

$std.math.random.Lcg128Random.next_int128 = comdat any

$std.math.random.Lcg128Random.next_int = comdat any

$std.math.random.Lcg128Random.next_short = comdat any

$std.math.random.Lcg128Random.next_byte = comdat any

$std.math.random.Lcg64Random.set_seed = comdat any

$std.math.random.Lcg64Random.next_int = comdat any

$std.math.random.Lcg64Random.next_bytes = comdat any

$std.math.random.Lcg64Random.next_int128 = comdat any

$std.math.random.Lcg64Random.next_long = comdat any

$std.math.random.Lcg64Random.next_short = comdat any

$std.math.random.Lcg64Random.next_byte = comdat any

$std.math.random.Lcg32Random.set_seed = comdat any

$std.math.random.Lcg32Random.next_short = comdat any

$std.math.random.Lcg32Random.next_bytes = comdat any

$std.math.random.Lcg32Random.next_int128 = comdat any

$std.math.random.Lcg32Random.next_long = comdat any

$std.math.random.Lcg32Random.next_int = comdat any

$std.math.random.Lcg32Random.next_byte = comdat any

$std.math.random.Lcg16Random.set_seed = comdat any

$std.math.random.Lcg16Random.next_byte = comdat any

$std.math.random.Lcg16Random.next_bytes = comdat any

$std.math.random.Lcg16Random.next_int128 = comdat any

$std.math.random.Lcg16Random.next_long = comdat any

$std.math.random.Lcg16Random.next_int = comdat any

$std.math.random.Lcg16Random.next_short = comdat any

$std.math.random.Msws128Random.set_seed = comdat any

$std.math.random.Msws128Random.next_int128 = comdat any

$std.math.random.Msws128Random.next_bytes = comdat any

$std.math.random.Msws128Random.next_long = comdat any

$std.math.random.Msws128Random.next_int = comdat any

$std.math.random.Msws128Random.next_short = comdat any

$std.math.random.Msws128Random.next_byte = comdat any

$std.math.random.Msws64Random.set_seed = comdat any

$std.math.random.Msws64Random.next_long = comdat any

$std.math.random.Msws64Random.next_bytes = comdat any

$std.math.random.Msws64Random.next_int128 = comdat any

$std.math.random.Msws64Random.next_int = comdat any

$std.math.random.Msws64Random.next_short = comdat any

$std.math.random.Msws64Random.next_byte = comdat any

$std.math.random.Msws32Random.set_seed = comdat any

$std.math.random.Msws32Random.next_int = comdat any

$std.math.random.Msws32Random.next_bytes = comdat any

$std.math.random.Msws32Random.next_int128 = comdat any

$std.math.random.Msws32Random.next_long = comdat any

$std.math.random.Msws32Random.next_short = comdat any

$std.math.random.Msws32Random.next_byte = comdat any

$std.math.random.Msws16Random.set_seed = comdat any

$std.math.random.Msws16Random.next_short = comdat any

$std.math.random.Msws16Random.next_bytes = comdat any

$std.math.random.Msws16Random.next_int128 = comdat any

$std.math.random.Msws16Random.next_long = comdat any

$std.math.random.Msws16Random.next_int = comdat any

$std.math.random.Msws16Random.next_byte = comdat any

$std.math.random.Msws8Random.set_seed = comdat any

$std.math.random.Msws8Random.next_byte = comdat any

$std.math.random.Msws8Random.next_bytes = comdat any

$std.math.random.Msws8Random.next_int128 = comdat any

$std.math.random.Msws8Random.next_long = comdat any

$std.math.random.Msws8Random.next_int = comdat any

$std.math.random.Msws8Random.next_short = comdat any

$std.math.random.SimpleRandom.set_seed = comdat any

$std.math.random.SimpleRandom.next_int = comdat any

$std.math.random.SimpleRandom.next_bytes = comdat any

$std.math.random.SimpleRandom.next_int128 = comdat any

$std.math.random.SimpleRandom.next_long = comdat any

$std.math.random.SimpleRandom.next_short = comdat any

$std.math.random.SimpleRandom.next_byte = comdat any

$std.math.random.Sfc128Random.set_seed = comdat any

$std.math.random.Sfc128Random.next_int128 = comdat any

$std.math.random.Sfc128Random.next_bytes = comdat any

$std.math.random.Sfc128Random.next_long = comdat any

$std.math.random.Sfc128Random.next_int = comdat any

$std.math.random.Sfc128Random.next_short = comdat any

$std.math.random.Sfc128Random.next_byte = comdat any

$std.math.random.Sfc64Random.set_seed = comdat any

$std.math.random.Sfc64Random.next_long = comdat any

$std.math.random.Sfc64Random.next_bytes = comdat any

$std.math.random.Sfc64Random.next_int128 = comdat any

$std.math.random.Sfc64Random.next_int = comdat any

$std.math.random.Sfc64Random.next_short = comdat any

$std.math.random.Sfc64Random.next_byte = comdat any

$std.math.random.Sfc32Random.set_seed = comdat any

$std.math.random.Sfc32Random.next_int = comdat any

$std.math.random.Sfc32Random.next_bytes = comdat any

$std.math.random.Sfc32Random.next_int128 = comdat any

$std.math.random.Sfc32Random.next_long = comdat any

$std.math.random.Sfc32Random.next_short = comdat any

$std.math.random.Sfc32Random.next_byte = comdat any

$std.math.random.Sfc16Random.set_seed = comdat any

$std.math.random.Sfc16Random.next_short = comdat any

$std.math.random.Sfc16Random.next_bytes = comdat any

$std.math.random.Sfc16Random.next_int128 = comdat any

$std.math.random.Sfc16Random.next_long = comdat any

$std.math.random.Sfc16Random.next_int = comdat any

$std.math.random.Sfc16Random.next_byte = comdat any

$std.math.random.Sfc8Random.set_seed = comdat any

$std.math.random.Sfc8Random.next_byte = comdat any

$std.math.random.Sfc8Random.next_bytes = comdat any

$std.math.random.Sfc8Random.next_int128 = comdat any

$std.math.random.Sfc8Random.next_long = comdat any

$std.math.random.Sfc8Random.next_int = comdat any

$std.math.random.Sfc8Random.next_short = comdat any

$"$ct.std.math.random.Pcg128Random" = comdat any

$"$ct.uint128" = comdat any

$"$ct.std.math.random.Pcg64Random" = comdat any

$"$ct.ulong" = comdat any

$"$ct.std.math.random.Pcg32Random" = comdat any

$"$ct.uint" = comdat any

$"$ct.std.math.random.Pcg16Random" = comdat any

$"$ct.ushort" = comdat any

$"$ct.std.math.random.Mcg128Random" = comdat any

$"$ct.std.math.random.Mcg64Random" = comdat any

$"$ct.std.math.random.Mcg32Random" = comdat any

$"$ct.std.math.random.Mcg16Random" = comdat any

$"$ct.std.math.random.Lcg128Random" = comdat any

$"$ct.std.math.random.Lcg64Random" = comdat any

$"$ct.std.math.random.Lcg32Random" = comdat any

$"$ct.std.math.random.Lcg16Random" = comdat any

$"$ct.std.math.random.Msws128Random" = comdat any

$"$ct.std.math.random.Msws64Random" = comdat any

$"$ct.std.math.random.Msws32Random" = comdat any

$"$ct.std.math.random.Msws16Random" = comdat any

$"$ct.std.math.random.Msws8Random" = comdat any

$"$ct.std.math.random.SimpleRandom" = comdat any

$"$ct.std.math.random.Sfc128Random" = comdat any

$"$ct.a4$uint128" = comdat any

$"$ct.std.math.random.Sfc64Random" = comdat any

$"$ct.a4$ulong" = comdat any

$"$ct.std.math.random.Sfc32Random" = comdat any

$"$ct.a4$uint" = comdat any

$"$ct.std.math.random.Sfc16Random" = comdat any

$"$ct.a4$ushort" = comdat any

$"$ct.std.math.random.Sfc8Random" = comdat any

$"$ct.a4$char" = comdat any

$"$ct.char" = comdat any

$std.math.random.default_random = comdat any

$std.math.random.default_random_initialized = comdat any

$"$ct.long" = comdat any

$"$ct.dyn.std.math.random.Pcg128Random.set_seed" = comdat any

$"$sel.set_seed" = comdat any

$"$ct.dyn.std.math.random.Pcg128Random.next_long" = comdat any

$"$sel.next_long" = comdat any

$"$ct.dyn.std.math.random.Pcg128Random.next_bytes" = comdat any

$"$sel.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Pcg128Random.next_int128" = comdat any

$"$sel.next_int128" = comdat any

$"$ct.dyn.std.math.random.Pcg128Random.next_int" = comdat any

$"$sel.next_int" = comdat any

$"$ct.dyn.std.math.random.Pcg128Random.next_short" = comdat any

$"$sel.next_short" = comdat any

$"$ct.dyn.std.math.random.Pcg128Random.next_byte" = comdat any

$"$sel.next_byte" = comdat any

$"$ct.dyn.std.math.random.Pcg64Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Pcg64Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Pcg64Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Pcg64Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Pcg64Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Pcg64Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Pcg64Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Pcg32Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Pcg32Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Pcg32Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Pcg32Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Pcg32Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Pcg32Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Pcg32Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Pcg16Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Pcg16Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Pcg16Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Pcg16Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Pcg16Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Pcg16Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Pcg16Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Mcg128Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Mcg128Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Mcg128Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Mcg128Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Mcg128Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Mcg128Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Mcg128Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Mcg64Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Mcg64Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Mcg64Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Mcg64Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Mcg64Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Mcg64Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Mcg64Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Mcg32Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Mcg32Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Mcg32Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Mcg32Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Mcg32Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Mcg32Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Mcg32Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Mcg16Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Mcg16Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Mcg16Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Mcg16Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Mcg16Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Mcg16Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Mcg16Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Lcg128Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Lcg128Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Lcg128Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Lcg128Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Lcg128Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Lcg128Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Lcg128Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Lcg64Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Lcg64Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Lcg64Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Lcg64Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Lcg64Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Lcg64Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Lcg64Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Lcg32Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Lcg32Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Lcg32Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Lcg32Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Lcg32Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Lcg32Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Lcg32Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Lcg16Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Lcg16Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Lcg16Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Lcg16Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Lcg16Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Lcg16Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Lcg16Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Msws128Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Msws128Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Msws128Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Msws128Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Msws128Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Msws128Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Msws128Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Msws64Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Msws64Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Msws64Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Msws64Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Msws64Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Msws64Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Msws64Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Msws32Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Msws32Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Msws32Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Msws32Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Msws32Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Msws32Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Msws32Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Msws16Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Msws16Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Msws16Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Msws16Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Msws16Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Msws16Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Msws16Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Msws8Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Msws8Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Msws8Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Msws8Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Msws8Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Msws8Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Msws8Random.next_short" = comdat any

$"$ct.dyn.std.math.random.SimpleRandom.set_seed" = comdat any

$"$ct.dyn.std.math.random.SimpleRandom.next_int" = comdat any

$"$ct.dyn.std.math.random.SimpleRandom.next_bytes" = comdat any

$"$ct.dyn.std.math.random.SimpleRandom.next_int128" = comdat any

$"$ct.dyn.std.math.random.SimpleRandom.next_long" = comdat any

$"$ct.dyn.std.math.random.SimpleRandom.next_short" = comdat any

$"$ct.dyn.std.math.random.SimpleRandom.next_byte" = comdat any

$"$ct.dyn.std.math.random.Sfc128Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Sfc128Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Sfc128Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Sfc128Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Sfc128Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Sfc128Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Sfc128Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Sfc64Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Sfc64Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Sfc64Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Sfc64Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Sfc64Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Sfc64Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Sfc64Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Sfc32Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Sfc32Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Sfc32Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Sfc32Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Sfc32Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Sfc32Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Sfc32Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Sfc16Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Sfc16Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Sfc16Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Sfc16Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Sfc16Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Sfc16Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Sfc16Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Sfc8Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Sfc8Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Sfc8Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Sfc8Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Sfc8Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Sfc8Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Sfc8Random.next_short" = comdat any

@"$ct.std.math.random.Pcg128Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.uint128" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.uint128" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 16, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Pcg64Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.ulong" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Pcg32Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.uint" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Pcg16Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 2, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.ushort" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 2, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Mcg128Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.uint128" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Mcg64Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Mcg32Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Mcg16Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 2, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Lcg128Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.uint128" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Lcg64Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Lcg32Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Lcg16Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 2, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Msws128Random" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 64, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Msws64Random" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 32, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Msws32Random" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 16, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Msws16Random" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 8, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Msws8Random" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 4, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.SimpleRandom" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Sfc128Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 64, i64 ptrtoint (ptr @"$ct.a4$uint128" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.a4$uint128" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 64, i64 ptrtoint (ptr @"$ct.uint128" to i64), i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Sfc64Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 32, i64 ptrtoint (ptr @"$ct.a4$ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.a4$ulong" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 32, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Sfc32Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.a4$uint" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.a4$uint" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Sfc16Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.a4$ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.a4$ushort" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Sfc8Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.a4$char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.a4$char" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.char" to i64), i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.char" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@std.math.random.default_random = weak thread_local global [4 x i64] zeroinitializer, comdat, align 16, !dbg !0
@std.math.random.default_random_initialized = weak thread_local local_unnamed_addr global i8 0, comdat, align 1, !dbg !9
@.panic_msg = internal constant [39 x i8] c"@require \22is_random(random)\22 violated.\00", align 1
@.file = internal constant [15 x i8] c"math_random.c3\00", align 1
@.func = internal constant [5 x i8] c"rand\00", align 1
@std.core.builtin.panic = extern_weak global ptr, align 8
@.panic_msg.2 = internal constant [31 x i8] c"@require \22range > 0\22 violated.\00", align 1
@.panic_msg.3 = internal constant [36 x i8] c"Shift amount out of range (was %s).\00", align 1
@.panic_msg.4 = internal constant [32 x i8] c"@require \22max >= min\22 violated.\00", align 1
@.func.5 = internal constant [14 x i8] c"rand_in_range\00", align 1
@.func.6 = internal constant [4 x i8] c"rnd\00", align 1
@std.math.random.ODD_PHI128 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 16, !dbg !12
@std.math.random.ODD_PHI64 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !16
@std.math.random.ODD_PHI32 = internal unnamed_addr constant i32 -1640531527, align 4, !dbg !18
@std.math.random.ODD_PHI16 = internal unnamed_addr constant i16 -25033, align 2, !dbg !21
@std.math.random.MUL_LCG128 = internal unnamed_addr constant i128 -48899967401452674293065485854872568811, align 16, !dbg !24
@std.math.random.MUL_LCG64 = internal unnamed_addr constant i64 -3372029247567499371, align 8, !dbg !26
@std.math.random.MUL_LCG32 = internal unnamed_addr constant i32 -1856014347, align 4, !dbg !28
@std.math.random.MUL_LCG16 = internal unnamed_addr constant i16 -28323, align 2, !dbg !30
@.panic_msg.14 = internal constant [63 x i8] c"Reference parameter 'self' was passed a null pointer argument.\00", align 1
@.file.15 = internal constant [12 x i8] c"math.pcg.c3\00", align 1
@.func.16 = internal constant [9 x i8] c"set_seed\00", align 1
@.panic_msg.17 = internal constant [46 x i8] c"Dereference of null pointer, 'self' was null.\00", align 1
@.panic_msg.18 = internal constant [95 x i8] c"Unaligned access: ptr %% %s = %s, use @unaligned_load / @unaligned_store for unaligned access.\00", align 1
@.func.19 = internal constant [10 x i8] c"next_long\00", align 1
@next_long.ROT_SHIFT = internal unnamed_addr constant i32 58, align 4, !dbg !32
@.panic_msg.20 = internal constant [43 x i8] c"Dereference of null pointer, 's' was null.\00", align 1
@.func.21 = internal constant [11 x i8] c"next_bytes\00", align 1
@.panic_msg.22 = internal constant [35 x i8] c"@require \22bytes.len > 0\22 violated.\00", align 1
@.panic_msg.23 = internal constant [62 x i8] c"Index exceeds array length (array had size %d, index was %d).\00", align 1
@.panic_msg.24 = internal constant [39 x i8] c"Slice copy length mismatch (%d != %d).\00", align 1
@"$ct.long" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.25 = internal constant [61 x i8] c"End index out of bounds (end index of %d exceeds size of %d)\00", align 1
@.str = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.26 = private unnamed_addr constant [12 x i8] c"math.pcg.c3\00", align 1
@.str.27 = private unnamed_addr constant [24 x i8] c"Pcg128Random.next_bytes\00", align 1
@.func.28 = internal constant [12 x i8] c"next_int128\00", align 1
@.func.29 = internal constant [9 x i8] c"next_int\00", align 1
@.func.30 = internal constant [11 x i8] c"next_short\00", align 1
@.func.31 = internal constant [10 x i8] c"next_byte\00", align 1
@next_int.ROT_SHIFT = internal unnamed_addr constant i32 27, align 4, !dbg !35
@.str.32 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.33 = private unnamed_addr constant [12 x i8] c"math.pcg.c3\00", align 1
@.str.34 = private unnamed_addr constant [23 x i8] c"Pcg64Random.next_bytes\00", align 1
@next_short.ROT_SHIFT = internal unnamed_addr constant i32 12, align 4, !dbg !37
@.str.35 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.36 = private unnamed_addr constant [12 x i8] c"math.pcg.c3\00", align 1
@.str.37 = private unnamed_addr constant [23 x i8] c"Pcg32Random.next_bytes\00", align 1
@next_byte.ROT_SHIFT = internal unnamed_addr constant i32 5, align 4, !dbg !39
@.str.38 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c"math.pcg.c3\00", align 1
@.str.40 = private unnamed_addr constant [23 x i8] c"Pcg16Random.next_bytes\00", align 1
@std.math.random.MUL_MCG128 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 16, !dbg !41
@std.math.random.MUL_MCG64 = internal unnamed_addr constant i64 -1065810590584100411, align 8, !dbg !44
@std.math.random.MUL_MCG32 = internal unnamed_addr constant i32 -1814600227, align 4, !dbg !46
@std.math.random.MUL_MCG16 = internal unnamed_addr constant i16 -27691, align 2, !dbg !48
@.file.44 = internal constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.45 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.47 = private unnamed_addr constant [24 x i8] c"Mcg128Random.next_bytes\00", align 1
@.str.48 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.49 = private unnamed_addr constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.50 = private unnamed_addr constant [23 x i8] c"Mcg64Random.next_bytes\00", align 1
@.str.51 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.52 = private unnamed_addr constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"Mcg32Random.next_bytes\00", align 1
@.str.54 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.55 = private unnamed_addr constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.56 = private unnamed_addr constant [23 x i8] c"Mcg16Random.next_bytes\00", align 1
@std.math.random.ODD_PHI64.59 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !50
@std.math.random.MUL_MCG64.60 = internal unnamed_addr constant i64 -1065810590584100411, align 8, !dbg !53
@std.math.random.MUL_LCG64.61 = internal unnamed_addr constant i64 -3372029247567499371, align 8, !dbg !55
@std.core.mem.allocator.thread_temp_allocator = extern_weak thread_local global ptr, align 8
@.file.62 = internal constant [15 x i8] c"math.seeder.c3\00", align 1
@.func.63 = internal constant [7 x i8] c"seeder\00", align 1
@.panic_msg.64 = internal constant [11 x i8] c"% by zero.\00", align 1
@.panic_msg.65 = internal constant [60 x i8] c"Array index out of bounds (array had size %d, index was %d)\00", align 1
@.panic_msg.66 = internal constant [39 x i8] c"Negative array indexing (index was %d)\00", align 1
@.panic_msg.67 = internal constant [64 x i8] c"Dereference of null pointer, 'char[8]*)&input[i * 8]' was null.\00", align 1
@.panic_msg.68 = internal constant [96 x i8] c"@require \22len == 0 || dst + len <= src || src + len <= dst\22 violated: 'Ranges may not overlap'.\00", align 1
@.file.69 = internal constant [7 x i8] c"mem.c3\00", align 1
@entropy.random_int = internal unnamed_addr global i32 0, align 4, !dbg !57
@.str.70 = private unnamed_addr constant [9 x i8] c"00:12:01\00", align 1
@.panic_msg.71 = internal constant [54 x i8] c"Dereference of null pointer, '$Type*)&expr' was null.\00", align 1
@.file.72 = internal constant [11 x i8] c"builtin.c3\00", align 1
@.func.73 = internal constant [8 x i8] c"entropy\00", align 1
@std.core.mem.allocator.thread_allocator = extern_weak thread_local global %any, align 8
@std.math.random.ODD_PHI128.81 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 16, !dbg !59
@std.math.random.ODD_PHI64.82 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !62
@std.math.random.ODD_PHI32.83 = internal unnamed_addr constant i32 -1640531527, align 4, !dbg !64
@std.math.random.ODD_PHI16.84 = internal unnamed_addr constant i16 -25033, align 2, !dbg !66
@std.math.random.MUL_LCG128.85 = internal unnamed_addr constant i128 -48899967401452674293065485854872568811, align 16, !dbg !68
@std.math.random.MUL_LCG64.86 = internal unnamed_addr constant i64 -3372029247567499371, align 8, !dbg !70
@std.math.random.MUL_LCG32.87 = internal unnamed_addr constant i32 -1856014347, align 4, !dbg !72
@std.math.random.MUL_LCG16.88 = internal unnamed_addr constant i16 -28323, align 2, !dbg !74
@.file.89 = internal constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.90 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.91 = private unnamed_addr constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.92 = private unnamed_addr constant [24 x i8] c"Lcg128Random.next_bytes\00", align 1
@.str.93 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.94 = private unnamed_addr constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.95 = private unnamed_addr constant [23 x i8] c"Lcg64Random.next_bytes\00", align 1
@.str.96 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.97 = private unnamed_addr constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.98 = private unnamed_addr constant [23 x i8] c"Lcg32Random.next_bytes\00", align 1
@.str.99 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.100 = private unnamed_addr constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.101 = private unnamed_addr constant [23 x i8] c"Lcg16Random.next_bytes\00", align 1
@std.math.random.ODD_PHI128.106 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 16, !dbg !76
@std.math.random.ODD_PHI64.107 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !79
@std.math.random.ODD_PHI32.108 = internal unnamed_addr constant i32 -1640531527, align 4, !dbg !81
@std.math.random.ODD_PHI16.109 = internal unnamed_addr constant i16 -25033, align 2, !dbg !83
@std.math.random.ODD_PHI8 = internal unnamed_addr constant i8 -97, align 1, !dbg !85
@.file.110 = internal constant [13 x i8] c"math.msws.c3\00", align 1
@.str.111 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.112 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.113 = private unnamed_addr constant [25 x i8] c"Msws128Random.next_bytes\00", align 1
@.str.114 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.115 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.116 = private unnamed_addr constant [24 x i8] c"Msws64Random.next_bytes\00", align 1
@.str.117 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.118 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.119 = private unnamed_addr constant [24 x i8] c"Msws32Random.next_bytes\00", align 1
@.str.120 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.121 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.122 = private unnamed_addr constant [24 x i8] c"Msws16Random.next_bytes\00", align 1
@.str.123 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.124 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.125 = private unnamed_addr constant [23 x i8] c"Msws8Random.next_bytes\00", align 1
@std.math.random.SIMPLE_RANDOM_MULTIPLIER = internal unnamed_addr constant i64 25214903917, align 8, !dbg !88
@std.math.random.SIMPLE_RANDOM_ADDEND = internal unnamed_addr constant i64 11, align 8, !dbg !92
@std.math.random.SIMPLE_RANDOM_MASK = internal unnamed_addr constant i64 281474976710655, align 8, !dbg !94
@.file.128 = internal constant [22 x i8] c"math.simple_random.c3\00", align 1
@.str.129 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.130 = private unnamed_addr constant [22 x i8] c"math.simple_random.c3\00", align 1
@.str.131 = private unnamed_addr constant [24 x i8] c"SimpleRandom.next_bytes\00", align 1
@std.math.random.ODD_PHI128.136 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 16, !dbg !96
@std.math.random.ODD_PHI64.137 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !98
@std.math.random.ODD_PHI32.138 = internal unnamed_addr constant i32 -1640531527, align 4, !dbg !100
@std.math.random.ODD_PHI16.139 = internal unnamed_addr constant i16 -25033, align 2, !dbg !102
@std.math.random.ODD_PHI8.140 = internal unnamed_addr constant i8 -97, align 1, !dbg !104
@.file.141 = internal constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.142 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.143 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.144 = private unnamed_addr constant [24 x i8] c"Sfc128Random.next_bytes\00", align 1
@.str.145 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.146 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.147 = private unnamed_addr constant [23 x i8] c"Sfc64Random.next_bytes\00", align 1
@.panic_msg.148 = internal constant [62 x i8] c"Reference parameter 'sfc' was passed a null pointer argument.\00", align 1
@.str.149 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.150 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.151 = private unnamed_addr constant [23 x i8] c"Sfc32Random.next_bytes\00", align 1
@.panic_msg.152 = internal constant [63 x i8] c"Reference parameter 'seed' was passed a null pointer argument.\00", align 1
@.str.153 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.154 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.155 = private unnamed_addr constant [23 x i8] c"Sfc16Random.next_bytes\00", align 1
@.str.156 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.157 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.158 = private unnamed_addr constant [22 x i8] c"Sfc8Random.next_bytes\00", align 1
@"$ct.dyn.std.math.random.Pcg128Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.set_seed" = linkonce_odr constant [9 x i8] c"set_seed\00", comdat, align 1
@"$ct.dyn.std.math.random.Pcg128Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.next_long" = linkonce_odr constant [10 x i8] c"next_long\00", comdat, align 1
@"$ct.dyn.std.math.random.Pcg128Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.next_bytes" = linkonce_odr constant [11 x i8] c"next_bytes\00", comdat, align 1
@"$ct.dyn.std.math.random.Pcg128Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.next_int128" = linkonce_odr constant [12 x i8] c"next_int128\00", comdat, align 1
@"$ct.dyn.std.math.random.Pcg128Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.next_int" = linkonce_odr constant [9 x i8] c"next_int\00", comdat, align 1
@"$ct.dyn.std.math.random.Pcg128Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.next_short" = linkonce_odr constant [11 x i8] c"next_short\00", comdat, align 1
@"$ct.dyn.std.math.random.Pcg128Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.next_byte" = linkonce_odr constant [10 x i8] c"next_byte\00", comdat, align 1
@"$ct.dyn.std.math.random.Pcg64Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg32Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg16Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg128Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg64Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg32Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg16Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg128Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg128Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg128Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg128Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg128Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg128Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg128Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg64Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg32Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg16Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws128Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws64Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws32Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws16Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws8Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.SimpleRandom.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc128Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc64Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc32Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc16Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc8Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 1, ptr @.c3_dynamic_register, ptr null }]

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.srand(i64 %0) #0 comdat !dbg !115 {
entry:
  %seed = alloca i64, align 8
  %taddr = alloca ptr, align 8
  store i64 %0, ptr %seed, align 8
    #dbg_declare(ptr %seed, !119, !DIExpression(), !120)
  store ptr %seed, ptr %taddr, align 8
  %1 = load ptr, ptr %taddr, align 8
  %2 = insertvalue %"char[]" undef, ptr %1, 0
  %3 = insertvalue %"char[]" %2, i64 8, 1
  call void @std.math.random.Sfc64Random.set_seed(ptr @std.math.random.default_random, ptr %1, i64 8), !dbg !121
  store i8 1, ptr @std.math.random.default_random_initialized, align 1, !dbg !122
  ret void, !dbg !122
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.rand(i32 %0) #0 comdat !dbg !123 {
entry:
  %range = alloca i32, align 4
  %random = alloca ptr, align 8
  %random1 = alloca ptr, align 8
  %sretparam = alloca [32 x i8], align 1
  %random2 = alloca ptr, align 8
  %range3 = alloca i32, align 4
  %blockret = alloca i32, align 4
  %random4 = alloca ptr, align 8
  %mask = alloca i32, align 4
  %self = alloca i32, align 4
  %taddr = alloca i32, align 4
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %x = alloca i32, align 4
  store i32 %0, ptr %range, align 4
    #dbg_declare(ptr %range, !127, !DIExpression(), !128)
  %1 = load i8, ptr @std.math.random.default_random_initialized, align 1, !dbg !129
  %2 = trunc i8 %1 to i1, !dbg !129
  %not = xor i1 %2, true, !dbg !129
  br i1 %not, label %if.then, label %if.exit, !dbg !129

if.then:                                          ; preds = %entry
  store ptr @std.math.random.default_random, ptr %random, align 8
  %3 = load ptr, ptr %random, align 8
  store ptr %3, ptr %random1, align 8
  br i1 true, label %assert_ok, label %assert_fail, !dbg !132

assert_fail:                                      ; preds = %if.then
  %4 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !134
  call void %4(ptr @.panic_msg, i64 38, ptr @.file, i64 14, ptr @.func, i64 4, i32 24) #5, !dbg !134
  unreachable, !dbg !134

assert_ok:                                        ; preds = %if.then
  call void @std.math.random.entropy(ptr sret([32 x i8]) align 1 %sretparam), !dbg !139
  %5 = insertvalue %"char[]" undef, ptr %sretparam, 0, !dbg !139
  %6 = insertvalue %"char[]" %5, i64 32, 1, !dbg !139
  %7 = load ptr, ptr %random, align 8, !dbg !139
  call void @std.math.random.Sfc64Random.set_seed(ptr %7, ptr %sretparam, i64 32), !dbg !140
  store i8 1, ptr @std.math.random.default_random_initialized, align 1, !dbg !141
  br label %if.exit, !dbg !141

if.exit:                                          ; preds = %assert_ok, %entry
  store ptr @std.math.random.default_random, ptr %random2, align 8
  %8 = load i32, ptr %range, align 4, !dbg !142
  store i32 %8, ptr %range3, align 4
  %9 = load ptr, ptr %random2, align 8
  store ptr %9, ptr %random4, align 8
  br i1 true, label %assert_ok6, label %assert_fail5, !dbg !143

assert_fail5:                                     ; preds = %if.exit
  %10 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !145
  call void %10(ptr @.panic_msg, i64 38, ptr @.file, i64 14, ptr @.func, i64 4, i32 34) #5, !dbg !145
  unreachable, !dbg !145

assert_ok6:                                       ; preds = %if.exit
  %11 = load i32, ptr %range3, align 4, !dbg !149
  %lt = icmp ult i32 0, %11, !dbg !149
  br i1 %lt, label %assert_ok8, label %assert_fail7, !dbg !149

assert_fail7:                                     ; preds = %assert_ok6
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !149
  call void %12(ptr @.panic_msg.2, i64 30, ptr @.file, i64 14, ptr @.func, i64 4, i32 35) #5, !dbg !149
  unreachable, !dbg !149

assert_ok8:                                       ; preds = %assert_ok6
  %13 = load i32, ptr %range3, align 4, !dbg !150
  %eq = icmp eq i32 1, %13, !dbg !150
  br i1 %eq, label %if.then9, label %if.exit10, !dbg !150

if.then9:                                         ; preds = %assert_ok8
  store i32 0, ptr %blockret, align 4, !dbg !151
  br label %expr_block.exit, !dbg !151

if.exit10:                                        ; preds = %assert_ok8
    #dbg_declare(ptr %mask, !152, !DIExpression(), !153)
  store i32 -1, ptr %mask, align 4, !dbg !154
  %14 = load i32, ptr %range3, align 4, !dbg !155
  %sub = sub i32 %14, 1, !dbg !155
  store i32 %sub, ptr %range3, align 4, !dbg !155
  %15 = load i32, ptr %mask, align 4, !dbg !156
  %16 = load i32, ptr %range3, align 4
  store i32 %16, ptr %self, align 4
  %17 = load i32, ptr %self, align 4, !dbg !157
  %18 = call i32 @llvm.ctlz.i32(i32 %17, i1 false), !dbg !157
  %shift_exceeds = icmp uge i32 %18, 32, !dbg !156
  %19 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !156
  br i1 %19, label %panic, label %checkok, !dbg !156

checkok:                                          ; preds = %if.exit10
  %lshr = lshr i32 %15, %18, !dbg !156
  %20 = freeze i32 %lshr, !dbg !156
  store i32 %20, ptr %mask, align 4, !dbg !156
    #dbg_declare(ptr %x, !161, !DIExpression(), !162)
  br label %loop.body, !dbg !163

loop.cond:                                        ; preds = %loop.body
  %21 = load i32, ptr %x, align 4, !dbg !164
  %22 = load i32, ptr %range3, align 4, !dbg !166
  %gt = icmp ugt i32 %21, %22, !dbg !164
  br i1 %gt, label %loop.body, label %loop.exit, !dbg !164

loop.body:                                        ; preds = %loop.cond, %checkok
  %23 = load ptr, ptr %random2, align 8, !dbg !167
  %24 = call i32 @std.math.random.Sfc64Random.next_int(ptr %23), !dbg !167
  %25 = load i32, ptr %mask, align 4, !dbg !169
  %and = and i32 %24, %25, !dbg !167
  store i32 %and, ptr %x, align 4, !dbg !167
  br label %loop.cond, !dbg !167

loop.exit:                                        ; preds = %loop.cond
  %26 = load i32, ptr %x, align 4, !dbg !170
  store i32 %26, ptr %blockret, align 4, !dbg !170
  br label %expr_block.exit, !dbg !170

expr_block.exit:                                  ; preds = %loop.exit, %if.then9
  %27 = load i32, ptr %blockret, align 4, !dbg !170
  ret i32 %27, !dbg !170

panic:                                            ; preds = %if.exit10
  store i32 %18, ptr %taddr, align 4
  %28 = insertvalue %any undef, ptr %taddr, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %29, ptr %varargslots, align 16
  %30 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %30, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 35, ptr @.file, i64 14, ptr @.func, i64 4, i32 42, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !156
  unreachable, !dbg !156
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.rand_in_range(i32 %0, i32 %1) #0 comdat !dbg !171 {
entry:
  %min = alloca i32, align 4
  %max = alloca i32, align 4
  %random = alloca ptr, align 8
  %random1 = alloca ptr, align 8
  %sretparam = alloca [32 x i8], align 1
  %random4 = alloca ptr, align 8
  %min5 = alloca i32, align 4
  %max6 = alloca i32, align 4
  %random7 = alloca ptr, align 8
  %random13 = alloca ptr, align 8
  %range = alloca i32, align 4
  %blockret = alloca i32, align 4
  %random14 = alloca ptr, align 8
  %mask = alloca i32, align 4
  %self = alloca i32, align 4
  %taddr = alloca i32, align 4
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %x = alloca i32, align 4
  store i32 %0, ptr %min, align 4
    #dbg_declare(ptr %min, !174, !DIExpression(), !175)
  store i32 %1, ptr %max, align 4
    #dbg_declare(ptr %max, !176, !DIExpression(), !177)
  %2 = load i32, ptr %max, align 4, !dbg !178
  %3 = load i32, ptr %min, align 4, !dbg !180
  %ge = icmp sge i32 %2, %3, !dbg !178
  br i1 %ge, label %assert_ok, label %assert_fail, !dbg !178

assert_fail:                                      ; preds = %entry
  %4 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !178
  call void %4(ptr @.panic_msg.4, i64 31, ptr @.file, i64 14, ptr @.func.5, i64 13, i32 88) #5, !dbg !178
  unreachable, !dbg !178

assert_ok:                                        ; preds = %entry
  %5 = load i8, ptr @std.math.random.default_random_initialized, align 1, !dbg !181
  %6 = trunc i8 %5 to i1, !dbg !181
  %not = xor i1 %6, true, !dbg !181
  br i1 %not, label %if.then, label %if.exit, !dbg !181

if.then:                                          ; preds = %assert_ok
  store ptr @std.math.random.default_random, ptr %random, align 8
  %7 = load ptr, ptr %random, align 8
  store ptr %7, ptr %random1, align 8
  br i1 true, label %assert_ok3, label %assert_fail2, !dbg !184

assert_fail2:                                     ; preds = %if.then
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !186
  call void %8(ptr @.panic_msg, i64 38, ptr @.file, i64 14, ptr @.func.5, i64 13, i32 24) #5, !dbg !186
  unreachable, !dbg !186

assert_ok3:                                       ; preds = %if.then
  call void @std.math.random.entropy(ptr sret([32 x i8]) align 1 %sretparam), !dbg !191
  %9 = insertvalue %"char[]" undef, ptr %sretparam, 0, !dbg !191
  %10 = insertvalue %"char[]" %9, i64 32, 1, !dbg !191
  %11 = load ptr, ptr %random, align 8, !dbg !191
  call void @std.math.random.Sfc64Random.set_seed(ptr %11, ptr %sretparam, i64 32), !dbg !192
  store i8 1, ptr @std.math.random.default_random_initialized, align 1, !dbg !193
  br label %if.exit, !dbg !193

if.exit:                                          ; preds = %assert_ok3, %assert_ok
  store ptr @std.math.random.default_random, ptr %random4, align 8
  %12 = load i32, ptr %min, align 4
  store i32 %12, ptr %min5, align 4
  %13 = load i32, ptr %max, align 4
  store i32 %13, ptr %max6, align 4
  %14 = load ptr, ptr %random4, align 8
  store ptr %14, ptr %random7, align 8
  br i1 true, label %assert_ok9, label %assert_fail8, !dbg !194

assert_fail8:                                     ; preds = %if.exit
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !196
  call void %15(ptr @.panic_msg, i64 38, ptr @.file, i64 14, ptr @.func.5, i64 13, i32 55) #5, !dbg !196
  unreachable, !dbg !196

assert_ok9:                                       ; preds = %if.exit
  %16 = load i32, ptr %max6, align 4, !dbg !200
  %17 = load i32, ptr %min5, align 4, !dbg !201
  %ge10 = icmp sge i32 %16, %17, !dbg !200
  br i1 %ge10, label %assert_ok12, label %assert_fail11, !dbg !200

assert_fail11:                                    ; preds = %assert_ok9
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !200
  call void %18(ptr @.panic_msg.4, i64 31, ptr @.file, i64 14, ptr @.func.5, i64 13, i32 56) #5, !dbg !200
  unreachable, !dbg !200

assert_ok12:                                      ; preds = %assert_ok9
  %19 = load ptr, ptr %random4, align 8
  store ptr %19, ptr %random13, align 8
  %20 = load i32, ptr %max6, align 4, !dbg !202
  %21 = load i32, ptr %min5, align 4, !dbg !203
  %sub = sub i32 %20, %21, !dbg !202
  %add = add i32 %sub, 1, !dbg !202
  store i32 %add, ptr %range, align 4
  %22 = load ptr, ptr %random13, align 8
  store ptr %22, ptr %random14, align 8
  br i1 true, label %assert_ok16, label %assert_fail15, !dbg !204

assert_fail15:                                    ; preds = %assert_ok12
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !206
  call void %23(ptr @.panic_msg, i64 38, ptr @.file, i64 14, ptr @.func.5, i64 13, i32 34) #5, !dbg !206
  unreachable, !dbg !206

assert_ok16:                                      ; preds = %assert_ok12
  %24 = load i32, ptr %range, align 4, !dbg !210
  %lt = icmp ult i32 0, %24, !dbg !210
  br i1 %lt, label %assert_ok18, label %assert_fail17, !dbg !210

assert_fail17:                                    ; preds = %assert_ok16
  %25 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !210
  call void %25(ptr @.panic_msg.2, i64 30, ptr @.file, i64 14, ptr @.func.5, i64 13, i32 35) #5, !dbg !210
  unreachable, !dbg !210

assert_ok18:                                      ; preds = %assert_ok16
  %26 = load i32, ptr %range, align 4, !dbg !211
  %eq = icmp eq i32 1, %26, !dbg !211
  br i1 %eq, label %if.then19, label %if.exit20, !dbg !211

if.then19:                                        ; preds = %assert_ok18
  store i32 0, ptr %blockret, align 4, !dbg !212
  br label %expr_block.exit, !dbg !212

if.exit20:                                        ; preds = %assert_ok18
    #dbg_declare(ptr %mask, !213, !DIExpression(), !214)
  store i32 -1, ptr %mask, align 4, !dbg !215
  %27 = load i32, ptr %range, align 4, !dbg !216
  %sub21 = sub i32 %27, 1, !dbg !216
  store i32 %sub21, ptr %range, align 4, !dbg !216
  %28 = load i32, ptr %mask, align 4, !dbg !217
  %29 = load i32, ptr %range, align 4
  store i32 %29, ptr %self, align 4
  %30 = load i32, ptr %self, align 4, !dbg !218
  %31 = call i32 @llvm.ctlz.i32(i32 %30, i1 false), !dbg !218
  %shift_exceeds = icmp uge i32 %31, 32, !dbg !217
  %32 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !217
  br i1 %32, label %panic, label %checkok, !dbg !217

checkok:                                          ; preds = %if.exit20
  %lshr = lshr i32 %28, %31, !dbg !217
  %33 = freeze i32 %lshr, !dbg !217
  store i32 %33, ptr %mask, align 4, !dbg !217
    #dbg_declare(ptr %x, !221, !DIExpression(), !222)
  br label %loop.body, !dbg !223

loop.cond:                                        ; preds = %loop.body
  %34 = load i32, ptr %x, align 4, !dbg !224
  %35 = load i32, ptr %range, align 4, !dbg !226
  %gt = icmp ugt i32 %34, %35, !dbg !224
  br i1 %gt, label %loop.body, label %loop.exit, !dbg !224

loop.body:                                        ; preds = %loop.cond, %checkok
  %36 = load ptr, ptr %random13, align 8, !dbg !227
  %37 = call i32 @std.math.random.Sfc64Random.next_int(ptr %36), !dbg !227
  %38 = load i32, ptr %mask, align 4, !dbg !229
  %and = and i32 %37, %38, !dbg !227
  store i32 %and, ptr %x, align 4, !dbg !227
  br label %loop.cond, !dbg !227

loop.exit:                                        ; preds = %loop.cond
  %39 = load i32, ptr %x, align 4, !dbg !230
  store i32 %39, ptr %blockret, align 4, !dbg !230
  br label %expr_block.exit, !dbg !230

expr_block.exit:                                  ; preds = %loop.exit, %if.then19
  %40 = load i32, ptr %blockret, align 4, !dbg !230
  %41 = load i32, ptr %min5, align 4, !dbg !231
  %add22 = add i32 %40, %41, !dbg !209
  ret i32 %add22, !dbg !209

panic:                                            ; preds = %if.exit20
  store i32 %31, ptr %taddr, align 4
  %42 = insertvalue %any undef, ptr %taddr, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %43, ptr %varargslots, align 16
  %44 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %44, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 35, ptr @.file, i64 14, ptr @.func.5, i64 13, i32 42, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !217
  unreachable, !dbg !217
}

; Function Attrs: nounwind ssp uwtable
define weak double @std.math.random.rnd() #0 comdat !dbg !232 {
entry:
  %random = alloca ptr, align 8
  %random1 = alloca ptr, align 8
  %sretparam = alloca [32 x i8], align 1
  %val = alloca i64, align 8
  %0 = load i8, ptr @std.math.random.default_random_initialized, align 1, !dbg !236
  %1 = trunc i8 %0 to i1, !dbg !236
  %not = xor i1 %1, true, !dbg !236
  br i1 %not, label %if.then, label %if.exit, !dbg !236

if.then:                                          ; preds = %entry
  store ptr @std.math.random.default_random, ptr %random, align 8
  %2 = load ptr, ptr %random, align 8
  store ptr %2, ptr %random1, align 8
  br i1 true, label %assert_ok, label %assert_fail, !dbg !239

assert_fail:                                      ; preds = %if.then
  %3 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !241
  call void %3(ptr @.panic_msg, i64 38, ptr @.file, i64 14, ptr @.func.6, i64 3, i32 24) #5, !dbg !241
  unreachable, !dbg !241

assert_ok:                                        ; preds = %if.then
  call void @std.math.random.entropy(ptr sret([32 x i8]) align 1 %sretparam), !dbg !246
  %4 = insertvalue %"char[]" undef, ptr %sretparam, 0, !dbg !246
  %5 = insertvalue %"char[]" %4, i64 32, 1, !dbg !246
  %6 = load ptr, ptr %random, align 8, !dbg !246
  call void @std.math.random.Sfc64Random.set_seed(ptr %6, ptr %sretparam, i64 32), !dbg !247
  store i8 1, ptr @std.math.random.default_random_initialized, align 1, !dbg !248
  br label %if.exit, !dbg !248

if.exit:                                          ; preds = %assert_ok, %entry
    #dbg_declare(ptr %val, !249, !DIExpression(), !250)
  %7 = call i64 @std.math.random.Sfc64Random.next_long(ptr @std.math.random.default_random), !dbg !251
  %and = and i64 %7, 9007199254740991, !dbg !251
  store i64 %and, ptr %val, align 8, !dbg !251
  %8 = load i64, ptr %val, align 8, !dbg !252
  %uifp = uitofp i64 %8 to double, !dbg !252
  %fmul = fmul double %uifp, 0x3CA0000000000000, !dbg !252
  ret double %fmul, !dbg !252
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg128Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !253 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input7 = alloca %"char[]", align 8
  %return_value = alloca i128, align 16
  %taddr8 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !264
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !264
  br i1 %4, label %panic, label %checkok, !dbg !264

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !265, !DIExpression(), !266)
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !267, !DIExpression(), !268)
  %5 = load ptr, ptr %self, align 8, !dbg !269
  %checknull = icmp eq ptr %5, null, !dbg !269
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !269
  br i1 %6, label %panic1, label %checkok2, !dbg !269

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !269
  %8 = urem i64 %7, 16, !dbg !269
  %9 = icmp ne i64 %8, 0, !dbg !269
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !269
  br i1 %10, label %panic3, label %checkok6, !dbg !269

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input7, ptr align 8 %input, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !270, !DIExpression(), !272)
  store i128 0, ptr %return_value, align 16, !dbg !272
  store ptr %return_value, ptr %taddr8, align 8
  %11 = load ptr, ptr %taddr8, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 16, 1
  %lo = load ptr, ptr %input7, align 8
  %ptradd9 = getelementptr inbounds i8, ptr %input7, i64 8
  %hi = load i64, ptr %ptradd9, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 16), !dbg !274
  %14 = load i128, ptr %return_value, align 16, !dbg !275
  store i128 %14, ptr %5, align 16, !dbg !275
  ret void, !dbg !275

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !266
  call void %15(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 20) #5, !dbg !266
  unreachable, !dbg !266

panic1:                                           ; preds = %checkok
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !269
  call void %16(ptr @.panic_msg.17, i64 45, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 22) #5, !dbg !269
  unreachable, !dbg !269

panic3:                                           ; preds = %checkok2
  store i64 16, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %19 = insertvalue %any undef, ptr %taddr4, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %18, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd5, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 22, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !269
  unreachable, !dbg !269
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Pcg128Random.next_long(ptr %0) #0 comdat !dbg !276 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %xor = alloca i128, align 16
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %rot = alloca i8, align 1
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %varargslots36 = alloca [2 x %any], align 16
  %indirectarg39 = alloca %"any[]", align 8
  %taddr45 = alloca i64, align 8
  %taddr46 = alloca i64, align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %self54 = alloca i64, align 8
  %shift = alloca i64, align 8
  %1 = icmp eq ptr %0, null, !dbg !279
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !279
  br i1 %2, label %panic, label %checkok, !dbg !279

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !280, !DIExpression(), !281)
    #dbg_declare(ptr %s, !282, !DIExpression(), !284)
  %3 = load ptr, ptr %self, align 8, !dbg !285
  store ptr %3, ptr %s, align 8, !dbg !285
    #dbg_declare(ptr %xor, !286, !DIExpression(), !287)
  %4 = load ptr, ptr %s, align 8, !dbg !288
  %checknull = icmp eq ptr %4, null, !dbg !288
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !288
  br i1 %5, label %panic1, label %checkok2, !dbg !288

checkok2:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !288
  %7 = urem i64 %6, 16, !dbg !288
  %8 = icmp ne i64 %7, 0, !dbg !288
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !288
  br i1 %9, label %panic3, label %checkok5, !dbg !288

checkok5:                                         ; preds = %checkok2
  %10 = load i128, ptr %4, align 16, !dbg !288
  %11 = load ptr, ptr %s, align 8, !dbg !289
  %checknull6 = icmp eq ptr %11, null, !dbg !289
  %12 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !289
  br i1 %12, label %panic7, label %checkok8, !dbg !289

checkok8:                                         ; preds = %checkok5
  %13 = ptrtoint ptr %11 to i64, !dbg !289
  %14 = urem i64 %13, 16, !dbg !289
  %15 = icmp ne i64 %14, 0, !dbg !289
  %16 = call i1 @llvm.expect.i1(i1 %15, i1 false), !dbg !289
  br i1 %16, label %panic9, label %checkok16, !dbg !289

checkok16:                                        ; preds = %checkok8
  %17 = load i128, ptr %11, align 16, !dbg !289
  %lshr = lshr i128 %17, 35, !dbg !290
  %18 = freeze i128 %lshr, !dbg !290
  %xor17 = xor i128 %10, %18, !dbg !291
  store i128 %xor17, ptr %xor, align 16, !dbg !291
    #dbg_declare(ptr %rot, !292, !DIExpression(), !293)
  %19 = load ptr, ptr %s, align 8, !dbg !294
  %checknull18 = icmp eq ptr %19, null, !dbg !294
  %20 = call i1 @llvm.expect.i1(i1 %checknull18, i1 false), !dbg !294
  br i1 %20, label %panic19, label %checkok20, !dbg !294

checkok20:                                        ; preds = %checkok16
  %21 = ptrtoint ptr %19 to i64, !dbg !294
  %22 = urem i64 %21, 16, !dbg !294
  %23 = icmp ne i64 %22, 0, !dbg !294
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false), !dbg !294
  br i1 %24, label %panic21, label %checkok28, !dbg !294

checkok28:                                        ; preds = %checkok20
  %25 = load i128, ptr %19, align 16, !dbg !294
  %lshr29 = lshr i128 %25, 122, !dbg !295
  %26 = freeze i128 %lshr29, !dbg !295
  %trunc = trunc i128 %26 to i8, !dbg !295
  store i8 %trunc, ptr %rot, align 1, !dbg !295
  %27 = load ptr, ptr %s, align 8, !dbg !296
  %checknull30 = icmp eq ptr %27, null, !dbg !296
  %28 = call i1 @llvm.expect.i1(i1 %checknull30, i1 false), !dbg !296
  br i1 %28, label %panic31, label %checkok32, !dbg !296

checkok32:                                        ; preds = %checkok28
  %29 = ptrtoint ptr %27 to i64, !dbg !296
  %30 = urem i64 %29, 16, !dbg !296
  %31 = icmp ne i64 %30, 0, !dbg !296
  %32 = call i1 @llvm.expect.i1(i1 %31, i1 false), !dbg !296
  br i1 %32, label %panic33, label %checkok40, !dbg !296

checkok40:                                        ; preds = %checkok32
  %33 = load ptr, ptr %s, align 8, !dbg !297
  %checknull41 = icmp eq ptr %33, null, !dbg !297
  %34 = call i1 @llvm.expect.i1(i1 %checknull41, i1 false), !dbg !297
  br i1 %34, label %panic42, label %checkok43, !dbg !297

checkok43:                                        ; preds = %checkok40
  %35 = ptrtoint ptr %33 to i64, !dbg !297
  %36 = urem i64 %35, 16, !dbg !297
  %37 = icmp ne i64 %36, 0, !dbg !297
  %38 = call i1 @llvm.expect.i1(i1 %37, i1 false), !dbg !297
  br i1 %38, label %panic44, label %checkok51, !dbg !297

checkok51:                                        ; preds = %checkok43
  %39 = load i128, ptr %33, align 16, !dbg !297
  %mul = mul i128 %39, -48899967401452674293065485854872568811, !dbg !298
  %add = add i128 %mul, -129976298391535590297638237547755878347, !dbg !298
  store i128 %add, ptr %27, align 16, !dbg !298
  %40 = load i128, ptr %xor, align 16, !dbg !299
  %lshr52 = lshr i128 %40, 58, !dbg !300
  %41 = freeze i128 %lshr52, !dbg !300
  %trunc53 = trunc i128 %41 to i64, !dbg !300
  store i64 %trunc53, ptr %self54, align 8
  %42 = load i8, ptr %rot, align 1, !dbg !301
  %zext = zext i8 %42 to i64, !dbg !301
  store i64 %zext, ptr %shift, align 8
  %43 = load i64, ptr %self54, align 8, !dbg !302
  %44 = load i64, ptr %self54, align 8, !dbg !304
  %45 = load i64, ptr %shift, align 8, !dbg !305
  %46 = call i64 @llvm.fshr.i64(i64 %43, i64 %44, i64 %45), !dbg !305
  ret i64 %46, !dbg !305

panic:                                            ; preds = %entry
  %47 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !281
  call void %47(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.19, i64 9, i32 26) #5, !dbg !281
  unreachable, !dbg !281

panic1:                                           ; preds = %checkok
  %48 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !288
  call void %48(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.19, i64 9, i32 30) #5, !dbg !288
  unreachable, !dbg !288

panic3:                                           ; preds = %checkok2
  store i64 16, ptr %taddr, align 8
  %49 = insertvalue %any undef, ptr %taddr, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr4, align 8
  %51 = insertvalue %any undef, ptr %taddr4, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %50, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %52, ptr %ptradd, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.19, i64 9, i32 30, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !288
  unreachable, !dbg !288

panic7:                                           ; preds = %checkok5
  %54 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !289
  call void %54(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.19, i64 9, i32 30) #5, !dbg !289
  unreachable, !dbg !289

panic9:                                           ; preds = %checkok8
  store i64 16, ptr %taddr10, align 8
  %55 = insertvalue %any undef, ptr %taddr10, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr11, align 8
  %57 = insertvalue %any undef, ptr %taddr11, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %56, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %58, ptr %ptradd13, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.19, i64 9, i32 30, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !289
  unreachable, !dbg !289

panic19:                                          ; preds = %checkok16
  %60 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !294
  call void %60(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.19, i64 9, i32 31) #5, !dbg !294
  unreachable, !dbg !294

panic21:                                          ; preds = %checkok20
  store i64 16, ptr %taddr22, align 8
  %61 = insertvalue %any undef, ptr %taddr22, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr23, align 8
  %63 = insertvalue %any undef, ptr %taddr23, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %62, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %64, ptr %ptradd25, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.19, i64 9, i32 31, ptr byval(%"any[]") align 8 %indirectarg27) #5, !dbg !294
  unreachable, !dbg !294

panic31:                                          ; preds = %checkok28
  %66 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !296
  call void %66(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.19, i64 9, i32 32) #5, !dbg !296
  unreachable, !dbg !296

panic33:                                          ; preds = %checkok32
  store i64 16, ptr %taddr34, align 8
  %67 = insertvalue %any undef, ptr %taddr34, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %30, ptr %taddr35, align 8
  %69 = insertvalue %any undef, ptr %taddr35, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %68, ptr %varargslots36, align 16
  %ptradd37 = getelementptr inbounds i8, ptr %varargslots36, i64 16
  store %any %70, ptr %ptradd37, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots36, 0
  %"$$temp38" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp38", ptr %indirectarg39, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.19, i64 9, i32 32, ptr byval(%"any[]") align 8 %indirectarg39) #5, !dbg !296
  unreachable, !dbg !296

panic42:                                          ; preds = %checkok40
  %72 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !297
  call void %72(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.19, i64 9, i32 32) #5, !dbg !297
  unreachable, !dbg !297

panic44:                                          ; preds = %checkok43
  store i64 16, ptr %taddr45, align 8
  %73 = insertvalue %any undef, ptr %taddr45, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr46, align 8
  %75 = insertvalue %any undef, ptr %taddr46, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %74, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %76, ptr %ptradd48, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.19, i64 9, i32 32, ptr byval(%"any[]") align 8 %indirectarg50) #5, !dbg !297
  unreachable, !dbg !297
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg128Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !306 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %taddr19 = alloca ptr, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %varargslots33 = alloca [2 x %any], align 16
  %indirectarg36 = alloca %"any[]", align 8
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %varargslots42 = alloca [2 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg59 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !307
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !307
  br i1 %4, label %panic, label %checkok, !dbg !307

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !308, !DIExpression(), !309)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !310, !DIExpression(), !311)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !312
  %5 = load i64, ptr %ptradd1, align 8, !dbg !312
  %lt = icmp ult i64 0, %5, !dbg !312
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !312

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !312
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.15, i64 11, ptr @.func.21, i64 10, i32 37) #5, !dbg !312
  unreachable, !dbg !312

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !314, !DIExpression(), !316)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !317
  %7 = load i64, ptr %ptradd3, align 8, !dbg !317
  store i64 %7, ptr %len, align 8, !dbg !317
  br label %loop.cond, !dbg !318

loop.cond:                                        ; preds = %checkok55, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !319
  %lt4 = icmp ult i64 0, %8, !dbg !319
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !319

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !321, !DIExpression(), !323)
  %9 = load ptr, ptr %self, align 8, !dbg !324
  %10 = call i64 @std.math.random.Pcg128Random.next_long(ptr %9), !dbg !325
  store i64 %10, ptr %value, align 8, !dbg !325
  %11 = load i64, ptr %len, align 8, !dbg !326
  %le = icmp ule i64 %11, 8, !dbg !326
  br i1 %le, label %if.then, label %if.exit, !dbg !326

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !327
  %add = add i64 0, %13, !dbg !327
  %size = sub i64 %add, 0, !dbg !327
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !327
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !327
  %16 = load %"char[]", ptr %bytes2, align 8, !dbg !329
  %17 = extractvalue %"char[]" %16, 0, !dbg !329
  %18 = extractvalue %"char[]" %16, 1, !dbg !330
  %gt = icmp ugt i64 0, %18, !dbg !330
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !330
  br i1 %19, label %panic5, label %checkok9, !dbg !330

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %18, 0, !dbg !329
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !329
  %21 = insertvalue %"char[]" %20, i64 %size10, 1, !dbg !329
  %22 = extractvalue %"char[]" %21, 0, !dbg !329
  %23 = extractvalue %"char[]" %15, 0, !dbg !329
  %24 = extractvalue %"char[]" %15, 1, !dbg !329
  %25 = extractvalue %"char[]" %21, 1, !dbg !329
  %neq = icmp ne i64 %25, %24, !dbg !329
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !329
  br i1 %26, label %panic11, label %checkok18, !dbg !329

checkok18:                                        ; preds = %checkok9
  %27 = mul i64 %24, 1, !dbg !329
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !329
  br label %expr_block.exit, !dbg !331

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr19, align 8
  %28 = load ptr, ptr %taddr19, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 8, 1
  %31 = load %"char[]", ptr %bytes2, align 8, !dbg !332
  %32 = extractvalue %"char[]" %31, 0, !dbg !332
  %33 = extractvalue %"char[]" %31, 1, !dbg !332
  %gt20 = icmp sgt i64 0, %33, !dbg !332
  %34 = call i1 @llvm.expect.i1(i1 %gt20, i1 false), !dbg !332
  br i1 %34, label %panic21, label %checkok28, !dbg !332

checkok28:                                        ; preds = %if.exit
  %lt29 = icmp slt i64 %33, 8, !dbg !332
  %35 = call i1 @llvm.expect.i1(i1 %lt29, i1 false), !dbg !332
  br i1 %35, label %panic30, label %checkok37, !dbg !332

checkok37:                                        ; preds = %checkok28
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !332
  %37 = insertvalue %"char[]" %36, i64 8, 1, !dbg !332
  %38 = extractvalue %"char[]" %37, 0, !dbg !332
  %39 = extractvalue %"char[]" %30, 0, !dbg !332
  %40 = extractvalue %"char[]" %30, 1, !dbg !332
  %41 = extractvalue %"char[]" %37, 1, !dbg !332
  %neq38 = icmp ne i64 %41, %40, !dbg !332
  %42 = call i1 @llvm.expect.i1(i1 %neq38, i1 false), !dbg !332
  br i1 %42, label %panic39, label %checkok46, !dbg !332

checkok46:                                        ; preds = %checkok37
  %43 = mul i64 %40, 1, !dbg !332
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !332
  %44 = load i64, ptr %len, align 8, !dbg !333
  %sub = sub i64 %44, 8, !dbg !333
  store i64 %sub, ptr %len, align 8, !dbg !333
  %45 = load %"char[]", ptr %bytes2, align 8, !dbg !334
  %46 = extractvalue %"char[]" %45, 0, !dbg !334
  %47 = extractvalue %"char[]" %45, 1, !dbg !335
  %gt47 = icmp ugt i64 8, %47, !dbg !335
  %48 = call i1 @llvm.expect.i1(i1 %gt47, i1 false), !dbg !335
  br i1 %48, label %panic48, label %checkok55, !dbg !335

checkok55:                                        ; preds = %checkok46
  %size56 = sub i64 %47, 8, !dbg !334
  %ptradd57 = getelementptr inbounds i8, ptr %46, i64 8, !dbg !334
  %49 = insertvalue %"char[]" undef, ptr %ptradd57, 0, !dbg !334
  %50 = insertvalue %"char[]" %49, i64 %size56, 1, !dbg !334
  store %"char[]" %50, ptr %bytes2, align 8, !dbg !334
  br label %loop.cond, !dbg !334

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !336
  %ptradd58 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !336
  %hi = load i64, ptr %ptradd58, align 8, !dbg !336
  store %"any[]" zeroinitializer, ptr %indirectarg59, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.26, i64 11, ptr @.str.27, i64 23, i32 39, ptr byval(%"any[]") align 8 %indirectarg59), !dbg !340
  unreachable, !dbg !341

expr_block.exit:                                  ; preds = %checkok18
  ret void, !dbg !341

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !309
  call void %51(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.21, i64 10, i32 39) #5, !dbg !309
  unreachable, !dbg !309

panic5:                                           ; preds = %if.then
  store i64 %18, ptr %taddr6, align 8
  %52 = insertvalue %any undef, ptr %taddr6, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %54 = insertvalue %any undef, ptr %taddr7, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd8, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !329
  unreachable, !dbg !329

panic11:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr12, align 8
  %57 = insertvalue %any undef, ptr %taddr12, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr13, align 8
  %59 = insertvalue %any undef, ptr %taddr13, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %60, ptr %ptradd15, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg17) #5, !dbg !329
  unreachable, !dbg !329

panic21:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr22, align 8
  %62 = insertvalue %any undef, ptr %taddr22, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr23, align 8
  %64 = insertvalue %any undef, ptr %taddr23, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %65, ptr %ptradd25, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg27) #5, !dbg !332
  unreachable, !dbg !332

panic30:                                          ; preds = %checkok28
  store i64 7, ptr %taddr31, align 8
  %67 = insertvalue %any undef, ptr %taddr31, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr32, align 8
  %69 = insertvalue %any undef, ptr %taddr32, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots33, align 16
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots33, i64 16
  store %any %70, ptr %ptradd34, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots33, 0
  %"$$temp35" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp35", ptr %indirectarg36, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 60, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg36) #5, !dbg !332
  unreachable, !dbg !332

panic39:                                          ; preds = %checkok37
  store i64 %41, ptr %taddr40, align 8
  %72 = insertvalue %any undef, ptr %taddr40, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr41, align 8
  %74 = insertvalue %any undef, ptr %taddr41, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots42, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %75, ptr %ptradd43, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg45) #5, !dbg !332
  unreachable, !dbg !332

panic48:                                          ; preds = %checkok46
  store i64 %47, ptr %taddr49, align 8
  %77 = insertvalue %any undef, ptr %taddr49, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr50, align 8
  %79 = insertvalue %any undef, ptr %taddr50, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %80, ptr %ptradd52, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg54) #5, !dbg !334
  unreachable, !dbg !334
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Pcg128Random.next_int128(ptr %0) #0 comdat !dbg !342 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !345
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !345
  br i1 %2, label %panic, label %checkok, !dbg !345

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !346, !DIExpression(), !347)
  %3 = load ptr, ptr %self, align 8, !dbg !348
  %4 = call i64 @std.math.random.Pcg128Random.next_long(ptr %3), !dbg !350
  %zext = zext i64 %4 to i128, !dbg !350
  %shl = shl i128 %zext, 64, !dbg !350
  %5 = freeze i128 %shl, !dbg !350
  %6 = load ptr, ptr %self, align 8, !dbg !348
  %7 = call i64 @std.math.random.Pcg128Random.next_long(ptr %6), !dbg !351
  %zext1 = zext i64 %7 to i128, !dbg !351
  %add = add i128 %5, %zext1, !dbg !350
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !347
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.28, i64 11, i32 40) #5, !dbg !347
  unreachable, !dbg !347
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Pcg128Random.next_int(ptr %0) #0 comdat !dbg !352 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !355
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !355
  br i1 %2, label %panic, label %checkok, !dbg !355

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !356, !DIExpression(), !357)
  %3 = load ptr, ptr %self, align 8, !dbg !358
  %4 = call i64 @std.math.random.Pcg128Random.next_long(ptr %3), !dbg !359
  %trunc = trunc i64 %4 to i32, !dbg !359
  ret i32 %trunc, !dbg !359

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !357
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.29, i64 8, i32 41) #5, !dbg !357
  unreachable, !dbg !357
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Pcg128Random.next_short(ptr %0) #0 comdat !dbg !360 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !363
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !363
  br i1 %2, label %panic, label %checkok, !dbg !363

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !364, !DIExpression(), !365)
  %3 = load ptr, ptr %self, align 8, !dbg !366
  %4 = call i64 @std.math.random.Pcg128Random.next_long(ptr %3), !dbg !367
  %trunc = trunc i64 %4 to i16, !dbg !367
  ret i16 %trunc, !dbg !367

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !365
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.30, i64 10, i32 42) #5, !dbg !365
  unreachable, !dbg !365
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Pcg128Random.next_byte(ptr %0) #0 comdat !dbg !368 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !371
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !371
  br i1 %2, label %panic, label %checkok, !dbg !371

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !372, !DIExpression(), !373)
  %3 = load ptr, ptr %self, align 8, !dbg !374
  %4 = call i64 @std.math.random.Pcg128Random.next_long(ptr %3), !dbg !375
  %trunc = trunc i64 %4 to i8, !dbg !375
  ret i8 %trunc, !dbg !375

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !373
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.31, i64 9, i32 43) #5, !dbg !373
  unreachable, !dbg !373
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg64Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !376 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input7 = alloca %"char[]", align 8
  %return_value = alloca i64, align 8
  %taddr8 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !381
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !381
  br i1 %4, label %panic, label %checkok, !dbg !381

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !382, !DIExpression(), !383)
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !384, !DIExpression(), !385)
  %5 = load ptr, ptr %self, align 8, !dbg !386
  %checknull = icmp eq ptr %5, null, !dbg !386
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !386
  br i1 %6, label %panic1, label %checkok2, !dbg !386

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !386
  %8 = urem i64 %7, 8, !dbg !386
  %9 = icmp ne i64 %8, 0, !dbg !386
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !386
  br i1 %10, label %panic3, label %checkok6, !dbg !386

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input7, ptr align 8 %input, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !387, !DIExpression(), !389)
  store i64 0, ptr %return_value, align 8, !dbg !389
  store ptr %return_value, ptr %taddr8, align 8
  %11 = load ptr, ptr %taddr8, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 8, 1
  %lo = load ptr, ptr %input7, align 8
  %ptradd9 = getelementptr inbounds i8, ptr %input7, i64 8
  %hi = load i64, ptr %ptradd9, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 8), !dbg !391
  %14 = load i64, ptr %return_value, align 8, !dbg !392
  store i64 %14, ptr %5, align 8, !dbg !392
  ret void, !dbg !392

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !383
  call void %15(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 49) #5, !dbg !383
  unreachable, !dbg !383

panic1:                                           ; preds = %checkok
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !386
  call void %16(ptr @.panic_msg.17, i64 45, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 51) #5, !dbg !386
  unreachable, !dbg !386

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %19 = insertvalue %any undef, ptr %taddr4, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %18, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd5, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 51, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !386
  unreachable, !dbg !386
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Pcg64Random.next_int(ptr %0) #0 comdat !dbg !393 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %xor = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %rot = alloca i8, align 1
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %varargslots36 = alloca [2 x %any], align 16
  %indirectarg39 = alloca %"any[]", align 8
  %taddr45 = alloca i64, align 8
  %taddr46 = alloca i64, align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %self54 = alloca i32, align 4
  %shift = alloca i32, align 4
  %1 = icmp eq ptr %0, null, !dbg !396
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !396
  br i1 %2, label %panic, label %checkok, !dbg !396

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !397, !DIExpression(), !398)
    #dbg_declare(ptr %s, !399, !DIExpression(), !401)
  %3 = load ptr, ptr %self, align 8, !dbg !402
  store ptr %3, ptr %s, align 8, !dbg !402
    #dbg_declare(ptr %xor, !403, !DIExpression(), !404)
  %4 = load ptr, ptr %s, align 8, !dbg !405
  %checknull = icmp eq ptr %4, null, !dbg !405
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !405
  br i1 %5, label %panic1, label %checkok2, !dbg !405

checkok2:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !405
  %7 = urem i64 %6, 8, !dbg !405
  %8 = icmp ne i64 %7, 0, !dbg !405
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !405
  br i1 %9, label %panic3, label %checkok5, !dbg !405

checkok5:                                         ; preds = %checkok2
  %10 = load i64, ptr %4, align 8, !dbg !405
  %11 = load ptr, ptr %s, align 8, !dbg !406
  %checknull6 = icmp eq ptr %11, null, !dbg !406
  %12 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !406
  br i1 %12, label %panic7, label %checkok8, !dbg !406

checkok8:                                         ; preds = %checkok5
  %13 = ptrtoint ptr %11 to i64, !dbg !406
  %14 = urem i64 %13, 8, !dbg !406
  %15 = icmp ne i64 %14, 0, !dbg !406
  %16 = call i1 @llvm.expect.i1(i1 %15, i1 false), !dbg !406
  br i1 %16, label %panic9, label %checkok16, !dbg !406

checkok16:                                        ; preds = %checkok8
  %17 = load i64, ptr %11, align 8, !dbg !406
  %lshr = lshr i64 %17, 18, !dbg !407
  %18 = freeze i64 %lshr, !dbg !407
  %xor17 = xor i64 %10, %18, !dbg !408
  store i64 %xor17, ptr %xor, align 8, !dbg !408
    #dbg_declare(ptr %rot, !409, !DIExpression(), !410)
  %19 = load ptr, ptr %s, align 8, !dbg !411
  %checknull18 = icmp eq ptr %19, null, !dbg !411
  %20 = call i1 @llvm.expect.i1(i1 %checknull18, i1 false), !dbg !411
  br i1 %20, label %panic19, label %checkok20, !dbg !411

checkok20:                                        ; preds = %checkok16
  %21 = ptrtoint ptr %19 to i64, !dbg !411
  %22 = urem i64 %21, 8, !dbg !411
  %23 = icmp ne i64 %22, 0, !dbg !411
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false), !dbg !411
  br i1 %24, label %panic21, label %checkok28, !dbg !411

checkok28:                                        ; preds = %checkok20
  %25 = load i64, ptr %19, align 8, !dbg !411
  %lshr29 = lshr i64 %25, 59, !dbg !412
  %26 = freeze i64 %lshr29, !dbg !412
  %trunc = trunc i64 %26 to i8, !dbg !412
  store i8 %trunc, ptr %rot, align 1, !dbg !412
  %27 = load ptr, ptr %s, align 8, !dbg !413
  %checknull30 = icmp eq ptr %27, null, !dbg !413
  %28 = call i1 @llvm.expect.i1(i1 %checknull30, i1 false), !dbg !413
  br i1 %28, label %panic31, label %checkok32, !dbg !413

checkok32:                                        ; preds = %checkok28
  %29 = ptrtoint ptr %27 to i64, !dbg !413
  %30 = urem i64 %29, 8, !dbg !413
  %31 = icmp ne i64 %30, 0, !dbg !413
  %32 = call i1 @llvm.expect.i1(i1 %31, i1 false), !dbg !413
  br i1 %32, label %panic33, label %checkok40, !dbg !413

checkok40:                                        ; preds = %checkok32
  %33 = load ptr, ptr %s, align 8, !dbg !414
  %checknull41 = icmp eq ptr %33, null, !dbg !414
  %34 = call i1 @llvm.expect.i1(i1 %checknull41, i1 false), !dbg !414
  br i1 %34, label %panic42, label %checkok43, !dbg !414

checkok43:                                        ; preds = %checkok40
  %35 = ptrtoint ptr %33 to i64, !dbg !414
  %36 = urem i64 %35, 8, !dbg !414
  %37 = icmp ne i64 %36, 0, !dbg !414
  %38 = call i1 @llvm.expect.i1(i1 %37, i1 false), !dbg !414
  br i1 %38, label %panic44, label %checkok51, !dbg !414

checkok51:                                        ; preds = %checkok43
  %39 = load i64, ptr %33, align 8, !dbg !414
  %mul = mul i64 %39, -3372029247567499371, !dbg !415
  %add = add i64 %mul, -7046029254386353131, !dbg !415
  store i64 %add, ptr %27, align 8, !dbg !415
  %40 = load i64, ptr %xor, align 8, !dbg !416
  %lshr52 = lshr i64 %40, 27, !dbg !417
  %41 = freeze i64 %lshr52, !dbg !417
  %trunc53 = trunc i64 %41 to i32, !dbg !417
  store i32 %trunc53, ptr %self54, align 4
  %42 = load i8, ptr %rot, align 1, !dbg !418
  %zext = zext i8 %42 to i32, !dbg !418
  store i32 %zext, ptr %shift, align 4
  %43 = load i32, ptr %self54, align 4, !dbg !419
  %44 = load i32, ptr %self54, align 4, !dbg !421
  %45 = load i32, ptr %shift, align 4, !dbg !422
  %46 = call i32 @llvm.fshr.i32(i32 %43, i32 %44, i32 %45), !dbg !422
  ret i32 %46, !dbg !422

panic:                                            ; preds = %entry
  %47 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !398
  call void %47(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.29, i64 8, i32 54) #5, !dbg !398
  unreachable, !dbg !398

panic1:                                           ; preds = %checkok
  %48 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !405
  call void %48(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.29, i64 8, i32 58) #5, !dbg !405
  unreachable, !dbg !405

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %49 = insertvalue %any undef, ptr %taddr, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr4, align 8
  %51 = insertvalue %any undef, ptr %taddr4, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %50, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %52, ptr %ptradd, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.29, i64 8, i32 58, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !405
  unreachable, !dbg !405

panic7:                                           ; preds = %checkok5
  %54 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !406
  call void %54(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.29, i64 8, i32 58) #5, !dbg !406
  unreachable, !dbg !406

panic9:                                           ; preds = %checkok8
  store i64 8, ptr %taddr10, align 8
  %55 = insertvalue %any undef, ptr %taddr10, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr11, align 8
  %57 = insertvalue %any undef, ptr %taddr11, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %56, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %58, ptr %ptradd13, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.29, i64 8, i32 58, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !406
  unreachable, !dbg !406

panic19:                                          ; preds = %checkok16
  %60 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !411
  call void %60(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.29, i64 8, i32 59) #5, !dbg !411
  unreachable, !dbg !411

panic21:                                          ; preds = %checkok20
  store i64 8, ptr %taddr22, align 8
  %61 = insertvalue %any undef, ptr %taddr22, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr23, align 8
  %63 = insertvalue %any undef, ptr %taddr23, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %62, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %64, ptr %ptradd25, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.29, i64 8, i32 59, ptr byval(%"any[]") align 8 %indirectarg27) #5, !dbg !411
  unreachable, !dbg !411

panic31:                                          ; preds = %checkok28
  %66 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !413
  call void %66(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.29, i64 8, i32 60) #5, !dbg !413
  unreachable, !dbg !413

panic33:                                          ; preds = %checkok32
  store i64 8, ptr %taddr34, align 8
  %67 = insertvalue %any undef, ptr %taddr34, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %30, ptr %taddr35, align 8
  %69 = insertvalue %any undef, ptr %taddr35, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %68, ptr %varargslots36, align 16
  %ptradd37 = getelementptr inbounds i8, ptr %varargslots36, i64 16
  store %any %70, ptr %ptradd37, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots36, 0
  %"$$temp38" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp38", ptr %indirectarg39, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.29, i64 8, i32 60, ptr byval(%"any[]") align 8 %indirectarg39) #5, !dbg !413
  unreachable, !dbg !413

panic42:                                          ; preds = %checkok40
  %72 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !414
  call void %72(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.29, i64 8, i32 60) #5, !dbg !414
  unreachable, !dbg !414

panic44:                                          ; preds = %checkok43
  store i64 8, ptr %taddr45, align 8
  %73 = insertvalue %any undef, ptr %taddr45, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr46, align 8
  %75 = insertvalue %any undef, ptr %taddr46, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %74, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %76, ptr %ptradd48, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.29, i64 8, i32 60, ptr byval(%"any[]") align 8 %indirectarg50) #5, !dbg !414
  unreachable, !dbg !414
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg64Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !423 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %taddr19 = alloca ptr, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %varargslots33 = alloca [2 x %any], align 16
  %indirectarg36 = alloca %"any[]", align 8
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %varargslots42 = alloca [2 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg59 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !424
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !424
  br i1 %4, label %panic, label %checkok, !dbg !424

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !425, !DIExpression(), !426)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !427, !DIExpression(), !428)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !429
  %5 = load i64, ptr %ptradd1, align 8, !dbg !429
  %lt = icmp ult i64 0, %5, !dbg !429
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !429

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !429
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.15, i64 11, ptr @.func.21, i64 10, i32 65) #5, !dbg !429
  unreachable, !dbg !429

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !431, !DIExpression(), !433)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !434
  %7 = load i64, ptr %ptradd3, align 8, !dbg !434
  store i64 %7, ptr %len, align 8, !dbg !434
  br label %loop.cond, !dbg !435

loop.cond:                                        ; preds = %checkok55, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !436
  %lt4 = icmp ult i64 0, %8, !dbg !436
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !436

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !438, !DIExpression(), !440)
  %9 = load ptr, ptr %self, align 8, !dbg !441
  %10 = call i32 @std.math.random.Pcg64Random.next_int(ptr %9), !dbg !442
  store i32 %10, ptr %value, align 4, !dbg !442
  %11 = load i64, ptr %len, align 8, !dbg !443
  %le = icmp ule i64 %11, 4, !dbg !443
  br i1 %le, label %if.then, label %if.exit, !dbg !443

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !444
  %add = add i64 0, %13, !dbg !444
  %size = sub i64 %add, 0, !dbg !444
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !444
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !444
  %16 = load %"char[]", ptr %bytes2, align 8, !dbg !446
  %17 = extractvalue %"char[]" %16, 0, !dbg !446
  %18 = extractvalue %"char[]" %16, 1, !dbg !447
  %gt = icmp ugt i64 0, %18, !dbg !447
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !447
  br i1 %19, label %panic5, label %checkok9, !dbg !447

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %18, 0, !dbg !446
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !446
  %21 = insertvalue %"char[]" %20, i64 %size10, 1, !dbg !446
  %22 = extractvalue %"char[]" %21, 0, !dbg !446
  %23 = extractvalue %"char[]" %15, 0, !dbg !446
  %24 = extractvalue %"char[]" %15, 1, !dbg !446
  %25 = extractvalue %"char[]" %21, 1, !dbg !446
  %neq = icmp ne i64 %25, %24, !dbg !446
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !446
  br i1 %26, label %panic11, label %checkok18, !dbg !446

checkok18:                                        ; preds = %checkok9
  %27 = mul i64 %24, 1, !dbg !446
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !446
  br label %expr_block.exit, !dbg !448

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr19, align 8
  %28 = load ptr, ptr %taddr19, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 4, 1
  %31 = load %"char[]", ptr %bytes2, align 8, !dbg !449
  %32 = extractvalue %"char[]" %31, 0, !dbg !449
  %33 = extractvalue %"char[]" %31, 1, !dbg !449
  %gt20 = icmp sgt i64 0, %33, !dbg !449
  %34 = call i1 @llvm.expect.i1(i1 %gt20, i1 false), !dbg !449
  br i1 %34, label %panic21, label %checkok28, !dbg !449

checkok28:                                        ; preds = %if.exit
  %lt29 = icmp slt i64 %33, 4, !dbg !449
  %35 = call i1 @llvm.expect.i1(i1 %lt29, i1 false), !dbg !449
  br i1 %35, label %panic30, label %checkok37, !dbg !449

checkok37:                                        ; preds = %checkok28
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !449
  %37 = insertvalue %"char[]" %36, i64 4, 1, !dbg !449
  %38 = extractvalue %"char[]" %37, 0, !dbg !449
  %39 = extractvalue %"char[]" %30, 0, !dbg !449
  %40 = extractvalue %"char[]" %30, 1, !dbg !449
  %41 = extractvalue %"char[]" %37, 1, !dbg !449
  %neq38 = icmp ne i64 %41, %40, !dbg !449
  %42 = call i1 @llvm.expect.i1(i1 %neq38, i1 false), !dbg !449
  br i1 %42, label %panic39, label %checkok46, !dbg !449

checkok46:                                        ; preds = %checkok37
  %43 = mul i64 %40, 1, !dbg !449
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !449
  %44 = load i64, ptr %len, align 8, !dbg !450
  %sub = sub i64 %44, 4, !dbg !450
  store i64 %sub, ptr %len, align 8, !dbg !450
  %45 = load %"char[]", ptr %bytes2, align 8, !dbg !451
  %46 = extractvalue %"char[]" %45, 0, !dbg !451
  %47 = extractvalue %"char[]" %45, 1, !dbg !452
  %gt47 = icmp ugt i64 4, %47, !dbg !452
  %48 = call i1 @llvm.expect.i1(i1 %gt47, i1 false), !dbg !452
  br i1 %48, label %panic48, label %checkok55, !dbg !452

checkok55:                                        ; preds = %checkok46
  %size56 = sub i64 %47, 4, !dbg !451
  %ptradd57 = getelementptr inbounds i8, ptr %46, i64 4, !dbg !451
  %49 = insertvalue %"char[]" undef, ptr %ptradd57, 0, !dbg !451
  %50 = insertvalue %"char[]" %49, i64 %size56, 1, !dbg !451
  store %"char[]" %50, ptr %bytes2, align 8, !dbg !451
  br label %loop.cond, !dbg !451

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.32, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !453
  %ptradd58 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !453
  %hi = load i64, ptr %ptradd58, align 8, !dbg !453
  store %"any[]" zeroinitializer, ptr %indirectarg59, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.33, i64 11, ptr @.str.34, i64 22, i32 67, ptr byval(%"any[]") align 8 %indirectarg59), !dbg !456
  unreachable, !dbg !457

expr_block.exit:                                  ; preds = %checkok18
  ret void, !dbg !457

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !426
  call void %51(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.21, i64 10, i32 67) #5, !dbg !426
  unreachable, !dbg !426

panic5:                                           ; preds = %if.then
  store i64 %18, ptr %taddr6, align 8
  %52 = insertvalue %any undef, ptr %taddr6, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %54 = insertvalue %any undef, ptr %taddr7, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd8, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !446
  unreachable, !dbg !446

panic11:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr12, align 8
  %57 = insertvalue %any undef, ptr %taddr12, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr13, align 8
  %59 = insertvalue %any undef, ptr %taddr13, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %60, ptr %ptradd15, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg17) #5, !dbg !446
  unreachable, !dbg !446

panic21:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr22, align 8
  %62 = insertvalue %any undef, ptr %taddr22, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr23, align 8
  %64 = insertvalue %any undef, ptr %taddr23, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %65, ptr %ptradd25, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg27) #5, !dbg !449
  unreachable, !dbg !449

panic30:                                          ; preds = %checkok28
  store i64 3, ptr %taddr31, align 8
  %67 = insertvalue %any undef, ptr %taddr31, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr32, align 8
  %69 = insertvalue %any undef, ptr %taddr32, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots33, align 16
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots33, i64 16
  store %any %70, ptr %ptradd34, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots33, 0
  %"$$temp35" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp35", ptr %indirectarg36, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 60, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg36) #5, !dbg !449
  unreachable, !dbg !449

panic39:                                          ; preds = %checkok37
  store i64 %41, ptr %taddr40, align 8
  %72 = insertvalue %any undef, ptr %taddr40, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr41, align 8
  %74 = insertvalue %any undef, ptr %taddr41, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots42, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %75, ptr %ptradd43, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg45) #5, !dbg !449
  unreachable, !dbg !449

panic48:                                          ; preds = %checkok46
  store i64 %47, ptr %taddr49, align 8
  %77 = insertvalue %any undef, ptr %taddr49, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr50, align 8
  %79 = insertvalue %any undef, ptr %taddr50, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %80, ptr %ptradd52, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg54) #5, !dbg !451
  unreachable, !dbg !451
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Pcg64Random.next_int128(ptr %0) #0 comdat !dbg !458 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !461
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !461
  br i1 %2, label %panic, label %checkok, !dbg !461

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !462, !DIExpression(), !463)
  %3 = load ptr, ptr %self, align 8, !dbg !464
  %4 = call i64 @std.math.random.Pcg64Random.next_long(ptr %3), !dbg !466
  %zext = zext i64 %4 to i128, !dbg !466
  %shl = shl i128 %zext, 64, !dbg !466
  %5 = freeze i128 %shl, !dbg !466
  %6 = load ptr, ptr %self, align 8, !dbg !464
  %7 = call i64 @std.math.random.Pcg64Random.next_long(ptr %6), !dbg !467
  %zext1 = zext i64 %7 to i128, !dbg !467
  %add = add i128 %5, %zext1, !dbg !466
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !463
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.28, i64 11, i32 68) #5, !dbg !463
  unreachable, !dbg !463
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Pcg64Random.next_long(ptr %0) #0 comdat !dbg !468 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !471
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !471
  br i1 %2, label %panic, label %checkok, !dbg !471

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !472, !DIExpression(), !473)
  %3 = load ptr, ptr %self, align 8, !dbg !474
  %4 = call i32 @std.math.random.Pcg64Random.next_int(ptr %3), !dbg !476
  %zext = zext i32 %4 to i64, !dbg !476
  %shl = shl i64 %zext, 32, !dbg !476
  %5 = freeze i64 %shl, !dbg !476
  %6 = load ptr, ptr %self, align 8, !dbg !474
  %7 = call i32 @std.math.random.Pcg64Random.next_int(ptr %6), !dbg !477
  %zext1 = zext i32 %7 to i64, !dbg !477
  %add = add i64 %5, %zext1, !dbg !476
  ret i64 %add, !dbg !476

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !473
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.19, i64 9, i32 69) #5, !dbg !473
  unreachable, !dbg !473
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Pcg64Random.next_short(ptr %0) #0 comdat !dbg !478 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !481
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !481
  br i1 %2, label %panic, label %checkok, !dbg !481

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !482, !DIExpression(), !483)
  %3 = load ptr, ptr %self, align 8, !dbg !484
  %4 = call i32 @std.math.random.Pcg64Random.next_int(ptr %3), !dbg !485
  %trunc = trunc i32 %4 to i16, !dbg !485
  ret i16 %trunc, !dbg !485

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !483
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.30, i64 10, i32 70) #5, !dbg !483
  unreachable, !dbg !483
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Pcg64Random.next_byte(ptr %0) #0 comdat !dbg !486 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !489
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !489
  br i1 %2, label %panic, label %checkok, !dbg !489

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !490, !DIExpression(), !491)
  %3 = load ptr, ptr %self, align 8, !dbg !492
  %4 = call i32 @std.math.random.Pcg64Random.next_int(ptr %3), !dbg !493
  %trunc = trunc i32 %4 to i8, !dbg !493
  ret i8 %trunc, !dbg !493

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !491
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.31, i64 9, i32 71) #5, !dbg !491
  unreachable, !dbg !491
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg32Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !494 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input7 = alloca %"char[]", align 8
  %return_value = alloca i32, align 4
  %taddr8 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !499
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !499
  br i1 %4, label %panic, label %checkok, !dbg !499

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !500, !DIExpression(), !501)
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !502, !DIExpression(), !503)
  %5 = load ptr, ptr %self, align 8, !dbg !504
  %checknull = icmp eq ptr %5, null, !dbg !504
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !504
  br i1 %6, label %panic1, label %checkok2, !dbg !504

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !504
  %8 = urem i64 %7, 4, !dbg !504
  %9 = icmp ne i64 %8, 0, !dbg !504
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !504
  br i1 %10, label %panic3, label %checkok6, !dbg !504

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input7, ptr align 8 %input, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !505, !DIExpression(), !507)
  store i32 0, ptr %return_value, align 4, !dbg !507
  store ptr %return_value, ptr %taddr8, align 8
  %11 = load ptr, ptr %taddr8, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 4, 1
  %lo = load ptr, ptr %input7, align 8
  %ptradd9 = getelementptr inbounds i8, ptr %input7, i64 8
  %hi = load i64, ptr %ptradd9, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 4), !dbg !509
  %14 = load i32, ptr %return_value, align 4, !dbg !510
  store i32 %14, ptr %5, align 4, !dbg !510
  ret void, !dbg !510

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !501
  call void %15(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 78) #5, !dbg !501
  unreachable, !dbg !501

panic1:                                           ; preds = %checkok
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !504
  call void %16(ptr @.panic_msg.17, i64 45, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 80) #5, !dbg !504
  unreachable, !dbg !504

panic3:                                           ; preds = %checkok2
  store i64 4, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %19 = insertvalue %any undef, ptr %taddr4, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %18, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd5, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 80, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !504
  unreachable, !dbg !504
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Pcg32Random.next_short(ptr %0) #0 comdat !dbg !511 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %xor = alloca i32, align 4
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %rot = alloca i8, align 1
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %varargslots36 = alloca [2 x %any], align 16
  %indirectarg39 = alloca %"any[]", align 8
  %taddr45 = alloca i64, align 8
  %taddr46 = alloca i64, align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %self54 = alloca i16, align 2
  %shift = alloca i16, align 2
  %1 = icmp eq ptr %0, null, !dbg !514
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !514
  br i1 %2, label %panic, label %checkok, !dbg !514

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !515, !DIExpression(), !516)
    #dbg_declare(ptr %s, !517, !DIExpression(), !519)
  %3 = load ptr, ptr %self, align 8, !dbg !520
  store ptr %3, ptr %s, align 8, !dbg !520
    #dbg_declare(ptr %xor, !521, !DIExpression(), !522)
  %4 = load ptr, ptr %s, align 8, !dbg !523
  %checknull = icmp eq ptr %4, null, !dbg !523
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !523
  br i1 %5, label %panic1, label %checkok2, !dbg !523

checkok2:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !523
  %7 = urem i64 %6, 4, !dbg !523
  %8 = icmp ne i64 %7, 0, !dbg !523
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !523
  br i1 %9, label %panic3, label %checkok5, !dbg !523

checkok5:                                         ; preds = %checkok2
  %10 = load i32, ptr %4, align 4, !dbg !523
  %11 = load ptr, ptr %s, align 8, !dbg !524
  %checknull6 = icmp eq ptr %11, null, !dbg !524
  %12 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !524
  br i1 %12, label %panic7, label %checkok8, !dbg !524

checkok8:                                         ; preds = %checkok5
  %13 = ptrtoint ptr %11 to i64, !dbg !524
  %14 = urem i64 %13, 4, !dbg !524
  %15 = icmp ne i64 %14, 0, !dbg !524
  %16 = call i1 @llvm.expect.i1(i1 %15, i1 false), !dbg !524
  br i1 %16, label %panic9, label %checkok16, !dbg !524

checkok16:                                        ; preds = %checkok8
  %17 = load i32, ptr %11, align 4, !dbg !524
  %lshr = lshr i32 %17, 10, !dbg !525
  %18 = freeze i32 %lshr, !dbg !525
  %xor17 = xor i32 %10, %18, !dbg !526
  store i32 %xor17, ptr %xor, align 4, !dbg !526
    #dbg_declare(ptr %rot, !527, !DIExpression(), !528)
  %19 = load ptr, ptr %s, align 8, !dbg !529
  %checknull18 = icmp eq ptr %19, null, !dbg !529
  %20 = call i1 @llvm.expect.i1(i1 %checknull18, i1 false), !dbg !529
  br i1 %20, label %panic19, label %checkok20, !dbg !529

checkok20:                                        ; preds = %checkok16
  %21 = ptrtoint ptr %19 to i64, !dbg !529
  %22 = urem i64 %21, 4, !dbg !529
  %23 = icmp ne i64 %22, 0, !dbg !529
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false), !dbg !529
  br i1 %24, label %panic21, label %checkok28, !dbg !529

checkok28:                                        ; preds = %checkok20
  %25 = load i32, ptr %19, align 4, !dbg !529
  %lshr29 = lshr i32 %25, 28, !dbg !530
  %26 = freeze i32 %lshr29, !dbg !530
  %trunc = trunc i32 %26 to i8, !dbg !530
  store i8 %trunc, ptr %rot, align 1, !dbg !530
  %27 = load ptr, ptr %s, align 8, !dbg !531
  %checknull30 = icmp eq ptr %27, null, !dbg !531
  %28 = call i1 @llvm.expect.i1(i1 %checknull30, i1 false), !dbg !531
  br i1 %28, label %panic31, label %checkok32, !dbg !531

checkok32:                                        ; preds = %checkok28
  %29 = ptrtoint ptr %27 to i64, !dbg !531
  %30 = urem i64 %29, 4, !dbg !531
  %31 = icmp ne i64 %30, 0, !dbg !531
  %32 = call i1 @llvm.expect.i1(i1 %31, i1 false), !dbg !531
  br i1 %32, label %panic33, label %checkok40, !dbg !531

checkok40:                                        ; preds = %checkok32
  %33 = load ptr, ptr %s, align 8, !dbg !532
  %checknull41 = icmp eq ptr %33, null, !dbg !532
  %34 = call i1 @llvm.expect.i1(i1 %checknull41, i1 false), !dbg !532
  br i1 %34, label %panic42, label %checkok43, !dbg !532

checkok43:                                        ; preds = %checkok40
  %35 = ptrtoint ptr %33 to i64, !dbg !532
  %36 = urem i64 %35, 4, !dbg !532
  %37 = icmp ne i64 %36, 0, !dbg !532
  %38 = call i1 @llvm.expect.i1(i1 %37, i1 false), !dbg !532
  br i1 %38, label %panic44, label %checkok51, !dbg !532

checkok51:                                        ; preds = %checkok43
  %39 = load i32, ptr %33, align 4, !dbg !532
  %mul = mul i32 %39, -1856014347, !dbg !533
  %add = add i32 %mul, -1640531527, !dbg !533
  store i32 %add, ptr %27, align 4, !dbg !533
  %40 = load i32, ptr %xor, align 4, !dbg !534
  %lshr52 = lshr i32 %40, 12, !dbg !535
  %41 = freeze i32 %lshr52, !dbg !535
  %trunc53 = trunc i32 %41 to i16, !dbg !535
  store i16 %trunc53, ptr %self54, align 2
  %42 = load i8, ptr %rot, align 1, !dbg !536
  %zext = zext i8 %42 to i16, !dbg !536
  store i16 %zext, ptr %shift, align 2
  %43 = load i16, ptr %self54, align 2, !dbg !537
  %44 = load i16, ptr %self54, align 2, !dbg !539
  %45 = load i16, ptr %shift, align 2, !dbg !540
  %46 = call i16 @llvm.fshr.i16(i16 %43, i16 %44, i16 %45), !dbg !540
  ret i16 %46, !dbg !540

panic:                                            ; preds = %entry
  %47 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !516
  call void %47(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.30, i64 10, i32 83) #5, !dbg !516
  unreachable, !dbg !516

panic1:                                           ; preds = %checkok
  %48 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !523
  call void %48(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.30, i64 10, i32 87) #5, !dbg !523
  unreachable, !dbg !523

panic3:                                           ; preds = %checkok2
  store i64 4, ptr %taddr, align 8
  %49 = insertvalue %any undef, ptr %taddr, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr4, align 8
  %51 = insertvalue %any undef, ptr %taddr4, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %50, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %52, ptr %ptradd, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.30, i64 10, i32 87, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !523
  unreachable, !dbg !523

panic7:                                           ; preds = %checkok5
  %54 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !524
  call void %54(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.30, i64 10, i32 87) #5, !dbg !524
  unreachable, !dbg !524

panic9:                                           ; preds = %checkok8
  store i64 4, ptr %taddr10, align 8
  %55 = insertvalue %any undef, ptr %taddr10, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr11, align 8
  %57 = insertvalue %any undef, ptr %taddr11, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %56, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %58, ptr %ptradd13, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.30, i64 10, i32 87, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !524
  unreachable, !dbg !524

panic19:                                          ; preds = %checkok16
  %60 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !529
  call void %60(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.30, i64 10, i32 88) #5, !dbg !529
  unreachable, !dbg !529

panic21:                                          ; preds = %checkok20
  store i64 4, ptr %taddr22, align 8
  %61 = insertvalue %any undef, ptr %taddr22, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr23, align 8
  %63 = insertvalue %any undef, ptr %taddr23, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %62, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %64, ptr %ptradd25, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.30, i64 10, i32 88, ptr byval(%"any[]") align 8 %indirectarg27) #5, !dbg !529
  unreachable, !dbg !529

panic31:                                          ; preds = %checkok28
  %66 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !531
  call void %66(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.30, i64 10, i32 89) #5, !dbg !531
  unreachable, !dbg !531

panic33:                                          ; preds = %checkok32
  store i64 4, ptr %taddr34, align 8
  %67 = insertvalue %any undef, ptr %taddr34, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %30, ptr %taddr35, align 8
  %69 = insertvalue %any undef, ptr %taddr35, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %68, ptr %varargslots36, align 16
  %ptradd37 = getelementptr inbounds i8, ptr %varargslots36, i64 16
  store %any %70, ptr %ptradd37, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots36, 0
  %"$$temp38" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp38", ptr %indirectarg39, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.30, i64 10, i32 89, ptr byval(%"any[]") align 8 %indirectarg39) #5, !dbg !531
  unreachable, !dbg !531

panic42:                                          ; preds = %checkok40
  %72 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !532
  call void %72(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.30, i64 10, i32 89) #5, !dbg !532
  unreachable, !dbg !532

panic44:                                          ; preds = %checkok43
  store i64 4, ptr %taddr45, align 8
  %73 = insertvalue %any undef, ptr %taddr45, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr46, align 8
  %75 = insertvalue %any undef, ptr %taddr46, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %74, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %76, ptr %ptradd48, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.30, i64 10, i32 89, ptr byval(%"any[]") align 8 %indirectarg50) #5, !dbg !532
  unreachable, !dbg !532
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg32Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !541 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %taddr19 = alloca ptr, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %varargslots33 = alloca [2 x %any], align 16
  %indirectarg36 = alloca %"any[]", align 8
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %varargslots42 = alloca [2 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg59 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !542
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !542
  br i1 %4, label %panic, label %checkok, !dbg !542

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !543, !DIExpression(), !544)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !545, !DIExpression(), !546)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !547
  %5 = load i64, ptr %ptradd1, align 8, !dbg !547
  %lt = icmp ult i64 0, %5, !dbg !547
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !547

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !547
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.15, i64 11, ptr @.func.21, i64 10, i32 94) #5, !dbg !547
  unreachable, !dbg !547

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !549, !DIExpression(), !551)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !552
  %7 = load i64, ptr %ptradd3, align 8, !dbg !552
  store i64 %7, ptr %len, align 8, !dbg !552
  br label %loop.cond, !dbg !553

loop.cond:                                        ; preds = %checkok55, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !554
  %lt4 = icmp ult i64 0, %8, !dbg !554
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !554

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !556, !DIExpression(), !558)
  %9 = load ptr, ptr %self, align 8, !dbg !559
  %10 = call i16 @std.math.random.Pcg32Random.next_short(ptr %9), !dbg !560
  store i16 %10, ptr %value, align 2, !dbg !560
  %11 = load i64, ptr %len, align 8, !dbg !561
  %le = icmp ule i64 %11, 2, !dbg !561
  br i1 %le, label %if.then, label %if.exit, !dbg !561

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !562
  %add = add i64 0, %13, !dbg !562
  %size = sub i64 %add, 0, !dbg !562
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !562
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !562
  %16 = load %"char[]", ptr %bytes2, align 8, !dbg !564
  %17 = extractvalue %"char[]" %16, 0, !dbg !564
  %18 = extractvalue %"char[]" %16, 1, !dbg !565
  %gt = icmp ugt i64 0, %18, !dbg !565
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !565
  br i1 %19, label %panic5, label %checkok9, !dbg !565

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %18, 0, !dbg !564
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !564
  %21 = insertvalue %"char[]" %20, i64 %size10, 1, !dbg !564
  %22 = extractvalue %"char[]" %21, 0, !dbg !564
  %23 = extractvalue %"char[]" %15, 0, !dbg !564
  %24 = extractvalue %"char[]" %15, 1, !dbg !564
  %25 = extractvalue %"char[]" %21, 1, !dbg !564
  %neq = icmp ne i64 %25, %24, !dbg !564
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !564
  br i1 %26, label %panic11, label %checkok18, !dbg !564

checkok18:                                        ; preds = %checkok9
  %27 = mul i64 %24, 1, !dbg !564
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !564
  br label %expr_block.exit, !dbg !566

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr19, align 8
  %28 = load ptr, ptr %taddr19, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 2, 1
  %31 = load %"char[]", ptr %bytes2, align 8, !dbg !567
  %32 = extractvalue %"char[]" %31, 0, !dbg !567
  %33 = extractvalue %"char[]" %31, 1, !dbg !567
  %gt20 = icmp sgt i64 0, %33, !dbg !567
  %34 = call i1 @llvm.expect.i1(i1 %gt20, i1 false), !dbg !567
  br i1 %34, label %panic21, label %checkok28, !dbg !567

checkok28:                                        ; preds = %if.exit
  %lt29 = icmp slt i64 %33, 2, !dbg !567
  %35 = call i1 @llvm.expect.i1(i1 %lt29, i1 false), !dbg !567
  br i1 %35, label %panic30, label %checkok37, !dbg !567

checkok37:                                        ; preds = %checkok28
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !567
  %37 = insertvalue %"char[]" %36, i64 2, 1, !dbg !567
  %38 = extractvalue %"char[]" %37, 0, !dbg !567
  %39 = extractvalue %"char[]" %30, 0, !dbg !567
  %40 = extractvalue %"char[]" %30, 1, !dbg !567
  %41 = extractvalue %"char[]" %37, 1, !dbg !567
  %neq38 = icmp ne i64 %41, %40, !dbg !567
  %42 = call i1 @llvm.expect.i1(i1 %neq38, i1 false), !dbg !567
  br i1 %42, label %panic39, label %checkok46, !dbg !567

checkok46:                                        ; preds = %checkok37
  %43 = mul i64 %40, 1, !dbg !567
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !567
  %44 = load i64, ptr %len, align 8, !dbg !568
  %sub = sub i64 %44, 2, !dbg !568
  store i64 %sub, ptr %len, align 8, !dbg !568
  %45 = load %"char[]", ptr %bytes2, align 8, !dbg !569
  %46 = extractvalue %"char[]" %45, 0, !dbg !569
  %47 = extractvalue %"char[]" %45, 1, !dbg !570
  %gt47 = icmp ugt i64 2, %47, !dbg !570
  %48 = call i1 @llvm.expect.i1(i1 %gt47, i1 false), !dbg !570
  br i1 %48, label %panic48, label %checkok55, !dbg !570

checkok55:                                        ; preds = %checkok46
  %size56 = sub i64 %47, 2, !dbg !569
  %ptradd57 = getelementptr inbounds i8, ptr %46, i64 2, !dbg !569
  %49 = insertvalue %"char[]" undef, ptr %ptradd57, 0, !dbg !569
  %50 = insertvalue %"char[]" %49, i64 %size56, 1, !dbg !569
  store %"char[]" %50, ptr %bytes2, align 8, !dbg !569
  br label %loop.cond, !dbg !569

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.35, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !571
  %ptradd58 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !571
  %hi = load i64, ptr %ptradd58, align 8, !dbg !571
  store %"any[]" zeroinitializer, ptr %indirectarg59, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.36, i64 11, ptr @.str.37, i64 22, i32 96, ptr byval(%"any[]") align 8 %indirectarg59), !dbg !574
  unreachable, !dbg !575

expr_block.exit:                                  ; preds = %checkok18
  ret void, !dbg !575

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !544
  call void %51(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.21, i64 10, i32 96) #5, !dbg !544
  unreachable, !dbg !544

panic5:                                           ; preds = %if.then
  store i64 %18, ptr %taddr6, align 8
  %52 = insertvalue %any undef, ptr %taddr6, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %54 = insertvalue %any undef, ptr %taddr7, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd8, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !564
  unreachable, !dbg !564

panic11:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr12, align 8
  %57 = insertvalue %any undef, ptr %taddr12, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr13, align 8
  %59 = insertvalue %any undef, ptr %taddr13, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %60, ptr %ptradd15, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg17) #5, !dbg !564
  unreachable, !dbg !564

panic21:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr22, align 8
  %62 = insertvalue %any undef, ptr %taddr22, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr23, align 8
  %64 = insertvalue %any undef, ptr %taddr23, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %65, ptr %ptradd25, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg27) #5, !dbg !567
  unreachable, !dbg !567

panic30:                                          ; preds = %checkok28
  store i64 1, ptr %taddr31, align 8
  %67 = insertvalue %any undef, ptr %taddr31, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr32, align 8
  %69 = insertvalue %any undef, ptr %taddr32, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots33, align 16
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots33, i64 16
  store %any %70, ptr %ptradd34, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots33, 0
  %"$$temp35" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp35", ptr %indirectarg36, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 60, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg36) #5, !dbg !567
  unreachable, !dbg !567

panic39:                                          ; preds = %checkok37
  store i64 %41, ptr %taddr40, align 8
  %72 = insertvalue %any undef, ptr %taddr40, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr41, align 8
  %74 = insertvalue %any undef, ptr %taddr41, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots42, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %75, ptr %ptradd43, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg45) #5, !dbg !567
  unreachable, !dbg !567

panic48:                                          ; preds = %checkok46
  store i64 %47, ptr %taddr49, align 8
  %77 = insertvalue %any undef, ptr %taddr49, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr50, align 8
  %79 = insertvalue %any undef, ptr %taddr50, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %80, ptr %ptradd52, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg54) #5, !dbg !569
  unreachable, !dbg !569
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Pcg32Random.next_int128(ptr %0) #0 comdat !dbg !576 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !579
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !579
  br i1 %2, label %panic, label %checkok, !dbg !579

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !580, !DIExpression(), !581)
  %3 = load ptr, ptr %self, align 8, !dbg !582
  %4 = call i64 @std.math.random.Pcg32Random.next_long(ptr %3), !dbg !584
  %zext = zext i64 %4 to i128, !dbg !584
  %shl = shl i128 %zext, 64, !dbg !584
  %5 = freeze i128 %shl, !dbg !584
  %6 = load ptr, ptr %self, align 8, !dbg !582
  %7 = call i64 @std.math.random.Pcg32Random.next_long(ptr %6), !dbg !585
  %zext1 = zext i64 %7 to i128, !dbg !585
  %add = add i128 %5, %zext1, !dbg !584
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !581
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.28, i64 11, i32 97) #5, !dbg !581
  unreachable, !dbg !581
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Pcg32Random.next_long(ptr %0) #0 comdat !dbg !586 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !589
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !589
  br i1 %2, label %panic, label %checkok, !dbg !589

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !590, !DIExpression(), !591)
  %3 = load ptr, ptr %self, align 8, !dbg !592
  %4 = call i32 @std.math.random.Pcg32Random.next_int(ptr %3), !dbg !594
  %zext = zext i32 %4 to i64, !dbg !594
  %shl = shl i64 %zext, 32, !dbg !594
  %5 = freeze i64 %shl, !dbg !594
  %6 = load ptr, ptr %self, align 8, !dbg !592
  %7 = call i32 @std.math.random.Pcg32Random.next_int(ptr %6), !dbg !595
  %zext1 = zext i32 %7 to i64, !dbg !595
  %add = add i64 %5, %zext1, !dbg !594
  ret i64 %add, !dbg !594

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !591
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.19, i64 9, i32 98) #5, !dbg !591
  unreachable, !dbg !591
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Pcg32Random.next_int(ptr %0) #0 comdat !dbg !596 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !599
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !599
  br i1 %2, label %panic, label %checkok, !dbg !599

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !600, !DIExpression(), !601)
  %3 = load ptr, ptr %self, align 8, !dbg !602
  %4 = call i16 @std.math.random.Pcg32Random.next_short(ptr %3), !dbg !604
  %zext = zext i16 %4 to i32, !dbg !604
  %shl = shl i32 %zext, 16, !dbg !604
  %5 = freeze i32 %shl, !dbg !604
  %6 = load ptr, ptr %self, align 8, !dbg !602
  %7 = call i16 @std.math.random.Pcg32Random.next_short(ptr %6), !dbg !605
  %zext1 = zext i16 %7 to i32, !dbg !605
  %add = add i32 %5, %zext1, !dbg !604
  ret i32 %add, !dbg !604

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !601
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.29, i64 8, i32 99) #5, !dbg !601
  unreachable, !dbg !601
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Pcg32Random.next_byte(ptr %0) #0 comdat !dbg !606 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !609
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !609
  br i1 %2, label %panic, label %checkok, !dbg !609

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !610, !DIExpression(), !611)
  %3 = load ptr, ptr %self, align 8, !dbg !612
  %4 = call i16 @std.math.random.Pcg32Random.next_short(ptr %3), !dbg !613
  %trunc = trunc i16 %4 to i8, !dbg !613
  ret i8 %trunc, !dbg !613

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !611
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.31, i64 9, i32 100) #5, !dbg !611
  unreachable, !dbg !611
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg16Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !614 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input7 = alloca %"char[]", align 8
  %return_value = alloca i16, align 2
  %taddr8 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !619
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !619
  br i1 %4, label %panic, label %checkok, !dbg !619

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !620, !DIExpression(), !621)
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !622, !DIExpression(), !623)
  %5 = load ptr, ptr %self, align 8, !dbg !624
  %checknull = icmp eq ptr %5, null, !dbg !624
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !624
  br i1 %6, label %panic1, label %checkok2, !dbg !624

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !624
  %8 = urem i64 %7, 2, !dbg !624
  %9 = icmp ne i64 %8, 0, !dbg !624
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !624
  br i1 %10, label %panic3, label %checkok6, !dbg !624

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input7, ptr align 8 %input, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !625, !DIExpression(), !627)
  store i16 0, ptr %return_value, align 2, !dbg !627
  store ptr %return_value, ptr %taddr8, align 8
  %11 = load ptr, ptr %taddr8, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 2, 1
  %lo = load ptr, ptr %input7, align 8
  %ptradd9 = getelementptr inbounds i8, ptr %input7, i64 8
  %hi = load i64, ptr %ptradd9, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 2), !dbg !629
  %14 = load i16, ptr %return_value, align 2, !dbg !630
  store i16 %14, ptr %5, align 2, !dbg !630
  ret void, !dbg !630

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !621
  call void %15(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 106) #5, !dbg !621
  unreachable, !dbg !621

panic1:                                           ; preds = %checkok
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !624
  call void %16(ptr @.panic_msg.17, i64 45, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 108) #5, !dbg !624
  unreachable, !dbg !624

panic3:                                           ; preds = %checkok2
  store i64 2, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %19 = insertvalue %any undef, ptr %taddr4, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %18, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd5, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 108, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !624
  unreachable, !dbg !624
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Pcg16Random.next_byte(ptr %0) #0 comdat !dbg !631 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %xor = alloca i16, align 2
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %rot = alloca i8, align 1
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %varargslots25 = alloca [2 x %any], align 16
  %indirectarg28 = alloca %"any[]", align 8
  %taddr37 = alloca i64, align 8
  %taddr38 = alloca i64, align 8
  %varargslots39 = alloca [2 x %any], align 16
  %indirectarg42 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %varargslots50 = alloca [2 x %any], align 16
  %indirectarg53 = alloca %"any[]", align 8
  %self60 = alloca i8, align 1
  %shift = alloca i8, align 1
  %1 = icmp eq ptr %0, null, !dbg !634
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !634
  br i1 %2, label %panic, label %checkok, !dbg !634

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !635, !DIExpression(), !636)
    #dbg_declare(ptr %s, !637, !DIExpression(), !639)
  %3 = load ptr, ptr %self, align 8, !dbg !640
  store ptr %3, ptr %s, align 8, !dbg !640
    #dbg_declare(ptr %xor, !641, !DIExpression(), !642)
  %4 = load ptr, ptr %s, align 8, !dbg !643
  %checknull = icmp eq ptr %4, null, !dbg !643
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !643
  br i1 %5, label %panic1, label %checkok2, !dbg !643

checkok2:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !643
  %7 = urem i64 %6, 2, !dbg !643
  %8 = icmp ne i64 %7, 0, !dbg !643
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !643
  br i1 %9, label %panic3, label %checkok5, !dbg !643

checkok5:                                         ; preds = %checkok2
  %10 = load i16, ptr %4, align 2, !dbg !643
  %zext = zext i16 %10 to i32, !dbg !643
  %11 = load ptr, ptr %s, align 8, !dbg !644
  %checknull6 = icmp eq ptr %11, null, !dbg !644
  %12 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !644
  br i1 %12, label %panic7, label %checkok8, !dbg !644

checkok8:                                         ; preds = %checkok5
  %13 = ptrtoint ptr %11 to i64, !dbg !644
  %14 = urem i64 %13, 2, !dbg !644
  %15 = icmp ne i64 %14, 0, !dbg !644
  %16 = call i1 @llvm.expect.i1(i1 %15, i1 false), !dbg !644
  br i1 %16, label %panic9, label %checkok16, !dbg !644

checkok16:                                        ; preds = %checkok8
  %17 = load i16, ptr %11, align 2, !dbg !644
  %zext17 = zext i16 %17 to i32, !dbg !644
  %lshr = lshr i32 %zext17, 5, !dbg !645
  %18 = freeze i32 %lshr, !dbg !645
  %xor18 = xor i32 %zext, %18, !dbg !646
  %trunc = trunc i32 %xor18 to i16, !dbg !646
  store i16 %trunc, ptr %xor, align 2, !dbg !646
    #dbg_declare(ptr %rot, !647, !DIExpression(), !648)
  %19 = load ptr, ptr %s, align 8, !dbg !649
  %checknull19 = icmp eq ptr %19, null, !dbg !649
  %20 = call i1 @llvm.expect.i1(i1 %checknull19, i1 false), !dbg !649
  br i1 %20, label %panic20, label %checkok21, !dbg !649

checkok21:                                        ; preds = %checkok16
  %21 = ptrtoint ptr %19 to i64, !dbg !649
  %22 = urem i64 %21, 2, !dbg !649
  %23 = icmp ne i64 %22, 0, !dbg !649
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false), !dbg !649
  br i1 %24, label %panic22, label %checkok29, !dbg !649

checkok29:                                        ; preds = %checkok21
  %25 = load i16, ptr %19, align 2, !dbg !649
  %zext30 = zext i16 %25 to i32, !dbg !649
  %lshr31 = lshr i32 %zext30, 13, !dbg !650
  %26 = freeze i32 %lshr31, !dbg !650
  %trunc32 = trunc i32 %26 to i8, !dbg !650
  store i8 %trunc32, ptr %rot, align 1, !dbg !650
  %27 = load ptr, ptr %s, align 8, !dbg !651
  %checknull33 = icmp eq ptr %27, null, !dbg !651
  %28 = call i1 @llvm.expect.i1(i1 %checknull33, i1 false), !dbg !651
  br i1 %28, label %panic34, label %checkok35, !dbg !651

checkok35:                                        ; preds = %checkok29
  %29 = ptrtoint ptr %27 to i64, !dbg !651
  %30 = urem i64 %29, 2, !dbg !651
  %31 = icmp ne i64 %30, 0, !dbg !651
  %32 = call i1 @llvm.expect.i1(i1 %31, i1 false), !dbg !651
  br i1 %32, label %panic36, label %checkok43, !dbg !651

checkok43:                                        ; preds = %checkok35
  %33 = load ptr, ptr %s, align 8, !dbg !652
  %checknull44 = icmp eq ptr %33, null, !dbg !652
  %34 = call i1 @llvm.expect.i1(i1 %checknull44, i1 false), !dbg !652
  br i1 %34, label %panic45, label %checkok46, !dbg !652

checkok46:                                        ; preds = %checkok43
  %35 = ptrtoint ptr %33 to i64, !dbg !652
  %36 = urem i64 %35, 2, !dbg !652
  %37 = icmp ne i64 %36, 0, !dbg !652
  %38 = call i1 @llvm.expect.i1(i1 %37, i1 false), !dbg !652
  br i1 %38, label %panic47, label %checkok54, !dbg !652

checkok54:                                        ; preds = %checkok46
  %39 = load i16, ptr %33, align 2, !dbg !652
  %zext55 = zext i16 %39 to i32, !dbg !652
  %mul = mul i32 %zext55, 37213, !dbg !653
  %add = add i32 %mul, 40503, !dbg !653
  %trunc56 = trunc i32 %add to i16, !dbg !653
  store i16 %trunc56, ptr %27, align 2, !dbg !653
  %40 = load i16, ptr %xor, align 2, !dbg !654
  %zext57 = zext i16 %40 to i32, !dbg !654
  %lshr58 = lshr i32 %zext57, 5, !dbg !655
  %41 = freeze i32 %lshr58, !dbg !655
  %trunc59 = trunc i32 %41 to i8, !dbg !655
  store i8 %trunc59, ptr %self60, align 1
  %42 = load i8, ptr %rot, align 1
  store i8 %42, ptr %shift, align 1
  %43 = load i8, ptr %self60, align 1, !dbg !656
  %44 = load i8, ptr %self60, align 1, !dbg !658
  %45 = load i8, ptr %shift, align 1, !dbg !659
  %46 = call i8 @llvm.fshr.i8(i8 %43, i8 %44, i8 %45), !dbg !659
  ret i8 %46, !dbg !659

panic:                                            ; preds = %entry
  %47 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !636
  call void %47(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.31, i64 9, i32 111) #5, !dbg !636
  unreachable, !dbg !636

panic1:                                           ; preds = %checkok
  %48 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !643
  call void %48(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.31, i64 9, i32 115) #5, !dbg !643
  unreachable, !dbg !643

panic3:                                           ; preds = %checkok2
  store i64 2, ptr %taddr, align 8
  %49 = insertvalue %any undef, ptr %taddr, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr4, align 8
  %51 = insertvalue %any undef, ptr %taddr4, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %50, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %52, ptr %ptradd, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.31, i64 9, i32 115, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !643
  unreachable, !dbg !643

panic7:                                           ; preds = %checkok5
  %54 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !644
  call void %54(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.31, i64 9, i32 115) #5, !dbg !644
  unreachable, !dbg !644

panic9:                                           ; preds = %checkok8
  store i64 2, ptr %taddr10, align 8
  %55 = insertvalue %any undef, ptr %taddr10, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr11, align 8
  %57 = insertvalue %any undef, ptr %taddr11, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %56, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %58, ptr %ptradd13, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.31, i64 9, i32 115, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !644
  unreachable, !dbg !644

panic20:                                          ; preds = %checkok16
  %60 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !649
  call void %60(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.31, i64 9, i32 116) #5, !dbg !649
  unreachable, !dbg !649

panic22:                                          ; preds = %checkok21
  store i64 2, ptr %taddr23, align 8
  %61 = insertvalue %any undef, ptr %taddr23, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr24, align 8
  %63 = insertvalue %any undef, ptr %taddr24, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %62, ptr %varargslots25, align 16
  %ptradd26 = getelementptr inbounds i8, ptr %varargslots25, i64 16
  store %any %64, ptr %ptradd26, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots25, 0
  %"$$temp27" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp27", ptr %indirectarg28, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.31, i64 9, i32 116, ptr byval(%"any[]") align 8 %indirectarg28) #5, !dbg !649
  unreachable, !dbg !649

panic34:                                          ; preds = %checkok29
  %66 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !651
  call void %66(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.31, i64 9, i32 117) #5, !dbg !651
  unreachable, !dbg !651

panic36:                                          ; preds = %checkok35
  store i64 2, ptr %taddr37, align 8
  %67 = insertvalue %any undef, ptr %taddr37, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %30, ptr %taddr38, align 8
  %69 = insertvalue %any undef, ptr %taddr38, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %68, ptr %varargslots39, align 16
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %70, ptr %ptradd40, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp41", ptr %indirectarg42, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.31, i64 9, i32 117, ptr byval(%"any[]") align 8 %indirectarg42) #5, !dbg !651
  unreachable, !dbg !651

panic45:                                          ; preds = %checkok43
  %72 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !652
  call void %72(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.31, i64 9, i32 117) #5, !dbg !652
  unreachable, !dbg !652

panic47:                                          ; preds = %checkok46
  store i64 2, ptr %taddr48, align 8
  %73 = insertvalue %any undef, ptr %taddr48, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr49, align 8
  %75 = insertvalue %any undef, ptr %taddr49, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %74, ptr %varargslots50, align 16
  %ptradd51 = getelementptr inbounds i8, ptr %varargslots50, i64 16
  store %any %76, ptr %ptradd51, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots50, 0
  %"$$temp52" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp52", ptr %indirectarg53, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.31, i64 9, i32 117, ptr byval(%"any[]") align 8 %indirectarg53) #5, !dbg !652
  unreachable, !dbg !652
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg16Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !660 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes1 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr17 = alloca ptr, align 8
  %taddr20 = alloca i64, align 8
  %taddr21 = alloca i64, align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca i64, align 8
  %varargslots49 = alloca [2 x %any], align 16
  %indirectarg52 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg57 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !661
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !661
  br i1 %4, label %panic, label %checkok, !dbg !661

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !662, !DIExpression(), !663)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !664, !DIExpression(), !665)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes1, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !666, !DIExpression(), !668)
  %ptradd2 = getelementptr inbounds i8, ptr %bytes1, i64 8, !dbg !669
  %5 = load i64, ptr %ptradd2, align 8, !dbg !669
  store i64 %5, ptr %len, align 8, !dbg !669
  br label %loop.cond, !dbg !670

loop.cond:                                        ; preds = %checkok53, %checkok
  %6 = load i64, ptr %len, align 8, !dbg !671
  %lt = icmp ult i64 0, %6, !dbg !671
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !671

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !673, !DIExpression(), !675)
  %7 = load ptr, ptr %self, align 8, !dbg !676
  %8 = call i8 @std.math.random.Pcg16Random.next_byte(ptr %7), !dbg !677
  store i8 %8, ptr %value, align 1, !dbg !677
  %9 = load i64, ptr %len, align 8, !dbg !678
  %le = icmp ule i64 %9, 1, !dbg !678
  br i1 %le, label %if.then, label %if.exit, !dbg !678

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %10 = load ptr, ptr %taddr, align 8
  %11 = load i64, ptr %len, align 8, !dbg !679
  %add = add i64 0, %11, !dbg !679
  %size = sub i64 %add, 0, !dbg !679
  %12 = insertvalue %"char[]" undef, ptr %10, 0, !dbg !679
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !679
  %14 = load %"char[]", ptr %bytes1, align 8, !dbg !681
  %15 = extractvalue %"char[]" %14, 0, !dbg !681
  %16 = extractvalue %"char[]" %14, 1, !dbg !682
  %gt = icmp ugt i64 0, %16, !dbg !682
  %17 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !682
  br i1 %17, label %panic3, label %checkok7, !dbg !682

checkok7:                                         ; preds = %if.then
  %size8 = sub i64 %16, 0, !dbg !681
  %18 = insertvalue %"char[]" undef, ptr %15, 0, !dbg !681
  %19 = insertvalue %"char[]" %18, i64 %size8, 1, !dbg !681
  %20 = extractvalue %"char[]" %19, 0, !dbg !681
  %21 = extractvalue %"char[]" %13, 0, !dbg !681
  %22 = extractvalue %"char[]" %13, 1, !dbg !681
  %23 = extractvalue %"char[]" %19, 1, !dbg !681
  %neq = icmp ne i64 %23, %22, !dbg !681
  %24 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !681
  br i1 %24, label %panic9, label %checkok16, !dbg !681

checkok16:                                        ; preds = %checkok7
  %25 = mul i64 %22, 1, !dbg !681
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %20, ptr align 1 %21, i64 %25, i1 false), !dbg !681
  br label %expr_block.exit, !dbg !683

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr17, align 8
  %26 = load ptr, ptr %taddr17, align 8
  %27 = insertvalue %"char[]" undef, ptr %26, 0
  %28 = insertvalue %"char[]" %27, i64 1, 1
  %29 = load %"char[]", ptr %bytes1, align 8, !dbg !684
  %30 = extractvalue %"char[]" %29, 0, !dbg !684
  %31 = extractvalue %"char[]" %29, 1, !dbg !684
  %gt18 = icmp sgt i64 0, %31, !dbg !684
  %32 = call i1 @llvm.expect.i1(i1 %gt18, i1 false), !dbg !684
  br i1 %32, label %panic19, label %checkok26, !dbg !684

checkok26:                                        ; preds = %if.exit
  %lt27 = icmp slt i64 %31, 1, !dbg !684
  %33 = call i1 @llvm.expect.i1(i1 %lt27, i1 false), !dbg !684
  br i1 %33, label %panic28, label %checkok35, !dbg !684

checkok35:                                        ; preds = %checkok26
  %34 = insertvalue %"char[]" undef, ptr %30, 0, !dbg !684
  %35 = insertvalue %"char[]" %34, i64 1, 1, !dbg !684
  %36 = extractvalue %"char[]" %35, 0, !dbg !684
  %37 = extractvalue %"char[]" %28, 0, !dbg !684
  %38 = extractvalue %"char[]" %28, 1, !dbg !684
  %39 = extractvalue %"char[]" %35, 1, !dbg !684
  %neq36 = icmp ne i64 %39, %38, !dbg !684
  %40 = call i1 @llvm.expect.i1(i1 %neq36, i1 false), !dbg !684
  br i1 %40, label %panic37, label %checkok44, !dbg !684

checkok44:                                        ; preds = %checkok35
  %41 = mul i64 %38, 1, !dbg !684
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %36, ptr align 1 %37, i64 %41, i1 false), !dbg !684
  %42 = load i64, ptr %len, align 8, !dbg !685
  %sub = sub i64 %42, 1, !dbg !685
  store i64 %sub, ptr %len, align 8, !dbg !685
  %43 = load %"char[]", ptr %bytes1, align 8, !dbg !686
  %44 = extractvalue %"char[]" %43, 0, !dbg !686
  %45 = extractvalue %"char[]" %43, 1, !dbg !687
  %gt45 = icmp ugt i64 1, %45, !dbg !687
  %46 = call i1 @llvm.expect.i1(i1 %gt45, i1 false), !dbg !687
  br i1 %46, label %panic46, label %checkok53, !dbg !687

checkok53:                                        ; preds = %checkok44
  %size54 = sub i64 %45, 1, !dbg !686
  %ptradd55 = getelementptr inbounds i8, ptr %44, i64 1, !dbg !686
  %47 = insertvalue %"char[]" undef, ptr %ptradd55, 0, !dbg !686
  %48 = insertvalue %"char[]" %47, i64 %size54, 1, !dbg !686
  store %"char[]" %48, ptr %bytes1, align 8, !dbg !686
  br label %loop.cond, !dbg !686

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.38, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !688
  %ptradd56 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !688
  %hi = load i64, ptr %ptradd56, align 8, !dbg !688
  store %"any[]" zeroinitializer, ptr %indirectarg57, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.39, i64 11, ptr @.str.40, i64 22, i32 121, ptr byval(%"any[]") align 8 %indirectarg57), !dbg !691
  unreachable, !dbg !692

expr_block.exit:                                  ; preds = %checkok16
  ret void, !dbg !692

panic:                                            ; preds = %entry
  %49 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !663
  call void %49(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.21, i64 10, i32 121) #5, !dbg !663
  unreachable, !dbg !663

panic3:                                           ; preds = %if.then
  store i64 %16, ptr %taddr4, align 8
  %50 = insertvalue %any undef, ptr %taddr4, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %52 = insertvalue %any undef, ptr %taddr5, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %51, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %53, ptr %ptradd6, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !681
  unreachable, !dbg !681

panic9:                                           ; preds = %checkok7
  store i64 %23, ptr %taddr10, align 8
  %55 = insertvalue %any undef, ptr %taddr10, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr11, align 8
  %57 = insertvalue %any undef, ptr %taddr11, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %56, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %58, ptr %ptradd13, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !681
  unreachable, !dbg !681

panic19:                                          ; preds = %if.exit
  store i64 %31, ptr %taddr20, align 8
  %60 = insertvalue %any undef, ptr %taddr20, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr21, align 8
  %62 = insertvalue %any undef, ptr %taddr21, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %61, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %63, ptr %ptradd23, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg25) #5, !dbg !684
  unreachable, !dbg !684

panic28:                                          ; preds = %checkok26
  store i64 0, ptr %taddr29, align 8
  %65 = insertvalue %any undef, ptr %taddr29, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %31, ptr %taddr30, align 8
  %67 = insertvalue %any undef, ptr %taddr30, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %66, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %68, ptr %ptradd32, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 60, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !684
  unreachable, !dbg !684

panic37:                                          ; preds = %checkok35
  store i64 %39, ptr %taddr38, align 8
  %70 = insertvalue %any undef, ptr %taddr38, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %38, ptr %taddr39, align 8
  %72 = insertvalue %any undef, ptr %taddr39, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %71, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %73, ptr %ptradd41, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg43) #5, !dbg !684
  unreachable, !dbg !684

panic46:                                          ; preds = %checkok44
  store i64 %45, ptr %taddr47, align 8
  %75 = insertvalue %any undef, ptr %taddr47, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr48, align 8
  %77 = insertvalue %any undef, ptr %taddr48, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %76, ptr %varargslots49, align 16
  %ptradd50 = getelementptr inbounds i8, ptr %varargslots49, i64 16
  store %any %78, ptr %ptradd50, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp51" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp51", ptr %indirectarg52, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg52) #5, !dbg !686
  unreachable, !dbg !686
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Pcg16Random.next_int128(ptr %0) #0 comdat !dbg !693 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !696
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !696
  br i1 %2, label %panic, label %checkok, !dbg !696

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !697, !DIExpression(), !698)
  %3 = load ptr, ptr %self, align 8, !dbg !699
  %4 = call i64 @std.math.random.Pcg16Random.next_long(ptr %3), !dbg !701
  %zext = zext i64 %4 to i128, !dbg !701
  %shl = shl i128 %zext, 64, !dbg !701
  %5 = freeze i128 %shl, !dbg !701
  %6 = load ptr, ptr %self, align 8, !dbg !699
  %7 = call i64 @std.math.random.Pcg16Random.next_long(ptr %6), !dbg !702
  %zext1 = zext i64 %7 to i128, !dbg !702
  %add = add i128 %5, %zext1, !dbg !701
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !698
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.28, i64 11, i32 122) #5, !dbg !698
  unreachable, !dbg !698
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Pcg16Random.next_long(ptr %0) #0 comdat !dbg !703 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !706
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !706
  br i1 %2, label %panic, label %checkok, !dbg !706

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !707, !DIExpression(), !708)
  %3 = load ptr, ptr %self, align 8, !dbg !709
  %4 = call i32 @std.math.random.Pcg16Random.next_int(ptr %3), !dbg !711
  %zext = zext i32 %4 to i64, !dbg !711
  %shl = shl i64 %zext, 32, !dbg !711
  %5 = freeze i64 %shl, !dbg !711
  %6 = load ptr, ptr %self, align 8, !dbg !709
  %7 = call i32 @std.math.random.Pcg16Random.next_int(ptr %6), !dbg !712
  %zext1 = zext i32 %7 to i64, !dbg !712
  %add = add i64 %5, %zext1, !dbg !711
  ret i64 %add, !dbg !711

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !708
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.19, i64 9, i32 123) #5, !dbg !708
  unreachable, !dbg !708
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Pcg16Random.next_int(ptr %0) #0 comdat !dbg !713 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !716
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !716
  br i1 %2, label %panic, label %checkok, !dbg !716

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !717, !DIExpression(), !718)
  %3 = load ptr, ptr %self, align 8, !dbg !719
  %4 = call i16 @std.math.random.Pcg16Random.next_short(ptr %3), !dbg !721
  %zext = zext i16 %4 to i32, !dbg !721
  %shl = shl i32 %zext, 16, !dbg !721
  %5 = freeze i32 %shl, !dbg !721
  %6 = load ptr, ptr %self, align 8, !dbg !719
  %7 = call i16 @std.math.random.Pcg16Random.next_short(ptr %6), !dbg !722
  %zext1 = zext i16 %7 to i32, !dbg !722
  %add = add i32 %5, %zext1, !dbg !721
  ret i32 %add, !dbg !721

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !718
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.29, i64 8, i32 124) #5, !dbg !718
  unreachable, !dbg !718
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Pcg16Random.next_short(ptr %0) #0 comdat !dbg !723 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !726
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !726
  br i1 %2, label %panic, label %checkok, !dbg !726

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !727, !DIExpression(), !728)
  %3 = load ptr, ptr %self, align 8, !dbg !729
  %4 = call i8 @std.math.random.Pcg16Random.next_byte(ptr %3), !dbg !731
  %zext = zext i8 %4 to i16, !dbg !731
  %zext1 = zext i16 %zext to i32, !dbg !731
  %shl = shl i32 %zext1, 8, !dbg !731
  %5 = freeze i32 %shl, !dbg !731
  %6 = load ptr, ptr %self, align 8, !dbg !729
  %7 = call i8 @std.math.random.Pcg16Random.next_byte(ptr %6), !dbg !732
  %zext2 = zext i8 %7 to i32, !dbg !732
  %add = add i32 %5, %zext2, !dbg !731
  %trunc = trunc i32 %add to i16, !dbg !731
  ret i16 %trunc, !dbg !731

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !728
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.30, i64 10, i32 125) #5, !dbg !728
  unreachable, !dbg !728
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg128Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !733 {
entry:
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i128, align 16
  %taddr7 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !738
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !738
  br i1 %4, label %panic, label %checkok, !dbg !738

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !739, !DIExpression(), !740)
  store ptr %1, ptr %seed, align 8
  %ptradd = getelementptr inbounds i8, ptr %seed, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %seed, !741, !DIExpression(), !742)
  %5 = load ptr, ptr %self, align 8, !dbg !743
  %checknull = icmp eq ptr %5, null, !dbg !743
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !743
  br i1 %6, label %panic1, label %checkok2, !dbg !743

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !743
  %8 = urem i64 %7, 16, !dbg !743
  %9 = icmp ne i64 %8, 0, !dbg !743
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !743
  br i1 %10, label %panic3, label %checkok6, !dbg !743

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %seed, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !744, !DIExpression(), !746)
  store i128 0, ptr %return_value, align 16, !dbg !746
  store ptr %return_value, ptr %taddr7, align 8
  %11 = load ptr, ptr %taddr7, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 16, 1
  %lo = load ptr, ptr %input, align 8
  %ptradd8 = getelementptr inbounds i8, ptr %input, i64 8
  %hi = load i64, ptr %ptradd8, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 16), !dbg !748
  %14 = load i128, ptr %return_value, align 16, !dbg !749
  %or = or i128 %14, 1, !dbg !750
  store i128 %or, ptr %5, align 16, !dbg !750
  ret void, !dbg !750

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !740
  call void %15(ptr @.panic_msg.14, i64 62, ptr @.file.44, i64 11, ptr @.func.16, i64 8, i32 12) #5, !dbg !740
  unreachable, !dbg !740

panic1:                                           ; preds = %checkok
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !743
  call void %16(ptr @.panic_msg.17, i64 45, ptr @.file.44, i64 11, ptr @.func.16, i64 8, i32 14) #5, !dbg !743
  unreachable, !dbg !743

panic3:                                           ; preds = %checkok2
  store i64 16, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %19 = insertvalue %any undef, ptr %taddr4, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %18, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd5, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.44, i64 11, ptr @.func.16, i64 8, i32 14, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !743
  unreachable, !dbg !743
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg128Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !751 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %taddr19 = alloca ptr, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %varargslots33 = alloca [2 x %any], align 16
  %indirectarg36 = alloca %"any[]", align 8
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %varargslots42 = alloca [2 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg59 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !752
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !752
  br i1 %4, label %panic, label %checkok, !dbg !752

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !753, !DIExpression(), !754)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !755, !DIExpression(), !756)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !757
  %5 = load i64, ptr %ptradd1, align 8, !dbg !757
  %lt = icmp ult i64 0, %5, !dbg !757
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !757

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !757
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.44, i64 11, ptr @.func.21, i64 10, i32 18) #5, !dbg !757
  unreachable, !dbg !757

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !759, !DIExpression(), !761)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !763
  %7 = load i64, ptr %ptradd3, align 8, !dbg !763
  store i64 %7, ptr %len, align 8, !dbg !763
  br label %loop.cond, !dbg !764

loop.cond:                                        ; preds = %checkok55, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !765
  %lt4 = icmp ult i64 0, %8, !dbg !765
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !765

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !767, !DIExpression(), !769)
  %9 = load ptr, ptr %self, align 8, !dbg !770
  %10 = call i64 @std.math.random.Mcg128Random.next_long(ptr %9), !dbg !771
  store i64 %10, ptr %value, align 8, !dbg !771
  %11 = load i64, ptr %len, align 8, !dbg !772
  %le = icmp ule i64 %11, 8, !dbg !772
  br i1 %le, label %if.then, label %if.exit, !dbg !772

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !773
  %add = add i64 0, %13, !dbg !773
  %size = sub i64 %add, 0, !dbg !773
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !773
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !773
  %16 = load %"char[]", ptr %bytes2, align 8, !dbg !775
  %17 = extractvalue %"char[]" %16, 0, !dbg !775
  %18 = extractvalue %"char[]" %16, 1, !dbg !776
  %gt = icmp ugt i64 0, %18, !dbg !776
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !776
  br i1 %19, label %panic5, label %checkok9, !dbg !776

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %18, 0, !dbg !775
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !775
  %21 = insertvalue %"char[]" %20, i64 %size10, 1, !dbg !775
  %22 = extractvalue %"char[]" %21, 0, !dbg !775
  %23 = extractvalue %"char[]" %15, 0, !dbg !775
  %24 = extractvalue %"char[]" %15, 1, !dbg !775
  %25 = extractvalue %"char[]" %21, 1, !dbg !775
  %neq = icmp ne i64 %25, %24, !dbg !775
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !775
  br i1 %26, label %panic11, label %checkok18, !dbg !775

checkok18:                                        ; preds = %checkok9
  %27 = mul i64 %24, 1, !dbg !775
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !775
  br label %expr_block.exit, !dbg !777

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr19, align 8
  %28 = load ptr, ptr %taddr19, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 8, 1
  %31 = load %"char[]", ptr %bytes2, align 8, !dbg !778
  %32 = extractvalue %"char[]" %31, 0, !dbg !778
  %33 = extractvalue %"char[]" %31, 1, !dbg !778
  %gt20 = icmp sgt i64 0, %33, !dbg !778
  %34 = call i1 @llvm.expect.i1(i1 %gt20, i1 false), !dbg !778
  br i1 %34, label %panic21, label %checkok28, !dbg !778

checkok28:                                        ; preds = %if.exit
  %lt29 = icmp slt i64 %33, 8, !dbg !778
  %35 = call i1 @llvm.expect.i1(i1 %lt29, i1 false), !dbg !778
  br i1 %35, label %panic30, label %checkok37, !dbg !778

checkok37:                                        ; preds = %checkok28
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !778
  %37 = insertvalue %"char[]" %36, i64 8, 1, !dbg !778
  %38 = extractvalue %"char[]" %37, 0, !dbg !778
  %39 = extractvalue %"char[]" %30, 0, !dbg !778
  %40 = extractvalue %"char[]" %30, 1, !dbg !778
  %41 = extractvalue %"char[]" %37, 1, !dbg !778
  %neq38 = icmp ne i64 %41, %40, !dbg !778
  %42 = call i1 @llvm.expect.i1(i1 %neq38, i1 false), !dbg !778
  br i1 %42, label %panic39, label %checkok46, !dbg !778

checkok46:                                        ; preds = %checkok37
  %43 = mul i64 %40, 1, !dbg !778
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !778
  %44 = load i64, ptr %len, align 8, !dbg !779
  %sub = sub i64 %44, 8, !dbg !779
  store i64 %sub, ptr %len, align 8, !dbg !779
  %45 = load %"char[]", ptr %bytes2, align 8, !dbg !780
  %46 = extractvalue %"char[]" %45, 0, !dbg !780
  %47 = extractvalue %"char[]" %45, 1, !dbg !781
  %gt47 = icmp ugt i64 8, %47, !dbg !781
  %48 = call i1 @llvm.expect.i1(i1 %gt47, i1 false), !dbg !781
  br i1 %48, label %panic48, label %checkok55, !dbg !781

checkok55:                                        ; preds = %checkok46
  %size56 = sub i64 %47, 8, !dbg !780
  %ptradd57 = getelementptr inbounds i8, ptr %46, i64 8, !dbg !780
  %49 = insertvalue %"char[]" undef, ptr %ptradd57, 0, !dbg !780
  %50 = insertvalue %"char[]" %49, i64 %size56, 1, !dbg !780
  store %"char[]" %50, ptr %bytes2, align 8, !dbg !780
  br label %loop.cond, !dbg !780

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.45, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !782
  %ptradd58 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !782
  %hi = load i64, ptr %ptradd58, align 8, !dbg !782
  store %"any[]" zeroinitializer, ptr %indirectarg59, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.46, i64 11, ptr @.str.47, i64 23, i32 22, ptr byval(%"any[]") align 8 %indirectarg59), !dbg !785
  unreachable, !dbg !786

expr_block.exit:                                  ; preds = %checkok18
  ret void, !dbg !786

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !754
  call void %51(ptr @.panic_msg.14, i64 62, ptr @.file.44, i64 11, ptr @.func.21, i64 10, i32 20) #5, !dbg !754
  unreachable, !dbg !754

panic5:                                           ; preds = %if.then
  store i64 %18, ptr %taddr6, align 8
  %52 = insertvalue %any undef, ptr %taddr6, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %54 = insertvalue %any undef, ptr %taddr7, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd8, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !775
  unreachable, !dbg !775

panic11:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr12, align 8
  %57 = insertvalue %any undef, ptr %taddr12, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr13, align 8
  %59 = insertvalue %any undef, ptr %taddr13, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %60, ptr %ptradd15, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg17) #5, !dbg !775
  unreachable, !dbg !775

panic21:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr22, align 8
  %62 = insertvalue %any undef, ptr %taddr22, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr23, align 8
  %64 = insertvalue %any undef, ptr %taddr23, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %65, ptr %ptradd25, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg27) #5, !dbg !778
  unreachable, !dbg !778

panic30:                                          ; preds = %checkok28
  store i64 7, ptr %taddr31, align 8
  %67 = insertvalue %any undef, ptr %taddr31, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr32, align 8
  %69 = insertvalue %any undef, ptr %taddr32, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots33, align 16
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots33, i64 16
  store %any %70, ptr %ptradd34, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots33, 0
  %"$$temp35" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp35", ptr %indirectarg36, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 60, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg36) #5, !dbg !778
  unreachable, !dbg !778

panic39:                                          ; preds = %checkok37
  store i64 %41, ptr %taddr40, align 8
  %72 = insertvalue %any undef, ptr %taddr40, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr41, align 8
  %74 = insertvalue %any undef, ptr %taddr41, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots42, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %75, ptr %ptradd43, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg45) #5, !dbg !778
  unreachable, !dbg !778

panic48:                                          ; preds = %checkok46
  store i64 %47, ptr %taddr49, align 8
  %77 = insertvalue %any undef, ptr %taddr49, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr50, align 8
  %79 = insertvalue %any undef, ptr %taddr50, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %80, ptr %ptradd52, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg54) #5, !dbg !780
  unreachable, !dbg !780
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Mcg128Random.next_long(ptr %0) #0 comdat !dbg !787 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !790
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !790
  br i1 %2, label %panic, label %checkok, !dbg !790

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !791, !DIExpression(), !792)
    #dbg_declare(ptr %s, !793, !DIExpression(), !794)
  %3 = load ptr, ptr %self, align 8, !dbg !795
  store ptr %3, ptr %s, align 8, !dbg !795
    #dbg_declare(ptr %result, !796, !DIExpression(), !797)
  %4 = load ptr, ptr %s, align 8, !dbg !798
  %checknull = icmp eq ptr %4, null, !dbg !798
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !798
  br i1 %5, label %panic1, label %checkok2, !dbg !798

checkok2:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !798
  %7 = urem i64 %6, 16, !dbg !798
  %8 = icmp ne i64 %7, 0, !dbg !798
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !798
  br i1 %9, label %panic3, label %checkok5, !dbg !798

checkok5:                                         ; preds = %checkok2
  %10 = load i128, ptr %4, align 16, !dbg !798
  %lshr = lshr i128 %10, 64, !dbg !799
  %11 = freeze i128 %lshr, !dbg !799
  %trunc = trunc i128 %11 to i64, !dbg !799
  store i64 %trunc, ptr %result, align 8, !dbg !799
  %12 = load ptr, ptr %s, align 8, !dbg !800
  %checknull6 = icmp eq ptr %12, null, !dbg !800
  %13 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !800
  br i1 %13, label %panic7, label %checkok8, !dbg !800

checkok8:                                         ; preds = %checkok5
  %14 = ptrtoint ptr %12 to i64, !dbg !800
  %15 = urem i64 %14, 16, !dbg !800
  %16 = icmp ne i64 %15, 0, !dbg !800
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !800
  br i1 %17, label %panic9, label %checkok16, !dbg !800

checkok16:                                        ; preds = %checkok8
  %18 = load i128, ptr %12, align 16, !dbg !800
  %mul = mul i128 %18, -129976298391535590297638237547755878347, !dbg !801
  store i128 %mul, ptr %12, align 16, !dbg !801
  %19 = load i64, ptr %result, align 8, !dbg !802
  ret i64 %19, !dbg !802

panic:                                            ; preds = %entry
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !792
  call void %20(ptr @.panic_msg.14, i64 62, ptr @.file.44, i64 11, ptr @.func.19, i64 9, i32 25) #5, !dbg !792
  unreachable, !dbg !792

panic1:                                           ; preds = %checkok
  %21 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !798
  call void %21(ptr @.panic_msg.20, i64 42, ptr @.file.44, i64 11, ptr @.func.19, i64 9, i32 28) #5, !dbg !798
  unreachable, !dbg !798

panic3:                                           ; preds = %checkok2
  store i64 16, ptr %taddr, align 8
  %22 = insertvalue %any undef, ptr %taddr, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr4, align 8
  %24 = insertvalue %any undef, ptr %taddr4, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %23, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %25, ptr %ptradd, align 16
  %26 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %26, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.44, i64 11, ptr @.func.19, i64 9, i32 28, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !798
  unreachable, !dbg !798

panic7:                                           ; preds = %checkok5
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !800
  call void %27(ptr @.panic_msg.20, i64 42, ptr @.file.44, i64 11, ptr @.func.19, i64 9, i32 29) #5, !dbg !800
  unreachable, !dbg !800

panic9:                                           ; preds = %checkok8
  store i64 16, ptr %taddr10, align 8
  %28 = insertvalue %any undef, ptr %taddr10, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr11, align 8
  %30 = insertvalue %any undef, ptr %taddr11, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %29, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %31, ptr %ptradd13, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.44, i64 11, ptr @.func.19, i64 9, i32 29, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !800
  unreachable, !dbg !800
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Mcg128Random.next_int128(ptr %0) #0 comdat !dbg !803 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !806
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !806
  br i1 %2, label %panic, label %checkok, !dbg !806

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !807, !DIExpression(), !808)
  %3 = load ptr, ptr %self, align 8, !dbg !809
  %4 = call i64 @std.math.random.Mcg128Random.next_long(ptr %3), !dbg !811
  %zext = zext i64 %4 to i128, !dbg !811
  %shl = shl i128 %zext, 64, !dbg !811
  %5 = freeze i128 %shl, !dbg !811
  %6 = load ptr, ptr %self, align 8, !dbg !809
  %7 = call i64 @std.math.random.Mcg128Random.next_long(ptr %6), !dbg !812
  %zext1 = zext i64 %7 to i128, !dbg !812
  %add = add i128 %5, %zext1, !dbg !811
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !808
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.44, i64 11, ptr @.func.28, i64 11, i32 33) #5, !dbg !808
  unreachable, !dbg !808
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Mcg128Random.next_int(ptr %0) #0 comdat !dbg !813 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !816
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !816
  br i1 %2, label %panic, label %checkok, !dbg !816

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !817, !DIExpression(), !818)
  %3 = load ptr, ptr %self, align 8, !dbg !819
  %4 = call i64 @std.math.random.Mcg128Random.next_long(ptr %3), !dbg !820
  %trunc = trunc i64 %4 to i32, !dbg !820
  ret i32 %trunc, !dbg !820

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !818
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.44, i64 11, ptr @.func.29, i64 8, i32 34) #5, !dbg !818
  unreachable, !dbg !818
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Mcg128Random.next_short(ptr %0) #0 comdat !dbg !821 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !824
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !824
  br i1 %2, label %panic, label %checkok, !dbg !824

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !825, !DIExpression(), !826)
  %3 = load ptr, ptr %self, align 8, !dbg !827
  %4 = call i64 @std.math.random.Mcg128Random.next_long(ptr %3), !dbg !828
  %trunc = trunc i64 %4 to i16, !dbg !828
  ret i16 %trunc, !dbg !828

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !826
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.44, i64 11, ptr @.func.30, i64 10, i32 35) #5, !dbg !826
  unreachable, !dbg !826
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Mcg128Random.next_byte(ptr %0) #0 comdat !dbg !829 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !832
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !832
  br i1 %2, label %panic, label %checkok, !dbg !832

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !833, !DIExpression(), !834)
  %3 = load ptr, ptr %self, align 8, !dbg !835
  %4 = call i64 @std.math.random.Mcg128Random.next_long(ptr %3), !dbg !836
  %trunc = trunc i64 %4 to i8, !dbg !836
  ret i8 %trunc, !dbg !836

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !834
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.44, i64 11, ptr @.func.31, i64 9, i32 36) #5, !dbg !834
  unreachable, !dbg !834
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg64Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !837 {
entry:
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i64, align 8
  %taddr7 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !842
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !842
  br i1 %4, label %panic, label %checkok, !dbg !842

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !843, !DIExpression(), !844)
  store ptr %1, ptr %seed, align 8
  %ptradd = getelementptr inbounds i8, ptr %seed, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %seed, !845, !DIExpression(), !846)
  %5 = load ptr, ptr %self, align 8, !dbg !847
  %checknull = icmp eq ptr %5, null, !dbg !847
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !847
  br i1 %6, label %panic1, label %checkok2, !dbg !847

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !847
  %8 = urem i64 %7, 8, !dbg !847
  %9 = icmp ne i64 %8, 0, !dbg !847
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !847
  br i1 %10, label %panic3, label %checkok6, !dbg !847

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %seed, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !848, !DIExpression(), !850)
  store i64 0, ptr %return_value, align 8, !dbg !850
  store ptr %return_value, ptr %taddr7, align 8
  %11 = load ptr, ptr %taddr7, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 8, 1
  %lo = load ptr, ptr %input, align 8
  %ptradd8 = getelementptr inbounds i8, ptr %input, i64 8
  %hi = load i64, ptr %ptradd8, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 8), !dbg !852
  %14 = load i64, ptr %return_value, align 8, !dbg !853
  %or = or i64 %14, 1, !dbg !851
  store i64 %or, ptr %5, align 8, !dbg !851
  ret void, !dbg !851

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !844
  call void %15(ptr @.panic_msg.14, i64 62, ptr @.file.44, i64 11, ptr @.func.16, i64 8, i32 45) #5, !dbg !844
  unreachable, !dbg !844

panic1:                                           ; preds = %checkok
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !847
  call void %16(ptr @.panic_msg.17, i64 45, ptr @.file.44, i64 11, ptr @.func.16, i64 8, i32 47) #5, !dbg !847
  unreachable, !dbg !847

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %19 = insertvalue %any undef, ptr %taddr4, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %18, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd5, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.44, i64 11, ptr @.func.16, i64 8, i32 47, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !847
  unreachable, !dbg !847
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg64Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !854 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %taddr19 = alloca ptr, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %varargslots33 = alloca [2 x %any], align 16
  %indirectarg36 = alloca %"any[]", align 8
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %varargslots42 = alloca [2 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg59 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !855
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !855
  br i1 %4, label %panic, label %checkok, !dbg !855

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !856, !DIExpression(), !857)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !858, !DIExpression(), !859)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !860
  %5 = load i64, ptr %ptradd1, align 8, !dbg !860
  %lt = icmp ult i64 0, %5, !dbg !860
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !860

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !860
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.44, i64 11, ptr @.func.21, i64 10, i32 51) #5, !dbg !860
  unreachable, !dbg !860

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !862, !DIExpression(), !864)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !866
  %7 = load i64, ptr %ptradd3, align 8, !dbg !866
  store i64 %7, ptr %len, align 8, !dbg !866
  br label %loop.cond, !dbg !867

loop.cond:                                        ; preds = %checkok55, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !868
  %lt4 = icmp ult i64 0, %8, !dbg !868
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !868

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !870, !DIExpression(), !872)
  %9 = load ptr, ptr %self, align 8, !dbg !873
  %10 = call i32 @std.math.random.Mcg64Random.next_int(ptr %9), !dbg !874
  store i32 %10, ptr %value, align 4, !dbg !874
  %11 = load i64, ptr %len, align 8, !dbg !875
  %le = icmp ule i64 %11, 4, !dbg !875
  br i1 %le, label %if.then, label %if.exit, !dbg !875

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !876
  %add = add i64 0, %13, !dbg !876
  %size = sub i64 %add, 0, !dbg !876
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !876
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !876
  %16 = load %"char[]", ptr %bytes2, align 8, !dbg !878
  %17 = extractvalue %"char[]" %16, 0, !dbg !878
  %18 = extractvalue %"char[]" %16, 1, !dbg !879
  %gt = icmp ugt i64 0, %18, !dbg !879
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !879
  br i1 %19, label %panic5, label %checkok9, !dbg !879

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %18, 0, !dbg !878
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !878
  %21 = insertvalue %"char[]" %20, i64 %size10, 1, !dbg !878
  %22 = extractvalue %"char[]" %21, 0, !dbg !878
  %23 = extractvalue %"char[]" %15, 0, !dbg !878
  %24 = extractvalue %"char[]" %15, 1, !dbg !878
  %25 = extractvalue %"char[]" %21, 1, !dbg !878
  %neq = icmp ne i64 %25, %24, !dbg !878
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !878
  br i1 %26, label %panic11, label %checkok18, !dbg !878

checkok18:                                        ; preds = %checkok9
  %27 = mul i64 %24, 1, !dbg !878
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !878
  br label %expr_block.exit, !dbg !880

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr19, align 8
  %28 = load ptr, ptr %taddr19, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 4, 1
  %31 = load %"char[]", ptr %bytes2, align 8, !dbg !881
  %32 = extractvalue %"char[]" %31, 0, !dbg !881
  %33 = extractvalue %"char[]" %31, 1, !dbg !881
  %gt20 = icmp sgt i64 0, %33, !dbg !881
  %34 = call i1 @llvm.expect.i1(i1 %gt20, i1 false), !dbg !881
  br i1 %34, label %panic21, label %checkok28, !dbg !881

checkok28:                                        ; preds = %if.exit
  %lt29 = icmp slt i64 %33, 4, !dbg !881
  %35 = call i1 @llvm.expect.i1(i1 %lt29, i1 false), !dbg !881
  br i1 %35, label %panic30, label %checkok37, !dbg !881

checkok37:                                        ; preds = %checkok28
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !881
  %37 = insertvalue %"char[]" %36, i64 4, 1, !dbg !881
  %38 = extractvalue %"char[]" %37, 0, !dbg !881
  %39 = extractvalue %"char[]" %30, 0, !dbg !881
  %40 = extractvalue %"char[]" %30, 1, !dbg !881
  %41 = extractvalue %"char[]" %37, 1, !dbg !881
  %neq38 = icmp ne i64 %41, %40, !dbg !881
  %42 = call i1 @llvm.expect.i1(i1 %neq38, i1 false), !dbg !881
  br i1 %42, label %panic39, label %checkok46, !dbg !881

checkok46:                                        ; preds = %checkok37
  %43 = mul i64 %40, 1, !dbg !881
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !881
  %44 = load i64, ptr %len, align 8, !dbg !882
  %sub = sub i64 %44, 4, !dbg !882
  store i64 %sub, ptr %len, align 8, !dbg !882
  %45 = load %"char[]", ptr %bytes2, align 8, !dbg !883
  %46 = extractvalue %"char[]" %45, 0, !dbg !883
  %47 = extractvalue %"char[]" %45, 1, !dbg !884
  %gt47 = icmp ugt i64 4, %47, !dbg !884
  %48 = call i1 @llvm.expect.i1(i1 %gt47, i1 false), !dbg !884
  br i1 %48, label %panic48, label %checkok55, !dbg !884

checkok55:                                        ; preds = %checkok46
  %size56 = sub i64 %47, 4, !dbg !883
  %ptradd57 = getelementptr inbounds i8, ptr %46, i64 4, !dbg !883
  %49 = insertvalue %"char[]" undef, ptr %ptradd57, 0, !dbg !883
  %50 = insertvalue %"char[]" %49, i64 %size56, 1, !dbg !883
  store %"char[]" %50, ptr %bytes2, align 8, !dbg !883
  br label %loop.cond, !dbg !883

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.48, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !885
  %ptradd58 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !885
  %hi = load i64, ptr %ptradd58, align 8, !dbg !885
  store %"any[]" zeroinitializer, ptr %indirectarg59, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.49, i64 11, ptr @.str.50, i64 22, i32 55, ptr byval(%"any[]") align 8 %indirectarg59), !dbg !888
  unreachable, !dbg !889

expr_block.exit:                                  ; preds = %checkok18
  ret void, !dbg !889

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !857
  call void %51(ptr @.panic_msg.14, i64 62, ptr @.file.44, i64 11, ptr @.func.21, i64 10, i32 53) #5, !dbg !857
  unreachable, !dbg !857

panic5:                                           ; preds = %if.then
  store i64 %18, ptr %taddr6, align 8
  %52 = insertvalue %any undef, ptr %taddr6, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %54 = insertvalue %any undef, ptr %taddr7, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd8, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !878
  unreachable, !dbg !878

panic11:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr12, align 8
  %57 = insertvalue %any undef, ptr %taddr12, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr13, align 8
  %59 = insertvalue %any undef, ptr %taddr13, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %60, ptr %ptradd15, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg17) #5, !dbg !878
  unreachable, !dbg !878

panic21:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr22, align 8
  %62 = insertvalue %any undef, ptr %taddr22, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr23, align 8
  %64 = insertvalue %any undef, ptr %taddr23, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %65, ptr %ptradd25, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg27) #5, !dbg !881
  unreachable, !dbg !881

panic30:                                          ; preds = %checkok28
  store i64 3, ptr %taddr31, align 8
  %67 = insertvalue %any undef, ptr %taddr31, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr32, align 8
  %69 = insertvalue %any undef, ptr %taddr32, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots33, align 16
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots33, i64 16
  store %any %70, ptr %ptradd34, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots33, 0
  %"$$temp35" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp35", ptr %indirectarg36, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 60, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg36) #5, !dbg !881
  unreachable, !dbg !881

panic39:                                          ; preds = %checkok37
  store i64 %41, ptr %taddr40, align 8
  %72 = insertvalue %any undef, ptr %taddr40, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr41, align 8
  %74 = insertvalue %any undef, ptr %taddr41, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots42, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %75, ptr %ptradd43, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg45) #5, !dbg !881
  unreachable, !dbg !881

panic48:                                          ; preds = %checkok46
  store i64 %47, ptr %taddr49, align 8
  %77 = insertvalue %any undef, ptr %taddr49, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr50, align 8
  %79 = insertvalue %any undef, ptr %taddr50, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %80, ptr %ptradd52, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg54) #5, !dbg !883
  unreachable, !dbg !883
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Mcg64Random.next_int(ptr %0) #0 comdat !dbg !890 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i32, align 4
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !893
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !893
  br i1 %2, label %panic, label %checkok, !dbg !893

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !894, !DIExpression(), !895)
    #dbg_declare(ptr %s, !896, !DIExpression(), !897)
  %3 = load ptr, ptr %self, align 8, !dbg !898
  store ptr %3, ptr %s, align 8, !dbg !898
    #dbg_declare(ptr %result, !899, !DIExpression(), !900)
  %4 = load ptr, ptr %s, align 8, !dbg !901
  %checknull = icmp eq ptr %4, null, !dbg !901
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !901
  br i1 %5, label %panic1, label %checkok2, !dbg !901

checkok2:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !901
  %7 = urem i64 %6, 8, !dbg !901
  %8 = icmp ne i64 %7, 0, !dbg !901
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !901
  br i1 %9, label %panic3, label %checkok5, !dbg !901

checkok5:                                         ; preds = %checkok2
  %10 = load i64, ptr %4, align 8, !dbg !901
  %lshr = lshr i64 %10, 32, !dbg !902
  %11 = freeze i64 %lshr, !dbg !902
  %trunc = trunc i64 %11 to i32, !dbg !902
  store i32 %trunc, ptr %result, align 4, !dbg !902
  %12 = load ptr, ptr %s, align 8, !dbg !903
  %checknull6 = icmp eq ptr %12, null, !dbg !903
  %13 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !903
  br i1 %13, label %panic7, label %checkok8, !dbg !903

checkok8:                                         ; preds = %checkok5
  %14 = ptrtoint ptr %12 to i64, !dbg !903
  %15 = urem i64 %14, 8, !dbg !903
  %16 = icmp ne i64 %15, 0, !dbg !903
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !903
  br i1 %17, label %panic9, label %checkok16, !dbg !903

checkok16:                                        ; preds = %checkok8
  %18 = load i64, ptr %12, align 8, !dbg !903
  %mul = mul i64 %18, -1065810590584100411, !dbg !904
  store i64 %mul, ptr %12, align 8, !dbg !904
  %19 = load i32, ptr %result, align 4, !dbg !905
  ret i32 %19, !dbg !905

panic:                                            ; preds = %entry
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !895
  call void %20(ptr @.panic_msg.14, i64 62, ptr @.file.44, i64 11, ptr @.func.29, i64 8, i32 58) #5, !dbg !895
  unreachable, !dbg !895

panic1:                                           ; preds = %checkok
  %21 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !901
  call void %21(ptr @.panic_msg.20, i64 42, ptr @.file.44, i64 11, ptr @.func.29, i64 8, i32 61) #5, !dbg !901
  unreachable, !dbg !901

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %22 = insertvalue %any undef, ptr %taddr, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr4, align 8
  %24 = insertvalue %any undef, ptr %taddr4, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %23, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %25, ptr %ptradd, align 16
  %26 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %26, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.44, i64 11, ptr @.func.29, i64 8, i32 61, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !901
  unreachable, !dbg !901

panic7:                                           ; preds = %checkok5
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !903
  call void %27(ptr @.panic_msg.20, i64 42, ptr @.file.44, i64 11, ptr @.func.29, i64 8, i32 62) #5, !dbg !903
  unreachable, !dbg !903

panic9:                                           ; preds = %checkok8
  store i64 8, ptr %taddr10, align 8
  %28 = insertvalue %any undef, ptr %taddr10, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr11, align 8
  %30 = insertvalue %any undef, ptr %taddr11, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %29, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %31, ptr %ptradd13, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.44, i64 11, ptr @.func.29, i64 8, i32 62, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !903
  unreachable, !dbg !903
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Mcg64Random.next_int128(ptr %0) #0 comdat !dbg !906 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !909
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !909
  br i1 %2, label %panic, label %checkok, !dbg !909

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !910, !DIExpression(), !911)
  %3 = load ptr, ptr %self, align 8, !dbg !912
  %4 = call i64 @std.math.random.Mcg64Random.next_long(ptr %3), !dbg !914
  %zext = zext i64 %4 to i128, !dbg !914
  %shl = shl i128 %zext, 64, !dbg !914
  %5 = freeze i128 %shl, !dbg !914
  %6 = load ptr, ptr %self, align 8, !dbg !912
  %7 = call i64 @std.math.random.Mcg64Random.next_long(ptr %6), !dbg !915
  %zext1 = zext i64 %7 to i128, !dbg !915
  %add = add i128 %5, %zext1, !dbg !914
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !911
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.44, i64 11, ptr @.func.28, i64 11, i32 66) #5, !dbg !911
  unreachable, !dbg !911
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Mcg64Random.next_long(ptr %0) #0 comdat !dbg !916 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !919
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !919
  br i1 %2, label %panic, label %checkok, !dbg !919

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !920, !DIExpression(), !921)
  %3 = load ptr, ptr %self, align 8, !dbg !922
  %4 = call i32 @std.math.random.Mcg64Random.next_int(ptr %3), !dbg !924
  %zext = zext i32 %4 to i64, !dbg !924
  %shl = shl i64 %zext, 32, !dbg !924
  %5 = freeze i64 %shl, !dbg !924
  %6 = load ptr, ptr %self, align 8, !dbg !922
  %7 = call i32 @std.math.random.Mcg64Random.next_int(ptr %6), !dbg !925
  %zext1 = zext i32 %7 to i64, !dbg !925
  %add = add i64 %5, %zext1, !dbg !924
  ret i64 %add, !dbg !924

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !921
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.44, i64 11, ptr @.func.19, i64 9, i32 67) #5, !dbg !921
  unreachable, !dbg !921
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Mcg64Random.next_short(ptr %0) #0 comdat !dbg !926 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !929
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !929
  br i1 %2, label %panic, label %checkok, !dbg !929

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !930, !DIExpression(), !931)
  %3 = load ptr, ptr %self, align 8, !dbg !932
  %4 = call i32 @std.math.random.Mcg64Random.next_int(ptr %3), !dbg !933
  %trunc = trunc i32 %4 to i16, !dbg !933
  ret i16 %trunc, !dbg !933

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !931
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.44, i64 11, ptr @.func.30, i64 10, i32 68) #5, !dbg !931
  unreachable, !dbg !931
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Mcg64Random.next_byte(ptr %0) #0 comdat !dbg !934 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !937
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !937
  br i1 %2, label %panic, label %checkok, !dbg !937

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !938, !DIExpression(), !939)
  %3 = load ptr, ptr %self, align 8, !dbg !940
  %4 = call i32 @std.math.random.Mcg64Random.next_int(ptr %3), !dbg !941
  %trunc = trunc i32 %4 to i8, !dbg !941
  ret i8 %trunc, !dbg !941

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !939
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.44, i64 11, ptr @.func.31, i64 9, i32 69) #5, !dbg !939
  unreachable, !dbg !939
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg32Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !942 {
entry:
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i32, align 4
  %taddr7 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !947
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !947
  br i1 %4, label %panic, label %checkok, !dbg !947

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !948, !DIExpression(), !949)
  store ptr %1, ptr %seed, align 8
  %ptradd = getelementptr inbounds i8, ptr %seed, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %seed, !950, !DIExpression(), !951)
  %5 = load ptr, ptr %self, align 8, !dbg !952
  %checknull = icmp eq ptr %5, null, !dbg !952
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !952
  br i1 %6, label %panic1, label %checkok2, !dbg !952

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !952
  %8 = urem i64 %7, 4, !dbg !952
  %9 = icmp ne i64 %8, 0, !dbg !952
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !952
  br i1 %10, label %panic3, label %checkok6, !dbg !952

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %seed, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !953, !DIExpression(), !955)
  store i32 0, ptr %return_value, align 4, !dbg !955
  store ptr %return_value, ptr %taddr7, align 8
  %11 = load ptr, ptr %taddr7, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 4, 1
  %lo = load ptr, ptr %input, align 8
  %ptradd8 = getelementptr inbounds i8, ptr %input, i64 8
  %hi = load i64, ptr %ptradd8, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 4), !dbg !957
  %14 = load i32, ptr %return_value, align 4, !dbg !958
  %or = or i32 %14, 1, !dbg !956
  store i32 %or, ptr %5, align 4, !dbg !956
  ret void, !dbg !956

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !949
  call void %15(ptr @.panic_msg.14, i64 62, ptr @.file.44, i64 11, ptr @.func.16, i64 8, i32 76) #5, !dbg !949
  unreachable, !dbg !949

panic1:                                           ; preds = %checkok
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !952
  call void %16(ptr @.panic_msg.17, i64 45, ptr @.file.44, i64 11, ptr @.func.16, i64 8, i32 78) #5, !dbg !952
  unreachable, !dbg !952

panic3:                                           ; preds = %checkok2
  store i64 4, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %19 = insertvalue %any undef, ptr %taddr4, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %18, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd5, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.44, i64 11, ptr @.func.16, i64 8, i32 78, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !952
  unreachable, !dbg !952
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Mcg32Random.next_short(ptr %0) #0 comdat !dbg !959 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i16, align 2
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !962
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !962
  br i1 %2, label %panic, label %checkok, !dbg !962

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !963, !DIExpression(), !964)
    #dbg_declare(ptr %s, !965, !DIExpression(), !966)
  %3 = load ptr, ptr %self, align 8, !dbg !967
  store ptr %3, ptr %s, align 8, !dbg !967
    #dbg_declare(ptr %result, !968, !DIExpression(), !969)
  %4 = load ptr, ptr %s, align 8, !dbg !970
  %checknull = icmp eq ptr %4, null, !dbg !970
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !970
  br i1 %5, label %panic1, label %checkok2, !dbg !970

checkok2:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !970
  %7 = urem i64 %6, 4, !dbg !970
  %8 = icmp ne i64 %7, 0, !dbg !970
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !970
  br i1 %9, label %panic3, label %checkok5, !dbg !970

checkok5:                                         ; preds = %checkok2
  %10 = load i32, ptr %4, align 4, !dbg !970
  %lshr = lshr i32 %10, 16, !dbg !971
  %11 = freeze i32 %lshr, !dbg !971
  %trunc = trunc i32 %11 to i16, !dbg !971
  store i16 %trunc, ptr %result, align 2, !dbg !971
  %12 = load ptr, ptr %s, align 8, !dbg !972
  %checknull6 = icmp eq ptr %12, null, !dbg !972
  %13 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !972
  br i1 %13, label %panic7, label %checkok8, !dbg !972

checkok8:                                         ; preds = %checkok5
  %14 = ptrtoint ptr %12 to i64, !dbg !972
  %15 = urem i64 %14, 4, !dbg !972
  %16 = icmp ne i64 %15, 0, !dbg !972
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !972
  br i1 %17, label %panic9, label %checkok16, !dbg !972

checkok16:                                        ; preds = %checkok8
  %18 = load i32, ptr %12, align 4, !dbg !972
  %mul = mul i32 %18, -1814600227, !dbg !973
  store i32 %mul, ptr %12, align 4, !dbg !973
  %19 = load i16, ptr %result, align 2, !dbg !974
  ret i16 %19, !dbg !974

panic:                                            ; preds = %entry
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !964
  call void %20(ptr @.panic_msg.14, i64 62, ptr @.file.44, i64 11, ptr @.func.30, i64 10, i32 81) #5, !dbg !964
  unreachable, !dbg !964

panic1:                                           ; preds = %checkok
  %21 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !970
  call void %21(ptr @.panic_msg.20, i64 42, ptr @.file.44, i64 11, ptr @.func.30, i64 10, i32 84) #5, !dbg !970
  unreachable, !dbg !970

panic3:                                           ; preds = %checkok2
  store i64 4, ptr %taddr, align 8
  %22 = insertvalue %any undef, ptr %taddr, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr4, align 8
  %24 = insertvalue %any undef, ptr %taddr4, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %23, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %25, ptr %ptradd, align 16
  %26 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %26, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.44, i64 11, ptr @.func.30, i64 10, i32 84, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !970
  unreachable, !dbg !970

panic7:                                           ; preds = %checkok5
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !972
  call void %27(ptr @.panic_msg.20, i64 42, ptr @.file.44, i64 11, ptr @.func.30, i64 10, i32 85) #5, !dbg !972
  unreachable, !dbg !972

panic9:                                           ; preds = %checkok8
  store i64 4, ptr %taddr10, align 8
  %28 = insertvalue %any undef, ptr %taddr10, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr11, align 8
  %30 = insertvalue %any undef, ptr %taddr11, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %29, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %31, ptr %ptradd13, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.44, i64 11, ptr @.func.30, i64 10, i32 85, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !972
  unreachable, !dbg !972
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg32Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !975 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %taddr19 = alloca ptr, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %varargslots33 = alloca [2 x %any], align 16
  %indirectarg36 = alloca %"any[]", align 8
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %varargslots42 = alloca [2 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg59 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !976
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !976
  br i1 %4, label %panic, label %checkok, !dbg !976

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !977, !DIExpression(), !978)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !979, !DIExpression(), !980)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !981
  %5 = load i64, ptr %ptradd1, align 8, !dbg !981
  %lt = icmp ult i64 0, %5, !dbg !981
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !981

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !981
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.44, i64 11, ptr @.func.21, i64 10, i32 90) #5, !dbg !981
  unreachable, !dbg !981

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !983, !DIExpression(), !985)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !986
  %7 = load i64, ptr %ptradd3, align 8, !dbg !986
  store i64 %7, ptr %len, align 8, !dbg !986
  br label %loop.cond, !dbg !987

loop.cond:                                        ; preds = %checkok55, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !988
  %lt4 = icmp ult i64 0, %8, !dbg !988
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !988

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !990, !DIExpression(), !992)
  %9 = load ptr, ptr %self, align 8, !dbg !993
  %10 = call i16 @std.math.random.Mcg32Random.next_short(ptr %9), !dbg !994
  store i16 %10, ptr %value, align 2, !dbg !994
  %11 = load i64, ptr %len, align 8, !dbg !995
  %le = icmp ule i64 %11, 2, !dbg !995
  br i1 %le, label %if.then, label %if.exit, !dbg !995

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !996
  %add = add i64 0, %13, !dbg !996
  %size = sub i64 %add, 0, !dbg !996
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !996
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !996
  %16 = load %"char[]", ptr %bytes2, align 8, !dbg !998
  %17 = extractvalue %"char[]" %16, 0, !dbg !998
  %18 = extractvalue %"char[]" %16, 1, !dbg !999
  %gt = icmp ugt i64 0, %18, !dbg !999
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !999
  br i1 %19, label %panic5, label %checkok9, !dbg !999

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %18, 0, !dbg !998
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !998
  %21 = insertvalue %"char[]" %20, i64 %size10, 1, !dbg !998
  %22 = extractvalue %"char[]" %21, 0, !dbg !998
  %23 = extractvalue %"char[]" %15, 0, !dbg !998
  %24 = extractvalue %"char[]" %15, 1, !dbg !998
  %25 = extractvalue %"char[]" %21, 1, !dbg !998
  %neq = icmp ne i64 %25, %24, !dbg !998
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !998
  br i1 %26, label %panic11, label %checkok18, !dbg !998

checkok18:                                        ; preds = %checkok9
  %27 = mul i64 %24, 1, !dbg !998
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !998
  br label %expr_block.exit, !dbg !1000

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr19, align 8
  %28 = load ptr, ptr %taddr19, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 2, 1
  %31 = load %"char[]", ptr %bytes2, align 8, !dbg !1001
  %32 = extractvalue %"char[]" %31, 0, !dbg !1001
  %33 = extractvalue %"char[]" %31, 1, !dbg !1001
  %gt20 = icmp sgt i64 0, %33, !dbg !1001
  %34 = call i1 @llvm.expect.i1(i1 %gt20, i1 false), !dbg !1001
  br i1 %34, label %panic21, label %checkok28, !dbg !1001

checkok28:                                        ; preds = %if.exit
  %lt29 = icmp slt i64 %33, 2, !dbg !1001
  %35 = call i1 @llvm.expect.i1(i1 %lt29, i1 false), !dbg !1001
  br i1 %35, label %panic30, label %checkok37, !dbg !1001

checkok37:                                        ; preds = %checkok28
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !1001
  %37 = insertvalue %"char[]" %36, i64 2, 1, !dbg !1001
  %38 = extractvalue %"char[]" %37, 0, !dbg !1001
  %39 = extractvalue %"char[]" %30, 0, !dbg !1001
  %40 = extractvalue %"char[]" %30, 1, !dbg !1001
  %41 = extractvalue %"char[]" %37, 1, !dbg !1001
  %neq38 = icmp ne i64 %41, %40, !dbg !1001
  %42 = call i1 @llvm.expect.i1(i1 %neq38, i1 false), !dbg !1001
  br i1 %42, label %panic39, label %checkok46, !dbg !1001

checkok46:                                        ; preds = %checkok37
  %43 = mul i64 %40, 1, !dbg !1001
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !1001
  %44 = load i64, ptr %len, align 8, !dbg !1002
  %sub = sub i64 %44, 2, !dbg !1002
  store i64 %sub, ptr %len, align 8, !dbg !1002
  %45 = load %"char[]", ptr %bytes2, align 8, !dbg !1003
  %46 = extractvalue %"char[]" %45, 0, !dbg !1003
  %47 = extractvalue %"char[]" %45, 1, !dbg !1004
  %gt47 = icmp ugt i64 2, %47, !dbg !1004
  %48 = call i1 @llvm.expect.i1(i1 %gt47, i1 false), !dbg !1004
  br i1 %48, label %panic48, label %checkok55, !dbg !1004

checkok55:                                        ; preds = %checkok46
  %size56 = sub i64 %47, 2, !dbg !1003
  %ptradd57 = getelementptr inbounds i8, ptr %46, i64 2, !dbg !1003
  %49 = insertvalue %"char[]" undef, ptr %ptradd57, 0, !dbg !1003
  %50 = insertvalue %"char[]" %49, i64 %size56, 1, !dbg !1003
  store %"char[]" %50, ptr %bytes2, align 8, !dbg !1003
  br label %loop.cond, !dbg !1003

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.51, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !1005
  %ptradd58 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1005
  %hi = load i64, ptr %ptradd58, align 8, !dbg !1005
  store %"any[]" zeroinitializer, ptr %indirectarg59, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.52, i64 11, ptr @.str.53, i64 22, i32 92, ptr byval(%"any[]") align 8 %indirectarg59), !dbg !1008
  unreachable, !dbg !1009

expr_block.exit:                                  ; preds = %checkok18
  ret void, !dbg !1009

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !978
  call void %51(ptr @.panic_msg.14, i64 62, ptr @.file.44, i64 11, ptr @.func.21, i64 10, i32 92) #5, !dbg !978
  unreachable, !dbg !978

panic5:                                           ; preds = %if.then
  store i64 %18, ptr %taddr6, align 8
  %52 = insertvalue %any undef, ptr %taddr6, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %54 = insertvalue %any undef, ptr %taddr7, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd8, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !998
  unreachable, !dbg !998

panic11:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr12, align 8
  %57 = insertvalue %any undef, ptr %taddr12, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr13, align 8
  %59 = insertvalue %any undef, ptr %taddr13, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %60, ptr %ptradd15, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg17) #5, !dbg !998
  unreachable, !dbg !998

panic21:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr22, align 8
  %62 = insertvalue %any undef, ptr %taddr22, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr23, align 8
  %64 = insertvalue %any undef, ptr %taddr23, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %65, ptr %ptradd25, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg27) #5, !dbg !1001
  unreachable, !dbg !1001

panic30:                                          ; preds = %checkok28
  store i64 1, ptr %taddr31, align 8
  %67 = insertvalue %any undef, ptr %taddr31, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr32, align 8
  %69 = insertvalue %any undef, ptr %taddr32, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots33, align 16
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots33, i64 16
  store %any %70, ptr %ptradd34, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots33, 0
  %"$$temp35" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp35", ptr %indirectarg36, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 60, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg36) #5, !dbg !1001
  unreachable, !dbg !1001

panic39:                                          ; preds = %checkok37
  store i64 %41, ptr %taddr40, align 8
  %72 = insertvalue %any undef, ptr %taddr40, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr41, align 8
  %74 = insertvalue %any undef, ptr %taddr41, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots42, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %75, ptr %ptradd43, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg45) #5, !dbg !1001
  unreachable, !dbg !1001

panic48:                                          ; preds = %checkok46
  store i64 %47, ptr %taddr49, align 8
  %77 = insertvalue %any undef, ptr %taddr49, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr50, align 8
  %79 = insertvalue %any undef, ptr %taddr50, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %80, ptr %ptradd52, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg54) #5, !dbg !1003
  unreachable, !dbg !1003
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Mcg32Random.next_int128(ptr %0) #0 comdat !dbg !1010 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1013
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1013
  br i1 %2, label %panic, label %checkok, !dbg !1013

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1014, !DIExpression(), !1015)
  %3 = load ptr, ptr %self, align 8, !dbg !1016
  %4 = call i64 @std.math.random.Mcg32Random.next_long(ptr %3), !dbg !1018
  %zext = zext i64 %4 to i128, !dbg !1018
  %shl = shl i128 %zext, 64, !dbg !1018
  %5 = freeze i128 %shl, !dbg !1018
  %6 = load ptr, ptr %self, align 8, !dbg !1016
  %7 = call i64 @std.math.random.Mcg32Random.next_long(ptr %6), !dbg !1019
  %zext1 = zext i64 %7 to i128, !dbg !1019
  %add = add i128 %5, %zext1, !dbg !1018
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1015
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.44, i64 11, ptr @.func.28, i64 11, i32 93) #5, !dbg !1015
  unreachable, !dbg !1015
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Mcg32Random.next_long(ptr %0) #0 comdat !dbg !1020 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1023
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1023
  br i1 %2, label %panic, label %checkok, !dbg !1023

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1024, !DIExpression(), !1025)
  %3 = load ptr, ptr %self, align 8, !dbg !1026
  %4 = call i32 @std.math.random.Mcg32Random.next_int(ptr %3), !dbg !1028
  %zext = zext i32 %4 to i64, !dbg !1028
  %shl = shl i64 %zext, 32, !dbg !1028
  %5 = freeze i64 %shl, !dbg !1028
  %6 = load ptr, ptr %self, align 8, !dbg !1026
  %7 = call i32 @std.math.random.Mcg32Random.next_int(ptr %6), !dbg !1029
  %zext1 = zext i32 %7 to i64, !dbg !1029
  %add = add i64 %5, %zext1, !dbg !1028
  ret i64 %add, !dbg !1028

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1025
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.44, i64 11, ptr @.func.19, i64 9, i32 94) #5, !dbg !1025
  unreachable, !dbg !1025
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Mcg32Random.next_int(ptr %0) #0 comdat !dbg !1030 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1033
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1033
  br i1 %2, label %panic, label %checkok, !dbg !1033

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1034, !DIExpression(), !1035)
  %3 = load ptr, ptr %self, align 8, !dbg !1036
  %4 = call i16 @std.math.random.Mcg32Random.next_short(ptr %3), !dbg !1038
  %zext = zext i16 %4 to i32, !dbg !1038
  %shl = shl i32 %zext, 16, !dbg !1038
  %5 = freeze i32 %shl, !dbg !1038
  %6 = load ptr, ptr %self, align 8, !dbg !1036
  %7 = call i16 @std.math.random.Mcg32Random.next_short(ptr %6), !dbg !1039
  %zext1 = zext i16 %7 to i32, !dbg !1039
  %add = add i32 %5, %zext1, !dbg !1038
  ret i32 %add, !dbg !1038

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1035
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.44, i64 11, ptr @.func.29, i64 8, i32 95) #5, !dbg !1035
  unreachable, !dbg !1035
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Mcg32Random.next_byte(ptr %0) #0 comdat !dbg !1040 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1043
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1043
  br i1 %2, label %panic, label %checkok, !dbg !1043

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1044, !DIExpression(), !1045)
  %3 = load ptr, ptr %self, align 8, !dbg !1046
  %4 = call i16 @std.math.random.Mcg32Random.next_short(ptr %3), !dbg !1047
  %trunc = trunc i16 %4 to i8, !dbg !1047
  ret i8 %trunc, !dbg !1047

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1045
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.44, i64 11, ptr @.func.31, i64 9, i32 96) #5, !dbg !1045
  unreachable, !dbg !1045
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg16Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1048 {
entry:
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i16, align 2
  %taddr7 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !1053
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1053
  br i1 %4, label %panic, label %checkok, !dbg !1053

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1054, !DIExpression(), !1055)
  store ptr %1, ptr %seed, align 8
  %ptradd = getelementptr inbounds i8, ptr %seed, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %seed, !1056, !DIExpression(), !1057)
  %5 = load ptr, ptr %self, align 8, !dbg !1058
  %checknull = icmp eq ptr %5, null, !dbg !1058
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1058
  br i1 %6, label %panic1, label %checkok2, !dbg !1058

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !1058
  %8 = urem i64 %7, 2, !dbg !1058
  %9 = icmp ne i64 %8, 0, !dbg !1058
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !1058
  br i1 %10, label %panic3, label %checkok6, !dbg !1058

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %seed, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1059, !DIExpression(), !1061)
  store i16 0, ptr %return_value, align 2, !dbg !1061
  store ptr %return_value, ptr %taddr7, align 8
  %11 = load ptr, ptr %taddr7, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 2, 1
  %lo = load ptr, ptr %input, align 8
  %ptradd8 = getelementptr inbounds i8, ptr %input, i64 8
  %hi = load i64, ptr %ptradd8, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 2), !dbg !1063
  %14 = load i16, ptr %return_value, align 2, !dbg !1064
  %or = or i16 %14, 1, !dbg !1062
  store i16 %or, ptr %5, align 2, !dbg !1062
  ret void, !dbg !1062

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1055
  call void %15(ptr @.panic_msg.14, i64 62, ptr @.file.44, i64 11, ptr @.func.16, i64 8, i32 102) #5, !dbg !1055
  unreachable, !dbg !1055

panic1:                                           ; preds = %checkok
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1058
  call void %16(ptr @.panic_msg.17, i64 45, ptr @.file.44, i64 11, ptr @.func.16, i64 8, i32 104) #5, !dbg !1058
  unreachable, !dbg !1058

panic3:                                           ; preds = %checkok2
  store i64 2, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %19 = insertvalue %any undef, ptr %taddr4, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %18, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd5, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.44, i64 11, ptr @.func.16, i64 8, i32 104, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1058
  unreachable, !dbg !1058
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Mcg16Random.next_byte(ptr %0) #0 comdat !dbg !1065 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !1068
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1068
  br i1 %2, label %panic, label %checkok, !dbg !1068

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1069, !DIExpression(), !1070)
    #dbg_declare(ptr %s, !1071, !DIExpression(), !1072)
  %3 = load ptr, ptr %self, align 8, !dbg !1073
  store ptr %3, ptr %s, align 8, !dbg !1073
    #dbg_declare(ptr %result, !1074, !DIExpression(), !1075)
  %4 = load ptr, ptr %s, align 8, !dbg !1076
  %checknull = icmp eq ptr %4, null, !dbg !1076
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1076
  br i1 %5, label %panic1, label %checkok2, !dbg !1076

checkok2:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !1076
  %7 = urem i64 %6, 2, !dbg !1076
  %8 = icmp ne i64 %7, 0, !dbg !1076
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !1076
  br i1 %9, label %panic3, label %checkok5, !dbg !1076

checkok5:                                         ; preds = %checkok2
  %10 = load i16, ptr %4, align 2, !dbg !1076
  %zext = zext i16 %10 to i32, !dbg !1076
  %lshr = lshr i32 %zext, 8, !dbg !1077
  %11 = freeze i32 %lshr, !dbg !1077
  %trunc = trunc i32 %11 to i8, !dbg !1077
  store i8 %trunc, ptr %result, align 1, !dbg !1077
  %12 = load ptr, ptr %s, align 8, !dbg !1078
  %checknull6 = icmp eq ptr %12, null, !dbg !1078
  %13 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !1078
  br i1 %13, label %panic7, label %checkok8, !dbg !1078

checkok8:                                         ; preds = %checkok5
  %14 = ptrtoint ptr %12 to i64, !dbg !1078
  %15 = urem i64 %14, 2, !dbg !1078
  %16 = icmp ne i64 %15, 0, !dbg !1078
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !1078
  br i1 %17, label %panic9, label %checkok16, !dbg !1078

checkok16:                                        ; preds = %checkok8
  %18 = load i16, ptr %12, align 2, !dbg !1078
  %mul = mul i16 %18, -27691, !dbg !1079
  store i16 %mul, ptr %12, align 2, !dbg !1079
  %19 = load i8, ptr %result, align 1, !dbg !1080
  ret i8 %19, !dbg !1080

panic:                                            ; preds = %entry
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1070
  call void %20(ptr @.panic_msg.14, i64 62, ptr @.file.44, i64 11, ptr @.func.31, i64 9, i32 107) #5, !dbg !1070
  unreachable, !dbg !1070

panic1:                                           ; preds = %checkok
  %21 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1076
  call void %21(ptr @.panic_msg.20, i64 42, ptr @.file.44, i64 11, ptr @.func.31, i64 9, i32 110) #5, !dbg !1076
  unreachable, !dbg !1076

panic3:                                           ; preds = %checkok2
  store i64 2, ptr %taddr, align 8
  %22 = insertvalue %any undef, ptr %taddr, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr4, align 8
  %24 = insertvalue %any undef, ptr %taddr4, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %23, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %25, ptr %ptradd, align 16
  %26 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %26, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.44, i64 11, ptr @.func.31, i64 9, i32 110, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1076
  unreachable, !dbg !1076

panic7:                                           ; preds = %checkok5
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1078
  call void %27(ptr @.panic_msg.20, i64 42, ptr @.file.44, i64 11, ptr @.func.31, i64 9, i32 111) #5, !dbg !1078
  unreachable, !dbg !1078

panic9:                                           ; preds = %checkok8
  store i64 2, ptr %taddr10, align 8
  %28 = insertvalue %any undef, ptr %taddr10, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr11, align 8
  %30 = insertvalue %any undef, ptr %taddr11, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %29, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %31, ptr %ptradd13, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.44, i64 11, ptr @.func.31, i64 9, i32 111, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !1078
  unreachable, !dbg !1078
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg16Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1081 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes1 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr17 = alloca ptr, align 8
  %taddr20 = alloca i64, align 8
  %taddr21 = alloca i64, align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca i64, align 8
  %varargslots49 = alloca [2 x %any], align 16
  %indirectarg52 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg57 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !1082
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1082
  br i1 %4, label %panic, label %checkok, !dbg !1082

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1083, !DIExpression(), !1084)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !1085, !DIExpression(), !1086)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes1, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !1087, !DIExpression(), !1089)
  %ptradd2 = getelementptr inbounds i8, ptr %bytes1, i64 8, !dbg !1090
  %5 = load i64, ptr %ptradd2, align 8, !dbg !1090
  store i64 %5, ptr %len, align 8, !dbg !1090
  br label %loop.cond, !dbg !1091

loop.cond:                                        ; preds = %checkok53, %checkok
  %6 = load i64, ptr %len, align 8, !dbg !1092
  %lt = icmp ult i64 0, %6, !dbg !1092
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1092

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1094, !DIExpression(), !1096)
  %7 = load ptr, ptr %self, align 8, !dbg !1097
  %8 = call i8 @std.math.random.Mcg16Random.next_byte(ptr %7), !dbg !1098
  store i8 %8, ptr %value, align 1, !dbg !1098
  %9 = load i64, ptr %len, align 8, !dbg !1099
  %le = icmp ule i64 %9, 1, !dbg !1099
  br i1 %le, label %if.then, label %if.exit, !dbg !1099

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %10 = load ptr, ptr %taddr, align 8
  %11 = load i64, ptr %len, align 8, !dbg !1100
  %add = add i64 0, %11, !dbg !1100
  %size = sub i64 %add, 0, !dbg !1100
  %12 = insertvalue %"char[]" undef, ptr %10, 0, !dbg !1100
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !1100
  %14 = load %"char[]", ptr %bytes1, align 8, !dbg !1102
  %15 = extractvalue %"char[]" %14, 0, !dbg !1102
  %16 = extractvalue %"char[]" %14, 1, !dbg !1103
  %gt = icmp ugt i64 0, %16, !dbg !1103
  %17 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1103
  br i1 %17, label %panic3, label %checkok7, !dbg !1103

checkok7:                                         ; preds = %if.then
  %size8 = sub i64 %16, 0, !dbg !1102
  %18 = insertvalue %"char[]" undef, ptr %15, 0, !dbg !1102
  %19 = insertvalue %"char[]" %18, i64 %size8, 1, !dbg !1102
  %20 = extractvalue %"char[]" %19, 0, !dbg !1102
  %21 = extractvalue %"char[]" %13, 0, !dbg !1102
  %22 = extractvalue %"char[]" %13, 1, !dbg !1102
  %23 = extractvalue %"char[]" %19, 1, !dbg !1102
  %neq = icmp ne i64 %23, %22, !dbg !1102
  %24 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1102
  br i1 %24, label %panic9, label %checkok16, !dbg !1102

checkok16:                                        ; preds = %checkok7
  %25 = mul i64 %22, 1, !dbg !1102
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %20, ptr align 1 %21, i64 %25, i1 false), !dbg !1102
  br label %expr_block.exit, !dbg !1104

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr17, align 8
  %26 = load ptr, ptr %taddr17, align 8
  %27 = insertvalue %"char[]" undef, ptr %26, 0
  %28 = insertvalue %"char[]" %27, i64 1, 1
  %29 = load %"char[]", ptr %bytes1, align 8, !dbg !1105
  %30 = extractvalue %"char[]" %29, 0, !dbg !1105
  %31 = extractvalue %"char[]" %29, 1, !dbg !1105
  %gt18 = icmp sgt i64 0, %31, !dbg !1105
  %32 = call i1 @llvm.expect.i1(i1 %gt18, i1 false), !dbg !1105
  br i1 %32, label %panic19, label %checkok26, !dbg !1105

checkok26:                                        ; preds = %if.exit
  %lt27 = icmp slt i64 %31, 1, !dbg !1105
  %33 = call i1 @llvm.expect.i1(i1 %lt27, i1 false), !dbg !1105
  br i1 %33, label %panic28, label %checkok35, !dbg !1105

checkok35:                                        ; preds = %checkok26
  %34 = insertvalue %"char[]" undef, ptr %30, 0, !dbg !1105
  %35 = insertvalue %"char[]" %34, i64 1, 1, !dbg !1105
  %36 = extractvalue %"char[]" %35, 0, !dbg !1105
  %37 = extractvalue %"char[]" %28, 0, !dbg !1105
  %38 = extractvalue %"char[]" %28, 1, !dbg !1105
  %39 = extractvalue %"char[]" %35, 1, !dbg !1105
  %neq36 = icmp ne i64 %39, %38, !dbg !1105
  %40 = call i1 @llvm.expect.i1(i1 %neq36, i1 false), !dbg !1105
  br i1 %40, label %panic37, label %checkok44, !dbg !1105

checkok44:                                        ; preds = %checkok35
  %41 = mul i64 %38, 1, !dbg !1105
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %36, ptr align 1 %37, i64 %41, i1 false), !dbg !1105
  %42 = load i64, ptr %len, align 8, !dbg !1106
  %sub = sub i64 %42, 1, !dbg !1106
  store i64 %sub, ptr %len, align 8, !dbg !1106
  %43 = load %"char[]", ptr %bytes1, align 8, !dbg !1107
  %44 = extractvalue %"char[]" %43, 0, !dbg !1107
  %45 = extractvalue %"char[]" %43, 1, !dbg !1108
  %gt45 = icmp ugt i64 1, %45, !dbg !1108
  %46 = call i1 @llvm.expect.i1(i1 %gt45, i1 false), !dbg !1108
  br i1 %46, label %panic46, label %checkok53, !dbg !1108

checkok53:                                        ; preds = %checkok44
  %size54 = sub i64 %45, 1, !dbg !1107
  %ptradd55 = getelementptr inbounds i8, ptr %44, i64 1, !dbg !1107
  %47 = insertvalue %"char[]" undef, ptr %ptradd55, 0, !dbg !1107
  %48 = insertvalue %"char[]" %47, i64 %size54, 1, !dbg !1107
  store %"char[]" %48, ptr %bytes1, align 8, !dbg !1107
  br label %loop.cond, !dbg !1107

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.54, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !1109
  %ptradd56 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1109
  %hi = load i64, ptr %ptradd56, align 8, !dbg !1109
  store %"any[]" zeroinitializer, ptr %indirectarg57, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.55, i64 11, ptr @.str.56, i64 22, i32 115, ptr byval(%"any[]") align 8 %indirectarg57), !dbg !1112
  unreachable, !dbg !1113

expr_block.exit:                                  ; preds = %checkok16
  ret void, !dbg !1113

panic:                                            ; preds = %entry
  %49 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1084
  call void %49(ptr @.panic_msg.14, i64 62, ptr @.file.44, i64 11, ptr @.func.21, i64 10, i32 115) #5, !dbg !1084
  unreachable, !dbg !1084

panic3:                                           ; preds = %if.then
  store i64 %16, ptr %taddr4, align 8
  %50 = insertvalue %any undef, ptr %taddr4, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %52 = insertvalue %any undef, ptr %taddr5, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %51, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %53, ptr %ptradd6, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1102
  unreachable, !dbg !1102

panic9:                                           ; preds = %checkok7
  store i64 %23, ptr %taddr10, align 8
  %55 = insertvalue %any undef, ptr %taddr10, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr11, align 8
  %57 = insertvalue %any undef, ptr %taddr11, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %56, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %58, ptr %ptradd13, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !1102
  unreachable, !dbg !1102

panic19:                                          ; preds = %if.exit
  store i64 %31, ptr %taddr20, align 8
  %60 = insertvalue %any undef, ptr %taddr20, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr21, align 8
  %62 = insertvalue %any undef, ptr %taddr21, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %61, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %63, ptr %ptradd23, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg25) #5, !dbg !1105
  unreachable, !dbg !1105

panic28:                                          ; preds = %checkok26
  store i64 0, ptr %taddr29, align 8
  %65 = insertvalue %any undef, ptr %taddr29, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %31, ptr %taddr30, align 8
  %67 = insertvalue %any undef, ptr %taddr30, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %66, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %68, ptr %ptradd32, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 60, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !1105
  unreachable, !dbg !1105

panic37:                                          ; preds = %checkok35
  store i64 %39, ptr %taddr38, align 8
  %70 = insertvalue %any undef, ptr %taddr38, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %38, ptr %taddr39, align 8
  %72 = insertvalue %any undef, ptr %taddr39, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %71, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %73, ptr %ptradd41, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg43) #5, !dbg !1105
  unreachable, !dbg !1105

panic46:                                          ; preds = %checkok44
  store i64 %45, ptr %taddr47, align 8
  %75 = insertvalue %any undef, ptr %taddr47, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr48, align 8
  %77 = insertvalue %any undef, ptr %taddr48, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %76, ptr %varargslots49, align 16
  %ptradd50 = getelementptr inbounds i8, ptr %varargslots49, i64 16
  store %any %78, ptr %ptradd50, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp51" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp51", ptr %indirectarg52, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg52) #5, !dbg !1107
  unreachable, !dbg !1107
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Mcg16Random.next_int128(ptr %0) #0 comdat !dbg !1114 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1117
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1117
  br i1 %2, label %panic, label %checkok, !dbg !1117

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1118, !DIExpression(), !1119)
  %3 = load ptr, ptr %self, align 8, !dbg !1120
  %4 = call i64 @std.math.random.Mcg16Random.next_long(ptr %3), !dbg !1122
  %zext = zext i64 %4 to i128, !dbg !1122
  %shl = shl i128 %zext, 64, !dbg !1122
  %5 = freeze i128 %shl, !dbg !1122
  %6 = load ptr, ptr %self, align 8, !dbg !1120
  %7 = call i64 @std.math.random.Mcg16Random.next_long(ptr %6), !dbg !1123
  %zext1 = zext i64 %7 to i128, !dbg !1123
  %add = add i128 %5, %zext1, !dbg !1122
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1119
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.44, i64 11, ptr @.func.28, i64 11, i32 116) #5, !dbg !1119
  unreachable, !dbg !1119
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Mcg16Random.next_long(ptr %0) #0 comdat !dbg !1124 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1127
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1127
  br i1 %2, label %panic, label %checkok, !dbg !1127

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1128, !DIExpression(), !1129)
  %3 = load ptr, ptr %self, align 8, !dbg !1130
  %4 = call i32 @std.math.random.Mcg16Random.next_int(ptr %3), !dbg !1132
  %zext = zext i32 %4 to i64, !dbg !1132
  %shl = shl i64 %zext, 32, !dbg !1132
  %5 = freeze i64 %shl, !dbg !1132
  %6 = load ptr, ptr %self, align 8, !dbg !1130
  %7 = call i32 @std.math.random.Mcg16Random.next_int(ptr %6), !dbg !1133
  %zext1 = zext i32 %7 to i64, !dbg !1133
  %add = add i64 %5, %zext1, !dbg !1132
  ret i64 %add, !dbg !1132

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1129
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.44, i64 11, ptr @.func.19, i64 9, i32 117) #5, !dbg !1129
  unreachable, !dbg !1129
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Mcg16Random.next_int(ptr %0) #0 comdat !dbg !1134 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1137
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1137
  br i1 %2, label %panic, label %checkok, !dbg !1137

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1138, !DIExpression(), !1139)
  %3 = load ptr, ptr %self, align 8, !dbg !1140
  %4 = call i16 @std.math.random.Mcg16Random.next_short(ptr %3), !dbg !1142
  %zext = zext i16 %4 to i32, !dbg !1142
  %shl = shl i32 %zext, 16, !dbg !1142
  %5 = freeze i32 %shl, !dbg !1142
  %6 = load ptr, ptr %self, align 8, !dbg !1140
  %7 = call i16 @std.math.random.Mcg16Random.next_short(ptr %6), !dbg !1143
  %zext1 = zext i16 %7 to i32, !dbg !1143
  %add = add i32 %5, %zext1, !dbg !1142
  ret i32 %add, !dbg !1142

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1139
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.44, i64 11, ptr @.func.29, i64 8, i32 118) #5, !dbg !1139
  unreachable, !dbg !1139
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Mcg16Random.next_short(ptr %0) #0 comdat !dbg !1144 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1147
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1147
  br i1 %2, label %panic, label %checkok, !dbg !1147

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1148, !DIExpression(), !1149)
  %3 = load ptr, ptr %self, align 8, !dbg !1150
  %4 = call i8 @std.math.random.Mcg16Random.next_byte(ptr %3), !dbg !1152
  %zext = zext i8 %4 to i16, !dbg !1152
  %zext1 = zext i16 %zext to i32, !dbg !1152
  %shl = shl i32 %zext1, 8, !dbg !1152
  %5 = freeze i32 %shl, !dbg !1152
  %6 = load ptr, ptr %self, align 8, !dbg !1150
  %7 = call i8 @std.math.random.Mcg16Random.next_byte(ptr %6), !dbg !1153
  %zext2 = zext i8 %7 to i32, !dbg !1153
  %add = add i32 %5, %zext2, !dbg !1152
  %trunc = trunc i32 %add to i16, !dbg !1152
  ret i16 %trunc, !dbg !1152

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1149
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.44, i64 11, ptr @.func.30, i64 10, i32 119) #5, !dbg !1149
  unreachable, !dbg !1149
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.seeder(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !1154 {
entry:
  %input = alloca %"char[]", align 8
  %out_buffer = alloca %"char[]", align 8
  %out_chars = alloca i64, align 8
  %current = alloca ptr, align 8
  %mark = alloca i64, align 8
  %words = alloca %"ulong[]", align 8
  %elements = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr5 = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %words_len_2 = alloca i64, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %varargslots21 = alloca [2 x %any], align 16
  %indirectarg24 = alloca %"any[]", align 8
  %taddr31 = alloca i64, align 8
  %varargslots32 = alloca [1 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %expr = alloca [8 x i8], align 1
  %x = alloca i64, align 8
  %taddr52 = alloca i64, align 8
  %taddr53 = alloca i64, align 8
  %varargslots54 = alloca [2 x %any], align 16
  %indirectarg57 = alloca %"any[]", align 8
  %taddr63 = alloca i64, align 8
  %taddr64 = alloca i64, align 8
  %varargslots65 = alloca [2 x %any], align 16
  %indirectarg68 = alloca %"any[]", align 8
  %remaining = alloca i64, align 8
  %rest = alloca i64, align 8
  %dst = alloca ptr, align 8
  %taddr81 = alloca i64, align 8
  %taddr82 = alloca i64, align 8
  %varargslots83 = alloca [2 x %any], align 16
  %indirectarg86 = alloca %"any[]", align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %taddr97 = alloca i64, align 8
  %varargslots98 = alloca [1 x %any], align 16
  %indirectarg100 = alloca %"any[]", align 8
  %taddr104 = alloca i64, align 8
  %taddr105 = alloca i64, align 8
  %varargslots106 = alloca [2 x %any], align 16
  %indirectarg109 = alloca %"any[]", align 8
  %taddr117 = alloca i64, align 8
  %varargslots118 = alloca [1 x %any], align 16
  %indirectarg120 = alloca %"any[]", align 8
  %taddr124 = alloca i64, align 8
  %taddr125 = alloca i64, align 8
  %varargslots126 = alloca [2 x %any], align 16
  %indirectarg129 = alloca %"any[]", align 8
  %taddr135 = alloca i64, align 8
  %varargslots136 = alloca [1 x %any], align 16
  %indirectarg138 = alloca %"any[]", align 8
  %taddr142 = alloca i64, align 8
  %taddr143 = alloca i64, align 8
  %varargslots144 = alloca [2 x %any], align 16
  %indirectarg147 = alloca %"any[]", align 8
  %i153 = alloca i64, align 8
  %j158 = alloca i64, align 8
  %taddr166 = alloca i64, align 8
  %varargslots167 = alloca [1 x %any], align 16
  %indirectarg169 = alloca %"any[]", align 8
  %taddr173 = alloca i64, align 8
  %taddr174 = alloca i64, align 8
  %varargslots175 = alloca [2 x %any], align 16
  %indirectarg178 = alloca %"any[]", align 8
  %taddr190 = alloca i64, align 8
  %varargslots191 = alloca [1 x %any], align 16
  %indirectarg193 = alloca %"any[]", align 8
  %taddr197 = alloca i64, align 8
  %taddr198 = alloca i64, align 8
  %varargslots199 = alloca [2 x %any], align 16
  %indirectarg202 = alloca %"any[]", align 8
  %taddr210 = alloca i64, align 8
  %varargslots211 = alloca [1 x %any], align 16
  %indirectarg213 = alloca %"any[]", align 8
  %taddr217 = alloca i64, align 8
  %taddr218 = alloca i64, align 8
  %varargslots219 = alloca [2 x %any], align 16
  %indirectarg222 = alloca %"any[]", align 8
  %taddr228 = alloca i64, align 8
  %varargslots229 = alloca [1 x %any], align 16
  %indirectarg231 = alloca %"any[]", align 8
  %taddr235 = alloca i64, align 8
  %taddr236 = alloca i64, align 8
  %varargslots237 = alloca [2 x %any], align 16
  %indirectarg240 = alloca %"any[]", align 8
  %i247 = alloca i64, align 8
  %j251 = alloca i64, align 8
  %taddr260 = alloca i64, align 8
  %taddr261 = alloca i64, align 8
  %varargslots262 = alloca [2 x %any], align 16
  %indirectarg265 = alloca %"any[]", align 8
  %taddr272 = alloca i64, align 8
  %taddr273 = alloca i64, align 8
  %varargslots274 = alloca [2 x %any], align 16
  %indirectarg277 = alloca %"any[]", align 8
  %taddr283 = alloca i64, align 8
  %taddr284 = alloca i64, align 8
  %varargslots285 = alloca [2 x %any], align 16
  %indirectarg288 = alloca %"any[]", align 8
  %taddr295 = alloca ptr, align 8
  %taddr300 = alloca i64, align 8
  %taddr301 = alloca i64, align 8
  %varargslots302 = alloca [2 x %any], align 16
  %indirectarg305 = alloca %"any[]", align 8
  %taddr309 = alloca i64, align 8
  %taddr310 = alloca i64, align 8
  %varargslots311 = alloca [2 x %any], align 16
  %indirectarg314 = alloca %"any[]", align 8
  store ptr %0, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !1157, !DIExpression(), !1158)
  store ptr %2, ptr %out_buffer, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %out_buffer, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %out_buffer, !1159, !DIExpression(), !1160)
    #dbg_declare(ptr %out_chars, !1161, !DIExpression(), !1162)
  %ptradd2 = getelementptr inbounds i8, ptr %out_buffer, i64 8, !dbg !1163
  %4 = load i64, ptr %ptradd2, align 8, !dbg !1163
  store i64 %4, ptr %out_chars, align 8, !dbg !1163
    #dbg_declare(ptr %current, !1164, !DIExpression(), !1193)
  %5 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !1195
  %i2nb = icmp eq ptr %5, null, !dbg !1195
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1195

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !1199
  br label %if.exit, !dbg !1199

if.exit:                                          ; preds = %if.then, %entry
  %6 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !1201
  store ptr %6, ptr %current, align 8, !dbg !1201
    #dbg_declare(ptr %mark, !1202, !DIExpression(), !1203)
  %7 = load ptr, ptr %current, align 8, !dbg !1204
  %ptradd3 = getelementptr inbounds i8, ptr %7, i64 24, !dbg !1204
  %8 = load i64, ptr %ptradd3, align 8, !dbg !1204
  store i64 %8, ptr %mark, align 8, !dbg !1204
    #dbg_declare(ptr %words, !1205, !DIExpression(), !1211)
  %9 = load i64, ptr %out_chars, align 8, !dbg !1212
  %add = add i64 %9, 7, !dbg !1212
  %sdiv = sdiv i64 %add, 8, !dbg !1212
  store i64 %sdiv, ptr %elements, align 8
  %10 = load i64, ptr %elements, align 8, !dbg !1213
  %mul = mul i64 8, %10, !dbg !1216
  %11 = call ptr @std.core.mem.tmalloc(i64 %mul, i64 8) #6, !dbg !1217
  store ptr %11, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %elements, align 8, !dbg !1218
  %add4 = add i64 0, %13, !dbg !1218
  %size = sub i64 %add4, 0, !dbg !1218
  %14 = insertvalue %"ulong[]" undef, ptr %12, 0, !dbg !1218
  %15 = insertvalue %"ulong[]" %14, i64 %size, 1, !dbg !1218
  store %"ulong[]" %15, ptr %words, align 8, !dbg !1218
  %16 = load %"ulong[]", ptr %words, align 8, !dbg !1219
  %17 = extractvalue %"ulong[]" %16, 0, !dbg !1219
  %18 = extractvalue %"ulong[]" %16, 1, !dbg !1220
  %gt = icmp ugt i64 0, %18, !dbg !1220
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1220
  br i1 %19, label %panic, label %checkok, !dbg !1220

checkok:                                          ; preds = %if.exit
  br label %cond, !dbg !1219

cond:                                             ; preds = %assign, %checkok
  %20 = phi i64 [ 0, %checkok ], [ %add8, %assign ], !dbg !1219
  %lt = icmp ult i64 %20, %18, !dbg !1219
  br i1 %lt, label %assign, label %exit, !dbg !1219

assign:                                           ; preds = %cond
  %ptroffset = getelementptr inbounds [8 x i8], ptr %17, i64 %20, !dbg !1219
  store i64 -7046029254386353131, ptr %ptroffset, align 8, !dbg !1219
  %add8 = add i64 %20, 1, !dbg !1219
  br label %cond, !dbg !1219

exit:                                             ; preds = %cond
    #dbg_declare(ptr %words_len_2, !1221, !DIExpression(), !1222)
  %ptradd9 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1223
  %21 = load i64, ptr %ptradd9, align 8, !dbg !1223
  %mul10 = mul i64 %21, 2, !dbg !1223
  store i64 %mul10, ptr %words_len_2, align 8, !dbg !1223
    #dbg_declare(ptr %i, !1224, !DIExpression(), !1226)
  store i64 0, ptr %i, align 8, !dbg !1227
  br label %loop.cond, !dbg !1227

loop.cond:                                        ; preds = %checkok69, %exit
  %22 = load i64, ptr %i, align 8, !dbg !1228
  %ptradd11 = getelementptr inbounds i8, ptr %input, i64 8, !dbg !1229
  %23 = load i64, ptr %ptradd11, align 8, !dbg !1229
  %sdiv12 = sdiv i64 %23, 8, !dbg !1229
  %gt13 = icmp sgt i64 %sdiv12, %22, !dbg !1228
  %check = icmp sge i64 %22, 0, !dbg !1228
  %siui-gt = and i1 %check, %gt13, !dbg !1228
  br i1 %siui-gt, label %loop.body, label %loop.exit, !dbg !1228

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %j, !1230, !DIExpression(), !1232)
  %24 = load i64, ptr %i, align 8, !dbg !1233
  %ptradd14 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1234
  %25 = load i64, ptr %ptradd14, align 8, !dbg !1234
  %zero = icmp eq i64 %25, 0, !dbg !1233
  %26 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !1233
  br i1 %26, label %panic15, label %checkok16, !dbg !1233

checkok16:                                        ; preds = %loop.body
  %umod = urem i64 %24, %25, !dbg !1233
  store i64 %umod, ptr %j, align 8, !dbg !1233
  %ptradd17 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1235
  %27 = load i64, ptr %ptradd17, align 8, !dbg !1235
  %28 = load ptr, ptr %words, align 8, !dbg !1235
  %29 = load i64, ptr %j, align 8, !dbg !1236
  %ge = icmp uge i64 %29, %27, !dbg !1236
  %30 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1236
  br i1 %30, label %panic18, label %checkok25, !dbg !1236

checkok25:                                        ; preds = %checkok16
  %ptroffset26 = getelementptr inbounds [8 x i8], ptr %28, i64 %29, !dbg !1236
  %31 = load i64, ptr %ptroffset26, align 8, !dbg !1236
  %ptradd27 = getelementptr inbounds i8, ptr %input, i64 8, !dbg !1237
  %32 = load i64, ptr %ptradd27, align 8, !dbg !1237
  %33 = load ptr, ptr %input, align 8, !dbg !1237
  %34 = load i64, ptr %i, align 8, !dbg !1238
  %mul28 = mul i64 %34, 8, !dbg !1238
  %lt29 = icmp slt i64 %mul28, 0, !dbg !1238
  %35 = call i1 @llvm.expect.i1(i1 %lt29, i1 false), !dbg !1238
  br i1 %35, label %panic30, label %checkok35, !dbg !1238

checkok35:                                        ; preds = %checkok25
  %ge36 = icmp sge i64 %mul28, %32, !dbg !1238
  %36 = call i1 @llvm.expect.i1(i1 %ge36, i1 false), !dbg !1238
  br i1 %36, label %panic37, label %checkok44, !dbg !1238

checkok44:                                        ; preds = %checkok35
  %ptradd45 = getelementptr inbounds i8, ptr %33, i64 %mul28, !dbg !1238
  %checknull = icmp eq ptr %ptradd45, null, !dbg !1238
  %37 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1238
  br i1 %37, label %panic46, label %checkok47, !dbg !1238

checkok47:                                        ; preds = %checkok44
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %expr, ptr align 1 %ptradd45, i32 8, i1 false)
    #dbg_declare(ptr %x, !1239, !DIExpression(), !1241)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %x, ptr align 1 %expr, i64 8, i1 false), !dbg !1243
  %38 = load i64, ptr %x, align 8, !dbg !1244
  %mul48 = mul i64 %38, -3372029247567499371, !dbg !1242
  %sub = sub i64 %31, %mul48, !dbg !1235
  store i64 %sub, ptr %ptroffset26, align 8, !dbg !1235
  %ptradd49 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1245
  %39 = load i64, ptr %ptradd49, align 8, !dbg !1245
  %40 = load ptr, ptr %words, align 8, !dbg !1245
  %41 = load i64, ptr %j, align 8, !dbg !1246
  %ge50 = icmp uge i64 %41, %39, !dbg !1246
  %42 = call i1 @llvm.expect.i1(i1 %ge50, i1 false), !dbg !1246
  br i1 %42, label %panic51, label %checkok58, !dbg !1246

checkok58:                                        ; preds = %checkok47
  %ptroffset59 = getelementptr inbounds [8 x i8], ptr %40, i64 %41, !dbg !1246
  %43 = load i64, ptr %ptroffset59, align 8, !dbg !1246
  %ptradd60 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1247
  %44 = load i64, ptr %ptradd60, align 8, !dbg !1247
  %45 = load ptr, ptr %words, align 8, !dbg !1247
  %46 = load i64, ptr %j, align 8, !dbg !1248
  %ge61 = icmp uge i64 %46, %44, !dbg !1248
  %47 = call i1 @llvm.expect.i1(i1 %ge61, i1 false), !dbg !1248
  br i1 %47, label %panic62, label %checkok69, !dbg !1248

checkok69:                                        ; preds = %checkok58
  %ptroffset70 = getelementptr inbounds [8 x i8], ptr %45, i64 %46, !dbg !1248
  %48 = load i64, ptr %ptroffset70, align 8, !dbg !1248
  %lshr = lshr i64 %48, 25, !dbg !1247
  %49 = freeze i64 %lshr, !dbg !1247
  %xor = xor i64 %43, %49, !dbg !1245
  store i64 %xor, ptr %ptroffset59, align 8, !dbg !1245
  %50 = load i64, ptr %i, align 8, !dbg !1249
  %add71 = add i64 %50, 1, !dbg !1249
  store i64 %add71, ptr %i, align 8, !dbg !1249
  br label %loop.cond, !dbg !1249

loop.exit:                                        ; preds = %loop.cond
    #dbg_declare(ptr %remaining, !1250, !DIExpression(), !1251)
  %ptradd72 = getelementptr inbounds i8, ptr %input, i64 8, !dbg !1252
  %51 = load i64, ptr %ptradd72, align 8, !dbg !1252
  %ptradd73 = getelementptr inbounds i8, ptr %input, i64 8, !dbg !1253
  %52 = load i64, ptr %ptradd73, align 8, !dbg !1253
  %sdiv74 = sdiv i64 %52, 8, !dbg !1253
  %mul75 = mul i64 %sdiv74, 8, !dbg !1253
  %sub76 = sub i64 %51, %mul75, !dbg !1252
  store i64 %sub76, ptr %remaining, align 8, !dbg !1252
  %53 = load i64, ptr %remaining, align 8, !dbg !1254
  %i2b = icmp ne i64 %53, 0, !dbg !1254
  br i1 %i2b, label %if.then77, label %if.exit152, !dbg !1254

if.then77:                                        ; preds = %loop.exit
    #dbg_declare(ptr %rest, !1255, !DIExpression(), !1257)
  store i64 -1065810590584100411, ptr %rest, align 8, !dbg !1258
  store ptr %rest, ptr %dst, align 8
  %ptradd78 = getelementptr inbounds i8, ptr %input, i64 8, !dbg !1259
  %54 = load i64, ptr %ptradd78, align 8, !dbg !1259
  %55 = load ptr, ptr %input, align 8, !dbg !1259
  %56 = load i64, ptr %remaining, align 8, !dbg !1260
  %57 = sub nuw i64 %54, %56, !dbg !1260
  %ge79 = icmp uge i64 %57, %54, !dbg !1260
  %58 = call i1 @llvm.expect.i1(i1 %ge79, i1 false), !dbg !1260
  br i1 %58, label %panic80, label %checkok87, !dbg !1260

checkok87:                                        ; preds = %if.then77
  %ptradd88 = getelementptr inbounds i8, ptr %55, i64 %57, !dbg !1260
  store ptr %ptradd88, ptr %src, align 8
  %59 = load i64, ptr %remaining, align 8
  store i64 %59, ptr %len, align 8
  %60 = load i64, ptr %len, align 8, !dbg !1261
  %eq = icmp eq i64 0, %60, !dbg !1261
  br i1 %eq, label %or.phi, label %or.rhs, !dbg !1261

or.rhs:                                           ; preds = %checkok87
  %61 = load ptr, ptr %dst, align 8, !dbg !1265
  %62 = load i64, ptr %len, align 8, !dbg !1266
  %ptradd_any = getelementptr i8, ptr %61, i64 %62, !dbg !1266
  %63 = load ptr, ptr %src, align 8, !dbg !1267
  %le = icmp ule ptr %ptradd_any, %63, !dbg !1265
  br label %or.phi, !dbg !1265

or.phi:                                           ; preds = %or.rhs, %checkok87
  %val = phi i1 [ true, %checkok87 ], [ %le, %or.rhs ], !dbg !1265
  br i1 %val, label %or.phi92, label %or.rhs89, !dbg !1265

or.rhs89:                                         ; preds = %or.phi
  %64 = load ptr, ptr %src, align 8, !dbg !1268
  %65 = load i64, ptr %len, align 8, !dbg !1269
  %ptradd_any90 = getelementptr i8, ptr %64, i64 %65, !dbg !1269
  %66 = load ptr, ptr %dst, align 8, !dbg !1270
  %le91 = icmp ule ptr %ptradd_any90, %66, !dbg !1268
  br label %or.phi92, !dbg !1268

or.phi92:                                         ; preds = %or.rhs89, %or.phi
  %val93 = phi i1 [ true, %or.phi ], [ %le91, %or.rhs89 ], !dbg !1268
  br i1 %val93, label %assert_ok, label %assert_fail, !dbg !1268

assert_fail:                                      ; preds = %or.phi92
  %67 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1261
  call void %67(ptr @.panic_msg.68, i64 95, ptr @.file.69, i64 6, ptr @.func.63, i64 6, i32 324) #5, !dbg !1261
  unreachable, !dbg !1261

assert_ok:                                        ; preds = %or.phi92
  %68 = load ptr, ptr %dst, align 8, !dbg !1271
  %69 = load ptr, ptr %src, align 8, !dbg !1272
  %70 = load i64, ptr %len, align 8, !dbg !1273
  call void @llvm.memcpy.p0.p0.i64(ptr %68, ptr %69, i64 %70, i1 false), !dbg !1274
  %ptradd94 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1275
  %71 = load i64, ptr %ptradd94, align 8, !dbg !1275
  %72 = load ptr, ptr %words, align 8, !dbg !1275
  %73 = sub nuw i64 %71, 1, !dbg !1276
  %lt95 = icmp slt i64 %73, 0, !dbg !1276
  %74 = call i1 @llvm.expect.i1(i1 %lt95, i1 false), !dbg !1276
  br i1 %74, label %panic96, label %checkok101, !dbg !1276

checkok101:                                       ; preds = %assert_ok
  %ge102 = icmp sge i64 %73, %71, !dbg !1276
  %75 = call i1 @llvm.expect.i1(i1 %ge102, i1 false), !dbg !1276
  br i1 %75, label %panic103, label %checkok110, !dbg !1276

checkok110:                                       ; preds = %checkok101
  %ptroffset111 = getelementptr inbounds [8 x i8], ptr %72, i64 %73, !dbg !1276
  %76 = load i64, ptr %ptroffset111, align 8, !dbg !1276
  %77 = load i64, ptr %rest, align 8, !dbg !1277
  %mul112 = mul i64 %77, -3372029247567499371, !dbg !1277
  %sub113 = sub i64 %76, %mul112, !dbg !1275
  store i64 %sub113, ptr %ptroffset111, align 8, !dbg !1275
  %ptradd114 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1278
  %78 = load i64, ptr %ptradd114, align 8, !dbg !1278
  %79 = load ptr, ptr %words, align 8, !dbg !1278
  %80 = sub nuw i64 %78, 1, !dbg !1279
  %lt115 = icmp slt i64 %80, 0, !dbg !1279
  %81 = call i1 @llvm.expect.i1(i1 %lt115, i1 false), !dbg !1279
  br i1 %81, label %panic116, label %checkok121, !dbg !1279

checkok121:                                       ; preds = %checkok110
  %ge122 = icmp sge i64 %80, %78, !dbg !1279
  %82 = call i1 @llvm.expect.i1(i1 %ge122, i1 false), !dbg !1279
  br i1 %82, label %panic123, label %checkok130, !dbg !1279

checkok130:                                       ; preds = %checkok121
  %ptroffset131 = getelementptr inbounds [8 x i8], ptr %79, i64 %80, !dbg !1279
  %83 = load i64, ptr %ptroffset131, align 8, !dbg !1279
  %ptradd132 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1280
  %84 = load i64, ptr %ptradd132, align 8, !dbg !1280
  %85 = load ptr, ptr %words, align 8, !dbg !1280
  %86 = sub nuw i64 %84, 1, !dbg !1281
  %lt133 = icmp slt i64 %86, 0, !dbg !1281
  %87 = call i1 @llvm.expect.i1(i1 %lt133, i1 false), !dbg !1281
  br i1 %87, label %panic134, label %checkok139, !dbg !1281

checkok139:                                       ; preds = %checkok130
  %ge140 = icmp sge i64 %86, %84, !dbg !1281
  %88 = call i1 @llvm.expect.i1(i1 %ge140, i1 false), !dbg !1281
  br i1 %88, label %panic141, label %checkok148, !dbg !1281

checkok148:                                       ; preds = %checkok139
  %ptroffset149 = getelementptr inbounds [8 x i8], ptr %85, i64 %86, !dbg !1281
  %89 = load i64, ptr %ptroffset149, align 8, !dbg !1281
  %lshr150 = lshr i64 %89, 25, !dbg !1280
  %90 = freeze i64 %lshr150, !dbg !1280
  %xor151 = xor i64 %83, %90, !dbg !1278
  store i64 %xor151, ptr %ptroffset131, align 8, !dbg !1278
  br label %if.exit152, !dbg !1278

if.exit152:                                       ; preds = %checkok148, %loop.exit
    #dbg_declare(ptr %i153, !1282, !DIExpression(), !1285)
  %91 = load i64, ptr %words_len_2, align 8, !dbg !1286
  %sub154 = sub i64 %91, 1, !dbg !1286
  store i64 %sub154, ptr %i153, align 8, !dbg !1286
  br label %loop.cond155, !dbg !1286

loop.cond155:                                     ; preds = %checkok241, %if.exit152
  %92 = load i64, ptr %i153, align 8, !dbg !1287
  %ge156 = icmp sge i64 %92, 0, !dbg !1287
  br i1 %ge156, label %loop.body157, label %loop.exit246, !dbg !1287

loop.body157:                                     ; preds = %loop.cond155
    #dbg_declare(ptr %j158, !1288, !DIExpression(), !1290)
  %93 = load i64, ptr %i153, align 8, !dbg !1291
  %ptradd159 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1292
  %94 = load i64, ptr %ptradd159, align 8, !dbg !1292
  %zero160 = icmp eq i64 %94, 0, !dbg !1291
  %95 = call i1 @llvm.expect.i1(i1 %zero160, i1 false), !dbg !1291
  br i1 %95, label %panic161, label %checkok162, !dbg !1291

checkok162:                                       ; preds = %loop.body157
  %smod = srem i64 %93, %94, !dbg !1291
  store i64 %smod, ptr %j158, align 8, !dbg !1291
  %ptradd163 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1293
  %96 = load i64, ptr %ptradd163, align 8, !dbg !1293
  %97 = load ptr, ptr %words, align 8, !dbg !1293
  %98 = load i64, ptr %j158, align 8, !dbg !1294
  %lt164 = icmp slt i64 %98, 0, !dbg !1294
  %99 = call i1 @llvm.expect.i1(i1 %lt164, i1 false), !dbg !1294
  br i1 %99, label %panic165, label %checkok170, !dbg !1294

checkok170:                                       ; preds = %checkok162
  %ge171 = icmp sge i64 %98, %96, !dbg !1294
  %100 = call i1 @llvm.expect.i1(i1 %ge171, i1 false), !dbg !1294
  br i1 %100, label %panic172, label %checkok179, !dbg !1294

checkok179:                                       ; preds = %checkok170
  %ptroffset180 = getelementptr inbounds [8 x i8], ptr %97, i64 %98, !dbg !1294
  %101 = load i64, ptr %ptroffset180, align 8, !dbg !1294
  %ptradd181 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1295
  %102 = load i64, ptr %ptradd181, align 8, !dbg !1295
  %103 = load ptr, ptr %words, align 8, !dbg !1295
  %104 = load i64, ptr %i153, align 8, !dbg !1296
  %add182 = add i64 %104, 1, !dbg !1296
  %ptradd183 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1297
  %105 = load i64, ptr %ptradd183, align 8, !dbg !1297
  %zero184 = icmp eq i64 %105, 0, !dbg !1296
  %106 = call i1 @llvm.expect.i1(i1 %zero184, i1 false), !dbg !1296
  br i1 %106, label %panic185, label %checkok186, !dbg !1296

checkok186:                                       ; preds = %checkok179
  %smod187 = srem i64 %add182, %105, !dbg !1296
  %lt188 = icmp slt i64 %smod187, 0, !dbg !1296
  %107 = call i1 @llvm.expect.i1(i1 %lt188, i1 false), !dbg !1296
  br i1 %107, label %panic189, label %checkok194, !dbg !1296

checkok194:                                       ; preds = %checkok186
  %ge195 = icmp sge i64 %smod187, %102, !dbg !1296
  %108 = call i1 @llvm.expect.i1(i1 %ge195, i1 false), !dbg !1296
  br i1 %108, label %panic196, label %checkok203, !dbg !1296

checkok203:                                       ; preds = %checkok194
  %ptroffset204 = getelementptr inbounds [8 x i8], ptr %103, i64 %smod187, !dbg !1296
  %109 = load i64, ptr %ptroffset204, align 8, !dbg !1296
  %mul205 = mul i64 %109, -3372029247567499371, !dbg !1295
  %sub206 = sub i64 %101, %mul205, !dbg !1293
  store i64 %sub206, ptr %ptroffset180, align 8, !dbg !1293
  %ptradd207 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1298
  %110 = load i64, ptr %ptradd207, align 8, !dbg !1298
  %111 = load ptr, ptr %words, align 8, !dbg !1298
  %112 = load i64, ptr %j158, align 8, !dbg !1299
  %lt208 = icmp slt i64 %112, 0, !dbg !1299
  %113 = call i1 @llvm.expect.i1(i1 %lt208, i1 false), !dbg !1299
  br i1 %113, label %panic209, label %checkok214, !dbg !1299

checkok214:                                       ; preds = %checkok203
  %ge215 = icmp sge i64 %112, %110, !dbg !1299
  %114 = call i1 @llvm.expect.i1(i1 %ge215, i1 false), !dbg !1299
  br i1 %114, label %panic216, label %checkok223, !dbg !1299

checkok223:                                       ; preds = %checkok214
  %ptroffset224 = getelementptr inbounds [8 x i8], ptr %111, i64 %112, !dbg !1299
  %115 = load i64, ptr %ptroffset224, align 8, !dbg !1299
  %ptradd225 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1300
  %116 = load i64, ptr %ptradd225, align 8, !dbg !1300
  %117 = load ptr, ptr %words, align 8, !dbg !1300
  %118 = load i64, ptr %j158, align 8, !dbg !1301
  %lt226 = icmp slt i64 %118, 0, !dbg !1301
  %119 = call i1 @llvm.expect.i1(i1 %lt226, i1 false), !dbg !1301
  br i1 %119, label %panic227, label %checkok232, !dbg !1301

checkok232:                                       ; preds = %checkok223
  %ge233 = icmp sge i64 %118, %116, !dbg !1301
  %120 = call i1 @llvm.expect.i1(i1 %ge233, i1 false), !dbg !1301
  br i1 %120, label %panic234, label %checkok241, !dbg !1301

checkok241:                                       ; preds = %checkok232
  %ptroffset242 = getelementptr inbounds [8 x i8], ptr %117, i64 %118, !dbg !1301
  %121 = load i64, ptr %ptroffset242, align 8, !dbg !1301
  %lshr243 = lshr i64 %121, 25, !dbg !1300
  %122 = freeze i64 %lshr243, !dbg !1300
  %xor244 = xor i64 %115, %122, !dbg !1298
  store i64 %xor244, ptr %ptroffset224, align 8, !dbg !1298
  %123 = load i64, ptr %i153, align 8, !dbg !1302
  %sub245 = sub i64 %123, 1, !dbg !1302
  store i64 %sub245, ptr %i153, align 8, !dbg !1302
  br label %loop.cond155, !dbg !1302

loop.exit246:                                     ; preds = %loop.cond155
    #dbg_declare(ptr %i247, !1303, !DIExpression(), !1305)
  store i64 0, ptr %i247, align 8, !dbg !1306
  br label %loop.cond248, !dbg !1306

loop.cond248:                                     ; preds = %checkok289, %loop.exit246
  %124 = load i64, ptr %i247, align 8, !dbg !1307
  %125 = load i64, ptr %words_len_2, align 8, !dbg !1308
  %lt249 = icmp ult i64 %124, %125, !dbg !1307
  br i1 %lt249, label %loop.body250, label %loop.exit294, !dbg !1307

loop.body250:                                     ; preds = %loop.cond248
    #dbg_declare(ptr %j251, !1309, !DIExpression(), !1311)
  %126 = load i64, ptr %i247, align 8, !dbg !1312
  %ptradd252 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1313
  %127 = load i64, ptr %ptradd252, align 8, !dbg !1313
  %zero253 = icmp eq i64 %127, 0, !dbg !1312
  %128 = call i1 @llvm.expect.i1(i1 %zero253, i1 false), !dbg !1312
  br i1 %128, label %panic254, label %checkok255, !dbg !1312

checkok255:                                       ; preds = %loop.body250
  %umod256 = urem i64 %126, %127, !dbg !1312
  store i64 %umod256, ptr %j251, align 8, !dbg !1312
  %ptradd257 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1314
  %129 = load i64, ptr %ptradd257, align 8, !dbg !1314
  %130 = load ptr, ptr %words, align 8, !dbg !1314
  %131 = load i64, ptr %j251, align 8, !dbg !1315
  %ge258 = icmp uge i64 %131, %129, !dbg !1315
  %132 = call i1 @llvm.expect.i1(i1 %ge258, i1 false), !dbg !1315
  br i1 %132, label %panic259, label %checkok266, !dbg !1315

checkok266:                                       ; preds = %checkok255
  %ptroffset267 = getelementptr inbounds [8 x i8], ptr %130, i64 %131, !dbg !1315
  %133 = load i64, ptr %ptroffset267, align 8, !dbg !1315
  %mul268 = mul i64 %133, -1065810590584100411, !dbg !1314
  store i64 %mul268, ptr %ptroffset267, align 8, !dbg !1314
  %ptradd269 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1316
  %134 = load i64, ptr %ptradd269, align 8, !dbg !1316
  %135 = load ptr, ptr %words, align 8, !dbg !1316
  %136 = load i64, ptr %j251, align 8, !dbg !1317
  %ge270 = icmp uge i64 %136, %134, !dbg !1317
  %137 = call i1 @llvm.expect.i1(i1 %ge270, i1 false), !dbg !1317
  br i1 %137, label %panic271, label %checkok278, !dbg !1317

checkok278:                                       ; preds = %checkok266
  %ptroffset279 = getelementptr inbounds [8 x i8], ptr %135, i64 %136, !dbg !1317
  %138 = load i64, ptr %ptroffset279, align 8, !dbg !1317
  %ptradd280 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1318
  %139 = load i64, ptr %ptradd280, align 8, !dbg !1318
  %140 = load ptr, ptr %words, align 8, !dbg !1318
  %141 = load i64, ptr %j251, align 8, !dbg !1319
  %ge281 = icmp uge i64 %141, %139, !dbg !1319
  %142 = call i1 @llvm.expect.i1(i1 %ge281, i1 false), !dbg !1319
  br i1 %142, label %panic282, label %checkok289, !dbg !1319

checkok289:                                       ; preds = %checkok278
  %ptroffset290 = getelementptr inbounds [8 x i8], ptr %140, i64 %141, !dbg !1319
  %143 = load i64, ptr %ptroffset290, align 8, !dbg !1319
  %lshr291 = lshr i64 %143, 25, !dbg !1318
  %144 = freeze i64 %lshr291, !dbg !1318
  %xor292 = xor i64 %138, %144, !dbg !1316
  store i64 %xor292, ptr %ptroffset279, align 8, !dbg !1316
  %145 = load i64, ptr %i247, align 8, !dbg !1320
  %add293 = add i64 %145, 1, !dbg !1320
  store i64 %add293, ptr %i247, align 8, !dbg !1320
  br label %loop.cond248, !dbg !1320

loop.exit294:                                     ; preds = %loop.cond248
  %146 = load ptr, ptr %words, align 8, !dbg !1321
  store ptr %146, ptr %taddr295, align 8
  %147 = load ptr, ptr %taddr295, align 8
  %148 = load i64, ptr %out_chars, align 8, !dbg !1322
  %add296 = add i64 0, %148, !dbg !1322
  %size297 = sub i64 %add296, 0, !dbg !1322
  %149 = insertvalue %"char[]" undef, ptr %147, 0, !dbg !1322
  %150 = insertvalue %"char[]" %149, i64 %size297, 1, !dbg !1322
  %151 = load %"char[]", ptr %out_buffer, align 8, !dbg !1323
  %152 = extractvalue %"char[]" %151, 0, !dbg !1323
  %153 = extractvalue %"char[]" %151, 1, !dbg !1324
  %gt298 = icmp ugt i64 0, %153, !dbg !1324
  %154 = call i1 @llvm.expect.i1(i1 %gt298, i1 false), !dbg !1324
  br i1 %154, label %panic299, label %checkok306, !dbg !1324

checkok306:                                       ; preds = %loop.exit294
  %size307 = sub i64 %153, 0, !dbg !1323
  %155 = insertvalue %"char[]" undef, ptr %152, 0, !dbg !1323
  %156 = insertvalue %"char[]" %155, i64 %size307, 1, !dbg !1323
  %157 = extractvalue %"char[]" %156, 0, !dbg !1323
  %158 = extractvalue %"char[]" %150, 0, !dbg !1323
  %159 = extractvalue %"char[]" %150, 1, !dbg !1323
  %160 = extractvalue %"char[]" %156, 1, !dbg !1323
  %neq = icmp ne i64 %160, %159, !dbg !1323
  %161 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1323
  br i1 %161, label %panic308, label %checkok315, !dbg !1323

checkok315:                                       ; preds = %checkok306
  %162 = mul i64 %159, 1, !dbg !1323
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %157, ptr align 1 %158, i64 %162, i1 false), !dbg !1323
  %163 = load ptr, ptr %current, align 8, !dbg !1325
  %164 = load i64, ptr %mark, align 8, !dbg !1325
  call void @std.core.mem.allocator.TempAllocator.reset(ptr %163, i64 %164), !dbg !1327
  ret void, !dbg !1328

panic:                                            ; preds = %if.exit
  store i64 %18, ptr %taddr5, align 8
  %165 = insertvalue %any undef, ptr %taddr5, 0
  %166 = insertvalue %any %165, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr6, align 8
  %167 = insertvalue %any undef, ptr %taddr6, 0
  %168 = insertvalue %any %167, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %166, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %168, ptr %ptradd7, align 16
  %169 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %169, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 30, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1219
  unreachable, !dbg !1219

panic15:                                          ; preds = %loop.body
  %170 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1233
  call void %170(ptr @.panic_msg.64, i64 10, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 36) #5, !dbg !1233
  unreachable, !dbg !1233

panic18:                                          ; preds = %checkok16
  store i64 %27, ptr %taddr19, align 8
  %171 = insertvalue %any undef, ptr %taddr19, 0
  %172 = insertvalue %any %171, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %29, ptr %taddr20, align 8
  %173 = insertvalue %any undef, ptr %taddr20, 0
  %174 = insertvalue %any %173, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %172, ptr %varargslots21, align 16
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %174, ptr %ptradd22, align 16
  %175 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %175, i64 2, 1
  store %"any[]" %"$$temp23", ptr %indirectarg24, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.65, i64 59, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 37, ptr byval(%"any[]") align 8 %indirectarg24) #5, !dbg !1236
  unreachable, !dbg !1236

panic30:                                          ; preds = %checkok25
  store i64 %mul28, ptr %taddr31, align 8
  %176 = insertvalue %any undef, ptr %taddr31, 0
  %177 = insertvalue %any %176, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %177, ptr %varargslots32, align 16
  %178 = insertvalue %"any[]" undef, ptr %varargslots32, 0
  %"$$temp33" = insertvalue %"any[]" %178, i64 1, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 38, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 37, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !1238
  unreachable, !dbg !1238

panic37:                                          ; preds = %checkok35
  store i64 %32, ptr %taddr38, align 8
  %179 = insertvalue %any undef, ptr %taddr38, 0
  %180 = insertvalue %any %179, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %mul28, ptr %taddr39, align 8
  %181 = insertvalue %any undef, ptr %taddr39, 0
  %182 = insertvalue %any %181, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %180, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %182, ptr %ptradd41, align 16
  %183 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %183, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.65, i64 59, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 37, ptr byval(%"any[]") align 8 %indirectarg43) #5, !dbg !1238
  unreachable, !dbg !1238

panic46:                                          ; preds = %checkok44
  %184 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1329
  call void %184(ptr @.panic_msg.67, i64 63, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 37) #5, !dbg !1329
  unreachable, !dbg !1329

panic51:                                          ; preds = %checkok47
  store i64 %39, ptr %taddr52, align 8
  %185 = insertvalue %any undef, ptr %taddr52, 0
  %186 = insertvalue %any %185, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr53, align 8
  %187 = insertvalue %any undef, ptr %taddr53, 0
  %188 = insertvalue %any %187, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %186, ptr %varargslots54, align 16
  %ptradd55 = getelementptr inbounds i8, ptr %varargslots54, i64 16
  store %any %188, ptr %ptradd55, align 16
  %189 = insertvalue %"any[]" undef, ptr %varargslots54, 0
  %"$$temp56" = insertvalue %"any[]" %189, i64 2, 1
  store %"any[]" %"$$temp56", ptr %indirectarg57, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.65, i64 59, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 38, ptr byval(%"any[]") align 8 %indirectarg57) #5, !dbg !1246
  unreachable, !dbg !1246

panic62:                                          ; preds = %checkok58
  store i64 %44, ptr %taddr63, align 8
  %190 = insertvalue %any undef, ptr %taddr63, 0
  %191 = insertvalue %any %190, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %46, ptr %taddr64, align 8
  %192 = insertvalue %any undef, ptr %taddr64, 0
  %193 = insertvalue %any %192, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %191, ptr %varargslots65, align 16
  %ptradd66 = getelementptr inbounds i8, ptr %varargslots65, i64 16
  store %any %193, ptr %ptradd66, align 16
  %194 = insertvalue %"any[]" undef, ptr %varargslots65, 0
  %"$$temp67" = insertvalue %"any[]" %194, i64 2, 1
  store %"any[]" %"$$temp67", ptr %indirectarg68, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.65, i64 59, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 38, ptr byval(%"any[]") align 8 %indirectarg68) #5, !dbg !1248
  unreachable, !dbg !1248

panic80:                                          ; preds = %if.then77
  store i64 %54, ptr %taddr81, align 8
  %195 = insertvalue %any undef, ptr %taddr81, 0
  %196 = insertvalue %any %195, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %57, ptr %taddr82, align 8
  %197 = insertvalue %any undef, ptr %taddr82, 0
  %198 = insertvalue %any %197, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %196, ptr %varargslots83, align 16
  %ptradd84 = getelementptr inbounds i8, ptr %varargslots83, i64 16
  store %any %198, ptr %ptradd84, align 16
  %199 = insertvalue %"any[]" undef, ptr %varargslots83, 0
  %"$$temp85" = insertvalue %"any[]" %199, i64 2, 1
  store %"any[]" %"$$temp85", ptr %indirectarg86, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.65, i64 59, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 46, ptr byval(%"any[]") align 8 %indirectarg86) #5, !dbg !1260
  unreachable, !dbg !1260

panic96:                                          ; preds = %assert_ok
  store i64 %73, ptr %taddr97, align 8
  %200 = insertvalue %any undef, ptr %taddr97, 0
  %201 = insertvalue %any %200, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %201, ptr %varargslots98, align 16
  %202 = insertvalue %"any[]" undef, ptr %varargslots98, 0
  %"$$temp99" = insertvalue %"any[]" %202, i64 1, 1
  store %"any[]" %"$$temp99", ptr %indirectarg100, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 38, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 47, ptr byval(%"any[]") align 8 %indirectarg100) #5, !dbg !1276
  unreachable, !dbg !1276

panic103:                                         ; preds = %checkok101
  store i64 %71, ptr %taddr104, align 8
  %203 = insertvalue %any undef, ptr %taddr104, 0
  %204 = insertvalue %any %203, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %73, ptr %taddr105, align 8
  %205 = insertvalue %any undef, ptr %taddr105, 0
  %206 = insertvalue %any %205, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %204, ptr %varargslots106, align 16
  %ptradd107 = getelementptr inbounds i8, ptr %varargslots106, i64 16
  store %any %206, ptr %ptradd107, align 16
  %207 = insertvalue %"any[]" undef, ptr %varargslots106, 0
  %"$$temp108" = insertvalue %"any[]" %207, i64 2, 1
  store %"any[]" %"$$temp108", ptr %indirectarg109, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.65, i64 59, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 47, ptr byval(%"any[]") align 8 %indirectarg109) #5, !dbg !1276
  unreachable, !dbg !1276

panic116:                                         ; preds = %checkok110
  store i64 %80, ptr %taddr117, align 8
  %208 = insertvalue %any undef, ptr %taddr117, 0
  %209 = insertvalue %any %208, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %209, ptr %varargslots118, align 16
  %210 = insertvalue %"any[]" undef, ptr %varargslots118, 0
  %"$$temp119" = insertvalue %"any[]" %210, i64 1, 1
  store %"any[]" %"$$temp119", ptr %indirectarg120, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 38, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 48, ptr byval(%"any[]") align 8 %indirectarg120) #5, !dbg !1279
  unreachable, !dbg !1279

panic123:                                         ; preds = %checkok121
  store i64 %78, ptr %taddr124, align 8
  %211 = insertvalue %any undef, ptr %taddr124, 0
  %212 = insertvalue %any %211, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %80, ptr %taddr125, align 8
  %213 = insertvalue %any undef, ptr %taddr125, 0
  %214 = insertvalue %any %213, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %212, ptr %varargslots126, align 16
  %ptradd127 = getelementptr inbounds i8, ptr %varargslots126, i64 16
  store %any %214, ptr %ptradd127, align 16
  %215 = insertvalue %"any[]" undef, ptr %varargslots126, 0
  %"$$temp128" = insertvalue %"any[]" %215, i64 2, 1
  store %"any[]" %"$$temp128", ptr %indirectarg129, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.65, i64 59, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 48, ptr byval(%"any[]") align 8 %indirectarg129) #5, !dbg !1279
  unreachable, !dbg !1279

panic134:                                         ; preds = %checkok130
  store i64 %86, ptr %taddr135, align 8
  %216 = insertvalue %any undef, ptr %taddr135, 0
  %217 = insertvalue %any %216, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %217, ptr %varargslots136, align 16
  %218 = insertvalue %"any[]" undef, ptr %varargslots136, 0
  %"$$temp137" = insertvalue %"any[]" %218, i64 1, 1
  store %"any[]" %"$$temp137", ptr %indirectarg138, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 38, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 48, ptr byval(%"any[]") align 8 %indirectarg138) #5, !dbg !1281
  unreachable, !dbg !1281

panic141:                                         ; preds = %checkok139
  store i64 %84, ptr %taddr142, align 8
  %219 = insertvalue %any undef, ptr %taddr142, 0
  %220 = insertvalue %any %219, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %86, ptr %taddr143, align 8
  %221 = insertvalue %any undef, ptr %taddr143, 0
  %222 = insertvalue %any %221, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %220, ptr %varargslots144, align 16
  %ptradd145 = getelementptr inbounds i8, ptr %varargslots144, i64 16
  store %any %222, ptr %ptradd145, align 16
  %223 = insertvalue %"any[]" undef, ptr %varargslots144, 0
  %"$$temp146" = insertvalue %"any[]" %223, i64 2, 1
  store %"any[]" %"$$temp146", ptr %indirectarg147, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.65, i64 59, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 48, ptr byval(%"any[]") align 8 %indirectarg147) #5, !dbg !1281
  unreachable, !dbg !1281

panic161:                                         ; preds = %loop.body157
  %224 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1291
  call void %224(ptr @.panic_msg.64, i64 10, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 54) #5, !dbg !1291
  unreachable, !dbg !1291

panic165:                                         ; preds = %checkok162
  store i64 %98, ptr %taddr166, align 8
  %225 = insertvalue %any undef, ptr %taddr166, 0
  %226 = insertvalue %any %225, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %226, ptr %varargslots167, align 16
  %227 = insertvalue %"any[]" undef, ptr %varargslots167, 0
  %"$$temp168" = insertvalue %"any[]" %227, i64 1, 1
  store %"any[]" %"$$temp168", ptr %indirectarg169, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 38, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 55, ptr byval(%"any[]") align 8 %indirectarg169) #5, !dbg !1294
  unreachable, !dbg !1294

panic172:                                         ; preds = %checkok170
  store i64 %96, ptr %taddr173, align 8
  %228 = insertvalue %any undef, ptr %taddr173, 0
  %229 = insertvalue %any %228, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %98, ptr %taddr174, align 8
  %230 = insertvalue %any undef, ptr %taddr174, 0
  %231 = insertvalue %any %230, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %229, ptr %varargslots175, align 16
  %ptradd176 = getelementptr inbounds i8, ptr %varargslots175, i64 16
  store %any %231, ptr %ptradd176, align 16
  %232 = insertvalue %"any[]" undef, ptr %varargslots175, 0
  %"$$temp177" = insertvalue %"any[]" %232, i64 2, 1
  store %"any[]" %"$$temp177", ptr %indirectarg178, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.65, i64 59, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 55, ptr byval(%"any[]") align 8 %indirectarg178) #5, !dbg !1294
  unreachable, !dbg !1294

panic185:                                         ; preds = %checkok179
  %233 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1296
  call void %233(ptr @.panic_msg.64, i64 10, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 55) #5, !dbg !1296
  unreachable, !dbg !1296

panic189:                                         ; preds = %checkok186
  store i64 %smod187, ptr %taddr190, align 8
  %234 = insertvalue %any undef, ptr %taddr190, 0
  %235 = insertvalue %any %234, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %235, ptr %varargslots191, align 16
  %236 = insertvalue %"any[]" undef, ptr %varargslots191, 0
  %"$$temp192" = insertvalue %"any[]" %236, i64 1, 1
  store %"any[]" %"$$temp192", ptr %indirectarg193, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 38, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 55, ptr byval(%"any[]") align 8 %indirectarg193) #5, !dbg !1296
  unreachable, !dbg !1296

panic196:                                         ; preds = %checkok194
  store i64 %102, ptr %taddr197, align 8
  %237 = insertvalue %any undef, ptr %taddr197, 0
  %238 = insertvalue %any %237, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %smod187, ptr %taddr198, align 8
  %239 = insertvalue %any undef, ptr %taddr198, 0
  %240 = insertvalue %any %239, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %238, ptr %varargslots199, align 16
  %ptradd200 = getelementptr inbounds i8, ptr %varargslots199, i64 16
  store %any %240, ptr %ptradd200, align 16
  %241 = insertvalue %"any[]" undef, ptr %varargslots199, 0
  %"$$temp201" = insertvalue %"any[]" %241, i64 2, 1
  store %"any[]" %"$$temp201", ptr %indirectarg202, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.65, i64 59, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 55, ptr byval(%"any[]") align 8 %indirectarg202) #5, !dbg !1296
  unreachable, !dbg !1296

panic209:                                         ; preds = %checkok203
  store i64 %112, ptr %taddr210, align 8
  %242 = insertvalue %any undef, ptr %taddr210, 0
  %243 = insertvalue %any %242, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %243, ptr %varargslots211, align 16
  %244 = insertvalue %"any[]" undef, ptr %varargslots211, 0
  %"$$temp212" = insertvalue %"any[]" %244, i64 1, 1
  store %"any[]" %"$$temp212", ptr %indirectarg213, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 38, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 56, ptr byval(%"any[]") align 8 %indirectarg213) #5, !dbg !1299
  unreachable, !dbg !1299

panic216:                                         ; preds = %checkok214
  store i64 %110, ptr %taddr217, align 8
  %245 = insertvalue %any undef, ptr %taddr217, 0
  %246 = insertvalue %any %245, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %112, ptr %taddr218, align 8
  %247 = insertvalue %any undef, ptr %taddr218, 0
  %248 = insertvalue %any %247, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %246, ptr %varargslots219, align 16
  %ptradd220 = getelementptr inbounds i8, ptr %varargslots219, i64 16
  store %any %248, ptr %ptradd220, align 16
  %249 = insertvalue %"any[]" undef, ptr %varargslots219, 0
  %"$$temp221" = insertvalue %"any[]" %249, i64 2, 1
  store %"any[]" %"$$temp221", ptr %indirectarg222, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.65, i64 59, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 56, ptr byval(%"any[]") align 8 %indirectarg222) #5, !dbg !1299
  unreachable, !dbg !1299

panic227:                                         ; preds = %checkok223
  store i64 %118, ptr %taddr228, align 8
  %250 = insertvalue %any undef, ptr %taddr228, 0
  %251 = insertvalue %any %250, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %251, ptr %varargslots229, align 16
  %252 = insertvalue %"any[]" undef, ptr %varargslots229, 0
  %"$$temp230" = insertvalue %"any[]" %252, i64 1, 1
  store %"any[]" %"$$temp230", ptr %indirectarg231, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 38, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 56, ptr byval(%"any[]") align 8 %indirectarg231) #5, !dbg !1301
  unreachable, !dbg !1301

panic234:                                         ; preds = %checkok232
  store i64 %116, ptr %taddr235, align 8
  %253 = insertvalue %any undef, ptr %taddr235, 0
  %254 = insertvalue %any %253, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %118, ptr %taddr236, align 8
  %255 = insertvalue %any undef, ptr %taddr236, 0
  %256 = insertvalue %any %255, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %254, ptr %varargslots237, align 16
  %ptradd238 = getelementptr inbounds i8, ptr %varargslots237, i64 16
  store %any %256, ptr %ptradd238, align 16
  %257 = insertvalue %"any[]" undef, ptr %varargslots237, 0
  %"$$temp239" = insertvalue %"any[]" %257, i64 2, 1
  store %"any[]" %"$$temp239", ptr %indirectarg240, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.65, i64 59, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 56, ptr byval(%"any[]") align 8 %indirectarg240) #5, !dbg !1301
  unreachable, !dbg !1301

panic254:                                         ; preds = %loop.body250
  %258 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1312
  call void %258(ptr @.panic_msg.64, i64 10, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 62) #5, !dbg !1312
  unreachable, !dbg !1312

panic259:                                         ; preds = %checkok255
  store i64 %129, ptr %taddr260, align 8
  %259 = insertvalue %any undef, ptr %taddr260, 0
  %260 = insertvalue %any %259, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %131, ptr %taddr261, align 8
  %261 = insertvalue %any undef, ptr %taddr261, 0
  %262 = insertvalue %any %261, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %260, ptr %varargslots262, align 16
  %ptradd263 = getelementptr inbounds i8, ptr %varargslots262, i64 16
  store %any %262, ptr %ptradd263, align 16
  %263 = insertvalue %"any[]" undef, ptr %varargslots262, 0
  %"$$temp264" = insertvalue %"any[]" %263, i64 2, 1
  store %"any[]" %"$$temp264", ptr %indirectarg265, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.65, i64 59, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 63, ptr byval(%"any[]") align 8 %indirectarg265) #5, !dbg !1315
  unreachable, !dbg !1315

panic271:                                         ; preds = %checkok266
  store i64 %134, ptr %taddr272, align 8
  %264 = insertvalue %any undef, ptr %taddr272, 0
  %265 = insertvalue %any %264, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %136, ptr %taddr273, align 8
  %266 = insertvalue %any undef, ptr %taddr273, 0
  %267 = insertvalue %any %266, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %265, ptr %varargslots274, align 16
  %ptradd275 = getelementptr inbounds i8, ptr %varargslots274, i64 16
  store %any %267, ptr %ptradd275, align 16
  %268 = insertvalue %"any[]" undef, ptr %varargslots274, 0
  %"$$temp276" = insertvalue %"any[]" %268, i64 2, 1
  store %"any[]" %"$$temp276", ptr %indirectarg277, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.65, i64 59, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 64, ptr byval(%"any[]") align 8 %indirectarg277) #5, !dbg !1317
  unreachable, !dbg !1317

panic282:                                         ; preds = %checkok278
  store i64 %139, ptr %taddr283, align 8
  %269 = insertvalue %any undef, ptr %taddr283, 0
  %270 = insertvalue %any %269, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %141, ptr %taddr284, align 8
  %271 = insertvalue %any undef, ptr %taddr284, 0
  %272 = insertvalue %any %271, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %270, ptr %varargslots285, align 16
  %ptradd286 = getelementptr inbounds i8, ptr %varargslots285, i64 16
  store %any %272, ptr %ptradd286, align 16
  %273 = insertvalue %"any[]" undef, ptr %varargslots285, 0
  %"$$temp287" = insertvalue %"any[]" %273, i64 2, 1
  store %"any[]" %"$$temp287", ptr %indirectarg288, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.65, i64 59, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 64, ptr byval(%"any[]") align 8 %indirectarg288) #5, !dbg !1319
  unreachable, !dbg !1319

panic299:                                         ; preds = %loop.exit294
  store i64 %153, ptr %taddr300, align 8
  %274 = insertvalue %any undef, ptr %taddr300, 0
  %275 = insertvalue %any %274, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr301, align 8
  %276 = insertvalue %any undef, ptr %taddr301, 0
  %277 = insertvalue %any %276, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %275, ptr %varargslots302, align 16
  %ptradd303 = getelementptr inbounds i8, ptr %varargslots302, i64 16
  store %any %277, ptr %ptradd303, align 16
  %278 = insertvalue %"any[]" undef, ptr %varargslots302, 0
  %"$$temp304" = insertvalue %"any[]" %278, i64 2, 1
  store %"any[]" %"$$temp304", ptr %indirectarg305, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 66, ptr byval(%"any[]") align 8 %indirectarg305) #5, !dbg !1323
  unreachable, !dbg !1323

panic308:                                         ; preds = %checkok306
  store i64 %160, ptr %taddr309, align 8
  %279 = insertvalue %any undef, ptr %taddr309, 0
  %280 = insertvalue %any %279, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %159, ptr %taddr310, align 8
  %281 = insertvalue %any undef, ptr %taddr310, 0
  %282 = insertvalue %any %281, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %280, ptr %varargslots311, align 16
  %ptradd312 = getelementptr inbounds i8, ptr %varargslots311, i64 16
  store %any %282, ptr %ptradd312, align 16
  %283 = insertvalue %"any[]" undef, ptr %varargslots311, 0
  %"$$temp313" = insertvalue %"any[]" %283, i64 2, 1
  store %"any[]" %"$$temp313", ptr %indirectarg314, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file.62, i64 14, ptr @.func.63, i64 6, i32 66, ptr byval(%"any[]") align 8 %indirectarg314) #5, !dbg !1323
  unreachable, !dbg !1323
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.entropy(ptr noalias sret([32 x i8]) align 1 %0) #0 comdat !dbg !1330 {
entry:
  %addr = alloca ptr, align 8
  %entropy_data = alloca [8 x i32], align 16
  %value = alloca %"char[]", align 8
  %expr = alloca %"char[]", align 8
  %value1 = alloca ptr, align 8
  %expr2 = alloca ptr, align 8
  %value7 = alloca ptr, align 8
  %expr8 = alloca ptr, align 8
  %value13 = alloca ptr, align 8
  %expr14 = alloca ptr, align 8
  %value20 = alloca i64, align 8
  %expr21 = alloca i64, align 8
  %value26 = alloca ptr, align 8
  %expr27 = alloca ptr, align 8
  %value32 = alloca %any, align 8
  %expr33 = alloca %any, align 8
  %expr37 = alloca [8 x i32], align 16
    #dbg_declare(ptr %addr, !1336, !DIExpression(), !1337)
  %1 = call ptr @std.core.mem.malloc(i64 1) #6, !dbg !1338
  store ptr %1, ptr %addr, align 8, !dbg !1338
  %2 = load ptr, ptr %addr, align 8, !dbg !1339
  call void @std.core.mem.free(ptr %2) #6, !dbg !1340
  %3 = load i32, ptr @entropy.random_int, align 4, !dbg !1341
  %add = add i32 %3, -302935722, !dbg !1341
  store i32 %add, ptr @entropy.random_int, align 4, !dbg !1341
    #dbg_declare(ptr %entropy_data, !1342, !DIExpression(), !1346)
  store %"char[]" { ptr @.str.70, i64 8 }, ptr %value, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %expr, ptr align 8 %value, i32 16, i1 false)
  %checknull = icmp eq ptr %expr, null, !dbg !1347
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1347
  br i1 %4, label %panic, label %checkok, !dbg !1347

checkok:                                          ; preds = %entry
  %5 = insertvalue %"char[]" undef, ptr %expr, 0, !dbg !1352
  %6 = insertvalue %"char[]" %5, i64 16, 1, !dbg !1352
  %7 = call i32 @std.hash.fnv32a.encode(ptr %expr, i64 16), !dbg !1353
  store i32 %7, ptr %entropy_data, align 4, !dbg !1353
  %ptradd = getelementptr inbounds i8, ptr %entropy_data, i64 4, !dbg !1353
  %8 = load ptr, ptr %addr, align 8
  store ptr %8, ptr %value1, align 8
  %9 = load ptr, ptr %value1, align 8
  store ptr %9, ptr %expr2, align 8
  %checknull3 = icmp eq ptr %expr2, null, !dbg !1354
  %10 = call i1 @llvm.expect.i1(i1 %checknull3, i1 false), !dbg !1354
  br i1 %10, label %panic4, label %checkok5, !dbg !1354

checkok5:                                         ; preds = %checkok
  %11 = insertvalue %"char[]" undef, ptr %expr2, 0, !dbg !1359
  %12 = insertvalue %"char[]" %11, i64 8, 1, !dbg !1359
  %13 = call i32 @std.hash.fnv32a.encode(ptr %expr2, i64 8), !dbg !1360
  store i32 %13, ptr %ptradd, align 4, !dbg !1360
  %ptradd6 = getelementptr inbounds i8, ptr %entropy_data, i64 8, !dbg !1360
  store ptr %addr, ptr %value7, align 8
  %14 = load ptr, ptr %value7, align 8
  store ptr %14, ptr %expr8, align 8
  %checknull9 = icmp eq ptr %expr8, null, !dbg !1361
  %15 = call i1 @llvm.expect.i1(i1 %checknull9, i1 false), !dbg !1361
  br i1 %15, label %panic10, label %checkok11, !dbg !1361

checkok11:                                        ; preds = %checkok5
  %16 = insertvalue %"char[]" undef, ptr %expr8, 0, !dbg !1366
  %17 = insertvalue %"char[]" %16, i64 8, 1, !dbg !1366
  %18 = call i32 @std.hash.fnv32a.encode(ptr %expr8, i64 8), !dbg !1367
  store i32 %18, ptr %ptradd6, align 4, !dbg !1367
  %ptradd12 = getelementptr inbounds i8, ptr %entropy_data, i64 12, !dbg !1367
  store ptr @std.math.random.entropy, ptr %value13, align 8
  %19 = load ptr, ptr %value13, align 8
  store ptr %19, ptr %expr14, align 8
  %checknull15 = icmp eq ptr %expr14, null, !dbg !1368
  %20 = call i1 @llvm.expect.i1(i1 %checknull15, i1 false), !dbg !1368
  br i1 %20, label %panic16, label %checkok17, !dbg !1368

checkok17:                                        ; preds = %checkok11
  %21 = insertvalue %"char[]" undef, ptr %expr14, 0, !dbg !1373
  %22 = insertvalue %"char[]" %21, i64 8, 1, !dbg !1373
  %23 = call i32 @std.hash.fnv32a.encode(ptr %expr14, i64 8), !dbg !1374
  store i32 %23, ptr %ptradd12, align 4, !dbg !1374
  %ptradd18 = getelementptr inbounds i8, ptr %entropy_data, i64 16, !dbg !1374
  %24 = load i32, ptr @entropy.random_int, align 4, !dbg !1375
  store i32 %24, ptr %ptradd18, align 4, !dbg !1375
  %ptradd19 = getelementptr inbounds i8, ptr %entropy_data, i64 20, !dbg !1375
  %25 = call i64 @std.time.clock.now(), !dbg !1376
  store i64 %25, ptr %value20, align 8
  %26 = load i64, ptr %value20, align 8
  store i64 %26, ptr %expr21, align 8
  %checknull22 = icmp eq ptr %expr21, null, !dbg !1377
  %27 = call i1 @llvm.expect.i1(i1 %checknull22, i1 false), !dbg !1377
  br i1 %27, label %panic23, label %checkok24, !dbg !1377

checkok24:                                        ; preds = %checkok17
  %28 = insertvalue %"char[]" undef, ptr %expr21, 0, !dbg !1382
  %29 = insertvalue %"char[]" %28, i64 8, 1, !dbg !1382
  %30 = call i32 @std.hash.fnv32a.encode(ptr %expr21, i64 8), !dbg !1383
  store i32 %30, ptr %ptradd19, align 4, !dbg !1383
  %ptradd25 = getelementptr inbounds i8, ptr %entropy_data, i64 24, !dbg !1383
  store ptr @std.core.dstring.DString.new_init, ptr %value26, align 8
  %31 = load ptr, ptr %value26, align 8
  store ptr %31, ptr %expr27, align 8
  %checknull28 = icmp eq ptr %expr27, null, !dbg !1384
  %32 = call i1 @llvm.expect.i1(i1 %checknull28, i1 false), !dbg !1384
  br i1 %32, label %panic29, label %checkok30, !dbg !1384

checkok30:                                        ; preds = %checkok24
  %33 = insertvalue %"char[]" undef, ptr %expr27, 0, !dbg !1389
  %34 = insertvalue %"char[]" %33, i64 8, 1, !dbg !1389
  %35 = call i32 @std.hash.fnv32a.encode(ptr %expr27, i64 8), !dbg !1390
  store i32 %35, ptr %ptradd25, align 4, !dbg !1390
  %ptradd31 = getelementptr inbounds i8, ptr %entropy_data, i64 28, !dbg !1390
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value32, ptr align 8 @std.core.mem.allocator.thread_allocator, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %expr33, ptr align 8 %value32, i32 16, i1 false)
  %checknull34 = icmp eq ptr %expr33, null, !dbg !1391
  %36 = call i1 @llvm.expect.i1(i1 %checknull34, i1 false), !dbg !1391
  br i1 %36, label %panic35, label %checkok36, !dbg !1391

checkok36:                                        ; preds = %checkok30
  %37 = insertvalue %"char[]" undef, ptr %expr33, 0, !dbg !1396
  %38 = insertvalue %"char[]" %37, i64 16, 1, !dbg !1396
  %39 = call i32 @std.hash.fnv32a.encode(ptr %expr33, i64 16), !dbg !1397
  store i32 %39, ptr %ptradd31, align 4, !dbg !1397
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %expr37, ptr align 16 %entropy_data, i32 32, i1 false)
  %checknull38 = icmp eq ptr %expr37, null, !dbg !1398
  %40 = call i1 @llvm.expect.i1(i1 %checknull38, i1 false), !dbg !1398
  br i1 %40, label %panic39, label %checkok40, !dbg !1398

checkok40:                                        ; preds = %checkok36
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %0, ptr align 1 %expr37, i32 32, i1 false), !dbg !1401
  ret void, !dbg !1401

panic:                                            ; preds = %entry
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1352
  call void %41(ptr @.panic_msg.71, i64 53, ptr @.file.72, i64 10, ptr @.func.73, i64 7, i32 212) #5, !dbg !1352
  unreachable, !dbg !1352

panic4:                                           ; preds = %checkok
  %42 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1359
  call void %42(ptr @.panic_msg.71, i64 53, ptr @.file.72, i64 10, ptr @.func.73, i64 7, i32 212) #5, !dbg !1359
  unreachable, !dbg !1359

panic10:                                          ; preds = %checkok5
  %43 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1366
  call void %43(ptr @.panic_msg.71, i64 53, ptr @.file.72, i64 10, ptr @.func.73, i64 7, i32 212) #5, !dbg !1366
  unreachable, !dbg !1366

panic16:                                          ; preds = %checkok11
  %44 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1373
  call void %44(ptr @.panic_msg.71, i64 53, ptr @.file.72, i64 10, ptr @.func.73, i64 7, i32 212) #5, !dbg !1373
  unreachable, !dbg !1373

panic23:                                          ; preds = %checkok17
  %45 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1382
  call void %45(ptr @.panic_msg.71, i64 53, ptr @.file.72, i64 10, ptr @.func.73, i64 7, i32 212) #5, !dbg !1382
  unreachable, !dbg !1382

panic29:                                          ; preds = %checkok24
  %46 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1389
  call void %46(ptr @.panic_msg.71, i64 53, ptr @.file.72, i64 10, ptr @.func.73, i64 7, i32 212) #5, !dbg !1389
  unreachable, !dbg !1389

panic35:                                          ; preds = %checkok30
  %47 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1396
  call void %47(ptr @.panic_msg.71, i64 53, ptr @.file.72, i64 10, ptr @.func.73, i64 7, i32 212) #5, !dbg !1396
  unreachable, !dbg !1396

panic39:                                          ; preds = %checkok36
  %48 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1401
  call void %48(ptr @.panic_msg.71, i64 53, ptr @.file.72, i64 10, ptr @.func.73, i64 7, i32 212) #5, !dbg !1401
  unreachable, !dbg !1401
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg128Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1402 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input7 = alloca %"char[]", align 8
  %return_value = alloca i128, align 16
  %taddr8 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !1407
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1407
  br i1 %4, label %panic, label %checkok, !dbg !1407

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1408, !DIExpression(), !1409)
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !1410, !DIExpression(), !1411)
  %5 = load ptr, ptr %self, align 8, !dbg !1412
  %checknull = icmp eq ptr %5, null, !dbg !1412
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1412
  br i1 %6, label %panic1, label %checkok2, !dbg !1412

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !1412
  %8 = urem i64 %7, 16, !dbg !1412
  %9 = icmp ne i64 %8, 0, !dbg !1412
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !1412
  br i1 %10, label %panic3, label %checkok6, !dbg !1412

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input7, ptr align 8 %input, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1413, !DIExpression(), !1415)
  store i128 0, ptr %return_value, align 16, !dbg !1415
  store ptr %return_value, ptr %taddr8, align 8
  %11 = load ptr, ptr %taddr8, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 16, 1
  %lo = load ptr, ptr %input7, align 8
  %ptradd9 = getelementptr inbounds i8, ptr %input7, i64 8
  %hi = load i64, ptr %ptradd9, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 16), !dbg !1417
  %14 = load i128, ptr %return_value, align 16, !dbg !1418
  store i128 %14, ptr %5, align 16, !dbg !1418
  ret void, !dbg !1418

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1409
  call void %15(ptr @.panic_msg.14, i64 62, ptr @.file.89, i64 11, ptr @.func.16, i64 8, i32 18) #5, !dbg !1409
  unreachable, !dbg !1409

panic1:                                           ; preds = %checkok
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1412
  call void %16(ptr @.panic_msg.17, i64 45, ptr @.file.89, i64 11, ptr @.func.16, i64 8, i32 20) #5, !dbg !1412
  unreachable, !dbg !1412

panic3:                                           ; preds = %checkok2
  store i64 16, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %19 = insertvalue %any undef, ptr %taddr4, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %18, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd5, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.89, i64 11, ptr @.func.16, i64 8, i32 20, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1412
  unreachable, !dbg !1412
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Lcg128Random.next_long(ptr %0) #0 comdat !dbg !1419 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !1422
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1422
  br i1 %2, label %panic, label %checkok, !dbg !1422

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1423, !DIExpression(), !1424)
    #dbg_declare(ptr %s, !1425, !DIExpression(), !1426)
  %3 = load ptr, ptr %self, align 8, !dbg !1427
  store ptr %3, ptr %s, align 8, !dbg !1427
    #dbg_declare(ptr %result, !1428, !DIExpression(), !1429)
  %4 = load ptr, ptr %s, align 8, !dbg !1430
  %checknull = icmp eq ptr %4, null, !dbg !1430
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1430
  br i1 %5, label %panic1, label %checkok2, !dbg !1430

checkok2:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !1430
  %7 = urem i64 %6, 16, !dbg !1430
  %8 = icmp ne i64 %7, 0, !dbg !1430
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !1430
  br i1 %9, label %panic3, label %checkok5, !dbg !1430

checkok5:                                         ; preds = %checkok2
  %10 = load i128, ptr %4, align 16, !dbg !1430
  %lshr = lshr i128 %10, 64, !dbg !1431
  %11 = freeze i128 %lshr, !dbg !1431
  %trunc = trunc i128 %11 to i64, !dbg !1431
  store i64 %trunc, ptr %result, align 8, !dbg !1431
  %12 = load ptr, ptr %s, align 8, !dbg !1432
  %checknull6 = icmp eq ptr %12, null, !dbg !1432
  %13 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !1432
  br i1 %13, label %panic7, label %checkok8, !dbg !1432

checkok8:                                         ; preds = %checkok5
  %14 = ptrtoint ptr %12 to i64, !dbg !1432
  %15 = urem i64 %14, 16, !dbg !1432
  %16 = icmp ne i64 %15, 0, !dbg !1432
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !1432
  br i1 %17, label %panic9, label %checkok16, !dbg !1432

checkok16:                                        ; preds = %checkok8
  %18 = load ptr, ptr %s, align 8, !dbg !1433
  %checknull17 = icmp eq ptr %18, null, !dbg !1433
  %19 = call i1 @llvm.expect.i1(i1 %checknull17, i1 false), !dbg !1433
  br i1 %19, label %panic18, label %checkok19, !dbg !1433

checkok19:                                        ; preds = %checkok16
  %20 = ptrtoint ptr %18 to i64, !dbg !1433
  %21 = urem i64 %20, 16, !dbg !1433
  %22 = icmp ne i64 %21, 0, !dbg !1433
  %23 = call i1 @llvm.expect.i1(i1 %22, i1 false), !dbg !1433
  br i1 %23, label %panic20, label %checkok27, !dbg !1433

checkok27:                                        ; preds = %checkok19
  %24 = load i128, ptr %18, align 16, !dbg !1433
  %mul = mul i128 %24, -48899967401452674293065485854872568811, !dbg !1434
  %add = add i128 %mul, -129976298391535590297638237547755878347, !dbg !1434
  store i128 %add, ptr %12, align 16, !dbg !1434
  %25 = load i64, ptr %result, align 8, !dbg !1435
  ret i64 %25, !dbg !1435

panic:                                            ; preds = %entry
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1424
  call void %26(ptr @.panic_msg.14, i64 62, ptr @.file.89, i64 11, ptr @.func.19, i64 9, i32 24) #5, !dbg !1424
  unreachable, !dbg !1424

panic1:                                           ; preds = %checkok
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1430
  call void %27(ptr @.panic_msg.20, i64 42, ptr @.file.89, i64 11, ptr @.func.19, i64 9, i32 27) #5, !dbg !1430
  unreachable, !dbg !1430

panic3:                                           ; preds = %checkok2
  store i64 16, ptr %taddr, align 8
  %28 = insertvalue %any undef, ptr %taddr, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr4, align 8
  %30 = insertvalue %any undef, ptr %taddr4, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %29, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %31, ptr %ptradd, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.89, i64 11, ptr @.func.19, i64 9, i32 27, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1430
  unreachable, !dbg !1430

panic7:                                           ; preds = %checkok5
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1432
  call void %33(ptr @.panic_msg.20, i64 42, ptr @.file.89, i64 11, ptr @.func.19, i64 9, i32 28) #5, !dbg !1432
  unreachable, !dbg !1432

panic9:                                           ; preds = %checkok8
  store i64 16, ptr %taddr10, align 8
  %34 = insertvalue %any undef, ptr %taddr10, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr11, align 8
  %36 = insertvalue %any undef, ptr %taddr11, 0
  %37 = insertvalue %any %36, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %35, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %37, ptr %ptradd13, align 16
  %38 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %38, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.89, i64 11, ptr @.func.19, i64 9, i32 28, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !1432
  unreachable, !dbg !1432

panic18:                                          ; preds = %checkok16
  %39 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1433
  call void %39(ptr @.panic_msg.20, i64 42, ptr @.file.89, i64 11, ptr @.func.19, i64 9, i32 28) #5, !dbg !1433
  unreachable, !dbg !1433

panic20:                                          ; preds = %checkok19
  store i64 16, ptr %taddr21, align 8
  %40 = insertvalue %any undef, ptr %taddr21, 0
  %41 = insertvalue %any %40, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr22, align 8
  %42 = insertvalue %any undef, ptr %taddr22, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %41, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %43, ptr %ptradd24, align 16
  %44 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %44, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.89, i64 11, ptr @.func.19, i64 9, i32 28, ptr byval(%"any[]") align 8 %indirectarg26) #5, !dbg !1433
  unreachable, !dbg !1433
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg128Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1436 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %taddr19 = alloca ptr, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %varargslots33 = alloca [2 x %any], align 16
  %indirectarg36 = alloca %"any[]", align 8
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %varargslots42 = alloca [2 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg59 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !1437
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1437
  br i1 %4, label %panic, label %checkok, !dbg !1437

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1438, !DIExpression(), !1439)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !1440, !DIExpression(), !1441)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1442
  %5 = load i64, ptr %ptradd1, align 8, !dbg !1442
  %lt = icmp ult i64 0, %5, !dbg !1442
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1442

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1442
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.89, i64 11, ptr @.func.21, i64 10, i32 33) #5, !dbg !1442
  unreachable, !dbg !1442

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !1444, !DIExpression(), !1446)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !1447
  %7 = load i64, ptr %ptradd3, align 8, !dbg !1447
  store i64 %7, ptr %len, align 8, !dbg !1447
  br label %loop.cond, !dbg !1448

loop.cond:                                        ; preds = %checkok55, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !1449
  %lt4 = icmp ult i64 0, %8, !dbg !1449
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !1449

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1451, !DIExpression(), !1453)
  %9 = load ptr, ptr %self, align 8, !dbg !1454
  %10 = call i64 @std.math.random.Lcg128Random.next_long(ptr %9), !dbg !1455
  store i64 %10, ptr %value, align 8, !dbg !1455
  %11 = load i64, ptr %len, align 8, !dbg !1456
  %le = icmp ule i64 %11, 8, !dbg !1456
  br i1 %le, label %if.then, label %if.exit, !dbg !1456

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !1457
  %add = add i64 0, %13, !dbg !1457
  %size = sub i64 %add, 0, !dbg !1457
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !1457
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !1457
  %16 = load %"char[]", ptr %bytes2, align 8, !dbg !1459
  %17 = extractvalue %"char[]" %16, 0, !dbg !1459
  %18 = extractvalue %"char[]" %16, 1, !dbg !1460
  %gt = icmp ugt i64 0, %18, !dbg !1460
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1460
  br i1 %19, label %panic5, label %checkok9, !dbg !1460

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %18, 0, !dbg !1459
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !1459
  %21 = insertvalue %"char[]" %20, i64 %size10, 1, !dbg !1459
  %22 = extractvalue %"char[]" %21, 0, !dbg !1459
  %23 = extractvalue %"char[]" %15, 0, !dbg !1459
  %24 = extractvalue %"char[]" %15, 1, !dbg !1459
  %25 = extractvalue %"char[]" %21, 1, !dbg !1459
  %neq = icmp ne i64 %25, %24, !dbg !1459
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1459
  br i1 %26, label %panic11, label %checkok18, !dbg !1459

checkok18:                                        ; preds = %checkok9
  %27 = mul i64 %24, 1, !dbg !1459
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !1459
  br label %expr_block.exit, !dbg !1461

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr19, align 8
  %28 = load ptr, ptr %taddr19, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 8, 1
  %31 = load %"char[]", ptr %bytes2, align 8, !dbg !1462
  %32 = extractvalue %"char[]" %31, 0, !dbg !1462
  %33 = extractvalue %"char[]" %31, 1, !dbg !1462
  %gt20 = icmp sgt i64 0, %33, !dbg !1462
  %34 = call i1 @llvm.expect.i1(i1 %gt20, i1 false), !dbg !1462
  br i1 %34, label %panic21, label %checkok28, !dbg !1462

checkok28:                                        ; preds = %if.exit
  %lt29 = icmp slt i64 %33, 8, !dbg !1462
  %35 = call i1 @llvm.expect.i1(i1 %lt29, i1 false), !dbg !1462
  br i1 %35, label %panic30, label %checkok37, !dbg !1462

checkok37:                                        ; preds = %checkok28
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !1462
  %37 = insertvalue %"char[]" %36, i64 8, 1, !dbg !1462
  %38 = extractvalue %"char[]" %37, 0, !dbg !1462
  %39 = extractvalue %"char[]" %30, 0, !dbg !1462
  %40 = extractvalue %"char[]" %30, 1, !dbg !1462
  %41 = extractvalue %"char[]" %37, 1, !dbg !1462
  %neq38 = icmp ne i64 %41, %40, !dbg !1462
  %42 = call i1 @llvm.expect.i1(i1 %neq38, i1 false), !dbg !1462
  br i1 %42, label %panic39, label %checkok46, !dbg !1462

checkok46:                                        ; preds = %checkok37
  %43 = mul i64 %40, 1, !dbg !1462
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !1462
  %44 = load i64, ptr %len, align 8, !dbg !1463
  %sub = sub i64 %44, 8, !dbg !1463
  store i64 %sub, ptr %len, align 8, !dbg !1463
  %45 = load %"char[]", ptr %bytes2, align 8, !dbg !1464
  %46 = extractvalue %"char[]" %45, 0, !dbg !1464
  %47 = extractvalue %"char[]" %45, 1, !dbg !1465
  %gt47 = icmp ugt i64 8, %47, !dbg !1465
  %48 = call i1 @llvm.expect.i1(i1 %gt47, i1 false), !dbg !1465
  br i1 %48, label %panic48, label %checkok55, !dbg !1465

checkok55:                                        ; preds = %checkok46
  %size56 = sub i64 %47, 8, !dbg !1464
  %ptradd57 = getelementptr inbounds i8, ptr %46, i64 8, !dbg !1464
  %49 = insertvalue %"char[]" undef, ptr %ptradd57, 0, !dbg !1464
  %50 = insertvalue %"char[]" %49, i64 %size56, 1, !dbg !1464
  store %"char[]" %50, ptr %bytes2, align 8, !dbg !1464
  br label %loop.cond, !dbg !1464

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.90, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !1466
  %ptradd58 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1466
  %hi = load i64, ptr %ptradd58, align 8, !dbg !1466
  store %"any[]" zeroinitializer, ptr %indirectarg59, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.91, i64 11, ptr @.str.92, i64 23, i32 35, ptr byval(%"any[]") align 8 %indirectarg59), !dbg !1469
  unreachable, !dbg !1470

expr_block.exit:                                  ; preds = %checkok18
  ret void, !dbg !1470

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1439
  call void %51(ptr @.panic_msg.14, i64 62, ptr @.file.89, i64 11, ptr @.func.21, i64 10, i32 35) #5, !dbg !1439
  unreachable, !dbg !1439

panic5:                                           ; preds = %if.then
  store i64 %18, ptr %taddr6, align 8
  %52 = insertvalue %any undef, ptr %taddr6, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %54 = insertvalue %any undef, ptr %taddr7, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd8, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1459
  unreachable, !dbg !1459

panic11:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr12, align 8
  %57 = insertvalue %any undef, ptr %taddr12, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr13, align 8
  %59 = insertvalue %any undef, ptr %taddr13, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %60, ptr %ptradd15, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg17) #5, !dbg !1459
  unreachable, !dbg !1459

panic21:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr22, align 8
  %62 = insertvalue %any undef, ptr %taddr22, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr23, align 8
  %64 = insertvalue %any undef, ptr %taddr23, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %65, ptr %ptradd25, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg27) #5, !dbg !1462
  unreachable, !dbg !1462

panic30:                                          ; preds = %checkok28
  store i64 7, ptr %taddr31, align 8
  %67 = insertvalue %any undef, ptr %taddr31, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr32, align 8
  %69 = insertvalue %any undef, ptr %taddr32, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots33, align 16
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots33, i64 16
  store %any %70, ptr %ptradd34, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots33, 0
  %"$$temp35" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp35", ptr %indirectarg36, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 60, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg36) #5, !dbg !1462
  unreachable, !dbg !1462

panic39:                                          ; preds = %checkok37
  store i64 %41, ptr %taddr40, align 8
  %72 = insertvalue %any undef, ptr %taddr40, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr41, align 8
  %74 = insertvalue %any undef, ptr %taddr41, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots42, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %75, ptr %ptradd43, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg45) #5, !dbg !1462
  unreachable, !dbg !1462

panic48:                                          ; preds = %checkok46
  store i64 %47, ptr %taddr49, align 8
  %77 = insertvalue %any undef, ptr %taddr49, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr50, align 8
  %79 = insertvalue %any undef, ptr %taddr50, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %80, ptr %ptradd52, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg54) #5, !dbg !1464
  unreachable, !dbg !1464
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Lcg128Random.next_int128(ptr %0) #0 comdat !dbg !1471 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1474
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1474
  br i1 %2, label %panic, label %checkok, !dbg !1474

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1475, !DIExpression(), !1476)
  %3 = load ptr, ptr %self, align 8, !dbg !1477
  %4 = call i64 @std.math.random.Lcg128Random.next_long(ptr %3), !dbg !1479
  %zext = zext i64 %4 to i128, !dbg !1479
  %shl = shl i128 %zext, 64, !dbg !1479
  %5 = freeze i128 %shl, !dbg !1479
  %6 = load ptr, ptr %self, align 8, !dbg !1477
  %7 = call i64 @std.math.random.Lcg128Random.next_long(ptr %6), !dbg !1480
  %zext1 = zext i64 %7 to i128, !dbg !1480
  %add = add i128 %5, %zext1, !dbg !1479
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1476
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.89, i64 11, ptr @.func.28, i64 11, i32 36) #5, !dbg !1476
  unreachable, !dbg !1476
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Lcg128Random.next_int(ptr %0) #0 comdat !dbg !1481 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1484
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1484
  br i1 %2, label %panic, label %checkok, !dbg !1484

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1485, !DIExpression(), !1486)
  %3 = load ptr, ptr %self, align 8, !dbg !1487
  %4 = call i64 @std.math.random.Lcg128Random.next_long(ptr %3), !dbg !1488
  %trunc = trunc i64 %4 to i32, !dbg !1488
  ret i32 %trunc, !dbg !1488

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1486
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.89, i64 11, ptr @.func.29, i64 8, i32 37) #5, !dbg !1486
  unreachable, !dbg !1486
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Lcg128Random.next_short(ptr %0) #0 comdat !dbg !1489 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1492
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1492
  br i1 %2, label %panic, label %checkok, !dbg !1492

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1493, !DIExpression(), !1494)
  %3 = load ptr, ptr %self, align 8, !dbg !1495
  %4 = call i64 @std.math.random.Lcg128Random.next_long(ptr %3), !dbg !1496
  %trunc = trunc i64 %4 to i16, !dbg !1496
  ret i16 %trunc, !dbg !1496

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1494
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.89, i64 11, ptr @.func.30, i64 10, i32 38) #5, !dbg !1494
  unreachable, !dbg !1494
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Lcg128Random.next_byte(ptr %0) #0 comdat !dbg !1497 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1500
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1500
  br i1 %2, label %panic, label %checkok, !dbg !1500

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1501, !DIExpression(), !1502)
  %3 = load ptr, ptr %self, align 8, !dbg !1503
  %4 = call i64 @std.math.random.Lcg128Random.next_long(ptr %3), !dbg !1504
  %trunc = trunc i64 %4 to i8, !dbg !1504
  ret i8 %trunc, !dbg !1504

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1502
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.89, i64 11, ptr @.func.31, i64 9, i32 39) #5, !dbg !1502
  unreachable, !dbg !1502
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg64Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1505 {
entry:
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i64, align 8
  %taddr7 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !1510
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1510
  br i1 %4, label %panic, label %checkok, !dbg !1510

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1511, !DIExpression(), !1512)
  store ptr %1, ptr %seed, align 8
  %ptradd = getelementptr inbounds i8, ptr %seed, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %seed, !1513, !DIExpression(), !1514)
  %5 = load ptr, ptr %self, align 8, !dbg !1515
  %checknull = icmp eq ptr %5, null, !dbg !1515
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1515
  br i1 %6, label %panic1, label %checkok2, !dbg !1515

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !1515
  %8 = urem i64 %7, 8, !dbg !1515
  %9 = icmp ne i64 %8, 0, !dbg !1515
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !1515
  br i1 %10, label %panic3, label %checkok6, !dbg !1515

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %seed, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1516, !DIExpression(), !1518)
  store i64 0, ptr %return_value, align 8, !dbg !1518
  store ptr %return_value, ptr %taddr7, align 8
  %11 = load ptr, ptr %taddr7, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 8, 1
  %lo = load ptr, ptr %input, align 8
  %ptradd8 = getelementptr inbounds i8, ptr %input, i64 8
  %hi = load i64, ptr %ptradd8, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 8), !dbg !1520
  %14 = load i64, ptr %return_value, align 8, !dbg !1521
  store i64 %14, ptr %5, align 8, !dbg !1521
  ret void, !dbg !1521

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1512
  call void %15(ptr @.panic_msg.14, i64 62, ptr @.file.89, i64 11, ptr @.func.16, i64 8, i32 45) #5, !dbg !1512
  unreachable, !dbg !1512

panic1:                                           ; preds = %checkok
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1515
  call void %16(ptr @.panic_msg.17, i64 45, ptr @.file.89, i64 11, ptr @.func.16, i64 8, i32 47) #5, !dbg !1515
  unreachable, !dbg !1515

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %19 = insertvalue %any undef, ptr %taddr4, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %18, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd5, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.89, i64 11, ptr @.func.16, i64 8, i32 47, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1515
  unreachable, !dbg !1515
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Lcg64Random.next_int(ptr %0) #0 comdat !dbg !1522 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i32, align 4
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !1525
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1525
  br i1 %2, label %panic, label %checkok, !dbg !1525

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1526, !DIExpression(), !1527)
    #dbg_declare(ptr %s, !1528, !DIExpression(), !1529)
  %3 = load ptr, ptr %self, align 8, !dbg !1530
  store ptr %3, ptr %s, align 8, !dbg !1530
    #dbg_declare(ptr %result, !1531, !DIExpression(), !1532)
  %4 = load ptr, ptr %s, align 8, !dbg !1533
  %checknull = icmp eq ptr %4, null, !dbg !1533
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1533
  br i1 %5, label %panic1, label %checkok2, !dbg !1533

checkok2:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !1533
  %7 = urem i64 %6, 8, !dbg !1533
  %8 = icmp ne i64 %7, 0, !dbg !1533
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !1533
  br i1 %9, label %panic3, label %checkok5, !dbg !1533

checkok5:                                         ; preds = %checkok2
  %10 = load i64, ptr %4, align 8, !dbg !1533
  %lshr = lshr i64 %10, 32, !dbg !1534
  %11 = freeze i64 %lshr, !dbg !1534
  %trunc = trunc i64 %11 to i32, !dbg !1534
  store i32 %trunc, ptr %result, align 4, !dbg !1534
  %12 = load ptr, ptr %s, align 8, !dbg !1535
  %checknull6 = icmp eq ptr %12, null, !dbg !1535
  %13 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !1535
  br i1 %13, label %panic7, label %checkok8, !dbg !1535

checkok8:                                         ; preds = %checkok5
  %14 = ptrtoint ptr %12 to i64, !dbg !1535
  %15 = urem i64 %14, 8, !dbg !1535
  %16 = icmp ne i64 %15, 0, !dbg !1535
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !1535
  br i1 %17, label %panic9, label %checkok16, !dbg !1535

checkok16:                                        ; preds = %checkok8
  %18 = load ptr, ptr %s, align 8, !dbg !1536
  %checknull17 = icmp eq ptr %18, null, !dbg !1536
  %19 = call i1 @llvm.expect.i1(i1 %checknull17, i1 false), !dbg !1536
  br i1 %19, label %panic18, label %checkok19, !dbg !1536

checkok19:                                        ; preds = %checkok16
  %20 = ptrtoint ptr %18 to i64, !dbg !1536
  %21 = urem i64 %20, 8, !dbg !1536
  %22 = icmp ne i64 %21, 0, !dbg !1536
  %23 = call i1 @llvm.expect.i1(i1 %22, i1 false), !dbg !1536
  br i1 %23, label %panic20, label %checkok27, !dbg !1536

checkok27:                                        ; preds = %checkok19
  %24 = load i64, ptr %18, align 8, !dbg !1536
  %mul = mul i64 %24, -3372029247567499371, !dbg !1537
  %add = add i64 %mul, -7046029254386353131, !dbg !1537
  store i64 %add, ptr %12, align 8, !dbg !1537
  %25 = load i32, ptr %result, align 4, !dbg !1538
  ret i32 %25, !dbg !1538

panic:                                            ; preds = %entry
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1527
  call void %26(ptr @.panic_msg.14, i64 62, ptr @.file.89, i64 11, ptr @.func.29, i64 8, i32 51) #5, !dbg !1527
  unreachable, !dbg !1527

panic1:                                           ; preds = %checkok
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1533
  call void %27(ptr @.panic_msg.20, i64 42, ptr @.file.89, i64 11, ptr @.func.29, i64 8, i32 54) #5, !dbg !1533
  unreachable, !dbg !1533

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %28 = insertvalue %any undef, ptr %taddr, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr4, align 8
  %30 = insertvalue %any undef, ptr %taddr4, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %29, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %31, ptr %ptradd, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.89, i64 11, ptr @.func.29, i64 8, i32 54, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1533
  unreachable, !dbg !1533

panic7:                                           ; preds = %checkok5
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1535
  call void %33(ptr @.panic_msg.20, i64 42, ptr @.file.89, i64 11, ptr @.func.29, i64 8, i32 55) #5, !dbg !1535
  unreachable, !dbg !1535

panic9:                                           ; preds = %checkok8
  store i64 8, ptr %taddr10, align 8
  %34 = insertvalue %any undef, ptr %taddr10, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr11, align 8
  %36 = insertvalue %any undef, ptr %taddr11, 0
  %37 = insertvalue %any %36, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %35, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %37, ptr %ptradd13, align 16
  %38 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %38, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.89, i64 11, ptr @.func.29, i64 8, i32 55, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !1535
  unreachable, !dbg !1535

panic18:                                          ; preds = %checkok16
  %39 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1536
  call void %39(ptr @.panic_msg.20, i64 42, ptr @.file.89, i64 11, ptr @.func.29, i64 8, i32 55) #5, !dbg !1536
  unreachable, !dbg !1536

panic20:                                          ; preds = %checkok19
  store i64 8, ptr %taddr21, align 8
  %40 = insertvalue %any undef, ptr %taddr21, 0
  %41 = insertvalue %any %40, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr22, align 8
  %42 = insertvalue %any undef, ptr %taddr22, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %41, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %43, ptr %ptradd24, align 16
  %44 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %44, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.89, i64 11, ptr @.func.29, i64 8, i32 55, ptr byval(%"any[]") align 8 %indirectarg26) #5, !dbg !1536
  unreachable, !dbg !1536
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg64Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1539 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %taddr19 = alloca ptr, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %varargslots33 = alloca [2 x %any], align 16
  %indirectarg36 = alloca %"any[]", align 8
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %varargslots42 = alloca [2 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg59 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !1540
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1540
  br i1 %4, label %panic, label %checkok, !dbg !1540

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1541, !DIExpression(), !1542)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !1543, !DIExpression(), !1544)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1545
  %5 = load i64, ptr %ptradd1, align 8, !dbg !1545
  %lt = icmp ult i64 0, %5, !dbg !1545
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1545

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1545
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.89, i64 11, ptr @.func.21, i64 10, i32 60) #5, !dbg !1545
  unreachable, !dbg !1545

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !1547, !DIExpression(), !1549)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !1550
  %7 = load i64, ptr %ptradd3, align 8, !dbg !1550
  store i64 %7, ptr %len, align 8, !dbg !1550
  br label %loop.cond, !dbg !1551

loop.cond:                                        ; preds = %checkok55, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !1552
  %lt4 = icmp ult i64 0, %8, !dbg !1552
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !1552

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1554, !DIExpression(), !1556)
  %9 = load ptr, ptr %self, align 8, !dbg !1557
  %10 = call i32 @std.math.random.Lcg64Random.next_int(ptr %9), !dbg !1558
  store i32 %10, ptr %value, align 4, !dbg !1558
  %11 = load i64, ptr %len, align 8, !dbg !1559
  %le = icmp ule i64 %11, 4, !dbg !1559
  br i1 %le, label %if.then, label %if.exit, !dbg !1559

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !1560
  %add = add i64 0, %13, !dbg !1560
  %size = sub i64 %add, 0, !dbg !1560
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !1560
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !1560
  %16 = load %"char[]", ptr %bytes2, align 8, !dbg !1562
  %17 = extractvalue %"char[]" %16, 0, !dbg !1562
  %18 = extractvalue %"char[]" %16, 1, !dbg !1563
  %gt = icmp ugt i64 0, %18, !dbg !1563
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1563
  br i1 %19, label %panic5, label %checkok9, !dbg !1563

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %18, 0, !dbg !1562
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !1562
  %21 = insertvalue %"char[]" %20, i64 %size10, 1, !dbg !1562
  %22 = extractvalue %"char[]" %21, 0, !dbg !1562
  %23 = extractvalue %"char[]" %15, 0, !dbg !1562
  %24 = extractvalue %"char[]" %15, 1, !dbg !1562
  %25 = extractvalue %"char[]" %21, 1, !dbg !1562
  %neq = icmp ne i64 %25, %24, !dbg !1562
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1562
  br i1 %26, label %panic11, label %checkok18, !dbg !1562

checkok18:                                        ; preds = %checkok9
  %27 = mul i64 %24, 1, !dbg !1562
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !1562
  br label %expr_block.exit, !dbg !1564

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr19, align 8
  %28 = load ptr, ptr %taddr19, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 4, 1
  %31 = load %"char[]", ptr %bytes2, align 8, !dbg !1565
  %32 = extractvalue %"char[]" %31, 0, !dbg !1565
  %33 = extractvalue %"char[]" %31, 1, !dbg !1565
  %gt20 = icmp sgt i64 0, %33, !dbg !1565
  %34 = call i1 @llvm.expect.i1(i1 %gt20, i1 false), !dbg !1565
  br i1 %34, label %panic21, label %checkok28, !dbg !1565

checkok28:                                        ; preds = %if.exit
  %lt29 = icmp slt i64 %33, 4, !dbg !1565
  %35 = call i1 @llvm.expect.i1(i1 %lt29, i1 false), !dbg !1565
  br i1 %35, label %panic30, label %checkok37, !dbg !1565

checkok37:                                        ; preds = %checkok28
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !1565
  %37 = insertvalue %"char[]" %36, i64 4, 1, !dbg !1565
  %38 = extractvalue %"char[]" %37, 0, !dbg !1565
  %39 = extractvalue %"char[]" %30, 0, !dbg !1565
  %40 = extractvalue %"char[]" %30, 1, !dbg !1565
  %41 = extractvalue %"char[]" %37, 1, !dbg !1565
  %neq38 = icmp ne i64 %41, %40, !dbg !1565
  %42 = call i1 @llvm.expect.i1(i1 %neq38, i1 false), !dbg !1565
  br i1 %42, label %panic39, label %checkok46, !dbg !1565

checkok46:                                        ; preds = %checkok37
  %43 = mul i64 %40, 1, !dbg !1565
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !1565
  %44 = load i64, ptr %len, align 8, !dbg !1566
  %sub = sub i64 %44, 4, !dbg !1566
  store i64 %sub, ptr %len, align 8, !dbg !1566
  %45 = load %"char[]", ptr %bytes2, align 8, !dbg !1567
  %46 = extractvalue %"char[]" %45, 0, !dbg !1567
  %47 = extractvalue %"char[]" %45, 1, !dbg !1568
  %gt47 = icmp ugt i64 4, %47, !dbg !1568
  %48 = call i1 @llvm.expect.i1(i1 %gt47, i1 false), !dbg !1568
  br i1 %48, label %panic48, label %checkok55, !dbg !1568

checkok55:                                        ; preds = %checkok46
  %size56 = sub i64 %47, 4, !dbg !1567
  %ptradd57 = getelementptr inbounds i8, ptr %46, i64 4, !dbg !1567
  %49 = insertvalue %"char[]" undef, ptr %ptradd57, 0, !dbg !1567
  %50 = insertvalue %"char[]" %49, i64 %size56, 1, !dbg !1567
  store %"char[]" %50, ptr %bytes2, align 8, !dbg !1567
  br label %loop.cond, !dbg !1567

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.93, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !1569
  %ptradd58 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1569
  %hi = load i64, ptr %ptradd58, align 8, !dbg !1569
  store %"any[]" zeroinitializer, ptr %indirectarg59, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.94, i64 11, ptr @.str.95, i64 22, i32 62, ptr byval(%"any[]") align 8 %indirectarg59), !dbg !1572
  unreachable, !dbg !1573

expr_block.exit:                                  ; preds = %checkok18
  ret void, !dbg !1573

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1542
  call void %51(ptr @.panic_msg.14, i64 62, ptr @.file.89, i64 11, ptr @.func.21, i64 10, i32 62) #5, !dbg !1542
  unreachable, !dbg !1542

panic5:                                           ; preds = %if.then
  store i64 %18, ptr %taddr6, align 8
  %52 = insertvalue %any undef, ptr %taddr6, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %54 = insertvalue %any undef, ptr %taddr7, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd8, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1562
  unreachable, !dbg !1562

panic11:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr12, align 8
  %57 = insertvalue %any undef, ptr %taddr12, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr13, align 8
  %59 = insertvalue %any undef, ptr %taddr13, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %60, ptr %ptradd15, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg17) #5, !dbg !1562
  unreachable, !dbg !1562

panic21:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr22, align 8
  %62 = insertvalue %any undef, ptr %taddr22, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr23, align 8
  %64 = insertvalue %any undef, ptr %taddr23, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %65, ptr %ptradd25, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg27) #5, !dbg !1565
  unreachable, !dbg !1565

panic30:                                          ; preds = %checkok28
  store i64 3, ptr %taddr31, align 8
  %67 = insertvalue %any undef, ptr %taddr31, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr32, align 8
  %69 = insertvalue %any undef, ptr %taddr32, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots33, align 16
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots33, i64 16
  store %any %70, ptr %ptradd34, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots33, 0
  %"$$temp35" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp35", ptr %indirectarg36, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 60, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg36) #5, !dbg !1565
  unreachable, !dbg !1565

panic39:                                          ; preds = %checkok37
  store i64 %41, ptr %taddr40, align 8
  %72 = insertvalue %any undef, ptr %taddr40, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr41, align 8
  %74 = insertvalue %any undef, ptr %taddr41, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots42, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %75, ptr %ptradd43, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg45) #5, !dbg !1565
  unreachable, !dbg !1565

panic48:                                          ; preds = %checkok46
  store i64 %47, ptr %taddr49, align 8
  %77 = insertvalue %any undef, ptr %taddr49, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr50, align 8
  %79 = insertvalue %any undef, ptr %taddr50, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %80, ptr %ptradd52, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg54) #5, !dbg !1567
  unreachable, !dbg !1567
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Lcg64Random.next_int128(ptr %0) #0 comdat !dbg !1574 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1577
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1577
  br i1 %2, label %panic, label %checkok, !dbg !1577

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1578, !DIExpression(), !1579)
  %3 = load ptr, ptr %self, align 8, !dbg !1580
  %4 = call i64 @std.math.random.Lcg64Random.next_long(ptr %3), !dbg !1582
  %zext = zext i64 %4 to i128, !dbg !1582
  %shl = shl i128 %zext, 64, !dbg !1582
  %5 = freeze i128 %shl, !dbg !1582
  %6 = load ptr, ptr %self, align 8, !dbg !1580
  %7 = call i64 @std.math.random.Lcg64Random.next_long(ptr %6), !dbg !1583
  %zext1 = zext i64 %7 to i128, !dbg !1583
  %add = add i128 %5, %zext1, !dbg !1582
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1579
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.89, i64 11, ptr @.func.28, i64 11, i32 63) #5, !dbg !1579
  unreachable, !dbg !1579
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Lcg64Random.next_long(ptr %0) #0 comdat !dbg !1584 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1587
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1587
  br i1 %2, label %panic, label %checkok, !dbg !1587

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1588, !DIExpression(), !1589)
  %3 = load ptr, ptr %self, align 8, !dbg !1590
  %4 = call i32 @std.math.random.Lcg64Random.next_int(ptr %3), !dbg !1592
  %zext = zext i32 %4 to i64, !dbg !1592
  %shl = shl i64 %zext, 32, !dbg !1592
  %5 = freeze i64 %shl, !dbg !1592
  %6 = load ptr, ptr %self, align 8, !dbg !1590
  %7 = call i32 @std.math.random.Lcg64Random.next_int(ptr %6), !dbg !1593
  %zext1 = zext i32 %7 to i64, !dbg !1593
  %add = add i64 %5, %zext1, !dbg !1592
  ret i64 %add, !dbg !1592

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1589
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.89, i64 11, ptr @.func.19, i64 9, i32 64) #5, !dbg !1589
  unreachable, !dbg !1589
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Lcg64Random.next_short(ptr %0) #0 comdat !dbg !1594 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1597
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1597
  br i1 %2, label %panic, label %checkok, !dbg !1597

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1598, !DIExpression(), !1599)
  %3 = load ptr, ptr %self, align 8, !dbg !1600
  %4 = call i32 @std.math.random.Lcg64Random.next_int(ptr %3), !dbg !1601
  %trunc = trunc i32 %4 to i16, !dbg !1601
  ret i16 %trunc, !dbg !1601

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1599
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.89, i64 11, ptr @.func.30, i64 10, i32 65) #5, !dbg !1599
  unreachable, !dbg !1599
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Lcg64Random.next_byte(ptr %0) #0 comdat !dbg !1602 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1605
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1605
  br i1 %2, label %panic, label %checkok, !dbg !1605

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1606, !DIExpression(), !1607)
  %3 = load ptr, ptr %self, align 8, !dbg !1608
  %4 = call i32 @std.math.random.Lcg64Random.next_int(ptr %3), !dbg !1609
  %trunc = trunc i32 %4 to i8, !dbg !1609
  ret i8 %trunc, !dbg !1609

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1607
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.89, i64 11, ptr @.func.31, i64 9, i32 66) #5, !dbg !1607
  unreachable, !dbg !1607
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg32Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1610 {
entry:
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i32, align 4
  %taddr7 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !1615
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1615
  br i1 %4, label %panic, label %checkok, !dbg !1615

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1616, !DIExpression(), !1617)
  store ptr %1, ptr %seed, align 8
  %ptradd = getelementptr inbounds i8, ptr %seed, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %seed, !1618, !DIExpression(), !1619)
  %5 = load ptr, ptr %self, align 8, !dbg !1620
  %checknull = icmp eq ptr %5, null, !dbg !1620
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1620
  br i1 %6, label %panic1, label %checkok2, !dbg !1620

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !1620
  %8 = urem i64 %7, 4, !dbg !1620
  %9 = icmp ne i64 %8, 0, !dbg !1620
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !1620
  br i1 %10, label %panic3, label %checkok6, !dbg !1620

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %seed, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1621, !DIExpression(), !1623)
  store i32 0, ptr %return_value, align 4, !dbg !1623
  store ptr %return_value, ptr %taddr7, align 8
  %11 = load ptr, ptr %taddr7, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 4, 1
  %lo = load ptr, ptr %input, align 8
  %ptradd8 = getelementptr inbounds i8, ptr %input, i64 8
  %hi = load i64, ptr %ptradd8, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 4), !dbg !1625
  %14 = load i32, ptr %return_value, align 4, !dbg !1626
  store i32 %14, ptr %5, align 4, !dbg !1626
  ret void, !dbg !1626

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1617
  call void %15(ptr @.panic_msg.14, i64 62, ptr @.file.89, i64 11, ptr @.func.16, i64 8, i32 72) #5, !dbg !1617
  unreachable, !dbg !1617

panic1:                                           ; preds = %checkok
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1620
  call void %16(ptr @.panic_msg.17, i64 45, ptr @.file.89, i64 11, ptr @.func.16, i64 8, i32 74) #5, !dbg !1620
  unreachable, !dbg !1620

panic3:                                           ; preds = %checkok2
  store i64 4, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %19 = insertvalue %any undef, ptr %taddr4, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %18, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd5, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.89, i64 11, ptr @.func.16, i64 8, i32 74, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1620
  unreachable, !dbg !1620
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Lcg32Random.next_short(ptr %0) #0 comdat !dbg !1627 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i16, align 2
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !1630
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1630
  br i1 %2, label %panic, label %checkok, !dbg !1630

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1631, !DIExpression(), !1632)
    #dbg_declare(ptr %s, !1633, !DIExpression(), !1634)
  %3 = load ptr, ptr %self, align 8, !dbg !1635
  store ptr %3, ptr %s, align 8, !dbg !1635
    #dbg_declare(ptr %result, !1636, !DIExpression(), !1637)
  %4 = load ptr, ptr %s, align 8, !dbg !1638
  %checknull = icmp eq ptr %4, null, !dbg !1638
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1638
  br i1 %5, label %panic1, label %checkok2, !dbg !1638

checkok2:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !1638
  %7 = urem i64 %6, 4, !dbg !1638
  %8 = icmp ne i64 %7, 0, !dbg !1638
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !1638
  br i1 %9, label %panic3, label %checkok5, !dbg !1638

checkok5:                                         ; preds = %checkok2
  %10 = load i32, ptr %4, align 4, !dbg !1638
  %lshr = lshr i32 %10, 16, !dbg !1639
  %11 = freeze i32 %lshr, !dbg !1639
  %trunc = trunc i32 %11 to i16, !dbg !1639
  store i16 %trunc, ptr %result, align 2, !dbg !1639
  %12 = load ptr, ptr %s, align 8, !dbg !1640
  %checknull6 = icmp eq ptr %12, null, !dbg !1640
  %13 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !1640
  br i1 %13, label %panic7, label %checkok8, !dbg !1640

checkok8:                                         ; preds = %checkok5
  %14 = ptrtoint ptr %12 to i64, !dbg !1640
  %15 = urem i64 %14, 4, !dbg !1640
  %16 = icmp ne i64 %15, 0, !dbg !1640
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !1640
  br i1 %17, label %panic9, label %checkok16, !dbg !1640

checkok16:                                        ; preds = %checkok8
  %18 = load ptr, ptr %s, align 8, !dbg !1641
  %checknull17 = icmp eq ptr %18, null, !dbg !1641
  %19 = call i1 @llvm.expect.i1(i1 %checknull17, i1 false), !dbg !1641
  br i1 %19, label %panic18, label %checkok19, !dbg !1641

checkok19:                                        ; preds = %checkok16
  %20 = ptrtoint ptr %18 to i64, !dbg !1641
  %21 = urem i64 %20, 4, !dbg !1641
  %22 = icmp ne i64 %21, 0, !dbg !1641
  %23 = call i1 @llvm.expect.i1(i1 %22, i1 false), !dbg !1641
  br i1 %23, label %panic20, label %checkok27, !dbg !1641

checkok27:                                        ; preds = %checkok19
  %24 = load i32, ptr %18, align 4, !dbg !1641
  %mul = mul i32 %24, -1856014347, !dbg !1642
  %add = add i32 %mul, -1640531527, !dbg !1642
  store i32 %add, ptr %12, align 4, !dbg !1642
  %25 = load i16, ptr %result, align 2, !dbg !1643
  ret i16 %25, !dbg !1643

panic:                                            ; preds = %entry
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1632
  call void %26(ptr @.panic_msg.14, i64 62, ptr @.file.89, i64 11, ptr @.func.30, i64 10, i32 77) #5, !dbg !1632
  unreachable, !dbg !1632

panic1:                                           ; preds = %checkok
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1638
  call void %27(ptr @.panic_msg.20, i64 42, ptr @.file.89, i64 11, ptr @.func.30, i64 10, i32 80) #5, !dbg !1638
  unreachable, !dbg !1638

panic3:                                           ; preds = %checkok2
  store i64 4, ptr %taddr, align 8
  %28 = insertvalue %any undef, ptr %taddr, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr4, align 8
  %30 = insertvalue %any undef, ptr %taddr4, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %29, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %31, ptr %ptradd, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.89, i64 11, ptr @.func.30, i64 10, i32 80, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1638
  unreachable, !dbg !1638

panic7:                                           ; preds = %checkok5
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1640
  call void %33(ptr @.panic_msg.20, i64 42, ptr @.file.89, i64 11, ptr @.func.30, i64 10, i32 81) #5, !dbg !1640
  unreachable, !dbg !1640

panic9:                                           ; preds = %checkok8
  store i64 4, ptr %taddr10, align 8
  %34 = insertvalue %any undef, ptr %taddr10, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr11, align 8
  %36 = insertvalue %any undef, ptr %taddr11, 0
  %37 = insertvalue %any %36, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %35, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %37, ptr %ptradd13, align 16
  %38 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %38, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.89, i64 11, ptr @.func.30, i64 10, i32 81, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !1640
  unreachable, !dbg !1640

panic18:                                          ; preds = %checkok16
  %39 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1641
  call void %39(ptr @.panic_msg.20, i64 42, ptr @.file.89, i64 11, ptr @.func.30, i64 10, i32 81) #5, !dbg !1641
  unreachable, !dbg !1641

panic20:                                          ; preds = %checkok19
  store i64 4, ptr %taddr21, align 8
  %40 = insertvalue %any undef, ptr %taddr21, 0
  %41 = insertvalue %any %40, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr22, align 8
  %42 = insertvalue %any undef, ptr %taddr22, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %41, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %43, ptr %ptradd24, align 16
  %44 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %44, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.89, i64 11, ptr @.func.30, i64 10, i32 81, ptr byval(%"any[]") align 8 %indirectarg26) #5, !dbg !1641
  unreachable, !dbg !1641
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg32Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1644 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes1 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr17 = alloca ptr, align 8
  %taddr20 = alloca i64, align 8
  %taddr21 = alloca i64, align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca i64, align 8
  %varargslots49 = alloca [2 x %any], align 16
  %indirectarg52 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg57 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !1645
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1645
  br i1 %4, label %panic, label %checkok, !dbg !1645

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1646, !DIExpression(), !1647)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !1648, !DIExpression(), !1649)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes1, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !1650, !DIExpression(), !1652)
  %ptradd2 = getelementptr inbounds i8, ptr %bytes1, i64 8, !dbg !1653
  %5 = load i64, ptr %ptradd2, align 8, !dbg !1653
  store i64 %5, ptr %len, align 8, !dbg !1653
  br label %loop.cond, !dbg !1654

loop.cond:                                        ; preds = %checkok53, %checkok
  %6 = load i64, ptr %len, align 8, !dbg !1655
  %lt = icmp ult i64 0, %6, !dbg !1655
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1655

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1657, !DIExpression(), !1659)
  %7 = load ptr, ptr %self, align 8, !dbg !1660
  %8 = call i16 @std.math.random.Lcg32Random.next_short(ptr %7), !dbg !1661
  store i16 %8, ptr %value, align 2, !dbg !1661
  %9 = load i64, ptr %len, align 8, !dbg !1662
  %le = icmp ule i64 %9, 2, !dbg !1662
  br i1 %le, label %if.then, label %if.exit, !dbg !1662

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %10 = load ptr, ptr %taddr, align 8
  %11 = load i64, ptr %len, align 8, !dbg !1663
  %add = add i64 0, %11, !dbg !1663
  %size = sub i64 %add, 0, !dbg !1663
  %12 = insertvalue %"char[]" undef, ptr %10, 0, !dbg !1663
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !1663
  %14 = load %"char[]", ptr %bytes1, align 8, !dbg !1665
  %15 = extractvalue %"char[]" %14, 0, !dbg !1665
  %16 = extractvalue %"char[]" %14, 1, !dbg !1666
  %gt = icmp ugt i64 0, %16, !dbg !1666
  %17 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1666
  br i1 %17, label %panic3, label %checkok7, !dbg !1666

checkok7:                                         ; preds = %if.then
  %size8 = sub i64 %16, 0, !dbg !1665
  %18 = insertvalue %"char[]" undef, ptr %15, 0, !dbg !1665
  %19 = insertvalue %"char[]" %18, i64 %size8, 1, !dbg !1665
  %20 = extractvalue %"char[]" %19, 0, !dbg !1665
  %21 = extractvalue %"char[]" %13, 0, !dbg !1665
  %22 = extractvalue %"char[]" %13, 1, !dbg !1665
  %23 = extractvalue %"char[]" %19, 1, !dbg !1665
  %neq = icmp ne i64 %23, %22, !dbg !1665
  %24 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1665
  br i1 %24, label %panic9, label %checkok16, !dbg !1665

checkok16:                                        ; preds = %checkok7
  %25 = mul i64 %22, 1, !dbg !1665
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %20, ptr align 1 %21, i64 %25, i1 false), !dbg !1665
  br label %expr_block.exit, !dbg !1667

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr17, align 8
  %26 = load ptr, ptr %taddr17, align 8
  %27 = insertvalue %"char[]" undef, ptr %26, 0
  %28 = insertvalue %"char[]" %27, i64 2, 1
  %29 = load %"char[]", ptr %bytes1, align 8, !dbg !1668
  %30 = extractvalue %"char[]" %29, 0, !dbg !1668
  %31 = extractvalue %"char[]" %29, 1, !dbg !1668
  %gt18 = icmp sgt i64 0, %31, !dbg !1668
  %32 = call i1 @llvm.expect.i1(i1 %gt18, i1 false), !dbg !1668
  br i1 %32, label %panic19, label %checkok26, !dbg !1668

checkok26:                                        ; preds = %if.exit
  %lt27 = icmp slt i64 %31, 2, !dbg !1668
  %33 = call i1 @llvm.expect.i1(i1 %lt27, i1 false), !dbg !1668
  br i1 %33, label %panic28, label %checkok35, !dbg !1668

checkok35:                                        ; preds = %checkok26
  %34 = insertvalue %"char[]" undef, ptr %30, 0, !dbg !1668
  %35 = insertvalue %"char[]" %34, i64 2, 1, !dbg !1668
  %36 = extractvalue %"char[]" %35, 0, !dbg !1668
  %37 = extractvalue %"char[]" %28, 0, !dbg !1668
  %38 = extractvalue %"char[]" %28, 1, !dbg !1668
  %39 = extractvalue %"char[]" %35, 1, !dbg !1668
  %neq36 = icmp ne i64 %39, %38, !dbg !1668
  %40 = call i1 @llvm.expect.i1(i1 %neq36, i1 false), !dbg !1668
  br i1 %40, label %panic37, label %checkok44, !dbg !1668

checkok44:                                        ; preds = %checkok35
  %41 = mul i64 %38, 1, !dbg !1668
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %36, ptr align 1 %37, i64 %41, i1 false), !dbg !1668
  %42 = load i64, ptr %len, align 8, !dbg !1669
  %sub = sub i64 %42, 2, !dbg !1669
  store i64 %sub, ptr %len, align 8, !dbg !1669
  %43 = load %"char[]", ptr %bytes1, align 8, !dbg !1670
  %44 = extractvalue %"char[]" %43, 0, !dbg !1670
  %45 = extractvalue %"char[]" %43, 1, !dbg !1671
  %gt45 = icmp ugt i64 2, %45, !dbg !1671
  %46 = call i1 @llvm.expect.i1(i1 %gt45, i1 false), !dbg !1671
  br i1 %46, label %panic46, label %checkok53, !dbg !1671

checkok53:                                        ; preds = %checkok44
  %size54 = sub i64 %45, 2, !dbg !1670
  %ptradd55 = getelementptr inbounds i8, ptr %44, i64 2, !dbg !1670
  %47 = insertvalue %"char[]" undef, ptr %ptradd55, 0, !dbg !1670
  %48 = insertvalue %"char[]" %47, i64 %size54, 1, !dbg !1670
  store %"char[]" %48, ptr %bytes1, align 8, !dbg !1670
  br label %loop.cond, !dbg !1670

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.96, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !1672
  %ptradd56 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1672
  %hi = load i64, ptr %ptradd56, align 8, !dbg !1672
  store %"any[]" zeroinitializer, ptr %indirectarg57, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.97, i64 11, ptr @.str.98, i64 22, i32 85, ptr byval(%"any[]") align 8 %indirectarg57), !dbg !1675
  unreachable, !dbg !1676

expr_block.exit:                                  ; preds = %checkok16
  ret void, !dbg !1676

panic:                                            ; preds = %entry
  %49 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1647
  call void %49(ptr @.panic_msg.14, i64 62, ptr @.file.89, i64 11, ptr @.func.21, i64 10, i32 85) #5, !dbg !1647
  unreachable, !dbg !1647

panic3:                                           ; preds = %if.then
  store i64 %16, ptr %taddr4, align 8
  %50 = insertvalue %any undef, ptr %taddr4, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %52 = insertvalue %any undef, ptr %taddr5, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %51, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %53, ptr %ptradd6, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1665
  unreachable, !dbg !1665

panic9:                                           ; preds = %checkok7
  store i64 %23, ptr %taddr10, align 8
  %55 = insertvalue %any undef, ptr %taddr10, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr11, align 8
  %57 = insertvalue %any undef, ptr %taddr11, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %56, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %58, ptr %ptradd13, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !1665
  unreachable, !dbg !1665

panic19:                                          ; preds = %if.exit
  store i64 %31, ptr %taddr20, align 8
  %60 = insertvalue %any undef, ptr %taddr20, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr21, align 8
  %62 = insertvalue %any undef, ptr %taddr21, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %61, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %63, ptr %ptradd23, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg25) #5, !dbg !1668
  unreachable, !dbg !1668

panic28:                                          ; preds = %checkok26
  store i64 1, ptr %taddr29, align 8
  %65 = insertvalue %any undef, ptr %taddr29, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %31, ptr %taddr30, align 8
  %67 = insertvalue %any undef, ptr %taddr30, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %66, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %68, ptr %ptradd32, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 60, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !1668
  unreachable, !dbg !1668

panic37:                                          ; preds = %checkok35
  store i64 %39, ptr %taddr38, align 8
  %70 = insertvalue %any undef, ptr %taddr38, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %38, ptr %taddr39, align 8
  %72 = insertvalue %any undef, ptr %taddr39, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %71, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %73, ptr %ptradd41, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg43) #5, !dbg !1668
  unreachable, !dbg !1668

panic46:                                          ; preds = %checkok44
  store i64 %45, ptr %taddr47, align 8
  %75 = insertvalue %any undef, ptr %taddr47, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr48, align 8
  %77 = insertvalue %any undef, ptr %taddr48, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %76, ptr %varargslots49, align 16
  %ptradd50 = getelementptr inbounds i8, ptr %varargslots49, i64 16
  store %any %78, ptr %ptradd50, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp51" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp51", ptr %indirectarg52, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg52) #5, !dbg !1670
  unreachable, !dbg !1670
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Lcg32Random.next_int128(ptr %0) #0 comdat !dbg !1677 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1680
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1680
  br i1 %2, label %panic, label %checkok, !dbg !1680

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1681, !DIExpression(), !1682)
  %3 = load ptr, ptr %self, align 8, !dbg !1683
  %4 = call i64 @std.math.random.Lcg32Random.next_long(ptr %3), !dbg !1685
  %zext = zext i64 %4 to i128, !dbg !1685
  %shl = shl i128 %zext, 64, !dbg !1685
  %5 = freeze i128 %shl, !dbg !1685
  %6 = load ptr, ptr %self, align 8, !dbg !1683
  %7 = call i64 @std.math.random.Lcg32Random.next_long(ptr %6), !dbg !1686
  %zext1 = zext i64 %7 to i128, !dbg !1686
  %add = add i128 %5, %zext1, !dbg !1685
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1682
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.89, i64 11, ptr @.func.28, i64 11, i32 86) #5, !dbg !1682
  unreachable, !dbg !1682
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Lcg32Random.next_long(ptr %0) #0 comdat !dbg !1687 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1690
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1690
  br i1 %2, label %panic, label %checkok, !dbg !1690

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1691, !DIExpression(), !1692)
  %3 = load ptr, ptr %self, align 8, !dbg !1693
  %4 = call i32 @std.math.random.Lcg32Random.next_int(ptr %3), !dbg !1695
  %zext = zext i32 %4 to i64, !dbg !1695
  %shl = shl i64 %zext, 32, !dbg !1695
  %5 = freeze i64 %shl, !dbg !1695
  %6 = load ptr, ptr %self, align 8, !dbg !1693
  %7 = call i32 @std.math.random.Lcg32Random.next_int(ptr %6), !dbg !1696
  %zext1 = zext i32 %7 to i64, !dbg !1696
  %add = add i64 %5, %zext1, !dbg !1695
  ret i64 %add, !dbg !1695

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1692
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.89, i64 11, ptr @.func.19, i64 9, i32 87) #5, !dbg !1692
  unreachable, !dbg !1692
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Lcg32Random.next_int(ptr %0) #0 comdat !dbg !1697 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1700
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1700
  br i1 %2, label %panic, label %checkok, !dbg !1700

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1701, !DIExpression(), !1702)
  %3 = load ptr, ptr %self, align 8, !dbg !1703
  %4 = call i16 @std.math.random.Lcg32Random.next_short(ptr %3), !dbg !1705
  %zext = zext i16 %4 to i32, !dbg !1705
  %shl = shl i32 %zext, 16, !dbg !1705
  %5 = freeze i32 %shl, !dbg !1705
  %6 = load ptr, ptr %self, align 8, !dbg !1703
  %7 = call i16 @std.math.random.Lcg32Random.next_short(ptr %6), !dbg !1706
  %zext1 = zext i16 %7 to i32, !dbg !1706
  %add = add i32 %5, %zext1, !dbg !1705
  ret i32 %add, !dbg !1705

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1702
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.89, i64 11, ptr @.func.29, i64 8, i32 88) #5, !dbg !1702
  unreachable, !dbg !1702
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Lcg32Random.next_byte(ptr %0) #0 comdat !dbg !1707 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1710
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1710
  br i1 %2, label %panic, label %checkok, !dbg !1710

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1711, !DIExpression(), !1712)
  %3 = load ptr, ptr %self, align 8, !dbg !1713
  %4 = call i16 @std.math.random.Lcg32Random.next_short(ptr %3), !dbg !1714
  %trunc = trunc i16 %4 to i8, !dbg !1714
  ret i8 %trunc, !dbg !1714

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1712
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.89, i64 11, ptr @.func.31, i64 9, i32 89) #5, !dbg !1712
  unreachable, !dbg !1712
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg16Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1715 {
entry:
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i16, align 2
  %taddr7 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !1720
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1720
  br i1 %4, label %panic, label %checkok, !dbg !1720

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1721, !DIExpression(), !1722)
  store ptr %1, ptr %seed, align 8
  %ptradd = getelementptr inbounds i8, ptr %seed, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %seed, !1723, !DIExpression(), !1724)
  %5 = load ptr, ptr %self, align 8, !dbg !1725
  %checknull = icmp eq ptr %5, null, !dbg !1725
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1725
  br i1 %6, label %panic1, label %checkok2, !dbg !1725

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !1725
  %8 = urem i64 %7, 2, !dbg !1725
  %9 = icmp ne i64 %8, 0, !dbg !1725
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !1725
  br i1 %10, label %panic3, label %checkok6, !dbg !1725

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %seed, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1726, !DIExpression(), !1728)
  store i16 0, ptr %return_value, align 2, !dbg !1728
  store ptr %return_value, ptr %taddr7, align 8
  %11 = load ptr, ptr %taddr7, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 2, 1
  %lo = load ptr, ptr %input, align 8
  %ptradd8 = getelementptr inbounds i8, ptr %input, i64 8
  %hi = load i64, ptr %ptradd8, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 2), !dbg !1730
  %14 = load i16, ptr %return_value, align 2, !dbg !1731
  store i16 %14, ptr %5, align 2, !dbg !1731
  ret void, !dbg !1731

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1722
  call void %15(ptr @.panic_msg.14, i64 62, ptr @.file.89, i64 11, ptr @.func.16, i64 8, i32 95) #5, !dbg !1722
  unreachable, !dbg !1722

panic1:                                           ; preds = %checkok
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1725
  call void %16(ptr @.panic_msg.17, i64 45, ptr @.file.89, i64 11, ptr @.func.16, i64 8, i32 97) #5, !dbg !1725
  unreachable, !dbg !1725

panic3:                                           ; preds = %checkok2
  store i64 2, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %19 = insertvalue %any undef, ptr %taddr4, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %18, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd5, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.89, i64 11, ptr @.func.16, i64 8, i32 97, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1725
  unreachable, !dbg !1725
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Lcg16Random.next_byte(ptr %0) #0 comdat !dbg !1732 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !1735
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1735
  br i1 %2, label %panic, label %checkok, !dbg !1735

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1736, !DIExpression(), !1737)
    #dbg_declare(ptr %s, !1738, !DIExpression(), !1739)
  %3 = load ptr, ptr %self, align 8, !dbg !1740
  store ptr %3, ptr %s, align 8, !dbg !1740
    #dbg_declare(ptr %result, !1741, !DIExpression(), !1742)
  %4 = load ptr, ptr %s, align 8, !dbg !1743
  %checknull = icmp eq ptr %4, null, !dbg !1743
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1743
  br i1 %5, label %panic1, label %checkok2, !dbg !1743

checkok2:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !1743
  %7 = urem i64 %6, 2, !dbg !1743
  %8 = icmp ne i64 %7, 0, !dbg !1743
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !1743
  br i1 %9, label %panic3, label %checkok5, !dbg !1743

checkok5:                                         ; preds = %checkok2
  %10 = load i16, ptr %4, align 2, !dbg !1743
  %zext = zext i16 %10 to i32, !dbg !1743
  %lshr = lshr i32 %zext, 8, !dbg !1744
  %11 = freeze i32 %lshr, !dbg !1744
  %trunc = trunc i32 %11 to i8, !dbg !1744
  store i8 %trunc, ptr %result, align 1, !dbg !1744
  %12 = load ptr, ptr %s, align 8, !dbg !1745
  %checknull6 = icmp eq ptr %12, null, !dbg !1745
  %13 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !1745
  br i1 %13, label %panic7, label %checkok8, !dbg !1745

checkok8:                                         ; preds = %checkok5
  %14 = ptrtoint ptr %12 to i64, !dbg !1745
  %15 = urem i64 %14, 2, !dbg !1745
  %16 = icmp ne i64 %15, 0, !dbg !1745
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !1745
  br i1 %17, label %panic9, label %checkok16, !dbg !1745

checkok16:                                        ; preds = %checkok8
  %18 = load ptr, ptr %s, align 8, !dbg !1746
  %checknull17 = icmp eq ptr %18, null, !dbg !1746
  %19 = call i1 @llvm.expect.i1(i1 %checknull17, i1 false), !dbg !1746
  br i1 %19, label %panic18, label %checkok19, !dbg !1746

checkok19:                                        ; preds = %checkok16
  %20 = ptrtoint ptr %18 to i64, !dbg !1746
  %21 = urem i64 %20, 2, !dbg !1746
  %22 = icmp ne i64 %21, 0, !dbg !1746
  %23 = call i1 @llvm.expect.i1(i1 %22, i1 false), !dbg !1746
  br i1 %23, label %panic20, label %checkok27, !dbg !1746

checkok27:                                        ; preds = %checkok19
  %24 = load i16, ptr %18, align 2, !dbg !1746
  %zext28 = zext i16 %24 to i32, !dbg !1746
  %mul = mul i32 %zext28, 37213, !dbg !1747
  %add = add i32 %mul, 40503, !dbg !1747
  %trunc29 = trunc i32 %add to i16, !dbg !1747
  store i16 %trunc29, ptr %12, align 2, !dbg !1747
  %25 = load i8, ptr %result, align 1, !dbg !1748
  ret i8 %25, !dbg !1748

panic:                                            ; preds = %entry
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1737
  call void %26(ptr @.panic_msg.14, i64 62, ptr @.file.89, i64 11, ptr @.func.31, i64 9, i32 100) #5, !dbg !1737
  unreachable, !dbg !1737

panic1:                                           ; preds = %checkok
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1743
  call void %27(ptr @.panic_msg.20, i64 42, ptr @.file.89, i64 11, ptr @.func.31, i64 9, i32 103) #5, !dbg !1743
  unreachable, !dbg !1743

panic3:                                           ; preds = %checkok2
  store i64 2, ptr %taddr, align 8
  %28 = insertvalue %any undef, ptr %taddr, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr4, align 8
  %30 = insertvalue %any undef, ptr %taddr4, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %29, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %31, ptr %ptradd, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.89, i64 11, ptr @.func.31, i64 9, i32 103, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1743
  unreachable, !dbg !1743

panic7:                                           ; preds = %checkok5
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1745
  call void %33(ptr @.panic_msg.20, i64 42, ptr @.file.89, i64 11, ptr @.func.31, i64 9, i32 104) #5, !dbg !1745
  unreachable, !dbg !1745

panic9:                                           ; preds = %checkok8
  store i64 2, ptr %taddr10, align 8
  %34 = insertvalue %any undef, ptr %taddr10, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr11, align 8
  %36 = insertvalue %any undef, ptr %taddr11, 0
  %37 = insertvalue %any %36, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %35, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %37, ptr %ptradd13, align 16
  %38 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %38, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.89, i64 11, ptr @.func.31, i64 9, i32 104, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !1745
  unreachable, !dbg !1745

panic18:                                          ; preds = %checkok16
  %39 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1746
  call void %39(ptr @.panic_msg.20, i64 42, ptr @.file.89, i64 11, ptr @.func.31, i64 9, i32 104) #5, !dbg !1746
  unreachable, !dbg !1746

panic20:                                          ; preds = %checkok19
  store i64 2, ptr %taddr21, align 8
  %40 = insertvalue %any undef, ptr %taddr21, 0
  %41 = insertvalue %any %40, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr22, align 8
  %42 = insertvalue %any undef, ptr %taddr22, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %41, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %43, ptr %ptradd24, align 16
  %44 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %44, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.89, i64 11, ptr @.func.31, i64 9, i32 104, ptr byval(%"any[]") align 8 %indirectarg26) #5, !dbg !1746
  unreachable, !dbg !1746
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg16Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1749 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes1 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr17 = alloca ptr, align 8
  %taddr20 = alloca i64, align 8
  %taddr21 = alloca i64, align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca i64, align 8
  %varargslots49 = alloca [2 x %any], align 16
  %indirectarg52 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg57 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !1750
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1750
  br i1 %4, label %panic, label %checkok, !dbg !1750

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1751, !DIExpression(), !1752)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !1753, !DIExpression(), !1754)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes1, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !1755, !DIExpression(), !1757)
  %ptradd2 = getelementptr inbounds i8, ptr %bytes1, i64 8, !dbg !1758
  %5 = load i64, ptr %ptradd2, align 8, !dbg !1758
  store i64 %5, ptr %len, align 8, !dbg !1758
  br label %loop.cond, !dbg !1759

loop.cond:                                        ; preds = %checkok53, %checkok
  %6 = load i64, ptr %len, align 8, !dbg !1760
  %lt = icmp ult i64 0, %6, !dbg !1760
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1760

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1762, !DIExpression(), !1764)
  %7 = load ptr, ptr %self, align 8, !dbg !1765
  %8 = call i8 @std.math.random.Lcg16Random.next_byte(ptr %7), !dbg !1766
  store i8 %8, ptr %value, align 1, !dbg !1766
  %9 = load i64, ptr %len, align 8, !dbg !1767
  %le = icmp ule i64 %9, 1, !dbg !1767
  br i1 %le, label %if.then, label %if.exit, !dbg !1767

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %10 = load ptr, ptr %taddr, align 8
  %11 = load i64, ptr %len, align 8, !dbg !1768
  %add = add i64 0, %11, !dbg !1768
  %size = sub i64 %add, 0, !dbg !1768
  %12 = insertvalue %"char[]" undef, ptr %10, 0, !dbg !1768
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !1768
  %14 = load %"char[]", ptr %bytes1, align 8, !dbg !1770
  %15 = extractvalue %"char[]" %14, 0, !dbg !1770
  %16 = extractvalue %"char[]" %14, 1, !dbg !1771
  %gt = icmp ugt i64 0, %16, !dbg !1771
  %17 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1771
  br i1 %17, label %panic3, label %checkok7, !dbg !1771

checkok7:                                         ; preds = %if.then
  %size8 = sub i64 %16, 0, !dbg !1770
  %18 = insertvalue %"char[]" undef, ptr %15, 0, !dbg !1770
  %19 = insertvalue %"char[]" %18, i64 %size8, 1, !dbg !1770
  %20 = extractvalue %"char[]" %19, 0, !dbg !1770
  %21 = extractvalue %"char[]" %13, 0, !dbg !1770
  %22 = extractvalue %"char[]" %13, 1, !dbg !1770
  %23 = extractvalue %"char[]" %19, 1, !dbg !1770
  %neq = icmp ne i64 %23, %22, !dbg !1770
  %24 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1770
  br i1 %24, label %panic9, label %checkok16, !dbg !1770

checkok16:                                        ; preds = %checkok7
  %25 = mul i64 %22, 1, !dbg !1770
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %20, ptr align 1 %21, i64 %25, i1 false), !dbg !1770
  br label %expr_block.exit, !dbg !1772

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr17, align 8
  %26 = load ptr, ptr %taddr17, align 8
  %27 = insertvalue %"char[]" undef, ptr %26, 0
  %28 = insertvalue %"char[]" %27, i64 1, 1
  %29 = load %"char[]", ptr %bytes1, align 8, !dbg !1773
  %30 = extractvalue %"char[]" %29, 0, !dbg !1773
  %31 = extractvalue %"char[]" %29, 1, !dbg !1773
  %gt18 = icmp sgt i64 0, %31, !dbg !1773
  %32 = call i1 @llvm.expect.i1(i1 %gt18, i1 false), !dbg !1773
  br i1 %32, label %panic19, label %checkok26, !dbg !1773

checkok26:                                        ; preds = %if.exit
  %lt27 = icmp slt i64 %31, 1, !dbg !1773
  %33 = call i1 @llvm.expect.i1(i1 %lt27, i1 false), !dbg !1773
  br i1 %33, label %panic28, label %checkok35, !dbg !1773

checkok35:                                        ; preds = %checkok26
  %34 = insertvalue %"char[]" undef, ptr %30, 0, !dbg !1773
  %35 = insertvalue %"char[]" %34, i64 1, 1, !dbg !1773
  %36 = extractvalue %"char[]" %35, 0, !dbg !1773
  %37 = extractvalue %"char[]" %28, 0, !dbg !1773
  %38 = extractvalue %"char[]" %28, 1, !dbg !1773
  %39 = extractvalue %"char[]" %35, 1, !dbg !1773
  %neq36 = icmp ne i64 %39, %38, !dbg !1773
  %40 = call i1 @llvm.expect.i1(i1 %neq36, i1 false), !dbg !1773
  br i1 %40, label %panic37, label %checkok44, !dbg !1773

checkok44:                                        ; preds = %checkok35
  %41 = mul i64 %38, 1, !dbg !1773
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %36, ptr align 1 %37, i64 %41, i1 false), !dbg !1773
  %42 = load i64, ptr %len, align 8, !dbg !1774
  %sub = sub i64 %42, 1, !dbg !1774
  store i64 %sub, ptr %len, align 8, !dbg !1774
  %43 = load %"char[]", ptr %bytes1, align 8, !dbg !1775
  %44 = extractvalue %"char[]" %43, 0, !dbg !1775
  %45 = extractvalue %"char[]" %43, 1, !dbg !1776
  %gt45 = icmp ugt i64 1, %45, !dbg !1776
  %46 = call i1 @llvm.expect.i1(i1 %gt45, i1 false), !dbg !1776
  br i1 %46, label %panic46, label %checkok53, !dbg !1776

checkok53:                                        ; preds = %checkok44
  %size54 = sub i64 %45, 1, !dbg !1775
  %ptradd55 = getelementptr inbounds i8, ptr %44, i64 1, !dbg !1775
  %47 = insertvalue %"char[]" undef, ptr %ptradd55, 0, !dbg !1775
  %48 = insertvalue %"char[]" %47, i64 %size54, 1, !dbg !1775
  store %"char[]" %48, ptr %bytes1, align 8, !dbg !1775
  br label %loop.cond, !dbg !1775

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.99, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !1777
  %ptradd56 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1777
  %hi = load i64, ptr %ptradd56, align 8, !dbg !1777
  store %"any[]" zeroinitializer, ptr %indirectarg57, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.100, i64 11, ptr @.str.101, i64 22, i32 108, ptr byval(%"any[]") align 8 %indirectarg57), !dbg !1780
  unreachable, !dbg !1781

expr_block.exit:                                  ; preds = %checkok16
  ret void, !dbg !1781

panic:                                            ; preds = %entry
  %49 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1752
  call void %49(ptr @.panic_msg.14, i64 62, ptr @.file.89, i64 11, ptr @.func.21, i64 10, i32 108) #5, !dbg !1752
  unreachable, !dbg !1752

panic3:                                           ; preds = %if.then
  store i64 %16, ptr %taddr4, align 8
  %50 = insertvalue %any undef, ptr %taddr4, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %52 = insertvalue %any undef, ptr %taddr5, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %51, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %53, ptr %ptradd6, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1770
  unreachable, !dbg !1770

panic9:                                           ; preds = %checkok7
  store i64 %23, ptr %taddr10, align 8
  %55 = insertvalue %any undef, ptr %taddr10, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr11, align 8
  %57 = insertvalue %any undef, ptr %taddr11, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %56, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %58, ptr %ptradd13, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !1770
  unreachable, !dbg !1770

panic19:                                          ; preds = %if.exit
  store i64 %31, ptr %taddr20, align 8
  %60 = insertvalue %any undef, ptr %taddr20, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr21, align 8
  %62 = insertvalue %any undef, ptr %taddr21, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %61, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %63, ptr %ptradd23, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg25) #5, !dbg !1773
  unreachable, !dbg !1773

panic28:                                          ; preds = %checkok26
  store i64 0, ptr %taddr29, align 8
  %65 = insertvalue %any undef, ptr %taddr29, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %31, ptr %taddr30, align 8
  %67 = insertvalue %any undef, ptr %taddr30, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %66, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %68, ptr %ptradd32, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 60, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !1773
  unreachable, !dbg !1773

panic37:                                          ; preds = %checkok35
  store i64 %39, ptr %taddr38, align 8
  %70 = insertvalue %any undef, ptr %taddr38, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %38, ptr %taddr39, align 8
  %72 = insertvalue %any undef, ptr %taddr39, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %71, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %73, ptr %ptradd41, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg43) #5, !dbg !1773
  unreachable, !dbg !1773

panic46:                                          ; preds = %checkok44
  store i64 %45, ptr %taddr47, align 8
  %75 = insertvalue %any undef, ptr %taddr47, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr48, align 8
  %77 = insertvalue %any undef, ptr %taddr48, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %76, ptr %varargslots49, align 16
  %ptradd50 = getelementptr inbounds i8, ptr %varargslots49, i64 16
  store %any %78, ptr %ptradd50, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp51" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp51", ptr %indirectarg52, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg52) #5, !dbg !1775
  unreachable, !dbg !1775
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Lcg16Random.next_int128(ptr %0) #0 comdat !dbg !1782 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1785
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1785
  br i1 %2, label %panic, label %checkok, !dbg !1785

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1786, !DIExpression(), !1787)
  %3 = load ptr, ptr %self, align 8, !dbg !1788
  %4 = call i64 @std.math.random.Lcg16Random.next_long(ptr %3), !dbg !1790
  %zext = zext i64 %4 to i128, !dbg !1790
  %shl = shl i128 %zext, 64, !dbg !1790
  %5 = freeze i128 %shl, !dbg !1790
  %6 = load ptr, ptr %self, align 8, !dbg !1788
  %7 = call i64 @std.math.random.Lcg16Random.next_long(ptr %6), !dbg !1791
  %zext1 = zext i64 %7 to i128, !dbg !1791
  %add = add i128 %5, %zext1, !dbg !1790
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1787
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.89, i64 11, ptr @.func.28, i64 11, i32 109) #5, !dbg !1787
  unreachable, !dbg !1787
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Lcg16Random.next_long(ptr %0) #0 comdat !dbg !1792 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1795
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1795
  br i1 %2, label %panic, label %checkok, !dbg !1795

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1796, !DIExpression(), !1797)
  %3 = load ptr, ptr %self, align 8, !dbg !1798
  %4 = call i32 @std.math.random.Lcg16Random.next_int(ptr %3), !dbg !1800
  %zext = zext i32 %4 to i64, !dbg !1800
  %shl = shl i64 %zext, 32, !dbg !1800
  %5 = freeze i64 %shl, !dbg !1800
  %6 = load ptr, ptr %self, align 8, !dbg !1798
  %7 = call i32 @std.math.random.Lcg16Random.next_int(ptr %6), !dbg !1801
  %zext1 = zext i32 %7 to i64, !dbg !1801
  %add = add i64 %5, %zext1, !dbg !1800
  ret i64 %add, !dbg !1800

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1797
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.89, i64 11, ptr @.func.19, i64 9, i32 110) #5, !dbg !1797
  unreachable, !dbg !1797
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Lcg16Random.next_int(ptr %0) #0 comdat !dbg !1802 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1805
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1805
  br i1 %2, label %panic, label %checkok, !dbg !1805

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1806, !DIExpression(), !1807)
  %3 = load ptr, ptr %self, align 8, !dbg !1808
  %4 = call i16 @std.math.random.Lcg16Random.next_short(ptr %3), !dbg !1810
  %zext = zext i16 %4 to i32, !dbg !1810
  %shl = shl i32 %zext, 16, !dbg !1810
  %5 = freeze i32 %shl, !dbg !1810
  %6 = load ptr, ptr %self, align 8, !dbg !1808
  %7 = call i16 @std.math.random.Lcg16Random.next_short(ptr %6), !dbg !1811
  %zext1 = zext i16 %7 to i32, !dbg !1811
  %add = add i32 %5, %zext1, !dbg !1810
  ret i32 %add, !dbg !1810

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1807
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.89, i64 11, ptr @.func.29, i64 8, i32 111) #5, !dbg !1807
  unreachable, !dbg !1807
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Lcg16Random.next_short(ptr %0) #0 comdat !dbg !1812 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1815
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1815
  br i1 %2, label %panic, label %checkok, !dbg !1815

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1816, !DIExpression(), !1817)
  %3 = load ptr, ptr %self, align 8, !dbg !1818
  %4 = call i8 @std.math.random.Lcg16Random.next_byte(ptr %3), !dbg !1820
  %zext = zext i8 %4 to i16, !dbg !1820
  %zext1 = zext i16 %zext to i32, !dbg !1820
  %shl = shl i32 %zext1, 8, !dbg !1820
  %5 = freeze i32 %shl, !dbg !1820
  %6 = load ptr, ptr %self, align 8, !dbg !1818
  %7 = call i8 @std.math.random.Lcg16Random.next_byte(ptr %6), !dbg !1821
  %zext2 = zext i8 %7 to i32, !dbg !1821
  %add = add i32 %5, %zext2, !dbg !1820
  %trunc = trunc i32 %add to i16, !dbg !1820
  ret i16 %trunc, !dbg !1820

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1817
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.89, i64 11, ptr @.func.30, i64 10, i32 112) #5, !dbg !1817
  unreachable, !dbg !1817
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws128Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1822 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input7 = alloca %"char[]", align 8
  %return_value = alloca [4 x i128], align 16
  %taddr8 = alloca ptr, align 8
  %expr = alloca [4 x i128], align 16
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !1832
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1832
  br i1 %4, label %panic, label %checkok, !dbg !1832

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1833, !DIExpression(), !1834)
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !1835, !DIExpression(), !1836)
  %5 = load ptr, ptr %self, align 8, !dbg !1837
  %checknull = icmp eq ptr %5, null, !dbg !1837
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1837
  br i1 %6, label %panic1, label %checkok2, !dbg !1837

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !1837
  %8 = urem i64 %7, 16, !dbg !1837
  %9 = icmp ne i64 %8, 0, !dbg !1837
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !1837
  br i1 %10, label %panic3, label %checkok6, !dbg !1837

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input7, ptr align 8 %input, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1838, !DIExpression(), !1841)
  call void @llvm.memset.p0.i64(ptr align 16 %return_value, i8 0, i64 64, i1 false), !dbg !1841
  store ptr %return_value, ptr %taddr8, align 8
  %11 = load ptr, ptr %taddr8, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 64, 1
  %lo = load ptr, ptr %input7, align 8
  %ptradd9 = getelementptr inbounds i8, ptr %input7, i64 8
  %hi = load i64, ptr %ptradd9, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 64), !dbg !1843
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %expr, ptr align 16 %return_value, i32 64, i1 false)
  %checknull10 = icmp eq ptr %expr, null, !dbg !1844
  %14 = call i1 @llvm.expect.i1(i1 %checknull10, i1 false), !dbg !1844
  br i1 %14, label %panic11, label %checkok12, !dbg !1844

checkok12:                                        ; preds = %checkok6
  %15 = ptrtoint ptr %expr to i64, !dbg !1847
  %16 = urem i64 %15, 16, !dbg !1847
  %17 = icmp ne i64 %16, 0, !dbg !1847
  %18 = call i1 @llvm.expect.i1(i1 %17, i1 false), !dbg !1847
  br i1 %18, label %panic13, label %checkok20, !dbg !1847

checkok20:                                        ; preds = %checkok12
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %5, ptr align 16 %expr, i32 64, i1 false), !dbg !1847
  ret void, !dbg !1847

panic:                                            ; preds = %entry
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1834
  call void %19(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.16, i64 8, i32 17) #5, !dbg !1834
  unreachable, !dbg !1834

panic1:                                           ; preds = %checkok
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1837
  call void %20(ptr @.panic_msg.17, i64 45, ptr @.file.110, i64 12, ptr @.func.16, i64 8, i32 19) #5, !dbg !1837
  unreachable, !dbg !1837

panic3:                                           ; preds = %checkok2
  store i64 16, ptr %taddr, align 8
  %21 = insertvalue %any undef, ptr %taddr, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %23 = insertvalue %any undef, ptr %taddr4, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %22, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %24, ptr %ptradd5, align 16
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.110, i64 12, ptr @.func.16, i64 8, i32 19, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1837
  unreachable, !dbg !1837

panic11:                                          ; preds = %checkok6
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1847
  call void %26(ptr @.panic_msg.71, i64 53, ptr @.file.72, i64 10, ptr @.func.16, i64 8, i32 212) #5, !dbg !1847
  unreachable, !dbg !1847

panic13:                                          ; preds = %checkok12
  store i64 16, ptr %taddr14, align 8
  %27 = insertvalue %any undef, ptr %taddr14, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %16, ptr %taddr15, align 8
  %29 = insertvalue %any undef, ptr %taddr15, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %28, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %30, ptr %ptradd17, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.72, i64 10, ptr @.func.16, i64 8, i32 212, ptr byval(%"any[]") align 8 %indirectarg19) #5, !dbg !1847
  unreachable, !dbg !1847
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Msws128Random.next_int128(ptr %0) #0 comdat !dbg !1848 {
entry:
  %self = alloca ptr, align 8
  %s0 = alloca i128, align 16
  %self1 = alloca i128, align 16
  %shift = alloca i128, align 16
  %s1 = alloca i128, align 16
  %self13 = alloca i128, align 16
  %shift14 = alloca i128, align 16
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1851
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1851
  br i1 %2, label %panic, label %checkok, !dbg !1851

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1852, !DIExpression(), !1853)
    #dbg_declare(ptr %s0, !1854, !DIExpression(), !1855)
  %3 = load ptr, ptr %self, align 8, !dbg !1856
  %4 = load i128, ptr %3, align 16, !dbg !1856
  store i128 %4, ptr %s0, align 16, !dbg !1856
  %5 = load ptr, ptr %self, align 8, !dbg !1857
  %6 = load ptr, ptr %self, align 8, !dbg !1858
  %7 = load i128, ptr %6, align 16, !dbg !1858
  %8 = load ptr, ptr %self, align 8, !dbg !1859
  %9 = load i128, ptr %8, align 16, !dbg !1859
  %mul = mul i128 %7, %9, !dbg !1858
  %10 = load ptr, ptr %self, align 8, !dbg !1860
  %ptradd = getelementptr inbounds i8, ptr %10, i64 32, !dbg !1860
  %11 = load i128, ptr %ptradd, align 16, !dbg !1860
  %add = add i128 %mul, %11, !dbg !1858
  store i128 %add, ptr %5, align 16, !dbg !1858
  %12 = load ptr, ptr %self, align 8, !dbg !1861
  %13 = load ptr, ptr %self, align 8, !dbg !1862
  %14 = load i128, ptr %13, align 16
  store i128 %14, ptr %self1, align 16
  store i128 64, ptr %shift, align 16
  %15 = load i128, ptr %self1, align 16, !dbg !1863
  %16 = load i128, ptr %self1, align 16, !dbg !1865
  %17 = load i128, ptr %shift, align 16, !dbg !1866
  %18 = call i128 @llvm.fshr.i128(i128 %15, i128 %16, i128 %17), !dbg !1866
  store i128 %18, ptr %12, align 16, !dbg !1866
  %19 = load ptr, ptr %self, align 8, !dbg !1867
  %ptradd2 = getelementptr inbounds i8, ptr %19, i64 32, !dbg !1867
  %20 = load i128, ptr %ptradd2, align 16, !dbg !1867
  %add3 = add i128 %20, -129976298391535590297638237547755878347, !dbg !1867
  store i128 %add3, ptr %ptradd2, align 16, !dbg !1867
  %21 = load ptr, ptr %self, align 8, !dbg !1868
  %ptradd4 = getelementptr inbounds i8, ptr %21, i64 16, !dbg !1868
  %22 = load ptr, ptr %self, align 8, !dbg !1869
  %ptradd5 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !1869
  %23 = load i128, ptr %ptradd5, align 16, !dbg !1869
  %24 = load ptr, ptr %self, align 8, !dbg !1870
  %ptradd6 = getelementptr inbounds i8, ptr %24, i64 16, !dbg !1870
  %25 = load i128, ptr %ptradd6, align 16, !dbg !1870
  %mul7 = mul i128 %23, %25, !dbg !1869
  %26 = load ptr, ptr %self, align 8, !dbg !1871
  %ptradd8 = getelementptr inbounds i8, ptr %26, i64 48, !dbg !1871
  %27 = load i128, ptr %ptradd8, align 16, !dbg !1871
  %add9 = add i128 %mul7, %27, !dbg !1869
  store i128 %add9, ptr %ptradd4, align 16, !dbg !1869
    #dbg_declare(ptr %s1, !1872, !DIExpression(), !1873)
  %28 = load ptr, ptr %self, align 8, !dbg !1874
  %ptradd10 = getelementptr inbounds i8, ptr %28, i64 16, !dbg !1874
  %29 = load i128, ptr %ptradd10, align 16, !dbg !1874
  store i128 %29, ptr %s1, align 16, !dbg !1874
  %30 = load ptr, ptr %self, align 8, !dbg !1875
  %ptradd11 = getelementptr inbounds i8, ptr %30, i64 16, !dbg !1875
  %31 = load ptr, ptr %self, align 8, !dbg !1876
  %ptradd12 = getelementptr inbounds i8, ptr %31, i64 16, !dbg !1876
  %32 = load i128, ptr %ptradd12, align 16
  store i128 %32, ptr %self13, align 16
  store i128 64, ptr %shift14, align 16
  %33 = load i128, ptr %self13, align 16, !dbg !1877
  %34 = load i128, ptr %self13, align 16, !dbg !1879
  %35 = load i128, ptr %shift14, align 16, !dbg !1880
  %36 = call i128 @llvm.fshr.i128(i128 %33, i128 %34, i128 %35), !dbg !1880
  store i128 %36, ptr %ptradd11, align 16, !dbg !1880
  %37 = load ptr, ptr %self, align 8, !dbg !1881
  %ptradd15 = getelementptr inbounds i8, ptr %37, i64 48, !dbg !1881
  %38 = load i128, ptr %ptradd15, align 16, !dbg !1881
  %sub = sub i128 %38, -129976298391535590297638237547755878347, !dbg !1881
  store i128 %sub, ptr %ptradd15, align 16, !dbg !1881
  %39 = load i128, ptr %s0, align 16, !dbg !1882
  %40 = load i128, ptr %s1, align 16, !dbg !1883
  %add16 = add i128 %39, %40, !dbg !1882
  store i128 %add16, ptr %taddr, align 16
  %41 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %41

panic:                                            ; preds = %entry
  %42 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1853
  call void %42(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.28, i64 11, i32 23) #5, !dbg !1853
  unreachable, !dbg !1853
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws128Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1884 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i128, align 16
  %result = alloca i128, align 16
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %taddr19 = alloca ptr, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %varargslots33 = alloca [2 x %any], align 16
  %indirectarg36 = alloca %"any[]", align 8
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %varargslots42 = alloca [2 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg59 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !1885
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1885
  br i1 %4, label %panic, label %checkok, !dbg !1885

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1886, !DIExpression(), !1887)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !1888, !DIExpression(), !1889)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1890
  %5 = load i64, ptr %ptradd1, align 8, !dbg !1890
  %lt = icmp ult i64 0, %5, !dbg !1890
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1890

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1890
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.110, i64 12, ptr @.func.21, i64 10, i32 39) #5, !dbg !1890
  unreachable, !dbg !1890

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !1892, !DIExpression(), !1894)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !1895
  %7 = load i64, ptr %ptradd3, align 8, !dbg !1895
  store i64 %7, ptr %len, align 8, !dbg !1895
  br label %loop.cond, !dbg !1896

loop.cond:                                        ; preds = %checkok55, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !1897
  %lt4 = icmp ult i64 0, %8, !dbg !1897
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !1897

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1899, !DIExpression(), !1901)
  %9 = load ptr, ptr %self, align 8, !dbg !1902
  %10 = call { i64, i64 } @std.math.random.Msws128Random.next_int128(ptr %9), !dbg !1903
  store { i64, i64 } %10, ptr %result, align 16
  %11 = load i128, ptr %result, align 16
  store i128 %11, ptr %value, align 16
  %12 = load i64, ptr %len, align 8, !dbg !1904
  %le = icmp ule i64 %12, 16, !dbg !1904
  br i1 %le, label %if.then, label %if.exit, !dbg !1904

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %13 = load ptr, ptr %taddr, align 8
  %14 = load i64, ptr %len, align 8, !dbg !1905
  %add = add i64 0, %14, !dbg !1905
  %size = sub i64 %add, 0, !dbg !1905
  %15 = insertvalue %"char[]" undef, ptr %13, 0, !dbg !1905
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !1905
  %17 = load %"char[]", ptr %bytes2, align 8, !dbg !1907
  %18 = extractvalue %"char[]" %17, 0, !dbg !1907
  %19 = extractvalue %"char[]" %17, 1, !dbg !1908
  %gt = icmp ugt i64 0, %19, !dbg !1908
  %20 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1908
  br i1 %20, label %panic5, label %checkok9, !dbg !1908

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %19, 0, !dbg !1907
  %21 = insertvalue %"char[]" undef, ptr %18, 0, !dbg !1907
  %22 = insertvalue %"char[]" %21, i64 %size10, 1, !dbg !1907
  %23 = extractvalue %"char[]" %22, 0, !dbg !1907
  %24 = extractvalue %"char[]" %16, 0, !dbg !1907
  %25 = extractvalue %"char[]" %16, 1, !dbg !1907
  %26 = extractvalue %"char[]" %22, 1, !dbg !1907
  %neq = icmp ne i64 %26, %25, !dbg !1907
  %27 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1907
  br i1 %27, label %panic11, label %checkok18, !dbg !1907

checkok18:                                        ; preds = %checkok9
  %28 = mul i64 %25, 1, !dbg !1907
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %23, ptr align 1 %24, i64 %28, i1 false), !dbg !1907
  br label %expr_block.exit, !dbg !1909

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr19, align 8
  %29 = load ptr, ptr %taddr19, align 8
  %30 = insertvalue %"char[]" undef, ptr %29, 0
  %31 = insertvalue %"char[]" %30, i64 16, 1
  %32 = load %"char[]", ptr %bytes2, align 8, !dbg !1910
  %33 = extractvalue %"char[]" %32, 0, !dbg !1910
  %34 = extractvalue %"char[]" %32, 1, !dbg !1910
  %gt20 = icmp sgt i64 0, %34, !dbg !1910
  %35 = call i1 @llvm.expect.i1(i1 %gt20, i1 false), !dbg !1910
  br i1 %35, label %panic21, label %checkok28, !dbg !1910

checkok28:                                        ; preds = %if.exit
  %lt29 = icmp slt i64 %34, 16, !dbg !1910
  %36 = call i1 @llvm.expect.i1(i1 %lt29, i1 false), !dbg !1910
  br i1 %36, label %panic30, label %checkok37, !dbg !1910

checkok37:                                        ; preds = %checkok28
  %37 = insertvalue %"char[]" undef, ptr %33, 0, !dbg !1910
  %38 = insertvalue %"char[]" %37, i64 16, 1, !dbg !1910
  %39 = extractvalue %"char[]" %38, 0, !dbg !1910
  %40 = extractvalue %"char[]" %31, 0, !dbg !1910
  %41 = extractvalue %"char[]" %31, 1, !dbg !1910
  %42 = extractvalue %"char[]" %38, 1, !dbg !1910
  %neq38 = icmp ne i64 %42, %41, !dbg !1910
  %43 = call i1 @llvm.expect.i1(i1 %neq38, i1 false), !dbg !1910
  br i1 %43, label %panic39, label %checkok46, !dbg !1910

checkok46:                                        ; preds = %checkok37
  %44 = mul i64 %41, 1, !dbg !1910
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %39, ptr align 1 %40, i64 %44, i1 false), !dbg !1910
  %45 = load i64, ptr %len, align 8, !dbg !1911
  %sub = sub i64 %45, 16, !dbg !1911
  store i64 %sub, ptr %len, align 8, !dbg !1911
  %46 = load %"char[]", ptr %bytes2, align 8, !dbg !1912
  %47 = extractvalue %"char[]" %46, 0, !dbg !1912
  %48 = extractvalue %"char[]" %46, 1, !dbg !1913
  %gt47 = icmp ugt i64 16, %48, !dbg !1913
  %49 = call i1 @llvm.expect.i1(i1 %gt47, i1 false), !dbg !1913
  br i1 %49, label %panic48, label %checkok55, !dbg !1913

checkok55:                                        ; preds = %checkok46
  %size56 = sub i64 %48, 16, !dbg !1912
  %ptradd57 = getelementptr inbounds i8, ptr %47, i64 16, !dbg !1912
  %50 = insertvalue %"char[]" undef, ptr %ptradd57, 0, !dbg !1912
  %51 = insertvalue %"char[]" %50, i64 %size56, 1, !dbg !1912
  store %"char[]" %51, ptr %bytes2, align 8, !dbg !1912
  br label %loop.cond, !dbg !1912

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.111, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !1914
  %ptradd58 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1914
  %hi = load i64, ptr %ptradd58, align 8, !dbg !1914
  store %"any[]" zeroinitializer, ptr %indirectarg59, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.112, i64 12, ptr @.str.113, i64 24, i32 41, ptr byval(%"any[]") align 8 %indirectarg59), !dbg !1917
  unreachable, !dbg !1918

expr_block.exit:                                  ; preds = %checkok18
  ret void, !dbg !1918

panic:                                            ; preds = %entry
  %52 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1887
  call void %52(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.21, i64 10, i32 41) #5, !dbg !1887
  unreachable, !dbg !1887

panic5:                                           ; preds = %if.then
  store i64 %19, ptr %taddr6, align 8
  %53 = insertvalue %any undef, ptr %taddr6, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %55 = insertvalue %any undef, ptr %taddr7, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %54, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %56, ptr %ptradd8, align 16
  %57 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %57, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1907
  unreachable, !dbg !1907

panic11:                                          ; preds = %checkok9
  store i64 %26, ptr %taddr12, align 8
  %58 = insertvalue %any undef, ptr %taddr12, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr13, align 8
  %60 = insertvalue %any undef, ptr %taddr13, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %59, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %61, ptr %ptradd15, align 16
  %62 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %62, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg17) #5, !dbg !1907
  unreachable, !dbg !1907

panic21:                                          ; preds = %if.exit
  store i64 %34, ptr %taddr22, align 8
  %63 = insertvalue %any undef, ptr %taddr22, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr23, align 8
  %65 = insertvalue %any undef, ptr %taddr23, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %64, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %66, ptr %ptradd25, align 16
  %67 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %67, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg27) #5, !dbg !1910
  unreachable, !dbg !1910

panic30:                                          ; preds = %checkok28
  store i64 15, ptr %taddr31, align 8
  %68 = insertvalue %any undef, ptr %taddr31, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %34, ptr %taddr32, align 8
  %70 = insertvalue %any undef, ptr %taddr32, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %69, ptr %varargslots33, align 16
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots33, i64 16
  store %any %71, ptr %ptradd34, align 16
  %72 = insertvalue %"any[]" undef, ptr %varargslots33, 0
  %"$$temp35" = insertvalue %"any[]" %72, i64 2, 1
  store %"any[]" %"$$temp35", ptr %indirectarg36, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 60, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg36) #5, !dbg !1910
  unreachable, !dbg !1910

panic39:                                          ; preds = %checkok37
  store i64 %42, ptr %taddr40, align 8
  %73 = insertvalue %any undef, ptr %taddr40, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr41, align 8
  %75 = insertvalue %any undef, ptr %taddr41, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %74, ptr %varargslots42, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %76, ptr %ptradd43, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg45) #5, !dbg !1910
  unreachable, !dbg !1910

panic48:                                          ; preds = %checkok46
  store i64 %48, ptr %taddr49, align 8
  %78 = insertvalue %any undef, ptr %taddr49, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 16, ptr %taddr50, align 8
  %80 = insertvalue %any undef, ptr %taddr50, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %79, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %81, ptr %ptradd52, align 16
  %82 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %82, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg54) #5, !dbg !1912
  unreachable, !dbg !1912
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Msws128Random.next_long(ptr %0) #0 comdat !dbg !1919 {
entry:
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1922
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1922
  br i1 %2, label %panic, label %checkok, !dbg !1922

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1923, !DIExpression(), !1924)
  %3 = load ptr, ptr %self, align 8, !dbg !1925
  %4 = call { i64, i64 } @std.math.random.Msws128Random.next_int128(ptr %3), !dbg !1926
  store { i64, i64 } %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i64
  ret i64 %trunc

panic:                                            ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1924
  call void %6(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.19, i64 9, i32 42) #5, !dbg !1924
  unreachable, !dbg !1924
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Msws128Random.next_int(ptr %0) #0 comdat !dbg !1927 {
entry:
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1930
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1930
  br i1 %2, label %panic, label %checkok, !dbg !1930

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1931, !DIExpression(), !1932)
  %3 = load ptr, ptr %self, align 8, !dbg !1933
  %4 = call { i64, i64 } @std.math.random.Msws128Random.next_int128(ptr %3), !dbg !1934
  store { i64, i64 } %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i32
  ret i32 %trunc

panic:                                            ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1932
  call void %6(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.29, i64 8, i32 43) #5, !dbg !1932
  unreachable, !dbg !1932
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Msws128Random.next_short(ptr %0) #0 comdat !dbg !1935 {
entry:
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1938
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1938
  br i1 %2, label %panic, label %checkok, !dbg !1938

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1939, !DIExpression(), !1940)
  %3 = load ptr, ptr %self, align 8, !dbg !1941
  %4 = call { i64, i64 } @std.math.random.Msws128Random.next_int128(ptr %3), !dbg !1942
  store { i64, i64 } %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i16
  ret i16 %trunc

panic:                                            ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1940
  call void %6(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.30, i64 10, i32 44) #5, !dbg !1940
  unreachable, !dbg !1940
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Msws128Random.next_byte(ptr %0) #0 comdat !dbg !1943 {
entry:
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1946
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1946
  br i1 %2, label %panic, label %checkok, !dbg !1946

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1947, !DIExpression(), !1948)
  %3 = load ptr, ptr %self, align 8, !dbg !1949
  %4 = call { i64, i64 } @std.math.random.Msws128Random.next_int128(ptr %3), !dbg !1950
  store { i64, i64 } %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i8
  ret i8 %trunc

panic:                                            ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1948
  call void %6(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.31, i64 9, i32 45) #5, !dbg !1948
  unreachable, !dbg !1948
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws64Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1951 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input7 = alloca %"char[]", align 8
  %return_value = alloca [4 x i64], align 16
  %taddr8 = alloca ptr, align 8
  %expr = alloca [4 x i64], align 16
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !1961
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1961
  br i1 %4, label %panic, label %checkok, !dbg !1961

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1962, !DIExpression(), !1963)
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !1964, !DIExpression(), !1965)
  %5 = load ptr, ptr %self, align 8, !dbg !1966
  %checknull = icmp eq ptr %5, null, !dbg !1966
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1966
  br i1 %6, label %panic1, label %checkok2, !dbg !1966

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !1966
  %8 = urem i64 %7, 8, !dbg !1966
  %9 = icmp ne i64 %8, 0, !dbg !1966
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !1966
  br i1 %10, label %panic3, label %checkok6, !dbg !1966

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input7, ptr align 8 %input, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1967, !DIExpression(), !1969)
  call void @llvm.memset.p0.i64(ptr align 16 %return_value, i8 0, i64 32, i1 false), !dbg !1969
  store ptr %return_value, ptr %taddr8, align 8
  %11 = load ptr, ptr %taddr8, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 32, 1
  %lo = load ptr, ptr %input7, align 8
  %ptradd9 = getelementptr inbounds i8, ptr %input7, i64 8
  %hi = load i64, ptr %ptradd9, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 32), !dbg !1971
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %expr, ptr align 16 %return_value, i32 32, i1 false)
  %checknull10 = icmp eq ptr %expr, null, !dbg !1972
  %14 = call i1 @llvm.expect.i1(i1 %checknull10, i1 false), !dbg !1972
  br i1 %14, label %panic11, label %checkok12, !dbg !1972

checkok12:                                        ; preds = %checkok6
  %15 = ptrtoint ptr %expr to i64, !dbg !1975
  %16 = urem i64 %15, 8, !dbg !1975
  %17 = icmp ne i64 %16, 0, !dbg !1975
  %18 = call i1 @llvm.expect.i1(i1 %17, i1 false), !dbg !1975
  br i1 %18, label %panic13, label %checkok20, !dbg !1975

checkok20:                                        ; preds = %checkok12
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 8 %expr, i32 32, i1 false), !dbg !1975
  ret void, !dbg !1975

panic:                                            ; preds = %entry
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1963
  call void %19(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.16, i64 8, i32 55) #5, !dbg !1963
  unreachable, !dbg !1963

panic1:                                           ; preds = %checkok
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1966
  call void %20(ptr @.panic_msg.17, i64 45, ptr @.file.110, i64 12, ptr @.func.16, i64 8, i32 57) #5, !dbg !1966
  unreachable, !dbg !1966

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %21 = insertvalue %any undef, ptr %taddr, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %23 = insertvalue %any undef, ptr %taddr4, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %22, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %24, ptr %ptradd5, align 16
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.110, i64 12, ptr @.func.16, i64 8, i32 57, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1966
  unreachable, !dbg !1966

panic11:                                          ; preds = %checkok6
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1975
  call void %26(ptr @.panic_msg.71, i64 53, ptr @.file.72, i64 10, ptr @.func.16, i64 8, i32 212) #5, !dbg !1975
  unreachable, !dbg !1975

panic13:                                          ; preds = %checkok12
  store i64 8, ptr %taddr14, align 8
  %27 = insertvalue %any undef, ptr %taddr14, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %16, ptr %taddr15, align 8
  %29 = insertvalue %any undef, ptr %taddr15, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %28, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %30, ptr %ptradd17, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.72, i64 10, ptr @.func.16, i64 8, i32 212, ptr byval(%"any[]") align 8 %indirectarg19) #5, !dbg !1975
  unreachable, !dbg !1975
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Msws64Random.next_long(ptr %0) #0 comdat !dbg !1976 {
entry:
  %self = alloca ptr, align 8
  %s0 = alloca i64, align 8
  %self1 = alloca i64, align 8
  %shift = alloca i64, align 8
  %s1 = alloca i64, align 8
  %self13 = alloca i64, align 8
  %shift14 = alloca i64, align 8
  %1 = icmp eq ptr %0, null, !dbg !1979
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1979
  br i1 %2, label %panic, label %checkok, !dbg !1979

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1980, !DIExpression(), !1981)
    #dbg_declare(ptr %s0, !1982, !DIExpression(), !1983)
  %3 = load ptr, ptr %self, align 8, !dbg !1984
  %4 = load i64, ptr %3, align 8, !dbg !1984
  store i64 %4, ptr %s0, align 8, !dbg !1984
  %5 = load ptr, ptr %self, align 8, !dbg !1985
  %6 = load ptr, ptr %self, align 8, !dbg !1986
  %7 = load i64, ptr %6, align 8, !dbg !1986
  %8 = load ptr, ptr %self, align 8, !dbg !1987
  %9 = load i64, ptr %8, align 8, !dbg !1987
  %mul = mul i64 %7, %9, !dbg !1986
  %10 = load ptr, ptr %self, align 8, !dbg !1988
  %ptradd = getelementptr inbounds i8, ptr %10, i64 16, !dbg !1988
  %11 = load i64, ptr %ptradd, align 8, !dbg !1988
  %add = add i64 %mul, %11, !dbg !1986
  store i64 %add, ptr %5, align 8, !dbg !1986
  %12 = load ptr, ptr %self, align 8, !dbg !1989
  %13 = load ptr, ptr %self, align 8, !dbg !1990
  %14 = load i64, ptr %13, align 8
  store i64 %14, ptr %self1, align 8
  store i64 32, ptr %shift, align 8
  %15 = load i64, ptr %self1, align 8, !dbg !1991
  %16 = load i64, ptr %self1, align 8, !dbg !1993
  %17 = load i64, ptr %shift, align 8, !dbg !1994
  %18 = call i64 @llvm.fshr.i64(i64 %15, i64 %16, i64 %17), !dbg !1994
  store i64 %18, ptr %12, align 8, !dbg !1994
  %19 = load ptr, ptr %self, align 8, !dbg !1995
  %ptradd2 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !1995
  %20 = load i64, ptr %ptradd2, align 8, !dbg !1995
  %add3 = add i64 %20, -7046029254386353131, !dbg !1995
  store i64 %add3, ptr %ptradd2, align 8, !dbg !1995
  %21 = load ptr, ptr %self, align 8, !dbg !1996
  %ptradd4 = getelementptr inbounds i8, ptr %21, i64 8, !dbg !1996
  %22 = load ptr, ptr %self, align 8, !dbg !1997
  %ptradd5 = getelementptr inbounds i8, ptr %22, i64 8, !dbg !1997
  %23 = load i64, ptr %ptradd5, align 8, !dbg !1997
  %24 = load ptr, ptr %self, align 8, !dbg !1998
  %ptradd6 = getelementptr inbounds i8, ptr %24, i64 8, !dbg !1998
  %25 = load i64, ptr %ptradd6, align 8, !dbg !1998
  %mul7 = mul i64 %23, %25, !dbg !1997
  %26 = load ptr, ptr %self, align 8, !dbg !1999
  %ptradd8 = getelementptr inbounds i8, ptr %26, i64 24, !dbg !1999
  %27 = load i64, ptr %ptradd8, align 8, !dbg !1999
  %add9 = add i64 %mul7, %27, !dbg !1997
  store i64 %add9, ptr %ptradd4, align 8, !dbg !1997
    #dbg_declare(ptr %s1, !2000, !DIExpression(), !2001)
  %28 = load ptr, ptr %self, align 8, !dbg !2002
  %ptradd10 = getelementptr inbounds i8, ptr %28, i64 8, !dbg !2002
  %29 = load i64, ptr %ptradd10, align 8, !dbg !2002
  store i64 %29, ptr %s1, align 8, !dbg !2002
  %30 = load ptr, ptr %self, align 8, !dbg !2003
  %ptradd11 = getelementptr inbounds i8, ptr %30, i64 8, !dbg !2003
  %31 = load ptr, ptr %self, align 8, !dbg !2004
  %ptradd12 = getelementptr inbounds i8, ptr %31, i64 8, !dbg !2004
  %32 = load i64, ptr %ptradd12, align 8
  store i64 %32, ptr %self13, align 8
  store i64 32, ptr %shift14, align 8
  %33 = load i64, ptr %self13, align 8, !dbg !2005
  %34 = load i64, ptr %self13, align 8, !dbg !2007
  %35 = load i64, ptr %shift14, align 8, !dbg !2008
  %36 = call i64 @llvm.fshr.i64(i64 %33, i64 %34, i64 %35), !dbg !2008
  store i64 %36, ptr %ptradd11, align 8, !dbg !2008
  %37 = load ptr, ptr %self, align 8, !dbg !2009
  %ptradd15 = getelementptr inbounds i8, ptr %37, i64 24, !dbg !2009
  %38 = load i64, ptr %ptradd15, align 8, !dbg !2009
  %sub = sub i64 %38, -7046029254386353131, !dbg !2009
  store i64 %sub, ptr %ptradd15, align 8, !dbg !2009
  %39 = load i64, ptr %s0, align 8, !dbg !2010
  %40 = load i64, ptr %s1, align 8, !dbg !2011
  %add16 = add i64 %39, %40, !dbg !2010
  ret i64 %add16, !dbg !2010

panic:                                            ; preds = %entry
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1981
  call void %41(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.19, i64 9, i32 60) #5, !dbg !1981
  unreachable, !dbg !1981
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws64Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2012 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %taddr19 = alloca ptr, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %varargslots33 = alloca [2 x %any], align 16
  %indirectarg36 = alloca %"any[]", align 8
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %varargslots42 = alloca [2 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg59 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2013
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2013
  br i1 %4, label %panic, label %checkok, !dbg !2013

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2014, !DIExpression(), !2015)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !2016, !DIExpression(), !2017)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2018
  %5 = load i64, ptr %ptradd1, align 8, !dbg !2018
  %lt = icmp ult i64 0, %5, !dbg !2018
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2018

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2018
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.110, i64 12, ptr @.func.21, i64 10, i32 76) #5, !dbg !2018
  unreachable, !dbg !2018

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !2020, !DIExpression(), !2022)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !2023
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2023
  store i64 %7, ptr %len, align 8, !dbg !2023
  br label %loop.cond, !dbg !2024

loop.cond:                                        ; preds = %checkok55, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !2025
  %lt4 = icmp ult i64 0, %8, !dbg !2025
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !2025

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !2027, !DIExpression(), !2029)
  %9 = load ptr, ptr %self, align 8, !dbg !2030
  %10 = call i64 @std.math.random.Msws64Random.next_long(ptr %9), !dbg !2031
  store i64 %10, ptr %value, align 8, !dbg !2031
  %11 = load i64, ptr %len, align 8, !dbg !2032
  %le = icmp ule i64 %11, 8, !dbg !2032
  br i1 %le, label %if.then, label %if.exit, !dbg !2032

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !2033
  %add = add i64 0, %13, !dbg !2033
  %size = sub i64 %add, 0, !dbg !2033
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !2033
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !2033
  %16 = load %"char[]", ptr %bytes2, align 8, !dbg !2035
  %17 = extractvalue %"char[]" %16, 0, !dbg !2035
  %18 = extractvalue %"char[]" %16, 1, !dbg !2036
  %gt = icmp ugt i64 0, %18, !dbg !2036
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2036
  br i1 %19, label %panic5, label %checkok9, !dbg !2036

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %18, 0, !dbg !2035
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !2035
  %21 = insertvalue %"char[]" %20, i64 %size10, 1, !dbg !2035
  %22 = extractvalue %"char[]" %21, 0, !dbg !2035
  %23 = extractvalue %"char[]" %15, 0, !dbg !2035
  %24 = extractvalue %"char[]" %15, 1, !dbg !2035
  %25 = extractvalue %"char[]" %21, 1, !dbg !2035
  %neq = icmp ne i64 %25, %24, !dbg !2035
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2035
  br i1 %26, label %panic11, label %checkok18, !dbg !2035

checkok18:                                        ; preds = %checkok9
  %27 = mul i64 %24, 1, !dbg !2035
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !2035
  br label %expr_block.exit, !dbg !2037

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr19, align 8
  %28 = load ptr, ptr %taddr19, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 8, 1
  %31 = load %"char[]", ptr %bytes2, align 8, !dbg !2038
  %32 = extractvalue %"char[]" %31, 0, !dbg !2038
  %33 = extractvalue %"char[]" %31, 1, !dbg !2038
  %gt20 = icmp sgt i64 0, %33, !dbg !2038
  %34 = call i1 @llvm.expect.i1(i1 %gt20, i1 false), !dbg !2038
  br i1 %34, label %panic21, label %checkok28, !dbg !2038

checkok28:                                        ; preds = %if.exit
  %lt29 = icmp slt i64 %33, 8, !dbg !2038
  %35 = call i1 @llvm.expect.i1(i1 %lt29, i1 false), !dbg !2038
  br i1 %35, label %panic30, label %checkok37, !dbg !2038

checkok37:                                        ; preds = %checkok28
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !2038
  %37 = insertvalue %"char[]" %36, i64 8, 1, !dbg !2038
  %38 = extractvalue %"char[]" %37, 0, !dbg !2038
  %39 = extractvalue %"char[]" %30, 0, !dbg !2038
  %40 = extractvalue %"char[]" %30, 1, !dbg !2038
  %41 = extractvalue %"char[]" %37, 1, !dbg !2038
  %neq38 = icmp ne i64 %41, %40, !dbg !2038
  %42 = call i1 @llvm.expect.i1(i1 %neq38, i1 false), !dbg !2038
  br i1 %42, label %panic39, label %checkok46, !dbg !2038

checkok46:                                        ; preds = %checkok37
  %43 = mul i64 %40, 1, !dbg !2038
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !2038
  %44 = load i64, ptr %len, align 8, !dbg !2039
  %sub = sub i64 %44, 8, !dbg !2039
  store i64 %sub, ptr %len, align 8, !dbg !2039
  %45 = load %"char[]", ptr %bytes2, align 8, !dbg !2040
  %46 = extractvalue %"char[]" %45, 0, !dbg !2040
  %47 = extractvalue %"char[]" %45, 1, !dbg !2041
  %gt47 = icmp ugt i64 8, %47, !dbg !2041
  %48 = call i1 @llvm.expect.i1(i1 %gt47, i1 false), !dbg !2041
  br i1 %48, label %panic48, label %checkok55, !dbg !2041

checkok55:                                        ; preds = %checkok46
  %size56 = sub i64 %47, 8, !dbg !2040
  %ptradd57 = getelementptr inbounds i8, ptr %46, i64 8, !dbg !2040
  %49 = insertvalue %"char[]" undef, ptr %ptradd57, 0, !dbg !2040
  %50 = insertvalue %"char[]" %49, i64 %size56, 1, !dbg !2040
  store %"char[]" %50, ptr %bytes2, align 8, !dbg !2040
  br label %loop.cond, !dbg !2040

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.114, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !2042
  %ptradd58 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2042
  %hi = load i64, ptr %ptradd58, align 8, !dbg !2042
  store %"any[]" zeroinitializer, ptr %indirectarg59, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.115, i64 12, ptr @.str.116, i64 23, i32 78, ptr byval(%"any[]") align 8 %indirectarg59), !dbg !2045
  unreachable, !dbg !2046

expr_block.exit:                                  ; preds = %checkok18
  ret void, !dbg !2046

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2015
  call void %51(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.21, i64 10, i32 78) #5, !dbg !2015
  unreachable, !dbg !2015

panic5:                                           ; preds = %if.then
  store i64 %18, ptr %taddr6, align 8
  %52 = insertvalue %any undef, ptr %taddr6, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %54 = insertvalue %any undef, ptr %taddr7, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd8, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2035
  unreachable, !dbg !2035

panic11:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr12, align 8
  %57 = insertvalue %any undef, ptr %taddr12, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr13, align 8
  %59 = insertvalue %any undef, ptr %taddr13, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %60, ptr %ptradd15, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg17) #5, !dbg !2035
  unreachable, !dbg !2035

panic21:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr22, align 8
  %62 = insertvalue %any undef, ptr %taddr22, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr23, align 8
  %64 = insertvalue %any undef, ptr %taddr23, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %65, ptr %ptradd25, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg27) #5, !dbg !2038
  unreachable, !dbg !2038

panic30:                                          ; preds = %checkok28
  store i64 7, ptr %taddr31, align 8
  %67 = insertvalue %any undef, ptr %taddr31, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr32, align 8
  %69 = insertvalue %any undef, ptr %taddr32, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots33, align 16
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots33, i64 16
  store %any %70, ptr %ptradd34, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots33, 0
  %"$$temp35" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp35", ptr %indirectarg36, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 60, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg36) #5, !dbg !2038
  unreachable, !dbg !2038

panic39:                                          ; preds = %checkok37
  store i64 %41, ptr %taddr40, align 8
  %72 = insertvalue %any undef, ptr %taddr40, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr41, align 8
  %74 = insertvalue %any undef, ptr %taddr41, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots42, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %75, ptr %ptradd43, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg45) #5, !dbg !2038
  unreachable, !dbg !2038

panic48:                                          ; preds = %checkok46
  store i64 %47, ptr %taddr49, align 8
  %77 = insertvalue %any undef, ptr %taddr49, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr50, align 8
  %79 = insertvalue %any undef, ptr %taddr50, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %80, ptr %ptradd52, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg54) #5, !dbg !2040
  unreachable, !dbg !2040
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Msws64Random.next_int128(ptr %0) #0 comdat !dbg !2047 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2050
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2050
  br i1 %2, label %panic, label %checkok, !dbg !2050

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2051, !DIExpression(), !2052)
  %3 = load ptr, ptr %self, align 8, !dbg !2053
  %4 = call i64 @std.math.random.Msws64Random.next_long(ptr %3), !dbg !2055
  %zext = zext i64 %4 to i128, !dbg !2055
  %shl = shl i128 %zext, 64, !dbg !2055
  %5 = freeze i128 %shl, !dbg !2055
  %6 = load ptr, ptr %self, align 8, !dbg !2053
  %7 = call i64 @std.math.random.Msws64Random.next_long(ptr %6), !dbg !2056
  %zext1 = zext i64 %7 to i128, !dbg !2056
  %add = add i128 %5, %zext1, !dbg !2055
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2052
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.28, i64 11, i32 79) #5, !dbg !2052
  unreachable, !dbg !2052
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Msws64Random.next_int(ptr %0) #0 comdat !dbg !2057 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2060
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2060
  br i1 %2, label %panic, label %checkok, !dbg !2060

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2061, !DIExpression(), !2062)
  %3 = load ptr, ptr %self, align 8, !dbg !2063
  %4 = call i64 @std.math.random.Msws64Random.next_long(ptr %3), !dbg !2064
  %trunc = trunc i64 %4 to i32, !dbg !2064
  ret i32 %trunc, !dbg !2064

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2062
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.29, i64 8, i32 80) #5, !dbg !2062
  unreachable, !dbg !2062
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Msws64Random.next_short(ptr %0) #0 comdat !dbg !2065 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2068
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2068
  br i1 %2, label %panic, label %checkok, !dbg !2068

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2069, !DIExpression(), !2070)
  %3 = load ptr, ptr %self, align 8, !dbg !2071
  %4 = call i64 @std.math.random.Msws64Random.next_long(ptr %3), !dbg !2072
  %trunc = trunc i64 %4 to i16, !dbg !2072
  ret i16 %trunc, !dbg !2072

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2070
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.30, i64 10, i32 81) #5, !dbg !2070
  unreachable, !dbg !2070
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Msws64Random.next_byte(ptr %0) #0 comdat !dbg !2073 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2076
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2076
  br i1 %2, label %panic, label %checkok, !dbg !2076

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2077, !DIExpression(), !2078)
  %3 = load ptr, ptr %self, align 8, !dbg !2079
  %4 = call i64 @std.math.random.Msws64Random.next_long(ptr %3), !dbg !2080
  %trunc = trunc i64 %4 to i8, !dbg !2080
  ret i8 %trunc, !dbg !2080

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2078
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.31, i64 9, i32 82) #5, !dbg !2078
  unreachable, !dbg !2078
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws32Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2081 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input7 = alloca %"char[]", align 8
  %return_value = alloca [4 x i32], align 16
  %taddr11 = alloca ptr, align 8
  %expr = alloca [4 x i32], align 16
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %varargslots19 = alloca [2 x %any], align 16
  %indirectarg22 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2091
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2091
  br i1 %4, label %panic, label %checkok, !dbg !2091

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2092, !DIExpression(), !2093)
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !2094, !DIExpression(), !2095)
  %5 = load ptr, ptr %self, align 8, !dbg !2096
  %checknull = icmp eq ptr %5, null, !dbg !2096
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2096
  br i1 %6, label %panic1, label %checkok2, !dbg !2096

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !2096
  %8 = urem i64 %7, 4, !dbg !2096
  %9 = icmp ne i64 %8, 0, !dbg !2096
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !2096
  br i1 %10, label %panic3, label %checkok6, !dbg !2096

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input7, ptr align 8 %input, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !2097, !DIExpression(), !2100)
  store i32 0, ptr %return_value, align 4, !dbg !2100
  %ptradd8 = getelementptr inbounds i8, ptr %return_value, i64 4, !dbg !2100
  store i32 0, ptr %ptradd8, align 4, !dbg !2100
  %ptradd9 = getelementptr inbounds i8, ptr %return_value, i64 8, !dbg !2100
  store i32 0, ptr %ptradd9, align 4, !dbg !2100
  %ptradd10 = getelementptr inbounds i8, ptr %return_value, i64 12, !dbg !2100
  store i32 0, ptr %ptradd10, align 4, !dbg !2100
  store ptr %return_value, ptr %taddr11, align 8
  %11 = load ptr, ptr %taddr11, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 16, 1
  %lo = load ptr, ptr %input7, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %input7, i64 8
  %hi = load i64, ptr %ptradd12, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 16), !dbg !2102
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %expr, ptr align 16 %return_value, i32 16, i1 false)
  %checknull13 = icmp eq ptr %expr, null, !dbg !2103
  %14 = call i1 @llvm.expect.i1(i1 %checknull13, i1 false), !dbg !2103
  br i1 %14, label %panic14, label %checkok15, !dbg !2103

checkok15:                                        ; preds = %checkok6
  %15 = ptrtoint ptr %expr to i64, !dbg !2106
  %16 = urem i64 %15, 4, !dbg !2106
  %17 = icmp ne i64 %16, 0, !dbg !2106
  %18 = call i1 @llvm.expect.i1(i1 %17, i1 false), !dbg !2106
  br i1 %18, label %panic16, label %checkok23, !dbg !2106

checkok23:                                        ; preds = %checkok15
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %5, ptr align 4 %expr, i32 16, i1 false), !dbg !2106
  ret void, !dbg !2106

panic:                                            ; preds = %entry
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2093
  call void %19(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.16, i64 8, i32 91) #5, !dbg !2093
  unreachable, !dbg !2093

panic1:                                           ; preds = %checkok
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2096
  call void %20(ptr @.panic_msg.17, i64 45, ptr @.file.110, i64 12, ptr @.func.16, i64 8, i32 93) #5, !dbg !2096
  unreachable, !dbg !2096

panic3:                                           ; preds = %checkok2
  store i64 4, ptr %taddr, align 8
  %21 = insertvalue %any undef, ptr %taddr, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %23 = insertvalue %any undef, ptr %taddr4, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %22, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %24, ptr %ptradd5, align 16
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.110, i64 12, ptr @.func.16, i64 8, i32 93, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2096
  unreachable, !dbg !2096

panic14:                                          ; preds = %checkok6
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2106
  call void %26(ptr @.panic_msg.71, i64 53, ptr @.file.72, i64 10, ptr @.func.16, i64 8, i32 212) #5, !dbg !2106
  unreachable, !dbg !2106

panic16:                                          ; preds = %checkok15
  store i64 4, ptr %taddr17, align 8
  %27 = insertvalue %any undef, ptr %taddr17, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %16, ptr %taddr18, align 8
  %29 = insertvalue %any undef, ptr %taddr18, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %28, ptr %varargslots19, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots19, i64 16
  store %any %30, ptr %ptradd20, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots19, 0
  %"$$temp21" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp21", ptr %indirectarg22, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.72, i64 10, ptr @.func.16, i64 8, i32 212, ptr byval(%"any[]") align 8 %indirectarg22) #5, !dbg !2106
  unreachable, !dbg !2106
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Msws32Random.next_int(ptr %0) #0 comdat !dbg !2107 {
entry:
  %self = alloca ptr, align 8
  %s0 = alloca i32, align 4
  %self1 = alloca i32, align 4
  %shift = alloca i32, align 4
  %s1 = alloca i32, align 4
  %self13 = alloca i32, align 4
  %shift14 = alloca i32, align 4
  %1 = icmp eq ptr %0, null, !dbg !2110
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2110
  br i1 %2, label %panic, label %checkok, !dbg !2110

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2111, !DIExpression(), !2112)
    #dbg_declare(ptr %s0, !2113, !DIExpression(), !2114)
  %3 = load ptr, ptr %self, align 8, !dbg !2115
  %4 = load i32, ptr %3, align 4, !dbg !2115
  store i32 %4, ptr %s0, align 4, !dbg !2115
  %5 = load ptr, ptr %self, align 8, !dbg !2116
  %6 = load ptr, ptr %self, align 8, !dbg !2117
  %7 = load i32, ptr %6, align 4, !dbg !2117
  %8 = load ptr, ptr %self, align 8, !dbg !2118
  %9 = load i32, ptr %8, align 4, !dbg !2118
  %mul = mul i32 %7, %9, !dbg !2117
  %10 = load ptr, ptr %self, align 8, !dbg !2119
  %ptradd = getelementptr inbounds i8, ptr %10, i64 8, !dbg !2119
  %11 = load i32, ptr %ptradd, align 4, !dbg !2119
  %add = add i32 %mul, %11, !dbg !2117
  store i32 %add, ptr %5, align 4, !dbg !2117
  %12 = load ptr, ptr %self, align 8, !dbg !2120
  %13 = load ptr, ptr %self, align 8, !dbg !2121
  %14 = load i32, ptr %13, align 4
  store i32 %14, ptr %self1, align 4
  store i32 16, ptr %shift, align 4
  %15 = load i32, ptr %self1, align 4, !dbg !2122
  %16 = load i32, ptr %self1, align 4, !dbg !2124
  %17 = load i32, ptr %shift, align 4, !dbg !2125
  %18 = call i32 @llvm.fshr.i32(i32 %15, i32 %16, i32 %17), !dbg !2125
  store i32 %18, ptr %12, align 4, !dbg !2125
  %19 = load ptr, ptr %self, align 8, !dbg !2126
  %ptradd2 = getelementptr inbounds i8, ptr %19, i64 8, !dbg !2126
  %20 = load i32, ptr %ptradd2, align 4, !dbg !2126
  %add3 = add i32 %20, -1640531527, !dbg !2126
  store i32 %add3, ptr %ptradd2, align 4, !dbg !2126
  %21 = load ptr, ptr %self, align 8, !dbg !2127
  %ptradd4 = getelementptr inbounds i8, ptr %21, i64 4, !dbg !2127
  %22 = load ptr, ptr %self, align 8, !dbg !2128
  %ptradd5 = getelementptr inbounds i8, ptr %22, i64 4, !dbg !2128
  %23 = load i32, ptr %ptradd5, align 4, !dbg !2128
  %24 = load ptr, ptr %self, align 8, !dbg !2129
  %ptradd6 = getelementptr inbounds i8, ptr %24, i64 4, !dbg !2129
  %25 = load i32, ptr %ptradd6, align 4, !dbg !2129
  %mul7 = mul i32 %23, %25, !dbg !2128
  %26 = load ptr, ptr %self, align 8, !dbg !2130
  %ptradd8 = getelementptr inbounds i8, ptr %26, i64 12, !dbg !2130
  %27 = load i32, ptr %ptradd8, align 4, !dbg !2130
  %add9 = add i32 %mul7, %27, !dbg !2128
  store i32 %add9, ptr %ptradd4, align 4, !dbg !2128
    #dbg_declare(ptr %s1, !2131, !DIExpression(), !2132)
  %28 = load ptr, ptr %self, align 8, !dbg !2133
  %ptradd10 = getelementptr inbounds i8, ptr %28, i64 4, !dbg !2133
  %29 = load i32, ptr %ptradd10, align 4, !dbg !2133
  store i32 %29, ptr %s1, align 4, !dbg !2133
  %30 = load ptr, ptr %self, align 8, !dbg !2134
  %ptradd11 = getelementptr inbounds i8, ptr %30, i64 4, !dbg !2134
  %31 = load ptr, ptr %self, align 8, !dbg !2135
  %ptradd12 = getelementptr inbounds i8, ptr %31, i64 4, !dbg !2135
  %32 = load i32, ptr %ptradd12, align 4
  store i32 %32, ptr %self13, align 4
  store i32 16, ptr %shift14, align 4
  %33 = load i32, ptr %self13, align 4, !dbg !2136
  %34 = load i32, ptr %self13, align 4, !dbg !2138
  %35 = load i32, ptr %shift14, align 4, !dbg !2139
  %36 = call i32 @llvm.fshr.i32(i32 %33, i32 %34, i32 %35), !dbg !2139
  store i32 %36, ptr %ptradd11, align 4, !dbg !2139
  %37 = load ptr, ptr %self, align 8, !dbg !2140
  %ptradd15 = getelementptr inbounds i8, ptr %37, i64 12, !dbg !2140
  %38 = load i32, ptr %ptradd15, align 4, !dbg !2140
  %sub = sub i32 %38, -1640531527, !dbg !2140
  store i32 %sub, ptr %ptradd15, align 4, !dbg !2140
  %39 = load i32, ptr %s0, align 4, !dbg !2141
  %40 = load i32, ptr %s1, align 4, !dbg !2142
  %add16 = add i32 %39, %40, !dbg !2141
  ret i32 %add16, !dbg !2141

panic:                                            ; preds = %entry
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2112
  call void %41(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.29, i64 8, i32 97) #5, !dbg !2112
  unreachable, !dbg !2112
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws32Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2143 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %taddr19 = alloca ptr, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %varargslots33 = alloca [2 x %any], align 16
  %indirectarg36 = alloca %"any[]", align 8
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %varargslots42 = alloca [2 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg59 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2144
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2144
  br i1 %4, label %panic, label %checkok, !dbg !2144

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2145, !DIExpression(), !2146)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !2147, !DIExpression(), !2148)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2149
  %5 = load i64, ptr %ptradd1, align 8, !dbg !2149
  %lt = icmp ult i64 0, %5, !dbg !2149
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2149

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2149
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.110, i64 12, ptr @.func.21, i64 10, i32 113) #5, !dbg !2149
  unreachable, !dbg !2149

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !2151, !DIExpression(), !2153)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !2154
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2154
  store i64 %7, ptr %len, align 8, !dbg !2154
  br label %loop.cond, !dbg !2155

loop.cond:                                        ; preds = %checkok55, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !2156
  %lt4 = icmp ult i64 0, %8, !dbg !2156
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !2156

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !2158, !DIExpression(), !2160)
  %9 = load ptr, ptr %self, align 8, !dbg !2161
  %10 = call i32 @std.math.random.Msws32Random.next_int(ptr %9), !dbg !2162
  store i32 %10, ptr %value, align 4, !dbg !2162
  %11 = load i64, ptr %len, align 8, !dbg !2163
  %le = icmp ule i64 %11, 4, !dbg !2163
  br i1 %le, label %if.then, label %if.exit, !dbg !2163

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !2164
  %add = add i64 0, %13, !dbg !2164
  %size = sub i64 %add, 0, !dbg !2164
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !2164
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !2164
  %16 = load %"char[]", ptr %bytes2, align 8, !dbg !2166
  %17 = extractvalue %"char[]" %16, 0, !dbg !2166
  %18 = extractvalue %"char[]" %16, 1, !dbg !2167
  %gt = icmp ugt i64 0, %18, !dbg !2167
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2167
  br i1 %19, label %panic5, label %checkok9, !dbg !2167

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %18, 0, !dbg !2166
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !2166
  %21 = insertvalue %"char[]" %20, i64 %size10, 1, !dbg !2166
  %22 = extractvalue %"char[]" %21, 0, !dbg !2166
  %23 = extractvalue %"char[]" %15, 0, !dbg !2166
  %24 = extractvalue %"char[]" %15, 1, !dbg !2166
  %25 = extractvalue %"char[]" %21, 1, !dbg !2166
  %neq = icmp ne i64 %25, %24, !dbg !2166
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2166
  br i1 %26, label %panic11, label %checkok18, !dbg !2166

checkok18:                                        ; preds = %checkok9
  %27 = mul i64 %24, 1, !dbg !2166
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !2166
  br label %expr_block.exit, !dbg !2168

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr19, align 8
  %28 = load ptr, ptr %taddr19, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 4, 1
  %31 = load %"char[]", ptr %bytes2, align 8, !dbg !2169
  %32 = extractvalue %"char[]" %31, 0, !dbg !2169
  %33 = extractvalue %"char[]" %31, 1, !dbg !2169
  %gt20 = icmp sgt i64 0, %33, !dbg !2169
  %34 = call i1 @llvm.expect.i1(i1 %gt20, i1 false), !dbg !2169
  br i1 %34, label %panic21, label %checkok28, !dbg !2169

checkok28:                                        ; preds = %if.exit
  %lt29 = icmp slt i64 %33, 4, !dbg !2169
  %35 = call i1 @llvm.expect.i1(i1 %lt29, i1 false), !dbg !2169
  br i1 %35, label %panic30, label %checkok37, !dbg !2169

checkok37:                                        ; preds = %checkok28
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !2169
  %37 = insertvalue %"char[]" %36, i64 4, 1, !dbg !2169
  %38 = extractvalue %"char[]" %37, 0, !dbg !2169
  %39 = extractvalue %"char[]" %30, 0, !dbg !2169
  %40 = extractvalue %"char[]" %30, 1, !dbg !2169
  %41 = extractvalue %"char[]" %37, 1, !dbg !2169
  %neq38 = icmp ne i64 %41, %40, !dbg !2169
  %42 = call i1 @llvm.expect.i1(i1 %neq38, i1 false), !dbg !2169
  br i1 %42, label %panic39, label %checkok46, !dbg !2169

checkok46:                                        ; preds = %checkok37
  %43 = mul i64 %40, 1, !dbg !2169
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !2169
  %44 = load i64, ptr %len, align 8, !dbg !2170
  %sub = sub i64 %44, 4, !dbg !2170
  store i64 %sub, ptr %len, align 8, !dbg !2170
  %45 = load %"char[]", ptr %bytes2, align 8, !dbg !2171
  %46 = extractvalue %"char[]" %45, 0, !dbg !2171
  %47 = extractvalue %"char[]" %45, 1, !dbg !2172
  %gt47 = icmp ugt i64 4, %47, !dbg !2172
  %48 = call i1 @llvm.expect.i1(i1 %gt47, i1 false), !dbg !2172
  br i1 %48, label %panic48, label %checkok55, !dbg !2172

checkok55:                                        ; preds = %checkok46
  %size56 = sub i64 %47, 4, !dbg !2171
  %ptradd57 = getelementptr inbounds i8, ptr %46, i64 4, !dbg !2171
  %49 = insertvalue %"char[]" undef, ptr %ptradd57, 0, !dbg !2171
  %50 = insertvalue %"char[]" %49, i64 %size56, 1, !dbg !2171
  store %"char[]" %50, ptr %bytes2, align 8, !dbg !2171
  br label %loop.cond, !dbg !2171

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.117, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !2173
  %ptradd58 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2173
  %hi = load i64, ptr %ptradd58, align 8, !dbg !2173
  store %"any[]" zeroinitializer, ptr %indirectarg59, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.118, i64 12, ptr @.str.119, i64 23, i32 115, ptr byval(%"any[]") align 8 %indirectarg59), !dbg !2176
  unreachable, !dbg !2177

expr_block.exit:                                  ; preds = %checkok18
  ret void, !dbg !2177

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2146
  call void %51(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.21, i64 10, i32 115) #5, !dbg !2146
  unreachable, !dbg !2146

panic5:                                           ; preds = %if.then
  store i64 %18, ptr %taddr6, align 8
  %52 = insertvalue %any undef, ptr %taddr6, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %54 = insertvalue %any undef, ptr %taddr7, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd8, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2166
  unreachable, !dbg !2166

panic11:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr12, align 8
  %57 = insertvalue %any undef, ptr %taddr12, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr13, align 8
  %59 = insertvalue %any undef, ptr %taddr13, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %60, ptr %ptradd15, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg17) #5, !dbg !2166
  unreachable, !dbg !2166

panic21:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr22, align 8
  %62 = insertvalue %any undef, ptr %taddr22, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr23, align 8
  %64 = insertvalue %any undef, ptr %taddr23, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %65, ptr %ptradd25, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg27) #5, !dbg !2169
  unreachable, !dbg !2169

panic30:                                          ; preds = %checkok28
  store i64 3, ptr %taddr31, align 8
  %67 = insertvalue %any undef, ptr %taddr31, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr32, align 8
  %69 = insertvalue %any undef, ptr %taddr32, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots33, align 16
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots33, i64 16
  store %any %70, ptr %ptradd34, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots33, 0
  %"$$temp35" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp35", ptr %indirectarg36, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 60, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg36) #5, !dbg !2169
  unreachable, !dbg !2169

panic39:                                          ; preds = %checkok37
  store i64 %41, ptr %taddr40, align 8
  %72 = insertvalue %any undef, ptr %taddr40, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr41, align 8
  %74 = insertvalue %any undef, ptr %taddr41, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots42, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %75, ptr %ptradd43, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg45) #5, !dbg !2169
  unreachable, !dbg !2169

panic48:                                          ; preds = %checkok46
  store i64 %47, ptr %taddr49, align 8
  %77 = insertvalue %any undef, ptr %taddr49, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr50, align 8
  %79 = insertvalue %any undef, ptr %taddr50, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %80, ptr %ptradd52, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg54) #5, !dbg !2171
  unreachable, !dbg !2171
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Msws32Random.next_int128(ptr %0) #0 comdat !dbg !2178 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2181
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2181
  br i1 %2, label %panic, label %checkok, !dbg !2181

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2182, !DIExpression(), !2183)
  %3 = load ptr, ptr %self, align 8, !dbg !2184
  %4 = call i64 @std.math.random.Msws32Random.next_long(ptr %3), !dbg !2186
  %zext = zext i64 %4 to i128, !dbg !2186
  %shl = shl i128 %zext, 64, !dbg !2186
  %5 = freeze i128 %shl, !dbg !2186
  %6 = load ptr, ptr %self, align 8, !dbg !2184
  %7 = call i64 @std.math.random.Msws32Random.next_long(ptr %6), !dbg !2187
  %zext1 = zext i64 %7 to i128, !dbg !2187
  %add = add i128 %5, %zext1, !dbg !2186
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2183
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.28, i64 11, i32 116) #5, !dbg !2183
  unreachable, !dbg !2183
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Msws32Random.next_long(ptr %0) #0 comdat !dbg !2188 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2191
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2191
  br i1 %2, label %panic, label %checkok, !dbg !2191

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2192, !DIExpression(), !2193)
  %3 = load ptr, ptr %self, align 8, !dbg !2194
  %4 = call i32 @std.math.random.Msws32Random.next_int(ptr %3), !dbg !2196
  %zext = zext i32 %4 to i64, !dbg !2196
  %shl = shl i64 %zext, 32, !dbg !2196
  %5 = freeze i64 %shl, !dbg !2196
  %6 = load ptr, ptr %self, align 8, !dbg !2194
  %7 = call i32 @std.math.random.Msws32Random.next_int(ptr %6), !dbg !2197
  %zext1 = zext i32 %7 to i64, !dbg !2197
  %add = add i64 %5, %zext1, !dbg !2196
  ret i64 %add, !dbg !2196

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2193
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.19, i64 9, i32 117) #5, !dbg !2193
  unreachable, !dbg !2193
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Msws32Random.next_short(ptr %0) #0 comdat !dbg !2198 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2201
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2201
  br i1 %2, label %panic, label %checkok, !dbg !2201

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2202, !DIExpression(), !2203)
  %3 = load ptr, ptr %self, align 8, !dbg !2204
  %4 = call i32 @std.math.random.Msws32Random.next_int(ptr %3), !dbg !2205
  %trunc = trunc i32 %4 to i16, !dbg !2205
  ret i16 %trunc, !dbg !2205

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2203
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.30, i64 10, i32 118) #5, !dbg !2203
  unreachable, !dbg !2203
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Msws32Random.next_byte(ptr %0) #0 comdat !dbg !2206 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2209
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2209
  br i1 %2, label %panic, label %checkok, !dbg !2209

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2210, !DIExpression(), !2211)
  %3 = load ptr, ptr %self, align 8, !dbg !2212
  %4 = call i32 @std.math.random.Msws32Random.next_int(ptr %3), !dbg !2213
  %trunc = trunc i32 %4 to i8, !dbg !2213
  ret i8 %trunc, !dbg !2213

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2211
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.31, i64 9, i32 119) #5, !dbg !2211
  unreachable, !dbg !2211
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws16Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2214 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input7 = alloca %"char[]", align 8
  %return_value = alloca [4 x i16], align 2
  %taddr11 = alloca ptr, align 8
  %expr = alloca [4 x i16], align 2
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %varargslots19 = alloca [2 x %any], align 16
  %indirectarg22 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2224
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2224
  br i1 %4, label %panic, label %checkok, !dbg !2224

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2225, !DIExpression(), !2226)
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !2227, !DIExpression(), !2228)
  %5 = load ptr, ptr %self, align 8, !dbg !2229
  %checknull = icmp eq ptr %5, null, !dbg !2229
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2229
  br i1 %6, label %panic1, label %checkok2, !dbg !2229

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !2229
  %8 = urem i64 %7, 2, !dbg !2229
  %9 = icmp ne i64 %8, 0, !dbg !2229
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !2229
  br i1 %10, label %panic3, label %checkok6, !dbg !2229

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input7, ptr align 8 %input, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !2230, !DIExpression(), !2233)
  store i16 0, ptr %return_value, align 2, !dbg !2233
  %ptradd8 = getelementptr inbounds i8, ptr %return_value, i64 2, !dbg !2233
  store i16 0, ptr %ptradd8, align 2, !dbg !2233
  %ptradd9 = getelementptr inbounds i8, ptr %return_value, i64 4, !dbg !2233
  store i16 0, ptr %ptradd9, align 2, !dbg !2233
  %ptradd10 = getelementptr inbounds i8, ptr %return_value, i64 6, !dbg !2233
  store i16 0, ptr %ptradd10, align 2, !dbg !2233
  store ptr %return_value, ptr %taddr11, align 8
  %11 = load ptr, ptr %taddr11, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 8, 1
  %lo = load ptr, ptr %input7, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %input7, i64 8
  %hi = load i64, ptr %ptradd12, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 8), !dbg !2235
  call void @llvm.memcpy.p0.p0.i32(ptr align 2 %expr, ptr align 2 %return_value, i32 8, i1 false)
  %checknull13 = icmp eq ptr %expr, null, !dbg !2236
  %14 = call i1 @llvm.expect.i1(i1 %checknull13, i1 false), !dbg !2236
  br i1 %14, label %panic14, label %checkok15, !dbg !2236

checkok15:                                        ; preds = %checkok6
  %15 = ptrtoint ptr %expr to i64, !dbg !2239
  %16 = urem i64 %15, 2, !dbg !2239
  %17 = icmp ne i64 %16, 0, !dbg !2239
  %18 = call i1 @llvm.expect.i1(i1 %17, i1 false), !dbg !2239
  br i1 %18, label %panic16, label %checkok23, !dbg !2239

checkok23:                                        ; preds = %checkok15
  call void @llvm.memcpy.p0.p0.i32(ptr align 2 %5, ptr align 2 %expr, i32 8, i1 false), !dbg !2239
  ret void, !dbg !2239

panic:                                            ; preds = %entry
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2226
  call void %19(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.16, i64 8, i32 129) #5, !dbg !2226
  unreachable, !dbg !2226

panic1:                                           ; preds = %checkok
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2229
  call void %20(ptr @.panic_msg.17, i64 45, ptr @.file.110, i64 12, ptr @.func.16, i64 8, i32 131) #5, !dbg !2229
  unreachable, !dbg !2229

panic3:                                           ; preds = %checkok2
  store i64 2, ptr %taddr, align 8
  %21 = insertvalue %any undef, ptr %taddr, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %23 = insertvalue %any undef, ptr %taddr4, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %22, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %24, ptr %ptradd5, align 16
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.110, i64 12, ptr @.func.16, i64 8, i32 131, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2229
  unreachable, !dbg !2229

panic14:                                          ; preds = %checkok6
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2239
  call void %26(ptr @.panic_msg.71, i64 53, ptr @.file.72, i64 10, ptr @.func.16, i64 8, i32 212) #5, !dbg !2239
  unreachable, !dbg !2239

panic16:                                          ; preds = %checkok15
  store i64 2, ptr %taddr17, align 8
  %27 = insertvalue %any undef, ptr %taddr17, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %16, ptr %taddr18, align 8
  %29 = insertvalue %any undef, ptr %taddr18, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %28, ptr %varargslots19, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots19, i64 16
  store %any %30, ptr %ptradd20, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots19, 0
  %"$$temp21" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp21", ptr %indirectarg22, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.72, i64 10, ptr @.func.16, i64 8, i32 212, ptr byval(%"any[]") align 8 %indirectarg22) #5, !dbg !2239
  unreachable, !dbg !2239
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Msws16Random.next_short(ptr %0) #0 comdat !dbg !2240 {
entry:
  %self = alloca ptr, align 8
  %s0 = alloca i16, align 2
  %self3 = alloca i16, align 2
  %shift = alloca i16, align 2
  %s1 = alloca i16, align 2
  %self19 = alloca i16, align 2
  %shift20 = alloca i16, align 2
  %1 = icmp eq ptr %0, null, !dbg !2243
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2243
  br i1 %2, label %panic, label %checkok, !dbg !2243

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2244, !DIExpression(), !2245)
    #dbg_declare(ptr %s0, !2246, !DIExpression(), !2247)
  %3 = load ptr, ptr %self, align 8, !dbg !2248
  %4 = load i16, ptr %3, align 2, !dbg !2248
  store i16 %4, ptr %s0, align 2, !dbg !2248
  %5 = load ptr, ptr %self, align 8, !dbg !2249
  %6 = load ptr, ptr %self, align 8, !dbg !2250
  %7 = load i16, ptr %6, align 2, !dbg !2250
  %zext = zext i16 %7 to i32, !dbg !2250
  %8 = load ptr, ptr %self, align 8, !dbg !2251
  %9 = load i16, ptr %8, align 2, !dbg !2251
  %zext1 = zext i16 %9 to i32, !dbg !2251
  %mul = mul i32 %zext, %zext1, !dbg !2250
  %10 = load ptr, ptr %self, align 8, !dbg !2252
  %ptradd = getelementptr inbounds i8, ptr %10, i64 4, !dbg !2252
  %11 = load i16, ptr %ptradd, align 2, !dbg !2252
  %zext2 = zext i16 %11 to i32, !dbg !2252
  %add = add i32 %mul, %zext2, !dbg !2250
  %trunc = trunc i32 %add to i16, !dbg !2250
  store i16 %trunc, ptr %5, align 2, !dbg !2250
  %12 = load ptr, ptr %self, align 8, !dbg !2253
  %13 = load ptr, ptr %self, align 8, !dbg !2254
  %14 = load i16, ptr %13, align 2
  store i16 %14, ptr %self3, align 2
  store i16 8, ptr %shift, align 2
  %15 = load i16, ptr %self3, align 2, !dbg !2255
  %16 = load i16, ptr %self3, align 2, !dbg !2257
  %17 = load i16, ptr %shift, align 2, !dbg !2258
  %18 = call i16 @llvm.fshr.i16(i16 %15, i16 %16, i16 %17), !dbg !2258
  store i16 %18, ptr %12, align 2, !dbg !2258
  %19 = load ptr, ptr %self, align 8, !dbg !2259
  %ptradd4 = getelementptr inbounds i8, ptr %19, i64 4, !dbg !2259
  %20 = load i16, ptr %ptradd4, align 2, !dbg !2259
  %add5 = add i16 %20, -25033, !dbg !2259
  store i16 %add5, ptr %ptradd4, align 2, !dbg !2259
  %21 = load ptr, ptr %self, align 8, !dbg !2260
  %ptradd6 = getelementptr inbounds i8, ptr %21, i64 2, !dbg !2260
  %22 = load ptr, ptr %self, align 8, !dbg !2261
  %ptradd7 = getelementptr inbounds i8, ptr %22, i64 2, !dbg !2261
  %23 = load i16, ptr %ptradd7, align 2, !dbg !2261
  %zext8 = zext i16 %23 to i32, !dbg !2261
  %24 = load ptr, ptr %self, align 8, !dbg !2262
  %ptradd9 = getelementptr inbounds i8, ptr %24, i64 2, !dbg !2262
  %25 = load i16, ptr %ptradd9, align 2, !dbg !2262
  %zext10 = zext i16 %25 to i32, !dbg !2262
  %mul11 = mul i32 %zext8, %zext10, !dbg !2261
  %26 = load ptr, ptr %self, align 8, !dbg !2263
  %ptradd12 = getelementptr inbounds i8, ptr %26, i64 6, !dbg !2263
  %27 = load i16, ptr %ptradd12, align 2, !dbg !2263
  %zext13 = zext i16 %27 to i32, !dbg !2263
  %add14 = add i32 %mul11, %zext13, !dbg !2261
  %trunc15 = trunc i32 %add14 to i16, !dbg !2261
  store i16 %trunc15, ptr %ptradd6, align 2, !dbg !2261
    #dbg_declare(ptr %s1, !2264, !DIExpression(), !2265)
  %28 = load ptr, ptr %self, align 8, !dbg !2266
  %ptradd16 = getelementptr inbounds i8, ptr %28, i64 2, !dbg !2266
  %29 = load i16, ptr %ptradd16, align 2, !dbg !2266
  store i16 %29, ptr %s1, align 2, !dbg !2266
  %30 = load ptr, ptr %self, align 8, !dbg !2267
  %ptradd17 = getelementptr inbounds i8, ptr %30, i64 2, !dbg !2267
  %31 = load ptr, ptr %self, align 8, !dbg !2268
  %ptradd18 = getelementptr inbounds i8, ptr %31, i64 2, !dbg !2268
  %32 = load i16, ptr %ptradd18, align 2
  store i16 %32, ptr %self19, align 2
  store i16 8, ptr %shift20, align 2
  %33 = load i16, ptr %self19, align 2, !dbg !2269
  %34 = load i16, ptr %self19, align 2, !dbg !2271
  %35 = load i16, ptr %shift20, align 2, !dbg !2272
  %36 = call i16 @llvm.fshr.i16(i16 %33, i16 %34, i16 %35), !dbg !2272
  store i16 %36, ptr %ptradd17, align 2, !dbg !2272
  %37 = load ptr, ptr %self, align 8, !dbg !2273
  %ptradd21 = getelementptr inbounds i8, ptr %37, i64 6, !dbg !2273
  %38 = load i16, ptr %ptradd21, align 2, !dbg !2273
  %sub = sub i16 %38, -25033, !dbg !2273
  store i16 %sub, ptr %ptradd21, align 2, !dbg !2273
  %39 = load i16, ptr %s0, align 2, !dbg !2274
  %zext22 = zext i16 %39 to i32, !dbg !2274
  %40 = load i16, ptr %s1, align 2, !dbg !2275
  %zext23 = zext i16 %40 to i32, !dbg !2275
  %add24 = add i32 %zext22, %zext23, !dbg !2274
  %trunc25 = trunc i32 %add24 to i16, !dbg !2274
  ret i16 %trunc25, !dbg !2274

panic:                                            ; preds = %entry
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2245
  call void %41(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.30, i64 10, i32 135) #5, !dbg !2245
  unreachable, !dbg !2245
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws16Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2276 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %taddr19 = alloca ptr, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %varargslots33 = alloca [2 x %any], align 16
  %indirectarg36 = alloca %"any[]", align 8
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %varargslots42 = alloca [2 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg59 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2277
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2277
  br i1 %4, label %panic, label %checkok, !dbg !2277

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2278, !DIExpression(), !2279)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !2280, !DIExpression(), !2281)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2282
  %5 = load i64, ptr %ptradd1, align 8, !dbg !2282
  %lt = icmp ult i64 0, %5, !dbg !2282
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2282

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2282
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.110, i64 12, ptr @.func.21, i64 10, i32 151) #5, !dbg !2282
  unreachable, !dbg !2282

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !2284, !DIExpression(), !2286)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !2287
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2287
  store i64 %7, ptr %len, align 8, !dbg !2287
  br label %loop.cond, !dbg !2288

loop.cond:                                        ; preds = %checkok55, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !2289
  %lt4 = icmp ult i64 0, %8, !dbg !2289
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !2289

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !2291, !DIExpression(), !2293)
  %9 = load ptr, ptr %self, align 8, !dbg !2294
  %10 = call i16 @std.math.random.Msws16Random.next_short(ptr %9), !dbg !2295
  store i16 %10, ptr %value, align 2, !dbg !2295
  %11 = load i64, ptr %len, align 8, !dbg !2296
  %le = icmp ule i64 %11, 2, !dbg !2296
  br i1 %le, label %if.then, label %if.exit, !dbg !2296

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !2297
  %add = add i64 0, %13, !dbg !2297
  %size = sub i64 %add, 0, !dbg !2297
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !2297
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !2297
  %16 = load %"char[]", ptr %bytes2, align 8, !dbg !2299
  %17 = extractvalue %"char[]" %16, 0, !dbg !2299
  %18 = extractvalue %"char[]" %16, 1, !dbg !2300
  %gt = icmp ugt i64 0, %18, !dbg !2300
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2300
  br i1 %19, label %panic5, label %checkok9, !dbg !2300

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %18, 0, !dbg !2299
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !2299
  %21 = insertvalue %"char[]" %20, i64 %size10, 1, !dbg !2299
  %22 = extractvalue %"char[]" %21, 0, !dbg !2299
  %23 = extractvalue %"char[]" %15, 0, !dbg !2299
  %24 = extractvalue %"char[]" %15, 1, !dbg !2299
  %25 = extractvalue %"char[]" %21, 1, !dbg !2299
  %neq = icmp ne i64 %25, %24, !dbg !2299
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2299
  br i1 %26, label %panic11, label %checkok18, !dbg !2299

checkok18:                                        ; preds = %checkok9
  %27 = mul i64 %24, 1, !dbg !2299
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !2299
  br label %expr_block.exit, !dbg !2301

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr19, align 8
  %28 = load ptr, ptr %taddr19, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 2, 1
  %31 = load %"char[]", ptr %bytes2, align 8, !dbg !2302
  %32 = extractvalue %"char[]" %31, 0, !dbg !2302
  %33 = extractvalue %"char[]" %31, 1, !dbg !2302
  %gt20 = icmp sgt i64 0, %33, !dbg !2302
  %34 = call i1 @llvm.expect.i1(i1 %gt20, i1 false), !dbg !2302
  br i1 %34, label %panic21, label %checkok28, !dbg !2302

checkok28:                                        ; preds = %if.exit
  %lt29 = icmp slt i64 %33, 2, !dbg !2302
  %35 = call i1 @llvm.expect.i1(i1 %lt29, i1 false), !dbg !2302
  br i1 %35, label %panic30, label %checkok37, !dbg !2302

checkok37:                                        ; preds = %checkok28
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !2302
  %37 = insertvalue %"char[]" %36, i64 2, 1, !dbg !2302
  %38 = extractvalue %"char[]" %37, 0, !dbg !2302
  %39 = extractvalue %"char[]" %30, 0, !dbg !2302
  %40 = extractvalue %"char[]" %30, 1, !dbg !2302
  %41 = extractvalue %"char[]" %37, 1, !dbg !2302
  %neq38 = icmp ne i64 %41, %40, !dbg !2302
  %42 = call i1 @llvm.expect.i1(i1 %neq38, i1 false), !dbg !2302
  br i1 %42, label %panic39, label %checkok46, !dbg !2302

checkok46:                                        ; preds = %checkok37
  %43 = mul i64 %40, 1, !dbg !2302
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !2302
  %44 = load i64, ptr %len, align 8, !dbg !2303
  %sub = sub i64 %44, 2, !dbg !2303
  store i64 %sub, ptr %len, align 8, !dbg !2303
  %45 = load %"char[]", ptr %bytes2, align 8, !dbg !2304
  %46 = extractvalue %"char[]" %45, 0, !dbg !2304
  %47 = extractvalue %"char[]" %45, 1, !dbg !2305
  %gt47 = icmp ugt i64 2, %47, !dbg !2305
  %48 = call i1 @llvm.expect.i1(i1 %gt47, i1 false), !dbg !2305
  br i1 %48, label %panic48, label %checkok55, !dbg !2305

checkok55:                                        ; preds = %checkok46
  %size56 = sub i64 %47, 2, !dbg !2304
  %ptradd57 = getelementptr inbounds i8, ptr %46, i64 2, !dbg !2304
  %49 = insertvalue %"char[]" undef, ptr %ptradd57, 0, !dbg !2304
  %50 = insertvalue %"char[]" %49, i64 %size56, 1, !dbg !2304
  store %"char[]" %50, ptr %bytes2, align 8, !dbg !2304
  br label %loop.cond, !dbg !2304

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.120, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !2306
  %ptradd58 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2306
  %hi = load i64, ptr %ptradd58, align 8, !dbg !2306
  store %"any[]" zeroinitializer, ptr %indirectarg59, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.121, i64 12, ptr @.str.122, i64 23, i32 153, ptr byval(%"any[]") align 8 %indirectarg59), !dbg !2309
  unreachable, !dbg !2310

expr_block.exit:                                  ; preds = %checkok18
  ret void, !dbg !2310

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2279
  call void %51(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.21, i64 10, i32 153) #5, !dbg !2279
  unreachable, !dbg !2279

panic5:                                           ; preds = %if.then
  store i64 %18, ptr %taddr6, align 8
  %52 = insertvalue %any undef, ptr %taddr6, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %54 = insertvalue %any undef, ptr %taddr7, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd8, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2299
  unreachable, !dbg !2299

panic11:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr12, align 8
  %57 = insertvalue %any undef, ptr %taddr12, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr13, align 8
  %59 = insertvalue %any undef, ptr %taddr13, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %60, ptr %ptradd15, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg17) #5, !dbg !2299
  unreachable, !dbg !2299

panic21:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr22, align 8
  %62 = insertvalue %any undef, ptr %taddr22, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr23, align 8
  %64 = insertvalue %any undef, ptr %taddr23, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %65, ptr %ptradd25, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg27) #5, !dbg !2302
  unreachable, !dbg !2302

panic30:                                          ; preds = %checkok28
  store i64 1, ptr %taddr31, align 8
  %67 = insertvalue %any undef, ptr %taddr31, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr32, align 8
  %69 = insertvalue %any undef, ptr %taddr32, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots33, align 16
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots33, i64 16
  store %any %70, ptr %ptradd34, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots33, 0
  %"$$temp35" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp35", ptr %indirectarg36, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 60, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg36) #5, !dbg !2302
  unreachable, !dbg !2302

panic39:                                          ; preds = %checkok37
  store i64 %41, ptr %taddr40, align 8
  %72 = insertvalue %any undef, ptr %taddr40, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr41, align 8
  %74 = insertvalue %any undef, ptr %taddr41, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots42, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %75, ptr %ptradd43, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg45) #5, !dbg !2302
  unreachable, !dbg !2302

panic48:                                          ; preds = %checkok46
  store i64 %47, ptr %taddr49, align 8
  %77 = insertvalue %any undef, ptr %taddr49, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr50, align 8
  %79 = insertvalue %any undef, ptr %taddr50, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %80, ptr %ptradd52, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg54) #5, !dbg !2304
  unreachable, !dbg !2304
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Msws16Random.next_int128(ptr %0) #0 comdat !dbg !2311 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2314
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2314
  br i1 %2, label %panic, label %checkok, !dbg !2314

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2315, !DIExpression(), !2316)
  %3 = load ptr, ptr %self, align 8, !dbg !2317
  %4 = call i64 @std.math.random.Msws16Random.next_long(ptr %3), !dbg !2319
  %zext = zext i64 %4 to i128, !dbg !2319
  %shl = shl i128 %zext, 64, !dbg !2319
  %5 = freeze i128 %shl, !dbg !2319
  %6 = load ptr, ptr %self, align 8, !dbg !2317
  %7 = call i64 @std.math.random.Msws16Random.next_long(ptr %6), !dbg !2320
  %zext1 = zext i64 %7 to i128, !dbg !2320
  %add = add i128 %5, %zext1, !dbg !2319
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2316
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.28, i64 11, i32 154) #5, !dbg !2316
  unreachable, !dbg !2316
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Msws16Random.next_long(ptr %0) #0 comdat !dbg !2321 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2324
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2324
  br i1 %2, label %panic, label %checkok, !dbg !2324

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2325, !DIExpression(), !2326)
  %3 = load ptr, ptr %self, align 8, !dbg !2327
  %4 = call i32 @std.math.random.Msws16Random.next_int(ptr %3), !dbg !2329
  %zext = zext i32 %4 to i64, !dbg !2329
  %shl = shl i64 %zext, 32, !dbg !2329
  %5 = freeze i64 %shl, !dbg !2329
  %6 = load ptr, ptr %self, align 8, !dbg !2327
  %7 = call i32 @std.math.random.Msws16Random.next_int(ptr %6), !dbg !2330
  %zext1 = zext i32 %7 to i64, !dbg !2330
  %add = add i64 %5, %zext1, !dbg !2329
  ret i64 %add, !dbg !2329

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2326
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.19, i64 9, i32 155) #5, !dbg !2326
  unreachable, !dbg !2326
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Msws16Random.next_int(ptr %0) #0 comdat !dbg !2331 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2334
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2334
  br i1 %2, label %panic, label %checkok, !dbg !2334

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2335, !DIExpression(), !2336)
  %3 = load ptr, ptr %self, align 8, !dbg !2337
  %4 = call i16 @std.math.random.Msws16Random.next_short(ptr %3), !dbg !2339
  %zext = zext i16 %4 to i32, !dbg !2339
  %shl = shl i32 %zext, 16, !dbg !2339
  %5 = freeze i32 %shl, !dbg !2339
  %6 = load ptr, ptr %self, align 8, !dbg !2337
  %7 = call i16 @std.math.random.Msws16Random.next_short(ptr %6), !dbg !2340
  %zext1 = zext i16 %7 to i32, !dbg !2340
  %add = add i32 %5, %zext1, !dbg !2339
  ret i32 %add, !dbg !2339

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2336
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.29, i64 8, i32 156) #5, !dbg !2336
  unreachable, !dbg !2336
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Msws16Random.next_byte(ptr %0) #0 comdat !dbg !2341 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2344
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2344
  br i1 %2, label %panic, label %checkok, !dbg !2344

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2345, !DIExpression(), !2346)
  %3 = load ptr, ptr %self, align 8, !dbg !2347
  %4 = call i16 @std.math.random.Msws16Random.next_short(ptr %3), !dbg !2348
  %trunc = trunc i16 %4 to i8, !dbg !2348
  ret i8 %trunc, !dbg !2348

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2346
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.31, i64 9, i32 157) #5, !dbg !2346
  unreachable, !dbg !2346
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws8Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2349 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %input3 = alloca %"char[]", align 8
  %return_value = alloca [4 x i8], align 1
  %taddr = alloca ptr, align 8
  %expr = alloca [4 x i8], align 1
  %3 = icmp eq ptr %0, null, !dbg !2359
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2359
  br i1 %4, label %panic, label %checkok, !dbg !2359

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2360, !DIExpression(), !2361)
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !2362, !DIExpression(), !2363)
  %5 = load ptr, ptr %self, align 8, !dbg !2364
  %checknull = icmp eq ptr %5, null, !dbg !2364
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2364
  br i1 %6, label %panic1, label %checkok2, !dbg !2364

checkok2:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input3, ptr align 8 %input, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !2365, !DIExpression(), !2368)
  store i8 0, ptr %return_value, align 1, !dbg !2368
  %ptradd4 = getelementptr inbounds i8, ptr %return_value, i64 1, !dbg !2368
  store i8 0, ptr %ptradd4, align 1, !dbg !2368
  %ptradd5 = getelementptr inbounds i8, ptr %return_value, i64 2, !dbg !2368
  store i8 0, ptr %ptradd5, align 1, !dbg !2368
  %ptradd6 = getelementptr inbounds i8, ptr %return_value, i64 3, !dbg !2368
  store i8 0, ptr %ptradd6, align 1, !dbg !2368
  store ptr %return_value, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 4, 1
  %lo = load ptr, ptr %input3, align 8
  %ptradd7 = getelementptr inbounds i8, ptr %input3, i64 8
  %hi = load i64, ptr %ptradd7, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %7, i64 4), !dbg !2370
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %expr, ptr align 1 %return_value, i32 4, i1 false)
  %checknull8 = icmp eq ptr %expr, null, !dbg !2371
  %10 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !2371
  br i1 %10, label %panic9, label %checkok10, !dbg !2371

checkok10:                                        ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %5, ptr align 1 %expr, i32 4, i1 false), !dbg !2374
  ret void, !dbg !2374

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2361
  call void %11(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.16, i64 8, i32 166) #5, !dbg !2361
  unreachable, !dbg !2361

panic1:                                           ; preds = %checkok
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2364
  call void %12(ptr @.panic_msg.17, i64 45, ptr @.file.110, i64 12, ptr @.func.16, i64 8, i32 168) #5, !dbg !2364
  unreachable, !dbg !2364

panic9:                                           ; preds = %checkok2
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2374
  call void %13(ptr @.panic_msg.71, i64 53, ptr @.file.72, i64 10, ptr @.func.16, i64 8, i32 212) #5, !dbg !2374
  unreachable, !dbg !2374
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Msws8Random.next_byte(ptr %0) #0 comdat !dbg !2375 {
entry:
  %self = alloca ptr, align 8
  %s0 = alloca i8, align 1
  %self3 = alloca i8, align 1
  %shift = alloca i8, align 1
  %s1 = alloca i8, align 1
  %self19 = alloca i8, align 1
  %shift20 = alloca i8, align 1
  %1 = icmp eq ptr %0, null, !dbg !2378
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2378
  br i1 %2, label %panic, label %checkok, !dbg !2378

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2379, !DIExpression(), !2380)
    #dbg_declare(ptr %s0, !2381, !DIExpression(), !2382)
  %3 = load ptr, ptr %self, align 8, !dbg !2383
  %4 = load i8, ptr %3, align 1, !dbg !2383
  store i8 %4, ptr %s0, align 1, !dbg !2383
  %5 = load ptr, ptr %self, align 8, !dbg !2384
  %6 = load ptr, ptr %self, align 8, !dbg !2385
  %7 = load i8, ptr %6, align 1, !dbg !2385
  %zext = zext i8 %7 to i32, !dbg !2385
  %8 = load ptr, ptr %self, align 8, !dbg !2386
  %9 = load i8, ptr %8, align 1, !dbg !2386
  %zext1 = zext i8 %9 to i32, !dbg !2386
  %mul = mul i32 %zext, %zext1, !dbg !2385
  %10 = load ptr, ptr %self, align 8, !dbg !2387
  %ptradd = getelementptr inbounds i8, ptr %10, i64 2, !dbg !2387
  %11 = load i8, ptr %ptradd, align 1, !dbg !2387
  %zext2 = zext i8 %11 to i32, !dbg !2387
  %add = add i32 %mul, %zext2, !dbg !2385
  %trunc = trunc i32 %add to i8, !dbg !2385
  store i8 %trunc, ptr %5, align 1, !dbg !2385
  %12 = load ptr, ptr %self, align 8, !dbg !2388
  %13 = load ptr, ptr %self, align 8, !dbg !2389
  %14 = load i8, ptr %13, align 1
  store i8 %14, ptr %self3, align 1
  store i8 4, ptr %shift, align 1
  %15 = load i8, ptr %self3, align 1, !dbg !2390
  %16 = load i8, ptr %self3, align 1, !dbg !2392
  %17 = load i8, ptr %shift, align 1, !dbg !2393
  %18 = call i8 @llvm.fshr.i8(i8 %15, i8 %16, i8 %17), !dbg !2393
  store i8 %18, ptr %12, align 1, !dbg !2393
  %19 = load ptr, ptr %self, align 8, !dbg !2394
  %ptradd4 = getelementptr inbounds i8, ptr %19, i64 2, !dbg !2394
  %20 = load i8, ptr %ptradd4, align 1, !dbg !2394
  %add5 = add i8 %20, -97, !dbg !2394
  store i8 %add5, ptr %ptradd4, align 1, !dbg !2394
  %21 = load ptr, ptr %self, align 8, !dbg !2395
  %ptradd6 = getelementptr inbounds i8, ptr %21, i64 1, !dbg !2395
  %22 = load ptr, ptr %self, align 8, !dbg !2396
  %ptradd7 = getelementptr inbounds i8, ptr %22, i64 1, !dbg !2396
  %23 = load i8, ptr %ptradd7, align 1, !dbg !2396
  %zext8 = zext i8 %23 to i32, !dbg !2396
  %24 = load ptr, ptr %self, align 8, !dbg !2397
  %ptradd9 = getelementptr inbounds i8, ptr %24, i64 1, !dbg !2397
  %25 = load i8, ptr %ptradd9, align 1, !dbg !2397
  %zext10 = zext i8 %25 to i32, !dbg !2397
  %mul11 = mul i32 %zext8, %zext10, !dbg !2396
  %26 = load ptr, ptr %self, align 8, !dbg !2398
  %ptradd12 = getelementptr inbounds i8, ptr %26, i64 3, !dbg !2398
  %27 = load i8, ptr %ptradd12, align 1, !dbg !2398
  %zext13 = zext i8 %27 to i32, !dbg !2398
  %add14 = add i32 %mul11, %zext13, !dbg !2396
  %trunc15 = trunc i32 %add14 to i8, !dbg !2396
  store i8 %trunc15, ptr %ptradd6, align 1, !dbg !2396
    #dbg_declare(ptr %s1, !2399, !DIExpression(), !2400)
  %28 = load ptr, ptr %self, align 8, !dbg !2401
  %ptradd16 = getelementptr inbounds i8, ptr %28, i64 1, !dbg !2401
  %29 = load i8, ptr %ptradd16, align 1, !dbg !2401
  store i8 %29, ptr %s1, align 1, !dbg !2401
  %30 = load ptr, ptr %self, align 8, !dbg !2402
  %ptradd17 = getelementptr inbounds i8, ptr %30, i64 1, !dbg !2402
  %31 = load ptr, ptr %self, align 8, !dbg !2403
  %ptradd18 = getelementptr inbounds i8, ptr %31, i64 1, !dbg !2403
  %32 = load i8, ptr %ptradd18, align 1
  store i8 %32, ptr %self19, align 1
  store i8 4, ptr %shift20, align 1
  %33 = load i8, ptr %self19, align 1, !dbg !2404
  %34 = load i8, ptr %self19, align 1, !dbg !2406
  %35 = load i8, ptr %shift20, align 1, !dbg !2407
  %36 = call i8 @llvm.fshr.i8(i8 %33, i8 %34, i8 %35), !dbg !2407
  store i8 %36, ptr %ptradd17, align 1, !dbg !2407
  %37 = load ptr, ptr %self, align 8, !dbg !2408
  %ptradd21 = getelementptr inbounds i8, ptr %37, i64 3, !dbg !2408
  %38 = load i8, ptr %ptradd21, align 1, !dbg !2408
  %sub = sub i8 %38, -97, !dbg !2408
  store i8 %sub, ptr %ptradd21, align 1, !dbg !2408
  %39 = load i8, ptr %s0, align 1, !dbg !2409
  %zext22 = zext i8 %39 to i32, !dbg !2409
  %40 = load i8, ptr %s1, align 1, !dbg !2410
  %zext23 = zext i8 %40 to i32, !dbg !2410
  %add24 = add i32 %zext22, %zext23, !dbg !2409
  %trunc25 = trunc i32 %add24 to i8, !dbg !2409
  ret i8 %trunc25, !dbg !2409

panic:                                            ; preds = %entry
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2380
  call void %41(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.31, i64 9, i32 171) #5, !dbg !2380
  unreachable, !dbg !2380
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws8Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2411 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes1 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr17 = alloca ptr, align 8
  %taddr20 = alloca i64, align 8
  %taddr21 = alloca i64, align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca i64, align 8
  %varargslots49 = alloca [2 x %any], align 16
  %indirectarg52 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg57 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2412
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2412
  br i1 %4, label %panic, label %checkok, !dbg !2412

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2413, !DIExpression(), !2414)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !2415, !DIExpression(), !2416)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes1, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !2417, !DIExpression(), !2419)
  %ptradd2 = getelementptr inbounds i8, ptr %bytes1, i64 8, !dbg !2420
  %5 = load i64, ptr %ptradd2, align 8, !dbg !2420
  store i64 %5, ptr %len, align 8, !dbg !2420
  br label %loop.cond, !dbg !2421

loop.cond:                                        ; preds = %checkok53, %checkok
  %6 = load i64, ptr %len, align 8, !dbg !2422
  %lt = icmp ult i64 0, %6, !dbg !2422
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !2422

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !2424, !DIExpression(), !2426)
  %7 = load ptr, ptr %self, align 8, !dbg !2427
  %8 = call i8 @std.math.random.Msws8Random.next_byte(ptr %7), !dbg !2428
  store i8 %8, ptr %value, align 1, !dbg !2428
  %9 = load i64, ptr %len, align 8, !dbg !2429
  %le = icmp ule i64 %9, 1, !dbg !2429
  br i1 %le, label %if.then, label %if.exit, !dbg !2429

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %10 = load ptr, ptr %taddr, align 8
  %11 = load i64, ptr %len, align 8, !dbg !2430
  %add = add i64 0, %11, !dbg !2430
  %size = sub i64 %add, 0, !dbg !2430
  %12 = insertvalue %"char[]" undef, ptr %10, 0, !dbg !2430
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !2430
  %14 = load %"char[]", ptr %bytes1, align 8, !dbg !2432
  %15 = extractvalue %"char[]" %14, 0, !dbg !2432
  %16 = extractvalue %"char[]" %14, 1, !dbg !2433
  %gt = icmp ugt i64 0, %16, !dbg !2433
  %17 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2433
  br i1 %17, label %panic3, label %checkok7, !dbg !2433

checkok7:                                         ; preds = %if.then
  %size8 = sub i64 %16, 0, !dbg !2432
  %18 = insertvalue %"char[]" undef, ptr %15, 0, !dbg !2432
  %19 = insertvalue %"char[]" %18, i64 %size8, 1, !dbg !2432
  %20 = extractvalue %"char[]" %19, 0, !dbg !2432
  %21 = extractvalue %"char[]" %13, 0, !dbg !2432
  %22 = extractvalue %"char[]" %13, 1, !dbg !2432
  %23 = extractvalue %"char[]" %19, 1, !dbg !2432
  %neq = icmp ne i64 %23, %22, !dbg !2432
  %24 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2432
  br i1 %24, label %panic9, label %checkok16, !dbg !2432

checkok16:                                        ; preds = %checkok7
  %25 = mul i64 %22, 1, !dbg !2432
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %20, ptr align 1 %21, i64 %25, i1 false), !dbg !2432
  br label %expr_block.exit, !dbg !2434

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr17, align 8
  %26 = load ptr, ptr %taddr17, align 8
  %27 = insertvalue %"char[]" undef, ptr %26, 0
  %28 = insertvalue %"char[]" %27, i64 1, 1
  %29 = load %"char[]", ptr %bytes1, align 8, !dbg !2435
  %30 = extractvalue %"char[]" %29, 0, !dbg !2435
  %31 = extractvalue %"char[]" %29, 1, !dbg !2435
  %gt18 = icmp sgt i64 0, %31, !dbg !2435
  %32 = call i1 @llvm.expect.i1(i1 %gt18, i1 false), !dbg !2435
  br i1 %32, label %panic19, label %checkok26, !dbg !2435

checkok26:                                        ; preds = %if.exit
  %lt27 = icmp slt i64 %31, 1, !dbg !2435
  %33 = call i1 @llvm.expect.i1(i1 %lt27, i1 false), !dbg !2435
  br i1 %33, label %panic28, label %checkok35, !dbg !2435

checkok35:                                        ; preds = %checkok26
  %34 = insertvalue %"char[]" undef, ptr %30, 0, !dbg !2435
  %35 = insertvalue %"char[]" %34, i64 1, 1, !dbg !2435
  %36 = extractvalue %"char[]" %35, 0, !dbg !2435
  %37 = extractvalue %"char[]" %28, 0, !dbg !2435
  %38 = extractvalue %"char[]" %28, 1, !dbg !2435
  %39 = extractvalue %"char[]" %35, 1, !dbg !2435
  %neq36 = icmp ne i64 %39, %38, !dbg !2435
  %40 = call i1 @llvm.expect.i1(i1 %neq36, i1 false), !dbg !2435
  br i1 %40, label %panic37, label %checkok44, !dbg !2435

checkok44:                                        ; preds = %checkok35
  %41 = mul i64 %38, 1, !dbg !2435
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %36, ptr align 1 %37, i64 %41, i1 false), !dbg !2435
  %42 = load i64, ptr %len, align 8, !dbg !2436
  %sub = sub i64 %42, 1, !dbg !2436
  store i64 %sub, ptr %len, align 8, !dbg !2436
  %43 = load %"char[]", ptr %bytes1, align 8, !dbg !2437
  %44 = extractvalue %"char[]" %43, 0, !dbg !2437
  %45 = extractvalue %"char[]" %43, 1, !dbg !2438
  %gt45 = icmp ugt i64 1, %45, !dbg !2438
  %46 = call i1 @llvm.expect.i1(i1 %gt45, i1 false), !dbg !2438
  br i1 %46, label %panic46, label %checkok53, !dbg !2438

checkok53:                                        ; preds = %checkok44
  %size54 = sub i64 %45, 1, !dbg !2437
  %ptradd55 = getelementptr inbounds i8, ptr %44, i64 1, !dbg !2437
  %47 = insertvalue %"char[]" undef, ptr %ptradd55, 0, !dbg !2437
  %48 = insertvalue %"char[]" %47, i64 %size54, 1, !dbg !2437
  store %"char[]" %48, ptr %bytes1, align 8, !dbg !2437
  br label %loop.cond, !dbg !2437

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.123, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !2439
  %ptradd56 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2439
  %hi = load i64, ptr %ptradd56, align 8, !dbg !2439
  store %"any[]" zeroinitializer, ptr %indirectarg57, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.124, i64 12, ptr @.str.125, i64 22, i32 186, ptr byval(%"any[]") align 8 %indirectarg57), !dbg !2442
  unreachable, !dbg !2443

expr_block.exit:                                  ; preds = %checkok16
  ret void, !dbg !2443

panic:                                            ; preds = %entry
  %49 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2414
  call void %49(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.21, i64 10, i32 186) #5, !dbg !2414
  unreachable, !dbg !2414

panic3:                                           ; preds = %if.then
  store i64 %16, ptr %taddr4, align 8
  %50 = insertvalue %any undef, ptr %taddr4, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %52 = insertvalue %any undef, ptr %taddr5, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %51, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %53, ptr %ptradd6, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2432
  unreachable, !dbg !2432

panic9:                                           ; preds = %checkok7
  store i64 %23, ptr %taddr10, align 8
  %55 = insertvalue %any undef, ptr %taddr10, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr11, align 8
  %57 = insertvalue %any undef, ptr %taddr11, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %56, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %58, ptr %ptradd13, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !2432
  unreachable, !dbg !2432

panic19:                                          ; preds = %if.exit
  store i64 %31, ptr %taddr20, align 8
  %60 = insertvalue %any undef, ptr %taddr20, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr21, align 8
  %62 = insertvalue %any undef, ptr %taddr21, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %61, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %63, ptr %ptradd23, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg25) #5, !dbg !2435
  unreachable, !dbg !2435

panic28:                                          ; preds = %checkok26
  store i64 0, ptr %taddr29, align 8
  %65 = insertvalue %any undef, ptr %taddr29, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %31, ptr %taddr30, align 8
  %67 = insertvalue %any undef, ptr %taddr30, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %66, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %68, ptr %ptradd32, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 60, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !2435
  unreachable, !dbg !2435

panic37:                                          ; preds = %checkok35
  store i64 %39, ptr %taddr38, align 8
  %70 = insertvalue %any undef, ptr %taddr38, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %38, ptr %taddr39, align 8
  %72 = insertvalue %any undef, ptr %taddr39, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %71, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %73, ptr %ptradd41, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg43) #5, !dbg !2435
  unreachable, !dbg !2435

panic46:                                          ; preds = %checkok44
  store i64 %45, ptr %taddr47, align 8
  %75 = insertvalue %any undef, ptr %taddr47, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr48, align 8
  %77 = insertvalue %any undef, ptr %taddr48, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %76, ptr %varargslots49, align 16
  %ptradd50 = getelementptr inbounds i8, ptr %varargslots49, i64 16
  store %any %78, ptr %ptradd50, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp51" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp51", ptr %indirectarg52, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg52) #5, !dbg !2437
  unreachable, !dbg !2437
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Msws8Random.next_int128(ptr %0) #0 comdat !dbg !2444 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2447
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2447
  br i1 %2, label %panic, label %checkok, !dbg !2447

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2448, !DIExpression(), !2449)
  %3 = load ptr, ptr %self, align 8, !dbg !2450
  %4 = call i64 @std.math.random.Msws8Random.next_long(ptr %3), !dbg !2452
  %zext = zext i64 %4 to i128, !dbg !2452
  %shl = shl i128 %zext, 64, !dbg !2452
  %5 = freeze i128 %shl, !dbg !2452
  %6 = load ptr, ptr %self, align 8, !dbg !2450
  %7 = call i64 @std.math.random.Msws8Random.next_long(ptr %6), !dbg !2453
  %zext1 = zext i64 %7 to i128, !dbg !2453
  %add = add i128 %5, %zext1, !dbg !2452
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2449
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.28, i64 11, i32 187) #5, !dbg !2449
  unreachable, !dbg !2449
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Msws8Random.next_long(ptr %0) #0 comdat !dbg !2454 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2457
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2457
  br i1 %2, label %panic, label %checkok, !dbg !2457

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2458, !DIExpression(), !2459)
  %3 = load ptr, ptr %self, align 8, !dbg !2460
  %4 = call i32 @std.math.random.Msws8Random.next_int(ptr %3), !dbg !2462
  %zext = zext i32 %4 to i64, !dbg !2462
  %shl = shl i64 %zext, 32, !dbg !2462
  %5 = freeze i64 %shl, !dbg !2462
  %6 = load ptr, ptr %self, align 8, !dbg !2460
  %7 = call i32 @std.math.random.Msws8Random.next_int(ptr %6), !dbg !2463
  %zext1 = zext i32 %7 to i64, !dbg !2463
  %add = add i64 %5, %zext1, !dbg !2462
  ret i64 %add, !dbg !2462

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2459
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.19, i64 9, i32 188) #5, !dbg !2459
  unreachable, !dbg !2459
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Msws8Random.next_int(ptr %0) #0 comdat !dbg !2464 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2467
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2467
  br i1 %2, label %panic, label %checkok, !dbg !2467

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2468, !DIExpression(), !2469)
  %3 = load ptr, ptr %self, align 8, !dbg !2470
  %4 = call i16 @std.math.random.Msws8Random.next_short(ptr %3), !dbg !2472
  %zext = zext i16 %4 to i32, !dbg !2472
  %shl = shl i32 %zext, 16, !dbg !2472
  %5 = freeze i32 %shl, !dbg !2472
  %6 = load ptr, ptr %self, align 8, !dbg !2470
  %7 = call i16 @std.math.random.Msws8Random.next_short(ptr %6), !dbg !2473
  %zext1 = zext i16 %7 to i32, !dbg !2473
  %add = add i32 %5, %zext1, !dbg !2472
  ret i32 %add, !dbg !2472

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2469
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.29, i64 8, i32 189) #5, !dbg !2469
  unreachable, !dbg !2469
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Msws8Random.next_short(ptr %0) #0 comdat !dbg !2474 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2477
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2477
  br i1 %2, label %panic, label %checkok, !dbg !2477

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2478, !DIExpression(), !2479)
  %3 = load ptr, ptr %self, align 8, !dbg !2480
  %4 = call i8 @std.math.random.Msws8Random.next_byte(ptr %3), !dbg !2482
  %zext = zext i8 %4 to i16, !dbg !2482
  %zext1 = zext i16 %zext to i32, !dbg !2482
  %shl = shl i32 %zext1, 8, !dbg !2482
  %5 = freeze i32 %shl, !dbg !2482
  %6 = load ptr, ptr %self, align 8, !dbg !2480
  %7 = call i8 @std.math.random.Msws8Random.next_byte(ptr %6), !dbg !2483
  %zext2 = zext i8 %7 to i32, !dbg !2483
  %add = add i32 %5, %zext2, !dbg !2482
  %trunc = trunc i32 %add to i16, !dbg !2482
  ret i16 %trunc, !dbg !2482

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2479
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.110, i64 12, ptr @.func.30, i64 10, i32 190) #5, !dbg !2479
  unreachable, !dbg !2479
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.SimpleRandom.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2484 {
entry:
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %full = alloca [8 x i8], align 1
  %.anon = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr17 = alloca i64, align 8
  %varargslots18 = alloca [1 x %any], align 16
  %indirectarg20 = alloca %"any[]", align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %varargslots26 = alloca [2 x %any], align 16
  %indirectarg29 = alloca %"any[]", align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %expr = alloca [8 x i8], align 1
  %x = alloca i64, align 8
  %3 = icmp eq ptr %0, null, !dbg !2489
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2489
  br i1 %4, label %panic, label %checkok, !dbg !2489

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2490, !DIExpression(), !2491)
  store ptr %1, ptr %seed, align 8
  %ptradd = getelementptr inbounds i8, ptr %seed, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %seed, !2492, !DIExpression(), !2493)
    #dbg_declare(ptr %full, !2494, !DIExpression(), !2496)
  store i8 0, ptr %full, align 1, !dbg !2496
  %ptradd1 = getelementptr inbounds i8, ptr %full, i64 1, !dbg !2496
  store i8 0, ptr %ptradd1, align 1, !dbg !2496
  %ptradd2 = getelementptr inbounds i8, ptr %full, i64 2, !dbg !2496
  store i8 0, ptr %ptradd2, align 1, !dbg !2496
  %ptradd3 = getelementptr inbounds i8, ptr %full, i64 3, !dbg !2496
  store i8 0, ptr %ptradd3, align 1, !dbg !2496
  %ptradd4 = getelementptr inbounds i8, ptr %full, i64 4, !dbg !2496
  store i8 0, ptr %ptradd4, align 1, !dbg !2496
  %ptradd5 = getelementptr inbounds i8, ptr %full, i64 5, !dbg !2496
  store i8 0, ptr %ptradd5, align 1, !dbg !2496
  %ptradd6 = getelementptr inbounds i8, ptr %full, i64 6, !dbg !2496
  store i8 0, ptr %ptradd6, align 1, !dbg !2496
  %ptradd7 = getelementptr inbounds i8, ptr %full, i64 7, !dbg !2496
  store i8 0, ptr %ptradd7, align 1, !dbg !2496
  %ptradd8 = getelementptr inbounds i8, ptr %seed, i64 8, !dbg !2497
  %5 = load i64, ptr %ptradd8, align 8, !dbg !2497
    #dbg_declare(ptr %.anon, !2499, !DIExpression(), !2500)
  store i64 0, ptr %.anon, align 8, !dbg !2500
  br label %loop.cond, !dbg !2500

loop.cond:                                        ; preds = %checkok30, %checkok
  %6 = load i64, ptr %.anon, align 8, !dbg !2500
  %lt = icmp ult i64 %6, %5, !dbg !2500
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !2500

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %i, !2501, !DIExpression(), !2503)
  %7 = load i64, ptr %.anon, align 8, !dbg !2503
  store i64 %7, ptr %i, align 8, !dbg !2503
    #dbg_declare(ptr %c, !2504, !DIExpression(), !2505)
  %ptradd9 = getelementptr inbounds i8, ptr %seed, i64 8, !dbg !2506
  %8 = load i64, ptr %ptradd9, align 8, !dbg !2506
  %9 = load ptr, ptr %seed, align 8, !dbg !2506
  %10 = load i64, ptr %.anon, align 8, !dbg !2503
  %ge = icmp uge i64 %10, %8, !dbg !2503
  %11 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2503
  br i1 %11, label %panic10, label %checkok13, !dbg !2503

checkok13:                                        ; preds = %loop.body
  %ptradd14 = getelementptr inbounds i8, ptr %9, i64 %10, !dbg !2503
  %12 = load i8, ptr %ptradd14, align 1, !dbg !2503
  store i8 %12, ptr %c, align 1, !dbg !2503
  %13 = load i64, ptr %i, align 8, !dbg !2507
  %smod = srem i64 %13, 8, !dbg !2507
  %lt15 = icmp slt i64 %smod, 0, !dbg !2507
  %14 = call i1 @llvm.expect.i1(i1 %lt15, i1 false), !dbg !2507
  br i1 %14, label %panic16, label %checkok21, !dbg !2507

checkok21:                                        ; preds = %checkok13
  %ge22 = icmp sge i64 %smod, 8, !dbg !2507
  %15 = call i1 @llvm.expect.i1(i1 %ge22, i1 false), !dbg !2507
  br i1 %15, label %panic23, label %checkok30, !dbg !2507

checkok30:                                        ; preds = %checkok21
  %ptradd31 = getelementptr inbounds i8, ptr %full, i64 %smod, !dbg !2507
  %16 = load i8, ptr %ptradd31, align 1, !dbg !2507
  %17 = load i8, ptr %c, align 1, !dbg !2509
  %xor = xor i8 %16, %17, !dbg !2510
  store i8 %xor, ptr %ptradd31, align 1, !dbg !2510
  %18 = load i64, ptr %.anon, align 8, !dbg !2500
  %addnuw = add nuw i64 %18, 1, !dbg !2500
  store i64 %addnuw, ptr %.anon, align 8, !dbg !2500
  br label %loop.cond, !dbg !2500

loop.exit:                                        ; preds = %loop.cond
  %19 = load ptr, ptr %self, align 8, !dbg !2511
  %checknull = icmp eq ptr %19, null, !dbg !2511
  %20 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2511
  br i1 %20, label %panic32, label %checkok33, !dbg !2511

checkok33:                                        ; preds = %loop.exit
  %21 = ptrtoint ptr %19 to i64, !dbg !2511
  %22 = urem i64 %21, 8, !dbg !2511
  %23 = icmp ne i64 %22, 0, !dbg !2511
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false), !dbg !2511
  br i1 %24, label %panic34, label %checkok41, !dbg !2511

checkok41:                                        ; preds = %checkok33
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %expr, ptr align 1 %full, i32 8, i1 false)
    #dbg_declare(ptr %x, !2512, !DIExpression(), !2514)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %x, ptr align 1 %expr, i64 8, i1 false), !dbg !2516
  %25 = load i64, ptr %x, align 8, !dbg !2517
  %xor42 = xor i64 %25, 25214903917, !dbg !2518
  %and = and i64 %xor42, 281474976710655, !dbg !2518
  store i64 %and, ptr %19, align 8, !dbg !2518
  ret void, !dbg !2518

panic:                                            ; preds = %entry
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2491
  call void %26(ptr @.panic_msg.14, i64 62, ptr @.file.128, i64 21, ptr @.func.16, i64 8, i32 6) #5, !dbg !2491
  unreachable, !dbg !2491

panic10:                                          ; preds = %loop.body
  store i64 %8, ptr %taddr, align 8
  %27 = insertvalue %any undef, ptr %taddr, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr11, align 8
  %29 = insertvalue %any undef, ptr %taddr11, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %28, ptr %varargslots, align 16
  %ptradd12 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %30, ptr %ptradd12, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.65, i64 59, ptr @.file.128, i64 21, ptr @.func.16, i64 8, i32 9, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2503
  unreachable, !dbg !2503

panic16:                                          ; preds = %checkok13
  store i64 %smod, ptr %taddr17, align 8
  %32 = insertvalue %any undef, ptr %taddr17, 0
  %33 = insertvalue %any %32, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %33, ptr %varargslots18, align 16
  %34 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp19" = insertvalue %"any[]" %34, i64 1, 1
  store %"any[]" %"$$temp19", ptr %indirectarg20, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.66, i64 38, ptr @.file.128, i64 21, ptr @.func.16, i64 8, i32 11, ptr byval(%"any[]") align 8 %indirectarg20) #5, !dbg !2507
  unreachable, !dbg !2507

panic23:                                          ; preds = %checkok21
  store i64 8, ptr %taddr24, align 8
  %35 = insertvalue %any undef, ptr %taddr24, 0
  %36 = insertvalue %any %35, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %smod, ptr %taddr25, align 8
  %37 = insertvalue %any undef, ptr %taddr25, 0
  %38 = insertvalue %any %37, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %36, ptr %varargslots26, align 16
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %38, ptr %ptradd27, align 16
  %39 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %39, i64 2, 1
  store %"any[]" %"$$temp28", ptr %indirectarg29, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.65, i64 59, ptr @.file.128, i64 21, ptr @.func.16, i64 8, i32 11, ptr byval(%"any[]") align 8 %indirectarg29) #5, !dbg !2507
  unreachable, !dbg !2507

panic32:                                          ; preds = %loop.exit
  %40 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2511
  call void %40(ptr @.panic_msg.17, i64 45, ptr @.file.128, i64 21, ptr @.func.16, i64 8, i32 13) #5, !dbg !2511
  unreachable, !dbg !2511

panic34:                                          ; preds = %checkok33
  store i64 8, ptr %taddr35, align 8
  %41 = insertvalue %any undef, ptr %taddr35, 0
  %42 = insertvalue %any %41, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr36, align 8
  %43 = insertvalue %any undef, ptr %taddr36, 0
  %44 = insertvalue %any %43, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %42, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %44, ptr %ptradd38, align 16
  %45 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %45, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.128, i64 21, ptr @.func.16, i64 8, i32 13, ptr byval(%"any[]") align 8 %indirectarg40) #5, !dbg !2511
  unreachable, !dbg !2511
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.SimpleRandom.next_int(ptr %0) #0 comdat !dbg !2519 {
entry:
  %self = alloca ptr, align 8
  %nextseed = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !2522
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2522
  br i1 %2, label %panic, label %checkok, !dbg !2522

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2523, !DIExpression(), !2524)
    #dbg_declare(ptr %nextseed, !2525, !DIExpression(), !2526)
  %3 = load ptr, ptr %self, align 8, !dbg !2527
  %checknull = icmp eq ptr %3, null, !dbg !2527
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2527
  br i1 %4, label %panic1, label %checkok2, !dbg !2527

checkok2:                                         ; preds = %checkok
  %5 = ptrtoint ptr %3 to i64, !dbg !2527
  %6 = urem i64 %5, 8, !dbg !2527
  %7 = icmp ne i64 %6, 0, !dbg !2527
  %8 = call i1 @llvm.expect.i1(i1 %7, i1 false), !dbg !2527
  br i1 %8, label %panic3, label %checkok5, !dbg !2527

checkok5:                                         ; preds = %checkok2
  %9 = load i64, ptr %3, align 8, !dbg !2527
  %mul = mul i64 %9, 25214903917, !dbg !2528
  %add = add i64 %mul, 11, !dbg !2528
  %and = and i64 %add, 281474976710655, !dbg !2528
  store i64 %and, ptr %nextseed, align 8, !dbg !2528
  %10 = load ptr, ptr %self, align 8, !dbg !2529
  %checknull6 = icmp eq ptr %10, null, !dbg !2529
  %11 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !2529
  br i1 %11, label %panic7, label %checkok8, !dbg !2529

checkok8:                                         ; preds = %checkok5
  %12 = ptrtoint ptr %10 to i64, !dbg !2529
  %13 = urem i64 %12, 8, !dbg !2529
  %14 = icmp ne i64 %13, 0, !dbg !2529
  %15 = call i1 @llvm.expect.i1(i1 %14, i1 false), !dbg !2529
  br i1 %15, label %panic9, label %checkok16, !dbg !2529

checkok16:                                        ; preds = %checkok8
  %16 = load i64, ptr %nextseed, align 8, !dbg !2530
  store i64 %16, ptr %10, align 8, !dbg !2530
  %17 = load i64, ptr %nextseed, align 8, !dbg !2531
  %lshr = lshr i64 %17, 16, !dbg !2532
  %18 = freeze i64 %lshr, !dbg !2532
  %trunc = trunc i64 %18 to i32, !dbg !2532
  ret i32 %trunc, !dbg !2532

panic:                                            ; preds = %entry
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2524
  call void %19(ptr @.panic_msg.14, i64 62, ptr @.file.128, i64 21, ptr @.func.29, i64 8, i32 16) #5, !dbg !2524
  unreachable, !dbg !2524

panic1:                                           ; preds = %checkok
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2527
  call void %20(ptr @.panic_msg.17, i64 45, ptr @.file.128, i64 21, ptr @.func.29, i64 8, i32 18) #5, !dbg !2527
  unreachable, !dbg !2527

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %21 = insertvalue %any undef, ptr %taddr, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr4, align 8
  %23 = insertvalue %any undef, ptr %taddr4, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %22, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %24, ptr %ptradd, align 16
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.128, i64 21, ptr @.func.29, i64 8, i32 18, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2527
  unreachable, !dbg !2527

panic7:                                           ; preds = %checkok5
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2529
  call void %26(ptr @.panic_msg.17, i64 45, ptr @.file.128, i64 21, ptr @.func.29, i64 8, i32 19) #5, !dbg !2529
  unreachable, !dbg !2529

panic9:                                           ; preds = %checkok8
  store i64 8, ptr %taddr10, align 8
  %27 = insertvalue %any undef, ptr %taddr10, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr11, align 8
  %29 = insertvalue %any undef, ptr %taddr11, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %28, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %30, ptr %ptradd13, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.128, i64 21, ptr @.func.29, i64 8, i32 19, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !2529
  unreachable, !dbg !2529
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.SimpleRandom.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2533 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %taddr19 = alloca ptr, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %varargslots33 = alloca [2 x %any], align 16
  %indirectarg36 = alloca %"any[]", align 8
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %varargslots42 = alloca [2 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg59 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2534
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2534
  br i1 %4, label %panic, label %checkok, !dbg !2534

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2535, !DIExpression(), !2536)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !2537, !DIExpression(), !2538)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2539
  %5 = load i64, ptr %ptradd1, align 8, !dbg !2539
  %lt = icmp ult i64 0, %5, !dbg !2539
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2539

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2539
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.128, i64 21, ptr @.func.21, i64 10, i32 24) #5, !dbg !2539
  unreachable, !dbg !2539

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !2541, !DIExpression(), !2543)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !2544
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2544
  store i64 %7, ptr %len, align 8, !dbg !2544
  br label %loop.cond, !dbg !2545

loop.cond:                                        ; preds = %checkok55, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !2546
  %lt4 = icmp ult i64 0, %8, !dbg !2546
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !2546

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !2548, !DIExpression(), !2550)
  %9 = load ptr, ptr %self, align 8, !dbg !2551
  %10 = call i32 @std.math.random.SimpleRandom.next_int(ptr %9), !dbg !2552
  store i32 %10, ptr %value, align 4, !dbg !2552
  %11 = load i64, ptr %len, align 8, !dbg !2553
  %le = icmp ule i64 %11, 4, !dbg !2553
  br i1 %le, label %if.then, label %if.exit, !dbg !2553

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !2554
  %add = add i64 0, %13, !dbg !2554
  %size = sub i64 %add, 0, !dbg !2554
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !2554
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !2554
  %16 = load %"char[]", ptr %bytes2, align 8, !dbg !2556
  %17 = extractvalue %"char[]" %16, 0, !dbg !2556
  %18 = extractvalue %"char[]" %16, 1, !dbg !2557
  %gt = icmp ugt i64 0, %18, !dbg !2557
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2557
  br i1 %19, label %panic5, label %checkok9, !dbg !2557

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %18, 0, !dbg !2556
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !2556
  %21 = insertvalue %"char[]" %20, i64 %size10, 1, !dbg !2556
  %22 = extractvalue %"char[]" %21, 0, !dbg !2556
  %23 = extractvalue %"char[]" %15, 0, !dbg !2556
  %24 = extractvalue %"char[]" %15, 1, !dbg !2556
  %25 = extractvalue %"char[]" %21, 1, !dbg !2556
  %neq = icmp ne i64 %25, %24, !dbg !2556
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2556
  br i1 %26, label %panic11, label %checkok18, !dbg !2556

checkok18:                                        ; preds = %checkok9
  %27 = mul i64 %24, 1, !dbg !2556
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !2556
  br label %expr_block.exit, !dbg !2558

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr19, align 8
  %28 = load ptr, ptr %taddr19, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 4, 1
  %31 = load %"char[]", ptr %bytes2, align 8, !dbg !2559
  %32 = extractvalue %"char[]" %31, 0, !dbg !2559
  %33 = extractvalue %"char[]" %31, 1, !dbg !2559
  %gt20 = icmp sgt i64 0, %33, !dbg !2559
  %34 = call i1 @llvm.expect.i1(i1 %gt20, i1 false), !dbg !2559
  br i1 %34, label %panic21, label %checkok28, !dbg !2559

checkok28:                                        ; preds = %if.exit
  %lt29 = icmp slt i64 %33, 4, !dbg !2559
  %35 = call i1 @llvm.expect.i1(i1 %lt29, i1 false), !dbg !2559
  br i1 %35, label %panic30, label %checkok37, !dbg !2559

checkok37:                                        ; preds = %checkok28
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !2559
  %37 = insertvalue %"char[]" %36, i64 4, 1, !dbg !2559
  %38 = extractvalue %"char[]" %37, 0, !dbg !2559
  %39 = extractvalue %"char[]" %30, 0, !dbg !2559
  %40 = extractvalue %"char[]" %30, 1, !dbg !2559
  %41 = extractvalue %"char[]" %37, 1, !dbg !2559
  %neq38 = icmp ne i64 %41, %40, !dbg !2559
  %42 = call i1 @llvm.expect.i1(i1 %neq38, i1 false), !dbg !2559
  br i1 %42, label %panic39, label %checkok46, !dbg !2559

checkok46:                                        ; preds = %checkok37
  %43 = mul i64 %40, 1, !dbg !2559
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !2559
  %44 = load i64, ptr %len, align 8, !dbg !2560
  %sub = sub i64 %44, 4, !dbg !2560
  store i64 %sub, ptr %len, align 8, !dbg !2560
  %45 = load %"char[]", ptr %bytes2, align 8, !dbg !2561
  %46 = extractvalue %"char[]" %45, 0, !dbg !2561
  %47 = extractvalue %"char[]" %45, 1, !dbg !2562
  %gt47 = icmp ugt i64 4, %47, !dbg !2562
  %48 = call i1 @llvm.expect.i1(i1 %gt47, i1 false), !dbg !2562
  br i1 %48, label %panic48, label %checkok55, !dbg !2562

checkok55:                                        ; preds = %checkok46
  %size56 = sub i64 %47, 4, !dbg !2561
  %ptradd57 = getelementptr inbounds i8, ptr %46, i64 4, !dbg !2561
  %49 = insertvalue %"char[]" undef, ptr %ptradd57, 0, !dbg !2561
  %50 = insertvalue %"char[]" %49, i64 %size56, 1, !dbg !2561
  store %"char[]" %50, ptr %bytes2, align 8, !dbg !2561
  br label %loop.cond, !dbg !2561

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.129, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !2563
  %ptradd58 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2563
  %hi = load i64, ptr %ptradd58, align 8, !dbg !2563
  store %"any[]" zeroinitializer, ptr %indirectarg59, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.130, i64 21, ptr @.str.131, i64 23, i32 26, ptr byval(%"any[]") align 8 %indirectarg59), !dbg !2566
  unreachable, !dbg !2567

expr_block.exit:                                  ; preds = %checkok18
  ret void, !dbg !2567

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2536
  call void %51(ptr @.panic_msg.14, i64 62, ptr @.file.128, i64 21, ptr @.func.21, i64 10, i32 26) #5, !dbg !2536
  unreachable, !dbg !2536

panic5:                                           ; preds = %if.then
  store i64 %18, ptr %taddr6, align 8
  %52 = insertvalue %any undef, ptr %taddr6, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %54 = insertvalue %any undef, ptr %taddr7, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd8, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2556
  unreachable, !dbg !2556

panic11:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr12, align 8
  %57 = insertvalue %any undef, ptr %taddr12, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr13, align 8
  %59 = insertvalue %any undef, ptr %taddr13, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %60, ptr %ptradd15, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg17) #5, !dbg !2556
  unreachable, !dbg !2556

panic21:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr22, align 8
  %62 = insertvalue %any undef, ptr %taddr22, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr23, align 8
  %64 = insertvalue %any undef, ptr %taddr23, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %65, ptr %ptradd25, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg27) #5, !dbg !2559
  unreachable, !dbg !2559

panic30:                                          ; preds = %checkok28
  store i64 3, ptr %taddr31, align 8
  %67 = insertvalue %any undef, ptr %taddr31, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr32, align 8
  %69 = insertvalue %any undef, ptr %taddr32, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots33, align 16
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots33, i64 16
  store %any %70, ptr %ptradd34, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots33, 0
  %"$$temp35" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp35", ptr %indirectarg36, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 60, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg36) #5, !dbg !2559
  unreachable, !dbg !2559

panic39:                                          ; preds = %checkok37
  store i64 %41, ptr %taddr40, align 8
  %72 = insertvalue %any undef, ptr %taddr40, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr41, align 8
  %74 = insertvalue %any undef, ptr %taddr41, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots42, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %75, ptr %ptradd43, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg45) #5, !dbg !2559
  unreachable, !dbg !2559

panic48:                                          ; preds = %checkok46
  store i64 %47, ptr %taddr49, align 8
  %77 = insertvalue %any undef, ptr %taddr49, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr50, align 8
  %79 = insertvalue %any undef, ptr %taddr50, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %80, ptr %ptradd52, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg54) #5, !dbg !2561
  unreachable, !dbg !2561
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.SimpleRandom.next_int128(ptr %0) #0 comdat !dbg !2568 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2571
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2571
  br i1 %2, label %panic, label %checkok, !dbg !2571

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2572, !DIExpression(), !2573)
  %3 = load ptr, ptr %self, align 8, !dbg !2574
  %4 = call i64 @std.math.random.SimpleRandom.next_long(ptr %3), !dbg !2576
  %zext = zext i64 %4 to i128, !dbg !2576
  %shl = shl i128 %zext, 64, !dbg !2576
  %5 = freeze i128 %shl, !dbg !2576
  %6 = load ptr, ptr %self, align 8, !dbg !2574
  %7 = call i64 @std.math.random.SimpleRandom.next_long(ptr %6), !dbg !2577
  %zext1 = zext i64 %7 to i128, !dbg !2577
  %add = add i128 %5, %zext1, !dbg !2576
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2573
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.128, i64 21, ptr @.func.28, i64 11, i32 27) #5, !dbg !2573
  unreachable, !dbg !2573
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.SimpleRandom.next_long(ptr %0) #0 comdat !dbg !2578 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2581
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2581
  br i1 %2, label %panic, label %checkok, !dbg !2581

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2582, !DIExpression(), !2583)
  %3 = load ptr, ptr %self, align 8, !dbg !2584
  %4 = call i32 @std.math.random.SimpleRandom.next_int(ptr %3), !dbg !2586
  %zext = zext i32 %4 to i64, !dbg !2586
  %shl = shl i64 %zext, 32, !dbg !2586
  %5 = freeze i64 %shl, !dbg !2586
  %6 = load ptr, ptr %self, align 8, !dbg !2584
  %7 = call i32 @std.math.random.SimpleRandom.next_int(ptr %6), !dbg !2587
  %zext1 = zext i32 %7 to i64, !dbg !2587
  %add = add i64 %5, %zext1, !dbg !2586
  ret i64 %add, !dbg !2586

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2583
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.128, i64 21, ptr @.func.19, i64 9, i32 28) #5, !dbg !2583
  unreachable, !dbg !2583
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.SimpleRandom.next_short(ptr %0) #0 comdat !dbg !2588 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2591
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2591
  br i1 %2, label %panic, label %checkok, !dbg !2591

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2592, !DIExpression(), !2593)
  %3 = load ptr, ptr %self, align 8, !dbg !2594
  %4 = call i32 @std.math.random.SimpleRandom.next_int(ptr %3), !dbg !2595
  %trunc = trunc i32 %4 to i16, !dbg !2595
  ret i16 %trunc, !dbg !2595

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2593
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.128, i64 21, ptr @.func.30, i64 10, i32 29) #5, !dbg !2593
  unreachable, !dbg !2593
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.SimpleRandom.next_byte(ptr %0) #0 comdat !dbg !2596 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2599
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2599
  br i1 %2, label %panic, label %checkok, !dbg !2599

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2600, !DIExpression(), !2601)
  %3 = load ptr, ptr %self, align 8, !dbg !2602
  %4 = call i32 @std.math.random.SimpleRandom.next_int(ptr %3), !dbg !2603
  %trunc = trunc i32 %4 to i8, !dbg !2603
  ret i8 %trunc, !dbg !2603

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2601
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.128, i64 21, ptr @.func.31, i64 9, i32 30) #5, !dbg !2601
  unreachable, !dbg !2601
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc128Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2604 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input7 = alloca %"char[]", align 8
  %return_value = alloca [4 x i128], align 16
  %taddr8 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !2609
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2609
  br i1 %4, label %panic, label %checkok, !dbg !2609

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2610, !DIExpression(), !2611)
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !2612, !DIExpression(), !2613)
  %5 = load ptr, ptr %self, align 8, !dbg !2614
  %checknull = icmp eq ptr %5, null, !dbg !2614
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2614
  br i1 %6, label %panic1, label %checkok2, !dbg !2614

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !2614
  %8 = urem i64 %7, 16, !dbg !2614
  %9 = icmp ne i64 %8, 0, !dbg !2614
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !2614
  br i1 %10, label %panic3, label %checkok6, !dbg !2614

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input7, ptr align 8 %input, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !2615, !DIExpression(), !2617)
  call void @llvm.memset.p0.i64(ptr align 16 %return_value, i8 0, i64 64, i1 false), !dbg !2617
  store ptr %return_value, ptr %taddr8, align 8
  %11 = load ptr, ptr %taddr8, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 64, 1
  %lo = load ptr, ptr %input7, align 8
  %ptradd9 = getelementptr inbounds i8, ptr %input7, i64 8
  %hi = load i64, ptr %ptradd9, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 64), !dbg !2619
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %5, ptr align 16 %return_value, i32 64, i1 false), !dbg !2620
  ret void, !dbg !2620

panic:                                            ; preds = %entry
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2611
  call void %14(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.16, i64 8, i32 15) #5, !dbg !2611
  unreachable, !dbg !2611

panic1:                                           ; preds = %checkok
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2614
  call void %15(ptr @.panic_msg.17, i64 45, ptr @.file.141, i64 11, ptr @.func.16, i64 8, i32 17) #5, !dbg !2614
  unreachable, !dbg !2614

panic3:                                           ; preds = %checkok2
  store i64 16, ptr %taddr, align 8
  %16 = insertvalue %any undef, ptr %taddr, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %18 = insertvalue %any undef, ptr %taddr4, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %17, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd5, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.141, i64 11, ptr @.func.16, i64 8, i32 17, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2614
  unreachable, !dbg !2614
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Sfc128Random.next_int128(ptr %0) #0 comdat !dbg !2621 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i128, align 16
  %self11 = alloca i128, align 16
  %shift = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2624
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2624
  br i1 %2, label %panic, label %checkok, !dbg !2624

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2625, !DIExpression(), !2626)
    #dbg_declare(ptr %s, !2627, !DIExpression(), !2628)
  %3 = load ptr, ptr %self, align 8, !dbg !2629
  store ptr %3, ptr %s, align 8, !dbg !2629
    #dbg_declare(ptr %result, !2630, !DIExpression(), !2631)
  %4 = load ptr, ptr %s, align 8, !dbg !2632
  %5 = load i128, ptr %4, align 16, !dbg !2633
  %6 = load ptr, ptr %s, align 8, !dbg !2634
  %ptradd = getelementptr inbounds i8, ptr %6, i64 16, !dbg !2635
  %7 = load i128, ptr %ptradd, align 16, !dbg !2635
  %add = add i128 %5, %7, !dbg !2632
  %8 = load ptr, ptr %s, align 8, !dbg !2636
  %ptradd1 = getelementptr inbounds i8, ptr %8, i64 48, !dbg !2637
  %9 = load i128, ptr %ptradd1, align 16, !dbg !2637
  %add2 = add i128 %add, %9, !dbg !2632
  store i128 %add2, ptr %result, align 16, !dbg !2632
  %10 = load ptr, ptr %s, align 8, !dbg !2638
  %11 = load ptr, ptr %s, align 8, !dbg !2639
  %ptradd3 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !2640
  %12 = load i128, ptr %ptradd3, align 16, !dbg !2640
  %13 = load ptr, ptr %s, align 8, !dbg !2641
  %ptradd4 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !2642
  %14 = load i128, ptr %ptradd4, align 16, !dbg !2642
  %lshr = lshr i128 %14, 11, !dbg !2641
  %15 = freeze i128 %lshr, !dbg !2641
  %xor = xor i128 %12, %15, !dbg !2639
  store i128 %xor, ptr %10, align 16, !dbg !2639
  %16 = load ptr, ptr %s, align 8, !dbg !2643
  %ptradd5 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !2644
  %17 = load ptr, ptr %s, align 8, !dbg !2645
  %ptradd6 = getelementptr inbounds i8, ptr %17, i64 32, !dbg !2646
  %18 = load i128, ptr %ptradd6, align 16, !dbg !2646
  %19 = load ptr, ptr %s, align 8, !dbg !2647
  %ptradd7 = getelementptr inbounds i8, ptr %19, i64 32, !dbg !2648
  %20 = load i128, ptr %ptradd7, align 16, !dbg !2648
  %shl = shl i128 %20, 3, !dbg !2647
  %21 = freeze i128 %shl, !dbg !2647
  %add8 = add i128 %18, %21, !dbg !2645
  store i128 %add8, ptr %ptradd5, align 16, !dbg !2645
  %22 = load ptr, ptr %s, align 8, !dbg !2649
  %ptradd9 = getelementptr inbounds i8, ptr %22, i64 32, !dbg !2650
  %23 = load ptr, ptr %s, align 8, !dbg !2651
  %ptradd10 = getelementptr inbounds i8, ptr %23, i64 32, !dbg !2652
  %24 = load i128, ptr %ptradd10, align 16
  store i128 %24, ptr %self11, align 16
  store i128 40, ptr %shift, align 16
  %25 = load i128, ptr %self11, align 16, !dbg !2653
  %26 = load i128, ptr %self11, align 16, !dbg !2655
  %27 = load i128, ptr %shift, align 16, !dbg !2656
  %28 = call i128 @llvm.fshr.i128(i128 %25, i128 %26, i128 %27), !dbg !2656
  %29 = load i128, ptr %result, align 16, !dbg !2657
  %add12 = add i128 %28, %29, !dbg !2651
  store i128 %add12, ptr %ptradd9, align 16, !dbg !2651
  %30 = load ptr, ptr %s, align 8, !dbg !2658
  %ptradd13 = getelementptr inbounds i8, ptr %30, i64 48, !dbg !2659
  %31 = load i128, ptr %ptradd13, align 16, !dbg !2659
  %add14 = add i128 %31, -129976298391535590297638237547755878347, !dbg !2658
  store i128 %add14, ptr %ptradd13, align 16, !dbg !2658
  %32 = load { i64, i64 }, ptr %result, align 16, !dbg !2660
  ret { i64, i64 } %32, !dbg !2660

panic:                                            ; preds = %entry
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2626
  call void %33(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.28, i64 11, i32 20) #5, !dbg !2626
  unreachable, !dbg !2626
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc128Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2661 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i128, align 16
  %result = alloca i128, align 16
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %taddr19 = alloca ptr, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %varargslots33 = alloca [2 x %any], align 16
  %indirectarg36 = alloca %"any[]", align 8
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %varargslots42 = alloca [2 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg59 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2662
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2662
  br i1 %4, label %panic, label %checkok, !dbg !2662

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2663, !DIExpression(), !2664)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !2665, !DIExpression(), !2666)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2667
  %5 = load i64, ptr %ptradd1, align 8, !dbg !2667
  %lt = icmp ult i64 0, %5, !dbg !2667
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2667

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2667
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.141, i64 11, ptr @.func.21, i64 10, i32 32) #5, !dbg !2667
  unreachable, !dbg !2667

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !2669, !DIExpression(), !2671)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !2672
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2672
  store i64 %7, ptr %len, align 8, !dbg !2672
  br label %loop.cond, !dbg !2673

loop.cond:                                        ; preds = %checkok55, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !2674
  %lt4 = icmp ult i64 0, %8, !dbg !2674
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !2674

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !2676, !DIExpression(), !2678)
  %9 = load ptr, ptr %self, align 8, !dbg !2679
  %10 = call { i64, i64 } @std.math.random.Sfc128Random.next_int128(ptr %9), !dbg !2680
  store { i64, i64 } %10, ptr %result, align 16
  %11 = load i128, ptr %result, align 16
  store i128 %11, ptr %value, align 16
  %12 = load i64, ptr %len, align 8, !dbg !2681
  %le = icmp ule i64 %12, 16, !dbg !2681
  br i1 %le, label %if.then, label %if.exit, !dbg !2681

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %13 = load ptr, ptr %taddr, align 8
  %14 = load i64, ptr %len, align 8, !dbg !2682
  %add = add i64 0, %14, !dbg !2682
  %size = sub i64 %add, 0, !dbg !2682
  %15 = insertvalue %"char[]" undef, ptr %13, 0, !dbg !2682
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !2682
  %17 = load %"char[]", ptr %bytes2, align 8, !dbg !2684
  %18 = extractvalue %"char[]" %17, 0, !dbg !2684
  %19 = extractvalue %"char[]" %17, 1, !dbg !2685
  %gt = icmp ugt i64 0, %19, !dbg !2685
  %20 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2685
  br i1 %20, label %panic5, label %checkok9, !dbg !2685

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %19, 0, !dbg !2684
  %21 = insertvalue %"char[]" undef, ptr %18, 0, !dbg !2684
  %22 = insertvalue %"char[]" %21, i64 %size10, 1, !dbg !2684
  %23 = extractvalue %"char[]" %22, 0, !dbg !2684
  %24 = extractvalue %"char[]" %16, 0, !dbg !2684
  %25 = extractvalue %"char[]" %16, 1, !dbg !2684
  %26 = extractvalue %"char[]" %22, 1, !dbg !2684
  %neq = icmp ne i64 %26, %25, !dbg !2684
  %27 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2684
  br i1 %27, label %panic11, label %checkok18, !dbg !2684

checkok18:                                        ; preds = %checkok9
  %28 = mul i64 %25, 1, !dbg !2684
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %23, ptr align 1 %24, i64 %28, i1 false), !dbg !2684
  br label %expr_block.exit, !dbg !2686

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr19, align 8
  %29 = load ptr, ptr %taddr19, align 8
  %30 = insertvalue %"char[]" undef, ptr %29, 0
  %31 = insertvalue %"char[]" %30, i64 16, 1
  %32 = load %"char[]", ptr %bytes2, align 8, !dbg !2687
  %33 = extractvalue %"char[]" %32, 0, !dbg !2687
  %34 = extractvalue %"char[]" %32, 1, !dbg !2687
  %gt20 = icmp sgt i64 0, %34, !dbg !2687
  %35 = call i1 @llvm.expect.i1(i1 %gt20, i1 false), !dbg !2687
  br i1 %35, label %panic21, label %checkok28, !dbg !2687

checkok28:                                        ; preds = %if.exit
  %lt29 = icmp slt i64 %34, 16, !dbg !2687
  %36 = call i1 @llvm.expect.i1(i1 %lt29, i1 false), !dbg !2687
  br i1 %36, label %panic30, label %checkok37, !dbg !2687

checkok37:                                        ; preds = %checkok28
  %37 = insertvalue %"char[]" undef, ptr %33, 0, !dbg !2687
  %38 = insertvalue %"char[]" %37, i64 16, 1, !dbg !2687
  %39 = extractvalue %"char[]" %38, 0, !dbg !2687
  %40 = extractvalue %"char[]" %31, 0, !dbg !2687
  %41 = extractvalue %"char[]" %31, 1, !dbg !2687
  %42 = extractvalue %"char[]" %38, 1, !dbg !2687
  %neq38 = icmp ne i64 %42, %41, !dbg !2687
  %43 = call i1 @llvm.expect.i1(i1 %neq38, i1 false), !dbg !2687
  br i1 %43, label %panic39, label %checkok46, !dbg !2687

checkok46:                                        ; preds = %checkok37
  %44 = mul i64 %41, 1, !dbg !2687
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %39, ptr align 1 %40, i64 %44, i1 false), !dbg !2687
  %45 = load i64, ptr %len, align 8, !dbg !2688
  %sub = sub i64 %45, 16, !dbg !2688
  store i64 %sub, ptr %len, align 8, !dbg !2688
  %46 = load %"char[]", ptr %bytes2, align 8, !dbg !2689
  %47 = extractvalue %"char[]" %46, 0, !dbg !2689
  %48 = extractvalue %"char[]" %46, 1, !dbg !2690
  %gt47 = icmp ugt i64 16, %48, !dbg !2690
  %49 = call i1 @llvm.expect.i1(i1 %gt47, i1 false), !dbg !2690
  br i1 %49, label %panic48, label %checkok55, !dbg !2690

checkok55:                                        ; preds = %checkok46
  %size56 = sub i64 %48, 16, !dbg !2689
  %ptradd57 = getelementptr inbounds i8, ptr %47, i64 16, !dbg !2689
  %50 = insertvalue %"char[]" undef, ptr %ptradd57, 0, !dbg !2689
  %51 = insertvalue %"char[]" %50, i64 %size56, 1, !dbg !2689
  store %"char[]" %51, ptr %bytes2, align 8, !dbg !2689
  br label %loop.cond, !dbg !2689

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.142, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !2691
  %ptradd58 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2691
  %hi = load i64, ptr %ptradd58, align 8, !dbg !2691
  store %"any[]" zeroinitializer, ptr %indirectarg59, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.143, i64 11, ptr @.str.144, i64 23, i32 34, ptr byval(%"any[]") align 8 %indirectarg59), !dbg !2694
  unreachable, !dbg !2695

expr_block.exit:                                  ; preds = %checkok18
  ret void, !dbg !2695

panic:                                            ; preds = %entry
  %52 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2664
  call void %52(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.21, i64 10, i32 34) #5, !dbg !2664
  unreachable, !dbg !2664

panic5:                                           ; preds = %if.then
  store i64 %19, ptr %taddr6, align 8
  %53 = insertvalue %any undef, ptr %taddr6, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %55 = insertvalue %any undef, ptr %taddr7, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %54, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %56, ptr %ptradd8, align 16
  %57 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %57, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2684
  unreachable, !dbg !2684

panic11:                                          ; preds = %checkok9
  store i64 %26, ptr %taddr12, align 8
  %58 = insertvalue %any undef, ptr %taddr12, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr13, align 8
  %60 = insertvalue %any undef, ptr %taddr13, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %59, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %61, ptr %ptradd15, align 16
  %62 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %62, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg17) #5, !dbg !2684
  unreachable, !dbg !2684

panic21:                                          ; preds = %if.exit
  store i64 %34, ptr %taddr22, align 8
  %63 = insertvalue %any undef, ptr %taddr22, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr23, align 8
  %65 = insertvalue %any undef, ptr %taddr23, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %64, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %66, ptr %ptradd25, align 16
  %67 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %67, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg27) #5, !dbg !2687
  unreachable, !dbg !2687

panic30:                                          ; preds = %checkok28
  store i64 15, ptr %taddr31, align 8
  %68 = insertvalue %any undef, ptr %taddr31, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %34, ptr %taddr32, align 8
  %70 = insertvalue %any undef, ptr %taddr32, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %69, ptr %varargslots33, align 16
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots33, i64 16
  store %any %71, ptr %ptradd34, align 16
  %72 = insertvalue %"any[]" undef, ptr %varargslots33, 0
  %"$$temp35" = insertvalue %"any[]" %72, i64 2, 1
  store %"any[]" %"$$temp35", ptr %indirectarg36, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 60, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg36) #5, !dbg !2687
  unreachable, !dbg !2687

panic39:                                          ; preds = %checkok37
  store i64 %42, ptr %taddr40, align 8
  %73 = insertvalue %any undef, ptr %taddr40, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr41, align 8
  %75 = insertvalue %any undef, ptr %taddr41, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %74, ptr %varargslots42, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %76, ptr %ptradd43, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg45) #5, !dbg !2687
  unreachable, !dbg !2687

panic48:                                          ; preds = %checkok46
  store i64 %48, ptr %taddr49, align 8
  %78 = insertvalue %any undef, ptr %taddr49, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 16, ptr %taddr50, align 8
  %80 = insertvalue %any undef, ptr %taddr50, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %79, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %81, ptr %ptradd52, align 16
  %82 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %82, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg54) #5, !dbg !2689
  unreachable, !dbg !2689
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Sfc128Random.next_long(ptr %0) #0 comdat !dbg !2696 {
entry:
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2699
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2699
  br i1 %2, label %panic, label %checkok, !dbg !2699

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2700, !DIExpression(), !2701)
  %3 = load ptr, ptr %self, align 8, !dbg !2702
  %4 = call { i64, i64 } @std.math.random.Sfc128Random.next_int128(ptr %3), !dbg !2703
  store { i64, i64 } %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i32
  %zext = zext i32 %trunc to i64
  ret i64 %zext

panic:                                            ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2701
  call void %6(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.19, i64 9, i32 35) #5, !dbg !2701
  unreachable, !dbg !2701
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Sfc128Random.next_int(ptr %0) #0 comdat !dbg !2704 {
entry:
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2707
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2707
  br i1 %2, label %panic, label %checkok, !dbg !2707

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2708, !DIExpression(), !2709)
  %3 = load ptr, ptr %self, align 8, !dbg !2710
  %4 = call { i64, i64 } @std.math.random.Sfc128Random.next_int128(ptr %3), !dbg !2711
  store { i64, i64 } %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i32
  ret i32 %trunc

panic:                                            ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2709
  call void %6(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.29, i64 8, i32 36) #5, !dbg !2709
  unreachable, !dbg !2709
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Sfc128Random.next_short(ptr %0) #0 comdat !dbg !2712 {
entry:
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2715
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2715
  br i1 %2, label %panic, label %checkok, !dbg !2715

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2716, !DIExpression(), !2717)
  %3 = load ptr, ptr %self, align 8, !dbg !2718
  %4 = call { i64, i64 } @std.math.random.Sfc128Random.next_int128(ptr %3), !dbg !2719
  store { i64, i64 } %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i16
  ret i16 %trunc

panic:                                            ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2717
  call void %6(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.30, i64 10, i32 37) #5, !dbg !2717
  unreachable, !dbg !2717
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Sfc128Random.next_byte(ptr %0) #0 comdat !dbg !2720 {
entry:
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2723
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2723
  br i1 %2, label %panic, label %checkok, !dbg !2723

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2724, !DIExpression(), !2725)
  %3 = load ptr, ptr %self, align 8, !dbg !2726
  %4 = call { i64, i64 } @std.math.random.Sfc128Random.next_int128(ptr %3), !dbg !2727
  store { i64, i64 } %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i8
  ret i8 %trunc

panic:                                            ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2725
  call void %6(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.31, i64 9, i32 38) #5, !dbg !2725
  unreachable, !dbg !2725
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc64Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2728 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input7 = alloca %"char[]", align 8
  %return_value = alloca [4 x i64], align 16
  %taddr8 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !2732
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2732
  br i1 %4, label %panic, label %checkok, !dbg !2732

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2733, !DIExpression(), !2734)
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !2735, !DIExpression(), !2736)
  %5 = load ptr, ptr %self, align 8, !dbg !2737
  %checknull = icmp eq ptr %5, null, !dbg !2737
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2737
  br i1 %6, label %panic1, label %checkok2, !dbg !2737

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !2737
  %8 = urem i64 %7, 8, !dbg !2737
  %9 = icmp ne i64 %8, 0, !dbg !2737
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !2737
  br i1 %10, label %panic3, label %checkok6, !dbg !2737

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input7, ptr align 8 %input, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !2738, !DIExpression(), !2740)
  call void @llvm.memset.p0.i64(ptr align 16 %return_value, i8 0, i64 32, i1 false), !dbg !2740
  store ptr %return_value, ptr %taddr8, align 8
  %11 = load ptr, ptr %taddr8, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 32, 1
  %lo = load ptr, ptr %input7, align 8
  %ptradd9 = getelementptr inbounds i8, ptr %input7, i64 8
  %hi = load i64, ptr %ptradd9, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 32), !dbg !2742
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 16 %return_value, i32 32, i1 false), !dbg !2743
  ret void, !dbg !2743

panic:                                            ; preds = %entry
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2734
  call void %14(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.16, i64 8, i32 45) #5, !dbg !2734
  unreachable, !dbg !2734

panic1:                                           ; preds = %checkok
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2737
  call void %15(ptr @.panic_msg.17, i64 45, ptr @.file.141, i64 11, ptr @.func.16, i64 8, i32 47) #5, !dbg !2737
  unreachable, !dbg !2737

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %16 = insertvalue %any undef, ptr %taddr, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %18 = insertvalue %any undef, ptr %taddr4, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %17, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd5, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.141, i64 11, ptr @.func.16, i64 8, i32 47, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2737
  unreachable, !dbg !2737
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Sfc64Random.next_long(ptr %0) #0 comdat !dbg !2744 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i64, align 8
  %self11 = alloca i64, align 8
  %shift = alloca i64, align 8
  %1 = icmp eq ptr %0, null, !dbg !2747
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2747
  br i1 %2, label %panic, label %checkok, !dbg !2747

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2748, !DIExpression(), !2749)
    #dbg_declare(ptr %s, !2750, !DIExpression(), !2751)
  %3 = load ptr, ptr %self, align 8, !dbg !2752
  store ptr %3, ptr %s, align 8, !dbg !2752
    #dbg_declare(ptr %result, !2753, !DIExpression(), !2754)
  %4 = load ptr, ptr %s, align 8, !dbg !2755
  %5 = load i64, ptr %4, align 8, !dbg !2756
  %6 = load ptr, ptr %s, align 8, !dbg !2757
  %ptradd = getelementptr inbounds i8, ptr %6, i64 8, !dbg !2758
  %7 = load i64, ptr %ptradd, align 8, !dbg !2758
  %add = add i64 %5, %7, !dbg !2755
  %8 = load ptr, ptr %s, align 8, !dbg !2759
  %ptradd1 = getelementptr inbounds i8, ptr %8, i64 24, !dbg !2760
  %9 = load i64, ptr %ptradd1, align 8, !dbg !2760
  %add2 = add i64 %add, %9, !dbg !2755
  store i64 %add2, ptr %result, align 8, !dbg !2755
  %10 = load ptr, ptr %s, align 8, !dbg !2761
  %11 = load ptr, ptr %s, align 8, !dbg !2762
  %ptradd3 = getelementptr inbounds i8, ptr %11, i64 8, !dbg !2763
  %12 = load i64, ptr %ptradd3, align 8, !dbg !2763
  %13 = load ptr, ptr %s, align 8, !dbg !2764
  %ptradd4 = getelementptr inbounds i8, ptr %13, i64 8, !dbg !2765
  %14 = load i64, ptr %ptradd4, align 8, !dbg !2765
  %lshr = lshr i64 %14, 11, !dbg !2764
  %15 = freeze i64 %lshr, !dbg !2764
  %xor = xor i64 %12, %15, !dbg !2762
  store i64 %xor, ptr %10, align 8, !dbg !2762
  %16 = load ptr, ptr %s, align 8, !dbg !2766
  %ptradd5 = getelementptr inbounds i8, ptr %16, i64 8, !dbg !2767
  %17 = load ptr, ptr %s, align 8, !dbg !2768
  %ptradd6 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !2769
  %18 = load i64, ptr %ptradd6, align 8, !dbg !2769
  %19 = load ptr, ptr %s, align 8, !dbg !2770
  %ptradd7 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !2771
  %20 = load i64, ptr %ptradd7, align 8, !dbg !2771
  %shl = shl i64 %20, 3, !dbg !2770
  %21 = freeze i64 %shl, !dbg !2770
  %add8 = add i64 %18, %21, !dbg !2768
  store i64 %add8, ptr %ptradd5, align 8, !dbg !2768
  %22 = load ptr, ptr %s, align 8, !dbg !2772
  %ptradd9 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !2773
  %23 = load ptr, ptr %s, align 8, !dbg !2774
  %ptradd10 = getelementptr inbounds i8, ptr %23, i64 16, !dbg !2775
  %24 = load i64, ptr %ptradd10, align 8
  store i64 %24, ptr %self11, align 8
  store i64 40, ptr %shift, align 8
  %25 = load i64, ptr %self11, align 8, !dbg !2776
  %26 = load i64, ptr %self11, align 8, !dbg !2778
  %27 = load i64, ptr %shift, align 8, !dbg !2779
  %28 = call i64 @llvm.fshr.i64(i64 %25, i64 %26, i64 %27), !dbg !2779
  %29 = load i64, ptr %result, align 8, !dbg !2780
  %add12 = add i64 %28, %29, !dbg !2774
  store i64 %add12, ptr %ptradd9, align 8, !dbg !2774
  %30 = load ptr, ptr %s, align 8, !dbg !2781
  %ptradd13 = getelementptr inbounds i8, ptr %30, i64 24, !dbg !2782
  %31 = load i64, ptr %ptradd13, align 8, !dbg !2782
  %add14 = add i64 %31, -7046029254386353131, !dbg !2781
  store i64 %add14, ptr %ptradd13, align 8, !dbg !2781
  %32 = load i64, ptr %result, align 8, !dbg !2783
  ret i64 %32, !dbg !2783

panic:                                            ; preds = %entry
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2749
  call void %33(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.19, i64 9, i32 50) #5, !dbg !2749
  unreachable, !dbg !2749
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc64Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2784 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %taddr19 = alloca ptr, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %varargslots33 = alloca [2 x %any], align 16
  %indirectarg36 = alloca %"any[]", align 8
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %varargslots42 = alloca [2 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg59 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2785
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2785
  br i1 %4, label %panic, label %checkok, !dbg !2785

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2786, !DIExpression(), !2787)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !2788, !DIExpression(), !2789)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2790
  %5 = load i64, ptr %ptradd1, align 8, !dbg !2790
  %lt = icmp ult i64 0, %5, !dbg !2790
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2790

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2790
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.141, i64 11, ptr @.func.21, i64 10, i32 62) #5, !dbg !2790
  unreachable, !dbg !2790

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !2792, !DIExpression(), !2794)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !2795
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2795
  store i64 %7, ptr %len, align 8, !dbg !2795
  br label %loop.cond, !dbg !2796

loop.cond:                                        ; preds = %checkok55, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !2797
  %lt4 = icmp ult i64 0, %8, !dbg !2797
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !2797

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !2799, !DIExpression(), !2801)
  %9 = load ptr, ptr %self, align 8, !dbg !2802
  %10 = call i64 @std.math.random.Sfc64Random.next_long(ptr %9), !dbg !2803
  store i64 %10, ptr %value, align 8, !dbg !2803
  %11 = load i64, ptr %len, align 8, !dbg !2804
  %le = icmp ule i64 %11, 8, !dbg !2804
  br i1 %le, label %if.then, label %if.exit, !dbg !2804

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !2805
  %add = add i64 0, %13, !dbg !2805
  %size = sub i64 %add, 0, !dbg !2805
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !2805
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !2805
  %16 = load %"char[]", ptr %bytes2, align 8, !dbg !2807
  %17 = extractvalue %"char[]" %16, 0, !dbg !2807
  %18 = extractvalue %"char[]" %16, 1, !dbg !2808
  %gt = icmp ugt i64 0, %18, !dbg !2808
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2808
  br i1 %19, label %panic5, label %checkok9, !dbg !2808

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %18, 0, !dbg !2807
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !2807
  %21 = insertvalue %"char[]" %20, i64 %size10, 1, !dbg !2807
  %22 = extractvalue %"char[]" %21, 0, !dbg !2807
  %23 = extractvalue %"char[]" %15, 0, !dbg !2807
  %24 = extractvalue %"char[]" %15, 1, !dbg !2807
  %25 = extractvalue %"char[]" %21, 1, !dbg !2807
  %neq = icmp ne i64 %25, %24, !dbg !2807
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2807
  br i1 %26, label %panic11, label %checkok18, !dbg !2807

checkok18:                                        ; preds = %checkok9
  %27 = mul i64 %24, 1, !dbg !2807
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !2807
  br label %expr_block.exit, !dbg !2809

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr19, align 8
  %28 = load ptr, ptr %taddr19, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 8, 1
  %31 = load %"char[]", ptr %bytes2, align 8, !dbg !2810
  %32 = extractvalue %"char[]" %31, 0, !dbg !2810
  %33 = extractvalue %"char[]" %31, 1, !dbg !2810
  %gt20 = icmp sgt i64 0, %33, !dbg !2810
  %34 = call i1 @llvm.expect.i1(i1 %gt20, i1 false), !dbg !2810
  br i1 %34, label %panic21, label %checkok28, !dbg !2810

checkok28:                                        ; preds = %if.exit
  %lt29 = icmp slt i64 %33, 8, !dbg !2810
  %35 = call i1 @llvm.expect.i1(i1 %lt29, i1 false), !dbg !2810
  br i1 %35, label %panic30, label %checkok37, !dbg !2810

checkok37:                                        ; preds = %checkok28
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !2810
  %37 = insertvalue %"char[]" %36, i64 8, 1, !dbg !2810
  %38 = extractvalue %"char[]" %37, 0, !dbg !2810
  %39 = extractvalue %"char[]" %30, 0, !dbg !2810
  %40 = extractvalue %"char[]" %30, 1, !dbg !2810
  %41 = extractvalue %"char[]" %37, 1, !dbg !2810
  %neq38 = icmp ne i64 %41, %40, !dbg !2810
  %42 = call i1 @llvm.expect.i1(i1 %neq38, i1 false), !dbg !2810
  br i1 %42, label %panic39, label %checkok46, !dbg !2810

checkok46:                                        ; preds = %checkok37
  %43 = mul i64 %40, 1, !dbg !2810
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !2810
  %44 = load i64, ptr %len, align 8, !dbg !2811
  %sub = sub i64 %44, 8, !dbg !2811
  store i64 %sub, ptr %len, align 8, !dbg !2811
  %45 = load %"char[]", ptr %bytes2, align 8, !dbg !2812
  %46 = extractvalue %"char[]" %45, 0, !dbg !2812
  %47 = extractvalue %"char[]" %45, 1, !dbg !2813
  %gt47 = icmp ugt i64 8, %47, !dbg !2813
  %48 = call i1 @llvm.expect.i1(i1 %gt47, i1 false), !dbg !2813
  br i1 %48, label %panic48, label %checkok55, !dbg !2813

checkok55:                                        ; preds = %checkok46
  %size56 = sub i64 %47, 8, !dbg !2812
  %ptradd57 = getelementptr inbounds i8, ptr %46, i64 8, !dbg !2812
  %49 = insertvalue %"char[]" undef, ptr %ptradd57, 0, !dbg !2812
  %50 = insertvalue %"char[]" %49, i64 %size56, 1, !dbg !2812
  store %"char[]" %50, ptr %bytes2, align 8, !dbg !2812
  br label %loop.cond, !dbg !2812

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.145, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !2814
  %ptradd58 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2814
  %hi = load i64, ptr %ptradd58, align 8, !dbg !2814
  store %"any[]" zeroinitializer, ptr %indirectarg59, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.146, i64 11, ptr @.str.147, i64 22, i32 64, ptr byval(%"any[]") align 8 %indirectarg59), !dbg !2817
  unreachable, !dbg !2818

expr_block.exit:                                  ; preds = %checkok18
  ret void, !dbg !2818

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2787
  call void %51(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.21, i64 10, i32 64) #5, !dbg !2787
  unreachable, !dbg !2787

panic5:                                           ; preds = %if.then
  store i64 %18, ptr %taddr6, align 8
  %52 = insertvalue %any undef, ptr %taddr6, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %54 = insertvalue %any undef, ptr %taddr7, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd8, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2807
  unreachable, !dbg !2807

panic11:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr12, align 8
  %57 = insertvalue %any undef, ptr %taddr12, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr13, align 8
  %59 = insertvalue %any undef, ptr %taddr13, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %60, ptr %ptradd15, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg17) #5, !dbg !2807
  unreachable, !dbg !2807

panic21:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr22, align 8
  %62 = insertvalue %any undef, ptr %taddr22, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr23, align 8
  %64 = insertvalue %any undef, ptr %taddr23, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %65, ptr %ptradd25, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg27) #5, !dbg !2810
  unreachable, !dbg !2810

panic30:                                          ; preds = %checkok28
  store i64 7, ptr %taddr31, align 8
  %67 = insertvalue %any undef, ptr %taddr31, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr32, align 8
  %69 = insertvalue %any undef, ptr %taddr32, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots33, align 16
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots33, i64 16
  store %any %70, ptr %ptradd34, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots33, 0
  %"$$temp35" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp35", ptr %indirectarg36, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 60, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg36) #5, !dbg !2810
  unreachable, !dbg !2810

panic39:                                          ; preds = %checkok37
  store i64 %41, ptr %taddr40, align 8
  %72 = insertvalue %any undef, ptr %taddr40, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr41, align 8
  %74 = insertvalue %any undef, ptr %taddr41, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots42, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %75, ptr %ptradd43, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg45) #5, !dbg !2810
  unreachable, !dbg !2810

panic48:                                          ; preds = %checkok46
  store i64 %47, ptr %taddr49, align 8
  %77 = insertvalue %any undef, ptr %taddr49, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr50, align 8
  %79 = insertvalue %any undef, ptr %taddr50, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %80, ptr %ptradd52, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg54) #5, !dbg !2812
  unreachable, !dbg !2812
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Sfc64Random.next_int128(ptr %0) #0 comdat !dbg !2819 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2822
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2822
  br i1 %2, label %panic, label %checkok, !dbg !2822

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2823, !DIExpression(), !2824)
  %3 = load ptr, ptr %self, align 8, !dbg !2825
  %4 = call i64 @std.math.random.Sfc64Random.next_long(ptr %3), !dbg !2827
  %zext = zext i64 %4 to i128, !dbg !2827
  %shl = shl i128 %zext, 64, !dbg !2827
  %5 = freeze i128 %shl, !dbg !2827
  %6 = load ptr, ptr %self, align 8, !dbg !2825
  %7 = call i64 @std.math.random.Sfc64Random.next_long(ptr %6), !dbg !2828
  %zext1 = zext i64 %7 to i128, !dbg !2828
  %add = add i128 %5, %zext1, !dbg !2827
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2824
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.28, i64 11, i32 65) #5, !dbg !2824
  unreachable, !dbg !2824
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Sfc64Random.next_int(ptr %0) #0 comdat !dbg !2829 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2832
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2832
  br i1 %2, label %panic, label %checkok, !dbg !2832

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2833, !DIExpression(), !2834)
  %3 = load ptr, ptr %self, align 8, !dbg !2835
  %4 = call i64 @std.math.random.Sfc64Random.next_long(ptr %3), !dbg !2836
  %trunc = trunc i64 %4 to i32, !dbg !2836
  ret i32 %trunc, !dbg !2836

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2834
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.29, i64 8, i32 66) #5, !dbg !2834
  unreachable, !dbg !2834
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Sfc64Random.next_short(ptr %0) #0 comdat !dbg !2837 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2840
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2840
  br i1 %2, label %panic, label %checkok, !dbg !2840

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2841, !DIExpression(), !2842)
  %3 = load ptr, ptr %self, align 8, !dbg !2843
  %4 = call i64 @std.math.random.Sfc64Random.next_long(ptr %3), !dbg !2844
  %trunc = trunc i64 %4 to i16, !dbg !2844
  ret i16 %trunc, !dbg !2844

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2842
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.30, i64 10, i32 67) #5, !dbg !2842
  unreachable, !dbg !2842
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Sfc64Random.next_byte(ptr %0) #0 comdat !dbg !2845 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2848
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2848
  br i1 %2, label %panic, label %checkok, !dbg !2848

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2849, !DIExpression(), !2850)
  %3 = load ptr, ptr %self, align 8, !dbg !2851
  %4 = call i64 @std.math.random.Sfc64Random.next_long(ptr %3), !dbg !2852
  %trunc = trunc i64 %4 to i8, !dbg !2852
  ret i8 %trunc, !dbg !2852

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2850
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.31, i64 9, i32 68) #5, !dbg !2850
  unreachable, !dbg !2850
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc32Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2853 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input7 = alloca %"char[]", align 8
  %return_value = alloca [4 x i32], align 16
  %taddr11 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !2858
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2858
  br i1 %4, label %panic, label %checkok, !dbg !2858

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2859, !DIExpression(), !2860)
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !2861, !DIExpression(), !2862)
  %5 = load ptr, ptr %self, align 8, !dbg !2863
  %checknull = icmp eq ptr %5, null, !dbg !2863
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2863
  br i1 %6, label %panic1, label %checkok2, !dbg !2863

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !2863
  %8 = urem i64 %7, 4, !dbg !2863
  %9 = icmp ne i64 %8, 0, !dbg !2863
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !2863
  br i1 %10, label %panic3, label %checkok6, !dbg !2863

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input7, ptr align 8 %input, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !2864, !DIExpression(), !2866)
  store i32 0, ptr %return_value, align 4, !dbg !2866
  %ptradd8 = getelementptr inbounds i8, ptr %return_value, i64 4, !dbg !2866
  store i32 0, ptr %ptradd8, align 4, !dbg !2866
  %ptradd9 = getelementptr inbounds i8, ptr %return_value, i64 8, !dbg !2866
  store i32 0, ptr %ptradd9, align 4, !dbg !2866
  %ptradd10 = getelementptr inbounds i8, ptr %return_value, i64 12, !dbg !2866
  store i32 0, ptr %ptradd10, align 4, !dbg !2866
  store ptr %return_value, ptr %taddr11, align 8
  %11 = load ptr, ptr %taddr11, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 16, 1
  %lo = load ptr, ptr %input7, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %input7, i64 8
  %hi = load i64, ptr %ptradd12, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 16), !dbg !2868
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %5, ptr align 16 %return_value, i32 16, i1 false), !dbg !2869
  ret void, !dbg !2869

panic:                                            ; preds = %entry
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2860
  call void %14(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.16, i64 8, i32 74) #5, !dbg !2860
  unreachable, !dbg !2860

panic1:                                           ; preds = %checkok
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2863
  call void %15(ptr @.panic_msg.17, i64 45, ptr @.file.141, i64 11, ptr @.func.16, i64 8, i32 76) #5, !dbg !2863
  unreachable, !dbg !2863

panic3:                                           ; preds = %checkok2
  store i64 4, ptr %taddr, align 8
  %16 = insertvalue %any undef, ptr %taddr, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %18 = insertvalue %any undef, ptr %taddr4, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %17, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd5, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.141, i64 11, ptr @.func.16, i64 8, i32 76, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2863
  unreachable, !dbg !2863
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Sfc32Random.next_int(ptr %0) #0 comdat !dbg !2870 {
entry:
  %sfc = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i32, align 4
  %self = alloca i32, align 4
  %shift = alloca i32, align 4
  %1 = icmp eq ptr %0, null, !dbg !2873
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2873
  br i1 %2, label %panic, label %checkok, !dbg !2873

checkok:                                          ; preds = %entry
  store ptr %0, ptr %sfc, align 8
    #dbg_declare(ptr %sfc, !2874, !DIExpression(), !2875)
    #dbg_declare(ptr %s, !2876, !DIExpression(), !2877)
  %3 = load ptr, ptr %sfc, align 8, !dbg !2878
  store ptr %3, ptr %s, align 8, !dbg !2878
    #dbg_declare(ptr %result, !2879, !DIExpression(), !2880)
  %4 = load ptr, ptr %s, align 8, !dbg !2881
  %5 = load i32, ptr %4, align 4, !dbg !2882
  %6 = load ptr, ptr %s, align 8, !dbg !2883
  %ptradd = getelementptr inbounds i8, ptr %6, i64 4, !dbg !2884
  %7 = load i32, ptr %ptradd, align 4, !dbg !2884
  %add = add i32 %5, %7, !dbg !2881
  %8 = load ptr, ptr %s, align 8, !dbg !2885
  %ptradd1 = getelementptr inbounds i8, ptr %8, i64 12, !dbg !2886
  %9 = load i32, ptr %ptradd1, align 4, !dbg !2886
  %add2 = add i32 %add, %9, !dbg !2881
  store i32 %add2, ptr %result, align 4, !dbg !2881
  %10 = load ptr, ptr %s, align 8, !dbg !2887
  %11 = load ptr, ptr %s, align 8, !dbg !2888
  %ptradd3 = getelementptr inbounds i8, ptr %11, i64 4, !dbg !2889
  %12 = load i32, ptr %ptradd3, align 4, !dbg !2889
  %13 = load ptr, ptr %s, align 8, !dbg !2890
  %ptradd4 = getelementptr inbounds i8, ptr %13, i64 4, !dbg !2891
  %14 = load i32, ptr %ptradd4, align 4, !dbg !2891
  %lshr = lshr i32 %14, 9, !dbg !2890
  %15 = freeze i32 %lshr, !dbg !2890
  %xor = xor i32 %12, %15, !dbg !2888
  store i32 %xor, ptr %10, align 4, !dbg !2888
  %16 = load ptr, ptr %s, align 8, !dbg !2892
  %ptradd5 = getelementptr inbounds i8, ptr %16, i64 4, !dbg !2893
  %17 = load ptr, ptr %s, align 8, !dbg !2894
  %ptradd6 = getelementptr inbounds i8, ptr %17, i64 8, !dbg !2895
  %18 = load i32, ptr %ptradd6, align 4, !dbg !2895
  %19 = load ptr, ptr %s, align 8, !dbg !2896
  %ptradd7 = getelementptr inbounds i8, ptr %19, i64 8, !dbg !2897
  %20 = load i32, ptr %ptradd7, align 4, !dbg !2897
  %shl = shl i32 %20, 3, !dbg !2896
  %21 = freeze i32 %shl, !dbg !2896
  %add8 = add i32 %18, %21, !dbg !2894
  store i32 %add8, ptr %ptradd5, align 4, !dbg !2894
  %22 = load ptr, ptr %s, align 8, !dbg !2898
  %ptradd9 = getelementptr inbounds i8, ptr %22, i64 8, !dbg !2899
  %23 = load ptr, ptr %s, align 8, !dbg !2900
  %ptradd10 = getelementptr inbounds i8, ptr %23, i64 8, !dbg !2901
  %24 = load i32, ptr %ptradd10, align 4
  store i32 %24, ptr %self, align 4
  store i32 11, ptr %shift, align 4
  %25 = load i32, ptr %self, align 4, !dbg !2902
  %26 = load i32, ptr %self, align 4, !dbg !2904
  %27 = load i32, ptr %shift, align 4, !dbg !2905
  %28 = call i32 @llvm.fshr.i32(i32 %25, i32 %26, i32 %27), !dbg !2905
  %29 = load i32, ptr %result, align 4, !dbg !2906
  %add11 = add i32 %28, %29, !dbg !2900
  store i32 %add11, ptr %ptradd9, align 4, !dbg !2900
  %30 = load ptr, ptr %s, align 8, !dbg !2907
  %ptradd12 = getelementptr inbounds i8, ptr %30, i64 12, !dbg !2908
  %31 = load i32, ptr %ptradd12, align 4, !dbg !2908
  %add13 = add i32 %31, -1640531527, !dbg !2907
  store i32 %add13, ptr %ptradd12, align 4, !dbg !2907
  %32 = load i32, ptr %result, align 4, !dbg !2909
  ret i32 %32, !dbg !2909

panic:                                            ; preds = %entry
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2875
  call void %33(ptr @.panic_msg.148, i64 61, ptr @.file.141, i64 11, ptr @.func.29, i64 8, i32 79) #5, !dbg !2875
  unreachable, !dbg !2875
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc32Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2910 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %taddr19 = alloca ptr, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %varargslots33 = alloca [2 x %any], align 16
  %indirectarg36 = alloca %"any[]", align 8
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %varargslots42 = alloca [2 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg59 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2911
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2911
  br i1 %4, label %panic, label %checkok, !dbg !2911

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2912, !DIExpression(), !2913)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !2914, !DIExpression(), !2915)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2916
  %5 = load i64, ptr %ptradd1, align 8, !dbg !2916
  %lt = icmp ult i64 0, %5, !dbg !2916
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2916

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2916
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.141, i64 11, ptr @.func.21, i64 10, i32 91) #5, !dbg !2916
  unreachable, !dbg !2916

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !2918, !DIExpression(), !2920)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !2921
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2921
  store i64 %7, ptr %len, align 8, !dbg !2921
  br label %loop.cond, !dbg !2922

loop.cond:                                        ; preds = %checkok55, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !2923
  %lt4 = icmp ult i64 0, %8, !dbg !2923
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !2923

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !2925, !DIExpression(), !2927)
  %9 = load ptr, ptr %self, align 8, !dbg !2928
  %10 = call i32 @std.math.random.Sfc32Random.next_int(ptr %9), !dbg !2929
  store i32 %10, ptr %value, align 4, !dbg !2929
  %11 = load i64, ptr %len, align 8, !dbg !2930
  %le = icmp ule i64 %11, 4, !dbg !2930
  br i1 %le, label %if.then, label %if.exit, !dbg !2930

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !2931
  %add = add i64 0, %13, !dbg !2931
  %size = sub i64 %add, 0, !dbg !2931
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !2931
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !2931
  %16 = load %"char[]", ptr %bytes2, align 8, !dbg !2933
  %17 = extractvalue %"char[]" %16, 0, !dbg !2933
  %18 = extractvalue %"char[]" %16, 1, !dbg !2934
  %gt = icmp ugt i64 0, %18, !dbg !2934
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2934
  br i1 %19, label %panic5, label %checkok9, !dbg !2934

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %18, 0, !dbg !2933
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !2933
  %21 = insertvalue %"char[]" %20, i64 %size10, 1, !dbg !2933
  %22 = extractvalue %"char[]" %21, 0, !dbg !2933
  %23 = extractvalue %"char[]" %15, 0, !dbg !2933
  %24 = extractvalue %"char[]" %15, 1, !dbg !2933
  %25 = extractvalue %"char[]" %21, 1, !dbg !2933
  %neq = icmp ne i64 %25, %24, !dbg !2933
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2933
  br i1 %26, label %panic11, label %checkok18, !dbg !2933

checkok18:                                        ; preds = %checkok9
  %27 = mul i64 %24, 1, !dbg !2933
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !2933
  br label %expr_block.exit, !dbg !2935

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr19, align 8
  %28 = load ptr, ptr %taddr19, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 4, 1
  %31 = load %"char[]", ptr %bytes2, align 8, !dbg !2936
  %32 = extractvalue %"char[]" %31, 0, !dbg !2936
  %33 = extractvalue %"char[]" %31, 1, !dbg !2936
  %gt20 = icmp sgt i64 0, %33, !dbg !2936
  %34 = call i1 @llvm.expect.i1(i1 %gt20, i1 false), !dbg !2936
  br i1 %34, label %panic21, label %checkok28, !dbg !2936

checkok28:                                        ; preds = %if.exit
  %lt29 = icmp slt i64 %33, 4, !dbg !2936
  %35 = call i1 @llvm.expect.i1(i1 %lt29, i1 false), !dbg !2936
  br i1 %35, label %panic30, label %checkok37, !dbg !2936

checkok37:                                        ; preds = %checkok28
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !2936
  %37 = insertvalue %"char[]" %36, i64 4, 1, !dbg !2936
  %38 = extractvalue %"char[]" %37, 0, !dbg !2936
  %39 = extractvalue %"char[]" %30, 0, !dbg !2936
  %40 = extractvalue %"char[]" %30, 1, !dbg !2936
  %41 = extractvalue %"char[]" %37, 1, !dbg !2936
  %neq38 = icmp ne i64 %41, %40, !dbg !2936
  %42 = call i1 @llvm.expect.i1(i1 %neq38, i1 false), !dbg !2936
  br i1 %42, label %panic39, label %checkok46, !dbg !2936

checkok46:                                        ; preds = %checkok37
  %43 = mul i64 %40, 1, !dbg !2936
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !2936
  %44 = load i64, ptr %len, align 8, !dbg !2937
  %sub = sub i64 %44, 4, !dbg !2937
  store i64 %sub, ptr %len, align 8, !dbg !2937
  %45 = load %"char[]", ptr %bytes2, align 8, !dbg !2938
  %46 = extractvalue %"char[]" %45, 0, !dbg !2938
  %47 = extractvalue %"char[]" %45, 1, !dbg !2939
  %gt47 = icmp ugt i64 4, %47, !dbg !2939
  %48 = call i1 @llvm.expect.i1(i1 %gt47, i1 false), !dbg !2939
  br i1 %48, label %panic48, label %checkok55, !dbg !2939

checkok55:                                        ; preds = %checkok46
  %size56 = sub i64 %47, 4, !dbg !2938
  %ptradd57 = getelementptr inbounds i8, ptr %46, i64 4, !dbg !2938
  %49 = insertvalue %"char[]" undef, ptr %ptradd57, 0, !dbg !2938
  %50 = insertvalue %"char[]" %49, i64 %size56, 1, !dbg !2938
  store %"char[]" %50, ptr %bytes2, align 8, !dbg !2938
  br label %loop.cond, !dbg !2938

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.149, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !2940
  %ptradd58 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2940
  %hi = load i64, ptr %ptradd58, align 8, !dbg !2940
  store %"any[]" zeroinitializer, ptr %indirectarg59, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.150, i64 11, ptr @.str.151, i64 22, i32 93, ptr byval(%"any[]") align 8 %indirectarg59), !dbg !2943
  unreachable, !dbg !2944

expr_block.exit:                                  ; preds = %checkok18
  ret void, !dbg !2944

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2913
  call void %51(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.21, i64 10, i32 93) #5, !dbg !2913
  unreachable, !dbg !2913

panic5:                                           ; preds = %if.then
  store i64 %18, ptr %taddr6, align 8
  %52 = insertvalue %any undef, ptr %taddr6, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %54 = insertvalue %any undef, ptr %taddr7, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd8, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2933
  unreachable, !dbg !2933

panic11:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr12, align 8
  %57 = insertvalue %any undef, ptr %taddr12, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr13, align 8
  %59 = insertvalue %any undef, ptr %taddr13, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %60, ptr %ptradd15, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg17) #5, !dbg !2933
  unreachable, !dbg !2933

panic21:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr22, align 8
  %62 = insertvalue %any undef, ptr %taddr22, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr23, align 8
  %64 = insertvalue %any undef, ptr %taddr23, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %65, ptr %ptradd25, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg27) #5, !dbg !2936
  unreachable, !dbg !2936

panic30:                                          ; preds = %checkok28
  store i64 3, ptr %taddr31, align 8
  %67 = insertvalue %any undef, ptr %taddr31, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr32, align 8
  %69 = insertvalue %any undef, ptr %taddr32, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots33, align 16
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots33, i64 16
  store %any %70, ptr %ptradd34, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots33, 0
  %"$$temp35" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp35", ptr %indirectarg36, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 60, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg36) #5, !dbg !2936
  unreachable, !dbg !2936

panic39:                                          ; preds = %checkok37
  store i64 %41, ptr %taddr40, align 8
  %72 = insertvalue %any undef, ptr %taddr40, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr41, align 8
  %74 = insertvalue %any undef, ptr %taddr41, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots42, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %75, ptr %ptradd43, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg45) #5, !dbg !2936
  unreachable, !dbg !2936

panic48:                                          ; preds = %checkok46
  store i64 %47, ptr %taddr49, align 8
  %77 = insertvalue %any undef, ptr %taddr49, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr50, align 8
  %79 = insertvalue %any undef, ptr %taddr50, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %80, ptr %ptradd52, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg54) #5, !dbg !2938
  unreachable, !dbg !2938
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Sfc32Random.next_int128(ptr %0) #0 comdat !dbg !2945 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2948
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2948
  br i1 %2, label %panic, label %checkok, !dbg !2948

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2949, !DIExpression(), !2950)
  %3 = load ptr, ptr %self, align 8, !dbg !2951
  %4 = call i64 @std.math.random.Sfc32Random.next_long(ptr %3), !dbg !2953
  %zext = zext i64 %4 to i128, !dbg !2953
  %shl = shl i128 %zext, 64, !dbg !2953
  %5 = freeze i128 %shl, !dbg !2953
  %6 = load ptr, ptr %self, align 8, !dbg !2951
  %7 = call i64 @std.math.random.Sfc32Random.next_long(ptr %6), !dbg !2954
  %zext1 = zext i64 %7 to i128, !dbg !2954
  %add = add i128 %5, %zext1, !dbg !2953
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2950
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.28, i64 11, i32 94) #5, !dbg !2950
  unreachable, !dbg !2950
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Sfc32Random.next_long(ptr %0) #0 comdat !dbg !2955 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2958
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2958
  br i1 %2, label %panic, label %checkok, !dbg !2958

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2959, !DIExpression(), !2960)
  %3 = load ptr, ptr %self, align 8, !dbg !2961
  %4 = call i32 @std.math.random.Sfc32Random.next_int(ptr %3), !dbg !2963
  %zext = zext i32 %4 to i64, !dbg !2963
  %shl = shl i64 %zext, 32, !dbg !2963
  %5 = freeze i64 %shl, !dbg !2963
  %6 = load ptr, ptr %self, align 8, !dbg !2961
  %7 = call i32 @std.math.random.Sfc32Random.next_int(ptr %6), !dbg !2964
  %zext1 = zext i32 %7 to i64, !dbg !2964
  %add = add i64 %5, %zext1, !dbg !2963
  ret i64 %add, !dbg !2963

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2960
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.19, i64 9, i32 95) #5, !dbg !2960
  unreachable, !dbg !2960
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Sfc32Random.next_short(ptr %0) #0 comdat !dbg !2965 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2968
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2968
  br i1 %2, label %panic, label %checkok, !dbg !2968

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2969, !DIExpression(), !2970)
  %3 = load ptr, ptr %self, align 8, !dbg !2971
  %4 = call i32 @std.math.random.Sfc32Random.next_int(ptr %3), !dbg !2972
  %trunc = trunc i32 %4 to i16, !dbg !2972
  ret i16 %trunc, !dbg !2972

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2970
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.30, i64 10, i32 96) #5, !dbg !2970
  unreachable, !dbg !2970
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Sfc32Random.next_byte(ptr %0) #0 comdat !dbg !2973 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2976
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2976
  br i1 %2, label %panic, label %checkok, !dbg !2976

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2977, !DIExpression(), !2978)
  %3 = load ptr, ptr %self, align 8, !dbg !2979
  %4 = call i32 @std.math.random.Sfc32Random.next_int(ptr %3), !dbg !2980
  %trunc = trunc i32 %4 to i8, !dbg !2980
  ret i8 %trunc, !dbg !2980

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2978
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.31, i64 9, i32 97) #5, !dbg !2978
  unreachable, !dbg !2978
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc16Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2981 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input7 = alloca %"char[]", align 8
  %return_value = alloca [4 x i16], align 2
  %taddr11 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !2986
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2986
  br i1 %4, label %panic, label %checkok, !dbg !2986

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2987, !DIExpression(), !2988)
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !2989, !DIExpression(), !2990)
  %5 = load ptr, ptr %self, align 8, !dbg !2991
  %checknull = icmp eq ptr %5, null, !dbg !2991
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2991
  br i1 %6, label %panic1, label %checkok2, !dbg !2991

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !2991
  %8 = urem i64 %7, 2, !dbg !2991
  %9 = icmp ne i64 %8, 0, !dbg !2991
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !2991
  br i1 %10, label %panic3, label %checkok6, !dbg !2991

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input7, ptr align 8 %input, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !2992, !DIExpression(), !2994)
  store i16 0, ptr %return_value, align 2, !dbg !2994
  %ptradd8 = getelementptr inbounds i8, ptr %return_value, i64 2, !dbg !2994
  store i16 0, ptr %ptradd8, align 2, !dbg !2994
  %ptradd9 = getelementptr inbounds i8, ptr %return_value, i64 4, !dbg !2994
  store i16 0, ptr %ptradd9, align 2, !dbg !2994
  %ptradd10 = getelementptr inbounds i8, ptr %return_value, i64 6, !dbg !2994
  store i16 0, ptr %ptradd10, align 2, !dbg !2994
  store ptr %return_value, ptr %taddr11, align 8
  %11 = load ptr, ptr %taddr11, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 8, 1
  %lo = load ptr, ptr %input7, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %input7, i64 8
  %hi = load i64, ptr %ptradd12, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 8), !dbg !2996
  call void @llvm.memcpy.p0.p0.i32(ptr align 2 %5, ptr align 2 %return_value, i32 8, i1 false), !dbg !2997
  ret void, !dbg !2997

panic:                                            ; preds = %entry
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2988
  call void %14(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.16, i64 8, i32 103) #5, !dbg !2988
  unreachable, !dbg !2988

panic1:                                           ; preds = %checkok
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2991
  call void %15(ptr @.panic_msg.17, i64 45, ptr @.file.141, i64 11, ptr @.func.16, i64 8, i32 105) #5, !dbg !2991
  unreachable, !dbg !2991

panic3:                                           ; preds = %checkok2
  store i64 2, ptr %taddr, align 8
  %16 = insertvalue %any undef, ptr %taddr, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %18 = insertvalue %any undef, ptr %taddr4, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %17, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd5, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.141, i64 11, ptr @.func.16, i64 8, i32 105, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2991
  unreachable, !dbg !2991
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Sfc16Random.next_short(ptr %0) #0 comdat !dbg !2998 {
entry:
  %seed = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i16, align 2
  %self = alloca i16, align 2
  %shift = alloca i16, align 2
  %1 = icmp eq ptr %0, null, !dbg !3001
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3001
  br i1 %2, label %panic, label %checkok, !dbg !3001

checkok:                                          ; preds = %entry
  store ptr %0, ptr %seed, align 8
    #dbg_declare(ptr %seed, !3002, !DIExpression(), !3003)
    #dbg_declare(ptr %s, !3004, !DIExpression(), !3005)
  %3 = load ptr, ptr %seed, align 8, !dbg !3006
  store ptr %3, ptr %s, align 8, !dbg !3006
    #dbg_declare(ptr %result, !3007, !DIExpression(), !3008)
  %4 = load ptr, ptr %s, align 8, !dbg !3009
  %5 = load i16, ptr %4, align 2, !dbg !3010
  %zext = zext i16 %5 to i32, !dbg !3010
  %6 = load ptr, ptr %s, align 8, !dbg !3011
  %ptradd = getelementptr inbounds i8, ptr %6, i64 2, !dbg !3012
  %7 = load i16, ptr %ptradd, align 2, !dbg !3012
  %zext1 = zext i16 %7 to i32, !dbg !3012
  %add = add i32 %zext, %zext1, !dbg !3009
  %8 = load ptr, ptr %s, align 8, !dbg !3013
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 6, !dbg !3014
  %9 = load i16, ptr %ptradd2, align 2, !dbg !3014
  %zext3 = zext i16 %9 to i32, !dbg !3014
  %add4 = add i32 %add, %zext3, !dbg !3009
  %trunc = trunc i32 %add4 to i16, !dbg !3009
  store i16 %trunc, ptr %result, align 2, !dbg !3009
  %10 = load ptr, ptr %s, align 8, !dbg !3015
  %11 = load ptr, ptr %s, align 8, !dbg !3016
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 2, !dbg !3017
  %12 = load i16, ptr %ptradd5, align 2, !dbg !3017
  %zext6 = zext i16 %12 to i32, !dbg !3017
  %13 = load ptr, ptr %s, align 8, !dbg !3018
  %ptradd7 = getelementptr inbounds i8, ptr %13, i64 2, !dbg !3019
  %14 = load i16, ptr %ptradd7, align 2, !dbg !3019
  %zext8 = zext i16 %14 to i32, !dbg !3019
  %lshr = lshr i32 %zext8, 2, !dbg !3018
  %15 = freeze i32 %lshr, !dbg !3018
  %xor = xor i32 %zext6, %15, !dbg !3016
  %trunc9 = trunc i32 %xor to i16, !dbg !3016
  store i16 %trunc9, ptr %10, align 2, !dbg !3016
  %16 = load ptr, ptr %s, align 8, !dbg !3020
  %ptradd10 = getelementptr inbounds i8, ptr %16, i64 2, !dbg !3021
  %17 = load ptr, ptr %s, align 8, !dbg !3022
  %ptradd11 = getelementptr inbounds i8, ptr %17, i64 4, !dbg !3023
  %18 = load i16, ptr %ptradd11, align 2, !dbg !3023
  %zext12 = zext i16 %18 to i32, !dbg !3023
  %19 = load ptr, ptr %s, align 8, !dbg !3024
  %ptradd13 = getelementptr inbounds i8, ptr %19, i64 4, !dbg !3025
  %20 = load i16, ptr %ptradd13, align 2, !dbg !3025
  %zext14 = zext i16 %20 to i32, !dbg !3025
  %shl = shl i32 %zext14, 3, !dbg !3024
  %21 = freeze i32 %shl, !dbg !3024
  %add15 = add i32 %zext12, %21, !dbg !3022
  %trunc16 = trunc i32 %add15 to i16, !dbg !3022
  store i16 %trunc16, ptr %ptradd10, align 2, !dbg !3022
  %22 = load ptr, ptr %s, align 8, !dbg !3026
  %ptradd17 = getelementptr inbounds i8, ptr %22, i64 4, !dbg !3027
  %23 = load ptr, ptr %s, align 8, !dbg !3028
  %ptradd18 = getelementptr inbounds i8, ptr %23, i64 4, !dbg !3029
  %24 = load i16, ptr %ptradd18, align 2
  store i16 %24, ptr %self, align 2
  store i16 12, ptr %shift, align 2
  %25 = load i16, ptr %self, align 2, !dbg !3030
  %26 = load i16, ptr %self, align 2, !dbg !3032
  %27 = load i16, ptr %shift, align 2, !dbg !3033
  %28 = call i16 @llvm.fshr.i16(i16 %25, i16 %26, i16 %27), !dbg !3033
  %zext19 = zext i16 %28 to i32, !dbg !3033
  %29 = load i16, ptr %result, align 2, !dbg !3034
  %zext20 = zext i16 %29 to i32, !dbg !3034
  %add21 = add i32 %zext19, %zext20, !dbg !3028
  %trunc22 = trunc i32 %add21 to i16, !dbg !3028
  store i16 %trunc22, ptr %ptradd17, align 2, !dbg !3028
  %30 = load ptr, ptr %s, align 8, !dbg !3035
  %ptradd23 = getelementptr inbounds i8, ptr %30, i64 6, !dbg !3036
  %31 = load i16, ptr %ptradd23, align 2, !dbg !3036
  %add24 = add i16 %31, -25033, !dbg !3035
  store i16 %add24, ptr %ptradd23, align 2, !dbg !3035
  %32 = load i16, ptr %result, align 2, !dbg !3037
  ret i16 %32, !dbg !3037

panic:                                            ; preds = %entry
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3003
  call void %33(ptr @.panic_msg.152, i64 62, ptr @.file.141, i64 11, ptr @.func.30, i64 10, i32 109) #5, !dbg !3003
  unreachable, !dbg !3003
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc16Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !3038 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %taddr19 = alloca ptr, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %varargslots33 = alloca [2 x %any], align 16
  %indirectarg36 = alloca %"any[]", align 8
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %varargslots42 = alloca [2 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg59 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !3039
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3039
  br i1 %4, label %panic, label %checkok, !dbg !3039

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3040, !DIExpression(), !3041)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !3042, !DIExpression(), !3043)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !3044
  %5 = load i64, ptr %ptradd1, align 8, !dbg !3044
  %lt = icmp ult i64 0, %5, !dbg !3044
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !3044

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3044
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.141, i64 11, ptr @.func.21, i64 10, i32 121) #5, !dbg !3044
  unreachable, !dbg !3044

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !3046, !DIExpression(), !3048)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !3049
  %7 = load i64, ptr %ptradd3, align 8, !dbg !3049
  store i64 %7, ptr %len, align 8, !dbg !3049
  br label %loop.cond, !dbg !3050

loop.cond:                                        ; preds = %checkok55, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !3051
  %lt4 = icmp ult i64 0, %8, !dbg !3051
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !3051

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !3053, !DIExpression(), !3055)
  %9 = load ptr, ptr %self, align 8, !dbg !3056
  %10 = call i16 @std.math.random.Sfc16Random.next_short(ptr %9), !dbg !3057
  store i16 %10, ptr %value, align 2, !dbg !3057
  %11 = load i64, ptr %len, align 8, !dbg !3058
  %le = icmp ule i64 %11, 2, !dbg !3058
  br i1 %le, label %if.then, label %if.exit, !dbg !3058

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !3059
  %add = add i64 0, %13, !dbg !3059
  %size = sub i64 %add, 0, !dbg !3059
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !3059
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !3059
  %16 = load %"char[]", ptr %bytes2, align 8, !dbg !3061
  %17 = extractvalue %"char[]" %16, 0, !dbg !3061
  %18 = extractvalue %"char[]" %16, 1, !dbg !3062
  %gt = icmp ugt i64 0, %18, !dbg !3062
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3062
  br i1 %19, label %panic5, label %checkok9, !dbg !3062

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %18, 0, !dbg !3061
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !3061
  %21 = insertvalue %"char[]" %20, i64 %size10, 1, !dbg !3061
  %22 = extractvalue %"char[]" %21, 0, !dbg !3061
  %23 = extractvalue %"char[]" %15, 0, !dbg !3061
  %24 = extractvalue %"char[]" %15, 1, !dbg !3061
  %25 = extractvalue %"char[]" %21, 1, !dbg !3061
  %neq = icmp ne i64 %25, %24, !dbg !3061
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !3061
  br i1 %26, label %panic11, label %checkok18, !dbg !3061

checkok18:                                        ; preds = %checkok9
  %27 = mul i64 %24, 1, !dbg !3061
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !3061
  br label %expr_block.exit, !dbg !3063

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr19, align 8
  %28 = load ptr, ptr %taddr19, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 2, 1
  %31 = load %"char[]", ptr %bytes2, align 8, !dbg !3064
  %32 = extractvalue %"char[]" %31, 0, !dbg !3064
  %33 = extractvalue %"char[]" %31, 1, !dbg !3064
  %gt20 = icmp sgt i64 0, %33, !dbg !3064
  %34 = call i1 @llvm.expect.i1(i1 %gt20, i1 false), !dbg !3064
  br i1 %34, label %panic21, label %checkok28, !dbg !3064

checkok28:                                        ; preds = %if.exit
  %lt29 = icmp slt i64 %33, 2, !dbg !3064
  %35 = call i1 @llvm.expect.i1(i1 %lt29, i1 false), !dbg !3064
  br i1 %35, label %panic30, label %checkok37, !dbg !3064

checkok37:                                        ; preds = %checkok28
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !3064
  %37 = insertvalue %"char[]" %36, i64 2, 1, !dbg !3064
  %38 = extractvalue %"char[]" %37, 0, !dbg !3064
  %39 = extractvalue %"char[]" %30, 0, !dbg !3064
  %40 = extractvalue %"char[]" %30, 1, !dbg !3064
  %41 = extractvalue %"char[]" %37, 1, !dbg !3064
  %neq38 = icmp ne i64 %41, %40, !dbg !3064
  %42 = call i1 @llvm.expect.i1(i1 %neq38, i1 false), !dbg !3064
  br i1 %42, label %panic39, label %checkok46, !dbg !3064

checkok46:                                        ; preds = %checkok37
  %43 = mul i64 %40, 1, !dbg !3064
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !3064
  %44 = load i64, ptr %len, align 8, !dbg !3065
  %sub = sub i64 %44, 2, !dbg !3065
  store i64 %sub, ptr %len, align 8, !dbg !3065
  %45 = load %"char[]", ptr %bytes2, align 8, !dbg !3066
  %46 = extractvalue %"char[]" %45, 0, !dbg !3066
  %47 = extractvalue %"char[]" %45, 1, !dbg !3067
  %gt47 = icmp ugt i64 2, %47, !dbg !3067
  %48 = call i1 @llvm.expect.i1(i1 %gt47, i1 false), !dbg !3067
  br i1 %48, label %panic48, label %checkok55, !dbg !3067

checkok55:                                        ; preds = %checkok46
  %size56 = sub i64 %47, 2, !dbg !3066
  %ptradd57 = getelementptr inbounds i8, ptr %46, i64 2, !dbg !3066
  %49 = insertvalue %"char[]" undef, ptr %ptradd57, 0, !dbg !3066
  %50 = insertvalue %"char[]" %49, i64 %size56, 1, !dbg !3066
  store %"char[]" %50, ptr %bytes2, align 8, !dbg !3066
  br label %loop.cond, !dbg !3066

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.153, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !3068
  %ptradd58 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !3068
  %hi = load i64, ptr %ptradd58, align 8, !dbg !3068
  store %"any[]" zeroinitializer, ptr %indirectarg59, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.154, i64 11, ptr @.str.155, i64 22, i32 123, ptr byval(%"any[]") align 8 %indirectarg59), !dbg !3071
  unreachable, !dbg !3072

expr_block.exit:                                  ; preds = %checkok18
  ret void, !dbg !3072

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3041
  call void %51(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.21, i64 10, i32 123) #5, !dbg !3041
  unreachable, !dbg !3041

panic5:                                           ; preds = %if.then
  store i64 %18, ptr %taddr6, align 8
  %52 = insertvalue %any undef, ptr %taddr6, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %54 = insertvalue %any undef, ptr %taddr7, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd8, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3061
  unreachable, !dbg !3061

panic11:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr12, align 8
  %57 = insertvalue %any undef, ptr %taddr12, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr13, align 8
  %59 = insertvalue %any undef, ptr %taddr13, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %60, ptr %ptradd15, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg17) #5, !dbg !3061
  unreachable, !dbg !3061

panic21:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr22, align 8
  %62 = insertvalue %any undef, ptr %taddr22, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr23, align 8
  %64 = insertvalue %any undef, ptr %taddr23, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %65, ptr %ptradd25, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg27) #5, !dbg !3064
  unreachable, !dbg !3064

panic30:                                          ; preds = %checkok28
  store i64 1, ptr %taddr31, align 8
  %67 = insertvalue %any undef, ptr %taddr31, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr32, align 8
  %69 = insertvalue %any undef, ptr %taddr32, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots33, align 16
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots33, i64 16
  store %any %70, ptr %ptradd34, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots33, 0
  %"$$temp35" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp35", ptr %indirectarg36, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 60, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg36) #5, !dbg !3064
  unreachable, !dbg !3064

panic39:                                          ; preds = %checkok37
  store i64 %41, ptr %taddr40, align 8
  %72 = insertvalue %any undef, ptr %taddr40, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr41, align 8
  %74 = insertvalue %any undef, ptr %taddr41, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots42, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %75, ptr %ptradd43, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg45) #5, !dbg !3064
  unreachable, !dbg !3064

panic48:                                          ; preds = %checkok46
  store i64 %47, ptr %taddr49, align 8
  %77 = insertvalue %any undef, ptr %taddr49, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr50, align 8
  %79 = insertvalue %any undef, ptr %taddr50, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %80, ptr %ptradd52, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg54) #5, !dbg !3066
  unreachable, !dbg !3066
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Sfc16Random.next_int128(ptr %0) #0 comdat !dbg !3073 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !3076
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3076
  br i1 %2, label %panic, label %checkok, !dbg !3076

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3077, !DIExpression(), !3078)
  %3 = load ptr, ptr %self, align 8, !dbg !3079
  %4 = call i64 @std.math.random.Sfc16Random.next_long(ptr %3), !dbg !3081
  %zext = zext i64 %4 to i128, !dbg !3081
  %shl = shl i128 %zext, 64, !dbg !3081
  %5 = freeze i128 %shl, !dbg !3081
  %6 = load ptr, ptr %self, align 8, !dbg !3079
  %7 = call i64 @std.math.random.Sfc16Random.next_long(ptr %6), !dbg !3082
  %zext1 = zext i64 %7 to i128, !dbg !3082
  %add = add i128 %5, %zext1, !dbg !3081
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3078
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.28, i64 11, i32 124) #5, !dbg !3078
  unreachable, !dbg !3078
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Sfc16Random.next_long(ptr %0) #0 comdat !dbg !3083 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3086
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3086
  br i1 %2, label %panic, label %checkok, !dbg !3086

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3087, !DIExpression(), !3088)
  %3 = load ptr, ptr %self, align 8, !dbg !3089
  %4 = call i32 @std.math.random.Sfc16Random.next_int(ptr %3), !dbg !3091
  %zext = zext i32 %4 to i64, !dbg !3091
  %shl = shl i64 %zext, 32, !dbg !3091
  %5 = freeze i64 %shl, !dbg !3091
  %6 = load ptr, ptr %self, align 8, !dbg !3089
  %7 = call i32 @std.math.random.Sfc16Random.next_int(ptr %6), !dbg !3092
  %zext1 = zext i32 %7 to i64, !dbg !3092
  %add = add i64 %5, %zext1, !dbg !3091
  ret i64 %add, !dbg !3091

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3088
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.19, i64 9, i32 125) #5, !dbg !3088
  unreachable, !dbg !3088
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Sfc16Random.next_int(ptr %0) #0 comdat !dbg !3093 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3096
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3096
  br i1 %2, label %panic, label %checkok, !dbg !3096

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3097, !DIExpression(), !3098)
  %3 = load ptr, ptr %self, align 8, !dbg !3099
  %4 = call i16 @std.math.random.Sfc16Random.next_short(ptr %3), !dbg !3101
  %zext = zext i16 %4 to i32, !dbg !3101
  %shl = shl i32 %zext, 16, !dbg !3101
  %5 = freeze i32 %shl, !dbg !3101
  %6 = load ptr, ptr %self, align 8, !dbg !3099
  %7 = call i16 @std.math.random.Sfc16Random.next_short(ptr %6), !dbg !3102
  %zext1 = zext i16 %7 to i32, !dbg !3102
  %add = add i32 %5, %zext1, !dbg !3101
  ret i32 %add, !dbg !3101

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3098
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.29, i64 8, i32 126) #5, !dbg !3098
  unreachable, !dbg !3098
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Sfc16Random.next_byte(ptr %0) #0 comdat !dbg !3103 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3106
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3106
  br i1 %2, label %panic, label %checkok, !dbg !3106

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3107, !DIExpression(), !3108)
  %3 = load ptr, ptr %self, align 8, !dbg !3109
  %4 = call i16 @std.math.random.Sfc16Random.next_short(ptr %3), !dbg !3110
  %trunc = trunc i16 %4 to i8, !dbg !3110
  ret i8 %trunc, !dbg !3110

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3108
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.31, i64 9, i32 127) #5, !dbg !3108
  unreachable, !dbg !3108
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc8Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !3111 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %input3 = alloca %"char[]", align 8
  %return_value = alloca [4 x i8], align 1
  %taddr = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !3116
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3116
  br i1 %4, label %panic, label %checkok, !dbg !3116

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3117, !DIExpression(), !3118)
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !3119, !DIExpression(), !3120)
  %5 = load ptr, ptr %self, align 8, !dbg !3121
  %checknull = icmp eq ptr %5, null, !dbg !3121
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3121
  br i1 %6, label %panic1, label %checkok2, !dbg !3121

checkok2:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input3, ptr align 8 %input, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !3122, !DIExpression(), !3124)
  store i8 0, ptr %return_value, align 1, !dbg !3124
  %ptradd4 = getelementptr inbounds i8, ptr %return_value, i64 1, !dbg !3124
  store i8 0, ptr %ptradd4, align 1, !dbg !3124
  %ptradd5 = getelementptr inbounds i8, ptr %return_value, i64 2, !dbg !3124
  store i8 0, ptr %ptradd5, align 1, !dbg !3124
  %ptradd6 = getelementptr inbounds i8, ptr %return_value, i64 3, !dbg !3124
  store i8 0, ptr %ptradd6, align 1, !dbg !3124
  store ptr %return_value, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 4, 1
  %lo = load ptr, ptr %input3, align 8
  %ptradd7 = getelementptr inbounds i8, ptr %input3, i64 8
  %hi = load i64, ptr %ptradd7, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %7, i64 4), !dbg !3126
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %5, ptr align 1 %return_value, i32 4, i1 false), !dbg !3127
  ret void, !dbg !3127

panic:                                            ; preds = %entry
  %10 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3118
  call void %10(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.16, i64 8, i32 134) #5, !dbg !3118
  unreachable, !dbg !3118

panic1:                                           ; preds = %checkok
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3121
  call void %11(ptr @.panic_msg.17, i64 45, ptr @.file.141, i64 11, ptr @.func.16, i64 8, i32 136) #5, !dbg !3121
  unreachable, !dbg !3121
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Sfc8Random.next_byte(ptr %0) #0 comdat !dbg !3128 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i8, align 1
  %self19 = alloca i8, align 1
  %shift = alloca i8, align 1
  %1 = icmp eq ptr %0, null, !dbg !3131
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3131
  br i1 %2, label %panic, label %checkok, !dbg !3131

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3132, !DIExpression(), !3133)
    #dbg_declare(ptr %s, !3134, !DIExpression(), !3135)
  %3 = load ptr, ptr %self, align 8, !dbg !3136
  store ptr %3, ptr %s, align 8, !dbg !3136
    #dbg_declare(ptr %result, !3137, !DIExpression(), !3138)
  %4 = load ptr, ptr %s, align 8, !dbg !3139
  %5 = load i8, ptr %4, align 1, !dbg !3140
  %zext = zext i8 %5 to i32, !dbg !3140
  %6 = load ptr, ptr %s, align 8, !dbg !3141
  %ptradd = getelementptr inbounds i8, ptr %6, i64 1, !dbg !3142
  %7 = load i8, ptr %ptradd, align 1, !dbg !3142
  %zext1 = zext i8 %7 to i32, !dbg !3142
  %add = add i32 %zext, %zext1, !dbg !3139
  %8 = load ptr, ptr %s, align 8, !dbg !3143
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 3, !dbg !3144
  %9 = load i8, ptr %ptradd2, align 1, !dbg !3144
  %zext3 = zext i8 %9 to i32, !dbg !3144
  %add4 = add i32 %add, %zext3, !dbg !3139
  %trunc = trunc i32 %add4 to i8, !dbg !3139
  store i8 %trunc, ptr %result, align 1, !dbg !3139
  %10 = load ptr, ptr %s, align 8, !dbg !3145
  %11 = load ptr, ptr %s, align 8, !dbg !3146
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 1, !dbg !3147
  %12 = load i8, ptr %ptradd5, align 1, !dbg !3147
  %zext6 = zext i8 %12 to i32, !dbg !3147
  %13 = load ptr, ptr %s, align 8, !dbg !3148
  %ptradd7 = getelementptr inbounds i8, ptr %13, i64 1, !dbg !3149
  %14 = load i8, ptr %ptradd7, align 1, !dbg !3149
  %zext8 = zext i8 %14 to i32, !dbg !3149
  %lshr = lshr i32 %zext8, 1, !dbg !3148
  %15 = freeze i32 %lshr, !dbg !3148
  %xor = xor i32 %zext6, %15, !dbg !3146
  %trunc9 = trunc i32 %xor to i8, !dbg !3146
  store i8 %trunc9, ptr %10, align 1, !dbg !3146
  %16 = load ptr, ptr %s, align 8, !dbg !3150
  %ptradd10 = getelementptr inbounds i8, ptr %16, i64 1, !dbg !3151
  %17 = load ptr, ptr %s, align 8, !dbg !3152
  %ptradd11 = getelementptr inbounds i8, ptr %17, i64 2, !dbg !3153
  %18 = load i8, ptr %ptradd11, align 1, !dbg !3153
  %zext12 = zext i8 %18 to i32, !dbg !3153
  %19 = load ptr, ptr %s, align 8, !dbg !3154
  %ptradd13 = getelementptr inbounds i8, ptr %19, i64 2, !dbg !3155
  %20 = load i8, ptr %ptradd13, align 1, !dbg !3155
  %zext14 = zext i8 %20 to i32, !dbg !3155
  %shl = shl i32 %zext14, 2, !dbg !3154
  %21 = freeze i32 %shl, !dbg !3154
  %add15 = add i32 %zext12, %21, !dbg !3152
  %trunc16 = trunc i32 %add15 to i8, !dbg !3152
  store i8 %trunc16, ptr %ptradd10, align 1, !dbg !3152
  %22 = load ptr, ptr %s, align 8, !dbg !3156
  %ptradd17 = getelementptr inbounds i8, ptr %22, i64 2, !dbg !3157
  %23 = load ptr, ptr %s, align 8, !dbg !3158
  %ptradd18 = getelementptr inbounds i8, ptr %23, i64 2, !dbg !3159
  %24 = load i8, ptr %ptradd18, align 1
  store i8 %24, ptr %self19, align 1
  store i8 3, ptr %shift, align 1
  %25 = load i8, ptr %self19, align 1, !dbg !3160
  %26 = load i8, ptr %self19, align 1, !dbg !3162
  %27 = load i8, ptr %shift, align 1, !dbg !3163
  %28 = call i8 @llvm.fshr.i8(i8 %25, i8 %26, i8 %27), !dbg !3163
  %zext20 = zext i8 %28 to i32, !dbg !3163
  %29 = load i8, ptr %result, align 1, !dbg !3164
  %zext21 = zext i8 %29 to i32, !dbg !3164
  %add22 = add i32 %zext20, %zext21, !dbg !3158
  %trunc23 = trunc i32 %add22 to i8, !dbg !3158
  store i8 %trunc23, ptr %ptradd17, align 1, !dbg !3158
  %30 = load ptr, ptr %s, align 8, !dbg !3165
  %ptradd24 = getelementptr inbounds i8, ptr %30, i64 3, !dbg !3166
  %31 = load i8, ptr %ptradd24, align 1, !dbg !3166
  %add25 = add i8 %31, -97, !dbg !3165
  store i8 %add25, ptr %ptradd24, align 1, !dbg !3165
  %32 = load i8, ptr %result, align 1, !dbg !3167
  ret i8 %32, !dbg !3167

panic:                                            ; preds = %entry
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3133
  call void %33(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.31, i64 9, i32 139) #5, !dbg !3133
  unreachable, !dbg !3133
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc8Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !3168 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes1 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr17 = alloca ptr, align 8
  %taddr20 = alloca i64, align 8
  %taddr21 = alloca i64, align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca i64, align 8
  %varargslots49 = alloca [2 x %any], align 16
  %indirectarg52 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg57 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !3169
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3169
  br i1 %4, label %panic, label %checkok, !dbg !3169

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3170, !DIExpression(), !3171)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !3172, !DIExpression(), !3173)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes1, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !3174, !DIExpression(), !3176)
  %ptradd2 = getelementptr inbounds i8, ptr %bytes1, i64 8, !dbg !3177
  %5 = load i64, ptr %ptradd2, align 8, !dbg !3177
  store i64 %5, ptr %len, align 8, !dbg !3177
  br label %loop.cond, !dbg !3178

loop.cond:                                        ; preds = %checkok53, %checkok
  %6 = load i64, ptr %len, align 8, !dbg !3179
  %lt = icmp ult i64 0, %6, !dbg !3179
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !3179

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !3181, !DIExpression(), !3183)
  %7 = load ptr, ptr %self, align 8, !dbg !3184
  %8 = call i8 @std.math.random.Sfc8Random.next_byte(ptr %7), !dbg !3185
  store i8 %8, ptr %value, align 1, !dbg !3185
  %9 = load i64, ptr %len, align 8, !dbg !3186
  %le = icmp ule i64 %9, 1, !dbg !3186
  br i1 %le, label %if.then, label %if.exit, !dbg !3186

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %10 = load ptr, ptr %taddr, align 8
  %11 = load i64, ptr %len, align 8, !dbg !3187
  %add = add i64 0, %11, !dbg !3187
  %size = sub i64 %add, 0, !dbg !3187
  %12 = insertvalue %"char[]" undef, ptr %10, 0, !dbg !3187
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !3187
  %14 = load %"char[]", ptr %bytes1, align 8, !dbg !3189
  %15 = extractvalue %"char[]" %14, 0, !dbg !3189
  %16 = extractvalue %"char[]" %14, 1, !dbg !3190
  %gt = icmp ugt i64 0, %16, !dbg !3190
  %17 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3190
  br i1 %17, label %panic3, label %checkok7, !dbg !3190

checkok7:                                         ; preds = %if.then
  %size8 = sub i64 %16, 0, !dbg !3189
  %18 = insertvalue %"char[]" undef, ptr %15, 0, !dbg !3189
  %19 = insertvalue %"char[]" %18, i64 %size8, 1, !dbg !3189
  %20 = extractvalue %"char[]" %19, 0, !dbg !3189
  %21 = extractvalue %"char[]" %13, 0, !dbg !3189
  %22 = extractvalue %"char[]" %13, 1, !dbg !3189
  %23 = extractvalue %"char[]" %19, 1, !dbg !3189
  %neq = icmp ne i64 %23, %22, !dbg !3189
  %24 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !3189
  br i1 %24, label %panic9, label %checkok16, !dbg !3189

checkok16:                                        ; preds = %checkok7
  %25 = mul i64 %22, 1, !dbg !3189
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %20, ptr align 1 %21, i64 %25, i1 false), !dbg !3189
  br label %expr_block.exit, !dbg !3191

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr17, align 8
  %26 = load ptr, ptr %taddr17, align 8
  %27 = insertvalue %"char[]" undef, ptr %26, 0
  %28 = insertvalue %"char[]" %27, i64 1, 1
  %29 = load %"char[]", ptr %bytes1, align 8, !dbg !3192
  %30 = extractvalue %"char[]" %29, 0, !dbg !3192
  %31 = extractvalue %"char[]" %29, 1, !dbg !3192
  %gt18 = icmp sgt i64 0, %31, !dbg !3192
  %32 = call i1 @llvm.expect.i1(i1 %gt18, i1 false), !dbg !3192
  br i1 %32, label %panic19, label %checkok26, !dbg !3192

checkok26:                                        ; preds = %if.exit
  %lt27 = icmp slt i64 %31, 1, !dbg !3192
  %33 = call i1 @llvm.expect.i1(i1 %lt27, i1 false), !dbg !3192
  br i1 %33, label %panic28, label %checkok35, !dbg !3192

checkok35:                                        ; preds = %checkok26
  %34 = insertvalue %"char[]" undef, ptr %30, 0, !dbg !3192
  %35 = insertvalue %"char[]" %34, i64 1, 1, !dbg !3192
  %36 = extractvalue %"char[]" %35, 0, !dbg !3192
  %37 = extractvalue %"char[]" %28, 0, !dbg !3192
  %38 = extractvalue %"char[]" %28, 1, !dbg !3192
  %39 = extractvalue %"char[]" %35, 1, !dbg !3192
  %neq36 = icmp ne i64 %39, %38, !dbg !3192
  %40 = call i1 @llvm.expect.i1(i1 %neq36, i1 false), !dbg !3192
  br i1 %40, label %panic37, label %checkok44, !dbg !3192

checkok44:                                        ; preds = %checkok35
  %41 = mul i64 %38, 1, !dbg !3192
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %36, ptr align 1 %37, i64 %41, i1 false), !dbg !3192
  %42 = load i64, ptr %len, align 8, !dbg !3193
  %sub = sub i64 %42, 1, !dbg !3193
  store i64 %sub, ptr %len, align 8, !dbg !3193
  %43 = load %"char[]", ptr %bytes1, align 8, !dbg !3194
  %44 = extractvalue %"char[]" %43, 0, !dbg !3194
  %45 = extractvalue %"char[]" %43, 1, !dbg !3195
  %gt45 = icmp ugt i64 1, %45, !dbg !3195
  %46 = call i1 @llvm.expect.i1(i1 %gt45, i1 false), !dbg !3195
  br i1 %46, label %panic46, label %checkok53, !dbg !3195

checkok53:                                        ; preds = %checkok44
  %size54 = sub i64 %45, 1, !dbg !3194
  %ptradd55 = getelementptr inbounds i8, ptr %44, i64 1, !dbg !3194
  %47 = insertvalue %"char[]" undef, ptr %ptradd55, 0, !dbg !3194
  %48 = insertvalue %"char[]" %47, i64 %size54, 1, !dbg !3194
  store %"char[]" %48, ptr %bytes1, align 8, !dbg !3194
  br label %loop.cond, !dbg !3194

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.156, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !3196
  %ptradd56 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !3196
  %hi = load i64, ptr %ptradd56, align 8, !dbg !3196
  store %"any[]" zeroinitializer, ptr %indirectarg57, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.157, i64 11, ptr @.str.158, i64 21, i32 150, ptr byval(%"any[]") align 8 %indirectarg57), !dbg !3199
  unreachable, !dbg !3200

expr_block.exit:                                  ; preds = %checkok16
  ret void, !dbg !3200

panic:                                            ; preds = %entry
  %49 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3171
  call void %49(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.21, i64 10, i32 150) #5, !dbg !3171
  unreachable, !dbg !3171

panic3:                                           ; preds = %if.then
  store i64 %16, ptr %taddr4, align 8
  %50 = insertvalue %any undef, ptr %taddr4, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %52 = insertvalue %any undef, ptr %taddr5, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %51, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %53, ptr %ptradd6, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3189
  unreachable, !dbg !3189

panic9:                                           ; preds = %checkok7
  store i64 %23, ptr %taddr10, align 8
  %55 = insertvalue %any undef, ptr %taddr10, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr11, align 8
  %57 = insertvalue %any undef, ptr %taddr11, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %56, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %58, ptr %ptradd13, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !3189
  unreachable, !dbg !3189

panic19:                                          ; preds = %if.exit
  store i64 %31, ptr %taddr20, align 8
  %60 = insertvalue %any undef, ptr %taddr20, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr21, align 8
  %62 = insertvalue %any undef, ptr %taddr21, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %61, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %63, ptr %ptradd23, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg25) #5, !dbg !3192
  unreachable, !dbg !3192

panic28:                                          ; preds = %checkok26
  store i64 0, ptr %taddr29, align 8
  %65 = insertvalue %any undef, ptr %taddr29, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %31, ptr %taddr30, align 8
  %67 = insertvalue %any undef, ptr %taddr30, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %66, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %68, ptr %ptradd32, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 60, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !3192
  unreachable, !dbg !3192

panic37:                                          ; preds = %checkok35
  store i64 %39, ptr %taddr38, align 8
  %70 = insertvalue %any undef, ptr %taddr38, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %38, ptr %taddr39, align 8
  %72 = insertvalue %any undef, ptr %taddr39, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %71, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %73, ptr %ptradd41, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 38, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg43) #5, !dbg !3192
  unreachable, !dbg !3192

panic46:                                          ; preds = %checkok44
  store i64 %45, ptr %taddr47, align 8
  %75 = insertvalue %any undef, ptr %taddr47, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr48, align 8
  %77 = insertvalue %any undef, ptr %taddr48, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %76, ptr %varargslots49, align 16
  %ptradd50 = getelementptr inbounds i8, ptr %varargslots49, i64 16
  store %any %78, ptr %ptradd50, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp51" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp51", ptr %indirectarg52, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 61, ptr @.file, i64 14, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg52) #5, !dbg !3194
  unreachable, !dbg !3194
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Sfc8Random.next_int128(ptr %0) #0 comdat !dbg !3201 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !3204
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3204
  br i1 %2, label %panic, label %checkok, !dbg !3204

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3205, !DIExpression(), !3206)
  %3 = load ptr, ptr %self, align 8, !dbg !3207
  %4 = call i64 @std.math.random.Sfc8Random.next_long(ptr %3), !dbg !3209
  %zext = zext i64 %4 to i128, !dbg !3209
  %shl = shl i128 %zext, 64, !dbg !3209
  %5 = freeze i128 %shl, !dbg !3209
  %6 = load ptr, ptr %self, align 8, !dbg !3207
  %7 = call i64 @std.math.random.Sfc8Random.next_long(ptr %6), !dbg !3210
  %zext1 = zext i64 %7 to i128, !dbg !3210
  %add = add i128 %5, %zext1, !dbg !3209
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3206
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.28, i64 11, i32 151) #5, !dbg !3206
  unreachable, !dbg !3206
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Sfc8Random.next_long(ptr %0) #0 comdat !dbg !3211 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3214
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3214
  br i1 %2, label %panic, label %checkok, !dbg !3214

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3215, !DIExpression(), !3216)
  %3 = load ptr, ptr %self, align 8, !dbg !3217
  %4 = call i32 @std.math.random.Sfc8Random.next_int(ptr %3), !dbg !3219
  %zext = zext i32 %4 to i64, !dbg !3219
  %shl = shl i64 %zext, 32, !dbg !3219
  %5 = freeze i64 %shl, !dbg !3219
  %6 = load ptr, ptr %self, align 8, !dbg !3217
  %7 = call i32 @std.math.random.Sfc8Random.next_int(ptr %6), !dbg !3220
  %zext1 = zext i32 %7 to i64, !dbg !3220
  %add = add i64 %5, %zext1, !dbg !3219
  ret i64 %add, !dbg !3219

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3216
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.19, i64 9, i32 152) #5, !dbg !3216
  unreachable, !dbg !3216
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Sfc8Random.next_int(ptr %0) #0 comdat !dbg !3221 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3224
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3224
  br i1 %2, label %panic, label %checkok, !dbg !3224

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3225, !DIExpression(), !3226)
  %3 = load ptr, ptr %self, align 8, !dbg !3227
  %4 = call i16 @std.math.random.Sfc8Random.next_short(ptr %3), !dbg !3229
  %zext = zext i16 %4 to i32, !dbg !3229
  %shl = shl i32 %zext, 16, !dbg !3229
  %5 = freeze i32 %shl, !dbg !3229
  %6 = load ptr, ptr %self, align 8, !dbg !3227
  %7 = call i16 @std.math.random.Sfc8Random.next_short(ptr %6), !dbg !3230
  %zext1 = zext i16 %7 to i32, !dbg !3230
  %add = add i32 %5, %zext1, !dbg !3229
  ret i32 %add, !dbg !3229

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3226
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.29, i64 8, i32 153) #5, !dbg !3226
  unreachable, !dbg !3226
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Sfc8Random.next_short(ptr %0) #0 comdat !dbg !3231 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3234
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3234
  br i1 %2, label %panic, label %checkok, !dbg !3234

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3235, !DIExpression(), !3236)
  %3 = load ptr, ptr %self, align 8, !dbg !3237
  %4 = call i8 @std.math.random.Sfc8Random.next_byte(ptr %3), !dbg !3239
  %zext = zext i8 %4 to i16, !dbg !3239
  %zext1 = zext i16 %zext to i32, !dbg !3239
  %shl = shl i32 %zext1, 8, !dbg !3239
  %5 = freeze i32 %shl, !dbg !3239
  %6 = load ptr, ptr %self, align 8, !dbg !3237
  %7 = call i8 @std.math.random.Sfc8Random.next_byte(ptr %6), !dbg !3240
  %zext2 = zext i8 %7 to i32, !dbg !3240
  %add = add i32 %5, %zext2, !dbg !3239
  %trunc = trunc i32 %add to i16, !dbg !3239
  ret i16 %trunc, !dbg !3239

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3236
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.141, i64 11, ptr @.func.30, i64 10, i32 154) #5, !dbg !3236
  unreachable, !dbg !3236
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare i1 @llvm.expect.i1(i1, i1) #2

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.builtin.panicf(ptr, i64, ptr, i64, ptr, i64, i32, ptr byval(%"any[]") align 8) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i32(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i32, i1 immarg) #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.fshr.i64(i64, i64, i64) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memmove.p0.p0.i64(ptr nocapture writeonly, ptr nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.fshr.i32(i32, i32, i32) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i16 @llvm.fshr.i16(i16, i16, i16) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i8 @llvm.fshr.i8(i8, i8, i8) #1

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.mem.allocator.init_default_temp_allocators() #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak ptr @std.core.mem.tmalloc(i64, i64) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.mem.allocator.TempAllocator.reset(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak ptr @std.core.mem.malloc(i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.mem.free(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i32 @std.hash.fnv32a.encode(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.time.clock.now() #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak ptr @std.core.dstring.DString.new_init(ptr, i64, i64, ptr) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i128 @llvm.fshr.i128(i128, i128, i128) #1

define internal void @.c3_dynamic_register() align 8 {
entry:
  %next_val = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.set_seed", i32 0, i32 2), align 8
  %0 = icmp eq ptr %next_val, inttoptr (i64 -1 to ptr)
  br i1 %0, label %dtable_check, label %dtable_skip

dtable_check:                                     ; preds = %dtable_check, %entry
  %dtable_ref = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %entry ], [ %next_dtable_ref, %dtable_check ]
  %dtable_ptr = load ptr, ptr %dtable_ref, align 8
  %1 = icmp eq ptr %dtable_ptr, null
  %next_dtable_ref = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr, i32 0, i32 2
  br i1 %1, label %dtable_found, label %dtable_check

dtable_found:                                     ; preds = %dtable_check
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.set_seed", ptr %dtable_ref, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip

dtable_skip:                                      ; preds = %dtable_found, %entry
  %next_val1 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_long", i32 0, i32 2), align 8
  %2 = icmp eq ptr %next_val1, inttoptr (i64 -1 to ptr)
  br i1 %2, label %dtable_check2, label %dtable_skip7

dtable_check2:                                    ; preds = %dtable_check2, %dtable_skip
  %dtable_ref3 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip ], [ %next_dtable_ref5, %dtable_check2 ]
  %dtable_ptr4 = load ptr, ptr %dtable_ref3, align 8
  %3 = icmp eq ptr %dtable_ptr4, null
  %next_dtable_ref5 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr4, i32 0, i32 2
  br i1 %3, label %dtable_found6, label %dtable_check2

dtable_found6:                                    ; preds = %dtable_check2
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_long", ptr %dtable_ref3, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip7

dtable_skip7:                                     ; preds = %dtable_found6, %dtable_skip
  %next_val8 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_bytes", i32 0, i32 2), align 8
  %4 = icmp eq ptr %next_val8, inttoptr (i64 -1 to ptr)
  br i1 %4, label %dtable_check9, label %dtable_skip14

dtable_check9:                                    ; preds = %dtable_check9, %dtable_skip7
  %dtable_ref10 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip7 ], [ %next_dtable_ref12, %dtable_check9 ]
  %dtable_ptr11 = load ptr, ptr %dtable_ref10, align 8
  %5 = icmp eq ptr %dtable_ptr11, null
  %next_dtable_ref12 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr11, i32 0, i32 2
  br i1 %5, label %dtable_found13, label %dtable_check9

dtable_found13:                                   ; preds = %dtable_check9
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_bytes", ptr %dtable_ref10, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip14

dtable_skip14:                                    ; preds = %dtable_found13, %dtable_skip7
  %next_val15 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int128", i32 0, i32 2), align 8
  %6 = icmp eq ptr %next_val15, inttoptr (i64 -1 to ptr)
  br i1 %6, label %dtable_check16, label %dtable_skip21

dtable_check16:                                   ; preds = %dtable_check16, %dtable_skip14
  %dtable_ref17 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip14 ], [ %next_dtable_ref19, %dtable_check16 ]
  %dtable_ptr18 = load ptr, ptr %dtable_ref17, align 8
  %7 = icmp eq ptr %dtable_ptr18, null
  %next_dtable_ref19 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr18, i32 0, i32 2
  br i1 %7, label %dtable_found20, label %dtable_check16

dtable_found20:                                   ; preds = %dtable_check16
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int128", ptr %dtable_ref17, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip21

dtable_skip21:                                    ; preds = %dtable_found20, %dtable_skip14
  %next_val22 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int", i32 0, i32 2), align 8
  %8 = icmp eq ptr %next_val22, inttoptr (i64 -1 to ptr)
  br i1 %8, label %dtable_check23, label %dtable_skip28

dtable_check23:                                   ; preds = %dtable_check23, %dtable_skip21
  %dtable_ref24 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip21 ], [ %next_dtable_ref26, %dtable_check23 ]
  %dtable_ptr25 = load ptr, ptr %dtable_ref24, align 8
  %9 = icmp eq ptr %dtable_ptr25, null
  %next_dtable_ref26 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr25, i32 0, i32 2
  br i1 %9, label %dtable_found27, label %dtable_check23

dtable_found27:                                   ; preds = %dtable_check23
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int", ptr %dtable_ref24, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip28

dtable_skip28:                                    ; preds = %dtable_found27, %dtable_skip21
  %next_val29 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_short", i32 0, i32 2), align 8
  %10 = icmp eq ptr %next_val29, inttoptr (i64 -1 to ptr)
  br i1 %10, label %dtable_check30, label %dtable_skip35

dtable_check30:                                   ; preds = %dtable_check30, %dtable_skip28
  %dtable_ref31 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip28 ], [ %next_dtable_ref33, %dtable_check30 ]
  %dtable_ptr32 = load ptr, ptr %dtable_ref31, align 8
  %11 = icmp eq ptr %dtable_ptr32, null
  %next_dtable_ref33 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr32, i32 0, i32 2
  br i1 %11, label %dtable_found34, label %dtable_check30

dtable_found34:                                   ; preds = %dtable_check30
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_short", ptr %dtable_ref31, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip35

dtable_skip35:                                    ; preds = %dtable_found34, %dtable_skip28
  %next_val36 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_byte", i32 0, i32 2), align 8
  %12 = icmp eq ptr %next_val36, inttoptr (i64 -1 to ptr)
  br i1 %12, label %dtable_check37, label %dtable_skip42

dtable_check37:                                   ; preds = %dtable_check37, %dtable_skip35
  %dtable_ref38 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip35 ], [ %next_dtable_ref40, %dtable_check37 ]
  %dtable_ptr39 = load ptr, ptr %dtable_ref38, align 8
  %13 = icmp eq ptr %dtable_ptr39, null
  %next_dtable_ref40 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr39, i32 0, i32 2
  br i1 %13, label %dtable_found41, label %dtable_check37

dtable_found41:                                   ; preds = %dtable_check37
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_byte", ptr %dtable_ref38, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip42

dtable_skip42:                                    ; preds = %dtable_found41, %dtable_skip35
  %next_val43 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.set_seed", i32 0, i32 2), align 8
  %14 = icmp eq ptr %next_val43, inttoptr (i64 -1 to ptr)
  br i1 %14, label %dtable_check44, label %dtable_skip49

dtable_check44:                                   ; preds = %dtable_check44, %dtable_skip42
  %dtable_ref45 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip42 ], [ %next_dtable_ref47, %dtable_check44 ]
  %dtable_ptr46 = load ptr, ptr %dtable_ref45, align 8
  %15 = icmp eq ptr %dtable_ptr46, null
  %next_dtable_ref47 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr46, i32 0, i32 2
  br i1 %15, label %dtable_found48, label %dtable_check44

dtable_found48:                                   ; preds = %dtable_check44
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.set_seed", ptr %dtable_ref45, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip49

dtable_skip49:                                    ; preds = %dtable_found48, %dtable_skip42
  %next_val50 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int", i32 0, i32 2), align 8
  %16 = icmp eq ptr %next_val50, inttoptr (i64 -1 to ptr)
  br i1 %16, label %dtable_check51, label %dtable_skip56

dtable_check51:                                   ; preds = %dtable_check51, %dtable_skip49
  %dtable_ref52 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip49 ], [ %next_dtable_ref54, %dtable_check51 ]
  %dtable_ptr53 = load ptr, ptr %dtable_ref52, align 8
  %17 = icmp eq ptr %dtable_ptr53, null
  %next_dtable_ref54 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr53, i32 0, i32 2
  br i1 %17, label %dtable_found55, label %dtable_check51

dtable_found55:                                   ; preds = %dtable_check51
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int", ptr %dtable_ref52, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip56

dtable_skip56:                                    ; preds = %dtable_found55, %dtable_skip49
  %next_val57 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_bytes", i32 0, i32 2), align 8
  %18 = icmp eq ptr %next_val57, inttoptr (i64 -1 to ptr)
  br i1 %18, label %dtable_check58, label %dtable_skip63

dtable_check58:                                   ; preds = %dtable_check58, %dtable_skip56
  %dtable_ref59 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip56 ], [ %next_dtable_ref61, %dtable_check58 ]
  %dtable_ptr60 = load ptr, ptr %dtable_ref59, align 8
  %19 = icmp eq ptr %dtable_ptr60, null
  %next_dtable_ref61 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr60, i32 0, i32 2
  br i1 %19, label %dtable_found62, label %dtable_check58

dtable_found62:                                   ; preds = %dtable_check58
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_bytes", ptr %dtable_ref59, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip63

dtable_skip63:                                    ; preds = %dtable_found62, %dtable_skip56
  %next_val64 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int128", i32 0, i32 2), align 8
  %20 = icmp eq ptr %next_val64, inttoptr (i64 -1 to ptr)
  br i1 %20, label %dtable_check65, label %dtable_skip70

dtable_check65:                                   ; preds = %dtable_check65, %dtable_skip63
  %dtable_ref66 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip63 ], [ %next_dtable_ref68, %dtable_check65 ]
  %dtable_ptr67 = load ptr, ptr %dtable_ref66, align 8
  %21 = icmp eq ptr %dtable_ptr67, null
  %next_dtable_ref68 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr67, i32 0, i32 2
  br i1 %21, label %dtable_found69, label %dtable_check65

dtable_found69:                                   ; preds = %dtable_check65
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int128", ptr %dtable_ref66, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip70

dtable_skip70:                                    ; preds = %dtable_found69, %dtable_skip63
  %next_val71 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_long", i32 0, i32 2), align 8
  %22 = icmp eq ptr %next_val71, inttoptr (i64 -1 to ptr)
  br i1 %22, label %dtable_check72, label %dtable_skip77

dtable_check72:                                   ; preds = %dtable_check72, %dtable_skip70
  %dtable_ref73 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip70 ], [ %next_dtable_ref75, %dtable_check72 ]
  %dtable_ptr74 = load ptr, ptr %dtable_ref73, align 8
  %23 = icmp eq ptr %dtable_ptr74, null
  %next_dtable_ref75 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr74, i32 0, i32 2
  br i1 %23, label %dtable_found76, label %dtable_check72

dtable_found76:                                   ; preds = %dtable_check72
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_long", ptr %dtable_ref73, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip77

dtable_skip77:                                    ; preds = %dtable_found76, %dtable_skip70
  %next_val78 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_short", i32 0, i32 2), align 8
  %24 = icmp eq ptr %next_val78, inttoptr (i64 -1 to ptr)
  br i1 %24, label %dtable_check79, label %dtable_skip84

dtable_check79:                                   ; preds = %dtable_check79, %dtable_skip77
  %dtable_ref80 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip77 ], [ %next_dtable_ref82, %dtable_check79 ]
  %dtable_ptr81 = load ptr, ptr %dtable_ref80, align 8
  %25 = icmp eq ptr %dtable_ptr81, null
  %next_dtable_ref82 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr81, i32 0, i32 2
  br i1 %25, label %dtable_found83, label %dtable_check79

dtable_found83:                                   ; preds = %dtable_check79
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_short", ptr %dtable_ref80, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip84

dtable_skip84:                                    ; preds = %dtable_found83, %dtable_skip77
  %next_val85 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_byte", i32 0, i32 2), align 8
  %26 = icmp eq ptr %next_val85, inttoptr (i64 -1 to ptr)
  br i1 %26, label %dtable_check86, label %dtable_skip91

dtable_check86:                                   ; preds = %dtable_check86, %dtable_skip84
  %dtable_ref87 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip84 ], [ %next_dtable_ref89, %dtable_check86 ]
  %dtable_ptr88 = load ptr, ptr %dtable_ref87, align 8
  %27 = icmp eq ptr %dtable_ptr88, null
  %next_dtable_ref89 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr88, i32 0, i32 2
  br i1 %27, label %dtable_found90, label %dtable_check86

dtable_found90:                                   ; preds = %dtable_check86
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_byte", ptr %dtable_ref87, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip91

dtable_skip91:                                    ; preds = %dtable_found90, %dtable_skip84
  %next_val92 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.set_seed", i32 0, i32 2), align 8
  %28 = icmp eq ptr %next_val92, inttoptr (i64 -1 to ptr)
  br i1 %28, label %dtable_check93, label %dtable_skip98

dtable_check93:                                   ; preds = %dtable_check93, %dtable_skip91
  %dtable_ref94 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip91 ], [ %next_dtable_ref96, %dtable_check93 ]
  %dtable_ptr95 = load ptr, ptr %dtable_ref94, align 8
  %29 = icmp eq ptr %dtable_ptr95, null
  %next_dtable_ref96 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr95, i32 0, i32 2
  br i1 %29, label %dtable_found97, label %dtable_check93

dtable_found97:                                   ; preds = %dtable_check93
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.set_seed", ptr %dtable_ref94, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip98

dtable_skip98:                                    ; preds = %dtable_found97, %dtable_skip91
  %next_val99 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_short", i32 0, i32 2), align 8
  %30 = icmp eq ptr %next_val99, inttoptr (i64 -1 to ptr)
  br i1 %30, label %dtable_check100, label %dtable_skip105

dtable_check100:                                  ; preds = %dtable_check100, %dtable_skip98
  %dtable_ref101 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip98 ], [ %next_dtable_ref103, %dtable_check100 ]
  %dtable_ptr102 = load ptr, ptr %dtable_ref101, align 8
  %31 = icmp eq ptr %dtable_ptr102, null
  %next_dtable_ref103 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr102, i32 0, i32 2
  br i1 %31, label %dtable_found104, label %dtable_check100

dtable_found104:                                  ; preds = %dtable_check100
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_short", ptr %dtable_ref101, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip105

dtable_skip105:                                   ; preds = %dtable_found104, %dtable_skip98
  %next_val106 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_bytes", i32 0, i32 2), align 8
  %32 = icmp eq ptr %next_val106, inttoptr (i64 -1 to ptr)
  br i1 %32, label %dtable_check107, label %dtable_skip112

dtable_check107:                                  ; preds = %dtable_check107, %dtable_skip105
  %dtable_ref108 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip105 ], [ %next_dtable_ref110, %dtable_check107 ]
  %dtable_ptr109 = load ptr, ptr %dtable_ref108, align 8
  %33 = icmp eq ptr %dtable_ptr109, null
  %next_dtable_ref110 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr109, i32 0, i32 2
  br i1 %33, label %dtable_found111, label %dtable_check107

dtable_found111:                                  ; preds = %dtable_check107
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_bytes", ptr %dtable_ref108, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip112

dtable_skip112:                                   ; preds = %dtable_found111, %dtable_skip105
  %next_val113 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int128", i32 0, i32 2), align 8
  %34 = icmp eq ptr %next_val113, inttoptr (i64 -1 to ptr)
  br i1 %34, label %dtable_check114, label %dtable_skip119

dtable_check114:                                  ; preds = %dtable_check114, %dtable_skip112
  %dtable_ref115 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip112 ], [ %next_dtable_ref117, %dtable_check114 ]
  %dtable_ptr116 = load ptr, ptr %dtable_ref115, align 8
  %35 = icmp eq ptr %dtable_ptr116, null
  %next_dtable_ref117 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr116, i32 0, i32 2
  br i1 %35, label %dtable_found118, label %dtable_check114

dtable_found118:                                  ; preds = %dtable_check114
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int128", ptr %dtable_ref115, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip119

dtable_skip119:                                   ; preds = %dtable_found118, %dtable_skip112
  %next_val120 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_long", i32 0, i32 2), align 8
  %36 = icmp eq ptr %next_val120, inttoptr (i64 -1 to ptr)
  br i1 %36, label %dtable_check121, label %dtable_skip126

dtable_check121:                                  ; preds = %dtable_check121, %dtable_skip119
  %dtable_ref122 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip119 ], [ %next_dtable_ref124, %dtable_check121 ]
  %dtable_ptr123 = load ptr, ptr %dtable_ref122, align 8
  %37 = icmp eq ptr %dtable_ptr123, null
  %next_dtable_ref124 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr123, i32 0, i32 2
  br i1 %37, label %dtable_found125, label %dtable_check121

dtable_found125:                                  ; preds = %dtable_check121
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_long", ptr %dtable_ref122, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip126

dtable_skip126:                                   ; preds = %dtable_found125, %dtable_skip119
  %next_val127 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int", i32 0, i32 2), align 8
  %38 = icmp eq ptr %next_val127, inttoptr (i64 -1 to ptr)
  br i1 %38, label %dtable_check128, label %dtable_skip133

dtable_check128:                                  ; preds = %dtable_check128, %dtable_skip126
  %dtable_ref129 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip126 ], [ %next_dtable_ref131, %dtable_check128 ]
  %dtable_ptr130 = load ptr, ptr %dtable_ref129, align 8
  %39 = icmp eq ptr %dtable_ptr130, null
  %next_dtable_ref131 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr130, i32 0, i32 2
  br i1 %39, label %dtable_found132, label %dtable_check128

dtable_found132:                                  ; preds = %dtable_check128
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int", ptr %dtable_ref129, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip133

dtable_skip133:                                   ; preds = %dtable_found132, %dtable_skip126
  %next_val134 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_byte", i32 0, i32 2), align 8
  %40 = icmp eq ptr %next_val134, inttoptr (i64 -1 to ptr)
  br i1 %40, label %dtable_check135, label %dtable_skip140

dtable_check135:                                  ; preds = %dtable_check135, %dtable_skip133
  %dtable_ref136 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip133 ], [ %next_dtable_ref138, %dtable_check135 ]
  %dtable_ptr137 = load ptr, ptr %dtable_ref136, align 8
  %41 = icmp eq ptr %dtable_ptr137, null
  %next_dtable_ref138 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr137, i32 0, i32 2
  br i1 %41, label %dtable_found139, label %dtable_check135

dtable_found139:                                  ; preds = %dtable_check135
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_byte", ptr %dtable_ref136, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip140

dtable_skip140:                                   ; preds = %dtable_found139, %dtable_skip133
  %next_val141 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.set_seed", i32 0, i32 2), align 8
  %42 = icmp eq ptr %next_val141, inttoptr (i64 -1 to ptr)
  br i1 %42, label %dtable_check142, label %dtable_skip147

dtable_check142:                                  ; preds = %dtable_check142, %dtable_skip140
  %dtable_ref143 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip140 ], [ %next_dtable_ref145, %dtable_check142 ]
  %dtable_ptr144 = load ptr, ptr %dtable_ref143, align 8
  %43 = icmp eq ptr %dtable_ptr144, null
  %next_dtable_ref145 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr144, i32 0, i32 2
  br i1 %43, label %dtable_found146, label %dtable_check142

dtable_found146:                                  ; preds = %dtable_check142
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.set_seed", ptr %dtable_ref143, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip147

dtable_skip147:                                   ; preds = %dtable_found146, %dtable_skip140
  %next_val148 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_byte", i32 0, i32 2), align 8
  %44 = icmp eq ptr %next_val148, inttoptr (i64 -1 to ptr)
  br i1 %44, label %dtable_check149, label %dtable_skip154

dtable_check149:                                  ; preds = %dtable_check149, %dtable_skip147
  %dtable_ref150 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip147 ], [ %next_dtable_ref152, %dtable_check149 ]
  %dtable_ptr151 = load ptr, ptr %dtable_ref150, align 8
  %45 = icmp eq ptr %dtable_ptr151, null
  %next_dtable_ref152 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr151, i32 0, i32 2
  br i1 %45, label %dtable_found153, label %dtable_check149

dtable_found153:                                  ; preds = %dtable_check149
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_byte", ptr %dtable_ref150, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip154

dtable_skip154:                                   ; preds = %dtable_found153, %dtable_skip147
  %next_val155 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_bytes", i32 0, i32 2), align 8
  %46 = icmp eq ptr %next_val155, inttoptr (i64 -1 to ptr)
  br i1 %46, label %dtable_check156, label %dtable_skip161

dtable_check156:                                  ; preds = %dtable_check156, %dtable_skip154
  %dtable_ref157 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip154 ], [ %next_dtable_ref159, %dtable_check156 ]
  %dtable_ptr158 = load ptr, ptr %dtable_ref157, align 8
  %47 = icmp eq ptr %dtable_ptr158, null
  %next_dtable_ref159 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr158, i32 0, i32 2
  br i1 %47, label %dtable_found160, label %dtable_check156

dtable_found160:                                  ; preds = %dtable_check156
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_bytes", ptr %dtable_ref157, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip161

dtable_skip161:                                   ; preds = %dtable_found160, %dtable_skip154
  %next_val162 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int128", i32 0, i32 2), align 8
  %48 = icmp eq ptr %next_val162, inttoptr (i64 -1 to ptr)
  br i1 %48, label %dtable_check163, label %dtable_skip168

dtable_check163:                                  ; preds = %dtable_check163, %dtable_skip161
  %dtable_ref164 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip161 ], [ %next_dtable_ref166, %dtable_check163 ]
  %dtable_ptr165 = load ptr, ptr %dtable_ref164, align 8
  %49 = icmp eq ptr %dtable_ptr165, null
  %next_dtable_ref166 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr165, i32 0, i32 2
  br i1 %49, label %dtable_found167, label %dtable_check163

dtable_found167:                                  ; preds = %dtable_check163
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int128", ptr %dtable_ref164, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip168

dtable_skip168:                                   ; preds = %dtable_found167, %dtable_skip161
  %next_val169 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_long", i32 0, i32 2), align 8
  %50 = icmp eq ptr %next_val169, inttoptr (i64 -1 to ptr)
  br i1 %50, label %dtable_check170, label %dtable_skip175

dtable_check170:                                  ; preds = %dtable_check170, %dtable_skip168
  %dtable_ref171 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip168 ], [ %next_dtable_ref173, %dtable_check170 ]
  %dtable_ptr172 = load ptr, ptr %dtable_ref171, align 8
  %51 = icmp eq ptr %dtable_ptr172, null
  %next_dtable_ref173 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr172, i32 0, i32 2
  br i1 %51, label %dtable_found174, label %dtable_check170

dtable_found174:                                  ; preds = %dtable_check170
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_long", ptr %dtable_ref171, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip175

dtable_skip175:                                   ; preds = %dtable_found174, %dtable_skip168
  %next_val176 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int", i32 0, i32 2), align 8
  %52 = icmp eq ptr %next_val176, inttoptr (i64 -1 to ptr)
  br i1 %52, label %dtable_check177, label %dtable_skip182

dtable_check177:                                  ; preds = %dtable_check177, %dtable_skip175
  %dtable_ref178 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip175 ], [ %next_dtable_ref180, %dtable_check177 ]
  %dtable_ptr179 = load ptr, ptr %dtable_ref178, align 8
  %53 = icmp eq ptr %dtable_ptr179, null
  %next_dtable_ref180 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr179, i32 0, i32 2
  br i1 %53, label %dtable_found181, label %dtable_check177

dtable_found181:                                  ; preds = %dtable_check177
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int", ptr %dtable_ref178, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip182

dtable_skip182:                                   ; preds = %dtable_found181, %dtable_skip175
  %next_val183 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_short", i32 0, i32 2), align 8
  %54 = icmp eq ptr %next_val183, inttoptr (i64 -1 to ptr)
  br i1 %54, label %dtable_check184, label %dtable_skip189

dtable_check184:                                  ; preds = %dtable_check184, %dtable_skip182
  %dtable_ref185 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip182 ], [ %next_dtable_ref187, %dtable_check184 ]
  %dtable_ptr186 = load ptr, ptr %dtable_ref185, align 8
  %55 = icmp eq ptr %dtable_ptr186, null
  %next_dtable_ref187 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr186, i32 0, i32 2
  br i1 %55, label %dtable_found188, label %dtable_check184

dtable_found188:                                  ; preds = %dtable_check184
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_short", ptr %dtable_ref185, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip189

dtable_skip189:                                   ; preds = %dtable_found188, %dtable_skip182
  %next_val190 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.set_seed", i32 0, i32 2), align 8
  %56 = icmp eq ptr %next_val190, inttoptr (i64 -1 to ptr)
  br i1 %56, label %dtable_check191, label %dtable_skip196

dtable_check191:                                  ; preds = %dtable_check191, %dtable_skip189
  %dtable_ref192 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip189 ], [ %next_dtable_ref194, %dtable_check191 ]
  %dtable_ptr193 = load ptr, ptr %dtable_ref192, align 8
  %57 = icmp eq ptr %dtable_ptr193, null
  %next_dtable_ref194 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr193, i32 0, i32 2
  br i1 %57, label %dtable_found195, label %dtable_check191

dtable_found195:                                  ; preds = %dtable_check191
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.set_seed", ptr %dtable_ref192, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip196

dtable_skip196:                                   ; preds = %dtable_found195, %dtable_skip189
  %next_val197 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_bytes", i32 0, i32 2), align 8
  %58 = icmp eq ptr %next_val197, inttoptr (i64 -1 to ptr)
  br i1 %58, label %dtable_check198, label %dtable_skip203

dtable_check198:                                  ; preds = %dtable_check198, %dtable_skip196
  %dtable_ref199 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip196 ], [ %next_dtable_ref201, %dtable_check198 ]
  %dtable_ptr200 = load ptr, ptr %dtable_ref199, align 8
  %59 = icmp eq ptr %dtable_ptr200, null
  %next_dtable_ref201 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr200, i32 0, i32 2
  br i1 %59, label %dtable_found202, label %dtable_check198

dtable_found202:                                  ; preds = %dtable_check198
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_bytes", ptr %dtable_ref199, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip203

dtable_skip203:                                   ; preds = %dtable_found202, %dtable_skip196
  %next_val204 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_long", i32 0, i32 2), align 8
  %60 = icmp eq ptr %next_val204, inttoptr (i64 -1 to ptr)
  br i1 %60, label %dtable_check205, label %dtable_skip210

dtable_check205:                                  ; preds = %dtable_check205, %dtable_skip203
  %dtable_ref206 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip203 ], [ %next_dtable_ref208, %dtable_check205 ]
  %dtable_ptr207 = load ptr, ptr %dtable_ref206, align 8
  %61 = icmp eq ptr %dtable_ptr207, null
  %next_dtable_ref208 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr207, i32 0, i32 2
  br i1 %61, label %dtable_found209, label %dtable_check205

dtable_found209:                                  ; preds = %dtable_check205
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_long", ptr %dtable_ref206, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip210

dtable_skip210:                                   ; preds = %dtable_found209, %dtable_skip203
  %next_val211 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int128", i32 0, i32 2), align 8
  %62 = icmp eq ptr %next_val211, inttoptr (i64 -1 to ptr)
  br i1 %62, label %dtable_check212, label %dtable_skip217

dtable_check212:                                  ; preds = %dtable_check212, %dtable_skip210
  %dtable_ref213 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip210 ], [ %next_dtable_ref215, %dtable_check212 ]
  %dtable_ptr214 = load ptr, ptr %dtable_ref213, align 8
  %63 = icmp eq ptr %dtable_ptr214, null
  %next_dtable_ref215 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr214, i32 0, i32 2
  br i1 %63, label %dtable_found216, label %dtable_check212

dtable_found216:                                  ; preds = %dtable_check212
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int128", ptr %dtable_ref213, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip217

dtable_skip217:                                   ; preds = %dtable_found216, %dtable_skip210
  %next_val218 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int", i32 0, i32 2), align 8
  %64 = icmp eq ptr %next_val218, inttoptr (i64 -1 to ptr)
  br i1 %64, label %dtable_check219, label %dtable_skip224

dtable_check219:                                  ; preds = %dtable_check219, %dtable_skip217
  %dtable_ref220 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip217 ], [ %next_dtable_ref222, %dtable_check219 ]
  %dtable_ptr221 = load ptr, ptr %dtable_ref220, align 8
  %65 = icmp eq ptr %dtable_ptr221, null
  %next_dtable_ref222 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr221, i32 0, i32 2
  br i1 %65, label %dtable_found223, label %dtable_check219

dtable_found223:                                  ; preds = %dtable_check219
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int", ptr %dtable_ref220, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip224

dtable_skip224:                                   ; preds = %dtable_found223, %dtable_skip217
  %next_val225 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_short", i32 0, i32 2), align 8
  %66 = icmp eq ptr %next_val225, inttoptr (i64 -1 to ptr)
  br i1 %66, label %dtable_check226, label %dtable_skip231

dtable_check226:                                  ; preds = %dtable_check226, %dtable_skip224
  %dtable_ref227 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip224 ], [ %next_dtable_ref229, %dtable_check226 ]
  %dtable_ptr228 = load ptr, ptr %dtable_ref227, align 8
  %67 = icmp eq ptr %dtable_ptr228, null
  %next_dtable_ref229 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr228, i32 0, i32 2
  br i1 %67, label %dtable_found230, label %dtable_check226

dtable_found230:                                  ; preds = %dtable_check226
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_short", ptr %dtable_ref227, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip231

dtable_skip231:                                   ; preds = %dtable_found230, %dtable_skip224
  %next_val232 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_byte", i32 0, i32 2), align 8
  %68 = icmp eq ptr %next_val232, inttoptr (i64 -1 to ptr)
  br i1 %68, label %dtable_check233, label %dtable_skip238

dtable_check233:                                  ; preds = %dtable_check233, %dtable_skip231
  %dtable_ref234 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip231 ], [ %next_dtable_ref236, %dtable_check233 ]
  %dtable_ptr235 = load ptr, ptr %dtable_ref234, align 8
  %69 = icmp eq ptr %dtable_ptr235, null
  %next_dtable_ref236 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr235, i32 0, i32 2
  br i1 %69, label %dtable_found237, label %dtable_check233

dtable_found237:                                  ; preds = %dtable_check233
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_byte", ptr %dtable_ref234, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip238

dtable_skip238:                                   ; preds = %dtable_found237, %dtable_skip231
  %next_val239 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.set_seed", i32 0, i32 2), align 8
  %70 = icmp eq ptr %next_val239, inttoptr (i64 -1 to ptr)
  br i1 %70, label %dtable_check240, label %dtable_skip245

dtable_check240:                                  ; preds = %dtable_check240, %dtable_skip238
  %dtable_ref241 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip238 ], [ %next_dtable_ref243, %dtable_check240 ]
  %dtable_ptr242 = load ptr, ptr %dtable_ref241, align 8
  %71 = icmp eq ptr %dtable_ptr242, null
  %next_dtable_ref243 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr242, i32 0, i32 2
  br i1 %71, label %dtable_found244, label %dtable_check240

dtable_found244:                                  ; preds = %dtable_check240
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.set_seed", ptr %dtable_ref241, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip245

dtable_skip245:                                   ; preds = %dtable_found244, %dtable_skip238
  %next_val246 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_bytes", i32 0, i32 2), align 8
  %72 = icmp eq ptr %next_val246, inttoptr (i64 -1 to ptr)
  br i1 %72, label %dtable_check247, label %dtable_skip252

dtable_check247:                                  ; preds = %dtable_check247, %dtable_skip245
  %dtable_ref248 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip245 ], [ %next_dtable_ref250, %dtable_check247 ]
  %dtable_ptr249 = load ptr, ptr %dtable_ref248, align 8
  %73 = icmp eq ptr %dtable_ptr249, null
  %next_dtable_ref250 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr249, i32 0, i32 2
  br i1 %73, label %dtable_found251, label %dtable_check247

dtable_found251:                                  ; preds = %dtable_check247
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_bytes", ptr %dtable_ref248, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip252

dtable_skip252:                                   ; preds = %dtable_found251, %dtable_skip245
  %next_val253 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int", i32 0, i32 2), align 8
  %74 = icmp eq ptr %next_val253, inttoptr (i64 -1 to ptr)
  br i1 %74, label %dtable_check254, label %dtable_skip259

dtable_check254:                                  ; preds = %dtable_check254, %dtable_skip252
  %dtable_ref255 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip252 ], [ %next_dtable_ref257, %dtable_check254 ]
  %dtable_ptr256 = load ptr, ptr %dtable_ref255, align 8
  %75 = icmp eq ptr %dtable_ptr256, null
  %next_dtable_ref257 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr256, i32 0, i32 2
  br i1 %75, label %dtable_found258, label %dtable_check254

dtable_found258:                                  ; preds = %dtable_check254
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int", ptr %dtable_ref255, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip259

dtable_skip259:                                   ; preds = %dtable_found258, %dtable_skip252
  %next_val260 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int128", i32 0, i32 2), align 8
  %76 = icmp eq ptr %next_val260, inttoptr (i64 -1 to ptr)
  br i1 %76, label %dtable_check261, label %dtable_skip266

dtable_check261:                                  ; preds = %dtable_check261, %dtable_skip259
  %dtable_ref262 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip259 ], [ %next_dtable_ref264, %dtable_check261 ]
  %dtable_ptr263 = load ptr, ptr %dtable_ref262, align 8
  %77 = icmp eq ptr %dtable_ptr263, null
  %next_dtable_ref264 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr263, i32 0, i32 2
  br i1 %77, label %dtable_found265, label %dtable_check261

dtable_found265:                                  ; preds = %dtable_check261
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int128", ptr %dtable_ref262, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip266

dtable_skip266:                                   ; preds = %dtable_found265, %dtable_skip259
  %next_val267 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_long", i32 0, i32 2), align 8
  %78 = icmp eq ptr %next_val267, inttoptr (i64 -1 to ptr)
  br i1 %78, label %dtable_check268, label %dtable_skip273

dtable_check268:                                  ; preds = %dtable_check268, %dtable_skip266
  %dtable_ref269 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip266 ], [ %next_dtable_ref271, %dtable_check268 ]
  %dtable_ptr270 = load ptr, ptr %dtable_ref269, align 8
  %79 = icmp eq ptr %dtable_ptr270, null
  %next_dtable_ref271 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr270, i32 0, i32 2
  br i1 %79, label %dtable_found272, label %dtable_check268

dtable_found272:                                  ; preds = %dtable_check268
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_long", ptr %dtable_ref269, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip273

dtable_skip273:                                   ; preds = %dtable_found272, %dtable_skip266
  %next_val274 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_short", i32 0, i32 2), align 8
  %80 = icmp eq ptr %next_val274, inttoptr (i64 -1 to ptr)
  br i1 %80, label %dtable_check275, label %dtable_skip280

dtable_check275:                                  ; preds = %dtable_check275, %dtable_skip273
  %dtable_ref276 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip273 ], [ %next_dtable_ref278, %dtable_check275 ]
  %dtable_ptr277 = load ptr, ptr %dtable_ref276, align 8
  %81 = icmp eq ptr %dtable_ptr277, null
  %next_dtable_ref278 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr277, i32 0, i32 2
  br i1 %81, label %dtable_found279, label %dtable_check275

dtable_found279:                                  ; preds = %dtable_check275
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_short", ptr %dtable_ref276, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip280

dtable_skip280:                                   ; preds = %dtable_found279, %dtable_skip273
  %next_val281 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_byte", i32 0, i32 2), align 8
  %82 = icmp eq ptr %next_val281, inttoptr (i64 -1 to ptr)
  br i1 %82, label %dtable_check282, label %dtable_skip287

dtable_check282:                                  ; preds = %dtable_check282, %dtable_skip280
  %dtable_ref283 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip280 ], [ %next_dtable_ref285, %dtable_check282 ]
  %dtable_ptr284 = load ptr, ptr %dtable_ref283, align 8
  %83 = icmp eq ptr %dtable_ptr284, null
  %next_dtable_ref285 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr284, i32 0, i32 2
  br i1 %83, label %dtable_found286, label %dtable_check282

dtable_found286:                                  ; preds = %dtable_check282
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_byte", ptr %dtable_ref283, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip287

dtable_skip287:                                   ; preds = %dtable_found286, %dtable_skip280
  %next_val288 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.set_seed", i32 0, i32 2), align 8
  %84 = icmp eq ptr %next_val288, inttoptr (i64 -1 to ptr)
  br i1 %84, label %dtable_check289, label %dtable_skip294

dtable_check289:                                  ; preds = %dtable_check289, %dtable_skip287
  %dtable_ref290 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip287 ], [ %next_dtable_ref292, %dtable_check289 ]
  %dtable_ptr291 = load ptr, ptr %dtable_ref290, align 8
  %85 = icmp eq ptr %dtable_ptr291, null
  %next_dtable_ref292 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr291, i32 0, i32 2
  br i1 %85, label %dtable_found293, label %dtable_check289

dtable_found293:                                  ; preds = %dtable_check289
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.set_seed", ptr %dtable_ref290, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip294

dtable_skip294:                                   ; preds = %dtable_found293, %dtable_skip287
  %next_val295 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_short", i32 0, i32 2), align 8
  %86 = icmp eq ptr %next_val295, inttoptr (i64 -1 to ptr)
  br i1 %86, label %dtable_check296, label %dtable_skip301

dtable_check296:                                  ; preds = %dtable_check296, %dtable_skip294
  %dtable_ref297 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip294 ], [ %next_dtable_ref299, %dtable_check296 ]
  %dtable_ptr298 = load ptr, ptr %dtable_ref297, align 8
  %87 = icmp eq ptr %dtable_ptr298, null
  %next_dtable_ref299 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr298, i32 0, i32 2
  br i1 %87, label %dtable_found300, label %dtable_check296

dtable_found300:                                  ; preds = %dtable_check296
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_short", ptr %dtable_ref297, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip301

dtable_skip301:                                   ; preds = %dtable_found300, %dtable_skip294
  %next_val302 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_bytes", i32 0, i32 2), align 8
  %88 = icmp eq ptr %next_val302, inttoptr (i64 -1 to ptr)
  br i1 %88, label %dtable_check303, label %dtable_skip308

dtable_check303:                                  ; preds = %dtable_check303, %dtable_skip301
  %dtable_ref304 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip301 ], [ %next_dtable_ref306, %dtable_check303 ]
  %dtable_ptr305 = load ptr, ptr %dtable_ref304, align 8
  %89 = icmp eq ptr %dtable_ptr305, null
  %next_dtable_ref306 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr305, i32 0, i32 2
  br i1 %89, label %dtable_found307, label %dtable_check303

dtable_found307:                                  ; preds = %dtable_check303
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_bytes", ptr %dtable_ref304, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip308

dtable_skip308:                                   ; preds = %dtable_found307, %dtable_skip301
  %next_val309 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int128", i32 0, i32 2), align 8
  %90 = icmp eq ptr %next_val309, inttoptr (i64 -1 to ptr)
  br i1 %90, label %dtable_check310, label %dtable_skip315

dtable_check310:                                  ; preds = %dtable_check310, %dtable_skip308
  %dtable_ref311 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip308 ], [ %next_dtable_ref313, %dtable_check310 ]
  %dtable_ptr312 = load ptr, ptr %dtable_ref311, align 8
  %91 = icmp eq ptr %dtable_ptr312, null
  %next_dtable_ref313 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr312, i32 0, i32 2
  br i1 %91, label %dtable_found314, label %dtable_check310

dtable_found314:                                  ; preds = %dtable_check310
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int128", ptr %dtable_ref311, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip315

dtable_skip315:                                   ; preds = %dtable_found314, %dtable_skip308
  %next_val316 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_long", i32 0, i32 2), align 8
  %92 = icmp eq ptr %next_val316, inttoptr (i64 -1 to ptr)
  br i1 %92, label %dtable_check317, label %dtable_skip322

dtable_check317:                                  ; preds = %dtable_check317, %dtable_skip315
  %dtable_ref318 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip315 ], [ %next_dtable_ref320, %dtable_check317 ]
  %dtable_ptr319 = load ptr, ptr %dtable_ref318, align 8
  %93 = icmp eq ptr %dtable_ptr319, null
  %next_dtable_ref320 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr319, i32 0, i32 2
  br i1 %93, label %dtable_found321, label %dtable_check317

dtable_found321:                                  ; preds = %dtable_check317
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_long", ptr %dtable_ref318, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip322

dtable_skip322:                                   ; preds = %dtable_found321, %dtable_skip315
  %next_val323 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int", i32 0, i32 2), align 8
  %94 = icmp eq ptr %next_val323, inttoptr (i64 -1 to ptr)
  br i1 %94, label %dtable_check324, label %dtable_skip329

dtable_check324:                                  ; preds = %dtable_check324, %dtable_skip322
  %dtable_ref325 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip322 ], [ %next_dtable_ref327, %dtable_check324 ]
  %dtable_ptr326 = load ptr, ptr %dtable_ref325, align 8
  %95 = icmp eq ptr %dtable_ptr326, null
  %next_dtable_ref327 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr326, i32 0, i32 2
  br i1 %95, label %dtable_found328, label %dtable_check324

dtable_found328:                                  ; preds = %dtable_check324
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int", ptr %dtable_ref325, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip329

dtable_skip329:                                   ; preds = %dtable_found328, %dtable_skip322
  %next_val330 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_byte", i32 0, i32 2), align 8
  %96 = icmp eq ptr %next_val330, inttoptr (i64 -1 to ptr)
  br i1 %96, label %dtable_check331, label %dtable_skip336

dtable_check331:                                  ; preds = %dtable_check331, %dtable_skip329
  %dtable_ref332 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip329 ], [ %next_dtable_ref334, %dtable_check331 ]
  %dtable_ptr333 = load ptr, ptr %dtable_ref332, align 8
  %97 = icmp eq ptr %dtable_ptr333, null
  %next_dtable_ref334 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr333, i32 0, i32 2
  br i1 %97, label %dtable_found335, label %dtable_check331

dtable_found335:                                  ; preds = %dtable_check331
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_byte", ptr %dtable_ref332, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip336

dtable_skip336:                                   ; preds = %dtable_found335, %dtable_skip329
  %next_val337 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.set_seed", i32 0, i32 2), align 8
  %98 = icmp eq ptr %next_val337, inttoptr (i64 -1 to ptr)
  br i1 %98, label %dtable_check338, label %dtable_skip343

dtable_check338:                                  ; preds = %dtable_check338, %dtable_skip336
  %dtable_ref339 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip336 ], [ %next_dtable_ref341, %dtable_check338 ]
  %dtable_ptr340 = load ptr, ptr %dtable_ref339, align 8
  %99 = icmp eq ptr %dtable_ptr340, null
  %next_dtable_ref341 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr340, i32 0, i32 2
  br i1 %99, label %dtable_found342, label %dtable_check338

dtable_found342:                                  ; preds = %dtable_check338
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.set_seed", ptr %dtable_ref339, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip343

dtable_skip343:                                   ; preds = %dtable_found342, %dtable_skip336
  %next_val344 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_byte", i32 0, i32 2), align 8
  %100 = icmp eq ptr %next_val344, inttoptr (i64 -1 to ptr)
  br i1 %100, label %dtable_check345, label %dtable_skip350

dtable_check345:                                  ; preds = %dtable_check345, %dtable_skip343
  %dtable_ref346 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip343 ], [ %next_dtable_ref348, %dtable_check345 ]
  %dtable_ptr347 = load ptr, ptr %dtable_ref346, align 8
  %101 = icmp eq ptr %dtable_ptr347, null
  %next_dtable_ref348 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr347, i32 0, i32 2
  br i1 %101, label %dtable_found349, label %dtable_check345

dtable_found349:                                  ; preds = %dtable_check345
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_byte", ptr %dtable_ref346, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip350

dtable_skip350:                                   ; preds = %dtable_found349, %dtable_skip343
  %next_val351 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_bytes", i32 0, i32 2), align 8
  %102 = icmp eq ptr %next_val351, inttoptr (i64 -1 to ptr)
  br i1 %102, label %dtable_check352, label %dtable_skip357

dtable_check352:                                  ; preds = %dtable_check352, %dtable_skip350
  %dtable_ref353 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip350 ], [ %next_dtable_ref355, %dtable_check352 ]
  %dtable_ptr354 = load ptr, ptr %dtable_ref353, align 8
  %103 = icmp eq ptr %dtable_ptr354, null
  %next_dtable_ref355 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr354, i32 0, i32 2
  br i1 %103, label %dtable_found356, label %dtable_check352

dtable_found356:                                  ; preds = %dtable_check352
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_bytes", ptr %dtable_ref353, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip357

dtable_skip357:                                   ; preds = %dtable_found356, %dtable_skip350
  %next_val358 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int128", i32 0, i32 2), align 8
  %104 = icmp eq ptr %next_val358, inttoptr (i64 -1 to ptr)
  br i1 %104, label %dtable_check359, label %dtable_skip364

dtable_check359:                                  ; preds = %dtable_check359, %dtable_skip357
  %dtable_ref360 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip357 ], [ %next_dtable_ref362, %dtable_check359 ]
  %dtable_ptr361 = load ptr, ptr %dtable_ref360, align 8
  %105 = icmp eq ptr %dtable_ptr361, null
  %next_dtable_ref362 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr361, i32 0, i32 2
  br i1 %105, label %dtable_found363, label %dtable_check359

dtable_found363:                                  ; preds = %dtable_check359
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int128", ptr %dtable_ref360, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip364

dtable_skip364:                                   ; preds = %dtable_found363, %dtable_skip357
  %next_val365 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_long", i32 0, i32 2), align 8
  %106 = icmp eq ptr %next_val365, inttoptr (i64 -1 to ptr)
  br i1 %106, label %dtable_check366, label %dtable_skip371

dtable_check366:                                  ; preds = %dtable_check366, %dtable_skip364
  %dtable_ref367 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip364 ], [ %next_dtable_ref369, %dtable_check366 ]
  %dtable_ptr368 = load ptr, ptr %dtable_ref367, align 8
  %107 = icmp eq ptr %dtable_ptr368, null
  %next_dtable_ref369 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr368, i32 0, i32 2
  br i1 %107, label %dtable_found370, label %dtable_check366

dtable_found370:                                  ; preds = %dtable_check366
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_long", ptr %dtable_ref367, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip371

dtable_skip371:                                   ; preds = %dtable_found370, %dtable_skip364
  %next_val372 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int", i32 0, i32 2), align 8
  %108 = icmp eq ptr %next_val372, inttoptr (i64 -1 to ptr)
  br i1 %108, label %dtable_check373, label %dtable_skip378

dtable_check373:                                  ; preds = %dtable_check373, %dtable_skip371
  %dtable_ref374 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip371 ], [ %next_dtable_ref376, %dtable_check373 ]
  %dtable_ptr375 = load ptr, ptr %dtable_ref374, align 8
  %109 = icmp eq ptr %dtable_ptr375, null
  %next_dtable_ref376 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr375, i32 0, i32 2
  br i1 %109, label %dtable_found377, label %dtable_check373

dtable_found377:                                  ; preds = %dtable_check373
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int", ptr %dtable_ref374, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip378

dtable_skip378:                                   ; preds = %dtable_found377, %dtable_skip371
  %next_val379 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_short", i32 0, i32 2), align 8
  %110 = icmp eq ptr %next_val379, inttoptr (i64 -1 to ptr)
  br i1 %110, label %dtable_check380, label %dtable_skip385

dtable_check380:                                  ; preds = %dtable_check380, %dtable_skip378
  %dtable_ref381 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip378 ], [ %next_dtable_ref383, %dtable_check380 ]
  %dtable_ptr382 = load ptr, ptr %dtable_ref381, align 8
  %111 = icmp eq ptr %dtable_ptr382, null
  %next_dtable_ref383 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr382, i32 0, i32 2
  br i1 %111, label %dtable_found384, label %dtable_check380

dtable_found384:                                  ; preds = %dtable_check380
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_short", ptr %dtable_ref381, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip385

dtable_skip385:                                   ; preds = %dtable_found384, %dtable_skip378
  %next_val386 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.set_seed", i32 0, i32 2), align 8
  %112 = icmp eq ptr %next_val386, inttoptr (i64 -1 to ptr)
  br i1 %112, label %dtable_check387, label %dtable_skip392

dtable_check387:                                  ; preds = %dtable_check387, %dtable_skip385
  %dtable_ref388 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip385 ], [ %next_dtable_ref390, %dtable_check387 ]
  %dtable_ptr389 = load ptr, ptr %dtable_ref388, align 8
  %113 = icmp eq ptr %dtable_ptr389, null
  %next_dtable_ref390 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr389, i32 0, i32 2
  br i1 %113, label %dtable_found391, label %dtable_check387

dtable_found391:                                  ; preds = %dtable_check387
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.set_seed", ptr %dtable_ref388, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip392

dtable_skip392:                                   ; preds = %dtable_found391, %dtable_skip385
  %next_val393 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_long", i32 0, i32 2), align 8
  %114 = icmp eq ptr %next_val393, inttoptr (i64 -1 to ptr)
  br i1 %114, label %dtable_check394, label %dtable_skip399

dtable_check394:                                  ; preds = %dtable_check394, %dtable_skip392
  %dtable_ref395 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip392 ], [ %next_dtable_ref397, %dtable_check394 ]
  %dtable_ptr396 = load ptr, ptr %dtable_ref395, align 8
  %115 = icmp eq ptr %dtable_ptr396, null
  %next_dtable_ref397 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr396, i32 0, i32 2
  br i1 %115, label %dtable_found398, label %dtable_check394

dtable_found398:                                  ; preds = %dtable_check394
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_long", ptr %dtable_ref395, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip399

dtable_skip399:                                   ; preds = %dtable_found398, %dtable_skip392
  %next_val400 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_bytes", i32 0, i32 2), align 8
  %116 = icmp eq ptr %next_val400, inttoptr (i64 -1 to ptr)
  br i1 %116, label %dtable_check401, label %dtable_skip406

dtable_check401:                                  ; preds = %dtable_check401, %dtable_skip399
  %dtable_ref402 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip399 ], [ %next_dtable_ref404, %dtable_check401 ]
  %dtable_ptr403 = load ptr, ptr %dtable_ref402, align 8
  %117 = icmp eq ptr %dtable_ptr403, null
  %next_dtable_ref404 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr403, i32 0, i32 2
  br i1 %117, label %dtable_found405, label %dtable_check401

dtable_found405:                                  ; preds = %dtable_check401
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_bytes", ptr %dtable_ref402, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip406

dtable_skip406:                                   ; preds = %dtable_found405, %dtable_skip399
  %next_val407 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int128", i32 0, i32 2), align 8
  %118 = icmp eq ptr %next_val407, inttoptr (i64 -1 to ptr)
  br i1 %118, label %dtable_check408, label %dtable_skip413

dtable_check408:                                  ; preds = %dtable_check408, %dtable_skip406
  %dtable_ref409 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip406 ], [ %next_dtable_ref411, %dtable_check408 ]
  %dtable_ptr410 = load ptr, ptr %dtable_ref409, align 8
  %119 = icmp eq ptr %dtable_ptr410, null
  %next_dtable_ref411 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr410, i32 0, i32 2
  br i1 %119, label %dtable_found412, label %dtable_check408

dtable_found412:                                  ; preds = %dtable_check408
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int128", ptr %dtable_ref409, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip413

dtable_skip413:                                   ; preds = %dtable_found412, %dtable_skip406
  %next_val414 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int", i32 0, i32 2), align 8
  %120 = icmp eq ptr %next_val414, inttoptr (i64 -1 to ptr)
  br i1 %120, label %dtable_check415, label %dtable_skip420

dtable_check415:                                  ; preds = %dtable_check415, %dtable_skip413
  %dtable_ref416 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip413 ], [ %next_dtable_ref418, %dtable_check415 ]
  %dtable_ptr417 = load ptr, ptr %dtable_ref416, align 8
  %121 = icmp eq ptr %dtable_ptr417, null
  %next_dtable_ref418 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr417, i32 0, i32 2
  br i1 %121, label %dtable_found419, label %dtable_check415

dtable_found419:                                  ; preds = %dtable_check415
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int", ptr %dtable_ref416, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip420

dtable_skip420:                                   ; preds = %dtable_found419, %dtable_skip413
  %next_val421 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_short", i32 0, i32 2), align 8
  %122 = icmp eq ptr %next_val421, inttoptr (i64 -1 to ptr)
  br i1 %122, label %dtable_check422, label %dtable_skip427

dtable_check422:                                  ; preds = %dtable_check422, %dtable_skip420
  %dtable_ref423 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip420 ], [ %next_dtable_ref425, %dtable_check422 ]
  %dtable_ptr424 = load ptr, ptr %dtable_ref423, align 8
  %123 = icmp eq ptr %dtable_ptr424, null
  %next_dtable_ref425 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr424, i32 0, i32 2
  br i1 %123, label %dtable_found426, label %dtable_check422

dtable_found426:                                  ; preds = %dtable_check422
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_short", ptr %dtable_ref423, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip427

dtable_skip427:                                   ; preds = %dtable_found426, %dtable_skip420
  %next_val428 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_byte", i32 0, i32 2), align 8
  %124 = icmp eq ptr %next_val428, inttoptr (i64 -1 to ptr)
  br i1 %124, label %dtable_check429, label %dtable_skip434

dtable_check429:                                  ; preds = %dtable_check429, %dtable_skip427
  %dtable_ref430 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip427 ], [ %next_dtable_ref432, %dtable_check429 ]
  %dtable_ptr431 = load ptr, ptr %dtable_ref430, align 8
  %125 = icmp eq ptr %dtable_ptr431, null
  %next_dtable_ref432 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr431, i32 0, i32 2
  br i1 %125, label %dtable_found433, label %dtable_check429

dtable_found433:                                  ; preds = %dtable_check429
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_byte", ptr %dtable_ref430, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip434

dtable_skip434:                                   ; preds = %dtable_found433, %dtable_skip427
  %next_val435 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.set_seed", i32 0, i32 2), align 8
  %126 = icmp eq ptr %next_val435, inttoptr (i64 -1 to ptr)
  br i1 %126, label %dtable_check436, label %dtable_skip441

dtable_check436:                                  ; preds = %dtable_check436, %dtable_skip434
  %dtable_ref437 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip434 ], [ %next_dtable_ref439, %dtable_check436 ]
  %dtable_ptr438 = load ptr, ptr %dtable_ref437, align 8
  %127 = icmp eq ptr %dtable_ptr438, null
  %next_dtable_ref439 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr438, i32 0, i32 2
  br i1 %127, label %dtable_found440, label %dtable_check436

dtable_found440:                                  ; preds = %dtable_check436
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.set_seed", ptr %dtable_ref437, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip441

dtable_skip441:                                   ; preds = %dtable_found440, %dtable_skip434
  %next_val442 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int", i32 0, i32 2), align 8
  %128 = icmp eq ptr %next_val442, inttoptr (i64 -1 to ptr)
  br i1 %128, label %dtable_check443, label %dtable_skip448

dtable_check443:                                  ; preds = %dtable_check443, %dtable_skip441
  %dtable_ref444 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip441 ], [ %next_dtable_ref446, %dtable_check443 ]
  %dtable_ptr445 = load ptr, ptr %dtable_ref444, align 8
  %129 = icmp eq ptr %dtable_ptr445, null
  %next_dtable_ref446 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr445, i32 0, i32 2
  br i1 %129, label %dtable_found447, label %dtable_check443

dtable_found447:                                  ; preds = %dtable_check443
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int", ptr %dtable_ref444, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip448

dtable_skip448:                                   ; preds = %dtable_found447, %dtable_skip441
  %next_val449 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_bytes", i32 0, i32 2), align 8
  %130 = icmp eq ptr %next_val449, inttoptr (i64 -1 to ptr)
  br i1 %130, label %dtable_check450, label %dtable_skip455

dtable_check450:                                  ; preds = %dtable_check450, %dtable_skip448
  %dtable_ref451 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip448 ], [ %next_dtable_ref453, %dtable_check450 ]
  %dtable_ptr452 = load ptr, ptr %dtable_ref451, align 8
  %131 = icmp eq ptr %dtable_ptr452, null
  %next_dtable_ref453 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr452, i32 0, i32 2
  br i1 %131, label %dtable_found454, label %dtable_check450

dtable_found454:                                  ; preds = %dtable_check450
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_bytes", ptr %dtable_ref451, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip455

dtable_skip455:                                   ; preds = %dtable_found454, %dtable_skip448
  %next_val456 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int128", i32 0, i32 2), align 8
  %132 = icmp eq ptr %next_val456, inttoptr (i64 -1 to ptr)
  br i1 %132, label %dtable_check457, label %dtable_skip462

dtable_check457:                                  ; preds = %dtable_check457, %dtable_skip455
  %dtable_ref458 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip455 ], [ %next_dtable_ref460, %dtable_check457 ]
  %dtable_ptr459 = load ptr, ptr %dtable_ref458, align 8
  %133 = icmp eq ptr %dtable_ptr459, null
  %next_dtable_ref460 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr459, i32 0, i32 2
  br i1 %133, label %dtable_found461, label %dtable_check457

dtable_found461:                                  ; preds = %dtable_check457
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int128", ptr %dtable_ref458, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip462

dtable_skip462:                                   ; preds = %dtable_found461, %dtable_skip455
  %next_val463 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_long", i32 0, i32 2), align 8
  %134 = icmp eq ptr %next_val463, inttoptr (i64 -1 to ptr)
  br i1 %134, label %dtable_check464, label %dtable_skip469

dtable_check464:                                  ; preds = %dtable_check464, %dtable_skip462
  %dtable_ref465 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip462 ], [ %next_dtable_ref467, %dtable_check464 ]
  %dtable_ptr466 = load ptr, ptr %dtable_ref465, align 8
  %135 = icmp eq ptr %dtable_ptr466, null
  %next_dtable_ref467 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr466, i32 0, i32 2
  br i1 %135, label %dtable_found468, label %dtable_check464

dtable_found468:                                  ; preds = %dtable_check464
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_long", ptr %dtable_ref465, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip469

dtable_skip469:                                   ; preds = %dtable_found468, %dtable_skip462
  %next_val470 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_short", i32 0, i32 2), align 8
  %136 = icmp eq ptr %next_val470, inttoptr (i64 -1 to ptr)
  br i1 %136, label %dtable_check471, label %dtable_skip476

dtable_check471:                                  ; preds = %dtable_check471, %dtable_skip469
  %dtable_ref472 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip469 ], [ %next_dtable_ref474, %dtable_check471 ]
  %dtable_ptr473 = load ptr, ptr %dtable_ref472, align 8
  %137 = icmp eq ptr %dtable_ptr473, null
  %next_dtable_ref474 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr473, i32 0, i32 2
  br i1 %137, label %dtable_found475, label %dtable_check471

dtable_found475:                                  ; preds = %dtable_check471
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_short", ptr %dtable_ref472, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip476

dtable_skip476:                                   ; preds = %dtable_found475, %dtable_skip469
  %next_val477 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_byte", i32 0, i32 2), align 8
  %138 = icmp eq ptr %next_val477, inttoptr (i64 -1 to ptr)
  br i1 %138, label %dtable_check478, label %dtable_skip483

dtable_check478:                                  ; preds = %dtable_check478, %dtable_skip476
  %dtable_ref479 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip476 ], [ %next_dtable_ref481, %dtable_check478 ]
  %dtable_ptr480 = load ptr, ptr %dtable_ref479, align 8
  %139 = icmp eq ptr %dtable_ptr480, null
  %next_dtable_ref481 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr480, i32 0, i32 2
  br i1 %139, label %dtable_found482, label %dtable_check478

dtable_found482:                                  ; preds = %dtable_check478
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_byte", ptr %dtable_ref479, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip483

dtable_skip483:                                   ; preds = %dtable_found482, %dtable_skip476
  %next_val484 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.set_seed", i32 0, i32 2), align 8
  %140 = icmp eq ptr %next_val484, inttoptr (i64 -1 to ptr)
  br i1 %140, label %dtable_check485, label %dtable_skip490

dtable_check485:                                  ; preds = %dtable_check485, %dtable_skip483
  %dtable_ref486 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip483 ], [ %next_dtable_ref488, %dtable_check485 ]
  %dtable_ptr487 = load ptr, ptr %dtable_ref486, align 8
  %141 = icmp eq ptr %dtable_ptr487, null
  %next_dtable_ref488 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr487, i32 0, i32 2
  br i1 %141, label %dtable_found489, label %dtable_check485

dtable_found489:                                  ; preds = %dtable_check485
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.set_seed", ptr %dtable_ref486, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip490

dtable_skip490:                                   ; preds = %dtable_found489, %dtable_skip483
  %next_val491 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_short", i32 0, i32 2), align 8
  %142 = icmp eq ptr %next_val491, inttoptr (i64 -1 to ptr)
  br i1 %142, label %dtable_check492, label %dtable_skip497

dtable_check492:                                  ; preds = %dtable_check492, %dtable_skip490
  %dtable_ref493 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip490 ], [ %next_dtable_ref495, %dtable_check492 ]
  %dtable_ptr494 = load ptr, ptr %dtable_ref493, align 8
  %143 = icmp eq ptr %dtable_ptr494, null
  %next_dtable_ref495 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr494, i32 0, i32 2
  br i1 %143, label %dtable_found496, label %dtable_check492

dtable_found496:                                  ; preds = %dtable_check492
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_short", ptr %dtable_ref493, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip497

dtable_skip497:                                   ; preds = %dtable_found496, %dtable_skip490
  %next_val498 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_bytes", i32 0, i32 2), align 8
  %144 = icmp eq ptr %next_val498, inttoptr (i64 -1 to ptr)
  br i1 %144, label %dtable_check499, label %dtable_skip504

dtable_check499:                                  ; preds = %dtable_check499, %dtable_skip497
  %dtable_ref500 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip497 ], [ %next_dtable_ref502, %dtable_check499 ]
  %dtable_ptr501 = load ptr, ptr %dtable_ref500, align 8
  %145 = icmp eq ptr %dtable_ptr501, null
  %next_dtable_ref502 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr501, i32 0, i32 2
  br i1 %145, label %dtable_found503, label %dtable_check499

dtable_found503:                                  ; preds = %dtable_check499
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_bytes", ptr %dtable_ref500, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip504

dtable_skip504:                                   ; preds = %dtable_found503, %dtable_skip497
  %next_val505 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int128", i32 0, i32 2), align 8
  %146 = icmp eq ptr %next_val505, inttoptr (i64 -1 to ptr)
  br i1 %146, label %dtable_check506, label %dtable_skip511

dtable_check506:                                  ; preds = %dtable_check506, %dtable_skip504
  %dtable_ref507 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip504 ], [ %next_dtable_ref509, %dtable_check506 ]
  %dtable_ptr508 = load ptr, ptr %dtable_ref507, align 8
  %147 = icmp eq ptr %dtable_ptr508, null
  %next_dtable_ref509 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr508, i32 0, i32 2
  br i1 %147, label %dtable_found510, label %dtable_check506

dtable_found510:                                  ; preds = %dtable_check506
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int128", ptr %dtable_ref507, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip511

dtable_skip511:                                   ; preds = %dtable_found510, %dtable_skip504
  %next_val512 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_long", i32 0, i32 2), align 8
  %148 = icmp eq ptr %next_val512, inttoptr (i64 -1 to ptr)
  br i1 %148, label %dtable_check513, label %dtable_skip518

dtable_check513:                                  ; preds = %dtable_check513, %dtable_skip511
  %dtable_ref514 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip511 ], [ %next_dtable_ref516, %dtable_check513 ]
  %dtable_ptr515 = load ptr, ptr %dtable_ref514, align 8
  %149 = icmp eq ptr %dtable_ptr515, null
  %next_dtable_ref516 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr515, i32 0, i32 2
  br i1 %149, label %dtable_found517, label %dtable_check513

dtable_found517:                                  ; preds = %dtable_check513
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_long", ptr %dtable_ref514, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip518

dtable_skip518:                                   ; preds = %dtable_found517, %dtable_skip511
  %next_val519 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int", i32 0, i32 2), align 8
  %150 = icmp eq ptr %next_val519, inttoptr (i64 -1 to ptr)
  br i1 %150, label %dtable_check520, label %dtable_skip525

dtable_check520:                                  ; preds = %dtable_check520, %dtable_skip518
  %dtable_ref521 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip518 ], [ %next_dtable_ref523, %dtable_check520 ]
  %dtable_ptr522 = load ptr, ptr %dtable_ref521, align 8
  %151 = icmp eq ptr %dtable_ptr522, null
  %next_dtable_ref523 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr522, i32 0, i32 2
  br i1 %151, label %dtable_found524, label %dtable_check520

dtable_found524:                                  ; preds = %dtable_check520
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int", ptr %dtable_ref521, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip525

dtable_skip525:                                   ; preds = %dtable_found524, %dtable_skip518
  %next_val526 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_byte", i32 0, i32 2), align 8
  %152 = icmp eq ptr %next_val526, inttoptr (i64 -1 to ptr)
  br i1 %152, label %dtable_check527, label %dtable_skip532

dtable_check527:                                  ; preds = %dtable_check527, %dtable_skip525
  %dtable_ref528 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip525 ], [ %next_dtable_ref530, %dtable_check527 ]
  %dtable_ptr529 = load ptr, ptr %dtable_ref528, align 8
  %153 = icmp eq ptr %dtable_ptr529, null
  %next_dtable_ref530 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr529, i32 0, i32 2
  br i1 %153, label %dtable_found531, label %dtable_check527

dtable_found531:                                  ; preds = %dtable_check527
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_byte", ptr %dtable_ref528, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip532

dtable_skip532:                                   ; preds = %dtable_found531, %dtable_skip525
  %next_val533 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.set_seed", i32 0, i32 2), align 8
  %154 = icmp eq ptr %next_val533, inttoptr (i64 -1 to ptr)
  br i1 %154, label %dtable_check534, label %dtable_skip539

dtable_check534:                                  ; preds = %dtable_check534, %dtable_skip532
  %dtable_ref535 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip532 ], [ %next_dtable_ref537, %dtable_check534 ]
  %dtable_ptr536 = load ptr, ptr %dtable_ref535, align 8
  %155 = icmp eq ptr %dtable_ptr536, null
  %next_dtable_ref537 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr536, i32 0, i32 2
  br i1 %155, label %dtable_found538, label %dtable_check534

dtable_found538:                                  ; preds = %dtable_check534
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.set_seed", ptr %dtable_ref535, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip539

dtable_skip539:                                   ; preds = %dtable_found538, %dtable_skip532
  %next_val540 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_byte", i32 0, i32 2), align 8
  %156 = icmp eq ptr %next_val540, inttoptr (i64 -1 to ptr)
  br i1 %156, label %dtable_check541, label %dtable_skip546

dtable_check541:                                  ; preds = %dtable_check541, %dtable_skip539
  %dtable_ref542 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip539 ], [ %next_dtable_ref544, %dtable_check541 ]
  %dtable_ptr543 = load ptr, ptr %dtable_ref542, align 8
  %157 = icmp eq ptr %dtable_ptr543, null
  %next_dtable_ref544 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr543, i32 0, i32 2
  br i1 %157, label %dtable_found545, label %dtable_check541

dtable_found545:                                  ; preds = %dtable_check541
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_byte", ptr %dtable_ref542, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip546

dtable_skip546:                                   ; preds = %dtable_found545, %dtable_skip539
  %next_val547 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_bytes", i32 0, i32 2), align 8
  %158 = icmp eq ptr %next_val547, inttoptr (i64 -1 to ptr)
  br i1 %158, label %dtable_check548, label %dtable_skip553

dtable_check548:                                  ; preds = %dtable_check548, %dtable_skip546
  %dtable_ref549 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip546 ], [ %next_dtable_ref551, %dtable_check548 ]
  %dtable_ptr550 = load ptr, ptr %dtable_ref549, align 8
  %159 = icmp eq ptr %dtable_ptr550, null
  %next_dtable_ref551 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr550, i32 0, i32 2
  br i1 %159, label %dtable_found552, label %dtable_check548

dtable_found552:                                  ; preds = %dtable_check548
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_bytes", ptr %dtable_ref549, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip553

dtable_skip553:                                   ; preds = %dtable_found552, %dtable_skip546
  %next_val554 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int128", i32 0, i32 2), align 8
  %160 = icmp eq ptr %next_val554, inttoptr (i64 -1 to ptr)
  br i1 %160, label %dtable_check555, label %dtable_skip560

dtable_check555:                                  ; preds = %dtable_check555, %dtable_skip553
  %dtable_ref556 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip553 ], [ %next_dtable_ref558, %dtable_check555 ]
  %dtable_ptr557 = load ptr, ptr %dtable_ref556, align 8
  %161 = icmp eq ptr %dtable_ptr557, null
  %next_dtable_ref558 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr557, i32 0, i32 2
  br i1 %161, label %dtable_found559, label %dtable_check555

dtable_found559:                                  ; preds = %dtable_check555
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int128", ptr %dtable_ref556, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip560

dtable_skip560:                                   ; preds = %dtable_found559, %dtable_skip553
  %next_val561 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_long", i32 0, i32 2), align 8
  %162 = icmp eq ptr %next_val561, inttoptr (i64 -1 to ptr)
  br i1 %162, label %dtable_check562, label %dtable_skip567

dtable_check562:                                  ; preds = %dtable_check562, %dtable_skip560
  %dtable_ref563 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip560 ], [ %next_dtable_ref565, %dtable_check562 ]
  %dtable_ptr564 = load ptr, ptr %dtable_ref563, align 8
  %163 = icmp eq ptr %dtable_ptr564, null
  %next_dtable_ref565 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr564, i32 0, i32 2
  br i1 %163, label %dtable_found566, label %dtable_check562

dtable_found566:                                  ; preds = %dtable_check562
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_long", ptr %dtable_ref563, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip567

dtable_skip567:                                   ; preds = %dtable_found566, %dtable_skip560
  %next_val568 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int", i32 0, i32 2), align 8
  %164 = icmp eq ptr %next_val568, inttoptr (i64 -1 to ptr)
  br i1 %164, label %dtable_check569, label %dtable_skip574

dtable_check569:                                  ; preds = %dtable_check569, %dtable_skip567
  %dtable_ref570 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip567 ], [ %next_dtable_ref572, %dtable_check569 ]
  %dtable_ptr571 = load ptr, ptr %dtable_ref570, align 8
  %165 = icmp eq ptr %dtable_ptr571, null
  %next_dtable_ref572 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr571, i32 0, i32 2
  br i1 %165, label %dtable_found573, label %dtable_check569

dtable_found573:                                  ; preds = %dtable_check569
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int", ptr %dtable_ref570, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip574

dtable_skip574:                                   ; preds = %dtable_found573, %dtable_skip567
  %next_val575 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_short", i32 0, i32 2), align 8
  %166 = icmp eq ptr %next_val575, inttoptr (i64 -1 to ptr)
  br i1 %166, label %dtable_check576, label %dtable_skip581

dtable_check576:                                  ; preds = %dtable_check576, %dtable_skip574
  %dtable_ref577 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip574 ], [ %next_dtable_ref579, %dtable_check576 ]
  %dtable_ptr578 = load ptr, ptr %dtable_ref577, align 8
  %167 = icmp eq ptr %dtable_ptr578, null
  %next_dtable_ref579 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr578, i32 0, i32 2
  br i1 %167, label %dtable_found580, label %dtable_check576

dtable_found580:                                  ; preds = %dtable_check576
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_short", ptr %dtable_ref577, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip581

dtable_skip581:                                   ; preds = %dtable_found580, %dtable_skip574
  %next_val582 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.set_seed", i32 0, i32 2), align 8
  %168 = icmp eq ptr %next_val582, inttoptr (i64 -1 to ptr)
  br i1 %168, label %dtable_check583, label %dtable_skip588

dtable_check583:                                  ; preds = %dtable_check583, %dtable_skip581
  %dtable_ref584 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip581 ], [ %next_dtable_ref586, %dtable_check583 ]
  %dtable_ptr585 = load ptr, ptr %dtable_ref584, align 8
  %169 = icmp eq ptr %dtable_ptr585, null
  %next_dtable_ref586 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr585, i32 0, i32 2
  br i1 %169, label %dtable_found587, label %dtable_check583

dtable_found587:                                  ; preds = %dtable_check583
  store ptr @"$ct.dyn.std.math.random.Msws128Random.set_seed", ptr %dtable_ref584, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip588

dtable_skip588:                                   ; preds = %dtable_found587, %dtable_skip581
  %next_val589 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_int128", i32 0, i32 2), align 8
  %170 = icmp eq ptr %next_val589, inttoptr (i64 -1 to ptr)
  br i1 %170, label %dtable_check590, label %dtable_skip595

dtable_check590:                                  ; preds = %dtable_check590, %dtable_skip588
  %dtable_ref591 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip588 ], [ %next_dtable_ref593, %dtable_check590 ]
  %dtable_ptr592 = load ptr, ptr %dtable_ref591, align 8
  %171 = icmp eq ptr %dtable_ptr592, null
  %next_dtable_ref593 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr592, i32 0, i32 2
  br i1 %171, label %dtable_found594, label %dtable_check590

dtable_found594:                                  ; preds = %dtable_check590
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_int128", ptr %dtable_ref591, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip595

dtable_skip595:                                   ; preds = %dtable_found594, %dtable_skip588
  %next_val596 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_bytes", i32 0, i32 2), align 8
  %172 = icmp eq ptr %next_val596, inttoptr (i64 -1 to ptr)
  br i1 %172, label %dtable_check597, label %dtable_skip602

dtable_check597:                                  ; preds = %dtable_check597, %dtable_skip595
  %dtable_ref598 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip595 ], [ %next_dtable_ref600, %dtable_check597 ]
  %dtable_ptr599 = load ptr, ptr %dtable_ref598, align 8
  %173 = icmp eq ptr %dtable_ptr599, null
  %next_dtable_ref600 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr599, i32 0, i32 2
  br i1 %173, label %dtable_found601, label %dtable_check597

dtable_found601:                                  ; preds = %dtable_check597
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_bytes", ptr %dtable_ref598, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip602

dtable_skip602:                                   ; preds = %dtable_found601, %dtable_skip595
  %next_val603 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_long", i32 0, i32 2), align 8
  %174 = icmp eq ptr %next_val603, inttoptr (i64 -1 to ptr)
  br i1 %174, label %dtable_check604, label %dtable_skip609

dtable_check604:                                  ; preds = %dtable_check604, %dtable_skip602
  %dtable_ref605 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip602 ], [ %next_dtable_ref607, %dtable_check604 ]
  %dtable_ptr606 = load ptr, ptr %dtable_ref605, align 8
  %175 = icmp eq ptr %dtable_ptr606, null
  %next_dtable_ref607 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr606, i32 0, i32 2
  br i1 %175, label %dtable_found608, label %dtable_check604

dtable_found608:                                  ; preds = %dtable_check604
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_long", ptr %dtable_ref605, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip609

dtable_skip609:                                   ; preds = %dtable_found608, %dtable_skip602
  %next_val610 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_int", i32 0, i32 2), align 8
  %176 = icmp eq ptr %next_val610, inttoptr (i64 -1 to ptr)
  br i1 %176, label %dtable_check611, label %dtable_skip616

dtable_check611:                                  ; preds = %dtable_check611, %dtable_skip609
  %dtable_ref612 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip609 ], [ %next_dtable_ref614, %dtable_check611 ]
  %dtable_ptr613 = load ptr, ptr %dtable_ref612, align 8
  %177 = icmp eq ptr %dtable_ptr613, null
  %next_dtable_ref614 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr613, i32 0, i32 2
  br i1 %177, label %dtable_found615, label %dtable_check611

dtable_found615:                                  ; preds = %dtable_check611
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_int", ptr %dtable_ref612, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip616

dtable_skip616:                                   ; preds = %dtable_found615, %dtable_skip609
  %next_val617 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_short", i32 0, i32 2), align 8
  %178 = icmp eq ptr %next_val617, inttoptr (i64 -1 to ptr)
  br i1 %178, label %dtable_check618, label %dtable_skip623

dtable_check618:                                  ; preds = %dtable_check618, %dtable_skip616
  %dtable_ref619 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip616 ], [ %next_dtable_ref621, %dtable_check618 ]
  %dtable_ptr620 = load ptr, ptr %dtable_ref619, align 8
  %179 = icmp eq ptr %dtable_ptr620, null
  %next_dtable_ref621 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr620, i32 0, i32 2
  br i1 %179, label %dtable_found622, label %dtable_check618

dtable_found622:                                  ; preds = %dtable_check618
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_short", ptr %dtable_ref619, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip623

dtable_skip623:                                   ; preds = %dtable_found622, %dtable_skip616
  %next_val624 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_byte", i32 0, i32 2), align 8
  %180 = icmp eq ptr %next_val624, inttoptr (i64 -1 to ptr)
  br i1 %180, label %dtable_check625, label %dtable_skip630

dtable_check625:                                  ; preds = %dtable_check625, %dtable_skip623
  %dtable_ref626 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip623 ], [ %next_dtable_ref628, %dtable_check625 ]
  %dtable_ptr627 = load ptr, ptr %dtable_ref626, align 8
  %181 = icmp eq ptr %dtable_ptr627, null
  %next_dtable_ref628 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr627, i32 0, i32 2
  br i1 %181, label %dtable_found629, label %dtable_check625

dtable_found629:                                  ; preds = %dtable_check625
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_byte", ptr %dtable_ref626, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip630

dtable_skip630:                                   ; preds = %dtable_found629, %dtable_skip623
  %next_val631 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.set_seed", i32 0, i32 2), align 8
  %182 = icmp eq ptr %next_val631, inttoptr (i64 -1 to ptr)
  br i1 %182, label %dtable_check632, label %dtable_skip637

dtable_check632:                                  ; preds = %dtable_check632, %dtable_skip630
  %dtable_ref633 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip630 ], [ %next_dtable_ref635, %dtable_check632 ]
  %dtable_ptr634 = load ptr, ptr %dtable_ref633, align 8
  %183 = icmp eq ptr %dtable_ptr634, null
  %next_dtable_ref635 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr634, i32 0, i32 2
  br i1 %183, label %dtable_found636, label %dtable_check632

dtable_found636:                                  ; preds = %dtable_check632
  store ptr @"$ct.dyn.std.math.random.Msws64Random.set_seed", ptr %dtable_ref633, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip637

dtable_skip637:                                   ; preds = %dtable_found636, %dtable_skip630
  %next_val638 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_long", i32 0, i32 2), align 8
  %184 = icmp eq ptr %next_val638, inttoptr (i64 -1 to ptr)
  br i1 %184, label %dtable_check639, label %dtable_skip644

dtable_check639:                                  ; preds = %dtable_check639, %dtable_skip637
  %dtable_ref640 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip637 ], [ %next_dtable_ref642, %dtable_check639 ]
  %dtable_ptr641 = load ptr, ptr %dtable_ref640, align 8
  %185 = icmp eq ptr %dtable_ptr641, null
  %next_dtable_ref642 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr641, i32 0, i32 2
  br i1 %185, label %dtable_found643, label %dtable_check639

dtable_found643:                                  ; preds = %dtable_check639
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_long", ptr %dtable_ref640, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip644

dtable_skip644:                                   ; preds = %dtable_found643, %dtable_skip637
  %next_val645 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_bytes", i32 0, i32 2), align 8
  %186 = icmp eq ptr %next_val645, inttoptr (i64 -1 to ptr)
  br i1 %186, label %dtable_check646, label %dtable_skip651

dtable_check646:                                  ; preds = %dtable_check646, %dtable_skip644
  %dtable_ref647 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip644 ], [ %next_dtable_ref649, %dtable_check646 ]
  %dtable_ptr648 = load ptr, ptr %dtable_ref647, align 8
  %187 = icmp eq ptr %dtable_ptr648, null
  %next_dtable_ref649 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr648, i32 0, i32 2
  br i1 %187, label %dtable_found650, label %dtable_check646

dtable_found650:                                  ; preds = %dtable_check646
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_bytes", ptr %dtable_ref647, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip651

dtable_skip651:                                   ; preds = %dtable_found650, %dtable_skip644
  %next_val652 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_int128", i32 0, i32 2), align 8
  %188 = icmp eq ptr %next_val652, inttoptr (i64 -1 to ptr)
  br i1 %188, label %dtable_check653, label %dtable_skip658

dtable_check653:                                  ; preds = %dtable_check653, %dtable_skip651
  %dtable_ref654 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip651 ], [ %next_dtable_ref656, %dtable_check653 ]
  %dtable_ptr655 = load ptr, ptr %dtable_ref654, align 8
  %189 = icmp eq ptr %dtable_ptr655, null
  %next_dtable_ref656 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr655, i32 0, i32 2
  br i1 %189, label %dtable_found657, label %dtable_check653

dtable_found657:                                  ; preds = %dtable_check653
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_int128", ptr %dtable_ref654, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip658

dtable_skip658:                                   ; preds = %dtable_found657, %dtable_skip651
  %next_val659 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_int", i32 0, i32 2), align 8
  %190 = icmp eq ptr %next_val659, inttoptr (i64 -1 to ptr)
  br i1 %190, label %dtable_check660, label %dtable_skip665

dtable_check660:                                  ; preds = %dtable_check660, %dtable_skip658
  %dtable_ref661 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip658 ], [ %next_dtable_ref663, %dtable_check660 ]
  %dtable_ptr662 = load ptr, ptr %dtable_ref661, align 8
  %191 = icmp eq ptr %dtable_ptr662, null
  %next_dtable_ref663 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr662, i32 0, i32 2
  br i1 %191, label %dtable_found664, label %dtable_check660

dtable_found664:                                  ; preds = %dtable_check660
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_int", ptr %dtable_ref661, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip665

dtable_skip665:                                   ; preds = %dtable_found664, %dtable_skip658
  %next_val666 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_short", i32 0, i32 2), align 8
  %192 = icmp eq ptr %next_val666, inttoptr (i64 -1 to ptr)
  br i1 %192, label %dtable_check667, label %dtable_skip672

dtable_check667:                                  ; preds = %dtable_check667, %dtable_skip665
  %dtable_ref668 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip665 ], [ %next_dtable_ref670, %dtable_check667 ]
  %dtable_ptr669 = load ptr, ptr %dtable_ref668, align 8
  %193 = icmp eq ptr %dtable_ptr669, null
  %next_dtable_ref670 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr669, i32 0, i32 2
  br i1 %193, label %dtable_found671, label %dtable_check667

dtable_found671:                                  ; preds = %dtable_check667
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_short", ptr %dtable_ref668, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip672

dtable_skip672:                                   ; preds = %dtable_found671, %dtable_skip665
  %next_val673 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_byte", i32 0, i32 2), align 8
  %194 = icmp eq ptr %next_val673, inttoptr (i64 -1 to ptr)
  br i1 %194, label %dtable_check674, label %dtable_skip679

dtable_check674:                                  ; preds = %dtable_check674, %dtable_skip672
  %dtable_ref675 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip672 ], [ %next_dtable_ref677, %dtable_check674 ]
  %dtable_ptr676 = load ptr, ptr %dtable_ref675, align 8
  %195 = icmp eq ptr %dtable_ptr676, null
  %next_dtable_ref677 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr676, i32 0, i32 2
  br i1 %195, label %dtable_found678, label %dtable_check674

dtable_found678:                                  ; preds = %dtable_check674
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_byte", ptr %dtable_ref675, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip679

dtable_skip679:                                   ; preds = %dtable_found678, %dtable_skip672
  %next_val680 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.set_seed", i32 0, i32 2), align 8
  %196 = icmp eq ptr %next_val680, inttoptr (i64 -1 to ptr)
  br i1 %196, label %dtable_check681, label %dtable_skip686

dtable_check681:                                  ; preds = %dtable_check681, %dtable_skip679
  %dtable_ref682 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip679 ], [ %next_dtable_ref684, %dtable_check681 ]
  %dtable_ptr683 = load ptr, ptr %dtable_ref682, align 8
  %197 = icmp eq ptr %dtable_ptr683, null
  %next_dtable_ref684 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr683, i32 0, i32 2
  br i1 %197, label %dtable_found685, label %dtable_check681

dtable_found685:                                  ; preds = %dtable_check681
  store ptr @"$ct.dyn.std.math.random.Msws32Random.set_seed", ptr %dtable_ref682, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip686

dtable_skip686:                                   ; preds = %dtable_found685, %dtable_skip679
  %next_val687 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_int", i32 0, i32 2), align 8
  %198 = icmp eq ptr %next_val687, inttoptr (i64 -1 to ptr)
  br i1 %198, label %dtable_check688, label %dtable_skip693

dtable_check688:                                  ; preds = %dtable_check688, %dtable_skip686
  %dtable_ref689 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip686 ], [ %next_dtable_ref691, %dtable_check688 ]
  %dtable_ptr690 = load ptr, ptr %dtable_ref689, align 8
  %199 = icmp eq ptr %dtable_ptr690, null
  %next_dtable_ref691 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr690, i32 0, i32 2
  br i1 %199, label %dtable_found692, label %dtable_check688

dtable_found692:                                  ; preds = %dtable_check688
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_int", ptr %dtable_ref689, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip693

dtable_skip693:                                   ; preds = %dtable_found692, %dtable_skip686
  %next_val694 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_bytes", i32 0, i32 2), align 8
  %200 = icmp eq ptr %next_val694, inttoptr (i64 -1 to ptr)
  br i1 %200, label %dtable_check695, label %dtable_skip700

dtable_check695:                                  ; preds = %dtable_check695, %dtable_skip693
  %dtable_ref696 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip693 ], [ %next_dtable_ref698, %dtable_check695 ]
  %dtable_ptr697 = load ptr, ptr %dtable_ref696, align 8
  %201 = icmp eq ptr %dtable_ptr697, null
  %next_dtable_ref698 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr697, i32 0, i32 2
  br i1 %201, label %dtable_found699, label %dtable_check695

dtable_found699:                                  ; preds = %dtable_check695
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_bytes", ptr %dtable_ref696, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip700

dtable_skip700:                                   ; preds = %dtable_found699, %dtable_skip693
  %next_val701 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_int128", i32 0, i32 2), align 8
  %202 = icmp eq ptr %next_val701, inttoptr (i64 -1 to ptr)
  br i1 %202, label %dtable_check702, label %dtable_skip707

dtable_check702:                                  ; preds = %dtable_check702, %dtable_skip700
  %dtable_ref703 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip700 ], [ %next_dtable_ref705, %dtable_check702 ]
  %dtable_ptr704 = load ptr, ptr %dtable_ref703, align 8
  %203 = icmp eq ptr %dtable_ptr704, null
  %next_dtable_ref705 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr704, i32 0, i32 2
  br i1 %203, label %dtable_found706, label %dtable_check702

dtable_found706:                                  ; preds = %dtable_check702
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_int128", ptr %dtable_ref703, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip707

dtable_skip707:                                   ; preds = %dtable_found706, %dtable_skip700
  %next_val708 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_long", i32 0, i32 2), align 8
  %204 = icmp eq ptr %next_val708, inttoptr (i64 -1 to ptr)
  br i1 %204, label %dtable_check709, label %dtable_skip714

dtable_check709:                                  ; preds = %dtable_check709, %dtable_skip707
  %dtable_ref710 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip707 ], [ %next_dtable_ref712, %dtable_check709 ]
  %dtable_ptr711 = load ptr, ptr %dtable_ref710, align 8
  %205 = icmp eq ptr %dtable_ptr711, null
  %next_dtable_ref712 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr711, i32 0, i32 2
  br i1 %205, label %dtable_found713, label %dtable_check709

dtable_found713:                                  ; preds = %dtable_check709
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_long", ptr %dtable_ref710, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip714

dtable_skip714:                                   ; preds = %dtable_found713, %dtable_skip707
  %next_val715 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_short", i32 0, i32 2), align 8
  %206 = icmp eq ptr %next_val715, inttoptr (i64 -1 to ptr)
  br i1 %206, label %dtable_check716, label %dtable_skip721

dtable_check716:                                  ; preds = %dtable_check716, %dtable_skip714
  %dtable_ref717 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip714 ], [ %next_dtable_ref719, %dtable_check716 ]
  %dtable_ptr718 = load ptr, ptr %dtable_ref717, align 8
  %207 = icmp eq ptr %dtable_ptr718, null
  %next_dtable_ref719 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr718, i32 0, i32 2
  br i1 %207, label %dtable_found720, label %dtable_check716

dtable_found720:                                  ; preds = %dtable_check716
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_short", ptr %dtable_ref717, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip721

dtable_skip721:                                   ; preds = %dtable_found720, %dtable_skip714
  %next_val722 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_byte", i32 0, i32 2), align 8
  %208 = icmp eq ptr %next_val722, inttoptr (i64 -1 to ptr)
  br i1 %208, label %dtable_check723, label %dtable_skip728

dtable_check723:                                  ; preds = %dtable_check723, %dtable_skip721
  %dtable_ref724 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip721 ], [ %next_dtable_ref726, %dtable_check723 ]
  %dtable_ptr725 = load ptr, ptr %dtable_ref724, align 8
  %209 = icmp eq ptr %dtable_ptr725, null
  %next_dtable_ref726 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr725, i32 0, i32 2
  br i1 %209, label %dtable_found727, label %dtable_check723

dtable_found727:                                  ; preds = %dtable_check723
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_byte", ptr %dtable_ref724, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip728

dtable_skip728:                                   ; preds = %dtable_found727, %dtable_skip721
  %next_val729 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.set_seed", i32 0, i32 2), align 8
  %210 = icmp eq ptr %next_val729, inttoptr (i64 -1 to ptr)
  br i1 %210, label %dtable_check730, label %dtable_skip735

dtable_check730:                                  ; preds = %dtable_check730, %dtable_skip728
  %dtable_ref731 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip728 ], [ %next_dtable_ref733, %dtable_check730 ]
  %dtable_ptr732 = load ptr, ptr %dtable_ref731, align 8
  %211 = icmp eq ptr %dtable_ptr732, null
  %next_dtable_ref733 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr732, i32 0, i32 2
  br i1 %211, label %dtable_found734, label %dtable_check730

dtable_found734:                                  ; preds = %dtable_check730
  store ptr @"$ct.dyn.std.math.random.Msws16Random.set_seed", ptr %dtable_ref731, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip735

dtable_skip735:                                   ; preds = %dtable_found734, %dtable_skip728
  %next_val736 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_short", i32 0, i32 2), align 8
  %212 = icmp eq ptr %next_val736, inttoptr (i64 -1 to ptr)
  br i1 %212, label %dtable_check737, label %dtable_skip742

dtable_check737:                                  ; preds = %dtable_check737, %dtable_skip735
  %dtable_ref738 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip735 ], [ %next_dtable_ref740, %dtable_check737 ]
  %dtable_ptr739 = load ptr, ptr %dtable_ref738, align 8
  %213 = icmp eq ptr %dtable_ptr739, null
  %next_dtable_ref740 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr739, i32 0, i32 2
  br i1 %213, label %dtable_found741, label %dtable_check737

dtable_found741:                                  ; preds = %dtable_check737
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_short", ptr %dtable_ref738, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip742

dtable_skip742:                                   ; preds = %dtable_found741, %dtable_skip735
  %next_val743 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_bytes", i32 0, i32 2), align 8
  %214 = icmp eq ptr %next_val743, inttoptr (i64 -1 to ptr)
  br i1 %214, label %dtable_check744, label %dtable_skip749

dtable_check744:                                  ; preds = %dtable_check744, %dtable_skip742
  %dtable_ref745 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip742 ], [ %next_dtable_ref747, %dtable_check744 ]
  %dtable_ptr746 = load ptr, ptr %dtable_ref745, align 8
  %215 = icmp eq ptr %dtable_ptr746, null
  %next_dtable_ref747 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr746, i32 0, i32 2
  br i1 %215, label %dtable_found748, label %dtable_check744

dtable_found748:                                  ; preds = %dtable_check744
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_bytes", ptr %dtable_ref745, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip749

dtable_skip749:                                   ; preds = %dtable_found748, %dtable_skip742
  %next_val750 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_int128", i32 0, i32 2), align 8
  %216 = icmp eq ptr %next_val750, inttoptr (i64 -1 to ptr)
  br i1 %216, label %dtable_check751, label %dtable_skip756

dtable_check751:                                  ; preds = %dtable_check751, %dtable_skip749
  %dtable_ref752 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip749 ], [ %next_dtable_ref754, %dtable_check751 ]
  %dtable_ptr753 = load ptr, ptr %dtable_ref752, align 8
  %217 = icmp eq ptr %dtable_ptr753, null
  %next_dtable_ref754 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr753, i32 0, i32 2
  br i1 %217, label %dtable_found755, label %dtable_check751

dtable_found755:                                  ; preds = %dtable_check751
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_int128", ptr %dtable_ref752, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip756

dtable_skip756:                                   ; preds = %dtable_found755, %dtable_skip749
  %next_val757 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_long", i32 0, i32 2), align 8
  %218 = icmp eq ptr %next_val757, inttoptr (i64 -1 to ptr)
  br i1 %218, label %dtable_check758, label %dtable_skip763

dtable_check758:                                  ; preds = %dtable_check758, %dtable_skip756
  %dtable_ref759 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip756 ], [ %next_dtable_ref761, %dtable_check758 ]
  %dtable_ptr760 = load ptr, ptr %dtable_ref759, align 8
  %219 = icmp eq ptr %dtable_ptr760, null
  %next_dtable_ref761 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr760, i32 0, i32 2
  br i1 %219, label %dtable_found762, label %dtable_check758

dtable_found762:                                  ; preds = %dtable_check758
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_long", ptr %dtable_ref759, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip763

dtable_skip763:                                   ; preds = %dtable_found762, %dtable_skip756
  %next_val764 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_int", i32 0, i32 2), align 8
  %220 = icmp eq ptr %next_val764, inttoptr (i64 -1 to ptr)
  br i1 %220, label %dtable_check765, label %dtable_skip770

dtable_check765:                                  ; preds = %dtable_check765, %dtable_skip763
  %dtable_ref766 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip763 ], [ %next_dtable_ref768, %dtable_check765 ]
  %dtable_ptr767 = load ptr, ptr %dtable_ref766, align 8
  %221 = icmp eq ptr %dtable_ptr767, null
  %next_dtable_ref768 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr767, i32 0, i32 2
  br i1 %221, label %dtable_found769, label %dtable_check765

dtable_found769:                                  ; preds = %dtable_check765
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_int", ptr %dtable_ref766, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip770

dtable_skip770:                                   ; preds = %dtable_found769, %dtable_skip763
  %next_val771 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_byte", i32 0, i32 2), align 8
  %222 = icmp eq ptr %next_val771, inttoptr (i64 -1 to ptr)
  br i1 %222, label %dtable_check772, label %dtable_skip777

dtable_check772:                                  ; preds = %dtable_check772, %dtable_skip770
  %dtable_ref773 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip770 ], [ %next_dtable_ref775, %dtable_check772 ]
  %dtable_ptr774 = load ptr, ptr %dtable_ref773, align 8
  %223 = icmp eq ptr %dtable_ptr774, null
  %next_dtable_ref775 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr774, i32 0, i32 2
  br i1 %223, label %dtable_found776, label %dtable_check772

dtable_found776:                                  ; preds = %dtable_check772
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_byte", ptr %dtable_ref773, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip777

dtable_skip777:                                   ; preds = %dtable_found776, %dtable_skip770
  %next_val778 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.set_seed", i32 0, i32 2), align 8
  %224 = icmp eq ptr %next_val778, inttoptr (i64 -1 to ptr)
  br i1 %224, label %dtable_check779, label %dtable_skip784

dtable_check779:                                  ; preds = %dtable_check779, %dtable_skip777
  %dtable_ref780 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip777 ], [ %next_dtable_ref782, %dtable_check779 ]
  %dtable_ptr781 = load ptr, ptr %dtable_ref780, align 8
  %225 = icmp eq ptr %dtable_ptr781, null
  %next_dtable_ref782 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr781, i32 0, i32 2
  br i1 %225, label %dtable_found783, label %dtable_check779

dtable_found783:                                  ; preds = %dtable_check779
  store ptr @"$ct.dyn.std.math.random.Msws8Random.set_seed", ptr %dtable_ref780, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip784

dtable_skip784:                                   ; preds = %dtable_found783, %dtable_skip777
  %next_val785 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_byte", i32 0, i32 2), align 8
  %226 = icmp eq ptr %next_val785, inttoptr (i64 -1 to ptr)
  br i1 %226, label %dtable_check786, label %dtable_skip791

dtable_check786:                                  ; preds = %dtable_check786, %dtable_skip784
  %dtable_ref787 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip784 ], [ %next_dtable_ref789, %dtable_check786 ]
  %dtable_ptr788 = load ptr, ptr %dtable_ref787, align 8
  %227 = icmp eq ptr %dtable_ptr788, null
  %next_dtable_ref789 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr788, i32 0, i32 2
  br i1 %227, label %dtable_found790, label %dtable_check786

dtable_found790:                                  ; preds = %dtable_check786
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_byte", ptr %dtable_ref787, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip791

dtable_skip791:                                   ; preds = %dtable_found790, %dtable_skip784
  %next_val792 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_bytes", i32 0, i32 2), align 8
  %228 = icmp eq ptr %next_val792, inttoptr (i64 -1 to ptr)
  br i1 %228, label %dtable_check793, label %dtable_skip798

dtable_check793:                                  ; preds = %dtable_check793, %dtable_skip791
  %dtable_ref794 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip791 ], [ %next_dtable_ref796, %dtable_check793 ]
  %dtable_ptr795 = load ptr, ptr %dtable_ref794, align 8
  %229 = icmp eq ptr %dtable_ptr795, null
  %next_dtable_ref796 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr795, i32 0, i32 2
  br i1 %229, label %dtable_found797, label %dtable_check793

dtable_found797:                                  ; preds = %dtable_check793
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_bytes", ptr %dtable_ref794, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip798

dtable_skip798:                                   ; preds = %dtable_found797, %dtable_skip791
  %next_val799 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_int128", i32 0, i32 2), align 8
  %230 = icmp eq ptr %next_val799, inttoptr (i64 -1 to ptr)
  br i1 %230, label %dtable_check800, label %dtable_skip805

dtable_check800:                                  ; preds = %dtable_check800, %dtable_skip798
  %dtable_ref801 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip798 ], [ %next_dtable_ref803, %dtable_check800 ]
  %dtable_ptr802 = load ptr, ptr %dtable_ref801, align 8
  %231 = icmp eq ptr %dtable_ptr802, null
  %next_dtable_ref803 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr802, i32 0, i32 2
  br i1 %231, label %dtable_found804, label %dtable_check800

dtable_found804:                                  ; preds = %dtable_check800
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_int128", ptr %dtable_ref801, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip805

dtable_skip805:                                   ; preds = %dtable_found804, %dtable_skip798
  %next_val806 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_long", i32 0, i32 2), align 8
  %232 = icmp eq ptr %next_val806, inttoptr (i64 -1 to ptr)
  br i1 %232, label %dtable_check807, label %dtable_skip812

dtable_check807:                                  ; preds = %dtable_check807, %dtable_skip805
  %dtable_ref808 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip805 ], [ %next_dtable_ref810, %dtable_check807 ]
  %dtable_ptr809 = load ptr, ptr %dtable_ref808, align 8
  %233 = icmp eq ptr %dtable_ptr809, null
  %next_dtable_ref810 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr809, i32 0, i32 2
  br i1 %233, label %dtable_found811, label %dtable_check807

dtable_found811:                                  ; preds = %dtable_check807
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_long", ptr %dtable_ref808, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip812

dtable_skip812:                                   ; preds = %dtable_found811, %dtable_skip805
  %next_val813 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_int", i32 0, i32 2), align 8
  %234 = icmp eq ptr %next_val813, inttoptr (i64 -1 to ptr)
  br i1 %234, label %dtable_check814, label %dtable_skip819

dtable_check814:                                  ; preds = %dtable_check814, %dtable_skip812
  %dtable_ref815 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip812 ], [ %next_dtable_ref817, %dtable_check814 ]
  %dtable_ptr816 = load ptr, ptr %dtable_ref815, align 8
  %235 = icmp eq ptr %dtable_ptr816, null
  %next_dtable_ref817 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr816, i32 0, i32 2
  br i1 %235, label %dtable_found818, label %dtable_check814

dtable_found818:                                  ; preds = %dtable_check814
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_int", ptr %dtable_ref815, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip819

dtable_skip819:                                   ; preds = %dtable_found818, %dtable_skip812
  %next_val820 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_short", i32 0, i32 2), align 8
  %236 = icmp eq ptr %next_val820, inttoptr (i64 -1 to ptr)
  br i1 %236, label %dtable_check821, label %dtable_skip826

dtable_check821:                                  ; preds = %dtable_check821, %dtable_skip819
  %dtable_ref822 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip819 ], [ %next_dtable_ref824, %dtable_check821 ]
  %dtable_ptr823 = load ptr, ptr %dtable_ref822, align 8
  %237 = icmp eq ptr %dtable_ptr823, null
  %next_dtable_ref824 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr823, i32 0, i32 2
  br i1 %237, label %dtable_found825, label %dtable_check821

dtable_found825:                                  ; preds = %dtable_check821
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_short", ptr %dtable_ref822, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip826

dtable_skip826:                                   ; preds = %dtable_found825, %dtable_skip819
  %next_val827 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.set_seed", i32 0, i32 2), align 8
  %238 = icmp eq ptr %next_val827, inttoptr (i64 -1 to ptr)
  br i1 %238, label %dtable_check828, label %dtable_skip833

dtable_check828:                                  ; preds = %dtable_check828, %dtable_skip826
  %dtable_ref829 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip826 ], [ %next_dtable_ref831, %dtable_check828 ]
  %dtable_ptr830 = load ptr, ptr %dtable_ref829, align 8
  %239 = icmp eq ptr %dtable_ptr830, null
  %next_dtable_ref831 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr830, i32 0, i32 2
  br i1 %239, label %dtable_found832, label %dtable_check828

dtable_found832:                                  ; preds = %dtable_check828
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.set_seed", ptr %dtable_ref829, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip833

dtable_skip833:                                   ; preds = %dtable_found832, %dtable_skip826
  %next_val834 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int", i32 0, i32 2), align 8
  %240 = icmp eq ptr %next_val834, inttoptr (i64 -1 to ptr)
  br i1 %240, label %dtable_check835, label %dtable_skip840

dtable_check835:                                  ; preds = %dtable_check835, %dtable_skip833
  %dtable_ref836 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip833 ], [ %next_dtable_ref838, %dtable_check835 ]
  %dtable_ptr837 = load ptr, ptr %dtable_ref836, align 8
  %241 = icmp eq ptr %dtable_ptr837, null
  %next_dtable_ref838 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr837, i32 0, i32 2
  br i1 %241, label %dtable_found839, label %dtable_check835

dtable_found839:                                  ; preds = %dtable_check835
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int", ptr %dtable_ref836, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int", i32 0, i32 2), align 8
  br label %dtable_skip840

dtable_skip840:                                   ; preds = %dtable_found839, %dtable_skip833
  %next_val841 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_bytes", i32 0, i32 2), align 8
  %242 = icmp eq ptr %next_val841, inttoptr (i64 -1 to ptr)
  br i1 %242, label %dtable_check842, label %dtable_skip847

dtable_check842:                                  ; preds = %dtable_check842, %dtable_skip840
  %dtable_ref843 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip840 ], [ %next_dtable_ref845, %dtable_check842 ]
  %dtable_ptr844 = load ptr, ptr %dtable_ref843, align 8
  %243 = icmp eq ptr %dtable_ptr844, null
  %next_dtable_ref845 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr844, i32 0, i32 2
  br i1 %243, label %dtable_found846, label %dtable_check842

dtable_found846:                                  ; preds = %dtable_check842
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_bytes", ptr %dtable_ref843, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip847

dtable_skip847:                                   ; preds = %dtable_found846, %dtable_skip840
  %next_val848 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int128", i32 0, i32 2), align 8
  %244 = icmp eq ptr %next_val848, inttoptr (i64 -1 to ptr)
  br i1 %244, label %dtable_check849, label %dtable_skip854

dtable_check849:                                  ; preds = %dtable_check849, %dtable_skip847
  %dtable_ref850 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip847 ], [ %next_dtable_ref852, %dtable_check849 ]
  %dtable_ptr851 = load ptr, ptr %dtable_ref850, align 8
  %245 = icmp eq ptr %dtable_ptr851, null
  %next_dtable_ref852 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr851, i32 0, i32 2
  br i1 %245, label %dtable_found853, label %dtable_check849

dtable_found853:                                  ; preds = %dtable_check849
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int128", ptr %dtable_ref850, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip854

dtable_skip854:                                   ; preds = %dtable_found853, %dtable_skip847
  %next_val855 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_long", i32 0, i32 2), align 8
  %246 = icmp eq ptr %next_val855, inttoptr (i64 -1 to ptr)
  br i1 %246, label %dtable_check856, label %dtable_skip861

dtable_check856:                                  ; preds = %dtable_check856, %dtable_skip854
  %dtable_ref857 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip854 ], [ %next_dtable_ref859, %dtable_check856 ]
  %dtable_ptr858 = load ptr, ptr %dtable_ref857, align 8
  %247 = icmp eq ptr %dtable_ptr858, null
  %next_dtable_ref859 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr858, i32 0, i32 2
  br i1 %247, label %dtable_found860, label %dtable_check856

dtable_found860:                                  ; preds = %dtable_check856
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_long", ptr %dtable_ref857, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_long", i32 0, i32 2), align 8
  br label %dtable_skip861

dtable_skip861:                                   ; preds = %dtable_found860, %dtable_skip854
  %next_val862 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_short", i32 0, i32 2), align 8
  %248 = icmp eq ptr %next_val862, inttoptr (i64 -1 to ptr)
  br i1 %248, label %dtable_check863, label %dtable_skip868

dtable_check863:                                  ; preds = %dtable_check863, %dtable_skip861
  %dtable_ref864 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip861 ], [ %next_dtable_ref866, %dtable_check863 ]
  %dtable_ptr865 = load ptr, ptr %dtable_ref864, align 8
  %249 = icmp eq ptr %dtable_ptr865, null
  %next_dtable_ref866 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr865, i32 0, i32 2
  br i1 %249, label %dtable_found867, label %dtable_check863

dtable_found867:                                  ; preds = %dtable_check863
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_short", ptr %dtable_ref864, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_short", i32 0, i32 2), align 8
  br label %dtable_skip868

dtable_skip868:                                   ; preds = %dtable_found867, %dtable_skip861
  %next_val869 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_byte", i32 0, i32 2), align 8
  %250 = icmp eq ptr %next_val869, inttoptr (i64 -1 to ptr)
  br i1 %250, label %dtable_check870, label %dtable_skip875

dtable_check870:                                  ; preds = %dtable_check870, %dtable_skip868
  %dtable_ref871 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip868 ], [ %next_dtable_ref873, %dtable_check870 ]
  %dtable_ptr872 = load ptr, ptr %dtable_ref871, align 8
  %251 = icmp eq ptr %dtable_ptr872, null
  %next_dtable_ref873 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr872, i32 0, i32 2
  br i1 %251, label %dtable_found874, label %dtable_check870

dtable_found874:                                  ; preds = %dtable_check870
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_byte", ptr %dtable_ref871, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip875

dtable_skip875:                                   ; preds = %dtable_found874, %dtable_skip868
  %next_val876 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.set_seed", i32 0, i32 2), align 8
  %252 = icmp eq ptr %next_val876, inttoptr (i64 -1 to ptr)
  br i1 %252, label %dtable_check877, label %dtable_skip882

dtable_check877:                                  ; preds = %dtable_check877, %dtable_skip875
  %dtable_ref878 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip875 ], [ %next_dtable_ref880, %dtable_check877 ]
  %dtable_ptr879 = load ptr, ptr %dtable_ref878, align 8
  %253 = icmp eq ptr %dtable_ptr879, null
  %next_dtable_ref880 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr879, i32 0, i32 2
  br i1 %253, label %dtable_found881, label %dtable_check877

dtable_found881:                                  ; preds = %dtable_check877
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.set_seed", ptr %dtable_ref878, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip882

dtable_skip882:                                   ; preds = %dtable_found881, %dtable_skip875
  %next_val883 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int128", i32 0, i32 2), align 8
  %254 = icmp eq ptr %next_val883, inttoptr (i64 -1 to ptr)
  br i1 %254, label %dtable_check884, label %dtable_skip889

dtable_check884:                                  ; preds = %dtable_check884, %dtable_skip882
  %dtable_ref885 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip882 ], [ %next_dtable_ref887, %dtable_check884 ]
  %dtable_ptr886 = load ptr, ptr %dtable_ref885, align 8
  %255 = icmp eq ptr %dtable_ptr886, null
  %next_dtable_ref887 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr886, i32 0, i32 2
  br i1 %255, label %dtable_found888, label %dtable_check884

dtable_found888:                                  ; preds = %dtable_check884
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int128", ptr %dtable_ref885, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip889

dtable_skip889:                                   ; preds = %dtable_found888, %dtable_skip882
  %next_val890 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_bytes", i32 0, i32 2), align 8
  %256 = icmp eq ptr %next_val890, inttoptr (i64 -1 to ptr)
  br i1 %256, label %dtable_check891, label %dtable_skip896

dtable_check891:                                  ; preds = %dtable_check891, %dtable_skip889
  %dtable_ref892 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip889 ], [ %next_dtable_ref894, %dtable_check891 ]
  %dtable_ptr893 = load ptr, ptr %dtable_ref892, align 8
  %257 = icmp eq ptr %dtable_ptr893, null
  %next_dtable_ref894 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr893, i32 0, i32 2
  br i1 %257, label %dtable_found895, label %dtable_check891

dtable_found895:                                  ; preds = %dtable_check891
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_bytes", ptr %dtable_ref892, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip896

dtable_skip896:                                   ; preds = %dtable_found895, %dtable_skip889
  %next_val897 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_long", i32 0, i32 2), align 8
  %258 = icmp eq ptr %next_val897, inttoptr (i64 -1 to ptr)
  br i1 %258, label %dtable_check898, label %dtable_skip903

dtable_check898:                                  ; preds = %dtable_check898, %dtable_skip896
  %dtable_ref899 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip896 ], [ %next_dtable_ref901, %dtable_check898 ]
  %dtable_ptr900 = load ptr, ptr %dtable_ref899, align 8
  %259 = icmp eq ptr %dtable_ptr900, null
  %next_dtable_ref901 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr900, i32 0, i32 2
  br i1 %259, label %dtable_found902, label %dtable_check898

dtable_found902:                                  ; preds = %dtable_check898
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_long", ptr %dtable_ref899, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip903

dtable_skip903:                                   ; preds = %dtable_found902, %dtable_skip896
  %next_val904 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int", i32 0, i32 2), align 8
  %260 = icmp eq ptr %next_val904, inttoptr (i64 -1 to ptr)
  br i1 %260, label %dtable_check905, label %dtable_skip910

dtable_check905:                                  ; preds = %dtable_check905, %dtable_skip903
  %dtable_ref906 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip903 ], [ %next_dtable_ref908, %dtable_check905 ]
  %dtable_ptr907 = load ptr, ptr %dtable_ref906, align 8
  %261 = icmp eq ptr %dtable_ptr907, null
  %next_dtable_ref908 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr907, i32 0, i32 2
  br i1 %261, label %dtable_found909, label %dtable_check905

dtable_found909:                                  ; preds = %dtable_check905
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int", ptr %dtable_ref906, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip910

dtable_skip910:                                   ; preds = %dtable_found909, %dtable_skip903
  %next_val911 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_short", i32 0, i32 2), align 8
  %262 = icmp eq ptr %next_val911, inttoptr (i64 -1 to ptr)
  br i1 %262, label %dtable_check912, label %dtable_skip917

dtable_check912:                                  ; preds = %dtable_check912, %dtable_skip910
  %dtable_ref913 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip910 ], [ %next_dtable_ref915, %dtable_check912 ]
  %dtable_ptr914 = load ptr, ptr %dtable_ref913, align 8
  %263 = icmp eq ptr %dtable_ptr914, null
  %next_dtable_ref915 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr914, i32 0, i32 2
  br i1 %263, label %dtable_found916, label %dtable_check912

dtable_found916:                                  ; preds = %dtable_check912
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_short", ptr %dtable_ref913, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip917

dtable_skip917:                                   ; preds = %dtable_found916, %dtable_skip910
  %next_val918 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_byte", i32 0, i32 2), align 8
  %264 = icmp eq ptr %next_val918, inttoptr (i64 -1 to ptr)
  br i1 %264, label %dtable_check919, label %dtable_skip924

dtable_check919:                                  ; preds = %dtable_check919, %dtable_skip917
  %dtable_ref920 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip917 ], [ %next_dtable_ref922, %dtable_check919 ]
  %dtable_ptr921 = load ptr, ptr %dtable_ref920, align 8
  %265 = icmp eq ptr %dtable_ptr921, null
  %next_dtable_ref922 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr921, i32 0, i32 2
  br i1 %265, label %dtable_found923, label %dtable_check919

dtable_found923:                                  ; preds = %dtable_check919
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_byte", ptr %dtable_ref920, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip924

dtable_skip924:                                   ; preds = %dtable_found923, %dtable_skip917
  %next_val925 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.set_seed", i32 0, i32 2), align 8
  %266 = icmp eq ptr %next_val925, inttoptr (i64 -1 to ptr)
  br i1 %266, label %dtable_check926, label %dtable_skip931

dtable_check926:                                  ; preds = %dtable_check926, %dtable_skip924
  %dtable_ref927 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip924 ], [ %next_dtable_ref929, %dtable_check926 ]
  %dtable_ptr928 = load ptr, ptr %dtable_ref927, align 8
  %267 = icmp eq ptr %dtable_ptr928, null
  %next_dtable_ref929 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr928, i32 0, i32 2
  br i1 %267, label %dtable_found930, label %dtable_check926

dtable_found930:                                  ; preds = %dtable_check926
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.set_seed", ptr %dtable_ref927, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip931

dtable_skip931:                                   ; preds = %dtable_found930, %dtable_skip924
  %next_val932 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_long", i32 0, i32 2), align 8
  %268 = icmp eq ptr %next_val932, inttoptr (i64 -1 to ptr)
  br i1 %268, label %dtable_check933, label %dtable_skip938

dtable_check933:                                  ; preds = %dtable_check933, %dtable_skip931
  %dtable_ref934 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip931 ], [ %next_dtable_ref936, %dtable_check933 ]
  %dtable_ptr935 = load ptr, ptr %dtable_ref934, align 8
  %269 = icmp eq ptr %dtable_ptr935, null
  %next_dtable_ref936 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr935, i32 0, i32 2
  br i1 %269, label %dtable_found937, label %dtable_check933

dtable_found937:                                  ; preds = %dtable_check933
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_long", ptr %dtable_ref934, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip938

dtable_skip938:                                   ; preds = %dtable_found937, %dtable_skip931
  %next_val939 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_bytes", i32 0, i32 2), align 8
  %270 = icmp eq ptr %next_val939, inttoptr (i64 -1 to ptr)
  br i1 %270, label %dtable_check940, label %dtable_skip945

dtable_check940:                                  ; preds = %dtable_check940, %dtable_skip938
  %dtable_ref941 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip938 ], [ %next_dtable_ref943, %dtable_check940 ]
  %dtable_ptr942 = load ptr, ptr %dtable_ref941, align 8
  %271 = icmp eq ptr %dtable_ptr942, null
  %next_dtable_ref943 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr942, i32 0, i32 2
  br i1 %271, label %dtable_found944, label %dtable_check940

dtable_found944:                                  ; preds = %dtable_check940
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_bytes", ptr %dtable_ref941, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip945

dtable_skip945:                                   ; preds = %dtable_found944, %dtable_skip938
  %next_val946 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int128", i32 0, i32 2), align 8
  %272 = icmp eq ptr %next_val946, inttoptr (i64 -1 to ptr)
  br i1 %272, label %dtable_check947, label %dtable_skip952

dtable_check947:                                  ; preds = %dtable_check947, %dtable_skip945
  %dtable_ref948 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip945 ], [ %next_dtable_ref950, %dtable_check947 ]
  %dtable_ptr949 = load ptr, ptr %dtable_ref948, align 8
  %273 = icmp eq ptr %dtable_ptr949, null
  %next_dtable_ref950 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr949, i32 0, i32 2
  br i1 %273, label %dtable_found951, label %dtable_check947

dtable_found951:                                  ; preds = %dtable_check947
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int128", ptr %dtable_ref948, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip952

dtable_skip952:                                   ; preds = %dtable_found951, %dtable_skip945
  %next_val953 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int", i32 0, i32 2), align 8
  %274 = icmp eq ptr %next_val953, inttoptr (i64 -1 to ptr)
  br i1 %274, label %dtable_check954, label %dtable_skip959

dtable_check954:                                  ; preds = %dtable_check954, %dtable_skip952
  %dtable_ref955 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip952 ], [ %next_dtable_ref957, %dtable_check954 ]
  %dtable_ptr956 = load ptr, ptr %dtable_ref955, align 8
  %275 = icmp eq ptr %dtable_ptr956, null
  %next_dtable_ref957 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr956, i32 0, i32 2
  br i1 %275, label %dtable_found958, label %dtable_check954

dtable_found958:                                  ; preds = %dtable_check954
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int", ptr %dtable_ref955, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip959

dtable_skip959:                                   ; preds = %dtable_found958, %dtable_skip952
  %next_val960 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_short", i32 0, i32 2), align 8
  %276 = icmp eq ptr %next_val960, inttoptr (i64 -1 to ptr)
  br i1 %276, label %dtable_check961, label %dtable_skip966

dtable_check961:                                  ; preds = %dtable_check961, %dtable_skip959
  %dtable_ref962 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip959 ], [ %next_dtable_ref964, %dtable_check961 ]
  %dtable_ptr963 = load ptr, ptr %dtable_ref962, align 8
  %277 = icmp eq ptr %dtable_ptr963, null
  %next_dtable_ref964 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr963, i32 0, i32 2
  br i1 %277, label %dtable_found965, label %dtable_check961

dtable_found965:                                  ; preds = %dtable_check961
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_short", ptr %dtable_ref962, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip966

dtable_skip966:                                   ; preds = %dtable_found965, %dtable_skip959
  %next_val967 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_byte", i32 0, i32 2), align 8
  %278 = icmp eq ptr %next_val967, inttoptr (i64 -1 to ptr)
  br i1 %278, label %dtable_check968, label %dtable_skip973

dtable_check968:                                  ; preds = %dtable_check968, %dtable_skip966
  %dtable_ref969 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip966 ], [ %next_dtable_ref971, %dtable_check968 ]
  %dtable_ptr970 = load ptr, ptr %dtable_ref969, align 8
  %279 = icmp eq ptr %dtable_ptr970, null
  %next_dtable_ref971 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr970, i32 0, i32 2
  br i1 %279, label %dtable_found972, label %dtable_check968

dtable_found972:                                  ; preds = %dtable_check968
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_byte", ptr %dtable_ref969, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip973

dtable_skip973:                                   ; preds = %dtable_found972, %dtable_skip966
  %next_val974 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.set_seed", i32 0, i32 2), align 8
  %280 = icmp eq ptr %next_val974, inttoptr (i64 -1 to ptr)
  br i1 %280, label %dtable_check975, label %dtable_skip980

dtable_check975:                                  ; preds = %dtable_check975, %dtable_skip973
  %dtable_ref976 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip973 ], [ %next_dtable_ref978, %dtable_check975 ]
  %dtable_ptr977 = load ptr, ptr %dtable_ref976, align 8
  %281 = icmp eq ptr %dtable_ptr977, null
  %next_dtable_ref978 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr977, i32 0, i32 2
  br i1 %281, label %dtable_found979, label %dtable_check975

dtable_found979:                                  ; preds = %dtable_check975
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.set_seed", ptr %dtable_ref976, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip980

dtable_skip980:                                   ; preds = %dtable_found979, %dtable_skip973
  %next_val981 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int", i32 0, i32 2), align 8
  %282 = icmp eq ptr %next_val981, inttoptr (i64 -1 to ptr)
  br i1 %282, label %dtable_check982, label %dtable_skip987

dtable_check982:                                  ; preds = %dtable_check982, %dtable_skip980
  %dtable_ref983 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip980 ], [ %next_dtable_ref985, %dtable_check982 ]
  %dtable_ptr984 = load ptr, ptr %dtable_ref983, align 8
  %283 = icmp eq ptr %dtable_ptr984, null
  %next_dtable_ref985 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr984, i32 0, i32 2
  br i1 %283, label %dtable_found986, label %dtable_check982

dtable_found986:                                  ; preds = %dtable_check982
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int", ptr %dtable_ref983, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip987

dtable_skip987:                                   ; preds = %dtable_found986, %dtable_skip980
  %next_val988 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_bytes", i32 0, i32 2), align 8
  %284 = icmp eq ptr %next_val988, inttoptr (i64 -1 to ptr)
  br i1 %284, label %dtable_check989, label %dtable_skip994

dtable_check989:                                  ; preds = %dtable_check989, %dtable_skip987
  %dtable_ref990 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip987 ], [ %next_dtable_ref992, %dtable_check989 ]
  %dtable_ptr991 = load ptr, ptr %dtable_ref990, align 8
  %285 = icmp eq ptr %dtable_ptr991, null
  %next_dtable_ref992 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr991, i32 0, i32 2
  br i1 %285, label %dtable_found993, label %dtable_check989

dtable_found993:                                  ; preds = %dtable_check989
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_bytes", ptr %dtable_ref990, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip994

dtable_skip994:                                   ; preds = %dtable_found993, %dtable_skip987
  %next_val995 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int128", i32 0, i32 2), align 8
  %286 = icmp eq ptr %next_val995, inttoptr (i64 -1 to ptr)
  br i1 %286, label %dtable_check996, label %dtable_skip1001

dtable_check996:                                  ; preds = %dtable_check996, %dtable_skip994
  %dtable_ref997 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip994 ], [ %next_dtable_ref999, %dtable_check996 ]
  %dtable_ptr998 = load ptr, ptr %dtable_ref997, align 8
  %287 = icmp eq ptr %dtable_ptr998, null
  %next_dtable_ref999 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr998, i32 0, i32 2
  br i1 %287, label %dtable_found1000, label %dtable_check996

dtable_found1000:                                 ; preds = %dtable_check996
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int128", ptr %dtable_ref997, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip1001

dtable_skip1001:                                  ; preds = %dtable_found1000, %dtable_skip994
  %next_val1002 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_long", i32 0, i32 2), align 8
  %288 = icmp eq ptr %next_val1002, inttoptr (i64 -1 to ptr)
  br i1 %288, label %dtable_check1003, label %dtable_skip1008

dtable_check1003:                                 ; preds = %dtable_check1003, %dtable_skip1001
  %dtable_ref1004 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip1001 ], [ %next_dtable_ref1006, %dtable_check1003 ]
  %dtable_ptr1005 = load ptr, ptr %dtable_ref1004, align 8
  %289 = icmp eq ptr %dtable_ptr1005, null
  %next_dtable_ref1006 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1005, i32 0, i32 2
  br i1 %289, label %dtable_found1007, label %dtable_check1003

dtable_found1007:                                 ; preds = %dtable_check1003
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_long", ptr %dtable_ref1004, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip1008

dtable_skip1008:                                  ; preds = %dtable_found1007, %dtable_skip1001
  %next_val1009 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_short", i32 0, i32 2), align 8
  %290 = icmp eq ptr %next_val1009, inttoptr (i64 -1 to ptr)
  br i1 %290, label %dtable_check1010, label %dtable_skip1015

dtable_check1010:                                 ; preds = %dtable_check1010, %dtable_skip1008
  %dtable_ref1011 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip1008 ], [ %next_dtable_ref1013, %dtable_check1010 ]
  %dtable_ptr1012 = load ptr, ptr %dtable_ref1011, align 8
  %291 = icmp eq ptr %dtable_ptr1012, null
  %next_dtable_ref1013 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1012, i32 0, i32 2
  br i1 %291, label %dtable_found1014, label %dtable_check1010

dtable_found1014:                                 ; preds = %dtable_check1010
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_short", ptr %dtable_ref1011, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip1015

dtable_skip1015:                                  ; preds = %dtable_found1014, %dtable_skip1008
  %next_val1016 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_byte", i32 0, i32 2), align 8
  %292 = icmp eq ptr %next_val1016, inttoptr (i64 -1 to ptr)
  br i1 %292, label %dtable_check1017, label %dtable_skip1022

dtable_check1017:                                 ; preds = %dtable_check1017, %dtable_skip1015
  %dtable_ref1018 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip1015 ], [ %next_dtable_ref1020, %dtable_check1017 ]
  %dtable_ptr1019 = load ptr, ptr %dtable_ref1018, align 8
  %293 = icmp eq ptr %dtable_ptr1019, null
  %next_dtable_ref1020 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1019, i32 0, i32 2
  br i1 %293, label %dtable_found1021, label %dtable_check1017

dtable_found1021:                                 ; preds = %dtable_check1017
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_byte", ptr %dtable_ref1018, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip1022

dtable_skip1022:                                  ; preds = %dtable_found1021, %dtable_skip1015
  %next_val1023 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.set_seed", i32 0, i32 2), align 8
  %294 = icmp eq ptr %next_val1023, inttoptr (i64 -1 to ptr)
  br i1 %294, label %dtable_check1024, label %dtable_skip1029

dtable_check1024:                                 ; preds = %dtable_check1024, %dtable_skip1022
  %dtable_ref1025 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip1022 ], [ %next_dtable_ref1027, %dtable_check1024 ]
  %dtable_ptr1026 = load ptr, ptr %dtable_ref1025, align 8
  %295 = icmp eq ptr %dtable_ptr1026, null
  %next_dtable_ref1027 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1026, i32 0, i32 2
  br i1 %295, label %dtable_found1028, label %dtable_check1024

dtable_found1028:                                 ; preds = %dtable_check1024
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.set_seed", ptr %dtable_ref1025, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip1029

dtable_skip1029:                                  ; preds = %dtable_found1028, %dtable_skip1022
  %next_val1030 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_short", i32 0, i32 2), align 8
  %296 = icmp eq ptr %next_val1030, inttoptr (i64 -1 to ptr)
  br i1 %296, label %dtable_check1031, label %dtable_skip1036

dtable_check1031:                                 ; preds = %dtable_check1031, %dtable_skip1029
  %dtable_ref1032 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip1029 ], [ %next_dtable_ref1034, %dtable_check1031 ]
  %dtable_ptr1033 = load ptr, ptr %dtable_ref1032, align 8
  %297 = icmp eq ptr %dtable_ptr1033, null
  %next_dtable_ref1034 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1033, i32 0, i32 2
  br i1 %297, label %dtable_found1035, label %dtable_check1031

dtable_found1035:                                 ; preds = %dtable_check1031
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_short", ptr %dtable_ref1032, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip1036

dtable_skip1036:                                  ; preds = %dtable_found1035, %dtable_skip1029
  %next_val1037 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_bytes", i32 0, i32 2), align 8
  %298 = icmp eq ptr %next_val1037, inttoptr (i64 -1 to ptr)
  br i1 %298, label %dtable_check1038, label %dtable_skip1043

dtable_check1038:                                 ; preds = %dtable_check1038, %dtable_skip1036
  %dtable_ref1039 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip1036 ], [ %next_dtable_ref1041, %dtable_check1038 ]
  %dtable_ptr1040 = load ptr, ptr %dtable_ref1039, align 8
  %299 = icmp eq ptr %dtable_ptr1040, null
  %next_dtable_ref1041 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1040, i32 0, i32 2
  br i1 %299, label %dtable_found1042, label %dtable_check1038

dtable_found1042:                                 ; preds = %dtable_check1038
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_bytes", ptr %dtable_ref1039, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip1043

dtable_skip1043:                                  ; preds = %dtable_found1042, %dtable_skip1036
  %next_val1044 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int128", i32 0, i32 2), align 8
  %300 = icmp eq ptr %next_val1044, inttoptr (i64 -1 to ptr)
  br i1 %300, label %dtable_check1045, label %dtable_skip1050

dtable_check1045:                                 ; preds = %dtable_check1045, %dtable_skip1043
  %dtable_ref1046 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip1043 ], [ %next_dtable_ref1048, %dtable_check1045 ]
  %dtable_ptr1047 = load ptr, ptr %dtable_ref1046, align 8
  %301 = icmp eq ptr %dtable_ptr1047, null
  %next_dtable_ref1048 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1047, i32 0, i32 2
  br i1 %301, label %dtable_found1049, label %dtable_check1045

dtable_found1049:                                 ; preds = %dtable_check1045
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int128", ptr %dtable_ref1046, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip1050

dtable_skip1050:                                  ; preds = %dtable_found1049, %dtable_skip1043
  %next_val1051 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_long", i32 0, i32 2), align 8
  %302 = icmp eq ptr %next_val1051, inttoptr (i64 -1 to ptr)
  br i1 %302, label %dtable_check1052, label %dtable_skip1057

dtable_check1052:                                 ; preds = %dtable_check1052, %dtable_skip1050
  %dtable_ref1053 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip1050 ], [ %next_dtable_ref1055, %dtable_check1052 ]
  %dtable_ptr1054 = load ptr, ptr %dtable_ref1053, align 8
  %303 = icmp eq ptr %dtable_ptr1054, null
  %next_dtable_ref1055 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1054, i32 0, i32 2
  br i1 %303, label %dtable_found1056, label %dtable_check1052

dtable_found1056:                                 ; preds = %dtable_check1052
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_long", ptr %dtable_ref1053, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip1057

dtable_skip1057:                                  ; preds = %dtable_found1056, %dtable_skip1050
  %next_val1058 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int", i32 0, i32 2), align 8
  %304 = icmp eq ptr %next_val1058, inttoptr (i64 -1 to ptr)
  br i1 %304, label %dtable_check1059, label %dtable_skip1064

dtable_check1059:                                 ; preds = %dtable_check1059, %dtable_skip1057
  %dtable_ref1060 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip1057 ], [ %next_dtable_ref1062, %dtable_check1059 ]
  %dtable_ptr1061 = load ptr, ptr %dtable_ref1060, align 8
  %305 = icmp eq ptr %dtable_ptr1061, null
  %next_dtable_ref1062 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1061, i32 0, i32 2
  br i1 %305, label %dtable_found1063, label %dtable_check1059

dtable_found1063:                                 ; preds = %dtable_check1059
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int", ptr %dtable_ref1060, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip1064

dtable_skip1064:                                  ; preds = %dtable_found1063, %dtable_skip1057
  %next_val1065 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_byte", i32 0, i32 2), align 8
  %306 = icmp eq ptr %next_val1065, inttoptr (i64 -1 to ptr)
  br i1 %306, label %dtable_check1066, label %dtable_skip1071

dtable_check1066:                                 ; preds = %dtable_check1066, %dtable_skip1064
  %dtable_ref1067 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip1064 ], [ %next_dtable_ref1069, %dtable_check1066 ]
  %dtable_ptr1068 = load ptr, ptr %dtable_ref1067, align 8
  %307 = icmp eq ptr %dtable_ptr1068, null
  %next_dtable_ref1069 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1068, i32 0, i32 2
  br i1 %307, label %dtable_found1070, label %dtable_check1066

dtable_found1070:                                 ; preds = %dtable_check1066
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_byte", ptr %dtable_ref1067, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip1071

dtable_skip1071:                                  ; preds = %dtable_found1070, %dtable_skip1064
  %next_val1072 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.set_seed", i32 0, i32 2), align 8
  %308 = icmp eq ptr %next_val1072, inttoptr (i64 -1 to ptr)
  br i1 %308, label %dtable_check1073, label %dtable_skip1078

dtable_check1073:                                 ; preds = %dtable_check1073, %dtable_skip1071
  %dtable_ref1074 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip1071 ], [ %next_dtable_ref1076, %dtable_check1073 ]
  %dtable_ptr1075 = load ptr, ptr %dtable_ref1074, align 8
  %309 = icmp eq ptr %dtable_ptr1075, null
  %next_dtable_ref1076 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1075, i32 0, i32 2
  br i1 %309, label %dtable_found1077, label %dtable_check1073

dtable_found1077:                                 ; preds = %dtable_check1073
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.set_seed", ptr %dtable_ref1074, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip1078

dtable_skip1078:                                  ; preds = %dtable_found1077, %dtable_skip1071
  %next_val1079 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_byte", i32 0, i32 2), align 8
  %310 = icmp eq ptr %next_val1079, inttoptr (i64 -1 to ptr)
  br i1 %310, label %dtable_check1080, label %dtable_skip1085

dtable_check1080:                                 ; preds = %dtable_check1080, %dtable_skip1078
  %dtable_ref1081 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip1078 ], [ %next_dtable_ref1083, %dtable_check1080 ]
  %dtable_ptr1082 = load ptr, ptr %dtable_ref1081, align 8
  %311 = icmp eq ptr %dtable_ptr1082, null
  %next_dtable_ref1083 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1082, i32 0, i32 2
  br i1 %311, label %dtable_found1084, label %dtable_check1080

dtable_found1084:                                 ; preds = %dtable_check1080
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_byte", ptr %dtable_ref1081, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip1085

dtable_skip1085:                                  ; preds = %dtable_found1084, %dtable_skip1078
  %next_val1086 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_bytes", i32 0, i32 2), align 8
  %312 = icmp eq ptr %next_val1086, inttoptr (i64 -1 to ptr)
  br i1 %312, label %dtable_check1087, label %dtable_skip1092

dtable_check1087:                                 ; preds = %dtable_check1087, %dtable_skip1085
  %dtable_ref1088 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip1085 ], [ %next_dtable_ref1090, %dtable_check1087 ]
  %dtable_ptr1089 = load ptr, ptr %dtable_ref1088, align 8
  %313 = icmp eq ptr %dtable_ptr1089, null
  %next_dtable_ref1090 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1089, i32 0, i32 2
  br i1 %313, label %dtable_found1091, label %dtable_check1087

dtable_found1091:                                 ; preds = %dtable_check1087
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_bytes", ptr %dtable_ref1088, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip1092

dtable_skip1092:                                  ; preds = %dtable_found1091, %dtable_skip1085
  %next_val1093 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int128", i32 0, i32 2), align 8
  %314 = icmp eq ptr %next_val1093, inttoptr (i64 -1 to ptr)
  br i1 %314, label %dtable_check1094, label %dtable_skip1099

dtable_check1094:                                 ; preds = %dtable_check1094, %dtable_skip1092
  %dtable_ref1095 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip1092 ], [ %next_dtable_ref1097, %dtable_check1094 ]
  %dtable_ptr1096 = load ptr, ptr %dtable_ref1095, align 8
  %315 = icmp eq ptr %dtable_ptr1096, null
  %next_dtable_ref1097 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1096, i32 0, i32 2
  br i1 %315, label %dtable_found1098, label %dtable_check1094

dtable_found1098:                                 ; preds = %dtable_check1094
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int128", ptr %dtable_ref1095, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip1099

dtable_skip1099:                                  ; preds = %dtable_found1098, %dtable_skip1092
  %next_val1100 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_long", i32 0, i32 2), align 8
  %316 = icmp eq ptr %next_val1100, inttoptr (i64 -1 to ptr)
  br i1 %316, label %dtable_check1101, label %dtable_skip1106

dtable_check1101:                                 ; preds = %dtable_check1101, %dtable_skip1099
  %dtable_ref1102 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip1099 ], [ %next_dtable_ref1104, %dtable_check1101 ]
  %dtable_ptr1103 = load ptr, ptr %dtable_ref1102, align 8
  %317 = icmp eq ptr %dtable_ptr1103, null
  %next_dtable_ref1104 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1103, i32 0, i32 2
  br i1 %317, label %dtable_found1105, label %dtable_check1101

dtable_found1105:                                 ; preds = %dtable_check1101
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_long", ptr %dtable_ref1102, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip1106

dtable_skip1106:                                  ; preds = %dtable_found1105, %dtable_skip1099
  %next_val1107 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int", i32 0, i32 2), align 8
  %318 = icmp eq ptr %next_val1107, inttoptr (i64 -1 to ptr)
  br i1 %318, label %dtable_check1108, label %dtable_skip1113

dtable_check1108:                                 ; preds = %dtable_check1108, %dtable_skip1106
  %dtable_ref1109 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip1106 ], [ %next_dtable_ref1111, %dtable_check1108 ]
  %dtable_ptr1110 = load ptr, ptr %dtable_ref1109, align 8
  %319 = icmp eq ptr %dtable_ptr1110, null
  %next_dtable_ref1111 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1110, i32 0, i32 2
  br i1 %319, label %dtable_found1112, label %dtable_check1108

dtable_found1112:                                 ; preds = %dtable_check1108
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int", ptr %dtable_ref1109, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip1113

dtable_skip1113:                                  ; preds = %dtable_found1112, %dtable_skip1106
  %next_val1114 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_short", i32 0, i32 2), align 8
  %320 = icmp eq ptr %next_val1114, inttoptr (i64 -1 to ptr)
  br i1 %320, label %dtable_check1115, label %dtable_skip1120

dtable_check1115:                                 ; preds = %dtable_check1115, %dtable_skip1113
  %dtable_ref1116 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip1113 ], [ %next_dtable_ref1118, %dtable_check1115 ]
  %dtable_ptr1117 = load ptr, ptr %dtable_ref1116, align 8
  %321 = icmp eq ptr %dtable_ptr1117, null
  %next_dtable_ref1118 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1117, i32 0, i32 2
  br i1 %321, label %dtable_found1119, label %dtable_check1115

dtable_found1119:                                 ; preds = %dtable_check1115
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_short", ptr %dtable_ref1116, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip1120

dtable_skip1120:                                  ; preds = %dtable_found1119, %dtable_skip1113
  ret void
}

attributes #0 = { nounwind ssp uwtable "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #5 = { noreturn }
attributes #6 = { alwaysinline }

!llvm.module.flags = !{!106, !107, !108, !109, !110, !111, !112}
!llvm.dbg.cu = !{!113}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "default_random", linkageName: "std.math.random.default_random", scope: !2, file: !2, line: 65, type: !3, isLocal: false, isDefinition: true, align: 16)
!2 = !DIFile(filename: "math_random.c3", directory: "/usr/local/lib/c3/std/math")
!3 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc64Random", scope: !4, file: !4, line: 43, baseType: !5, align: 8)
!4 = !DIFile(filename: "math.sfc.c3", directory: "/usr/local/lib/c3/std/math/random")
!5 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 256, align: 64, elements: !7)
!6 = !DIBasicType(name: "ulong", size: 64, encoding: DW_ATE_unsigned)
!7 = !{!8}
!8 = !DISubrange(count: 4, lowerBound: 0)
!9 = !DIGlobalVariableExpression(var: !10, expr: !DIExpression())
!10 = distinct !DIGlobalVariable(name: "default_random_initialized", linkageName: "std.math.random.default_random_initialized", scope: !2, file: !2, line: 66, type: !11, isLocal: false, isDefinition: true, align: 1)
!11 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(name: "ODD_PHI128", linkageName: "std.math.random.ODD_PHI128", scope: !14, file: !14, line: 4, type: !15, isLocal: true, isDefinition: true, align: 16)
!14 = !DIFile(filename: "math.pcg.c3", directory: "/usr/local/lib/c3/std/math/random")
!15 = !DIBasicType(name: "uint128", size: 128, encoding: DW_ATE_unsigned)
!16 = !DIGlobalVariableExpression(var: !17, expr: !DIExpression())
!17 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64", scope: !14, file: !14, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!18 = !DIGlobalVariableExpression(var: !19, expr: !DIExpression())
!19 = distinct !DIGlobalVariable(name: "ODD_PHI32", linkageName: "std.math.random.ODD_PHI32", scope: !14, file: !14, line: 6, type: !20, isLocal: true, isDefinition: true, align: 4)
!20 = !DIBasicType(name: "uint", size: 32, encoding: DW_ATE_unsigned)
!21 = !DIGlobalVariableExpression(var: !22, expr: !DIExpression())
!22 = distinct !DIGlobalVariable(name: "ODD_PHI16", linkageName: "std.math.random.ODD_PHI16", scope: !14, file: !14, line: 7, type: !23, isLocal: true, isDefinition: true, align: 2)
!23 = !DIBasicType(name: "ushort", size: 16, encoding: DW_ATE_unsigned)
!24 = !DIGlobalVariableExpression(var: !25, expr: !DIExpression())
!25 = distinct !DIGlobalVariable(name: "MUL_LCG128", linkageName: "std.math.random.MUL_LCG128", scope: !14, file: !14, line: 9, type: !15, isLocal: true, isDefinition: true, align: 16)
!26 = !DIGlobalVariableExpression(var: !27, expr: !DIExpression())
!27 = distinct !DIGlobalVariable(name: "MUL_LCG64", linkageName: "std.math.random.MUL_LCG64", scope: !14, file: !14, line: 10, type: !6, isLocal: true, isDefinition: true, align: 8)
!28 = !DIGlobalVariableExpression(var: !29, expr: !DIExpression())
!29 = distinct !DIGlobalVariable(name: "MUL_LCG32", linkageName: "std.math.random.MUL_LCG32", scope: !14, file: !14, line: 11, type: !20, isLocal: true, isDefinition: true, align: 4)
!30 = !DIGlobalVariableExpression(var: !31, expr: !DIExpression())
!31 = distinct !DIGlobalVariable(name: "MUL_LCG16", linkageName: "std.math.random.MUL_LCG16", scope: !14, file: !14, line: 12, type: !23, isLocal: true, isDefinition: true, align: 2)
!32 = !DIGlobalVariableExpression(var: !33, expr: !DIExpression())
!33 = distinct !DIGlobalVariable(name: "ROT_SHIFT", linkageName: "next_long.ROT_SHIFT", scope: !14, file: !14, line: 28, type: !34, isLocal: true, isDefinition: true, align: 4)
!34 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!35 = !DIGlobalVariableExpression(var: !36, expr: !DIExpression())
!36 = distinct !DIGlobalVariable(name: "ROT_SHIFT", linkageName: "next_int.ROT_SHIFT", scope: !14, file: !14, line: 56, type: !34, isLocal: true, isDefinition: true, align: 4)
!37 = !DIGlobalVariableExpression(var: !38, expr: !DIExpression())
!38 = distinct !DIGlobalVariable(name: "ROT_SHIFT", linkageName: "next_short.ROT_SHIFT", scope: !14, file: !14, line: 85, type: !34, isLocal: true, isDefinition: true, align: 4)
!39 = !DIGlobalVariableExpression(var: !40, expr: !DIExpression())
!40 = distinct !DIGlobalVariable(name: "ROT_SHIFT", linkageName: "next_byte.ROT_SHIFT", scope: !14, file: !14, line: 113, type: !34, isLocal: true, isDefinition: true, align: 4)
!41 = !DIGlobalVariableExpression(var: !42, expr: !DIExpression())
!42 = distinct !DIGlobalVariable(name: "MUL_MCG128", linkageName: "std.math.random.MUL_MCG128", scope: !43, file: !43, line: 3, type: !15, isLocal: true, isDefinition: true, align: 16)
!43 = !DIFile(filename: "math.mcg.c3", directory: "/usr/local/lib/c3/std/math/random")
!44 = !DIGlobalVariableExpression(var: !45, expr: !DIExpression())
!45 = distinct !DIGlobalVariable(name: "MUL_MCG64", linkageName: "std.math.random.MUL_MCG64", scope: !43, file: !43, line: 4, type: !6, isLocal: true, isDefinition: true, align: 8)
!46 = !DIGlobalVariableExpression(var: !47, expr: !DIExpression())
!47 = distinct !DIGlobalVariable(name: "MUL_MCG32", linkageName: "std.math.random.MUL_MCG32", scope: !43, file: !43, line: 5, type: !20, isLocal: true, isDefinition: true, align: 4)
!48 = !DIGlobalVariableExpression(var: !49, expr: !DIExpression())
!49 = distinct !DIGlobalVariable(name: "MUL_MCG16", linkageName: "std.math.random.MUL_MCG16", scope: !43, file: !43, line: 6, type: !23, isLocal: true, isDefinition: true, align: 2)
!50 = !DIGlobalVariableExpression(var: !51, expr: !DIExpression())
!51 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64", scope: !52, file: !52, line: 4, type: !6, isLocal: true, isDefinition: true, align: 8)
!52 = !DIFile(filename: "math.seeder.c3", directory: "/usr/local/lib/c3/std/math/random")
!53 = !DIGlobalVariableExpression(var: !54, expr: !DIExpression())
!54 = distinct !DIGlobalVariable(name: "MUL_MCG64", linkageName: "std.math.random.MUL_MCG64", scope: !52, file: !52, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!55 = !DIGlobalVariableExpression(var: !56, expr: !DIExpression())
!56 = distinct !DIGlobalVariable(name: "MUL_LCG64", linkageName: "std.math.random.MUL_LCG64", scope: !52, file: !52, line: 6, type: !6, isLocal: true, isDefinition: true, align: 8)
!57 = !DIGlobalVariableExpression(var: !58, expr: !DIExpression())
!58 = distinct !DIGlobalVariable(name: "random_int", linkageName: "entropy.random_int", scope: !52, file: !52, line: 80, type: !20, isLocal: true, isDefinition: true, align: 4)
!59 = !DIGlobalVariableExpression(var: !60, expr: !DIExpression())
!60 = distinct !DIGlobalVariable(name: "ODD_PHI128", linkageName: "std.math.random.ODD_PHI128", scope: !61, file: !61, line: 4, type: !15, isLocal: true, isDefinition: true, align: 16)
!61 = !DIFile(filename: "math.lcg.c3", directory: "/usr/local/lib/c3/std/math/random")
!62 = !DIGlobalVariableExpression(var: !63, expr: !DIExpression())
!63 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64", scope: !61, file: !61, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!64 = !DIGlobalVariableExpression(var: !65, expr: !DIExpression())
!65 = distinct !DIGlobalVariable(name: "ODD_PHI32", linkageName: "std.math.random.ODD_PHI32", scope: !61, file: !61, line: 6, type: !20, isLocal: true, isDefinition: true, align: 4)
!66 = !DIGlobalVariableExpression(var: !67, expr: !DIExpression())
!67 = distinct !DIGlobalVariable(name: "ODD_PHI16", linkageName: "std.math.random.ODD_PHI16", scope: !61, file: !61, line: 7, type: !23, isLocal: true, isDefinition: true, align: 2)
!68 = !DIGlobalVariableExpression(var: !69, expr: !DIExpression())
!69 = distinct !DIGlobalVariable(name: "MUL_LCG128", linkageName: "std.math.random.MUL_LCG128", scope: !61, file: !61, line: 9, type: !15, isLocal: true, isDefinition: true, align: 16)
!70 = !DIGlobalVariableExpression(var: !71, expr: !DIExpression())
!71 = distinct !DIGlobalVariable(name: "MUL_LCG64", linkageName: "std.math.random.MUL_LCG64", scope: !61, file: !61, line: 10, type: !6, isLocal: true, isDefinition: true, align: 8)
!72 = !DIGlobalVariableExpression(var: !73, expr: !DIExpression())
!73 = distinct !DIGlobalVariable(name: "MUL_LCG32", linkageName: "std.math.random.MUL_LCG32", scope: !61, file: !61, line: 11, type: !20, isLocal: true, isDefinition: true, align: 4)
!74 = !DIGlobalVariableExpression(var: !75, expr: !DIExpression())
!75 = distinct !DIGlobalVariable(name: "MUL_LCG16", linkageName: "std.math.random.MUL_LCG16", scope: !61, file: !61, line: 12, type: !23, isLocal: true, isDefinition: true, align: 2)
!76 = !DIGlobalVariableExpression(var: !77, expr: !DIExpression())
!77 = distinct !DIGlobalVariable(name: "ODD_PHI128", linkageName: "std.math.random.ODD_PHI128", scope: !78, file: !78, line: 4, type: !15, isLocal: true, isDefinition: true, align: 16)
!78 = !DIFile(filename: "math.msws.c3", directory: "/usr/local/lib/c3/std/math/random")
!79 = !DIGlobalVariableExpression(var: !80, expr: !DIExpression())
!80 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64", scope: !78, file: !78, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!81 = !DIGlobalVariableExpression(var: !82, expr: !DIExpression())
!82 = distinct !DIGlobalVariable(name: "ODD_PHI32", linkageName: "std.math.random.ODD_PHI32", scope: !78, file: !78, line: 6, type: !20, isLocal: true, isDefinition: true, align: 4)
!83 = !DIGlobalVariableExpression(var: !84, expr: !DIExpression())
!84 = distinct !DIGlobalVariable(name: "ODD_PHI16", linkageName: "std.math.random.ODD_PHI16", scope: !78, file: !78, line: 7, type: !23, isLocal: true, isDefinition: true, align: 2)
!85 = !DIGlobalVariableExpression(var: !86, expr: !DIExpression())
!86 = distinct !DIGlobalVariable(name: "ODD_PHI8", linkageName: "std.math.random.ODD_PHI8", scope: !78, file: !78, line: 8, type: !87, isLocal: true, isDefinition: true, align: 1)
!87 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_unsigned_char)
!88 = !DIGlobalVariableExpression(var: !89, expr: !DIExpression())
!89 = distinct !DIGlobalVariable(name: "SIMPLE_RANDOM_MULTIPLIER", linkageName: "std.math.random.SIMPLE_RANDOM_MULTIPLIER", scope: !90, file: !90, line: 32, type: !91, isLocal: true, isDefinition: true, align: 8)
!90 = !DIFile(filename: "math.simple_random.c3", directory: "/usr/local/lib/c3/std/math/random")
!91 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!92 = !DIGlobalVariableExpression(var: !93, expr: !DIExpression())
!93 = distinct !DIGlobalVariable(name: "SIMPLE_RANDOM_ADDEND", linkageName: "std.math.random.SIMPLE_RANDOM_ADDEND", scope: !90, file: !90, line: 33, type: !91, isLocal: true, isDefinition: true, align: 8)
!94 = !DIGlobalVariableExpression(var: !95, expr: !DIExpression())
!95 = distinct !DIGlobalVariable(name: "SIMPLE_RANDOM_MASK", linkageName: "std.math.random.SIMPLE_RANDOM_MASK", scope: !90, file: !90, line: 34, type: !91, isLocal: true, isDefinition: true, align: 8)
!96 = !DIGlobalVariableExpression(var: !97, expr: !DIExpression())
!97 = distinct !DIGlobalVariable(name: "ODD_PHI128", linkageName: "std.math.random.ODD_PHI128", scope: !4, file: !4, line: 4, type: !15, isLocal: true, isDefinition: true, align: 16)
!98 = !DIGlobalVariableExpression(var: !99, expr: !DIExpression())
!99 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64", scope: !4, file: !4, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!100 = !DIGlobalVariableExpression(var: !101, expr: !DIExpression())
!101 = distinct !DIGlobalVariable(name: "ODD_PHI32", linkageName: "std.math.random.ODD_PHI32", scope: !4, file: !4, line: 6, type: !20, isLocal: true, isDefinition: true, align: 4)
!102 = !DIGlobalVariableExpression(var: !103, expr: !DIExpression())
!103 = distinct !DIGlobalVariable(name: "ODD_PHI16", linkageName: "std.math.random.ODD_PHI16", scope: !4, file: !4, line: 7, type: !23, isLocal: true, isDefinition: true, align: 2)
!104 = !DIGlobalVariableExpression(var: !105, expr: !DIExpression())
!105 = distinct !DIGlobalVariable(name: "ODD_PHI8", linkageName: "std.math.random.ODD_PHI8", scope: !4, file: !4, line: 8, type: !87, isLocal: true, isDefinition: true, align: 1)
!106 = !{i32 2, !"Dwarf Version", i32 4}
!107 = !{i32 2, !"Debug Info Version", i32 3}
!108 = !{i32 2, !"wchar_size", i32 4}
!109 = !{i32 4, !"PIE Level", i32 2}
!110 = !{i32 4, !"PIC Level", i32 2}
!111 = !{i32 1, !"uwtable", i32 2}
!112 = !{i32 2, !"frame-pointer", i32 2}
!113 = distinct !DICompileUnit(language: DW_LANG_C11, file: !2, producer: "c3c", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !114, splitDebugInlining: false)
!114 = !{!0, !9, !12, !16, !18, !21, !24, !26, !28, !30, !32, !35, !37, !39, !41, !44, !46, !48, !50, !53, !55, !57, !59, !62, !64, !66, !68, !70, !72, !74, !76, !79, !81, !83, !85, !88, !92, !94, !96, !98, !100, !102, !104}
!115 = distinct !DISubprogram(name: "srand", linkageName: "std.math.random.srand", scope: !2, file: !2, line: 71, type: !116, scopeLine: 71, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!116 = !DISubroutineType(types: !117)
!117 = !{null, !6}
!118 = !{}
!119 = !DILocalVariable(name: "seed", arg: 1, scope: !115, file: !2, line: 71, type: !6)
!120 = !DILocation(line: 71, column: 21, scope: !115)
!121 = !DILocation(line: 73, column: 2, scope: !115)
!122 = !DILocation(line: 74, column: 31, scope: !115)
!123 = distinct !DISubprogram(name: "rand", linkageName: "std.math.random.rand", scope: !2, file: !2, line: 80, type: !124, scopeLine: 80, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!124 = !DISubroutineType(types: !125)
!125 = !{!126, !34}
!126 = !DIDerivedType(tag: DW_TAG_typedef, name: "CInt", scope: !2, file: !2, line: 21, baseType: !34, align: 4)
!127 = !DILocalVariable(name: "range", arg: 1, scope: !123, file: !2, line: 80, type: !34)
!128 = !DILocation(line: 80, column: 17, scope: !123)
!129 = !DILocation(line: 179, column: 7, scope: !130, inlinedAt: !131)
!130 = distinct !DISubprogram(name: "init_default_random", linkageName: "init_default_random", scope: !2, file: !2, line: 177, scopeLine: 177, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!131 = !DILocation(line: 82, column: 2, scope: !123)
!132 = !DILocation(line: 136, column: 33, scope: !133, inlinedAt: !134)
!133 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!134 = !DILocation(line: 24, column: 11, scope: !135, inlinedAt: !137)
!135 = distinct !DILexicalBlock(scope: !136, file: !2, line: 27, column: 1)
!136 = distinct !DISubprogram(name: "seed_entropy", linkageName: "seed_entropy", scope: !2, file: !2, line: 26, scopeLine: 26, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!137 = !DILocation(line: 181, column: 3, scope: !138, inlinedAt: !131)
!138 = distinct !DILexicalBlock(scope: !130, file: !2, line: 180, column: 2)
!139 = !DILocation(line: 28, column: 20, scope: !136, inlinedAt: !137)
!140 = !DILocation(line: 28, column: 2, scope: !136, inlinedAt: !137)
!141 = !DILocation(line: 182, column: 32, scope: !138, inlinedAt: !131)
!142 = !DILocation(line: 83, column: 31, scope: !123)
!143 = !DILocation(line: 136, column: 33, scope: !144, inlinedAt: !145)
!144 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!145 = !DILocation(line: 34, column: 11, scope: !146, inlinedAt: !148)
!146 = distinct !DILexicalBlock(scope: !147, file: !2, line: 38, column: 1)
!147 = distinct !DISubprogram(name: "next", linkageName: "next", scope: !2, file: !2, line: 37, scopeLine: 37, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!148 = !DILocation(line: 83, column: 9, scope: !123)
!149 = !DILocation(line: 35, column: 11, scope: !146, inlinedAt: !148)
!150 = !DILocation(line: 39, column: 6, scope: !147, inlinedAt: !148)
!151 = !DILocation(line: 39, column: 25, scope: !147, inlinedAt: !148)
!152 = !DILocalVariable(name: "mask", scope: !147, file: !2, line: 40, type: !20, align: 4)
!153 = !DILocation(line: 40, column: 7, scope: !147, inlinedAt: !148)
!154 = !DILocation(line: 40, column: 14, scope: !147, inlinedAt: !148)
!155 = !DILocation(line: 41, column: 2, scope: !147, inlinedAt: !148)
!156 = !DILocation(line: 42, column: 2, scope: !147, inlinedAt: !148)
!157 = !DILocation(line: 95, column: 31, scope: !158, inlinedAt: !160)
!158 = distinct !DISubprogram(name: "clz", linkageName: "clz", scope: !159, file: !159, line: 95, scopeLine: 95, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!159 = !DIFile(filename: "bits.c3", directory: "/usr/local/lib/c3/std")
!160 = !DILocation(line: 42, column: 11, scope: !147, inlinedAt: !148)
!161 = !DILocalVariable(name: "x", scope: !147, file: !2, line: 43, type: !20, align: 4)
!162 = !DILocation(line: 43, column: 7, scope: !147, inlinedAt: !148)
!163 = !DILocation(line: 44, column: 2, scope: !147, inlinedAt: !148)
!164 = !DILocation(line: 48, column: 9, scope: !165, inlinedAt: !148)
!165 = distinct !DILexicalBlock(scope: !147, file: !2, line: 44, column: 2)
!166 = !DILocation(line: 48, column: 13, scope: !165, inlinedAt: !148)
!167 = !DILocation(line: 46, column: 7, scope: !168, inlinedAt: !148)
!168 = distinct !DILexicalBlock(scope: !165, file: !2, line: 45, column: 2)
!169 = !DILocation(line: 46, column: 27, scope: !168, inlinedAt: !148)
!170 = !DILocation(line: 49, column: 9, scope: !147, inlinedAt: !148)
!171 = distinct !DISubprogram(name: "rand_in_range", linkageName: "std.math.random.rand_in_range", scope: !2, file: !2, line: 90, type: !172, scopeLine: 90, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!172 = !DISubroutineType(types: !173)
!173 = !{!34, !34, !34}
!174 = !DILocalVariable(name: "min", arg: 1, scope: !171, file: !2, line: 90, type: !34)
!175 = !DILocation(line: 90, column: 26, scope: !171)
!176 = !DILocalVariable(name: "max", arg: 2, scope: !171, file: !2, line: 90, type: !34)
!177 = !DILocation(line: 90, column: 35, scope: !171)
!178 = !DILocation(line: 88, column: 11, scope: !179)
!179 = distinct !DILexicalBlock(scope: !171, file: !2, line: 91, column: 1)
!180 = !DILocation(line: 88, column: 18, scope: !179)
!181 = !DILocation(line: 179, column: 7, scope: !182, inlinedAt: !183)
!182 = distinct !DISubprogram(name: "init_default_random", linkageName: "init_default_random", scope: !2, file: !2, line: 177, scopeLine: 177, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!183 = !DILocation(line: 92, column: 2, scope: !171)
!184 = !DILocation(line: 136, column: 33, scope: !185, inlinedAt: !186)
!185 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!186 = !DILocation(line: 24, column: 11, scope: !187, inlinedAt: !189)
!187 = distinct !DILexicalBlock(scope: !188, file: !2, line: 27, column: 1)
!188 = distinct !DISubprogram(name: "seed_entropy", linkageName: "seed_entropy", scope: !2, file: !2, line: 26, scopeLine: 26, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!189 = !DILocation(line: 181, column: 3, scope: !190, inlinedAt: !183)
!190 = distinct !DILexicalBlock(scope: !182, file: !2, line: 180, column: 2)
!191 = !DILocation(line: 28, column: 20, scope: !188, inlinedAt: !189)
!192 = !DILocation(line: 28, column: 2, scope: !188, inlinedAt: !189)
!193 = !DILocation(line: 182, column: 32, scope: !190, inlinedAt: !183)
!194 = !DILocation(line: 136, column: 33, scope: !195, inlinedAt: !196)
!195 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!196 = !DILocation(line: 55, column: 11, scope: !197, inlinedAt: !199)
!197 = distinct !DILexicalBlock(scope: !198, file: !2, line: 59, column: 1)
!198 = distinct !DISubprogram(name: "next_in_range", linkageName: "next_in_range", scope: !2, file: !2, line: 58, scopeLine: 58, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!199 = !DILocation(line: 93, column: 9, scope: !171)
!200 = !DILocation(line: 56, column: 11, scope: !197, inlinedAt: !199)
!201 = !DILocation(line: 56, column: 18, scope: !197, inlinedAt: !199)
!202 = !DILocation(line: 60, column: 22, scope: !198, inlinedAt: !199)
!203 = !DILocation(line: 60, column: 28, scope: !198, inlinedAt: !199)
!204 = !DILocation(line: 136, column: 33, scope: !205, inlinedAt: !206)
!205 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!206 = !DILocation(line: 34, column: 11, scope: !207, inlinedAt: !209)
!207 = distinct !DILexicalBlock(scope: !208, file: !2, line: 38, column: 1)
!208 = distinct !DISubprogram(name: "next", linkageName: "next", scope: !2, file: !2, line: 37, scopeLine: 37, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!209 = !DILocation(line: 60, column: 9, scope: !198, inlinedAt: !199)
!210 = !DILocation(line: 35, column: 11, scope: !207, inlinedAt: !209)
!211 = !DILocation(line: 39, column: 6, scope: !208, inlinedAt: !209)
!212 = !DILocation(line: 39, column: 25, scope: !208, inlinedAt: !209)
!213 = !DILocalVariable(name: "mask", scope: !208, file: !2, line: 40, type: !20, align: 4)
!214 = !DILocation(line: 40, column: 7, scope: !208, inlinedAt: !209)
!215 = !DILocation(line: 40, column: 14, scope: !208, inlinedAt: !209)
!216 = !DILocation(line: 41, column: 2, scope: !208, inlinedAt: !209)
!217 = !DILocation(line: 42, column: 2, scope: !208, inlinedAt: !209)
!218 = !DILocation(line: 95, column: 31, scope: !219, inlinedAt: !220)
!219 = distinct !DISubprogram(name: "clz", linkageName: "clz", scope: !159, file: !159, line: 95, scopeLine: 95, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!220 = !DILocation(line: 42, column: 11, scope: !208, inlinedAt: !209)
!221 = !DILocalVariable(name: "x", scope: !208, file: !2, line: 43, type: !20, align: 4)
!222 = !DILocation(line: 43, column: 7, scope: !208, inlinedAt: !209)
!223 = !DILocation(line: 44, column: 2, scope: !208, inlinedAt: !209)
!224 = !DILocation(line: 48, column: 9, scope: !225, inlinedAt: !209)
!225 = distinct !DILexicalBlock(scope: !208, file: !2, line: 44, column: 2)
!226 = !DILocation(line: 48, column: 13, scope: !225, inlinedAt: !209)
!227 = !DILocation(line: 46, column: 7, scope: !228, inlinedAt: !209)
!228 = distinct !DILexicalBlock(scope: !225, file: !2, line: 45, column: 2)
!229 = !DILocation(line: 46, column: 27, scope: !228, inlinedAt: !209)
!230 = !DILocation(line: 49, column: 9, scope: !208, inlinedAt: !209)
!231 = !DILocation(line: 60, column: 39, scope: !198, inlinedAt: !199)
!232 = distinct !DISubprogram(name: "rnd", linkageName: "std.math.random.rnd", scope: !2, file: !2, line: 96, type: !233, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!233 = !DISubroutineType(types: !234)
!234 = !{!235}
!235 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!236 = !DILocation(line: 179, column: 7, scope: !237, inlinedAt: !238)
!237 = distinct !DISubprogram(name: "init_default_random", linkageName: "init_default_random", scope: !2, file: !2, line: 177, scopeLine: 177, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!238 = !DILocation(line: 98, column: 2, scope: !232)
!239 = !DILocation(line: 136, column: 33, scope: !240, inlinedAt: !241)
!240 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!241 = !DILocation(line: 24, column: 11, scope: !242, inlinedAt: !244)
!242 = distinct !DILexicalBlock(scope: !243, file: !2, line: 27, column: 1)
!243 = distinct !DISubprogram(name: "seed_entropy", linkageName: "seed_entropy", scope: !2, file: !2, line: 26, scopeLine: 26, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!244 = !DILocation(line: 181, column: 3, scope: !245, inlinedAt: !238)
!245 = distinct !DILexicalBlock(scope: !237, file: !2, line: 180, column: 2)
!246 = !DILocation(line: 28, column: 20, scope: !243, inlinedAt: !244)
!247 = !DILocation(line: 28, column: 2, scope: !243, inlinedAt: !244)
!248 = !DILocation(line: 182, column: 32, scope: !245, inlinedAt: !238)
!249 = !DILocalVariable(name: "val", scope: !232, file: !2, line: 99, type: !6, align: 8)
!250 = !DILocation(line: 99, column: 8, scope: !232)
!251 = !DILocation(line: 99, column: 14, scope: !232)
!252 = !DILocation(line: 100, column: 9, scope: !232)
!253 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Pcg128Random.set_seed", scope: !14, file: !14, line: 20, type: !254, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!254 = !DISubroutineType(types: !255)
!255 = !{null, !256, !258}
!256 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Pcg128Random*", baseType: !257, size: 64, align: 64, dwarfAddressSpace: 0)
!257 = !DIDerivedType(tag: DW_TAG_typedef, name: "Pcg128Random", scope: !14, file: !14, line: 18, baseType: !15, align: 16)
!258 = !DICompositeType(tag: DW_TAG_structure_type, name: "char[]", size: 128, align: 64, elements: !259, identifier: "char[]")
!259 = !{!260, !262}
!260 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !258, baseType: !261, size: 64, align: 64)
!261 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "char*", baseType: !87, size: 64, align: 64, dwarfAddressSpace: 0)
!262 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !258, baseType: !263, size: 64, align: 64, offset: 64)
!263 = !DIDerivedType(tag: DW_TAG_typedef, name: "usz", baseType: !6)
!264 = !DILocation(line: 21, column: 1, scope: !253)
!265 = !DILocalVariable(name: "self", arg: 1, scope: !253, file: !14, line: 20, type: !256)
!266 = !DILocation(line: 20, column: 32, scope: !253)
!267 = !DILocalVariable(name: "input", arg: 2, scope: !253, file: !14, line: 20, type: !258)
!268 = !DILocation(line: 20, column: 46, scope: !253)
!269 = !DILocation(line: 22, column: 3, scope: !253)
!270 = !DILocalVariable(name: "return_value", scope: !271, file: !14, line: 10, type: !15, align: 16)
!271 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !52, file: !52, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!272 = !DILocation(line: 10, column: 8, scope: !271, inlinedAt: !273)
!273 = !DILocation(line: 22, column: 11, scope: !253)
!274 = !DILocation(line: 11, column: 2, scope: !271, inlinedAt: !273)
!275 = !DILocation(line: 12, column: 9, scope: !271, inlinedAt: !273)
!276 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Pcg128Random.next_long", scope: !14, file: !14, line: 26, type: !277, scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!277 = !DISubroutineType(types: !278)
!278 = !{!6, !256}
!279 = !DILocation(line: 27, column: 1, scope: !276)
!280 = !DILocalVariable(name: "self", arg: 1, scope: !276, file: !14, line: 26, type: !256)
!281 = !DILocation(line: 26, column: 33, scope: !276)
!282 = !DILocalVariable(name: "s", scope: !276, file: !14, line: 29, type: !283, align: 8)
!283 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint128*", baseType: !15, size: 64, align: 64, dwarfAddressSpace: 0)
!284 = !DILocation(line: 29, column: 11, scope: !276)
!285 = !DILocation(line: 29, column: 25, scope: !276)
!286 = !DILocalVariable(name: "xor", scope: !276, file: !14, line: 30, type: !15, align: 16)
!287 = !DILocation(line: 30, column: 10, scope: !276)
!288 = !DILocation(line: 30, column: 17, scope: !276)
!289 = !DILocation(line: 30, column: 22, scope: !276)
!290 = !DILocation(line: 30, column: 21, scope: !276)
!291 = !DILocation(line: 30, column: 16, scope: !276)
!292 = !DILocalVariable(name: "rot", scope: !276, file: !14, line: 31, type: !87, align: 1)
!293 = !DILocation(line: 31, column: 7, scope: !276)
!294 = !DILocation(line: 31, column: 21, scope: !276)
!295 = !DILocation(line: 31, column: 14, scope: !276)
!296 = !DILocation(line: 32, column: 3, scope: !276)
!297 = !DILocation(line: 32, column: 8, scope: !276)
!298 = !DILocation(line: 32, column: 7, scope: !276)
!299 = !DILocation(line: 33, column: 18, scope: !276)
!300 = !DILocation(line: 33, column: 11, scope: !276)
!301 = !DILocation(line: 33, column: 42, scope: !276)
!302 = !DILocation(line: 147, column: 53, scope: !303, inlinedAt: !300)
!303 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !159, file: !159, line: 147, scopeLine: 147, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!304 = !DILocation(line: 147, column: 59, scope: !303, inlinedAt: !300)
!305 = !DILocation(line: 147, column: 65, scope: !303, inlinedAt: !300)
!306 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Pcg128Random.next_bytes", scope: !14, file: !14, line: 39, type: !254, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!307 = !DILocation(line: 39, column: 66, scope: !306)
!308 = !DILocalVariable(name: "self", arg: 1, scope: !306, file: !14, line: 39, type: !256)
!309 = !DILocation(line: 39, column: 33, scope: !306)
!310 = !DILocalVariable(name: "bytes", arg: 2, scope: !306, file: !14, line: 39, type: !258)
!311 = !DILocation(line: 39, column: 47, scope: !306)
!312 = !DILocation(line: 37, column: 11, scope: !313)
!313 = distinct !DILexicalBlock(scope: !306, file: !14, line: 39, column: 66)
!314 = !DILocalVariable(name: "len", scope: !315, file: !14, line: 146, type: !263, align: 8)
!315 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!316 = !DILocation(line: 146, column: 6, scope: !315, inlinedAt: !307)
!317 = !DILocation(line: 146, column: 12, scope: !315, inlinedAt: !307)
!318 = !DILocation(line: 148, column: 2, scope: !315, inlinedAt: !307)
!319 = !DILocation(line: 148, column: 9, scope: !320, inlinedAt: !307)
!320 = distinct !DILexicalBlock(scope: !315, file: !2, line: 148, column: 2)
!321 = !DILocalVariable(name: "value", scope: !322, file: !14, line: 150, type: !6, align: 8)
!322 = distinct !DILexicalBlock(scope: !320, file: !2, line: 149, column: 2)
!323 = !DILocation(line: 150, column: 7, scope: !322, inlinedAt: !307)
!324 = !DILocation(line: 39, column: 89, scope: !322, inlinedAt: !307)
!325 = !DILocation(line: 150, column: 15, scope: !322, inlinedAt: !307)
!326 = !DILocation(line: 151, column: 7, scope: !322, inlinedAt: !307)
!327 = !DILocation(line: 153, column: 33, scope: !328, inlinedAt: !307)
!328 = distinct !DILexicalBlock(scope: !322, file: !2, line: 152, column: 3)
!329 = !DILocation(line: 153, column: 4, scope: !328, inlinedAt: !307)
!330 = !DILocation(line: 153, column: 10, scope: !328, inlinedAt: !307)
!331 = !DILocation(line: 154, column: 10, scope: !328, inlinedAt: !307)
!332 = !DILocation(line: 156, column: 3, scope: !322, inlinedAt: !307)
!333 = !DILocation(line: 157, column: 3, scope: !322, inlinedAt: !307)
!334 = !DILocation(line: 158, column: 11, scope: !322, inlinedAt: !307)
!335 = !DILocation(line: 158, column: 17, scope: !322, inlinedAt: !307)
!336 = !DILocation(line: 164, column: 33, scope: !337, inlinedAt: !339)
!337 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!338 = !DIFile(filename: "builtin.c3", directory: "/usr/local/lib/c3/std/core")
!339 = !DILocation(line: 160, column: 2, scope: !315, inlinedAt: !307)
!340 = !DILocation(line: 164, column: 2, scope: !337, inlinedAt: !339)
!341 = !DILocation(line: 166, column: 2, scope: !337, inlinedAt: !339)
!342 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Pcg128Random.next_int128", scope: !14, file: !14, line: 40, type: !343, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!343 = !DISubroutineType(types: !344)
!344 = !{!15, !256}
!345 = !DILocation(line: 40, column: 56, scope: !342)
!346 = !DILocalVariable(name: "self", arg: 1, scope: !342, file: !14, line: 40, type: !256)
!347 = !DILocation(line: 40, column: 37, scope: !342)
!348 = !DILocation(line: 40, column: 72, scope: !349, inlinedAt: !345)
!349 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!350 = !DILocation(line: 138, column: 46, scope: !349, inlinedAt: !345)
!351 = !DILocation(line: 138, column: 72, scope: !349, inlinedAt: !345)
!352 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Pcg128Random.next_int", scope: !14, file: !14, line: 41, type: !353, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!353 = !DISubroutineType(types: !354)
!354 = !{!20, !256}
!355 = !DILocation(line: 41, column: 50, scope: !352)
!356 = !DILocalVariable(name: "self", arg: 1, scope: !352, file: !14, line: 41, type: !256)
!357 = !DILocation(line: 41, column: 31, scope: !352)
!358 = !DILocation(line: 41, column: 56, scope: !352)
!359 = !DILocation(line: 41, column: 51, scope: !352)
!360 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Pcg128Random.next_short", scope: !14, file: !14, line: 42, type: !361, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!361 = !DISubroutineType(types: !362)
!362 = !{!23, !256}
!363 = !DILocation(line: 42, column: 54, scope: !360)
!364 = !DILocalVariable(name: "self", arg: 1, scope: !360, file: !14, line: 42, type: !256)
!365 = !DILocation(line: 42, column: 35, scope: !360)
!366 = !DILocation(line: 42, column: 62, scope: !360)
!367 = !DILocation(line: 42, column: 55, scope: !360)
!368 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Pcg128Random.next_byte", scope: !14, file: !14, line: 43, type: !369, scopeLine: 43, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!369 = !DISubroutineType(types: !370)
!370 = !{!87, !256}
!371 = !DILocation(line: 43, column: 51, scope: !368)
!372 = !DILocalVariable(name: "self", arg: 1, scope: !368, file: !14, line: 43, type: !256)
!373 = !DILocation(line: 43, column: 32, scope: !368)
!374 = !DILocation(line: 43, column: 57, scope: !368)
!375 = !DILocation(line: 43, column: 52, scope: !368)
!376 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Pcg64Random.set_seed", scope: !14, file: !14, line: 49, type: !377, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!377 = !DISubroutineType(types: !378)
!378 = !{null, !379, !258}
!379 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Pcg64Random*", baseType: !380, size: 64, align: 64, dwarfAddressSpace: 0)
!380 = !DIDerivedType(tag: DW_TAG_typedef, name: "Pcg64Random", scope: !14, file: !14, line: 47, baseType: !6, align: 8)
!381 = !DILocation(line: 50, column: 1, scope: !376)
!382 = !DILocalVariable(name: "self", arg: 1, scope: !376, file: !14, line: 49, type: !379)
!383 = !DILocation(line: 49, column: 30, scope: !376)
!384 = !DILocalVariable(name: "input", arg: 2, scope: !376, file: !14, line: 49, type: !258)
!385 = !DILocation(line: 49, column: 44, scope: !376)
!386 = !DILocation(line: 51, column: 3, scope: !376)
!387 = !DILocalVariable(name: "return_value", scope: !388, file: !14, line: 10, type: !6, align: 8)
!388 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !52, file: !52, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!389 = !DILocation(line: 10, column: 8, scope: !388, inlinedAt: !390)
!390 = !DILocation(line: 51, column: 11, scope: !376)
!391 = !DILocation(line: 11, column: 2, scope: !388, inlinedAt: !390)
!392 = !DILocation(line: 12, column: 9, scope: !388, inlinedAt: !390)
!393 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Pcg64Random.next_int", scope: !14, file: !14, line: 54, type: !394, scopeLine: 54, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!394 = !DISubroutineType(types: !395)
!395 = !{!20, !379}
!396 = !DILocation(line: 55, column: 1, scope: !393)
!397 = !DILocalVariable(name: "self", arg: 1, scope: !393, file: !14, line: 54, type: !379)
!398 = !DILocation(line: 54, column: 30, scope: !393)
!399 = !DILocalVariable(name: "s", scope: !393, file: !14, line: 57, type: !400, align: 8)
!400 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ulong*", baseType: !6, size: 64, align: 64, dwarfAddressSpace: 0)
!401 = !DILocation(line: 57, column: 9, scope: !393)
!402 = !DILocation(line: 57, column: 21, scope: !393)
!403 = !DILocalVariable(name: "xor", scope: !393, file: !14, line: 58, type: !6, align: 8)
!404 = !DILocation(line: 58, column: 8, scope: !393)
!405 = !DILocation(line: 58, column: 15, scope: !393)
!406 = !DILocation(line: 58, column: 20, scope: !393)
!407 = !DILocation(line: 58, column: 19, scope: !393)
!408 = !DILocation(line: 58, column: 14, scope: !393)
!409 = !DILocalVariable(name: "rot", scope: !393, file: !14, line: 59, type: !87, align: 1)
!410 = !DILocation(line: 59, column: 7, scope: !393)
!411 = !DILocation(line: 59, column: 21, scope: !393)
!412 = !DILocation(line: 59, column: 14, scope: !393)
!413 = !DILocation(line: 60, column: 3, scope: !393)
!414 = !DILocation(line: 60, column: 8, scope: !393)
!415 = !DILocation(line: 60, column: 7, scope: !393)
!416 = !DILocation(line: 61, column: 17, scope: !393)
!417 = !DILocation(line: 61, column: 11, scope: !393)
!418 = !DILocation(line: 61, column: 41, scope: !393)
!419 = !DILocation(line: 99, column: 50, scope: !420, inlinedAt: !417)
!420 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !159, file: !159, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!421 = !DILocation(line: 99, column: 56, scope: !420, inlinedAt: !417)
!422 = !DILocation(line: 99, column: 62, scope: !420, inlinedAt: !417)
!423 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Pcg64Random.next_bytes", scope: !14, file: !14, line: 67, type: !377, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!424 = !DILocation(line: 67, column: 65, scope: !423)
!425 = !DILocalVariable(name: "self", arg: 1, scope: !423, file: !14, line: 67, type: !379)
!426 = !DILocation(line: 67, column: 32, scope: !423)
!427 = !DILocalVariable(name: "bytes", arg: 2, scope: !423, file: !14, line: 67, type: !258)
!428 = !DILocation(line: 67, column: 46, scope: !423)
!429 = !DILocation(line: 65, column: 11, scope: !430)
!430 = distinct !DILexicalBlock(scope: !423, file: !14, line: 67, column: 65)
!431 = !DILocalVariable(name: "len", scope: !432, file: !14, line: 146, type: !263, align: 8)
!432 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!433 = !DILocation(line: 146, column: 6, scope: !432, inlinedAt: !424)
!434 = !DILocation(line: 146, column: 12, scope: !432, inlinedAt: !424)
!435 = !DILocation(line: 148, column: 2, scope: !432, inlinedAt: !424)
!436 = !DILocation(line: 148, column: 9, scope: !437, inlinedAt: !424)
!437 = distinct !DILexicalBlock(scope: !432, file: !2, line: 148, column: 2)
!438 = !DILocalVariable(name: "value", scope: !439, file: !14, line: 150, type: !20, align: 4)
!439 = distinct !DILexicalBlock(scope: !437, file: !2, line: 149, column: 2)
!440 = !DILocation(line: 150, column: 7, scope: !439, inlinedAt: !424)
!441 = !DILocation(line: 67, column: 88, scope: !439, inlinedAt: !424)
!442 = !DILocation(line: 150, column: 15, scope: !439, inlinedAt: !424)
!443 = !DILocation(line: 151, column: 7, scope: !439, inlinedAt: !424)
!444 = !DILocation(line: 153, column: 33, scope: !445, inlinedAt: !424)
!445 = distinct !DILexicalBlock(scope: !439, file: !2, line: 152, column: 3)
!446 = !DILocation(line: 153, column: 4, scope: !445, inlinedAt: !424)
!447 = !DILocation(line: 153, column: 10, scope: !445, inlinedAt: !424)
!448 = !DILocation(line: 154, column: 10, scope: !445, inlinedAt: !424)
!449 = !DILocation(line: 156, column: 3, scope: !439, inlinedAt: !424)
!450 = !DILocation(line: 157, column: 3, scope: !439, inlinedAt: !424)
!451 = !DILocation(line: 158, column: 11, scope: !439, inlinedAt: !424)
!452 = !DILocation(line: 158, column: 17, scope: !439, inlinedAt: !424)
!453 = !DILocation(line: 164, column: 33, scope: !454, inlinedAt: !455)
!454 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!455 = !DILocation(line: 160, column: 2, scope: !432, inlinedAt: !424)
!456 = !DILocation(line: 164, column: 2, scope: !454, inlinedAt: !455)
!457 = !DILocation(line: 166, column: 2, scope: !454, inlinedAt: !455)
!458 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Pcg64Random.next_int128", scope: !14, file: !14, line: 68, type: !459, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!459 = !DISubroutineType(types: !460)
!460 = !{!15, !379}
!461 = !DILocation(line: 68, column: 55, scope: !458)
!462 = !DILocalVariable(name: "self", arg: 1, scope: !458, file: !14, line: 68, type: !379)
!463 = !DILocation(line: 68, column: 36, scope: !458)
!464 = !DILocation(line: 68, column: 71, scope: !465, inlinedAt: !461)
!465 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!466 = !DILocation(line: 138, column: 46, scope: !465, inlinedAt: !461)
!467 = !DILocation(line: 138, column: 72, scope: !465, inlinedAt: !461)
!468 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Pcg64Random.next_long", scope: !14, file: !14, line: 69, type: !469, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!469 = !DISubroutineType(types: !470)
!470 = !{!6, !379}
!471 = !DILocation(line: 69, column: 51, scope: !468)
!472 = !DILocalVariable(name: "self", arg: 1, scope: !468, file: !14, line: 69, type: !379)
!473 = !DILocation(line: 69, column: 32, scope: !468)
!474 = !DILocation(line: 69, column: 64, scope: !475, inlinedAt: !471)
!475 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!476 = !DILocation(line: 139, column: 41, scope: !475, inlinedAt: !471)
!477 = !DILocation(line: 139, column: 65, scope: !475, inlinedAt: !471)
!478 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Pcg64Random.next_short", scope: !14, file: !14, line: 70, type: !479, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!479 = !DISubroutineType(types: !480)
!480 = !{!23, !379}
!481 = !DILocation(line: 70, column: 53, scope: !478)
!482 = !DILocalVariable(name: "self", arg: 1, scope: !478, file: !14, line: 70, type: !379)
!483 = !DILocation(line: 70, column: 34, scope: !478)
!484 = !DILocation(line: 70, column: 61, scope: !478)
!485 = !DILocation(line: 70, column: 54, scope: !478)
!486 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Pcg64Random.next_byte", scope: !14, file: !14, line: 71, type: !487, scopeLine: 71, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!487 = !DISubroutineType(types: !488)
!488 = !{!87, !379}
!489 = !DILocation(line: 71, column: 50, scope: !486)
!490 = !DILocalVariable(name: "self", arg: 1, scope: !486, file: !14, line: 71, type: !379)
!491 = !DILocation(line: 71, column: 31, scope: !486)
!492 = !DILocation(line: 71, column: 56, scope: !486)
!493 = !DILocation(line: 71, column: 51, scope: !486)
!494 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Pcg32Random.set_seed", scope: !14, file: !14, line: 78, type: !495, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!495 = !DISubroutineType(types: !496)
!496 = !{null, !497, !258}
!497 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Pcg32Random*", baseType: !498, size: 64, align: 64, dwarfAddressSpace: 0)
!498 = !DIDerivedType(tag: DW_TAG_typedef, name: "Pcg32Random", scope: !14, file: !14, line: 76, baseType: !20, align: 4)
!499 = !DILocation(line: 79, column: 1, scope: !494)
!500 = !DILocalVariable(name: "self", arg: 1, scope: !494, file: !14, line: 78, type: !497)
!501 = !DILocation(line: 78, column: 30, scope: !494)
!502 = !DILocalVariable(name: "input", arg: 2, scope: !494, file: !14, line: 78, type: !258)
!503 = !DILocation(line: 78, column: 44, scope: !494)
!504 = !DILocation(line: 80, column: 3, scope: !494)
!505 = !DILocalVariable(name: "return_value", scope: !506, file: !14, line: 10, type: !20, align: 4)
!506 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !52, file: !52, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!507 = !DILocation(line: 10, column: 8, scope: !506, inlinedAt: !508)
!508 = !DILocation(line: 80, column: 11, scope: !494)
!509 = !DILocation(line: 11, column: 2, scope: !506, inlinedAt: !508)
!510 = !DILocation(line: 12, column: 9, scope: !506, inlinedAt: !508)
!511 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Pcg32Random.next_short", scope: !14, file: !14, line: 83, type: !512, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!512 = !DISubroutineType(types: !513)
!513 = !{!23, !497}
!514 = !DILocation(line: 84, column: 1, scope: !511)
!515 = !DILocalVariable(name: "self", arg: 1, scope: !511, file: !14, line: 83, type: !497)
!516 = !DILocation(line: 83, column: 34, scope: !511)
!517 = !DILocalVariable(name: "s", scope: !511, file: !14, line: 86, type: !518, align: 8)
!518 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint*", baseType: !20, size: 64, align: 64, dwarfAddressSpace: 0)
!519 = !DILocation(line: 86, column: 8, scope: !511)
!520 = !DILocation(line: 86, column: 19, scope: !511)
!521 = !DILocalVariable(name: "xor", scope: !511, file: !14, line: 87, type: !20, align: 4)
!522 = !DILocation(line: 87, column: 7, scope: !511)
!523 = !DILocation(line: 87, column: 14, scope: !511)
!524 = !DILocation(line: 87, column: 19, scope: !511)
!525 = !DILocation(line: 87, column: 18, scope: !511)
!526 = !DILocation(line: 87, column: 13, scope: !511)
!527 = !DILocalVariable(name: "rot", scope: !511, file: !14, line: 88, type: !87, align: 1)
!528 = !DILocation(line: 88, column: 7, scope: !511)
!529 = !DILocation(line: 88, column: 21, scope: !511)
!530 = !DILocation(line: 88, column: 14, scope: !511)
!531 = !DILocation(line: 89, column: 3, scope: !511)
!532 = !DILocation(line: 89, column: 8, scope: !511)
!533 = !DILocation(line: 89, column: 7, scope: !511)
!534 = !DILocation(line: 90, column: 19, scope: !511)
!535 = !DILocation(line: 90, column: 11, scope: !511)
!536 = !DILocation(line: 90, column: 43, scope: !511)
!537 = !DILocation(line: 115, column: 56, scope: !538, inlinedAt: !535)
!538 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !159, file: !159, line: 115, scopeLine: 115, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!539 = !DILocation(line: 115, column: 62, scope: !538, inlinedAt: !535)
!540 = !DILocation(line: 115, column: 68, scope: !538, inlinedAt: !535)
!541 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Pcg32Random.next_bytes", scope: !14, file: !14, line: 96, type: !495, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!542 = !DILocation(line: 96, column: 65, scope: !541)
!543 = !DILocalVariable(name: "self", arg: 1, scope: !541, file: !14, line: 96, type: !497)
!544 = !DILocation(line: 96, column: 32, scope: !541)
!545 = !DILocalVariable(name: "bytes", arg: 2, scope: !541, file: !14, line: 96, type: !258)
!546 = !DILocation(line: 96, column: 46, scope: !541)
!547 = !DILocation(line: 94, column: 11, scope: !548)
!548 = distinct !DILexicalBlock(scope: !541, file: !14, line: 96, column: 65)
!549 = !DILocalVariable(name: "len", scope: !550, file: !14, line: 146, type: !263, align: 8)
!550 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!551 = !DILocation(line: 146, column: 6, scope: !550, inlinedAt: !542)
!552 = !DILocation(line: 146, column: 12, scope: !550, inlinedAt: !542)
!553 = !DILocation(line: 148, column: 2, scope: !550, inlinedAt: !542)
!554 = !DILocation(line: 148, column: 9, scope: !555, inlinedAt: !542)
!555 = distinct !DILexicalBlock(scope: !550, file: !2, line: 148, column: 2)
!556 = !DILocalVariable(name: "value", scope: !557, file: !14, line: 150, type: !23, align: 2)
!557 = distinct !DILexicalBlock(scope: !555, file: !2, line: 149, column: 2)
!558 = !DILocation(line: 150, column: 7, scope: !557, inlinedAt: !542)
!559 = !DILocation(line: 96, column: 88, scope: !557, inlinedAt: !542)
!560 = !DILocation(line: 150, column: 15, scope: !557, inlinedAt: !542)
!561 = !DILocation(line: 151, column: 7, scope: !557, inlinedAt: !542)
!562 = !DILocation(line: 153, column: 33, scope: !563, inlinedAt: !542)
!563 = distinct !DILexicalBlock(scope: !557, file: !2, line: 152, column: 3)
!564 = !DILocation(line: 153, column: 4, scope: !563, inlinedAt: !542)
!565 = !DILocation(line: 153, column: 10, scope: !563, inlinedAt: !542)
!566 = !DILocation(line: 154, column: 10, scope: !563, inlinedAt: !542)
!567 = !DILocation(line: 156, column: 3, scope: !557, inlinedAt: !542)
!568 = !DILocation(line: 157, column: 3, scope: !557, inlinedAt: !542)
!569 = !DILocation(line: 158, column: 11, scope: !557, inlinedAt: !542)
!570 = !DILocation(line: 158, column: 17, scope: !557, inlinedAt: !542)
!571 = !DILocation(line: 164, column: 33, scope: !572, inlinedAt: !573)
!572 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!573 = !DILocation(line: 160, column: 2, scope: !550, inlinedAt: !542)
!574 = !DILocation(line: 164, column: 2, scope: !572, inlinedAt: !573)
!575 = !DILocation(line: 166, column: 2, scope: !572, inlinedAt: !573)
!576 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Pcg32Random.next_int128", scope: !14, file: !14, line: 97, type: !577, scopeLine: 97, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!577 = !DISubroutineType(types: !578)
!578 = !{!15, !497}
!579 = !DILocation(line: 97, column: 55, scope: !576)
!580 = !DILocalVariable(name: "self", arg: 1, scope: !576, file: !14, line: 97, type: !497)
!581 = !DILocation(line: 97, column: 36, scope: !576)
!582 = !DILocation(line: 97, column: 71, scope: !583, inlinedAt: !579)
!583 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!584 = !DILocation(line: 138, column: 46, scope: !583, inlinedAt: !579)
!585 = !DILocation(line: 138, column: 72, scope: !583, inlinedAt: !579)
!586 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Pcg32Random.next_long", scope: !14, file: !14, line: 98, type: !587, scopeLine: 98, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!587 = !DISubroutineType(types: !588)
!588 = !{!6, !497}
!589 = !DILocation(line: 98, column: 51, scope: !586)
!590 = !DILocalVariable(name: "self", arg: 1, scope: !586, file: !14, line: 98, type: !497)
!591 = !DILocation(line: 98, column: 32, scope: !586)
!592 = !DILocation(line: 98, column: 64, scope: !593, inlinedAt: !589)
!593 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!594 = !DILocation(line: 139, column: 41, scope: !593, inlinedAt: !589)
!595 = !DILocation(line: 139, column: 65, scope: !593, inlinedAt: !589)
!596 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Pcg32Random.next_int", scope: !14, file: !14, line: 99, type: !597, scopeLine: 99, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!597 = !DISubroutineType(types: !598)
!598 = !{!20, !497}
!599 = !DILocation(line: 99, column: 49, scope: !596)
!600 = !DILocalVariable(name: "self", arg: 1, scope: !596, file: !14, line: 99, type: !497)
!601 = !DILocation(line: 99, column: 30, scope: !596)
!602 = !DILocation(line: 99, column: 63, scope: !603, inlinedAt: !599)
!603 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!604 = !DILocation(line: 140, column: 41, scope: !603, inlinedAt: !599)
!605 = !DILocation(line: 140, column: 64, scope: !603, inlinedAt: !599)
!606 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Pcg32Random.next_byte", scope: !14, file: !14, line: 100, type: !607, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!607 = !DISubroutineType(types: !608)
!608 = !{!87, !497}
!609 = !DILocation(line: 100, column: 50, scope: !606)
!610 = !DILocalVariable(name: "self", arg: 1, scope: !606, file: !14, line: 100, type: !497)
!611 = !DILocation(line: 100, column: 31, scope: !606)
!612 = !DILocation(line: 100, column: 56, scope: !606)
!613 = !DILocation(line: 100, column: 51, scope: !606)
!614 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Pcg16Random.set_seed", scope: !14, file: !14, line: 106, type: !615, scopeLine: 106, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!615 = !DISubroutineType(types: !616)
!616 = !{null, !617, !258}
!617 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Pcg16Random*", baseType: !618, size: 64, align: 64, dwarfAddressSpace: 0)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "Pcg16Random", scope: !14, file: !14, line: 104, baseType: !23, align: 2)
!619 = !DILocation(line: 107, column: 1, scope: !614)
!620 = !DILocalVariable(name: "self", arg: 1, scope: !614, file: !14, line: 106, type: !617)
!621 = !DILocation(line: 106, column: 30, scope: !614)
!622 = !DILocalVariable(name: "input", arg: 2, scope: !614, file: !14, line: 106, type: !258)
!623 = !DILocation(line: 106, column: 44, scope: !614)
!624 = !DILocation(line: 108, column: 3, scope: !614)
!625 = !DILocalVariable(name: "return_value", scope: !626, file: !14, line: 10, type: !23, align: 2)
!626 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !52, file: !52, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!627 = !DILocation(line: 10, column: 8, scope: !626, inlinedAt: !628)
!628 = !DILocation(line: 108, column: 11, scope: !614)
!629 = !DILocation(line: 11, column: 2, scope: !626, inlinedAt: !628)
!630 = !DILocation(line: 12, column: 9, scope: !626, inlinedAt: !628)
!631 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Pcg16Random.next_byte", scope: !14, file: !14, line: 111, type: !632, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!632 = !DISubroutineType(types: !633)
!633 = !{!87, !617}
!634 = !DILocation(line: 112, column: 1, scope: !631)
!635 = !DILocalVariable(name: "self", arg: 1, scope: !631, file: !14, line: 111, type: !617)
!636 = !DILocation(line: 111, column: 31, scope: !631)
!637 = !DILocalVariable(name: "s", scope: !631, file: !14, line: 114, type: !638, align: 8)
!638 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ushort*", baseType: !23, size: 64, align: 64, dwarfAddressSpace: 0)
!639 = !DILocation(line: 114, column: 10, scope: !631)
!640 = !DILocation(line: 114, column: 23, scope: !631)
!641 = !DILocalVariable(name: "xor", scope: !631, file: !14, line: 115, type: !23, align: 2)
!642 = !DILocation(line: 115, column: 9, scope: !631)
!643 = !DILocation(line: 115, column: 16, scope: !631)
!644 = !DILocation(line: 115, column: 21, scope: !631)
!645 = !DILocation(line: 115, column: 20, scope: !631)
!646 = !DILocation(line: 115, column: 15, scope: !631)
!647 = !DILocalVariable(name: "rot", scope: !631, file: !14, line: 116, type: !87, align: 1)
!648 = !DILocation(line: 116, column: 7, scope: !631)
!649 = !DILocation(line: 116, column: 21, scope: !631)
!650 = !DILocation(line: 116, column: 14, scope: !631)
!651 = !DILocation(line: 117, column: 3, scope: !631)
!652 = !DILocation(line: 117, column: 8, scope: !631)
!653 = !DILocation(line: 117, column: 7, scope: !631)
!654 = !DILocation(line: 118, column: 17, scope: !631)
!655 = !DILocation(line: 118, column: 11, scope: !631)
!656 = !DILocation(line: 131, column: 50, scope: !657, inlinedAt: !655)
!657 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !159, file: !159, line: 131, scopeLine: 131, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!658 = !DILocation(line: 131, column: 56, scope: !657, inlinedAt: !655)
!659 = !DILocation(line: 131, column: 62, scope: !657, inlinedAt: !655)
!660 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Pcg16Random.next_bytes", scope: !14, file: !14, line: 121, type: !615, scopeLine: 121, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!661 = !DILocation(line: 121, column: 65, scope: !660)
!662 = !DILocalVariable(name: "self", arg: 1, scope: !660, file: !14, line: 121, type: !617)
!663 = !DILocation(line: 121, column: 32, scope: !660)
!664 = !DILocalVariable(name: "bytes", arg: 2, scope: !660, file: !14, line: 121, type: !258)
!665 = !DILocation(line: 121, column: 46, scope: !660)
!666 = !DILocalVariable(name: "len", scope: !667, file: !14, line: 146, type: !263, align: 8)
!667 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!668 = !DILocation(line: 146, column: 6, scope: !667, inlinedAt: !661)
!669 = !DILocation(line: 146, column: 12, scope: !667, inlinedAt: !661)
!670 = !DILocation(line: 148, column: 2, scope: !667, inlinedAt: !661)
!671 = !DILocation(line: 148, column: 9, scope: !672, inlinedAt: !661)
!672 = distinct !DILexicalBlock(scope: !667, file: !2, line: 148, column: 2)
!673 = !DILocalVariable(name: "value", scope: !674, file: !14, line: 150, type: !87, align: 1)
!674 = distinct !DILexicalBlock(scope: !672, file: !2, line: 149, column: 2)
!675 = !DILocation(line: 150, column: 7, scope: !674, inlinedAt: !661)
!676 = !DILocation(line: 121, column: 88, scope: !674, inlinedAt: !661)
!677 = !DILocation(line: 150, column: 15, scope: !674, inlinedAt: !661)
!678 = !DILocation(line: 151, column: 7, scope: !674, inlinedAt: !661)
!679 = !DILocation(line: 153, column: 33, scope: !680, inlinedAt: !661)
!680 = distinct !DILexicalBlock(scope: !674, file: !2, line: 152, column: 3)
!681 = !DILocation(line: 153, column: 4, scope: !680, inlinedAt: !661)
!682 = !DILocation(line: 153, column: 10, scope: !680, inlinedAt: !661)
!683 = !DILocation(line: 154, column: 10, scope: !680, inlinedAt: !661)
!684 = !DILocation(line: 156, column: 3, scope: !674, inlinedAt: !661)
!685 = !DILocation(line: 157, column: 3, scope: !674, inlinedAt: !661)
!686 = !DILocation(line: 158, column: 11, scope: !674, inlinedAt: !661)
!687 = !DILocation(line: 158, column: 17, scope: !674, inlinedAt: !661)
!688 = !DILocation(line: 164, column: 33, scope: !689, inlinedAt: !690)
!689 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!690 = !DILocation(line: 160, column: 2, scope: !667, inlinedAt: !661)
!691 = !DILocation(line: 164, column: 2, scope: !689, inlinedAt: !690)
!692 = !DILocation(line: 166, column: 2, scope: !689, inlinedAt: !690)
!693 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Pcg16Random.next_int128", scope: !14, file: !14, line: 122, type: !694, scopeLine: 122, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!694 = !DISubroutineType(types: !695)
!695 = !{!15, !617}
!696 = !DILocation(line: 122, column: 55, scope: !693)
!697 = !DILocalVariable(name: "self", arg: 1, scope: !693, file: !14, line: 122, type: !617)
!698 = !DILocation(line: 122, column: 36, scope: !693)
!699 = !DILocation(line: 122, column: 71, scope: !700, inlinedAt: !696)
!700 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!701 = !DILocation(line: 138, column: 46, scope: !700, inlinedAt: !696)
!702 = !DILocation(line: 138, column: 72, scope: !700, inlinedAt: !696)
!703 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Pcg16Random.next_long", scope: !14, file: !14, line: 123, type: !704, scopeLine: 123, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!704 = !DISubroutineType(types: !705)
!705 = !{!6, !617}
!706 = !DILocation(line: 123, column: 51, scope: !703)
!707 = !DILocalVariable(name: "self", arg: 1, scope: !703, file: !14, line: 123, type: !617)
!708 = !DILocation(line: 123, column: 32, scope: !703)
!709 = !DILocation(line: 123, column: 64, scope: !710, inlinedAt: !706)
!710 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!711 = !DILocation(line: 139, column: 41, scope: !710, inlinedAt: !706)
!712 = !DILocation(line: 139, column: 65, scope: !710, inlinedAt: !706)
!713 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Pcg16Random.next_int", scope: !14, file: !14, line: 124, type: !714, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!714 = !DISubroutineType(types: !715)
!715 = !{!20, !617}
!716 = !DILocation(line: 124, column: 49, scope: !713)
!717 = !DILocalVariable(name: "self", arg: 1, scope: !713, file: !14, line: 124, type: !617)
!718 = !DILocation(line: 124, column: 30, scope: !713)
!719 = !DILocation(line: 124, column: 63, scope: !720, inlinedAt: !716)
!720 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!721 = !DILocation(line: 140, column: 41, scope: !720, inlinedAt: !716)
!722 = !DILocation(line: 140, column: 64, scope: !720, inlinedAt: !716)
!723 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Pcg16Random.next_short", scope: !14, file: !14, line: 125, type: !724, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!724 = !DISubroutineType(types: !725)
!725 = !{!23, !617}
!726 = !DILocation(line: 125, column: 53, scope: !723)
!727 = !DILocalVariable(name: "self", arg: 1, scope: !723, file: !14, line: 125, type: !617)
!728 = !DILocation(line: 125, column: 34, scope: !723)
!729 = !DILocation(line: 125, column: 68, scope: !730, inlinedAt: !726)
!730 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !2, file: !2, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!731 = !DILocation(line: 141, column: 44, scope: !730, inlinedAt: !726)
!732 = !DILocation(line: 141, column: 68, scope: !730, inlinedAt: !726)
!733 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Mcg128Random.set_seed", scope: !43, file: !43, line: 12, type: !734, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!734 = !DISubroutineType(types: !735)
!735 = !{null, !736, !258}
!736 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Mcg128Random*", baseType: !737, size: 64, align: 64, dwarfAddressSpace: 0)
!737 = !DIDerivedType(tag: DW_TAG_typedef, name: "Mcg128Random", scope: !43, file: !43, line: 10, baseType: !15, align: 16)
!738 = !DILocation(line: 13, column: 1, scope: !733)
!739 = !DILocalVariable(name: "self", arg: 1, scope: !733, file: !43, line: 12, type: !736)
!740 = !DILocation(line: 12, column: 31, scope: !733)
!741 = !DILocalVariable(name: "seed", arg: 2, scope: !733, file: !43, line: 12, type: !258)
!742 = !DILocation(line: 12, column: 45, scope: !733)
!743 = !DILocation(line: 14, column: 3, scope: !733)
!744 = !DILocalVariable(name: "return_value", scope: !745, file: !43, line: 10, type: !15, align: 16)
!745 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !52, file: !52, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!746 = !DILocation(line: 10, column: 8, scope: !745, inlinedAt: !747)
!747 = !DILocation(line: 14, column: 25, scope: !733)
!748 = !DILocation(line: 11, column: 2, scope: !745, inlinedAt: !747)
!749 = !DILocation(line: 12, column: 9, scope: !745, inlinedAt: !747)
!750 = !DILocation(line: 14, column: 11, scope: !733)
!751 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Mcg128Random.next_bytes", scope: !43, file: !43, line: 20, type: !734, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!752 = !DILocation(line: 21, column: 1, scope: !751)
!753 = !DILocalVariable(name: "self", arg: 1, scope: !751, file: !43, line: 20, type: !736)
!754 = !DILocation(line: 20, column: 33, scope: !751)
!755 = !DILocalVariable(name: "bytes", arg: 2, scope: !751, file: !43, line: 20, type: !258)
!756 = !DILocation(line: 20, column: 47, scope: !751)
!757 = !DILocation(line: 18, column: 11, scope: !758)
!758 = distinct !DILexicalBlock(scope: !751, file: !43, line: 21, column: 1)
!759 = !DILocalVariable(name: "len", scope: !760, file: !43, line: 146, type: !263, align: 8)
!760 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!761 = !DILocation(line: 146, column: 6, scope: !760, inlinedAt: !762)
!762 = !DILocation(line: 22, column: 2, scope: !751)
!763 = !DILocation(line: 146, column: 12, scope: !760, inlinedAt: !762)
!764 = !DILocation(line: 148, column: 2, scope: !760, inlinedAt: !762)
!765 = !DILocation(line: 148, column: 9, scope: !766, inlinedAt: !762)
!766 = distinct !DILexicalBlock(scope: !760, file: !2, line: 148, column: 2)
!767 = !DILocalVariable(name: "value", scope: !768, file: !43, line: 150, type: !6, align: 8)
!768 = distinct !DILexicalBlock(scope: !766, file: !2, line: 149, column: 2)
!769 = !DILocation(line: 150, column: 7, scope: !768, inlinedAt: !762)
!770 = !DILocation(line: 22, column: 25, scope: !768, inlinedAt: !762)
!771 = !DILocation(line: 150, column: 15, scope: !768, inlinedAt: !762)
!772 = !DILocation(line: 151, column: 7, scope: !768, inlinedAt: !762)
!773 = !DILocation(line: 153, column: 33, scope: !774, inlinedAt: !762)
!774 = distinct !DILexicalBlock(scope: !768, file: !2, line: 152, column: 3)
!775 = !DILocation(line: 153, column: 4, scope: !774, inlinedAt: !762)
!776 = !DILocation(line: 153, column: 10, scope: !774, inlinedAt: !762)
!777 = !DILocation(line: 154, column: 10, scope: !774, inlinedAt: !762)
!778 = !DILocation(line: 156, column: 3, scope: !768, inlinedAt: !762)
!779 = !DILocation(line: 157, column: 3, scope: !768, inlinedAt: !762)
!780 = !DILocation(line: 158, column: 11, scope: !768, inlinedAt: !762)
!781 = !DILocation(line: 158, column: 17, scope: !768, inlinedAt: !762)
!782 = !DILocation(line: 164, column: 33, scope: !783, inlinedAt: !784)
!783 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!784 = !DILocation(line: 160, column: 2, scope: !760, inlinedAt: !762)
!785 = !DILocation(line: 164, column: 2, scope: !783, inlinedAt: !784)
!786 = !DILocation(line: 166, column: 2, scope: !783, inlinedAt: !784)
!787 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Mcg128Random.next_long", scope: !43, file: !43, line: 25, type: !788, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!788 = !DISubroutineType(types: !789)
!789 = !{!6, !736}
!790 = !DILocation(line: 26, column: 1, scope: !787)
!791 = !DILocalVariable(name: "self", arg: 1, scope: !787, file: !43, line: 25, type: !736)
!792 = !DILocation(line: 25, column: 33, scope: !787)
!793 = !DILocalVariable(name: "s", scope: !787, file: !43, line: 27, type: !283, align: 8)
!794 = !DILocation(line: 27, column: 11, scope: !787)
!795 = !DILocation(line: 27, column: 25, scope: !787)
!796 = !DILocalVariable(name: "result", scope: !787, file: !43, line: 28, type: !6, align: 8)
!797 = !DILocation(line: 28, column: 8, scope: !787)
!798 = !DILocation(line: 28, column: 26, scope: !787)
!799 = !DILocation(line: 28, column: 18, scope: !787)
!800 = !DILocation(line: 29, column: 3, scope: !787)
!801 = !DILocation(line: 29, column: 2, scope: !787)
!802 = !DILocation(line: 30, column: 9, scope: !787)
!803 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Mcg128Random.next_int128", scope: !43, file: !43, line: 33, type: !804, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!804 = !DISubroutineType(types: !805)
!805 = !{!15, !736}
!806 = !DILocation(line: 33, column: 56, scope: !803)
!807 = !DILocalVariable(name: "self", arg: 1, scope: !803, file: !43, line: 33, type: !736)
!808 = !DILocation(line: 33, column: 37, scope: !803)
!809 = !DILocation(line: 33, column: 72, scope: !810, inlinedAt: !806)
!810 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!811 = !DILocation(line: 138, column: 46, scope: !810, inlinedAt: !806)
!812 = !DILocation(line: 138, column: 72, scope: !810, inlinedAt: !806)
!813 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Mcg128Random.next_int", scope: !43, file: !43, line: 34, type: !814, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!814 = !DISubroutineType(types: !815)
!815 = !{!20, !736}
!816 = !DILocation(line: 34, column: 50, scope: !813)
!817 = !DILocalVariable(name: "self", arg: 1, scope: !813, file: !43, line: 34, type: !736)
!818 = !DILocation(line: 34, column: 31, scope: !813)
!819 = !DILocation(line: 34, column: 56, scope: !813)
!820 = !DILocation(line: 34, column: 51, scope: !813)
!821 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Mcg128Random.next_short", scope: !43, file: !43, line: 35, type: !822, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!822 = !DISubroutineType(types: !823)
!823 = !{!23, !736}
!824 = !DILocation(line: 35, column: 54, scope: !821)
!825 = !DILocalVariable(name: "self", arg: 1, scope: !821, file: !43, line: 35, type: !736)
!826 = !DILocation(line: 35, column: 35, scope: !821)
!827 = !DILocation(line: 35, column: 62, scope: !821)
!828 = !DILocation(line: 35, column: 55, scope: !821)
!829 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Mcg128Random.next_byte", scope: !43, file: !43, line: 36, type: !830, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!830 = !DISubroutineType(types: !831)
!831 = !{!87, !736}
!832 = !DILocation(line: 36, column: 51, scope: !829)
!833 = !DILocalVariable(name: "self", arg: 1, scope: !829, file: !43, line: 36, type: !736)
!834 = !DILocation(line: 36, column: 32, scope: !829)
!835 = !DILocation(line: 36, column: 57, scope: !829)
!836 = !DILocation(line: 36, column: 52, scope: !829)
!837 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Mcg64Random.set_seed", scope: !43, file: !43, line: 45, type: !838, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!838 = !DISubroutineType(types: !839)
!839 = !{null, !840, !258}
!840 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Mcg64Random*", baseType: !841, size: 64, align: 64, dwarfAddressSpace: 0)
!841 = !DIDerivedType(tag: DW_TAG_typedef, name: "Mcg64Random", scope: !43, file: !43, line: 43, baseType: !6, align: 8)
!842 = !DILocation(line: 46, column: 1, scope: !837)
!843 = !DILocalVariable(name: "self", arg: 1, scope: !837, file: !43, line: 45, type: !840)
!844 = !DILocation(line: 45, column: 30, scope: !837)
!845 = !DILocalVariable(name: "seed", arg: 2, scope: !837, file: !43, line: 45, type: !258)
!846 = !DILocation(line: 45, column: 44, scope: !837)
!847 = !DILocation(line: 47, column: 3, scope: !837)
!848 = !DILocalVariable(name: "return_value", scope: !849, file: !43, line: 10, type: !6, align: 8)
!849 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !52, file: !52, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!850 = !DILocation(line: 10, column: 8, scope: !849, inlinedAt: !851)
!851 = !DILocation(line: 47, column: 11, scope: !837)
!852 = !DILocation(line: 11, column: 2, scope: !849, inlinedAt: !851)
!853 = !DILocation(line: 12, column: 9, scope: !849, inlinedAt: !851)
!854 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Mcg64Random.next_bytes", scope: !43, file: !43, line: 53, type: !838, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!855 = !DILocation(line: 54, column: 1, scope: !854)
!856 = !DILocalVariable(name: "self", arg: 1, scope: !854, file: !43, line: 53, type: !840)
!857 = !DILocation(line: 53, column: 32, scope: !854)
!858 = !DILocalVariable(name: "bytes", arg: 2, scope: !854, file: !43, line: 53, type: !258)
!859 = !DILocation(line: 53, column: 46, scope: !854)
!860 = !DILocation(line: 51, column: 11, scope: !861)
!861 = distinct !DILexicalBlock(scope: !854, file: !43, line: 54, column: 1)
!862 = !DILocalVariable(name: "len", scope: !863, file: !43, line: 146, type: !263, align: 8)
!863 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!864 = !DILocation(line: 146, column: 6, scope: !863, inlinedAt: !865)
!865 = !DILocation(line: 55, column: 2, scope: !854)
!866 = !DILocation(line: 146, column: 12, scope: !863, inlinedAt: !865)
!867 = !DILocation(line: 148, column: 2, scope: !863, inlinedAt: !865)
!868 = !DILocation(line: 148, column: 9, scope: !869, inlinedAt: !865)
!869 = distinct !DILexicalBlock(scope: !863, file: !2, line: 148, column: 2)
!870 = !DILocalVariable(name: "value", scope: !871, file: !43, line: 150, type: !20, align: 4)
!871 = distinct !DILexicalBlock(scope: !869, file: !2, line: 149, column: 2)
!872 = !DILocation(line: 150, column: 7, scope: !871, inlinedAt: !865)
!873 = !DILocation(line: 55, column: 25, scope: !871, inlinedAt: !865)
!874 = !DILocation(line: 150, column: 15, scope: !871, inlinedAt: !865)
!875 = !DILocation(line: 151, column: 7, scope: !871, inlinedAt: !865)
!876 = !DILocation(line: 153, column: 33, scope: !877, inlinedAt: !865)
!877 = distinct !DILexicalBlock(scope: !871, file: !2, line: 152, column: 3)
!878 = !DILocation(line: 153, column: 4, scope: !877, inlinedAt: !865)
!879 = !DILocation(line: 153, column: 10, scope: !877, inlinedAt: !865)
!880 = !DILocation(line: 154, column: 10, scope: !877, inlinedAt: !865)
!881 = !DILocation(line: 156, column: 3, scope: !871, inlinedAt: !865)
!882 = !DILocation(line: 157, column: 3, scope: !871, inlinedAt: !865)
!883 = !DILocation(line: 158, column: 11, scope: !871, inlinedAt: !865)
!884 = !DILocation(line: 158, column: 17, scope: !871, inlinedAt: !865)
!885 = !DILocation(line: 164, column: 33, scope: !886, inlinedAt: !887)
!886 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!887 = !DILocation(line: 160, column: 2, scope: !863, inlinedAt: !865)
!888 = !DILocation(line: 164, column: 2, scope: !886, inlinedAt: !887)
!889 = !DILocation(line: 166, column: 2, scope: !886, inlinedAt: !887)
!890 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Mcg64Random.next_int", scope: !43, file: !43, line: 58, type: !891, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!891 = !DISubroutineType(types: !892)
!892 = !{!20, !840}
!893 = !DILocation(line: 59, column: 1, scope: !890)
!894 = !DILocalVariable(name: "self", arg: 1, scope: !890, file: !43, line: 58, type: !840)
!895 = !DILocation(line: 58, column: 30, scope: !890)
!896 = !DILocalVariable(name: "s", scope: !890, file: !43, line: 60, type: !400, align: 8)
!897 = !DILocation(line: 60, column: 9, scope: !890)
!898 = !DILocation(line: 60, column: 21, scope: !890)
!899 = !DILocalVariable(name: "result", scope: !890, file: !43, line: 61, type: !20, align: 4)
!900 = !DILocation(line: 61, column: 7, scope: !890)
!901 = !DILocation(line: 61, column: 24, scope: !890)
!902 = !DILocation(line: 61, column: 17, scope: !890)
!903 = !DILocation(line: 62, column: 3, scope: !890)
!904 = !DILocation(line: 62, column: 2, scope: !890)
!905 = !DILocation(line: 63, column: 9, scope: !890)
!906 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Mcg64Random.next_int128", scope: !43, file: !43, line: 66, type: !907, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!907 = !DISubroutineType(types: !908)
!908 = !{!15, !840}
!909 = !DILocation(line: 66, column: 55, scope: !906)
!910 = !DILocalVariable(name: "self", arg: 1, scope: !906, file: !43, line: 66, type: !840)
!911 = !DILocation(line: 66, column: 36, scope: !906)
!912 = !DILocation(line: 66, column: 71, scope: !913, inlinedAt: !909)
!913 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!914 = !DILocation(line: 138, column: 46, scope: !913, inlinedAt: !909)
!915 = !DILocation(line: 138, column: 72, scope: !913, inlinedAt: !909)
!916 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Mcg64Random.next_long", scope: !43, file: !43, line: 67, type: !917, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!917 = !DISubroutineType(types: !918)
!918 = !{!6, !840}
!919 = !DILocation(line: 67, column: 51, scope: !916)
!920 = !DILocalVariable(name: "self", arg: 1, scope: !916, file: !43, line: 67, type: !840)
!921 = !DILocation(line: 67, column: 32, scope: !916)
!922 = !DILocation(line: 67, column: 64, scope: !923, inlinedAt: !919)
!923 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!924 = !DILocation(line: 139, column: 41, scope: !923, inlinedAt: !919)
!925 = !DILocation(line: 139, column: 65, scope: !923, inlinedAt: !919)
!926 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Mcg64Random.next_short", scope: !43, file: !43, line: 68, type: !927, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!927 = !DISubroutineType(types: !928)
!928 = !{!23, !840}
!929 = !DILocation(line: 68, column: 53, scope: !926)
!930 = !DILocalVariable(name: "self", arg: 1, scope: !926, file: !43, line: 68, type: !840)
!931 = !DILocation(line: 68, column: 34, scope: !926)
!932 = !DILocation(line: 68, column: 61, scope: !926)
!933 = !DILocation(line: 68, column: 54, scope: !926)
!934 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Mcg64Random.next_byte", scope: !43, file: !43, line: 69, type: !935, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!935 = !DISubroutineType(types: !936)
!936 = !{!87, !840}
!937 = !DILocation(line: 69, column: 50, scope: !934)
!938 = !DILocalVariable(name: "self", arg: 1, scope: !934, file: !43, line: 69, type: !840)
!939 = !DILocation(line: 69, column: 31, scope: !934)
!940 = !DILocation(line: 69, column: 56, scope: !934)
!941 = !DILocation(line: 69, column: 51, scope: !934)
!942 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Mcg32Random.set_seed", scope: !43, file: !43, line: 76, type: !943, scopeLine: 76, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!943 = !DISubroutineType(types: !944)
!944 = !{null, !945, !258}
!945 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Mcg32Random*", baseType: !946, size: 64, align: 64, dwarfAddressSpace: 0)
!946 = !DIDerivedType(tag: DW_TAG_typedef, name: "Mcg32Random", scope: !43, file: !43, line: 74, baseType: !20, align: 4)
!947 = !DILocation(line: 77, column: 1, scope: !942)
!948 = !DILocalVariable(name: "self", arg: 1, scope: !942, file: !43, line: 76, type: !945)
!949 = !DILocation(line: 76, column: 30, scope: !942)
!950 = !DILocalVariable(name: "seed", arg: 2, scope: !942, file: !43, line: 76, type: !258)
!951 = !DILocation(line: 76, column: 44, scope: !942)
!952 = !DILocation(line: 78, column: 3, scope: !942)
!953 = !DILocalVariable(name: "return_value", scope: !954, file: !43, line: 10, type: !20, align: 4)
!954 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !52, file: !52, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!955 = !DILocation(line: 10, column: 8, scope: !954, inlinedAt: !956)
!956 = !DILocation(line: 78, column: 11, scope: !942)
!957 = !DILocation(line: 11, column: 2, scope: !954, inlinedAt: !956)
!958 = !DILocation(line: 12, column: 9, scope: !954, inlinedAt: !956)
!959 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Mcg32Random.next_short", scope: !43, file: !43, line: 81, type: !960, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!960 = !DISubroutineType(types: !961)
!961 = !{!23, !945}
!962 = !DILocation(line: 82, column: 1, scope: !959)
!963 = !DILocalVariable(name: "self", arg: 1, scope: !959, file: !43, line: 81, type: !945)
!964 = !DILocation(line: 81, column: 34, scope: !959)
!965 = !DILocalVariable(name: "s", scope: !959, file: !43, line: 83, type: !518, align: 8)
!966 = !DILocation(line: 83, column: 8, scope: !959)
!967 = !DILocation(line: 83, column: 19, scope: !959)
!968 = !DILocalVariable(name: "result", scope: !959, file: !43, line: 84, type: !23, align: 2)
!969 = !DILocation(line: 84, column: 9, scope: !959)
!970 = !DILocation(line: 84, column: 28, scope: !959)
!971 = !DILocation(line: 84, column: 19, scope: !959)
!972 = !DILocation(line: 85, column: 3, scope: !959)
!973 = !DILocation(line: 85, column: 2, scope: !959)
!974 = !DILocation(line: 86, column: 9, scope: !959)
!975 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Mcg32Random.next_bytes", scope: !43, file: !43, line: 92, type: !943, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!976 = !DILocation(line: 92, column: 65, scope: !975)
!977 = !DILocalVariable(name: "self", arg: 1, scope: !975, file: !43, line: 92, type: !945)
!978 = !DILocation(line: 92, column: 32, scope: !975)
!979 = !DILocalVariable(name: "bytes", arg: 2, scope: !975, file: !43, line: 92, type: !258)
!980 = !DILocation(line: 92, column: 46, scope: !975)
!981 = !DILocation(line: 90, column: 11, scope: !982)
!982 = distinct !DILexicalBlock(scope: !975, file: !43, line: 92, column: 65)
!983 = !DILocalVariable(name: "len", scope: !984, file: !43, line: 146, type: !263, align: 8)
!984 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!985 = !DILocation(line: 146, column: 6, scope: !984, inlinedAt: !976)
!986 = !DILocation(line: 146, column: 12, scope: !984, inlinedAt: !976)
!987 = !DILocation(line: 148, column: 2, scope: !984, inlinedAt: !976)
!988 = !DILocation(line: 148, column: 9, scope: !989, inlinedAt: !976)
!989 = distinct !DILexicalBlock(scope: !984, file: !2, line: 148, column: 2)
!990 = !DILocalVariable(name: "value", scope: !991, file: !43, line: 150, type: !23, align: 2)
!991 = distinct !DILexicalBlock(scope: !989, file: !2, line: 149, column: 2)
!992 = !DILocation(line: 150, column: 7, scope: !991, inlinedAt: !976)
!993 = !DILocation(line: 92, column: 88, scope: !991, inlinedAt: !976)
!994 = !DILocation(line: 150, column: 15, scope: !991, inlinedAt: !976)
!995 = !DILocation(line: 151, column: 7, scope: !991, inlinedAt: !976)
!996 = !DILocation(line: 153, column: 33, scope: !997, inlinedAt: !976)
!997 = distinct !DILexicalBlock(scope: !991, file: !2, line: 152, column: 3)
!998 = !DILocation(line: 153, column: 4, scope: !997, inlinedAt: !976)
!999 = !DILocation(line: 153, column: 10, scope: !997, inlinedAt: !976)
!1000 = !DILocation(line: 154, column: 10, scope: !997, inlinedAt: !976)
!1001 = !DILocation(line: 156, column: 3, scope: !991, inlinedAt: !976)
!1002 = !DILocation(line: 157, column: 3, scope: !991, inlinedAt: !976)
!1003 = !DILocation(line: 158, column: 11, scope: !991, inlinedAt: !976)
!1004 = !DILocation(line: 158, column: 17, scope: !991, inlinedAt: !976)
!1005 = !DILocation(line: 164, column: 33, scope: !1006, inlinedAt: !1007)
!1006 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1007 = !DILocation(line: 160, column: 2, scope: !984, inlinedAt: !976)
!1008 = !DILocation(line: 164, column: 2, scope: !1006, inlinedAt: !1007)
!1009 = !DILocation(line: 166, column: 2, scope: !1006, inlinedAt: !1007)
!1010 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Mcg32Random.next_int128", scope: !43, file: !43, line: 93, type: !1011, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!15, !945}
!1013 = !DILocation(line: 93, column: 55, scope: !1010)
!1014 = !DILocalVariable(name: "self", arg: 1, scope: !1010, file: !43, line: 93, type: !945)
!1015 = !DILocation(line: 93, column: 36, scope: !1010)
!1016 = !DILocation(line: 93, column: 71, scope: !1017, inlinedAt: !1013)
!1017 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1018 = !DILocation(line: 138, column: 46, scope: !1017, inlinedAt: !1013)
!1019 = !DILocation(line: 138, column: 72, scope: !1017, inlinedAt: !1013)
!1020 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Mcg32Random.next_long", scope: !43, file: !43, line: 94, type: !1021, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1021 = !DISubroutineType(types: !1022)
!1022 = !{!6, !945}
!1023 = !DILocation(line: 94, column: 51, scope: !1020)
!1024 = !DILocalVariable(name: "self", arg: 1, scope: !1020, file: !43, line: 94, type: !945)
!1025 = !DILocation(line: 94, column: 32, scope: !1020)
!1026 = !DILocation(line: 94, column: 64, scope: !1027, inlinedAt: !1023)
!1027 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1028 = !DILocation(line: 139, column: 41, scope: !1027, inlinedAt: !1023)
!1029 = !DILocation(line: 139, column: 65, scope: !1027, inlinedAt: !1023)
!1030 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Mcg32Random.next_int", scope: !43, file: !43, line: 95, type: !1031, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1031 = !DISubroutineType(types: !1032)
!1032 = !{!20, !945}
!1033 = !DILocation(line: 95, column: 49, scope: !1030)
!1034 = !DILocalVariable(name: "self", arg: 1, scope: !1030, file: !43, line: 95, type: !945)
!1035 = !DILocation(line: 95, column: 30, scope: !1030)
!1036 = !DILocation(line: 95, column: 63, scope: !1037, inlinedAt: !1033)
!1037 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1038 = !DILocation(line: 140, column: 41, scope: !1037, inlinedAt: !1033)
!1039 = !DILocation(line: 140, column: 64, scope: !1037, inlinedAt: !1033)
!1040 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Mcg32Random.next_byte", scope: !43, file: !43, line: 96, type: !1041, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!87, !945}
!1043 = !DILocation(line: 96, column: 50, scope: !1040)
!1044 = !DILocalVariable(name: "self", arg: 1, scope: !1040, file: !43, line: 96, type: !945)
!1045 = !DILocation(line: 96, column: 31, scope: !1040)
!1046 = !DILocation(line: 96, column: 56, scope: !1040)
!1047 = !DILocation(line: 96, column: 51, scope: !1040)
!1048 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Mcg16Random.set_seed", scope: !43, file: !43, line: 102, type: !1049, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1049 = !DISubroutineType(types: !1050)
!1050 = !{null, !1051, !258}
!1051 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Mcg16Random*", baseType: !1052, size: 64, align: 64, dwarfAddressSpace: 0)
!1052 = !DIDerivedType(tag: DW_TAG_typedef, name: "Mcg16Random", scope: !43, file: !43, line: 100, baseType: !23, align: 2)
!1053 = !DILocation(line: 103, column: 1, scope: !1048)
!1054 = !DILocalVariable(name: "self", arg: 1, scope: !1048, file: !43, line: 102, type: !1051)
!1055 = !DILocation(line: 102, column: 30, scope: !1048)
!1056 = !DILocalVariable(name: "seed", arg: 2, scope: !1048, file: !43, line: 102, type: !258)
!1057 = !DILocation(line: 102, column: 44, scope: !1048)
!1058 = !DILocation(line: 104, column: 3, scope: !1048)
!1059 = !DILocalVariable(name: "return_value", scope: !1060, file: !43, line: 10, type: !23, align: 2)
!1060 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !52, file: !52, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1061 = !DILocation(line: 10, column: 8, scope: !1060, inlinedAt: !1062)
!1062 = !DILocation(line: 104, column: 11, scope: !1048)
!1063 = !DILocation(line: 11, column: 2, scope: !1060, inlinedAt: !1062)
!1064 = !DILocation(line: 12, column: 9, scope: !1060, inlinedAt: !1062)
!1065 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Mcg16Random.next_byte", scope: !43, file: !43, line: 107, type: !1066, scopeLine: 107, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1066 = !DISubroutineType(types: !1067)
!1067 = !{!87, !1051}
!1068 = !DILocation(line: 108, column: 1, scope: !1065)
!1069 = !DILocalVariable(name: "self", arg: 1, scope: !1065, file: !43, line: 107, type: !1051)
!1070 = !DILocation(line: 107, column: 31, scope: !1065)
!1071 = !DILocalVariable(name: "s", scope: !1065, file: !43, line: 109, type: !638, align: 8)
!1072 = !DILocation(line: 109, column: 10, scope: !1065)
!1073 = !DILocation(line: 109, column: 23, scope: !1065)
!1074 = !DILocalVariable(name: "result", scope: !1065, file: !43, line: 110, type: !87, align: 1)
!1075 = !DILocation(line: 110, column: 7, scope: !1065)
!1076 = !DILocation(line: 110, column: 24, scope: !1065)
!1077 = !DILocation(line: 110, column: 17, scope: !1065)
!1078 = !DILocation(line: 111, column: 3, scope: !1065)
!1079 = !DILocation(line: 111, column: 2, scope: !1065)
!1080 = !DILocation(line: 112, column: 9, scope: !1065)
!1081 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Mcg16Random.next_bytes", scope: !43, file: !43, line: 115, type: !1049, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1082 = !DILocation(line: 115, column: 65, scope: !1081)
!1083 = !DILocalVariable(name: "self", arg: 1, scope: !1081, file: !43, line: 115, type: !1051)
!1084 = !DILocation(line: 115, column: 32, scope: !1081)
!1085 = !DILocalVariable(name: "bytes", arg: 2, scope: !1081, file: !43, line: 115, type: !258)
!1086 = !DILocation(line: 115, column: 46, scope: !1081)
!1087 = !DILocalVariable(name: "len", scope: !1088, file: !43, line: 146, type: !263, align: 8)
!1088 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1089 = !DILocation(line: 146, column: 6, scope: !1088, inlinedAt: !1082)
!1090 = !DILocation(line: 146, column: 12, scope: !1088, inlinedAt: !1082)
!1091 = !DILocation(line: 148, column: 2, scope: !1088, inlinedAt: !1082)
!1092 = !DILocation(line: 148, column: 9, scope: !1093, inlinedAt: !1082)
!1093 = distinct !DILexicalBlock(scope: !1088, file: !2, line: 148, column: 2)
!1094 = !DILocalVariable(name: "value", scope: !1095, file: !43, line: 150, type: !87, align: 1)
!1095 = distinct !DILexicalBlock(scope: !1093, file: !2, line: 149, column: 2)
!1096 = !DILocation(line: 150, column: 7, scope: !1095, inlinedAt: !1082)
!1097 = !DILocation(line: 115, column: 88, scope: !1095, inlinedAt: !1082)
!1098 = !DILocation(line: 150, column: 15, scope: !1095, inlinedAt: !1082)
!1099 = !DILocation(line: 151, column: 7, scope: !1095, inlinedAt: !1082)
!1100 = !DILocation(line: 153, column: 33, scope: !1101, inlinedAt: !1082)
!1101 = distinct !DILexicalBlock(scope: !1095, file: !2, line: 152, column: 3)
!1102 = !DILocation(line: 153, column: 4, scope: !1101, inlinedAt: !1082)
!1103 = !DILocation(line: 153, column: 10, scope: !1101, inlinedAt: !1082)
!1104 = !DILocation(line: 154, column: 10, scope: !1101, inlinedAt: !1082)
!1105 = !DILocation(line: 156, column: 3, scope: !1095, inlinedAt: !1082)
!1106 = !DILocation(line: 157, column: 3, scope: !1095, inlinedAt: !1082)
!1107 = !DILocation(line: 158, column: 11, scope: !1095, inlinedAt: !1082)
!1108 = !DILocation(line: 158, column: 17, scope: !1095, inlinedAt: !1082)
!1109 = !DILocation(line: 164, column: 33, scope: !1110, inlinedAt: !1111)
!1110 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1111 = !DILocation(line: 160, column: 2, scope: !1088, inlinedAt: !1082)
!1112 = !DILocation(line: 164, column: 2, scope: !1110, inlinedAt: !1111)
!1113 = !DILocation(line: 166, column: 2, scope: !1110, inlinedAt: !1111)
!1114 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Mcg16Random.next_int128", scope: !43, file: !43, line: 116, type: !1115, scopeLine: 116, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!15, !1051}
!1117 = !DILocation(line: 116, column: 55, scope: !1114)
!1118 = !DILocalVariable(name: "self", arg: 1, scope: !1114, file: !43, line: 116, type: !1051)
!1119 = !DILocation(line: 116, column: 36, scope: !1114)
!1120 = !DILocation(line: 116, column: 71, scope: !1121, inlinedAt: !1117)
!1121 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1122 = !DILocation(line: 138, column: 46, scope: !1121, inlinedAt: !1117)
!1123 = !DILocation(line: 138, column: 72, scope: !1121, inlinedAt: !1117)
!1124 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Mcg16Random.next_long", scope: !43, file: !43, line: 117, type: !1125, scopeLine: 117, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1125 = !DISubroutineType(types: !1126)
!1126 = !{!6, !1051}
!1127 = !DILocation(line: 117, column: 51, scope: !1124)
!1128 = !DILocalVariable(name: "self", arg: 1, scope: !1124, file: !43, line: 117, type: !1051)
!1129 = !DILocation(line: 117, column: 32, scope: !1124)
!1130 = !DILocation(line: 117, column: 64, scope: !1131, inlinedAt: !1127)
!1131 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1132 = !DILocation(line: 139, column: 41, scope: !1131, inlinedAt: !1127)
!1133 = !DILocation(line: 139, column: 65, scope: !1131, inlinedAt: !1127)
!1134 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Mcg16Random.next_int", scope: !43, file: !43, line: 118, type: !1135, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!20, !1051}
!1137 = !DILocation(line: 118, column: 49, scope: !1134)
!1138 = !DILocalVariable(name: "self", arg: 1, scope: !1134, file: !43, line: 118, type: !1051)
!1139 = !DILocation(line: 118, column: 30, scope: !1134)
!1140 = !DILocation(line: 118, column: 63, scope: !1141, inlinedAt: !1137)
!1141 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1142 = !DILocation(line: 140, column: 41, scope: !1141, inlinedAt: !1137)
!1143 = !DILocation(line: 140, column: 64, scope: !1141, inlinedAt: !1137)
!1144 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Mcg16Random.next_short", scope: !43, file: !43, line: 119, type: !1145, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1145 = !DISubroutineType(types: !1146)
!1146 = !{!23, !1051}
!1147 = !DILocation(line: 119, column: 53, scope: !1144)
!1148 = !DILocalVariable(name: "self", arg: 1, scope: !1144, file: !43, line: 119, type: !1051)
!1149 = !DILocation(line: 119, column: 34, scope: !1144)
!1150 = !DILocation(line: 119, column: 68, scope: !1151, inlinedAt: !1147)
!1151 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !2, file: !2, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1152 = !DILocation(line: 141, column: 44, scope: !1151, inlinedAt: !1147)
!1153 = !DILocation(line: 141, column: 68, scope: !1151, inlinedAt: !1147)
!1154 = distinct !DISubprogram(name: "seeder", linkageName: "std.math.random.seeder", scope: !52, file: !52, line: 20, type: !1155, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{null, !258, !258}
!1157 = !DILocalVariable(name: "input", arg: 1, scope: !1154, file: !52, line: 20, type: !258)
!1158 = !DILocation(line: 20, column: 23, scope: !1154)
!1159 = !DILocalVariable(name: "out_buffer", arg: 2, scope: !1154, file: !52, line: 20, type: !258)
!1160 = !DILocation(line: 20, column: 37, scope: !1154)
!1161 = !DILocalVariable(name: "out_chars", scope: !1154, file: !52, line: 26, type: !263, align: 8)
!1162 = !DILocation(line: 26, column: 6, scope: !1154)
!1163 = !DILocation(line: 26, column: 18, scope: !1154)
!1164 = !DILocalVariable(name: "current", scope: !1165, file: !52, line: 592, type: !1167, align: 8)
!1165 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !1166, file: !1166, line: 590, scopeLine: 590, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1166 = !DIFile(filename: "mem.c3", directory: "/usr/local/lib/c3/std/core")
!1167 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocator*", baseType: !1168, size: 64, align: 64, dwarfAddressSpace: 0)
!1168 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocator", scope: !52, file: !52, line: 10, size: 320, align: 64, elements: !1169, identifier: "std.core.mem.allocator.TempAllocator")
!1169 = !{!1170, !1177, !1190, !1191, !1192}
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "backing_allocator", scope: !1168, file: !52, line: 12, baseType: !1171, size: 128, align: 64)
!1171 = !DICompositeType(tag: DW_TAG_structure_type, name: "Allocator", size: 128, align: 64, elements: !1172, identifier: "Allocator")
!1172 = !{!1173, !1175}
!1173 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !1171, baseType: !1174, size: 64, align: 64)
!1174 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "void*", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1171, baseType: !1176, size: 64, align: 64, offset: 64)
!1176 = !DIBasicType(name: "typeid", size: 64, encoding: DW_ATE_address)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "last_page", scope: !1168, file: !52, line: 13, baseType: !1178, size: 64, align: 64, offset: 128)
!1178 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocatorPage*", baseType: !1179, size: 64, align: 64, dwarfAddressSpace: 0)
!1179 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocatorPage", scope: !52, file: !52, line: 22, size: 320, align: 64, elements: !1180, identifier: "std.core.mem.allocator.TempAllocatorPage")
!1180 = !{!1181, !1182, !1183, !1184, !1185, !1186}
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "prev_page", scope: !1179, file: !52, line: 24, baseType: !1178, size: 64, align: 64)
!1182 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !1179, file: !52, line: 25, baseType: !1174, size: 64, align: 64, offset: 64)
!1183 = !DIDerivedType(tag: DW_TAG_member, name: "mark", scope: !1179, file: !52, line: 26, baseType: !263, size: 64, align: 64, offset: 128)
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1179, file: !52, line: 27, baseType: !263, size: 64, align: 64, offset: 192)
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "ident", scope: !1179, file: !52, line: 28, baseType: !263, size: 64, align: 64, offset: 256)
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1179, file: !52, line: 29, baseType: !1187, align: 8, offset: 320)
!1187 = !DICompositeType(tag: DW_TAG_array_type, baseType: !87, align: 8, elements: !1188)
!1188 = !{!1189}
!1189 = !DISubrange(count: 0, lowerBound: 0)
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1168, file: !52, line: 14, baseType: !263, size: 64, align: 64, offset: 192)
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1168, file: !52, line: 15, baseType: !263, size: 64, align: 64, offset: 256)
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1168, file: !52, line: 16, baseType: !1187, align: 8, offset: 320)
!1193 = !DILocation(line: 592, column: 17, scope: !1165, inlinedAt: !1194)
!1194 = !DILocation(line: 27, column: 2, scope: !1154)
!1195 = !DILocation(line: 396, column: 6, scope: !1196, inlinedAt: !1198)
!1196 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !1197, file: !1197, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1197 = !DIFile(filename: "mem_allocator.c3", directory: "/usr/local/lib/c3/std/core")
!1198 = !DILocation(line: 592, column: 27, scope: !1165, inlinedAt: !1194)
!1199 = !DILocation(line: 398, column: 3, scope: !1200, inlinedAt: !1198)
!1200 = distinct !DILexicalBlock(scope: !1196, file: !1197, line: 397, column: 2)
!1201 = !DILocation(line: 400, column: 9, scope: !1196, inlinedAt: !1198)
!1202 = !DILocalVariable(name: "mark", scope: !1165, file: !52, line: 597, type: !263, align: 8)
!1203 = !DILocation(line: 597, column: 6, scope: !1165, inlinedAt: !1194)
!1204 = !DILocation(line: 597, column: 13, scope: !1165, inlinedAt: !1194)
!1205 = !DILocalVariable(name: "words", scope: !1206, file: !52, line: 29, type: !1207, align: 8)
!1206 = distinct !DILexicalBlock(scope: !1154, file: !52, line: 28, column: 2)
!1207 = !DICompositeType(tag: DW_TAG_structure_type, name: "ulong[]", size: 128, align: 64, elements: !1208, identifier: "ulong[]")
!1208 = !{!1209, !1210}
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !1207, baseType: !400, size: 64, align: 64)
!1210 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1207, baseType: !263, size: 64, align: 64, offset: 64)
!1211 = !DILocation(line: 29, column: 11, scope: !1206)
!1212 = !DILocation(line: 29, column: 49, scope: !1206)
!1213 = !DILocation(line: 820, column: 41, scope: !1214, inlinedAt: !1215)
!1214 = distinct !DISubprogram(name: "temp_alloc_array", linkageName: "temp_alloc_array", scope: !1166, file: !1166, line: 818, scopeLine: 818, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1215 = !DILocation(line: 29, column: 19, scope: !1206)
!1216 = !DILocation(line: 820, column: 26, scope: !1214, inlinedAt: !1215)
!1217 = !DILocation(line: 820, column: 18, scope: !1214, inlinedAt: !1215)
!1218 = !DILocation(line: 820, column: 68, scope: !1214, inlinedAt: !1215)
!1219 = !DILocation(line: 30, column: 3, scope: !1206)
!1220 = !DILocation(line: 30, column: 9, scope: !1206)
!1221 = !DILocalVariable(name: "words_len_2", scope: !1206, file: !52, line: 31, type: !263, align: 8)
!1222 = !DILocation(line: 31, column: 7, scope: !1206)
!1223 = !DILocation(line: 31, column: 21, scope: !1206)
!1224 = !DILocalVariable(name: "i", scope: !1225, file: !52, line: 34, type: !263, align: 8)
!1225 = distinct !DILexicalBlock(scope: !1206, file: !52, line: 34, column: 3)
!1226 = !DILocation(line: 34, column: 12, scope: !1225)
!1227 = !DILocation(line: 34, column: 16, scope: !1225)
!1228 = !DILocation(line: 34, column: 19, scope: !1225)
!1229 = !DILocation(line: 34, column: 23, scope: !1225)
!1230 = !DILocalVariable(name: "j", scope: !1231, file: !52, line: 36, type: !263, align: 8)
!1231 = distinct !DILexicalBlock(scope: !1225, file: !52, line: 35, column: 3)
!1232 = !DILocation(line: 36, column: 8, scope: !1231)
!1233 = !DILocation(line: 36, column: 12, scope: !1231)
!1234 = !DILocation(line: 36, column: 16, scope: !1231)
!1235 = !DILocation(line: 37, column: 4, scope: !1231)
!1236 = !DILocation(line: 37, column: 10, scope: !1231)
!1237 = !DILocation(line: 37, column: 36, scope: !1231)
!1238 = !DILocation(line: 37, column: 42, scope: !1231)
!1239 = !DILocalVariable(name: "x", scope: !1240, file: !52, line: 214, type: !6, align: 8)
!1240 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !338, file: !338, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1241 = !DILocation(line: 214, column: 9, scope: !1240, inlinedAt: !1242)
!1242 = !DILocation(line: 37, column: 16, scope: !1231)
!1243 = !DILocation(line: 215, column: 38, scope: !1240, inlinedAt: !1242)
!1244 = !DILocation(line: 216, column: 10, scope: !1240, inlinedAt: !1242)
!1245 = !DILocation(line: 38, column: 4, scope: !1231)
!1246 = !DILocation(line: 38, column: 10, scope: !1231)
!1247 = !DILocation(line: 38, column: 16, scope: !1231)
!1248 = !DILocation(line: 38, column: 22, scope: !1231)
!1249 = !DILocation(line: 34, column: 38, scope: !1225)
!1250 = !DILocalVariable(name: "remaining", scope: !1206, file: !52, line: 42, type: !263, align: 8)
!1251 = !DILocation(line: 42, column: 7, scope: !1206)
!1252 = !DILocation(line: 42, column: 19, scope: !1206)
!1253 = !DILocation(line: 42, column: 31, scope: !1206)
!1254 = !DILocation(line: 43, column: 7, scope: !1206)
!1255 = !DILocalVariable(name: "rest", scope: !1256, file: !52, line: 45, type: !6, align: 8)
!1256 = distinct !DILexicalBlock(scope: !1206, file: !52, line: 44, column: 3)
!1257 = !DILocation(line: 45, column: 10, scope: !1256)
!1258 = !DILocation(line: 45, column: 17, scope: !1256)
!1259 = !DILocation(line: 46, column: 22, scope: !1256)
!1260 = !DILocation(line: 46, column: 29, scope: !1256)
!1261 = !DILocation(line: 324, column: 11, scope: !1262, inlinedAt: !1264)
!1262 = distinct !DILexicalBlock(scope: !1263, file: !1166, line: 327, column: 1)
!1263 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !1166, file: !1166, line: 326, scopeLine: 326, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1264 = !DILocation(line: 46, column: 4, scope: !1256)
!1265 = !DILocation(line: 324, column: 23, scope: !1262, inlinedAt: !1264)
!1266 = !DILocation(line: 324, column: 29, scope: !1262, inlinedAt: !1264)
!1267 = !DILocation(line: 324, column: 36, scope: !1262, inlinedAt: !1264)
!1268 = !DILocation(line: 324, column: 43, scope: !1262, inlinedAt: !1264)
!1269 = !DILocation(line: 324, column: 49, scope: !1262, inlinedAt: !1264)
!1270 = !DILocation(line: 324, column: 56, scope: !1262, inlinedAt: !1264)
!1271 = !DILocation(line: 328, column: 11, scope: !1263, inlinedAt: !1264)
!1272 = !DILocation(line: 328, column: 16, scope: !1263, inlinedAt: !1264)
!1273 = !DILocation(line: 328, column: 21, scope: !1263, inlinedAt: !1264)
!1274 = !DILocation(line: 328, column: 26, scope: !1263, inlinedAt: !1264)
!1275 = !DILocation(line: 47, column: 4, scope: !1256)
!1276 = !DILocation(line: 47, column: 11, scope: !1256)
!1277 = !DILocation(line: 47, column: 17, scope: !1256)
!1278 = !DILocation(line: 48, column: 4, scope: !1256)
!1279 = !DILocation(line: 48, column: 11, scope: !1256)
!1280 = !DILocation(line: 48, column: 17, scope: !1256)
!1281 = !DILocation(line: 48, column: 24, scope: !1256)
!1282 = !DILocalVariable(name: "i", scope: !1283, file: !52, line: 52, type: !1284, align: 8)
!1283 = distinct !DILexicalBlock(scope: !1206, file: !52, line: 52, column: 3)
!1284 = !DIDerivedType(tag: DW_TAG_typedef, name: "isz", baseType: !91)
!1285 = !DILocation(line: 52, column: 12, scope: !1283)
!1286 = !DILocation(line: 52, column: 16, scope: !1283)
!1287 = !DILocation(line: 52, column: 33, scope: !1283)
!1288 = !DILocalVariable(name: "j", scope: !1289, file: !52, line: 54, type: !1284, align: 8)
!1289 = distinct !DILexicalBlock(scope: !1283, file: !52, line: 53, column: 3)
!1290 = !DILocation(line: 54, column: 8, scope: !1289)
!1291 = !DILocation(line: 54, column: 12, scope: !1289)
!1292 = !DILocation(line: 54, column: 16, scope: !1289)
!1293 = !DILocation(line: 55, column: 4, scope: !1289)
!1294 = !DILocation(line: 55, column: 10, scope: !1289)
!1295 = !DILocation(line: 55, column: 16, scope: !1289)
!1296 = !DILocation(line: 55, column: 23, scope: !1289)
!1297 = !DILocation(line: 55, column: 32, scope: !1289)
!1298 = !DILocation(line: 56, column: 4, scope: !1289)
!1299 = !DILocation(line: 56, column: 10, scope: !1289)
!1300 = !DILocation(line: 56, column: 16, scope: !1289)
!1301 = !DILocation(line: 56, column: 22, scope: !1289)
!1302 = !DILocation(line: 52, column: 41, scope: !1283)
!1303 = !DILocalVariable(name: "i", scope: !1304, file: !52, line: 60, type: !263, align: 8)
!1304 = distinct !DILexicalBlock(scope: !1206, file: !52, line: 60, column: 3)
!1305 = !DILocation(line: 60, column: 12, scope: !1304)
!1306 = !DILocation(line: 60, column: 16, scope: !1304)
!1307 = !DILocation(line: 60, column: 19, scope: !1304)
!1308 = !DILocation(line: 60, column: 23, scope: !1304)
!1309 = !DILocalVariable(name: "j", scope: !1310, file: !52, line: 62, type: !263, align: 8)
!1310 = distinct !DILexicalBlock(scope: !1304, file: !52, line: 61, column: 3)
!1311 = !DILocation(line: 62, column: 8, scope: !1310)
!1312 = !DILocation(line: 62, column: 12, scope: !1310)
!1313 = !DILocation(line: 62, column: 16, scope: !1310)
!1314 = !DILocation(line: 63, column: 4, scope: !1310)
!1315 = !DILocation(line: 63, column: 10, scope: !1310)
!1316 = !DILocation(line: 64, column: 4, scope: !1310)
!1317 = !DILocation(line: 64, column: 10, scope: !1310)
!1318 = !DILocation(line: 64, column: 16, scope: !1310)
!1319 = !DILocation(line: 64, column: 22, scope: !1310)
!1320 = !DILocation(line: 60, column: 36, scope: !1304)
!1321 = !DILocation(line: 66, column: 28, scope: !1206)
!1322 = !DILocation(line: 66, column: 40, scope: !1206)
!1323 = !DILocation(line: 66, column: 3, scope: !1206)
!1324 = !DILocation(line: 66, column: 14, scope: !1206)
!1325 = !DILocation(line: 600, column: 17, scope: !1326, inlinedAt: !1194)
!1326 = distinct !DILexicalBlock(scope: !1165, file: !1166, line: 599, column: 2)
!1327 = !DILocation(line: 600, column: 3, scope: !1326, inlinedAt: !1194)
!1328 = !DILocation(line: 603, column: 9, scope: !1326, inlinedAt: !1194)
!1329 = !DILocation(line: 37, column: 26, scope: !1231)
!1330 = distinct !DISubprogram(name: "entropy", linkageName: "std.math.random.entropy", scope: !52, file: !52, line: 75, type: !1331, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1331 = !DISubroutineType(types: !1332)
!1332 = !{!1333}
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !87, size: 256, align: 8, elements: !1334)
!1334 = !{!1335}
!1335 = !DISubrange(count: 32, lowerBound: 0)
!1336 = !DILocalVariable(name: "addr", scope: !1330, file: !52, line: 78, type: !1174, align: 8)
!1337 = !DILocation(line: 78, column: 8, scope: !1330)
!1338 = !DILocation(line: 78, column: 15, scope: !1330)
!1339 = !DILocation(line: 79, column: 7, scope: !1330)
!1340 = !DILocation(line: 79, column: 2, scope: !1330)
!1341 = !DILocation(line: 81, column: 2, scope: !1330)
!1342 = !DILocalVariable(name: "entropy_data", scope: !1330, file: !52, line: 82, type: !1343, align: 16)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 256, align: 32, elements: !1344)
!1344 = !{!1345}
!1345 = !DISubrange(count: 8, lowerBound: 0)
!1346 = !DILocation(line: 82, column: 10, scope: !1330)
!1347 = !DILocation(line: 212, column: 20, scope: !1348, inlinedAt: !1349)
!1348 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !338, file: !338, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1349 = !DILocation(line: 72, column: 26, scope: !1350, inlinedAt: !1351)
!1350 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !52, file: !52, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1351 = !DILocation(line: 83, column: 3, scope: !1330)
!1352 = !DILocation(line: 212, column: 12, scope: !1348, inlinedAt: !1349)
!1353 = !DILocation(line: 72, column: 9, scope: !1350, inlinedAt: !1351)
!1354 = !DILocation(line: 212, column: 20, scope: !1355, inlinedAt: !1356)
!1355 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !338, file: !338, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1356 = !DILocation(line: 72, column: 26, scope: !1357, inlinedAt: !1358)
!1357 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !52, file: !52, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1358 = !DILocation(line: 84, column: 3, scope: !1330)
!1359 = !DILocation(line: 212, column: 12, scope: !1355, inlinedAt: !1356)
!1360 = !DILocation(line: 72, column: 9, scope: !1357, inlinedAt: !1358)
!1361 = !DILocation(line: 212, column: 20, scope: !1362, inlinedAt: !1363)
!1362 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !338, file: !338, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1363 = !DILocation(line: 72, column: 26, scope: !1364, inlinedAt: !1365)
!1364 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !52, file: !52, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1365 = !DILocation(line: 85, column: 3, scope: !1330)
!1366 = !DILocation(line: 212, column: 12, scope: !1362, inlinedAt: !1363)
!1367 = !DILocation(line: 72, column: 9, scope: !1364, inlinedAt: !1365)
!1368 = !DILocation(line: 212, column: 20, scope: !1369, inlinedAt: !1370)
!1369 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !338, file: !338, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1370 = !DILocation(line: 72, column: 26, scope: !1371, inlinedAt: !1372)
!1371 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !52, file: !52, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1372 = !DILocation(line: 86, column: 3, scope: !1330)
!1373 = !DILocation(line: 212, column: 12, scope: !1369, inlinedAt: !1370)
!1374 = !DILocation(line: 72, column: 9, scope: !1371, inlinedAt: !1372)
!1375 = !DILocation(line: 87, column: 3, scope: !1330)
!1376 = !DILocation(line: 88, column: 8, scope: !1330)
!1377 = !DILocation(line: 212, column: 20, scope: !1378, inlinedAt: !1379)
!1378 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !338, file: !338, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1379 = !DILocation(line: 72, column: 26, scope: !1380, inlinedAt: !1381)
!1380 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !52, file: !52, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1381 = !DILocation(line: 88, column: 3, scope: !1330)
!1382 = !DILocation(line: 212, column: 12, scope: !1378, inlinedAt: !1379)
!1383 = !DILocation(line: 72, column: 9, scope: !1380, inlinedAt: !1381)
!1384 = !DILocation(line: 212, column: 20, scope: !1385, inlinedAt: !1386)
!1385 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !338, file: !338, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1386 = !DILocation(line: 72, column: 26, scope: !1387, inlinedAt: !1388)
!1387 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !52, file: !52, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1388 = !DILocation(line: 89, column: 3, scope: !1330)
!1389 = !DILocation(line: 212, column: 12, scope: !1385, inlinedAt: !1386)
!1390 = !DILocation(line: 72, column: 9, scope: !1387, inlinedAt: !1388)
!1391 = !DILocation(line: 212, column: 20, scope: !1392, inlinedAt: !1393)
!1392 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !338, file: !338, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1393 = !DILocation(line: 72, column: 26, scope: !1394, inlinedAt: !1395)
!1394 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !52, file: !52, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1395 = !DILocation(line: 90, column: 3, scope: !1330)
!1396 = !DILocation(line: 212, column: 12, scope: !1392, inlinedAt: !1393)
!1397 = !DILocation(line: 72, column: 9, scope: !1394, inlinedAt: !1395)
!1398 = !DILocation(line: 212, column: 20, scope: !1399, inlinedAt: !1400)
!1399 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !338, file: !338, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1400 = !DILocation(line: 92, column: 9, scope: !1330)
!1401 = !DILocation(line: 212, column: 12, scope: !1399, inlinedAt: !1400)
!1402 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Lcg128Random.set_seed", scope: !61, file: !61, line: 18, type: !1403, scopeLine: 18, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1403 = !DISubroutineType(types: !1404)
!1404 = !{null, !1405, !258}
!1405 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Lcg128Random*", baseType: !1406, size: 64, align: 64, dwarfAddressSpace: 0)
!1406 = !DIDerivedType(tag: DW_TAG_typedef, name: "Lcg128Random", scope: !61, file: !61, line: 16, baseType: !15, align: 16)
!1407 = !DILocation(line: 19, column: 1, scope: !1402)
!1408 = !DILocalVariable(name: "self", arg: 1, scope: !1402, file: !61, line: 18, type: !1405)
!1409 = !DILocation(line: 18, column: 31, scope: !1402)
!1410 = !DILocalVariable(name: "input", arg: 2, scope: !1402, file: !61, line: 18, type: !258)
!1411 = !DILocation(line: 18, column: 45, scope: !1402)
!1412 = !DILocation(line: 20, column: 3, scope: !1402)
!1413 = !DILocalVariable(name: "return_value", scope: !1414, file: !61, line: 10, type: !15, align: 16)
!1414 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !52, file: !52, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1415 = !DILocation(line: 10, column: 8, scope: !1414, inlinedAt: !1416)
!1416 = !DILocation(line: 20, column: 11, scope: !1402)
!1417 = !DILocation(line: 11, column: 2, scope: !1414, inlinedAt: !1416)
!1418 = !DILocation(line: 12, column: 9, scope: !1414, inlinedAt: !1416)
!1419 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Lcg128Random.next_long", scope: !61, file: !61, line: 24, type: !1420, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1420 = !DISubroutineType(types: !1421)
!1421 = !{!6, !1405}
!1422 = !DILocation(line: 25, column: 1, scope: !1419)
!1423 = !DILocalVariable(name: "self", arg: 1, scope: !1419, file: !61, line: 24, type: !1405)
!1424 = !DILocation(line: 24, column: 33, scope: !1419)
!1425 = !DILocalVariable(name: "s", scope: !1419, file: !61, line: 26, type: !283, align: 8)
!1426 = !DILocation(line: 26, column: 11, scope: !1419)
!1427 = !DILocation(line: 26, column: 25, scope: !1419)
!1428 = !DILocalVariable(name: "result", scope: !1419, file: !61, line: 27, type: !6, align: 8)
!1429 = !DILocation(line: 27, column: 8, scope: !1419)
!1430 = !DILocation(line: 27, column: 26, scope: !1419)
!1431 = !DILocation(line: 27, column: 18, scope: !1419)
!1432 = !DILocation(line: 28, column: 3, scope: !1419)
!1433 = !DILocation(line: 28, column: 8, scope: !1419)
!1434 = !DILocation(line: 28, column: 7, scope: !1419)
!1435 = !DILocation(line: 29, column: 9, scope: !1419)
!1436 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Lcg128Random.next_bytes", scope: !61, file: !61, line: 35, type: !1403, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1437 = !DILocation(line: 35, column: 66, scope: !1436)
!1438 = !DILocalVariable(name: "self", arg: 1, scope: !1436, file: !61, line: 35, type: !1405)
!1439 = !DILocation(line: 35, column: 33, scope: !1436)
!1440 = !DILocalVariable(name: "bytes", arg: 2, scope: !1436, file: !61, line: 35, type: !258)
!1441 = !DILocation(line: 35, column: 47, scope: !1436)
!1442 = !DILocation(line: 33, column: 11, scope: !1443)
!1443 = distinct !DILexicalBlock(scope: !1436, file: !61, line: 35, column: 66)
!1444 = !DILocalVariable(name: "len", scope: !1445, file: !61, line: 146, type: !263, align: 8)
!1445 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1446 = !DILocation(line: 146, column: 6, scope: !1445, inlinedAt: !1437)
!1447 = !DILocation(line: 146, column: 12, scope: !1445, inlinedAt: !1437)
!1448 = !DILocation(line: 148, column: 2, scope: !1445, inlinedAt: !1437)
!1449 = !DILocation(line: 148, column: 9, scope: !1450, inlinedAt: !1437)
!1450 = distinct !DILexicalBlock(scope: !1445, file: !2, line: 148, column: 2)
!1451 = !DILocalVariable(name: "value", scope: !1452, file: !61, line: 150, type: !6, align: 8)
!1452 = distinct !DILexicalBlock(scope: !1450, file: !2, line: 149, column: 2)
!1453 = !DILocation(line: 150, column: 7, scope: !1452, inlinedAt: !1437)
!1454 = !DILocation(line: 35, column: 89, scope: !1452, inlinedAt: !1437)
!1455 = !DILocation(line: 150, column: 15, scope: !1452, inlinedAt: !1437)
!1456 = !DILocation(line: 151, column: 7, scope: !1452, inlinedAt: !1437)
!1457 = !DILocation(line: 153, column: 33, scope: !1458, inlinedAt: !1437)
!1458 = distinct !DILexicalBlock(scope: !1452, file: !2, line: 152, column: 3)
!1459 = !DILocation(line: 153, column: 4, scope: !1458, inlinedAt: !1437)
!1460 = !DILocation(line: 153, column: 10, scope: !1458, inlinedAt: !1437)
!1461 = !DILocation(line: 154, column: 10, scope: !1458, inlinedAt: !1437)
!1462 = !DILocation(line: 156, column: 3, scope: !1452, inlinedAt: !1437)
!1463 = !DILocation(line: 157, column: 3, scope: !1452, inlinedAt: !1437)
!1464 = !DILocation(line: 158, column: 11, scope: !1452, inlinedAt: !1437)
!1465 = !DILocation(line: 158, column: 17, scope: !1452, inlinedAt: !1437)
!1466 = !DILocation(line: 164, column: 33, scope: !1467, inlinedAt: !1468)
!1467 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1468 = !DILocation(line: 160, column: 2, scope: !1445, inlinedAt: !1437)
!1469 = !DILocation(line: 164, column: 2, scope: !1467, inlinedAt: !1468)
!1470 = !DILocation(line: 166, column: 2, scope: !1467, inlinedAt: !1468)
!1471 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Lcg128Random.next_int128", scope: !61, file: !61, line: 36, type: !1472, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1472 = !DISubroutineType(types: !1473)
!1473 = !{!15, !1405}
!1474 = !DILocation(line: 36, column: 56, scope: !1471)
!1475 = !DILocalVariable(name: "self", arg: 1, scope: !1471, file: !61, line: 36, type: !1405)
!1476 = !DILocation(line: 36, column: 37, scope: !1471)
!1477 = !DILocation(line: 36, column: 72, scope: !1478, inlinedAt: !1474)
!1478 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1479 = !DILocation(line: 138, column: 46, scope: !1478, inlinedAt: !1474)
!1480 = !DILocation(line: 138, column: 72, scope: !1478, inlinedAt: !1474)
!1481 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Lcg128Random.next_int", scope: !61, file: !61, line: 37, type: !1482, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1482 = !DISubroutineType(types: !1483)
!1483 = !{!20, !1405}
!1484 = !DILocation(line: 37, column: 50, scope: !1481)
!1485 = !DILocalVariable(name: "self", arg: 1, scope: !1481, file: !61, line: 37, type: !1405)
!1486 = !DILocation(line: 37, column: 31, scope: !1481)
!1487 = !DILocation(line: 37, column: 56, scope: !1481)
!1488 = !DILocation(line: 37, column: 51, scope: !1481)
!1489 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Lcg128Random.next_short", scope: !61, file: !61, line: 38, type: !1490, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1490 = !DISubroutineType(types: !1491)
!1491 = !{!23, !1405}
!1492 = !DILocation(line: 38, column: 54, scope: !1489)
!1493 = !DILocalVariable(name: "self", arg: 1, scope: !1489, file: !61, line: 38, type: !1405)
!1494 = !DILocation(line: 38, column: 35, scope: !1489)
!1495 = !DILocation(line: 38, column: 62, scope: !1489)
!1496 = !DILocation(line: 38, column: 55, scope: !1489)
!1497 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Lcg128Random.next_byte", scope: !61, file: !61, line: 39, type: !1498, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1498 = !DISubroutineType(types: !1499)
!1499 = !{!87, !1405}
!1500 = !DILocation(line: 39, column: 51, scope: !1497)
!1501 = !DILocalVariable(name: "self", arg: 1, scope: !1497, file: !61, line: 39, type: !1405)
!1502 = !DILocation(line: 39, column: 32, scope: !1497)
!1503 = !DILocation(line: 39, column: 57, scope: !1497)
!1504 = !DILocation(line: 39, column: 52, scope: !1497)
!1505 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Lcg64Random.set_seed", scope: !61, file: !61, line: 45, type: !1506, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1506 = !DISubroutineType(types: !1507)
!1507 = !{null, !1508, !258}
!1508 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Lcg64Random*", baseType: !1509, size: 64, align: 64, dwarfAddressSpace: 0)
!1509 = !DIDerivedType(tag: DW_TAG_typedef, name: "Lcg64Random", scope: !61, file: !61, line: 43, baseType: !6, align: 8)
!1510 = !DILocation(line: 46, column: 1, scope: !1505)
!1511 = !DILocalVariable(name: "self", arg: 1, scope: !1505, file: !61, line: 45, type: !1508)
!1512 = !DILocation(line: 45, column: 30, scope: !1505)
!1513 = !DILocalVariable(name: "seed", arg: 2, scope: !1505, file: !61, line: 45, type: !258)
!1514 = !DILocation(line: 45, column: 44, scope: !1505)
!1515 = !DILocation(line: 47, column: 3, scope: !1505)
!1516 = !DILocalVariable(name: "return_value", scope: !1517, file: !61, line: 10, type: !6, align: 8)
!1517 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !52, file: !52, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1518 = !DILocation(line: 10, column: 8, scope: !1517, inlinedAt: !1519)
!1519 = !DILocation(line: 47, column: 11, scope: !1505)
!1520 = !DILocation(line: 11, column: 2, scope: !1517, inlinedAt: !1519)
!1521 = !DILocation(line: 12, column: 9, scope: !1517, inlinedAt: !1519)
!1522 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Lcg64Random.next_int", scope: !61, file: !61, line: 51, type: !1523, scopeLine: 51, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1523 = !DISubroutineType(types: !1524)
!1524 = !{!20, !1508}
!1525 = !DILocation(line: 52, column: 1, scope: !1522)
!1526 = !DILocalVariable(name: "self", arg: 1, scope: !1522, file: !61, line: 51, type: !1508)
!1527 = !DILocation(line: 51, column: 30, scope: !1522)
!1528 = !DILocalVariable(name: "s", scope: !1522, file: !61, line: 53, type: !400, align: 8)
!1529 = !DILocation(line: 53, column: 9, scope: !1522)
!1530 = !DILocation(line: 53, column: 21, scope: !1522)
!1531 = !DILocalVariable(name: "result", scope: !1522, file: !61, line: 54, type: !20, align: 4)
!1532 = !DILocation(line: 54, column: 7, scope: !1522)
!1533 = !DILocation(line: 54, column: 24, scope: !1522)
!1534 = !DILocation(line: 54, column: 17, scope: !1522)
!1535 = !DILocation(line: 55, column: 3, scope: !1522)
!1536 = !DILocation(line: 55, column: 8, scope: !1522)
!1537 = !DILocation(line: 55, column: 7, scope: !1522)
!1538 = !DILocation(line: 56, column: 9, scope: !1522)
!1539 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Lcg64Random.next_bytes", scope: !61, file: !61, line: 62, type: !1506, scopeLine: 62, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1540 = !DILocation(line: 62, column: 65, scope: !1539)
!1541 = !DILocalVariable(name: "self", arg: 1, scope: !1539, file: !61, line: 62, type: !1508)
!1542 = !DILocation(line: 62, column: 32, scope: !1539)
!1543 = !DILocalVariable(name: "bytes", arg: 2, scope: !1539, file: !61, line: 62, type: !258)
!1544 = !DILocation(line: 62, column: 46, scope: !1539)
!1545 = !DILocation(line: 60, column: 11, scope: !1546)
!1546 = distinct !DILexicalBlock(scope: !1539, file: !61, line: 62, column: 65)
!1547 = !DILocalVariable(name: "len", scope: !1548, file: !61, line: 146, type: !263, align: 8)
!1548 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1549 = !DILocation(line: 146, column: 6, scope: !1548, inlinedAt: !1540)
!1550 = !DILocation(line: 146, column: 12, scope: !1548, inlinedAt: !1540)
!1551 = !DILocation(line: 148, column: 2, scope: !1548, inlinedAt: !1540)
!1552 = !DILocation(line: 148, column: 9, scope: !1553, inlinedAt: !1540)
!1553 = distinct !DILexicalBlock(scope: !1548, file: !2, line: 148, column: 2)
!1554 = !DILocalVariable(name: "value", scope: !1555, file: !61, line: 150, type: !20, align: 4)
!1555 = distinct !DILexicalBlock(scope: !1553, file: !2, line: 149, column: 2)
!1556 = !DILocation(line: 150, column: 7, scope: !1555, inlinedAt: !1540)
!1557 = !DILocation(line: 62, column: 88, scope: !1555, inlinedAt: !1540)
!1558 = !DILocation(line: 150, column: 15, scope: !1555, inlinedAt: !1540)
!1559 = !DILocation(line: 151, column: 7, scope: !1555, inlinedAt: !1540)
!1560 = !DILocation(line: 153, column: 33, scope: !1561, inlinedAt: !1540)
!1561 = distinct !DILexicalBlock(scope: !1555, file: !2, line: 152, column: 3)
!1562 = !DILocation(line: 153, column: 4, scope: !1561, inlinedAt: !1540)
!1563 = !DILocation(line: 153, column: 10, scope: !1561, inlinedAt: !1540)
!1564 = !DILocation(line: 154, column: 10, scope: !1561, inlinedAt: !1540)
!1565 = !DILocation(line: 156, column: 3, scope: !1555, inlinedAt: !1540)
!1566 = !DILocation(line: 157, column: 3, scope: !1555, inlinedAt: !1540)
!1567 = !DILocation(line: 158, column: 11, scope: !1555, inlinedAt: !1540)
!1568 = !DILocation(line: 158, column: 17, scope: !1555, inlinedAt: !1540)
!1569 = !DILocation(line: 164, column: 33, scope: !1570, inlinedAt: !1571)
!1570 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1571 = !DILocation(line: 160, column: 2, scope: !1548, inlinedAt: !1540)
!1572 = !DILocation(line: 164, column: 2, scope: !1570, inlinedAt: !1571)
!1573 = !DILocation(line: 166, column: 2, scope: !1570, inlinedAt: !1571)
!1574 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Lcg64Random.next_int128", scope: !61, file: !61, line: 63, type: !1575, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1575 = !DISubroutineType(types: !1576)
!1576 = !{!15, !1508}
!1577 = !DILocation(line: 63, column: 55, scope: !1574)
!1578 = !DILocalVariable(name: "self", arg: 1, scope: !1574, file: !61, line: 63, type: !1508)
!1579 = !DILocation(line: 63, column: 36, scope: !1574)
!1580 = !DILocation(line: 63, column: 71, scope: !1581, inlinedAt: !1577)
!1581 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1582 = !DILocation(line: 138, column: 46, scope: !1581, inlinedAt: !1577)
!1583 = !DILocation(line: 138, column: 72, scope: !1581, inlinedAt: !1577)
!1584 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Lcg64Random.next_long", scope: !61, file: !61, line: 64, type: !1585, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1585 = !DISubroutineType(types: !1586)
!1586 = !{!6, !1508}
!1587 = !DILocation(line: 64, column: 51, scope: !1584)
!1588 = !DILocalVariable(name: "self", arg: 1, scope: !1584, file: !61, line: 64, type: !1508)
!1589 = !DILocation(line: 64, column: 32, scope: !1584)
!1590 = !DILocation(line: 64, column: 64, scope: !1591, inlinedAt: !1587)
!1591 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1592 = !DILocation(line: 139, column: 41, scope: !1591, inlinedAt: !1587)
!1593 = !DILocation(line: 139, column: 65, scope: !1591, inlinedAt: !1587)
!1594 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Lcg64Random.next_short", scope: !61, file: !61, line: 65, type: !1595, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1595 = !DISubroutineType(types: !1596)
!1596 = !{!23, !1508}
!1597 = !DILocation(line: 65, column: 53, scope: !1594)
!1598 = !DILocalVariable(name: "self", arg: 1, scope: !1594, file: !61, line: 65, type: !1508)
!1599 = !DILocation(line: 65, column: 34, scope: !1594)
!1600 = !DILocation(line: 65, column: 61, scope: !1594)
!1601 = !DILocation(line: 65, column: 54, scope: !1594)
!1602 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Lcg64Random.next_byte", scope: !61, file: !61, line: 66, type: !1603, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1603 = !DISubroutineType(types: !1604)
!1604 = !{!87, !1508}
!1605 = !DILocation(line: 66, column: 50, scope: !1602)
!1606 = !DILocalVariable(name: "self", arg: 1, scope: !1602, file: !61, line: 66, type: !1508)
!1607 = !DILocation(line: 66, column: 31, scope: !1602)
!1608 = !DILocation(line: 66, column: 56, scope: !1602)
!1609 = !DILocation(line: 66, column: 51, scope: !1602)
!1610 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Lcg32Random.set_seed", scope: !61, file: !61, line: 72, type: !1611, scopeLine: 72, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1611 = !DISubroutineType(types: !1612)
!1612 = !{null, !1613, !258}
!1613 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Lcg32Random*", baseType: !1614, size: 64, align: 64, dwarfAddressSpace: 0)
!1614 = !DIDerivedType(tag: DW_TAG_typedef, name: "Lcg32Random", scope: !61, file: !61, line: 70, baseType: !20, align: 4)
!1615 = !DILocation(line: 73, column: 1, scope: !1610)
!1616 = !DILocalVariable(name: "self", arg: 1, scope: !1610, file: !61, line: 72, type: !1613)
!1617 = !DILocation(line: 72, column: 30, scope: !1610)
!1618 = !DILocalVariable(name: "seed", arg: 2, scope: !1610, file: !61, line: 72, type: !258)
!1619 = !DILocation(line: 72, column: 44, scope: !1610)
!1620 = !DILocation(line: 74, column: 3, scope: !1610)
!1621 = !DILocalVariable(name: "return_value", scope: !1622, file: !61, line: 10, type: !20, align: 4)
!1622 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !52, file: !52, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1623 = !DILocation(line: 10, column: 8, scope: !1622, inlinedAt: !1624)
!1624 = !DILocation(line: 74, column: 11, scope: !1610)
!1625 = !DILocation(line: 11, column: 2, scope: !1622, inlinedAt: !1624)
!1626 = !DILocation(line: 12, column: 9, scope: !1622, inlinedAt: !1624)
!1627 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Lcg32Random.next_short", scope: !61, file: !61, line: 77, type: !1628, scopeLine: 77, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1628 = !DISubroutineType(types: !1629)
!1629 = !{!23, !1613}
!1630 = !DILocation(line: 78, column: 1, scope: !1627)
!1631 = !DILocalVariable(name: "self", arg: 1, scope: !1627, file: !61, line: 77, type: !1613)
!1632 = !DILocation(line: 77, column: 34, scope: !1627)
!1633 = !DILocalVariable(name: "s", scope: !1627, file: !61, line: 79, type: !518, align: 8)
!1634 = !DILocation(line: 79, column: 8, scope: !1627)
!1635 = !DILocation(line: 79, column: 19, scope: !1627)
!1636 = !DILocalVariable(name: "result", scope: !1627, file: !61, line: 80, type: !23, align: 2)
!1637 = !DILocation(line: 80, column: 9, scope: !1627)
!1638 = !DILocation(line: 80, column: 28, scope: !1627)
!1639 = !DILocation(line: 80, column: 19, scope: !1627)
!1640 = !DILocation(line: 81, column: 3, scope: !1627)
!1641 = !DILocation(line: 81, column: 8, scope: !1627)
!1642 = !DILocation(line: 81, column: 7, scope: !1627)
!1643 = !DILocation(line: 82, column: 9, scope: !1627)
!1644 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Lcg32Random.next_bytes", scope: !61, file: !61, line: 85, type: !1611, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1645 = !DILocation(line: 85, column: 65, scope: !1644)
!1646 = !DILocalVariable(name: "self", arg: 1, scope: !1644, file: !61, line: 85, type: !1613)
!1647 = !DILocation(line: 85, column: 32, scope: !1644)
!1648 = !DILocalVariable(name: "bytes", arg: 2, scope: !1644, file: !61, line: 85, type: !258)
!1649 = !DILocation(line: 85, column: 46, scope: !1644)
!1650 = !DILocalVariable(name: "len", scope: !1651, file: !61, line: 146, type: !263, align: 8)
!1651 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1652 = !DILocation(line: 146, column: 6, scope: !1651, inlinedAt: !1645)
!1653 = !DILocation(line: 146, column: 12, scope: !1651, inlinedAt: !1645)
!1654 = !DILocation(line: 148, column: 2, scope: !1651, inlinedAt: !1645)
!1655 = !DILocation(line: 148, column: 9, scope: !1656, inlinedAt: !1645)
!1656 = distinct !DILexicalBlock(scope: !1651, file: !2, line: 148, column: 2)
!1657 = !DILocalVariable(name: "value", scope: !1658, file: !61, line: 150, type: !23, align: 2)
!1658 = distinct !DILexicalBlock(scope: !1656, file: !2, line: 149, column: 2)
!1659 = !DILocation(line: 150, column: 7, scope: !1658, inlinedAt: !1645)
!1660 = !DILocation(line: 85, column: 88, scope: !1658, inlinedAt: !1645)
!1661 = !DILocation(line: 150, column: 15, scope: !1658, inlinedAt: !1645)
!1662 = !DILocation(line: 151, column: 7, scope: !1658, inlinedAt: !1645)
!1663 = !DILocation(line: 153, column: 33, scope: !1664, inlinedAt: !1645)
!1664 = distinct !DILexicalBlock(scope: !1658, file: !2, line: 152, column: 3)
!1665 = !DILocation(line: 153, column: 4, scope: !1664, inlinedAt: !1645)
!1666 = !DILocation(line: 153, column: 10, scope: !1664, inlinedAt: !1645)
!1667 = !DILocation(line: 154, column: 10, scope: !1664, inlinedAt: !1645)
!1668 = !DILocation(line: 156, column: 3, scope: !1658, inlinedAt: !1645)
!1669 = !DILocation(line: 157, column: 3, scope: !1658, inlinedAt: !1645)
!1670 = !DILocation(line: 158, column: 11, scope: !1658, inlinedAt: !1645)
!1671 = !DILocation(line: 158, column: 17, scope: !1658, inlinedAt: !1645)
!1672 = !DILocation(line: 164, column: 33, scope: !1673, inlinedAt: !1674)
!1673 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1674 = !DILocation(line: 160, column: 2, scope: !1651, inlinedAt: !1645)
!1675 = !DILocation(line: 164, column: 2, scope: !1673, inlinedAt: !1674)
!1676 = !DILocation(line: 166, column: 2, scope: !1673, inlinedAt: !1674)
!1677 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Lcg32Random.next_int128", scope: !61, file: !61, line: 86, type: !1678, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1678 = !DISubroutineType(types: !1679)
!1679 = !{!15, !1613}
!1680 = !DILocation(line: 86, column: 55, scope: !1677)
!1681 = !DILocalVariable(name: "self", arg: 1, scope: !1677, file: !61, line: 86, type: !1613)
!1682 = !DILocation(line: 86, column: 36, scope: !1677)
!1683 = !DILocation(line: 86, column: 71, scope: !1684, inlinedAt: !1680)
!1684 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1685 = !DILocation(line: 138, column: 46, scope: !1684, inlinedAt: !1680)
!1686 = !DILocation(line: 138, column: 72, scope: !1684, inlinedAt: !1680)
!1687 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Lcg32Random.next_long", scope: !61, file: !61, line: 87, type: !1688, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1688 = !DISubroutineType(types: !1689)
!1689 = !{!6, !1613}
!1690 = !DILocation(line: 87, column: 51, scope: !1687)
!1691 = !DILocalVariable(name: "self", arg: 1, scope: !1687, file: !61, line: 87, type: !1613)
!1692 = !DILocation(line: 87, column: 32, scope: !1687)
!1693 = !DILocation(line: 87, column: 64, scope: !1694, inlinedAt: !1690)
!1694 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1695 = !DILocation(line: 139, column: 41, scope: !1694, inlinedAt: !1690)
!1696 = !DILocation(line: 139, column: 65, scope: !1694, inlinedAt: !1690)
!1697 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Lcg32Random.next_int", scope: !61, file: !61, line: 88, type: !1698, scopeLine: 88, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1698 = !DISubroutineType(types: !1699)
!1699 = !{!20, !1613}
!1700 = !DILocation(line: 88, column: 49, scope: !1697)
!1701 = !DILocalVariable(name: "self", arg: 1, scope: !1697, file: !61, line: 88, type: !1613)
!1702 = !DILocation(line: 88, column: 30, scope: !1697)
!1703 = !DILocation(line: 88, column: 63, scope: !1704, inlinedAt: !1700)
!1704 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1705 = !DILocation(line: 140, column: 41, scope: !1704, inlinedAt: !1700)
!1706 = !DILocation(line: 140, column: 64, scope: !1704, inlinedAt: !1700)
!1707 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Lcg32Random.next_byte", scope: !61, file: !61, line: 89, type: !1708, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1708 = !DISubroutineType(types: !1709)
!1709 = !{!87, !1613}
!1710 = !DILocation(line: 89, column: 50, scope: !1707)
!1711 = !DILocalVariable(name: "self", arg: 1, scope: !1707, file: !61, line: 89, type: !1613)
!1712 = !DILocation(line: 89, column: 31, scope: !1707)
!1713 = !DILocation(line: 89, column: 56, scope: !1707)
!1714 = !DILocation(line: 89, column: 51, scope: !1707)
!1715 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Lcg16Random.set_seed", scope: !61, file: !61, line: 95, type: !1716, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1716 = !DISubroutineType(types: !1717)
!1717 = !{null, !1718, !258}
!1718 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Lcg16Random*", baseType: !1719, size: 64, align: 64, dwarfAddressSpace: 0)
!1719 = !DIDerivedType(tag: DW_TAG_typedef, name: "Lcg16Random", scope: !61, file: !61, line: 93, baseType: !23, align: 2)
!1720 = !DILocation(line: 96, column: 1, scope: !1715)
!1721 = !DILocalVariable(name: "self", arg: 1, scope: !1715, file: !61, line: 95, type: !1718)
!1722 = !DILocation(line: 95, column: 30, scope: !1715)
!1723 = !DILocalVariable(name: "seed", arg: 2, scope: !1715, file: !61, line: 95, type: !258)
!1724 = !DILocation(line: 95, column: 44, scope: !1715)
!1725 = !DILocation(line: 97, column: 3, scope: !1715)
!1726 = !DILocalVariable(name: "return_value", scope: !1727, file: !61, line: 10, type: !23, align: 2)
!1727 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !52, file: !52, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1728 = !DILocation(line: 10, column: 8, scope: !1727, inlinedAt: !1729)
!1729 = !DILocation(line: 97, column: 11, scope: !1715)
!1730 = !DILocation(line: 11, column: 2, scope: !1727, inlinedAt: !1729)
!1731 = !DILocation(line: 12, column: 9, scope: !1727, inlinedAt: !1729)
!1732 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Lcg16Random.next_byte", scope: !61, file: !61, line: 100, type: !1733, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1733 = !DISubroutineType(types: !1734)
!1734 = !{!87, !1718}
!1735 = !DILocation(line: 101, column: 1, scope: !1732)
!1736 = !DILocalVariable(name: "self", arg: 1, scope: !1732, file: !61, line: 100, type: !1718)
!1737 = !DILocation(line: 100, column: 31, scope: !1732)
!1738 = !DILocalVariable(name: "s", scope: !1732, file: !61, line: 102, type: !638, align: 8)
!1739 = !DILocation(line: 102, column: 10, scope: !1732)
!1740 = !DILocation(line: 102, column: 23, scope: !1732)
!1741 = !DILocalVariable(name: "result", scope: !1732, file: !61, line: 103, type: !87, align: 1)
!1742 = !DILocation(line: 103, column: 7, scope: !1732)
!1743 = !DILocation(line: 103, column: 24, scope: !1732)
!1744 = !DILocation(line: 103, column: 17, scope: !1732)
!1745 = !DILocation(line: 104, column: 3, scope: !1732)
!1746 = !DILocation(line: 104, column: 8, scope: !1732)
!1747 = !DILocation(line: 104, column: 7, scope: !1732)
!1748 = !DILocation(line: 105, column: 9, scope: !1732)
!1749 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Lcg16Random.next_bytes", scope: !61, file: !61, line: 108, type: !1716, scopeLine: 108, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1750 = !DILocation(line: 108, column: 65, scope: !1749)
!1751 = !DILocalVariable(name: "self", arg: 1, scope: !1749, file: !61, line: 108, type: !1718)
!1752 = !DILocation(line: 108, column: 32, scope: !1749)
!1753 = !DILocalVariable(name: "bytes", arg: 2, scope: !1749, file: !61, line: 108, type: !258)
!1754 = !DILocation(line: 108, column: 46, scope: !1749)
!1755 = !DILocalVariable(name: "len", scope: !1756, file: !61, line: 146, type: !263, align: 8)
!1756 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1757 = !DILocation(line: 146, column: 6, scope: !1756, inlinedAt: !1750)
!1758 = !DILocation(line: 146, column: 12, scope: !1756, inlinedAt: !1750)
!1759 = !DILocation(line: 148, column: 2, scope: !1756, inlinedAt: !1750)
!1760 = !DILocation(line: 148, column: 9, scope: !1761, inlinedAt: !1750)
!1761 = distinct !DILexicalBlock(scope: !1756, file: !2, line: 148, column: 2)
!1762 = !DILocalVariable(name: "value", scope: !1763, file: !61, line: 150, type: !87, align: 1)
!1763 = distinct !DILexicalBlock(scope: !1761, file: !2, line: 149, column: 2)
!1764 = !DILocation(line: 150, column: 7, scope: !1763, inlinedAt: !1750)
!1765 = !DILocation(line: 108, column: 88, scope: !1763, inlinedAt: !1750)
!1766 = !DILocation(line: 150, column: 15, scope: !1763, inlinedAt: !1750)
!1767 = !DILocation(line: 151, column: 7, scope: !1763, inlinedAt: !1750)
!1768 = !DILocation(line: 153, column: 33, scope: !1769, inlinedAt: !1750)
!1769 = distinct !DILexicalBlock(scope: !1763, file: !2, line: 152, column: 3)
!1770 = !DILocation(line: 153, column: 4, scope: !1769, inlinedAt: !1750)
!1771 = !DILocation(line: 153, column: 10, scope: !1769, inlinedAt: !1750)
!1772 = !DILocation(line: 154, column: 10, scope: !1769, inlinedAt: !1750)
!1773 = !DILocation(line: 156, column: 3, scope: !1763, inlinedAt: !1750)
!1774 = !DILocation(line: 157, column: 3, scope: !1763, inlinedAt: !1750)
!1775 = !DILocation(line: 158, column: 11, scope: !1763, inlinedAt: !1750)
!1776 = !DILocation(line: 158, column: 17, scope: !1763, inlinedAt: !1750)
!1777 = !DILocation(line: 164, column: 33, scope: !1778, inlinedAt: !1779)
!1778 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1779 = !DILocation(line: 160, column: 2, scope: !1756, inlinedAt: !1750)
!1780 = !DILocation(line: 164, column: 2, scope: !1778, inlinedAt: !1779)
!1781 = !DILocation(line: 166, column: 2, scope: !1778, inlinedAt: !1779)
!1782 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Lcg16Random.next_int128", scope: !61, file: !61, line: 109, type: !1783, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1783 = !DISubroutineType(types: !1784)
!1784 = !{!15, !1718}
!1785 = !DILocation(line: 109, column: 55, scope: !1782)
!1786 = !DILocalVariable(name: "self", arg: 1, scope: !1782, file: !61, line: 109, type: !1718)
!1787 = !DILocation(line: 109, column: 36, scope: !1782)
!1788 = !DILocation(line: 109, column: 71, scope: !1789, inlinedAt: !1785)
!1789 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1790 = !DILocation(line: 138, column: 46, scope: !1789, inlinedAt: !1785)
!1791 = !DILocation(line: 138, column: 72, scope: !1789, inlinedAt: !1785)
!1792 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Lcg16Random.next_long", scope: !61, file: !61, line: 110, type: !1793, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1793 = !DISubroutineType(types: !1794)
!1794 = !{!6, !1718}
!1795 = !DILocation(line: 110, column: 51, scope: !1792)
!1796 = !DILocalVariable(name: "self", arg: 1, scope: !1792, file: !61, line: 110, type: !1718)
!1797 = !DILocation(line: 110, column: 32, scope: !1792)
!1798 = !DILocation(line: 110, column: 64, scope: !1799, inlinedAt: !1795)
!1799 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1800 = !DILocation(line: 139, column: 41, scope: !1799, inlinedAt: !1795)
!1801 = !DILocation(line: 139, column: 65, scope: !1799, inlinedAt: !1795)
!1802 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Lcg16Random.next_int", scope: !61, file: !61, line: 111, type: !1803, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1803 = !DISubroutineType(types: !1804)
!1804 = !{!20, !1718}
!1805 = !DILocation(line: 111, column: 49, scope: !1802)
!1806 = !DILocalVariable(name: "self", arg: 1, scope: !1802, file: !61, line: 111, type: !1718)
!1807 = !DILocation(line: 111, column: 30, scope: !1802)
!1808 = !DILocation(line: 111, column: 63, scope: !1809, inlinedAt: !1805)
!1809 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1810 = !DILocation(line: 140, column: 41, scope: !1809, inlinedAt: !1805)
!1811 = !DILocation(line: 140, column: 64, scope: !1809, inlinedAt: !1805)
!1812 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Lcg16Random.next_short", scope: !61, file: !61, line: 112, type: !1813, scopeLine: 112, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1813 = !DISubroutineType(types: !1814)
!1814 = !{!23, !1718}
!1815 = !DILocation(line: 112, column: 53, scope: !1812)
!1816 = !DILocalVariable(name: "self", arg: 1, scope: !1812, file: !61, line: 112, type: !1718)
!1817 = !DILocation(line: 112, column: 34, scope: !1812)
!1818 = !DILocation(line: 112, column: 68, scope: !1819, inlinedAt: !1815)
!1819 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !2, file: !2, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1820 = !DILocation(line: 141, column: 44, scope: !1819, inlinedAt: !1815)
!1821 = !DILocation(line: 141, column: 68, scope: !1819, inlinedAt: !1815)
!1822 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws128Random.set_seed", scope: !78, file: !78, line: 17, type: !1823, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1823 = !DISubroutineType(types: !1824)
!1824 = !{null, !1825, !258}
!1825 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws128Random*", baseType: !1826, size: 64, align: 64, dwarfAddressSpace: 0)
!1826 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws128Random", scope: !78, file: !78, line: 11, size: 512, align: 128, elements: !1827, identifier: "std.math.random.Msws128Random")
!1827 = !{!1828, !1829, !1830, !1831}
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !1826, file: !78, line: 13, baseType: !15, size: 128, align: 128)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !1826, file: !78, line: 13, baseType: !15, size: 128, align: 128, offset: 128)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !1826, file: !78, line: 14, baseType: !15, size: 128, align: 128, offset: 256)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !1826, file: !78, line: 14, baseType: !15, size: 128, align: 128, offset: 384)
!1832 = !DILocation(line: 18, column: 1, scope: !1822)
!1833 = !DILocalVariable(name: "self", arg: 1, scope: !1822, file: !78, line: 17, type: !1825)
!1834 = !DILocation(line: 17, column: 32, scope: !1822)
!1835 = !DILocalVariable(name: "input", arg: 2, scope: !1822, file: !78, line: 17, type: !258)
!1836 = !DILocation(line: 17, column: 46, scope: !1822)
!1837 = !DILocation(line: 19, column: 3, scope: !1822)
!1838 = !DILocalVariable(name: "return_value", scope: !1839, file: !78, line: 10, type: !1840, align: 16)
!1839 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !52, file: !52, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1840 = !DICompositeType(tag: DW_TAG_array_type, baseType: !15, size: 512, align: 128, elements: !7)
!1841 = !DILocation(line: 10, column: 8, scope: !1839, inlinedAt: !1842)
!1842 = !DILocation(line: 19, column: 18, scope: !1822)
!1843 = !DILocation(line: 11, column: 2, scope: !1839, inlinedAt: !1842)
!1844 = !DILocation(line: 212, column: 20, scope: !1845, inlinedAt: !1846)
!1845 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !338, file: !338, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1846 = !DILocation(line: 19, column: 10, scope: !1822)
!1847 = !DILocation(line: 212, column: 12, scope: !1845, inlinedAt: !1846)
!1848 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws128Random.next_int128", scope: !78, file: !78, line: 23, type: !1849, scopeLine: 23, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1849 = !DISubroutineType(types: !1850)
!1850 = !{!15, !1825}
!1851 = !DILocation(line: 24, column: 1, scope: !1848)
!1852 = !DILocalVariable(name: "self", arg: 1, scope: !1848, file: !78, line: 23, type: !1825)
!1853 = !DILocation(line: 23, column: 38, scope: !1848)
!1854 = !DILocalVariable(name: "s0", scope: !1848, file: !78, line: 25, type: !15, align: 16)
!1855 = !DILocation(line: 25, column: 10, scope: !1848)
!1856 = !DILocation(line: 25, column: 15, scope: !1848)
!1857 = !DILocation(line: 26, column: 2, scope: !1848)
!1858 = !DILocation(line: 26, column: 16, scope: !1848)
!1859 = !DILocation(line: 26, column: 30, scope: !1848)
!1860 = !DILocation(line: 26, column: 44, scope: !1848)
!1861 = !DILocation(line: 27, column: 2, scope: !1848)
!1862 = !DILocation(line: 27, column: 16, scope: !1848)
!1863 = !DILocation(line: 163, column: 59, scope: !1864, inlinedAt: !1862)
!1864 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !159, file: !159, line: 163, scopeLine: 163, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1865 = !DILocation(line: 163, column: 65, scope: !1864, inlinedAt: !1862)
!1866 = !DILocation(line: 163, column: 71, scope: !1864, inlinedAt: !1862)
!1867 = !DILocation(line: 28, column: 2, scope: !1848)
!1868 = !DILocation(line: 30, column: 2, scope: !1848)
!1869 = !DILocation(line: 30, column: 16, scope: !1848)
!1870 = !DILocation(line: 30, column: 30, scope: !1848)
!1871 = !DILocation(line: 30, column: 44, scope: !1848)
!1872 = !DILocalVariable(name: "s1", scope: !1848, file: !78, line: 31, type: !15, align: 16)
!1873 = !DILocation(line: 31, column: 10, scope: !1848)
!1874 = !DILocation(line: 31, column: 15, scope: !1848)
!1875 = !DILocation(line: 32, column: 2, scope: !1848)
!1876 = !DILocation(line: 32, column: 16, scope: !1848)
!1877 = !DILocation(line: 163, column: 59, scope: !1878, inlinedAt: !1876)
!1878 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !159, file: !159, line: 163, scopeLine: 163, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1879 = !DILocation(line: 163, column: 65, scope: !1878, inlinedAt: !1876)
!1880 = !DILocation(line: 163, column: 71, scope: !1878, inlinedAt: !1876)
!1881 = !DILocation(line: 33, column: 2, scope: !1848)
!1882 = !DILocation(line: 35, column: 9, scope: !1848)
!1883 = !DILocation(line: 35, column: 14, scope: !1848)
!1884 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws128Random.next_bytes", scope: !78, file: !78, line: 41, type: !1823, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1885 = !DILocation(line: 41, column: 67, scope: !1884)
!1886 = !DILocalVariable(name: "self", arg: 1, scope: !1884, file: !78, line: 41, type: !1825)
!1887 = !DILocation(line: 41, column: 34, scope: !1884)
!1888 = !DILocalVariable(name: "bytes", arg: 2, scope: !1884, file: !78, line: 41, type: !258)
!1889 = !DILocation(line: 41, column: 48, scope: !1884)
!1890 = !DILocation(line: 39, column: 11, scope: !1891)
!1891 = distinct !DILexicalBlock(scope: !1884, file: !78, line: 41, column: 67)
!1892 = !DILocalVariable(name: "len", scope: !1893, file: !78, line: 146, type: !263, align: 8)
!1893 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1894 = !DILocation(line: 146, column: 6, scope: !1893, inlinedAt: !1885)
!1895 = !DILocation(line: 146, column: 12, scope: !1893, inlinedAt: !1885)
!1896 = !DILocation(line: 148, column: 2, scope: !1893, inlinedAt: !1885)
!1897 = !DILocation(line: 148, column: 9, scope: !1898, inlinedAt: !1885)
!1898 = distinct !DILexicalBlock(scope: !1893, file: !2, line: 148, column: 2)
!1899 = !DILocalVariable(name: "value", scope: !1900, file: !78, line: 150, type: !15, align: 16)
!1900 = distinct !DILexicalBlock(scope: !1898, file: !2, line: 149, column: 2)
!1901 = !DILocation(line: 150, column: 7, scope: !1900, inlinedAt: !1885)
!1902 = !DILocation(line: 41, column: 90, scope: !1900, inlinedAt: !1885)
!1903 = !DILocation(line: 150, column: 15, scope: !1900, inlinedAt: !1885)
!1904 = !DILocation(line: 151, column: 7, scope: !1900, inlinedAt: !1885)
!1905 = !DILocation(line: 153, column: 33, scope: !1906, inlinedAt: !1885)
!1906 = distinct !DILexicalBlock(scope: !1900, file: !2, line: 152, column: 3)
!1907 = !DILocation(line: 153, column: 4, scope: !1906, inlinedAt: !1885)
!1908 = !DILocation(line: 153, column: 10, scope: !1906, inlinedAt: !1885)
!1909 = !DILocation(line: 154, column: 10, scope: !1906, inlinedAt: !1885)
!1910 = !DILocation(line: 156, column: 3, scope: !1900, inlinedAt: !1885)
!1911 = !DILocation(line: 157, column: 3, scope: !1900, inlinedAt: !1885)
!1912 = !DILocation(line: 158, column: 11, scope: !1900, inlinedAt: !1885)
!1913 = !DILocation(line: 158, column: 17, scope: !1900, inlinedAt: !1885)
!1914 = !DILocation(line: 164, column: 33, scope: !1915, inlinedAt: !1916)
!1915 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1916 = !DILocation(line: 160, column: 2, scope: !1893, inlinedAt: !1885)
!1917 = !DILocation(line: 164, column: 2, scope: !1915, inlinedAt: !1916)
!1918 = !DILocation(line: 166, column: 2, scope: !1915, inlinedAt: !1916)
!1919 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws128Random.next_long", scope: !78, file: !78, line: 42, type: !1920, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1920 = !DISubroutineType(types: !1921)
!1921 = !{!6, !1825}
!1922 = !DILocation(line: 42, column: 53, scope: !1919)
!1923 = !DILocalVariable(name: "self", arg: 1, scope: !1919, file: !78, line: 42, type: !1825)
!1924 = !DILocation(line: 42, column: 34, scope: !1919)
!1925 = !DILocation(line: 42, column: 60, scope: !1919)
!1926 = !DILocation(line: 42, column: 54, scope: !1919)
!1927 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws128Random.next_int", scope: !78, file: !78, line: 43, type: !1928, scopeLine: 43, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1928 = !DISubroutineType(types: !1929)
!1929 = !{!20, !1825}
!1930 = !DILocation(line: 43, column: 51, scope: !1927)
!1931 = !DILocalVariable(name: "self", arg: 1, scope: !1927, file: !78, line: 43, type: !1825)
!1932 = !DILocation(line: 43, column: 32, scope: !1927)
!1933 = !DILocation(line: 43, column: 57, scope: !1927)
!1934 = !DILocation(line: 43, column: 52, scope: !1927)
!1935 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws128Random.next_short", scope: !78, file: !78, line: 44, type: !1936, scopeLine: 44, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1936 = !DISubroutineType(types: !1937)
!1937 = !{!23, !1825}
!1938 = !DILocation(line: 44, column: 55, scope: !1935)
!1939 = !DILocalVariable(name: "self", arg: 1, scope: !1935, file: !78, line: 44, type: !1825)
!1940 = !DILocation(line: 44, column: 36, scope: !1935)
!1941 = !DILocation(line: 44, column: 63, scope: !1935)
!1942 = !DILocation(line: 44, column: 56, scope: !1935)
!1943 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws128Random.next_byte", scope: !78, file: !78, line: 45, type: !1944, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1944 = !DISubroutineType(types: !1945)
!1945 = !{!87, !1825}
!1946 = !DILocation(line: 45, column: 52, scope: !1943)
!1947 = !DILocalVariable(name: "self", arg: 1, scope: !1943, file: !78, line: 45, type: !1825)
!1948 = !DILocation(line: 45, column: 33, scope: !1943)
!1949 = !DILocation(line: 45, column: 58, scope: !1943)
!1950 = !DILocation(line: 45, column: 53, scope: !1943)
!1951 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws64Random.set_seed", scope: !78, file: !78, line: 55, type: !1952, scopeLine: 55, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1952 = !DISubroutineType(types: !1953)
!1953 = !{null, !1954, !258}
!1954 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws64Random*", baseType: !1955, size: 64, align: 64, dwarfAddressSpace: 0)
!1955 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws64Random", scope: !78, file: !78, line: 49, size: 256, align: 64, elements: !1956, identifier: "std.math.random.Msws64Random")
!1956 = !{!1957, !1958, !1959, !1960}
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !1955, file: !78, line: 51, baseType: !6, size: 64, align: 64)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !1955, file: !78, line: 51, baseType: !6, size: 64, align: 64, offset: 64)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !1955, file: !78, line: 52, baseType: !6, size: 64, align: 64, offset: 128)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !1955, file: !78, line: 52, baseType: !6, size: 64, align: 64, offset: 192)
!1961 = !DILocation(line: 56, column: 1, scope: !1951)
!1962 = !DILocalVariable(name: "self", arg: 1, scope: !1951, file: !78, line: 55, type: !1954)
!1963 = !DILocation(line: 55, column: 32, scope: !1951)
!1964 = !DILocalVariable(name: "input", arg: 2, scope: !1951, file: !78, line: 55, type: !258)
!1965 = !DILocation(line: 55, column: 46, scope: !1951)
!1966 = !DILocation(line: 57, column: 3, scope: !1951)
!1967 = !DILocalVariable(name: "return_value", scope: !1968, file: !78, line: 10, type: !5, align: 16)
!1968 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !52, file: !52, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1969 = !DILocation(line: 10, column: 8, scope: !1968, inlinedAt: !1970)
!1970 = !DILocation(line: 57, column: 18, scope: !1951)
!1971 = !DILocation(line: 11, column: 2, scope: !1968, inlinedAt: !1970)
!1972 = !DILocation(line: 212, column: 20, scope: !1973, inlinedAt: !1974)
!1973 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !338, file: !338, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1974 = !DILocation(line: 57, column: 10, scope: !1951)
!1975 = !DILocation(line: 212, column: 12, scope: !1973, inlinedAt: !1974)
!1976 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws64Random.next_long", scope: !78, file: !78, line: 60, type: !1977, scopeLine: 60, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1977 = !DISubroutineType(types: !1978)
!1978 = !{!6, !1954}
!1979 = !DILocation(line: 61, column: 1, scope: !1976)
!1980 = !DILocalVariable(name: "self", arg: 1, scope: !1976, file: !78, line: 60, type: !1954)
!1981 = !DILocation(line: 60, column: 33, scope: !1976)
!1982 = !DILocalVariable(name: "s0", scope: !1976, file: !78, line: 62, type: !6, align: 8)
!1983 = !DILocation(line: 62, column: 8, scope: !1976)
!1984 = !DILocation(line: 62, column: 13, scope: !1976)
!1985 = !DILocation(line: 63, column: 2, scope: !1976)
!1986 = !DILocation(line: 63, column: 16, scope: !1976)
!1987 = !DILocation(line: 63, column: 30, scope: !1976)
!1988 = !DILocation(line: 63, column: 44, scope: !1976)
!1989 = !DILocation(line: 64, column: 2, scope: !1976)
!1990 = !DILocation(line: 64, column: 16, scope: !1976)
!1991 = !DILocation(line: 147, column: 53, scope: !1992, inlinedAt: !1990)
!1992 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !159, file: !159, line: 147, scopeLine: 147, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1993 = !DILocation(line: 147, column: 59, scope: !1992, inlinedAt: !1990)
!1994 = !DILocation(line: 147, column: 65, scope: !1992, inlinedAt: !1990)
!1995 = !DILocation(line: 65, column: 2, scope: !1976)
!1996 = !DILocation(line: 67, column: 2, scope: !1976)
!1997 = !DILocation(line: 67, column: 16, scope: !1976)
!1998 = !DILocation(line: 67, column: 30, scope: !1976)
!1999 = !DILocation(line: 67, column: 44, scope: !1976)
!2000 = !DILocalVariable(name: "s1", scope: !1976, file: !78, line: 68, type: !6, align: 8)
!2001 = !DILocation(line: 68, column: 8, scope: !1976)
!2002 = !DILocation(line: 68, column: 13, scope: !1976)
!2003 = !DILocation(line: 69, column: 2, scope: !1976)
!2004 = !DILocation(line: 69, column: 16, scope: !1976)
!2005 = !DILocation(line: 147, column: 53, scope: !2006, inlinedAt: !2004)
!2006 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !159, file: !159, line: 147, scopeLine: 147, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2007 = !DILocation(line: 147, column: 59, scope: !2006, inlinedAt: !2004)
!2008 = !DILocation(line: 147, column: 65, scope: !2006, inlinedAt: !2004)
!2009 = !DILocation(line: 70, column: 2, scope: !1976)
!2010 = !DILocation(line: 72, column: 9, scope: !1976)
!2011 = !DILocation(line: 72, column: 14, scope: !1976)
!2012 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws64Random.next_bytes", scope: !78, file: !78, line: 78, type: !1952, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2013 = !DILocation(line: 78, column: 66, scope: !2012)
!2014 = !DILocalVariable(name: "self", arg: 1, scope: !2012, file: !78, line: 78, type: !1954)
!2015 = !DILocation(line: 78, column: 33, scope: !2012)
!2016 = !DILocalVariable(name: "bytes", arg: 2, scope: !2012, file: !78, line: 78, type: !258)
!2017 = !DILocation(line: 78, column: 47, scope: !2012)
!2018 = !DILocation(line: 76, column: 11, scope: !2019)
!2019 = distinct !DILexicalBlock(scope: !2012, file: !78, line: 78, column: 66)
!2020 = !DILocalVariable(name: "len", scope: !2021, file: !78, line: 146, type: !263, align: 8)
!2021 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2022 = !DILocation(line: 146, column: 6, scope: !2021, inlinedAt: !2013)
!2023 = !DILocation(line: 146, column: 12, scope: !2021, inlinedAt: !2013)
!2024 = !DILocation(line: 148, column: 2, scope: !2021, inlinedAt: !2013)
!2025 = !DILocation(line: 148, column: 9, scope: !2026, inlinedAt: !2013)
!2026 = distinct !DILexicalBlock(scope: !2021, file: !2, line: 148, column: 2)
!2027 = !DILocalVariable(name: "value", scope: !2028, file: !78, line: 150, type: !6, align: 8)
!2028 = distinct !DILexicalBlock(scope: !2026, file: !2, line: 149, column: 2)
!2029 = !DILocation(line: 150, column: 7, scope: !2028, inlinedAt: !2013)
!2030 = !DILocation(line: 78, column: 89, scope: !2028, inlinedAt: !2013)
!2031 = !DILocation(line: 150, column: 15, scope: !2028, inlinedAt: !2013)
!2032 = !DILocation(line: 151, column: 7, scope: !2028, inlinedAt: !2013)
!2033 = !DILocation(line: 153, column: 33, scope: !2034, inlinedAt: !2013)
!2034 = distinct !DILexicalBlock(scope: !2028, file: !2, line: 152, column: 3)
!2035 = !DILocation(line: 153, column: 4, scope: !2034, inlinedAt: !2013)
!2036 = !DILocation(line: 153, column: 10, scope: !2034, inlinedAt: !2013)
!2037 = !DILocation(line: 154, column: 10, scope: !2034, inlinedAt: !2013)
!2038 = !DILocation(line: 156, column: 3, scope: !2028, inlinedAt: !2013)
!2039 = !DILocation(line: 157, column: 3, scope: !2028, inlinedAt: !2013)
!2040 = !DILocation(line: 158, column: 11, scope: !2028, inlinedAt: !2013)
!2041 = !DILocation(line: 158, column: 17, scope: !2028, inlinedAt: !2013)
!2042 = !DILocation(line: 164, column: 33, scope: !2043, inlinedAt: !2044)
!2043 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2044 = !DILocation(line: 160, column: 2, scope: !2021, inlinedAt: !2013)
!2045 = !DILocation(line: 164, column: 2, scope: !2043, inlinedAt: !2044)
!2046 = !DILocation(line: 166, column: 2, scope: !2043, inlinedAt: !2044)
!2047 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws64Random.next_int128", scope: !78, file: !78, line: 79, type: !2048, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2048 = !DISubroutineType(types: !2049)
!2049 = !{!15, !1954}
!2050 = !DILocation(line: 79, column: 56, scope: !2047)
!2051 = !DILocalVariable(name: "self", arg: 1, scope: !2047, file: !78, line: 79, type: !1954)
!2052 = !DILocation(line: 79, column: 37, scope: !2047)
!2053 = !DILocation(line: 79, column: 72, scope: !2054, inlinedAt: !2050)
!2054 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2055 = !DILocation(line: 138, column: 46, scope: !2054, inlinedAt: !2050)
!2056 = !DILocation(line: 138, column: 72, scope: !2054, inlinedAt: !2050)
!2057 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws64Random.next_int", scope: !78, file: !78, line: 80, type: !2058, scopeLine: 80, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2058 = !DISubroutineType(types: !2059)
!2059 = !{!20, !1954}
!2060 = !DILocation(line: 80, column: 50, scope: !2057)
!2061 = !DILocalVariable(name: "self", arg: 1, scope: !2057, file: !78, line: 80, type: !1954)
!2062 = !DILocation(line: 80, column: 31, scope: !2057)
!2063 = !DILocation(line: 80, column: 56, scope: !2057)
!2064 = !DILocation(line: 80, column: 51, scope: !2057)
!2065 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws64Random.next_short", scope: !78, file: !78, line: 81, type: !2066, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2066 = !DISubroutineType(types: !2067)
!2067 = !{!23, !1954}
!2068 = !DILocation(line: 81, column: 54, scope: !2065)
!2069 = !DILocalVariable(name: "self", arg: 1, scope: !2065, file: !78, line: 81, type: !1954)
!2070 = !DILocation(line: 81, column: 35, scope: !2065)
!2071 = !DILocation(line: 81, column: 62, scope: !2065)
!2072 = !DILocation(line: 81, column: 55, scope: !2065)
!2073 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws64Random.next_byte", scope: !78, file: !78, line: 82, type: !2074, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2074 = !DISubroutineType(types: !2075)
!2075 = !{!87, !1954}
!2076 = !DILocation(line: 82, column: 51, scope: !2073)
!2077 = !DILocalVariable(name: "self", arg: 1, scope: !2073, file: !78, line: 82, type: !1954)
!2078 = !DILocation(line: 82, column: 32, scope: !2073)
!2079 = !DILocation(line: 82, column: 57, scope: !2073)
!2080 = !DILocation(line: 82, column: 52, scope: !2073)
!2081 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws32Random.set_seed", scope: !78, file: !78, line: 91, type: !2082, scopeLine: 91, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2082 = !DISubroutineType(types: !2083)
!2083 = !{null, !2084, !258}
!2084 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws32Random*", baseType: !2085, size: 64, align: 64, dwarfAddressSpace: 0)
!2085 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws32Random", scope: !78, file: !78, line: 85, size: 128, align: 32, elements: !2086, identifier: "std.math.random.Msws32Random")
!2086 = !{!2087, !2088, !2089, !2090}
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !2085, file: !78, line: 87, baseType: !20, size: 32, align: 32)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !2085, file: !78, line: 87, baseType: !20, size: 32, align: 32, offset: 32)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !2085, file: !78, line: 88, baseType: !20, size: 32, align: 32, offset: 64)
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !2085, file: !78, line: 88, baseType: !20, size: 32, align: 32, offset: 96)
!2091 = !DILocation(line: 92, column: 1, scope: !2081)
!2092 = !DILocalVariable(name: "self", arg: 1, scope: !2081, file: !78, line: 91, type: !2084)
!2093 = !DILocation(line: 91, column: 32, scope: !2081)
!2094 = !DILocalVariable(name: "input", arg: 2, scope: !2081, file: !78, line: 91, type: !258)
!2095 = !DILocation(line: 91, column: 46, scope: !2081)
!2096 = !DILocation(line: 93, column: 3, scope: !2081)
!2097 = !DILocalVariable(name: "return_value", scope: !2098, file: !78, line: 10, type: !2099, align: 16)
!2098 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !52, file: !52, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2099 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 128, align: 32, elements: !7)
!2100 = !DILocation(line: 10, column: 8, scope: !2098, inlinedAt: !2101)
!2101 = !DILocation(line: 93, column: 18, scope: !2081)
!2102 = !DILocation(line: 11, column: 2, scope: !2098, inlinedAt: !2101)
!2103 = !DILocation(line: 212, column: 20, scope: !2104, inlinedAt: !2105)
!2104 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !338, file: !338, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2105 = !DILocation(line: 93, column: 10, scope: !2081)
!2106 = !DILocation(line: 212, column: 12, scope: !2104, inlinedAt: !2105)
!2107 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws32Random.next_int", scope: !78, file: !78, line: 97, type: !2108, scopeLine: 97, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2108 = !DISubroutineType(types: !2109)
!2109 = !{!20, !2084}
!2110 = !DILocation(line: 98, column: 1, scope: !2107)
!2111 = !DILocalVariable(name: "self", arg: 1, scope: !2107, file: !78, line: 97, type: !2084)
!2112 = !DILocation(line: 97, column: 31, scope: !2107)
!2113 = !DILocalVariable(name: "s0", scope: !2107, file: !78, line: 99, type: !20, align: 4)
!2114 = !DILocation(line: 99, column: 7, scope: !2107)
!2115 = !DILocation(line: 99, column: 12, scope: !2107)
!2116 = !DILocation(line: 100, column: 2, scope: !2107)
!2117 = !DILocation(line: 100, column: 16, scope: !2107)
!2118 = !DILocation(line: 100, column: 30, scope: !2107)
!2119 = !DILocation(line: 100, column: 44, scope: !2107)
!2120 = !DILocation(line: 101, column: 2, scope: !2107)
!2121 = !DILocation(line: 101, column: 16, scope: !2107)
!2122 = !DILocation(line: 99, column: 50, scope: !2123, inlinedAt: !2121)
!2123 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !159, file: !159, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2124 = !DILocation(line: 99, column: 56, scope: !2123, inlinedAt: !2121)
!2125 = !DILocation(line: 99, column: 62, scope: !2123, inlinedAt: !2121)
!2126 = !DILocation(line: 102, column: 2, scope: !2107)
!2127 = !DILocation(line: 104, column: 2, scope: !2107)
!2128 = !DILocation(line: 104, column: 16, scope: !2107)
!2129 = !DILocation(line: 104, column: 30, scope: !2107)
!2130 = !DILocation(line: 104, column: 44, scope: !2107)
!2131 = !DILocalVariable(name: "s1", scope: !2107, file: !78, line: 105, type: !20, align: 4)
!2132 = !DILocation(line: 105, column: 7, scope: !2107)
!2133 = !DILocation(line: 105, column: 12, scope: !2107)
!2134 = !DILocation(line: 106, column: 2, scope: !2107)
!2135 = !DILocation(line: 106, column: 16, scope: !2107)
!2136 = !DILocation(line: 99, column: 50, scope: !2137, inlinedAt: !2135)
!2137 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !159, file: !159, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2138 = !DILocation(line: 99, column: 56, scope: !2137, inlinedAt: !2135)
!2139 = !DILocation(line: 99, column: 62, scope: !2137, inlinedAt: !2135)
!2140 = !DILocation(line: 107, column: 2, scope: !2107)
!2141 = !DILocation(line: 109, column: 9, scope: !2107)
!2142 = !DILocation(line: 109, column: 14, scope: !2107)
!2143 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws32Random.next_bytes", scope: !78, file: !78, line: 115, type: !2082, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2144 = !DILocation(line: 115, column: 66, scope: !2143)
!2145 = !DILocalVariable(name: "self", arg: 1, scope: !2143, file: !78, line: 115, type: !2084)
!2146 = !DILocation(line: 115, column: 33, scope: !2143)
!2147 = !DILocalVariable(name: "bytes", arg: 2, scope: !2143, file: !78, line: 115, type: !258)
!2148 = !DILocation(line: 115, column: 47, scope: !2143)
!2149 = !DILocation(line: 113, column: 11, scope: !2150)
!2150 = distinct !DILexicalBlock(scope: !2143, file: !78, line: 115, column: 66)
!2151 = !DILocalVariable(name: "len", scope: !2152, file: !78, line: 146, type: !263, align: 8)
!2152 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2153 = !DILocation(line: 146, column: 6, scope: !2152, inlinedAt: !2144)
!2154 = !DILocation(line: 146, column: 12, scope: !2152, inlinedAt: !2144)
!2155 = !DILocation(line: 148, column: 2, scope: !2152, inlinedAt: !2144)
!2156 = !DILocation(line: 148, column: 9, scope: !2157, inlinedAt: !2144)
!2157 = distinct !DILexicalBlock(scope: !2152, file: !2, line: 148, column: 2)
!2158 = !DILocalVariable(name: "value", scope: !2159, file: !78, line: 150, type: !20, align: 4)
!2159 = distinct !DILexicalBlock(scope: !2157, file: !2, line: 149, column: 2)
!2160 = !DILocation(line: 150, column: 7, scope: !2159, inlinedAt: !2144)
!2161 = !DILocation(line: 115, column: 89, scope: !2159, inlinedAt: !2144)
!2162 = !DILocation(line: 150, column: 15, scope: !2159, inlinedAt: !2144)
!2163 = !DILocation(line: 151, column: 7, scope: !2159, inlinedAt: !2144)
!2164 = !DILocation(line: 153, column: 33, scope: !2165, inlinedAt: !2144)
!2165 = distinct !DILexicalBlock(scope: !2159, file: !2, line: 152, column: 3)
!2166 = !DILocation(line: 153, column: 4, scope: !2165, inlinedAt: !2144)
!2167 = !DILocation(line: 153, column: 10, scope: !2165, inlinedAt: !2144)
!2168 = !DILocation(line: 154, column: 10, scope: !2165, inlinedAt: !2144)
!2169 = !DILocation(line: 156, column: 3, scope: !2159, inlinedAt: !2144)
!2170 = !DILocation(line: 157, column: 3, scope: !2159, inlinedAt: !2144)
!2171 = !DILocation(line: 158, column: 11, scope: !2159, inlinedAt: !2144)
!2172 = !DILocation(line: 158, column: 17, scope: !2159, inlinedAt: !2144)
!2173 = !DILocation(line: 164, column: 33, scope: !2174, inlinedAt: !2175)
!2174 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2175 = !DILocation(line: 160, column: 2, scope: !2152, inlinedAt: !2144)
!2176 = !DILocation(line: 164, column: 2, scope: !2174, inlinedAt: !2175)
!2177 = !DILocation(line: 166, column: 2, scope: !2174, inlinedAt: !2175)
!2178 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws32Random.next_int128", scope: !78, file: !78, line: 116, type: !2179, scopeLine: 116, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2179 = !DISubroutineType(types: !2180)
!2180 = !{!15, !2084}
!2181 = !DILocation(line: 116, column: 56, scope: !2178)
!2182 = !DILocalVariable(name: "self", arg: 1, scope: !2178, file: !78, line: 116, type: !2084)
!2183 = !DILocation(line: 116, column: 37, scope: !2178)
!2184 = !DILocation(line: 116, column: 72, scope: !2185, inlinedAt: !2181)
!2185 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2186 = !DILocation(line: 138, column: 46, scope: !2185, inlinedAt: !2181)
!2187 = !DILocation(line: 138, column: 72, scope: !2185, inlinedAt: !2181)
!2188 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws32Random.next_long", scope: !78, file: !78, line: 117, type: !2189, scopeLine: 117, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2189 = !DISubroutineType(types: !2190)
!2190 = !{!6, !2084}
!2191 = !DILocation(line: 117, column: 52, scope: !2188)
!2192 = !DILocalVariable(name: "self", arg: 1, scope: !2188, file: !78, line: 117, type: !2084)
!2193 = !DILocation(line: 117, column: 33, scope: !2188)
!2194 = !DILocation(line: 117, column: 65, scope: !2195, inlinedAt: !2191)
!2195 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2196 = !DILocation(line: 139, column: 41, scope: !2195, inlinedAt: !2191)
!2197 = !DILocation(line: 139, column: 65, scope: !2195, inlinedAt: !2191)
!2198 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws32Random.next_short", scope: !78, file: !78, line: 118, type: !2199, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2199 = !DISubroutineType(types: !2200)
!2200 = !{!23, !2084}
!2201 = !DILocation(line: 118, column: 54, scope: !2198)
!2202 = !DILocalVariable(name: "self", arg: 1, scope: !2198, file: !78, line: 118, type: !2084)
!2203 = !DILocation(line: 118, column: 35, scope: !2198)
!2204 = !DILocation(line: 118, column: 62, scope: !2198)
!2205 = !DILocation(line: 118, column: 55, scope: !2198)
!2206 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws32Random.next_byte", scope: !78, file: !78, line: 119, type: !2207, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2207 = !DISubroutineType(types: !2208)
!2208 = !{!87, !2084}
!2209 = !DILocation(line: 119, column: 51, scope: !2206)
!2210 = !DILocalVariable(name: "self", arg: 1, scope: !2206, file: !78, line: 119, type: !2084)
!2211 = !DILocation(line: 119, column: 32, scope: !2206)
!2212 = !DILocation(line: 119, column: 57, scope: !2206)
!2213 = !DILocation(line: 119, column: 52, scope: !2206)
!2214 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws16Random.set_seed", scope: !78, file: !78, line: 129, type: !2215, scopeLine: 129, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2215 = !DISubroutineType(types: !2216)
!2216 = !{null, !2217, !258}
!2217 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws16Random*", baseType: !2218, size: 64, align: 64, dwarfAddressSpace: 0)
!2218 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws16Random", scope: !78, file: !78, line: 123, size: 64, align: 16, elements: !2219, identifier: "std.math.random.Msws16Random")
!2219 = !{!2220, !2221, !2222, !2223}
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !2218, file: !78, line: 125, baseType: !23, size: 16, align: 16)
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !2218, file: !78, line: 125, baseType: !23, size: 16, align: 16, offset: 16)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !2218, file: !78, line: 126, baseType: !23, size: 16, align: 16, offset: 32)
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !2218, file: !78, line: 126, baseType: !23, size: 16, align: 16, offset: 48)
!2224 = !DILocation(line: 130, column: 1, scope: !2214)
!2225 = !DILocalVariable(name: "self", arg: 1, scope: !2214, file: !78, line: 129, type: !2217)
!2226 = !DILocation(line: 129, column: 32, scope: !2214)
!2227 = !DILocalVariable(name: "input", arg: 2, scope: !2214, file: !78, line: 129, type: !258)
!2228 = !DILocation(line: 129, column: 46, scope: !2214)
!2229 = !DILocation(line: 131, column: 3, scope: !2214)
!2230 = !DILocalVariable(name: "return_value", scope: !2231, file: !78, line: 10, type: !2232, align: 2)
!2231 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !52, file: !52, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2232 = !DICompositeType(tag: DW_TAG_array_type, baseType: !23, size: 64, align: 16, elements: !7)
!2233 = !DILocation(line: 10, column: 8, scope: !2231, inlinedAt: !2234)
!2234 = !DILocation(line: 131, column: 18, scope: !2214)
!2235 = !DILocation(line: 11, column: 2, scope: !2231, inlinedAt: !2234)
!2236 = !DILocation(line: 212, column: 20, scope: !2237, inlinedAt: !2238)
!2237 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !338, file: !338, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2238 = !DILocation(line: 131, column: 10, scope: !2214)
!2239 = !DILocation(line: 212, column: 12, scope: !2237, inlinedAt: !2238)
!2240 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws16Random.next_short", scope: !78, file: !78, line: 135, type: !2241, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2241 = !DISubroutineType(types: !2242)
!2242 = !{!23, !2217}
!2243 = !DILocation(line: 136, column: 1, scope: !2240)
!2244 = !DILocalVariable(name: "self", arg: 1, scope: !2240, file: !78, line: 135, type: !2217)
!2245 = !DILocation(line: 135, column: 35, scope: !2240)
!2246 = !DILocalVariable(name: "s0", scope: !2240, file: !78, line: 137, type: !23, align: 2)
!2247 = !DILocation(line: 137, column: 9, scope: !2240)
!2248 = !DILocation(line: 137, column: 14, scope: !2240)
!2249 = !DILocation(line: 138, column: 2, scope: !2240)
!2250 = !DILocation(line: 138, column: 16, scope: !2240)
!2251 = !DILocation(line: 138, column: 30, scope: !2240)
!2252 = !DILocation(line: 138, column: 44, scope: !2240)
!2253 = !DILocation(line: 139, column: 2, scope: !2240)
!2254 = !DILocation(line: 139, column: 16, scope: !2240)
!2255 = !DILocation(line: 115, column: 56, scope: !2256, inlinedAt: !2254)
!2256 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !159, file: !159, line: 115, scopeLine: 115, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2257 = !DILocation(line: 115, column: 62, scope: !2256, inlinedAt: !2254)
!2258 = !DILocation(line: 115, column: 68, scope: !2256, inlinedAt: !2254)
!2259 = !DILocation(line: 140, column: 2, scope: !2240)
!2260 = !DILocation(line: 142, column: 2, scope: !2240)
!2261 = !DILocation(line: 142, column: 16, scope: !2240)
!2262 = !DILocation(line: 142, column: 30, scope: !2240)
!2263 = !DILocation(line: 142, column: 44, scope: !2240)
!2264 = !DILocalVariable(name: "s1", scope: !2240, file: !78, line: 143, type: !23, align: 2)
!2265 = !DILocation(line: 143, column: 9, scope: !2240)
!2266 = !DILocation(line: 143, column: 14, scope: !2240)
!2267 = !DILocation(line: 144, column: 2, scope: !2240)
!2268 = !DILocation(line: 144, column: 16, scope: !2240)
!2269 = !DILocation(line: 115, column: 56, scope: !2270, inlinedAt: !2268)
!2270 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !159, file: !159, line: 115, scopeLine: 115, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2271 = !DILocation(line: 115, column: 62, scope: !2270, inlinedAt: !2268)
!2272 = !DILocation(line: 115, column: 68, scope: !2270, inlinedAt: !2268)
!2273 = !DILocation(line: 145, column: 2, scope: !2240)
!2274 = !DILocation(line: 147, column: 9, scope: !2240)
!2275 = !DILocation(line: 147, column: 14, scope: !2240)
!2276 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws16Random.next_bytes", scope: !78, file: !78, line: 153, type: !2215, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2277 = !DILocation(line: 153, column: 66, scope: !2276)
!2278 = !DILocalVariable(name: "self", arg: 1, scope: !2276, file: !78, line: 153, type: !2217)
!2279 = !DILocation(line: 153, column: 33, scope: !2276)
!2280 = !DILocalVariable(name: "bytes", arg: 2, scope: !2276, file: !78, line: 153, type: !258)
!2281 = !DILocation(line: 153, column: 47, scope: !2276)
!2282 = !DILocation(line: 151, column: 11, scope: !2283)
!2283 = distinct !DILexicalBlock(scope: !2276, file: !78, line: 153, column: 66)
!2284 = !DILocalVariable(name: "len", scope: !2285, file: !78, line: 146, type: !263, align: 8)
!2285 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2286 = !DILocation(line: 146, column: 6, scope: !2285, inlinedAt: !2277)
!2287 = !DILocation(line: 146, column: 12, scope: !2285, inlinedAt: !2277)
!2288 = !DILocation(line: 148, column: 2, scope: !2285, inlinedAt: !2277)
!2289 = !DILocation(line: 148, column: 9, scope: !2290, inlinedAt: !2277)
!2290 = distinct !DILexicalBlock(scope: !2285, file: !2, line: 148, column: 2)
!2291 = !DILocalVariable(name: "value", scope: !2292, file: !78, line: 150, type: !23, align: 2)
!2292 = distinct !DILexicalBlock(scope: !2290, file: !2, line: 149, column: 2)
!2293 = !DILocation(line: 150, column: 7, scope: !2292, inlinedAt: !2277)
!2294 = !DILocation(line: 153, column: 89, scope: !2292, inlinedAt: !2277)
!2295 = !DILocation(line: 150, column: 15, scope: !2292, inlinedAt: !2277)
!2296 = !DILocation(line: 151, column: 7, scope: !2292, inlinedAt: !2277)
!2297 = !DILocation(line: 153, column: 33, scope: !2298, inlinedAt: !2277)
!2298 = distinct !DILexicalBlock(scope: !2292, file: !2, line: 152, column: 3)
!2299 = !DILocation(line: 153, column: 4, scope: !2298, inlinedAt: !2277)
!2300 = !DILocation(line: 153, column: 10, scope: !2298, inlinedAt: !2277)
!2301 = !DILocation(line: 154, column: 10, scope: !2298, inlinedAt: !2277)
!2302 = !DILocation(line: 156, column: 3, scope: !2292, inlinedAt: !2277)
!2303 = !DILocation(line: 157, column: 3, scope: !2292, inlinedAt: !2277)
!2304 = !DILocation(line: 158, column: 11, scope: !2292, inlinedAt: !2277)
!2305 = !DILocation(line: 158, column: 17, scope: !2292, inlinedAt: !2277)
!2306 = !DILocation(line: 164, column: 33, scope: !2307, inlinedAt: !2308)
!2307 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2308 = !DILocation(line: 160, column: 2, scope: !2285, inlinedAt: !2277)
!2309 = !DILocation(line: 164, column: 2, scope: !2307, inlinedAt: !2308)
!2310 = !DILocation(line: 166, column: 2, scope: !2307, inlinedAt: !2308)
!2311 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws16Random.next_int128", scope: !78, file: !78, line: 154, type: !2312, scopeLine: 154, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2312 = !DISubroutineType(types: !2313)
!2313 = !{!15, !2217}
!2314 = !DILocation(line: 154, column: 56, scope: !2311)
!2315 = !DILocalVariable(name: "self", arg: 1, scope: !2311, file: !78, line: 154, type: !2217)
!2316 = !DILocation(line: 154, column: 37, scope: !2311)
!2317 = !DILocation(line: 154, column: 72, scope: !2318, inlinedAt: !2314)
!2318 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2319 = !DILocation(line: 138, column: 46, scope: !2318, inlinedAt: !2314)
!2320 = !DILocation(line: 138, column: 72, scope: !2318, inlinedAt: !2314)
!2321 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws16Random.next_long", scope: !78, file: !78, line: 155, type: !2322, scopeLine: 155, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2322 = !DISubroutineType(types: !2323)
!2323 = !{!6, !2217}
!2324 = !DILocation(line: 155, column: 52, scope: !2321)
!2325 = !DILocalVariable(name: "self", arg: 1, scope: !2321, file: !78, line: 155, type: !2217)
!2326 = !DILocation(line: 155, column: 33, scope: !2321)
!2327 = !DILocation(line: 155, column: 65, scope: !2328, inlinedAt: !2324)
!2328 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2329 = !DILocation(line: 139, column: 41, scope: !2328, inlinedAt: !2324)
!2330 = !DILocation(line: 139, column: 65, scope: !2328, inlinedAt: !2324)
!2331 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws16Random.next_int", scope: !78, file: !78, line: 156, type: !2332, scopeLine: 156, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2332 = !DISubroutineType(types: !2333)
!2333 = !{!20, !2217}
!2334 = !DILocation(line: 156, column: 50, scope: !2331)
!2335 = !DILocalVariable(name: "self", arg: 1, scope: !2331, file: !78, line: 156, type: !2217)
!2336 = !DILocation(line: 156, column: 31, scope: !2331)
!2337 = !DILocation(line: 156, column: 64, scope: !2338, inlinedAt: !2334)
!2338 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2339 = !DILocation(line: 140, column: 41, scope: !2338, inlinedAt: !2334)
!2340 = !DILocation(line: 140, column: 64, scope: !2338, inlinedAt: !2334)
!2341 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws16Random.next_byte", scope: !78, file: !78, line: 157, type: !2342, scopeLine: 157, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2342 = !DISubroutineType(types: !2343)
!2343 = !{!87, !2217}
!2344 = !DILocation(line: 157, column: 51, scope: !2341)
!2345 = !DILocalVariable(name: "self", arg: 1, scope: !2341, file: !78, line: 157, type: !2217)
!2346 = !DILocation(line: 157, column: 32, scope: !2341)
!2347 = !DILocation(line: 157, column: 57, scope: !2341)
!2348 = !DILocation(line: 157, column: 52, scope: !2341)
!2349 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws8Random.set_seed", scope: !78, file: !78, line: 166, type: !2350, scopeLine: 166, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2350 = !DISubroutineType(types: !2351)
!2351 = !{null, !2352, !258}
!2352 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws8Random*", baseType: !2353, size: 64, align: 64, dwarfAddressSpace: 0)
!2353 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws8Random", scope: !78, file: !78, line: 160, size: 32, align: 8, elements: !2354, identifier: "std.math.random.Msws8Random")
!2354 = !{!2355, !2356, !2357, !2358}
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !2353, file: !78, line: 162, baseType: !87, size: 8, align: 8)
!2356 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !2353, file: !78, line: 162, baseType: !87, size: 8, align: 8, offset: 8)
!2357 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !2353, file: !78, line: 163, baseType: !87, size: 8, align: 8, offset: 16)
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !2353, file: !78, line: 163, baseType: !87, size: 8, align: 8, offset: 24)
!2359 = !DILocation(line: 167, column: 1, scope: !2349)
!2360 = !DILocalVariable(name: "self", arg: 1, scope: !2349, file: !78, line: 166, type: !2352)
!2361 = !DILocation(line: 166, column: 31, scope: !2349)
!2362 = !DILocalVariable(name: "input", arg: 2, scope: !2349, file: !78, line: 166, type: !258)
!2363 = !DILocation(line: 166, column: 45, scope: !2349)
!2364 = !DILocation(line: 168, column: 3, scope: !2349)
!2365 = !DILocalVariable(name: "return_value", scope: !2366, file: !78, line: 10, type: !2367, align: 1)
!2366 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !52, file: !52, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2367 = !DICompositeType(tag: DW_TAG_array_type, baseType: !87, size: 32, align: 8, elements: !7)
!2368 = !DILocation(line: 10, column: 8, scope: !2366, inlinedAt: !2369)
!2369 = !DILocation(line: 168, column: 18, scope: !2349)
!2370 = !DILocation(line: 11, column: 2, scope: !2366, inlinedAt: !2369)
!2371 = !DILocation(line: 212, column: 20, scope: !2372, inlinedAt: !2373)
!2372 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !338, file: !338, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2373 = !DILocation(line: 168, column: 10, scope: !2349)
!2374 = !DILocation(line: 212, column: 12, scope: !2372, inlinedAt: !2373)
!2375 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws8Random.next_byte", scope: !78, file: !78, line: 171, type: !2376, scopeLine: 171, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2376 = !DISubroutineType(types: !2377)
!2377 = !{!87, !2352}
!2378 = !DILocation(line: 172, column: 1, scope: !2375)
!2379 = !DILocalVariable(name: "self", arg: 1, scope: !2375, file: !78, line: 171, type: !2352)
!2380 = !DILocation(line: 171, column: 31, scope: !2375)
!2381 = !DILocalVariable(name: "s0", scope: !2375, file: !78, line: 173, type: !87, align: 1)
!2382 = !DILocation(line: 173, column: 7, scope: !2375)
!2383 = !DILocation(line: 173, column: 12, scope: !2375)
!2384 = !DILocation(line: 174, column: 2, scope: !2375)
!2385 = !DILocation(line: 174, column: 16, scope: !2375)
!2386 = !DILocation(line: 174, column: 30, scope: !2375)
!2387 = !DILocation(line: 174, column: 44, scope: !2375)
!2388 = !DILocation(line: 175, column: 2, scope: !2375)
!2389 = !DILocation(line: 175, column: 16, scope: !2375)
!2390 = !DILocation(line: 131, column: 50, scope: !2391, inlinedAt: !2389)
!2391 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !159, file: !159, line: 131, scopeLine: 131, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2392 = !DILocation(line: 131, column: 56, scope: !2391, inlinedAt: !2389)
!2393 = !DILocation(line: 131, column: 62, scope: !2391, inlinedAt: !2389)
!2394 = !DILocation(line: 176, column: 2, scope: !2375)
!2395 = !DILocation(line: 178, column: 2, scope: !2375)
!2396 = !DILocation(line: 178, column: 16, scope: !2375)
!2397 = !DILocation(line: 178, column: 30, scope: !2375)
!2398 = !DILocation(line: 178, column: 44, scope: !2375)
!2399 = !DILocalVariable(name: "s1", scope: !2375, file: !78, line: 179, type: !87, align: 1)
!2400 = !DILocation(line: 179, column: 7, scope: !2375)
!2401 = !DILocation(line: 179, column: 12, scope: !2375)
!2402 = !DILocation(line: 180, column: 2, scope: !2375)
!2403 = !DILocation(line: 180, column: 16, scope: !2375)
!2404 = !DILocation(line: 131, column: 50, scope: !2405, inlinedAt: !2403)
!2405 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !159, file: !159, line: 131, scopeLine: 131, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2406 = !DILocation(line: 131, column: 56, scope: !2405, inlinedAt: !2403)
!2407 = !DILocation(line: 131, column: 62, scope: !2405, inlinedAt: !2403)
!2408 = !DILocation(line: 181, column: 2, scope: !2375)
!2409 = !DILocation(line: 183, column: 9, scope: !2375)
!2410 = !DILocation(line: 183, column: 14, scope: !2375)
!2411 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws8Random.next_bytes", scope: !78, file: !78, line: 186, type: !2350, scopeLine: 186, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2412 = !DILocation(line: 186, column: 65, scope: !2411)
!2413 = !DILocalVariable(name: "self", arg: 1, scope: !2411, file: !78, line: 186, type: !2352)
!2414 = !DILocation(line: 186, column: 32, scope: !2411)
!2415 = !DILocalVariable(name: "bytes", arg: 2, scope: !2411, file: !78, line: 186, type: !258)
!2416 = !DILocation(line: 186, column: 46, scope: !2411)
!2417 = !DILocalVariable(name: "len", scope: !2418, file: !78, line: 146, type: !263, align: 8)
!2418 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2419 = !DILocation(line: 146, column: 6, scope: !2418, inlinedAt: !2412)
!2420 = !DILocation(line: 146, column: 12, scope: !2418, inlinedAt: !2412)
!2421 = !DILocation(line: 148, column: 2, scope: !2418, inlinedAt: !2412)
!2422 = !DILocation(line: 148, column: 9, scope: !2423, inlinedAt: !2412)
!2423 = distinct !DILexicalBlock(scope: !2418, file: !2, line: 148, column: 2)
!2424 = !DILocalVariable(name: "value", scope: !2425, file: !78, line: 150, type: !87, align: 1)
!2425 = distinct !DILexicalBlock(scope: !2423, file: !2, line: 149, column: 2)
!2426 = !DILocation(line: 150, column: 7, scope: !2425, inlinedAt: !2412)
!2427 = !DILocation(line: 186, column: 88, scope: !2425, inlinedAt: !2412)
!2428 = !DILocation(line: 150, column: 15, scope: !2425, inlinedAt: !2412)
!2429 = !DILocation(line: 151, column: 7, scope: !2425, inlinedAt: !2412)
!2430 = !DILocation(line: 153, column: 33, scope: !2431, inlinedAt: !2412)
!2431 = distinct !DILexicalBlock(scope: !2425, file: !2, line: 152, column: 3)
!2432 = !DILocation(line: 153, column: 4, scope: !2431, inlinedAt: !2412)
!2433 = !DILocation(line: 153, column: 10, scope: !2431, inlinedAt: !2412)
!2434 = !DILocation(line: 154, column: 10, scope: !2431, inlinedAt: !2412)
!2435 = !DILocation(line: 156, column: 3, scope: !2425, inlinedAt: !2412)
!2436 = !DILocation(line: 157, column: 3, scope: !2425, inlinedAt: !2412)
!2437 = !DILocation(line: 158, column: 11, scope: !2425, inlinedAt: !2412)
!2438 = !DILocation(line: 158, column: 17, scope: !2425, inlinedAt: !2412)
!2439 = !DILocation(line: 164, column: 33, scope: !2440, inlinedAt: !2441)
!2440 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2441 = !DILocation(line: 160, column: 2, scope: !2418, inlinedAt: !2412)
!2442 = !DILocation(line: 164, column: 2, scope: !2440, inlinedAt: !2441)
!2443 = !DILocation(line: 166, column: 2, scope: !2440, inlinedAt: !2441)
!2444 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws8Random.next_int128", scope: !78, file: !78, line: 187, type: !2445, scopeLine: 187, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2445 = !DISubroutineType(types: !2446)
!2446 = !{!15, !2352}
!2447 = !DILocation(line: 187, column: 55, scope: !2444)
!2448 = !DILocalVariable(name: "self", arg: 1, scope: !2444, file: !78, line: 187, type: !2352)
!2449 = !DILocation(line: 187, column: 36, scope: !2444)
!2450 = !DILocation(line: 187, column: 71, scope: !2451, inlinedAt: !2447)
!2451 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2452 = !DILocation(line: 138, column: 46, scope: !2451, inlinedAt: !2447)
!2453 = !DILocation(line: 138, column: 72, scope: !2451, inlinedAt: !2447)
!2454 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws8Random.next_long", scope: !78, file: !78, line: 188, type: !2455, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2455 = !DISubroutineType(types: !2456)
!2456 = !{!6, !2352}
!2457 = !DILocation(line: 188, column: 51, scope: !2454)
!2458 = !DILocalVariable(name: "self", arg: 1, scope: !2454, file: !78, line: 188, type: !2352)
!2459 = !DILocation(line: 188, column: 32, scope: !2454)
!2460 = !DILocation(line: 188, column: 64, scope: !2461, inlinedAt: !2457)
!2461 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2462 = !DILocation(line: 139, column: 41, scope: !2461, inlinedAt: !2457)
!2463 = !DILocation(line: 139, column: 65, scope: !2461, inlinedAt: !2457)
!2464 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws8Random.next_int", scope: !78, file: !78, line: 189, type: !2465, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2465 = !DISubroutineType(types: !2466)
!2466 = !{!20, !2352}
!2467 = !DILocation(line: 189, column: 49, scope: !2464)
!2468 = !DILocalVariable(name: "self", arg: 1, scope: !2464, file: !78, line: 189, type: !2352)
!2469 = !DILocation(line: 189, column: 30, scope: !2464)
!2470 = !DILocation(line: 189, column: 63, scope: !2471, inlinedAt: !2467)
!2471 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2472 = !DILocation(line: 140, column: 41, scope: !2471, inlinedAt: !2467)
!2473 = !DILocation(line: 140, column: 64, scope: !2471, inlinedAt: !2467)
!2474 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws8Random.next_short", scope: !78, file: !78, line: 190, type: !2475, scopeLine: 190, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2475 = !DISubroutineType(types: !2476)
!2476 = !{!23, !2352}
!2477 = !DILocation(line: 190, column: 53, scope: !2474)
!2478 = !DILocalVariable(name: "self", arg: 1, scope: !2474, file: !78, line: 190, type: !2352)
!2479 = !DILocation(line: 190, column: 34, scope: !2474)
!2480 = !DILocation(line: 190, column: 68, scope: !2481, inlinedAt: !2477)
!2481 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !2, file: !2, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2482 = !DILocation(line: 141, column: 44, scope: !2481, inlinedAt: !2477)
!2483 = !DILocation(line: 141, column: 68, scope: !2481, inlinedAt: !2477)
!2484 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.SimpleRandom.set_seed", scope: !90, file: !90, line: 6, type: !2485, scopeLine: 6, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2485 = !DISubroutineType(types: !2486)
!2486 = !{null, !2487, !258}
!2487 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "SimpleRandom*", baseType: !2488, size: 64, align: 64, dwarfAddressSpace: 0)
!2488 = !DIDerivedType(tag: DW_TAG_typedef, name: "SimpleRandom", scope: !90, file: !90, line: 3, baseType: !6, align: 8)
!2489 = !DILocation(line: 7, column: 1, scope: !2484)
!2490 = !DILocalVariable(name: "self", arg: 1, scope: !2484, file: !90, line: 6, type: !2487)
!2491 = !DILocation(line: 6, column: 31, scope: !2484)
!2492 = !DILocalVariable(name: "seed", arg: 2, scope: !2484, file: !90, line: 6, type: !258)
!2493 = !DILocation(line: 6, column: 45, scope: !2484)
!2494 = !DILocalVariable(name: "full", scope: !2484, file: !90, line: 8, type: !2495, align: 1)
!2495 = !DICompositeType(tag: DW_TAG_array_type, baseType: !87, size: 64, align: 8, elements: !1344)
!2496 = !DILocation(line: 8, column: 10, scope: !2484)
!2497 = !DILocation(line: 9, column: 18, scope: !2498)
!2498 = distinct !DILexicalBlock(scope: !2484, file: !90, line: 9, column: 2)
!2499 = !DILocalVariable(name: ".temp", scope: !2498, file: !90, line: 9, type: !263, align: 8)
!2500 = !DILocation(line: 9, column: 11, scope: !2498)
!2501 = !DILocalVariable(name: "i", scope: !2502, file: !90, line: 9, type: !263, align: 8)
!2502 = distinct !DILexicalBlock(scope: !2498, file: !90, line: 10, column: 2)
!2503 = !DILocation(line: 9, column: 11, scope: !2502)
!2504 = !DILocalVariable(name: "c", scope: !2502, file: !90, line: 9, type: !87, align: 1)
!2505 = !DILocation(line: 9, column: 14, scope: !2502)
!2506 = !DILocation(line: 9, column: 18, scope: !2502)
!2507 = !DILocation(line: 11, column: 8, scope: !2508)
!2508 = distinct !DILexicalBlock(scope: !2502, file: !90, line: 10, column: 2)
!2509 = !DILocation(line: 11, column: 18, scope: !2508)
!2510 = !DILocation(line: 11, column: 3, scope: !2508)
!2511 = !DILocation(line: 13, column: 3, scope: !2484)
!2512 = !DILocalVariable(name: "x", scope: !2513, file: !90, line: 214, type: !6, align: 8)
!2513 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !338, file: !338, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2514 = !DILocation(line: 214, column: 9, scope: !2513, inlinedAt: !2515)
!2515 = !DILocation(line: 13, column: 25, scope: !2484)
!2516 = !DILocation(line: 215, column: 38, scope: !2513, inlinedAt: !2515)
!2517 = !DILocation(line: 216, column: 10, scope: !2513, inlinedAt: !2515)
!2518 = !DILocation(line: 13, column: 11, scope: !2484)
!2519 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.SimpleRandom.next_int", scope: !90, file: !90, line: 16, type: !2520, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2520 = !DISubroutineType(types: !2521)
!2521 = !{!20, !2487}
!2522 = !DILocation(line: 17, column: 1, scope: !2519)
!2523 = !DILocalVariable(name: "self", arg: 1, scope: !2519, file: !90, line: 16, type: !2487)
!2524 = !DILocation(line: 16, column: 31, scope: !2519)
!2525 = !DILocalVariable(name: "nextseed", scope: !2519, file: !90, line: 18, type: !6, align: 8)
!2526 = !DILocation(line: 18, column: 8, scope: !2519)
!2527 = !DILocation(line: 18, column: 28, scope: !2519)
!2528 = !DILocation(line: 18, column: 21, scope: !2519)
!2529 = !DILocation(line: 19, column: 3, scope: !2519)
!2530 = !DILocation(line: 19, column: 11, scope: !2519)
!2531 = !DILocation(line: 20, column: 16, scope: !2519)
!2532 = !DILocation(line: 20, column: 10, scope: !2519)
!2533 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.SimpleRandom.next_bytes", scope: !90, file: !90, line: 26, type: !2485, scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2534 = !DILocation(line: 26, column: 66, scope: !2533)
!2535 = !DILocalVariable(name: "self", arg: 1, scope: !2533, file: !90, line: 26, type: !2487)
!2536 = !DILocation(line: 26, column: 33, scope: !2533)
!2537 = !DILocalVariable(name: "bytes", arg: 2, scope: !2533, file: !90, line: 26, type: !258)
!2538 = !DILocation(line: 26, column: 47, scope: !2533)
!2539 = !DILocation(line: 24, column: 11, scope: !2540)
!2540 = distinct !DILexicalBlock(scope: !2533, file: !90, line: 26, column: 66)
!2541 = !DILocalVariable(name: "len", scope: !2542, file: !90, line: 146, type: !263, align: 8)
!2542 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2543 = !DILocation(line: 146, column: 6, scope: !2542, inlinedAt: !2534)
!2544 = !DILocation(line: 146, column: 12, scope: !2542, inlinedAt: !2534)
!2545 = !DILocation(line: 148, column: 2, scope: !2542, inlinedAt: !2534)
!2546 = !DILocation(line: 148, column: 9, scope: !2547, inlinedAt: !2534)
!2547 = distinct !DILexicalBlock(scope: !2542, file: !2, line: 148, column: 2)
!2548 = !DILocalVariable(name: "value", scope: !2549, file: !90, line: 150, type: !20, align: 4)
!2549 = distinct !DILexicalBlock(scope: !2547, file: !2, line: 149, column: 2)
!2550 = !DILocation(line: 150, column: 7, scope: !2549, inlinedAt: !2534)
!2551 = !DILocation(line: 26, column: 89, scope: !2549, inlinedAt: !2534)
!2552 = !DILocation(line: 150, column: 15, scope: !2549, inlinedAt: !2534)
!2553 = !DILocation(line: 151, column: 7, scope: !2549, inlinedAt: !2534)
!2554 = !DILocation(line: 153, column: 33, scope: !2555, inlinedAt: !2534)
!2555 = distinct !DILexicalBlock(scope: !2549, file: !2, line: 152, column: 3)
!2556 = !DILocation(line: 153, column: 4, scope: !2555, inlinedAt: !2534)
!2557 = !DILocation(line: 153, column: 10, scope: !2555, inlinedAt: !2534)
!2558 = !DILocation(line: 154, column: 10, scope: !2555, inlinedAt: !2534)
!2559 = !DILocation(line: 156, column: 3, scope: !2549, inlinedAt: !2534)
!2560 = !DILocation(line: 157, column: 3, scope: !2549, inlinedAt: !2534)
!2561 = !DILocation(line: 158, column: 11, scope: !2549, inlinedAt: !2534)
!2562 = !DILocation(line: 158, column: 17, scope: !2549, inlinedAt: !2534)
!2563 = !DILocation(line: 164, column: 33, scope: !2564, inlinedAt: !2565)
!2564 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2565 = !DILocation(line: 160, column: 2, scope: !2542, inlinedAt: !2534)
!2566 = !DILocation(line: 164, column: 2, scope: !2564, inlinedAt: !2565)
!2567 = !DILocation(line: 166, column: 2, scope: !2564, inlinedAt: !2565)
!2568 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.SimpleRandom.next_int128", scope: !90, file: !90, line: 27, type: !2569, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2569 = !DISubroutineType(types: !2570)
!2570 = !{!15, !2487}
!2571 = !DILocation(line: 27, column: 56, scope: !2568)
!2572 = !DILocalVariable(name: "self", arg: 1, scope: !2568, file: !90, line: 27, type: !2487)
!2573 = !DILocation(line: 27, column: 37, scope: !2568)
!2574 = !DILocation(line: 27, column: 72, scope: !2575, inlinedAt: !2571)
!2575 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2576 = !DILocation(line: 138, column: 46, scope: !2575, inlinedAt: !2571)
!2577 = !DILocation(line: 138, column: 72, scope: !2575, inlinedAt: !2571)
!2578 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.SimpleRandom.next_long", scope: !90, file: !90, line: 28, type: !2579, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2579 = !DISubroutineType(types: !2580)
!2580 = !{!6, !2487}
!2581 = !DILocation(line: 28, column: 52, scope: !2578)
!2582 = !DILocalVariable(name: "self", arg: 1, scope: !2578, file: !90, line: 28, type: !2487)
!2583 = !DILocation(line: 28, column: 33, scope: !2578)
!2584 = !DILocation(line: 28, column: 65, scope: !2585, inlinedAt: !2581)
!2585 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2586 = !DILocation(line: 139, column: 41, scope: !2585, inlinedAt: !2581)
!2587 = !DILocation(line: 139, column: 65, scope: !2585, inlinedAt: !2581)
!2588 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.SimpleRandom.next_short", scope: !90, file: !90, line: 29, type: !2589, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2589 = !DISubroutineType(types: !2590)
!2590 = !{!23, !2487}
!2591 = !DILocation(line: 29, column: 54, scope: !2588)
!2592 = !DILocalVariable(name: "self", arg: 1, scope: !2588, file: !90, line: 29, type: !2487)
!2593 = !DILocation(line: 29, column: 35, scope: !2588)
!2594 = !DILocation(line: 29, column: 62, scope: !2588)
!2595 = !DILocation(line: 29, column: 55, scope: !2588)
!2596 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.SimpleRandom.next_byte", scope: !90, file: !90, line: 30, type: !2597, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2597 = !DISubroutineType(types: !2598)
!2598 = !{!87, !2487}
!2599 = !DILocation(line: 30, column: 51, scope: !2596)
!2600 = !DILocalVariable(name: "self", arg: 1, scope: !2596, file: !90, line: 30, type: !2487)
!2601 = !DILocation(line: 30, column: 32, scope: !2596)
!2602 = !DILocation(line: 30, column: 57, scope: !2596)
!2603 = !DILocation(line: 30, column: 52, scope: !2596)
!2604 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc128Random.set_seed", scope: !4, file: !4, line: 15, type: !2605, scopeLine: 15, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2605 = !DISubroutineType(types: !2606)
!2606 = !{null, !2607, !258}
!2607 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc128Random*", baseType: !2608, size: 64, align: 64, dwarfAddressSpace: 0)
!2608 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc128Random", scope: !4, file: !4, line: 13, baseType: !1840, align: 16)
!2609 = !DILocation(line: 16, column: 1, scope: !2604)
!2610 = !DILocalVariable(name: "self", arg: 1, scope: !2604, file: !4, line: 15, type: !2607)
!2611 = !DILocation(line: 15, column: 32, scope: !2604)
!2612 = !DILocalVariable(name: "input", arg: 2, scope: !2604, file: !4, line: 15, type: !258)
!2613 = !DILocation(line: 15, column: 46, scope: !2604)
!2614 = !DILocation(line: 17, column: 3, scope: !2604)
!2615 = !DILocalVariable(name: "return_value", scope: !2616, file: !4, line: 10, type: !1840, align: 16)
!2616 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !52, file: !52, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2617 = !DILocation(line: 10, column: 8, scope: !2616, inlinedAt: !2618)
!2618 = !DILocation(line: 17, column: 11, scope: !2604)
!2619 = !DILocation(line: 11, column: 2, scope: !2616, inlinedAt: !2618)
!2620 = !DILocation(line: 12, column: 9, scope: !2616, inlinedAt: !2618)
!2621 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc128Random.next_int128", scope: !4, file: !4, line: 20, type: !2622, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2622 = !DISubroutineType(types: !2623)
!2623 = !{!15, !2607}
!2624 = !DILocation(line: 21, column: 1, scope: !2621)
!2625 = !DILocalVariable(name: "self", arg: 1, scope: !2621, file: !4, line: 20, type: !2607)
!2626 = !DILocation(line: 20, column: 37, scope: !2621)
!2627 = !DILocalVariable(name: "s", scope: !2621, file: !4, line: 22, type: !283, align: 8)
!2628 = !DILocation(line: 22, column: 11, scope: !2621)
!2629 = !DILocation(line: 22, column: 28, scope: !2621)
!2630 = !DILocalVariable(name: "result", scope: !2621, file: !4, line: 23, type: !15, align: 16)
!2631 = !DILocation(line: 23, column: 10, scope: !2621)
!2632 = !DILocation(line: 23, column: 19, scope: !2621)
!2633 = !DILocation(line: 23, column: 21, scope: !2621)
!2634 = !DILocation(line: 23, column: 26, scope: !2621)
!2635 = !DILocation(line: 23, column: 28, scope: !2621)
!2636 = !DILocation(line: 23, column: 33, scope: !2621)
!2637 = !DILocation(line: 23, column: 35, scope: !2621)
!2638 = !DILocation(line: 24, column: 2, scope: !2621)
!2639 = !DILocation(line: 24, column: 9, scope: !2621)
!2640 = !DILocation(line: 24, column: 11, scope: !2621)
!2641 = !DILocation(line: 24, column: 16, scope: !2621)
!2642 = !DILocation(line: 24, column: 18, scope: !2621)
!2643 = !DILocation(line: 25, column: 2, scope: !2621)
!2644 = !DILocation(line: 25, column: 4, scope: !2621)
!2645 = !DILocation(line: 25, column: 9, scope: !2621)
!2646 = !DILocation(line: 25, column: 11, scope: !2621)
!2647 = !DILocation(line: 25, column: 16, scope: !2621)
!2648 = !DILocation(line: 25, column: 18, scope: !2621)
!2649 = !DILocation(line: 26, column: 2, scope: !2621)
!2650 = !DILocation(line: 26, column: 4, scope: !2621)
!2651 = !DILocation(line: 26, column: 9, scope: !2621)
!2652 = !DILocation(line: 26, column: 11, scope: !2621)
!2653 = !DILocation(line: 163, column: 59, scope: !2654, inlinedAt: !2651)
!2654 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !159, file: !159, line: 163, scopeLine: 163, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2655 = !DILocation(line: 163, column: 65, scope: !2654, inlinedAt: !2651)
!2656 = !DILocation(line: 163, column: 71, scope: !2654, inlinedAt: !2651)
!2657 = !DILocation(line: 26, column: 25, scope: !2621)
!2658 = !DILocation(line: 27, column: 2, scope: !2621)
!2659 = !DILocation(line: 27, column: 4, scope: !2621)
!2660 = !DILocation(line: 28, column: 9, scope: !2621)
!2661 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc128Random.next_bytes", scope: !4, file: !4, line: 34, type: !2605, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2662 = !DILocation(line: 34, column: 66, scope: !2661)
!2663 = !DILocalVariable(name: "self", arg: 1, scope: !2661, file: !4, line: 34, type: !2607)
!2664 = !DILocation(line: 34, column: 33, scope: !2661)
!2665 = !DILocalVariable(name: "bytes", arg: 2, scope: !2661, file: !4, line: 34, type: !258)
!2666 = !DILocation(line: 34, column: 47, scope: !2661)
!2667 = !DILocation(line: 32, column: 11, scope: !2668)
!2668 = distinct !DILexicalBlock(scope: !2661, file: !4, line: 34, column: 66)
!2669 = !DILocalVariable(name: "len", scope: !2670, file: !4, line: 146, type: !263, align: 8)
!2670 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2671 = !DILocation(line: 146, column: 6, scope: !2670, inlinedAt: !2662)
!2672 = !DILocation(line: 146, column: 12, scope: !2670, inlinedAt: !2662)
!2673 = !DILocation(line: 148, column: 2, scope: !2670, inlinedAt: !2662)
!2674 = !DILocation(line: 148, column: 9, scope: !2675, inlinedAt: !2662)
!2675 = distinct !DILexicalBlock(scope: !2670, file: !2, line: 148, column: 2)
!2676 = !DILocalVariable(name: "value", scope: !2677, file: !4, line: 150, type: !15, align: 16)
!2677 = distinct !DILexicalBlock(scope: !2675, file: !2, line: 149, column: 2)
!2678 = !DILocation(line: 150, column: 7, scope: !2677, inlinedAt: !2662)
!2679 = !DILocation(line: 34, column: 89, scope: !2677, inlinedAt: !2662)
!2680 = !DILocation(line: 150, column: 15, scope: !2677, inlinedAt: !2662)
!2681 = !DILocation(line: 151, column: 7, scope: !2677, inlinedAt: !2662)
!2682 = !DILocation(line: 153, column: 33, scope: !2683, inlinedAt: !2662)
!2683 = distinct !DILexicalBlock(scope: !2677, file: !2, line: 152, column: 3)
!2684 = !DILocation(line: 153, column: 4, scope: !2683, inlinedAt: !2662)
!2685 = !DILocation(line: 153, column: 10, scope: !2683, inlinedAt: !2662)
!2686 = !DILocation(line: 154, column: 10, scope: !2683, inlinedAt: !2662)
!2687 = !DILocation(line: 156, column: 3, scope: !2677, inlinedAt: !2662)
!2688 = !DILocation(line: 157, column: 3, scope: !2677, inlinedAt: !2662)
!2689 = !DILocation(line: 158, column: 11, scope: !2677, inlinedAt: !2662)
!2690 = !DILocation(line: 158, column: 17, scope: !2677, inlinedAt: !2662)
!2691 = !DILocation(line: 164, column: 33, scope: !2692, inlinedAt: !2693)
!2692 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2693 = !DILocation(line: 160, column: 2, scope: !2670, inlinedAt: !2662)
!2694 = !DILocation(line: 164, column: 2, scope: !2692, inlinedAt: !2693)
!2695 = !DILocation(line: 166, column: 2, scope: !2692, inlinedAt: !2693)
!2696 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc128Random.next_long", scope: !4, file: !4, line: 35, type: !2697, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2697 = !DISubroutineType(types: !2698)
!2698 = !{!6, !2607}
!2699 = !DILocation(line: 35, column: 52, scope: !2696)
!2700 = !DILocalVariable(name: "self", arg: 1, scope: !2696, file: !4, line: 35, type: !2607)
!2701 = !DILocation(line: 35, column: 33, scope: !2696)
!2702 = !DILocation(line: 35, column: 58, scope: !2696)
!2703 = !DILocation(line: 35, column: 53, scope: !2696)
!2704 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc128Random.next_int", scope: !4, file: !4, line: 36, type: !2705, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2705 = !DISubroutineType(types: !2706)
!2706 = !{!20, !2607}
!2707 = !DILocation(line: 36, column: 50, scope: !2704)
!2708 = !DILocalVariable(name: "self", arg: 1, scope: !2704, file: !4, line: 36, type: !2607)
!2709 = !DILocation(line: 36, column: 31, scope: !2704)
!2710 = !DILocation(line: 36, column: 56, scope: !2704)
!2711 = !DILocation(line: 36, column: 51, scope: !2704)
!2712 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc128Random.next_short", scope: !4, file: !4, line: 37, type: !2713, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2713 = !DISubroutineType(types: !2714)
!2714 = !{!23, !2607}
!2715 = !DILocation(line: 37, column: 54, scope: !2712)
!2716 = !DILocalVariable(name: "self", arg: 1, scope: !2712, file: !4, line: 37, type: !2607)
!2717 = !DILocation(line: 37, column: 35, scope: !2712)
!2718 = !DILocation(line: 37, column: 62, scope: !2712)
!2719 = !DILocation(line: 37, column: 55, scope: !2712)
!2720 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc128Random.next_byte", scope: !4, file: !4, line: 38, type: !2721, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2721 = !DISubroutineType(types: !2722)
!2722 = !{!87, !2607}
!2723 = !DILocation(line: 38, column: 51, scope: !2720)
!2724 = !DILocalVariable(name: "self", arg: 1, scope: !2720, file: !4, line: 38, type: !2607)
!2725 = !DILocation(line: 38, column: 32, scope: !2720)
!2726 = !DILocation(line: 38, column: 57, scope: !2720)
!2727 = !DILocation(line: 38, column: 52, scope: !2720)
!2728 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc64Random.set_seed", scope: !4, file: !4, line: 45, type: !2729, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2729 = !DISubroutineType(types: !2730)
!2730 = !{null, !2731, !258}
!2731 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc64Random*", baseType: !3, size: 64, align: 64, dwarfAddressSpace: 0)
!2732 = !DILocation(line: 46, column: 1, scope: !2728)
!2733 = !DILocalVariable(name: "self", arg: 1, scope: !2728, file: !4, line: 45, type: !2731)
!2734 = !DILocation(line: 45, column: 31, scope: !2728)
!2735 = !DILocalVariable(name: "input", arg: 2, scope: !2728, file: !4, line: 45, type: !258)
!2736 = !DILocation(line: 45, column: 45, scope: !2728)
!2737 = !DILocation(line: 47, column: 3, scope: !2728)
!2738 = !DILocalVariable(name: "return_value", scope: !2739, file: !4, line: 10, type: !5, align: 16)
!2739 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !52, file: !52, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2740 = !DILocation(line: 10, column: 8, scope: !2739, inlinedAt: !2741)
!2741 = !DILocation(line: 47, column: 11, scope: !2728)
!2742 = !DILocation(line: 11, column: 2, scope: !2739, inlinedAt: !2741)
!2743 = !DILocation(line: 12, column: 9, scope: !2739, inlinedAt: !2741)
!2744 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc64Random.next_long", scope: !4, file: !4, line: 50, type: !2745, scopeLine: 50, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2745 = !DISubroutineType(types: !2746)
!2746 = !{!6, !2731}
!2747 = !DILocation(line: 51, column: 1, scope: !2744)
!2748 = !DILocalVariable(name: "self", arg: 1, scope: !2744, file: !4, line: 50, type: !2731)
!2749 = !DILocation(line: 50, column: 32, scope: !2744)
!2750 = !DILocalVariable(name: "s", scope: !2744, file: !4, line: 52, type: !400, align: 8)
!2751 = !DILocation(line: 52, column: 9, scope: !2744)
!2752 = !DILocation(line: 52, column: 24, scope: !2744)
!2753 = !DILocalVariable(name: "result", scope: !2744, file: !4, line: 53, type: !6, align: 8)
!2754 = !DILocation(line: 53, column: 8, scope: !2744)
!2755 = !DILocation(line: 53, column: 17, scope: !2744)
!2756 = !DILocation(line: 53, column: 19, scope: !2744)
!2757 = !DILocation(line: 53, column: 24, scope: !2744)
!2758 = !DILocation(line: 53, column: 26, scope: !2744)
!2759 = !DILocation(line: 53, column: 31, scope: !2744)
!2760 = !DILocation(line: 53, column: 33, scope: !2744)
!2761 = !DILocation(line: 54, column: 2, scope: !2744)
!2762 = !DILocation(line: 54, column: 9, scope: !2744)
!2763 = !DILocation(line: 54, column: 11, scope: !2744)
!2764 = !DILocation(line: 54, column: 16, scope: !2744)
!2765 = !DILocation(line: 54, column: 18, scope: !2744)
!2766 = !DILocation(line: 55, column: 2, scope: !2744)
!2767 = !DILocation(line: 55, column: 4, scope: !2744)
!2768 = !DILocation(line: 55, column: 9, scope: !2744)
!2769 = !DILocation(line: 55, column: 11, scope: !2744)
!2770 = !DILocation(line: 55, column: 16, scope: !2744)
!2771 = !DILocation(line: 55, column: 18, scope: !2744)
!2772 = !DILocation(line: 56, column: 2, scope: !2744)
!2773 = !DILocation(line: 56, column: 4, scope: !2744)
!2774 = !DILocation(line: 56, column: 9, scope: !2744)
!2775 = !DILocation(line: 56, column: 11, scope: !2744)
!2776 = !DILocation(line: 147, column: 53, scope: !2777, inlinedAt: !2774)
!2777 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !159, file: !159, line: 147, scopeLine: 147, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2778 = !DILocation(line: 147, column: 59, scope: !2777, inlinedAt: !2774)
!2779 = !DILocation(line: 147, column: 65, scope: !2777, inlinedAt: !2774)
!2780 = !DILocation(line: 56, column: 25, scope: !2744)
!2781 = !DILocation(line: 57, column: 2, scope: !2744)
!2782 = !DILocation(line: 57, column: 4, scope: !2744)
!2783 = !DILocation(line: 58, column: 9, scope: !2744)
!2784 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc64Random.next_bytes", scope: !4, file: !4, line: 64, type: !2729, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2785 = !DILocation(line: 64, column: 65, scope: !2784)
!2786 = !DILocalVariable(name: "self", arg: 1, scope: !2784, file: !4, line: 64, type: !2731)
!2787 = !DILocation(line: 64, column: 32, scope: !2784)
!2788 = !DILocalVariable(name: "bytes", arg: 2, scope: !2784, file: !4, line: 64, type: !258)
!2789 = !DILocation(line: 64, column: 46, scope: !2784)
!2790 = !DILocation(line: 62, column: 11, scope: !2791)
!2791 = distinct !DILexicalBlock(scope: !2784, file: !4, line: 64, column: 65)
!2792 = !DILocalVariable(name: "len", scope: !2793, file: !4, line: 146, type: !263, align: 8)
!2793 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2794 = !DILocation(line: 146, column: 6, scope: !2793, inlinedAt: !2785)
!2795 = !DILocation(line: 146, column: 12, scope: !2793, inlinedAt: !2785)
!2796 = !DILocation(line: 148, column: 2, scope: !2793, inlinedAt: !2785)
!2797 = !DILocation(line: 148, column: 9, scope: !2798, inlinedAt: !2785)
!2798 = distinct !DILexicalBlock(scope: !2793, file: !2, line: 148, column: 2)
!2799 = !DILocalVariable(name: "value", scope: !2800, file: !4, line: 150, type: !6, align: 8)
!2800 = distinct !DILexicalBlock(scope: !2798, file: !2, line: 149, column: 2)
!2801 = !DILocation(line: 150, column: 7, scope: !2800, inlinedAt: !2785)
!2802 = !DILocation(line: 64, column: 88, scope: !2800, inlinedAt: !2785)
!2803 = !DILocation(line: 150, column: 15, scope: !2800, inlinedAt: !2785)
!2804 = !DILocation(line: 151, column: 7, scope: !2800, inlinedAt: !2785)
!2805 = !DILocation(line: 153, column: 33, scope: !2806, inlinedAt: !2785)
!2806 = distinct !DILexicalBlock(scope: !2800, file: !2, line: 152, column: 3)
!2807 = !DILocation(line: 153, column: 4, scope: !2806, inlinedAt: !2785)
!2808 = !DILocation(line: 153, column: 10, scope: !2806, inlinedAt: !2785)
!2809 = !DILocation(line: 154, column: 10, scope: !2806, inlinedAt: !2785)
!2810 = !DILocation(line: 156, column: 3, scope: !2800, inlinedAt: !2785)
!2811 = !DILocation(line: 157, column: 3, scope: !2800, inlinedAt: !2785)
!2812 = !DILocation(line: 158, column: 11, scope: !2800, inlinedAt: !2785)
!2813 = !DILocation(line: 158, column: 17, scope: !2800, inlinedAt: !2785)
!2814 = !DILocation(line: 164, column: 33, scope: !2815, inlinedAt: !2816)
!2815 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2816 = !DILocation(line: 160, column: 2, scope: !2793, inlinedAt: !2785)
!2817 = !DILocation(line: 164, column: 2, scope: !2815, inlinedAt: !2816)
!2818 = !DILocation(line: 166, column: 2, scope: !2815, inlinedAt: !2816)
!2819 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc64Random.next_int128", scope: !4, file: !4, line: 65, type: !2820, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2820 = !DISubroutineType(types: !2821)
!2821 = !{!15, !2731}
!2822 = !DILocation(line: 65, column: 55, scope: !2819)
!2823 = !DILocalVariable(name: "self", arg: 1, scope: !2819, file: !4, line: 65, type: !2731)
!2824 = !DILocation(line: 65, column: 36, scope: !2819)
!2825 = !DILocation(line: 65, column: 71, scope: !2826, inlinedAt: !2822)
!2826 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2827 = !DILocation(line: 138, column: 46, scope: !2826, inlinedAt: !2822)
!2828 = !DILocation(line: 138, column: 72, scope: !2826, inlinedAt: !2822)
!2829 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc64Random.next_int", scope: !4, file: !4, line: 66, type: !2830, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2830 = !DISubroutineType(types: !2831)
!2831 = !{!20, !2731}
!2832 = !DILocation(line: 66, column: 49, scope: !2829)
!2833 = !DILocalVariable(name: "self", arg: 1, scope: !2829, file: !4, line: 66, type: !2731)
!2834 = !DILocation(line: 66, column: 30, scope: !2829)
!2835 = !DILocation(line: 66, column: 55, scope: !2829)
!2836 = !DILocation(line: 66, column: 50, scope: !2829)
!2837 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc64Random.next_short", scope: !4, file: !4, line: 67, type: !2838, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2838 = !DISubroutineType(types: !2839)
!2839 = !{!23, !2731}
!2840 = !DILocation(line: 67, column: 53, scope: !2837)
!2841 = !DILocalVariable(name: "self", arg: 1, scope: !2837, file: !4, line: 67, type: !2731)
!2842 = !DILocation(line: 67, column: 34, scope: !2837)
!2843 = !DILocation(line: 67, column: 61, scope: !2837)
!2844 = !DILocation(line: 67, column: 54, scope: !2837)
!2845 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc64Random.next_byte", scope: !4, file: !4, line: 68, type: !2846, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2846 = !DISubroutineType(types: !2847)
!2847 = !{!87, !2731}
!2848 = !DILocation(line: 68, column: 50, scope: !2845)
!2849 = !DILocalVariable(name: "self", arg: 1, scope: !2845, file: !4, line: 68, type: !2731)
!2850 = !DILocation(line: 68, column: 31, scope: !2845)
!2851 = !DILocation(line: 68, column: 56, scope: !2845)
!2852 = !DILocation(line: 68, column: 51, scope: !2845)
!2853 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc32Random.set_seed", scope: !4, file: !4, line: 74, type: !2854, scopeLine: 74, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2854 = !DISubroutineType(types: !2855)
!2855 = !{null, !2856, !258}
!2856 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc32Random*", baseType: !2857, size: 64, align: 64, dwarfAddressSpace: 0)
!2857 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc32Random", scope: !4, file: !4, line: 72, baseType: !2099, align: 4)
!2858 = !DILocation(line: 75, column: 1, scope: !2853)
!2859 = !DILocalVariable(name: "self", arg: 1, scope: !2853, file: !4, line: 74, type: !2856)
!2860 = !DILocation(line: 74, column: 31, scope: !2853)
!2861 = !DILocalVariable(name: "input", arg: 2, scope: !2853, file: !4, line: 74, type: !258)
!2862 = !DILocation(line: 74, column: 45, scope: !2853)
!2863 = !DILocation(line: 76, column: 3, scope: !2853)
!2864 = !DILocalVariable(name: "return_value", scope: !2865, file: !4, line: 10, type: !2099, align: 16)
!2865 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !52, file: !52, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2866 = !DILocation(line: 10, column: 8, scope: !2865, inlinedAt: !2867)
!2867 = !DILocation(line: 76, column: 11, scope: !2853)
!2868 = !DILocation(line: 11, column: 2, scope: !2865, inlinedAt: !2867)
!2869 = !DILocation(line: 12, column: 9, scope: !2865, inlinedAt: !2867)
!2870 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc32Random.next_int", scope: !4, file: !4, line: 79, type: !2871, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2871 = !DISubroutineType(types: !2872)
!2872 = !{!20, !2856}
!2873 = !DILocation(line: 80, column: 1, scope: !2870)
!2874 = !DILocalVariable(name: "sfc", arg: 1, scope: !2870, file: !4, line: 79, type: !2856)
!2875 = !DILocation(line: 79, column: 30, scope: !2870)
!2876 = !DILocalVariable(name: "s", scope: !2870, file: !4, line: 81, type: !518, align: 8)
!2877 = !DILocation(line: 81, column: 8, scope: !2870)
!2878 = !DILocation(line: 81, column: 22, scope: !2870)
!2879 = !DILocalVariable(name: "result", scope: !2870, file: !4, line: 82, type: !20, align: 4)
!2880 = !DILocation(line: 82, column: 7, scope: !2870)
!2881 = !DILocation(line: 82, column: 16, scope: !2870)
!2882 = !DILocation(line: 82, column: 18, scope: !2870)
!2883 = !DILocation(line: 82, column: 23, scope: !2870)
!2884 = !DILocation(line: 82, column: 25, scope: !2870)
!2885 = !DILocation(line: 82, column: 30, scope: !2870)
!2886 = !DILocation(line: 82, column: 32, scope: !2870)
!2887 = !DILocation(line: 83, column: 2, scope: !2870)
!2888 = !DILocation(line: 83, column: 9, scope: !2870)
!2889 = !DILocation(line: 83, column: 11, scope: !2870)
!2890 = !DILocation(line: 83, column: 16, scope: !2870)
!2891 = !DILocation(line: 83, column: 18, scope: !2870)
!2892 = !DILocation(line: 84, column: 2, scope: !2870)
!2893 = !DILocation(line: 84, column: 4, scope: !2870)
!2894 = !DILocation(line: 84, column: 9, scope: !2870)
!2895 = !DILocation(line: 84, column: 11, scope: !2870)
!2896 = !DILocation(line: 84, column: 16, scope: !2870)
!2897 = !DILocation(line: 84, column: 18, scope: !2870)
!2898 = !DILocation(line: 85, column: 2, scope: !2870)
!2899 = !DILocation(line: 85, column: 4, scope: !2870)
!2900 = !DILocation(line: 85, column: 9, scope: !2870)
!2901 = !DILocation(line: 85, column: 11, scope: !2870)
!2902 = !DILocation(line: 99, column: 50, scope: !2903, inlinedAt: !2900)
!2903 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !159, file: !159, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2904 = !DILocation(line: 99, column: 56, scope: !2903, inlinedAt: !2900)
!2905 = !DILocation(line: 99, column: 62, scope: !2903, inlinedAt: !2900)
!2906 = !DILocation(line: 85, column: 25, scope: !2870)
!2907 = !DILocation(line: 86, column: 2, scope: !2870)
!2908 = !DILocation(line: 86, column: 4, scope: !2870)
!2909 = !DILocation(line: 87, column: 9, scope: !2870)
!2910 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc32Random.next_bytes", scope: !4, file: !4, line: 93, type: !2854, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2911 = !DILocation(line: 93, column: 65, scope: !2910)
!2912 = !DILocalVariable(name: "self", arg: 1, scope: !2910, file: !4, line: 93, type: !2856)
!2913 = !DILocation(line: 93, column: 32, scope: !2910)
!2914 = !DILocalVariable(name: "bytes", arg: 2, scope: !2910, file: !4, line: 93, type: !258)
!2915 = !DILocation(line: 93, column: 46, scope: !2910)
!2916 = !DILocation(line: 91, column: 11, scope: !2917)
!2917 = distinct !DILexicalBlock(scope: !2910, file: !4, line: 93, column: 65)
!2918 = !DILocalVariable(name: "len", scope: !2919, file: !4, line: 146, type: !263, align: 8)
!2919 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2920 = !DILocation(line: 146, column: 6, scope: !2919, inlinedAt: !2911)
!2921 = !DILocation(line: 146, column: 12, scope: !2919, inlinedAt: !2911)
!2922 = !DILocation(line: 148, column: 2, scope: !2919, inlinedAt: !2911)
!2923 = !DILocation(line: 148, column: 9, scope: !2924, inlinedAt: !2911)
!2924 = distinct !DILexicalBlock(scope: !2919, file: !2, line: 148, column: 2)
!2925 = !DILocalVariable(name: "value", scope: !2926, file: !4, line: 150, type: !20, align: 4)
!2926 = distinct !DILexicalBlock(scope: !2924, file: !2, line: 149, column: 2)
!2927 = !DILocation(line: 150, column: 7, scope: !2926, inlinedAt: !2911)
!2928 = !DILocation(line: 93, column: 88, scope: !2926, inlinedAt: !2911)
!2929 = !DILocation(line: 150, column: 15, scope: !2926, inlinedAt: !2911)
!2930 = !DILocation(line: 151, column: 7, scope: !2926, inlinedAt: !2911)
!2931 = !DILocation(line: 153, column: 33, scope: !2932, inlinedAt: !2911)
!2932 = distinct !DILexicalBlock(scope: !2926, file: !2, line: 152, column: 3)
!2933 = !DILocation(line: 153, column: 4, scope: !2932, inlinedAt: !2911)
!2934 = !DILocation(line: 153, column: 10, scope: !2932, inlinedAt: !2911)
!2935 = !DILocation(line: 154, column: 10, scope: !2932, inlinedAt: !2911)
!2936 = !DILocation(line: 156, column: 3, scope: !2926, inlinedAt: !2911)
!2937 = !DILocation(line: 157, column: 3, scope: !2926, inlinedAt: !2911)
!2938 = !DILocation(line: 158, column: 11, scope: !2926, inlinedAt: !2911)
!2939 = !DILocation(line: 158, column: 17, scope: !2926, inlinedAt: !2911)
!2940 = !DILocation(line: 164, column: 33, scope: !2941, inlinedAt: !2942)
!2941 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2942 = !DILocation(line: 160, column: 2, scope: !2919, inlinedAt: !2911)
!2943 = !DILocation(line: 164, column: 2, scope: !2941, inlinedAt: !2942)
!2944 = !DILocation(line: 166, column: 2, scope: !2941, inlinedAt: !2942)
!2945 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc32Random.next_int128", scope: !4, file: !4, line: 94, type: !2946, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2946 = !DISubroutineType(types: !2947)
!2947 = !{!15, !2856}
!2948 = !DILocation(line: 94, column: 55, scope: !2945)
!2949 = !DILocalVariable(name: "self", arg: 1, scope: !2945, file: !4, line: 94, type: !2856)
!2950 = !DILocation(line: 94, column: 36, scope: !2945)
!2951 = !DILocation(line: 94, column: 71, scope: !2952, inlinedAt: !2948)
!2952 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2953 = !DILocation(line: 138, column: 46, scope: !2952, inlinedAt: !2948)
!2954 = !DILocation(line: 138, column: 72, scope: !2952, inlinedAt: !2948)
!2955 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc32Random.next_long", scope: !4, file: !4, line: 95, type: !2956, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2956 = !DISubroutineType(types: !2957)
!2957 = !{!6, !2856}
!2958 = !DILocation(line: 95, column: 51, scope: !2955)
!2959 = !DILocalVariable(name: "self", arg: 1, scope: !2955, file: !4, line: 95, type: !2856)
!2960 = !DILocation(line: 95, column: 32, scope: !2955)
!2961 = !DILocation(line: 95, column: 64, scope: !2962, inlinedAt: !2958)
!2962 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2963 = !DILocation(line: 139, column: 41, scope: !2962, inlinedAt: !2958)
!2964 = !DILocation(line: 139, column: 65, scope: !2962, inlinedAt: !2958)
!2965 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc32Random.next_short", scope: !4, file: !4, line: 96, type: !2966, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2966 = !DISubroutineType(types: !2967)
!2967 = !{!23, !2856}
!2968 = !DILocation(line: 96, column: 53, scope: !2965)
!2969 = !DILocalVariable(name: "self", arg: 1, scope: !2965, file: !4, line: 96, type: !2856)
!2970 = !DILocation(line: 96, column: 34, scope: !2965)
!2971 = !DILocation(line: 96, column: 61, scope: !2965)
!2972 = !DILocation(line: 96, column: 54, scope: !2965)
!2973 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc32Random.next_byte", scope: !4, file: !4, line: 97, type: !2974, scopeLine: 97, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2974 = !DISubroutineType(types: !2975)
!2975 = !{!87, !2856}
!2976 = !DILocation(line: 97, column: 50, scope: !2973)
!2977 = !DILocalVariable(name: "self", arg: 1, scope: !2973, file: !4, line: 97, type: !2856)
!2978 = !DILocation(line: 97, column: 31, scope: !2973)
!2979 = !DILocation(line: 97, column: 56, scope: !2973)
!2980 = !DILocation(line: 97, column: 51, scope: !2973)
!2981 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc16Random.set_seed", scope: !4, file: !4, line: 103, type: !2982, scopeLine: 103, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2982 = !DISubroutineType(types: !2983)
!2983 = !{null, !2984, !258}
!2984 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc16Random*", baseType: !2985, size: 64, align: 64, dwarfAddressSpace: 0)
!2985 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc16Random", scope: !4, file: !4, line: 101, baseType: !2232, align: 2)
!2986 = !DILocation(line: 104, column: 1, scope: !2981)
!2987 = !DILocalVariable(name: "self", arg: 1, scope: !2981, file: !4, line: 103, type: !2984)
!2988 = !DILocation(line: 103, column: 31, scope: !2981)
!2989 = !DILocalVariable(name: "input", arg: 2, scope: !2981, file: !4, line: 103, type: !258)
!2990 = !DILocation(line: 103, column: 45, scope: !2981)
!2991 = !DILocation(line: 105, column: 3, scope: !2981)
!2992 = !DILocalVariable(name: "return_value", scope: !2993, file: !4, line: 10, type: !2232, align: 2)
!2993 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !52, file: !52, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2994 = !DILocation(line: 10, column: 8, scope: !2993, inlinedAt: !2995)
!2995 = !DILocation(line: 105, column: 11, scope: !2981)
!2996 = !DILocation(line: 11, column: 2, scope: !2993, inlinedAt: !2995)
!2997 = !DILocation(line: 12, column: 9, scope: !2993, inlinedAt: !2995)
!2998 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc16Random.next_short", scope: !4, file: !4, line: 109, type: !2999, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2999 = !DISubroutineType(types: !3000)
!3000 = !{!23, !2984}
!3001 = !DILocation(line: 110, column: 1, scope: !2998)
!3002 = !DILocalVariable(name: "seed", arg: 1, scope: !2998, file: !4, line: 109, type: !2984)
!3003 = !DILocation(line: 109, column: 34, scope: !2998)
!3004 = !DILocalVariable(name: "s", scope: !2998, file: !4, line: 111, type: !638, align: 8)
!3005 = !DILocation(line: 111, column: 10, scope: !2998)
!3006 = !DILocation(line: 111, column: 26, scope: !2998)
!3007 = !DILocalVariable(name: "result", scope: !2998, file: !4, line: 112, type: !23, align: 2)
!3008 = !DILocation(line: 112, column: 9, scope: !2998)
!3009 = !DILocation(line: 112, column: 18, scope: !2998)
!3010 = !DILocation(line: 112, column: 20, scope: !2998)
!3011 = !DILocation(line: 112, column: 25, scope: !2998)
!3012 = !DILocation(line: 112, column: 27, scope: !2998)
!3013 = !DILocation(line: 112, column: 32, scope: !2998)
!3014 = !DILocation(line: 112, column: 34, scope: !2998)
!3015 = !DILocation(line: 113, column: 2, scope: !2998)
!3016 = !DILocation(line: 113, column: 9, scope: !2998)
!3017 = !DILocation(line: 113, column: 11, scope: !2998)
!3018 = !DILocation(line: 113, column: 16, scope: !2998)
!3019 = !DILocation(line: 113, column: 18, scope: !2998)
!3020 = !DILocation(line: 114, column: 2, scope: !2998)
!3021 = !DILocation(line: 114, column: 4, scope: !2998)
!3022 = !DILocation(line: 114, column: 9, scope: !2998)
!3023 = !DILocation(line: 114, column: 11, scope: !2998)
!3024 = !DILocation(line: 114, column: 16, scope: !2998)
!3025 = !DILocation(line: 114, column: 18, scope: !2998)
!3026 = !DILocation(line: 115, column: 2, scope: !2998)
!3027 = !DILocation(line: 115, column: 4, scope: !2998)
!3028 = !DILocation(line: 115, column: 9, scope: !2998)
!3029 = !DILocation(line: 115, column: 11, scope: !2998)
!3030 = !DILocation(line: 115, column: 56, scope: !3031, inlinedAt: !3028)
!3031 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !159, file: !159, line: 115, scopeLine: 115, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!3032 = !DILocation(line: 115, column: 62, scope: !3031, inlinedAt: !3028)
!3033 = !DILocation(line: 115, column: 68, scope: !3031, inlinedAt: !3028)
!3034 = !DILocation(line: 115, column: 25, scope: !2998)
!3035 = !DILocation(line: 116, column: 2, scope: !2998)
!3036 = !DILocation(line: 116, column: 4, scope: !2998)
!3037 = !DILocation(line: 117, column: 9, scope: !2998)
!3038 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc16Random.next_bytes", scope: !4, file: !4, line: 123, type: !2982, scopeLine: 123, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!3039 = !DILocation(line: 123, column: 65, scope: !3038)
!3040 = !DILocalVariable(name: "self", arg: 1, scope: !3038, file: !4, line: 123, type: !2984)
!3041 = !DILocation(line: 123, column: 32, scope: !3038)
!3042 = !DILocalVariable(name: "bytes", arg: 2, scope: !3038, file: !4, line: 123, type: !258)
!3043 = !DILocation(line: 123, column: 46, scope: !3038)
!3044 = !DILocation(line: 121, column: 11, scope: !3045)
!3045 = distinct !DILexicalBlock(scope: !3038, file: !4, line: 123, column: 65)
!3046 = !DILocalVariable(name: "len", scope: !3047, file: !4, line: 146, type: !263, align: 8)
!3047 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!3048 = !DILocation(line: 146, column: 6, scope: !3047, inlinedAt: !3039)
!3049 = !DILocation(line: 146, column: 12, scope: !3047, inlinedAt: !3039)
!3050 = !DILocation(line: 148, column: 2, scope: !3047, inlinedAt: !3039)
!3051 = !DILocation(line: 148, column: 9, scope: !3052, inlinedAt: !3039)
!3052 = distinct !DILexicalBlock(scope: !3047, file: !2, line: 148, column: 2)
!3053 = !DILocalVariable(name: "value", scope: !3054, file: !4, line: 150, type: !23, align: 2)
!3054 = distinct !DILexicalBlock(scope: !3052, file: !2, line: 149, column: 2)
!3055 = !DILocation(line: 150, column: 7, scope: !3054, inlinedAt: !3039)
!3056 = !DILocation(line: 123, column: 88, scope: !3054, inlinedAt: !3039)
!3057 = !DILocation(line: 150, column: 15, scope: !3054, inlinedAt: !3039)
!3058 = !DILocation(line: 151, column: 7, scope: !3054, inlinedAt: !3039)
!3059 = !DILocation(line: 153, column: 33, scope: !3060, inlinedAt: !3039)
!3060 = distinct !DILexicalBlock(scope: !3054, file: !2, line: 152, column: 3)
!3061 = !DILocation(line: 153, column: 4, scope: !3060, inlinedAt: !3039)
!3062 = !DILocation(line: 153, column: 10, scope: !3060, inlinedAt: !3039)
!3063 = !DILocation(line: 154, column: 10, scope: !3060, inlinedAt: !3039)
!3064 = !DILocation(line: 156, column: 3, scope: !3054, inlinedAt: !3039)
!3065 = !DILocation(line: 157, column: 3, scope: !3054, inlinedAt: !3039)
!3066 = !DILocation(line: 158, column: 11, scope: !3054, inlinedAt: !3039)
!3067 = !DILocation(line: 158, column: 17, scope: !3054, inlinedAt: !3039)
!3068 = !DILocation(line: 164, column: 33, scope: !3069, inlinedAt: !3070)
!3069 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!3070 = !DILocation(line: 160, column: 2, scope: !3047, inlinedAt: !3039)
!3071 = !DILocation(line: 164, column: 2, scope: !3069, inlinedAt: !3070)
!3072 = !DILocation(line: 166, column: 2, scope: !3069, inlinedAt: !3070)
!3073 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc16Random.next_int128", scope: !4, file: !4, line: 124, type: !3074, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!3074 = !DISubroutineType(types: !3075)
!3075 = !{!15, !2984}
!3076 = !DILocation(line: 124, column: 55, scope: !3073)
!3077 = !DILocalVariable(name: "self", arg: 1, scope: !3073, file: !4, line: 124, type: !2984)
!3078 = !DILocation(line: 124, column: 36, scope: !3073)
!3079 = !DILocation(line: 124, column: 71, scope: !3080, inlinedAt: !3076)
!3080 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!3081 = !DILocation(line: 138, column: 46, scope: !3080, inlinedAt: !3076)
!3082 = !DILocation(line: 138, column: 72, scope: !3080, inlinedAt: !3076)
!3083 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc16Random.next_long", scope: !4, file: !4, line: 125, type: !3084, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!3084 = !DISubroutineType(types: !3085)
!3085 = !{!6, !2984}
!3086 = !DILocation(line: 125, column: 51, scope: !3083)
!3087 = !DILocalVariable(name: "self", arg: 1, scope: !3083, file: !4, line: 125, type: !2984)
!3088 = !DILocation(line: 125, column: 32, scope: !3083)
!3089 = !DILocation(line: 125, column: 64, scope: !3090, inlinedAt: !3086)
!3090 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!3091 = !DILocation(line: 139, column: 41, scope: !3090, inlinedAt: !3086)
!3092 = !DILocation(line: 139, column: 65, scope: !3090, inlinedAt: !3086)
!3093 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc16Random.next_int", scope: !4, file: !4, line: 126, type: !3094, scopeLine: 126, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!3094 = !DISubroutineType(types: !3095)
!3095 = !{!20, !2984}
!3096 = !DILocation(line: 126, column: 49, scope: !3093)
!3097 = !DILocalVariable(name: "self", arg: 1, scope: !3093, file: !4, line: 126, type: !2984)
!3098 = !DILocation(line: 126, column: 30, scope: !3093)
!3099 = !DILocation(line: 126, column: 63, scope: !3100, inlinedAt: !3096)
!3100 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!3101 = !DILocation(line: 140, column: 41, scope: !3100, inlinedAt: !3096)
!3102 = !DILocation(line: 140, column: 64, scope: !3100, inlinedAt: !3096)
!3103 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc16Random.next_byte", scope: !4, file: !4, line: 127, type: !3104, scopeLine: 127, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!3104 = !DISubroutineType(types: !3105)
!3105 = !{!87, !2984}
!3106 = !DILocation(line: 127, column: 50, scope: !3103)
!3107 = !DILocalVariable(name: "self", arg: 1, scope: !3103, file: !4, line: 127, type: !2984)
!3108 = !DILocation(line: 127, column: 31, scope: !3103)
!3109 = !DILocation(line: 127, column: 56, scope: !3103)
!3110 = !DILocation(line: 127, column: 51, scope: !3103)
!3111 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc8Random.set_seed", scope: !4, file: !4, line: 134, type: !3112, scopeLine: 134, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!3112 = !DISubroutineType(types: !3113)
!3113 = !{null, !3114, !258}
!3114 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc8Random*", baseType: !3115, size: 64, align: 64, dwarfAddressSpace: 0)
!3115 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc8Random", scope: !4, file: !4, line: 132, baseType: !2367, align: 1)
!3116 = !DILocation(line: 135, column: 1, scope: !3111)
!3117 = !DILocalVariable(name: "self", arg: 1, scope: !3111, file: !4, line: 134, type: !3114)
!3118 = !DILocation(line: 134, column: 30, scope: !3111)
!3119 = !DILocalVariable(name: "input", arg: 2, scope: !3111, file: !4, line: 134, type: !258)
!3120 = !DILocation(line: 134, column: 44, scope: !3111)
!3121 = !DILocation(line: 136, column: 3, scope: !3111)
!3122 = !DILocalVariable(name: "return_value", scope: !3123, file: !4, line: 10, type: !2367, align: 1)
!3123 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !52, file: !52, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!3124 = !DILocation(line: 10, column: 8, scope: !3123, inlinedAt: !3125)
!3125 = !DILocation(line: 136, column: 11, scope: !3111)
!3126 = !DILocation(line: 11, column: 2, scope: !3123, inlinedAt: !3125)
!3127 = !DILocation(line: 12, column: 9, scope: !3123, inlinedAt: !3125)
!3128 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc8Random.next_byte", scope: !4, file: !4, line: 139, type: !3129, scopeLine: 139, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!3129 = !DISubroutineType(types: !3130)
!3130 = !{!87, !3114}
!3131 = !DILocation(line: 140, column: 1, scope: !3128)
!3132 = !DILocalVariable(name: "self", arg: 1, scope: !3128, file: !4, line: 139, type: !3114)
!3133 = !DILocation(line: 139, column: 30, scope: !3128)
!3134 = !DILocalVariable(name: "s", scope: !3128, file: !4, line: 141, type: !261, align: 8)
!3135 = !DILocation(line: 141, column: 8, scope: !3128)
!3136 = !DILocation(line: 141, column: 22, scope: !3128)
!3137 = !DILocalVariable(name: "result", scope: !3128, file: !4, line: 142, type: !87, align: 1)
!3138 = !DILocation(line: 142, column: 7, scope: !3128)
!3139 = !DILocation(line: 142, column: 16, scope: !3128)
!3140 = !DILocation(line: 142, column: 18, scope: !3128)
!3141 = !DILocation(line: 142, column: 23, scope: !3128)
!3142 = !DILocation(line: 142, column: 25, scope: !3128)
!3143 = !DILocation(line: 142, column: 30, scope: !3128)
!3144 = !DILocation(line: 142, column: 32, scope: !3128)
!3145 = !DILocation(line: 143, column: 2, scope: !3128)
!3146 = !DILocation(line: 143, column: 9, scope: !3128)
!3147 = !DILocation(line: 143, column: 11, scope: !3128)
!3148 = !DILocation(line: 143, column: 16, scope: !3128)
!3149 = !DILocation(line: 143, column: 18, scope: !3128)
!3150 = !DILocation(line: 144, column: 2, scope: !3128)
!3151 = !DILocation(line: 144, column: 4, scope: !3128)
!3152 = !DILocation(line: 144, column: 9, scope: !3128)
!3153 = !DILocation(line: 144, column: 11, scope: !3128)
!3154 = !DILocation(line: 144, column: 16, scope: !3128)
!3155 = !DILocation(line: 144, column: 18, scope: !3128)
!3156 = !DILocation(line: 145, column: 2, scope: !3128)
!3157 = !DILocation(line: 145, column: 4, scope: !3128)
!3158 = !DILocation(line: 145, column: 9, scope: !3128)
!3159 = !DILocation(line: 145, column: 11, scope: !3128)
!3160 = !DILocation(line: 131, column: 50, scope: !3161, inlinedAt: !3158)
!3161 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !159, file: !159, line: 131, scopeLine: 131, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!3162 = !DILocation(line: 131, column: 56, scope: !3161, inlinedAt: !3158)
!3163 = !DILocation(line: 131, column: 62, scope: !3161, inlinedAt: !3158)
!3164 = !DILocation(line: 145, column: 24, scope: !3128)
!3165 = !DILocation(line: 146, column: 2, scope: !3128)
!3166 = !DILocation(line: 146, column: 4, scope: !3128)
!3167 = !DILocation(line: 147, column: 9, scope: !3128)
!3168 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc8Random.next_bytes", scope: !4, file: !4, line: 150, type: !3112, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!3169 = !DILocation(line: 150, column: 64, scope: !3168)
!3170 = !DILocalVariable(name: "self", arg: 1, scope: !3168, file: !4, line: 150, type: !3114)
!3171 = !DILocation(line: 150, column: 31, scope: !3168)
!3172 = !DILocalVariable(name: "bytes", arg: 2, scope: !3168, file: !4, line: 150, type: !258)
!3173 = !DILocation(line: 150, column: 45, scope: !3168)
!3174 = !DILocalVariable(name: "len", scope: !3175, file: !4, line: 146, type: !263, align: 8)
!3175 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!3176 = !DILocation(line: 146, column: 6, scope: !3175, inlinedAt: !3169)
!3177 = !DILocation(line: 146, column: 12, scope: !3175, inlinedAt: !3169)
!3178 = !DILocation(line: 148, column: 2, scope: !3175, inlinedAt: !3169)
!3179 = !DILocation(line: 148, column: 9, scope: !3180, inlinedAt: !3169)
!3180 = distinct !DILexicalBlock(scope: !3175, file: !2, line: 148, column: 2)
!3181 = !DILocalVariable(name: "value", scope: !3182, file: !4, line: 150, type: !87, align: 1)
!3182 = distinct !DILexicalBlock(scope: !3180, file: !2, line: 149, column: 2)
!3183 = !DILocation(line: 150, column: 7, scope: !3182, inlinedAt: !3169)
!3184 = !DILocation(line: 150, column: 87, scope: !3182, inlinedAt: !3169)
!3185 = !DILocation(line: 150, column: 15, scope: !3182, inlinedAt: !3169)
!3186 = !DILocation(line: 151, column: 7, scope: !3182, inlinedAt: !3169)
!3187 = !DILocation(line: 153, column: 33, scope: !3188, inlinedAt: !3169)
!3188 = distinct !DILexicalBlock(scope: !3182, file: !2, line: 152, column: 3)
!3189 = !DILocation(line: 153, column: 4, scope: !3188, inlinedAt: !3169)
!3190 = !DILocation(line: 153, column: 10, scope: !3188, inlinedAt: !3169)
!3191 = !DILocation(line: 154, column: 10, scope: !3188, inlinedAt: !3169)
!3192 = !DILocation(line: 156, column: 3, scope: !3182, inlinedAt: !3169)
!3193 = !DILocation(line: 157, column: 3, scope: !3182, inlinedAt: !3169)
!3194 = !DILocation(line: 158, column: 11, scope: !3182, inlinedAt: !3169)
!3195 = !DILocation(line: 158, column: 17, scope: !3182, inlinedAt: !3169)
!3196 = !DILocation(line: 164, column: 33, scope: !3197, inlinedAt: !3198)
!3197 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!3198 = !DILocation(line: 160, column: 2, scope: !3175, inlinedAt: !3169)
!3199 = !DILocation(line: 164, column: 2, scope: !3197, inlinedAt: !3198)
!3200 = !DILocation(line: 166, column: 2, scope: !3197, inlinedAt: !3198)
!3201 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc8Random.next_int128", scope: !4, file: !4, line: 151, type: !3202, scopeLine: 151, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!3202 = !DISubroutineType(types: !3203)
!3203 = !{!15, !3114}
!3204 = !DILocation(line: 151, column: 54, scope: !3201)
!3205 = !DILocalVariable(name: "self", arg: 1, scope: !3201, file: !4, line: 151, type: !3114)
!3206 = !DILocation(line: 151, column: 35, scope: !3201)
!3207 = !DILocation(line: 151, column: 70, scope: !3208, inlinedAt: !3204)
!3208 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!3209 = !DILocation(line: 138, column: 46, scope: !3208, inlinedAt: !3204)
!3210 = !DILocation(line: 138, column: 72, scope: !3208, inlinedAt: !3204)
!3211 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc8Random.next_long", scope: !4, file: !4, line: 152, type: !3212, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!3212 = !DISubroutineType(types: !3213)
!3213 = !{!6, !3114}
!3214 = !DILocation(line: 152, column: 50, scope: !3211)
!3215 = !DILocalVariable(name: "self", arg: 1, scope: !3211, file: !4, line: 152, type: !3114)
!3216 = !DILocation(line: 152, column: 31, scope: !3211)
!3217 = !DILocation(line: 152, column: 63, scope: !3218, inlinedAt: !3214)
!3218 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!3219 = !DILocation(line: 139, column: 41, scope: !3218, inlinedAt: !3214)
!3220 = !DILocation(line: 139, column: 65, scope: !3218, inlinedAt: !3214)
!3221 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc8Random.next_int", scope: !4, file: !4, line: 153, type: !3222, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!3222 = !DISubroutineType(types: !3223)
!3223 = !{!20, !3114}
!3224 = !DILocation(line: 153, column: 48, scope: !3221)
!3225 = !DILocalVariable(name: "self", arg: 1, scope: !3221, file: !4, line: 153, type: !3114)
!3226 = !DILocation(line: 153, column: 29, scope: !3221)
!3227 = !DILocation(line: 153, column: 62, scope: !3228, inlinedAt: !3224)
!3228 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!3229 = !DILocation(line: 140, column: 41, scope: !3228, inlinedAt: !3224)
!3230 = !DILocation(line: 140, column: 64, scope: !3228, inlinedAt: !3224)
!3231 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc8Random.next_short", scope: !4, file: !4, line: 154, type: !3232, scopeLine: 154, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!3232 = !DISubroutineType(types: !3233)
!3233 = !{!23, !3114}
!3234 = !DILocation(line: 154, column: 52, scope: !3231)
!3235 = !DILocalVariable(name: "self", arg: 1, scope: !3231, file: !4, line: 154, type: !3114)
!3236 = !DILocation(line: 154, column: 33, scope: !3231)
!3237 = !DILocation(line: 154, column: 67, scope: !3238, inlinedAt: !3234)
!3238 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !2, file: !2, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!3239 = !DILocation(line: 141, column: 44, scope: !3238, inlinedAt: !3234)
!3240 = !DILocation(line: 141, column: 68, scope: !3238, inlinedAt: !3234)
