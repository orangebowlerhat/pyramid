module gtk;

import xlib;
import gdk;
import atk;

struct AboutDialog (ImplementorIface, Buildable) {
	inline Dialog parent_instance;
	AboutDialogPrivate* priv;
}

fn Widget* AboutDialog.new () @operator (construct) @extern ("gtk_about_dialog_new");
fn void AboutDialog.add_credit_section (AboutDialog* self, ZString section_name, char** people) @extern ("gtk_about_dialog_add_credit_section");
fn char** AboutDialog.get_artists (AboutDialog* self) @extern ("gtk_about_dialog_get_artists");
fn char** AboutDialog.get_authors (AboutDialog* self) @extern ("gtk_about_dialog_get_authors");
fn ZString AboutDialog.get_comments (AboutDialog* self) @extern ("gtk_about_dialog_get_comments");
fn ZString AboutDialog.get_copyright (AboutDialog* self) @extern ("gtk_about_dialog_get_copyright");
fn char** AboutDialog.get_documenters (AboutDialog* self) @extern ("gtk_about_dialog_get_documenters");
fn ZString AboutDialog.get_license (AboutDialog* self) @extern ("gtk_about_dialog_get_license");
fn License AboutDialog.get_license_type (AboutDialog* self) @extern ("gtk_about_dialog_get_license_type");
fn Pixbuf* AboutDialog.get_logo (AboutDialog* self) @extern ("gtk_about_dialog_get_logo");
fn ZString AboutDialog.get_logo_icon_name (AboutDialog* self) @extern ("gtk_about_dialog_get_logo_icon_name");
fn ZString AboutDialog.get_program_name (AboutDialog* self) @extern ("gtk_about_dialog_get_program_name");
fn ZString AboutDialog.get_translator_credits (AboutDialog* self) @extern ("gtk_about_dialog_get_translator_credits");
fn ZString AboutDialog.get_version (AboutDialog* self) @extern ("gtk_about_dialog_get_version");
fn ZString AboutDialog.get_website (AboutDialog* self) @extern ("gtk_about_dialog_get_website");
fn ZString AboutDialog.get_website_label (AboutDialog* self) @extern ("gtk_about_dialog_get_website_label");
fn CInt AboutDialog.get_wrap_license (AboutDialog* self) @extern ("gtk_about_dialog_get_wrap_license");
fn void AboutDialog.set_artists (AboutDialog* self, char** artists) @extern ("gtk_about_dialog_set_artists");
fn void AboutDialog.set_authors (AboutDialog* self, char** authors) @extern ("gtk_about_dialog_set_authors");
fn void AboutDialog.set_comments (AboutDialog* self, ZString comments) @extern ("gtk_about_dialog_set_comments");
fn void AboutDialog.set_copyright (AboutDialog* self, ZString copyright) @extern ("gtk_about_dialog_set_copyright");
fn void AboutDialog.set_documenters (AboutDialog* self, char** documenters) @extern ("gtk_about_dialog_set_documenters");
fn void AboutDialog.set_license (AboutDialog* self, ZString license) @extern ("gtk_about_dialog_set_license");
fn void AboutDialog.set_license_type (AboutDialog* self, License license_type) @extern ("gtk_about_dialog_set_license_type");
fn void AboutDialog.set_logo (AboutDialog* self, Pixbuf* logo) @extern ("gtk_about_dialog_set_logo");
fn void AboutDialog.set_logo_icon_name (AboutDialog* self, ZString icon_name) @extern ("gtk_about_dialog_set_logo_icon_name");
fn void AboutDialog.set_program_name (AboutDialog* self, ZString name) @extern ("gtk_about_dialog_set_program_name");
fn void AboutDialog.set_translator_credits (AboutDialog* self, ZString translator_credits) @extern ("gtk_about_dialog_set_translator_credits");
fn void AboutDialog.set_version (AboutDialog* self, ZString version) @extern ("gtk_about_dialog_set_version");
fn void AboutDialog.set_website (AboutDialog* self, ZString website) @extern ("gtk_about_dialog_set_website");
fn void AboutDialog.set_website_label (AboutDialog* self, ZString website_label) @extern ("gtk_about_dialog_set_website_label");
fn void AboutDialog.set_wrap_license (AboutDialog* self, CInt wrap_license) @extern ("gtk_about_dialog_set_wrap_license");
	15 properties
	1 signals
	1 virtuals
def AboutDialogPrivate = void;

enum AccelFlags: CInt (inline CInt bit) {
	VISIBLE = 1,
	LOCKED = 2,
	MASK = 7
}

struct AccelGroup {
	inline Object parent;
	AccelGroupPrivate* priv;
}

fn AccelGroup* AccelGroup.new () @operator (construct) @extern ("gtk_accel_group_new");
fn AccelGroup* AccelGroup.from_accel_closure (AccelGroup* self, Closure* closure) @extern ("gtk_accel_group_from_accel_closure");
fn CInt AccelGroup.activate (AccelGroup* self, uint accel_quark, Object* acceleratable, uint accel_key, gdk::ModifierType accel_mods) @extern ("gtk_accel_group_activate");
fn void AccelGroup.connect (AccelGroup* self, uint accel_key, gdk::ModifierType accel_mods, AccelFlags accel_flags, Closure* closure) @extern ("gtk_accel_group_connect");
fn void AccelGroup.connect_by_path (AccelGroup* self, ZString accel_path, Closure* closure) @extern ("gtk_accel_group_connect_by_path");
fn CInt AccelGroup.disconnect (AccelGroup* self, Closure* closure) @extern ("gtk_accel_group_disconnect");
fn CInt AccelGroup.disconnect_key (AccelGroup* self, uint accel_key, gdk::ModifierType accel_mods) @extern ("gtk_accel_group_disconnect_key");
fn AccelKey* AccelGroup.find (AccelGroup* self, AccelGroupFindFunc find_func, void* data) @extern ("gtk_accel_group_find");
fn CInt AccelGroup.get_is_locked (AccelGroup* self) @extern ("gtk_accel_group_get_is_locked");
fn gdk::ModifierType AccelGroup.get_modifier_mask (AccelGroup* self) @extern ("gtk_accel_group_get_modifier_mask");
fn void AccelGroup.lock (AccelGroup* self) @extern ("gtk_accel_group_lock");
fn char** AccelGroup.query (AccelGroup* self, uint accel_key, gdk::ModifierType accel_mods, uint n_entries) @extern ("gtk_accel_group_query");
fn void AccelGroup.unlock (AccelGroup* self) @extern ("gtk_accel_group_unlock");
	2 properties
	2 signals
	1 virtuals
def AccelGroupActivate = fn CInt (AccelGroup* accel_group, Object* acceleratable, uint keyval, gdk::ModifierType modifier) @export;
struct AccelGroupEntry {
	AccelKey key;
	Closure* closure;
	uint accel_path_quark;
}

def AccelGroupFindFunc = fn CInt (AccelKey* key, Closure* closure, void* data) @export;
def AccelGroupPrivate = void;

struct AccelKey {
	uint accel_key;
	gdk::ModifierType accel_mods;
	uint accel_flags;
}

struct AccelLabel (ImplementorIface, Buildable) {
	inline Label label;
	AccelLabelPrivate* priv;
}

fn Widget* AccelLabel.new (ZString string) @operator (construct) @extern ("gtk_accel_label_new");
fn void AccelLabel.get_accel (AccelLabel* self, uint accelerator_key, gdk::ModifierType accelerator_mods) @extern ("gtk_accel_label_get_accel");
fn Widget* AccelLabel.get_accel_widget (AccelLabel* self) @extern ("gtk_accel_label_get_accel_widget");
fn uint AccelLabel.get_accel_width (AccelLabel* self) @extern ("gtk_accel_label_get_accel_width");
fn CInt AccelLabel.refetch (AccelLabel* self) @extern ("gtk_accel_label_refetch");
fn void AccelLabel.set_accel (AccelLabel* self, uint accelerator_key, gdk::ModifierType accelerator_mods) @extern ("gtk_accel_label_set_accel");
fn void AccelLabel.set_accel_closure (AccelLabel* self, Closure* accel_closure) @extern ("gtk_accel_label_set_accel_closure");
fn void AccelLabel.set_accel_widget (AccelLabel* self, Widget* accel_widget) @extern ("gtk_accel_label_set_accel_widget");
	2 properties

def AccelLabelPrivate = void;

struct AccelMap {
	void* unused;
}

fn void AccelMap.add_entry (AccelMap* self, ZString accel_path, uint accel_key, gdk::ModifierType accel_mods) @extern ("gtk_accel_map_add_entry");
fn void AccelMap.add_filter (AccelMap* self, ZString filter_pattern) @extern ("gtk_accel_map_add_filter");
fn CInt AccelMap.change_entry (AccelMap* self, ZString accel_path, uint accel_key, gdk::ModifierType accel_mods, CInt replace) @extern ("gtk_accel_map_change_entry");
fn void AccelMap.for_each (AccelMap* self, void* data, AccelMapForeach foreach_func) @extern ("gtk_accel_map_foreach");
fn void AccelMap.foreach_unfiltered (AccelMap* self, void* data, AccelMapForeach foreach_func) @extern ("gtk_accel_map_foreach_unfiltered");
fn AccelMap* AccelMap.get (AccelMap* self) @extern ("gtk_accel_map_get");
fn void AccelMap.load (AccelMap* self, ZString* file_name) @extern ("gtk_accel_map_load");
fn void AccelMap.load_fd (AccelMap* self, int fd) @extern ("gtk_accel_map_load_fd");
fn void AccelMap.load_scanner (AccelMap* self, Scanner* scanner) @extern ("gtk_accel_map_load_scanner");
fn void AccelMap.lock_path (AccelMap* self, ZString accel_path) @extern ("gtk_accel_map_lock_path");
fn CInt AccelMap.lookup_entry (AccelMap* self, ZString accel_path, AccelKey key) @extern ("gtk_accel_map_lookup_entry");
fn void AccelMap.save (AccelMap* self, ZString* file_name) @extern ("gtk_accel_map_save");
fn void AccelMap.save_fd (AccelMap* self, int fd) @extern ("gtk_accel_map_save_fd");
fn void AccelMap.unlock_path (AccelMap* self, ZString accel_path) @extern ("gtk_accel_map_unlock_path");
	1 signals
def AccelMapForeach = fn void (void* data, ZString accel_path, uint accel_key, gdk::ModifierType accel_mods, CInt changed) @export;
struct Accessible {
	inline atk::Object parent;
	AccessiblePrivate* priv;
}

fn void Accessible.connect_widget_destroyed (Accessible* self) @extern ("gtk_accessible_connect_widget_destroyed");
fn Widget* Accessible.get_widget (Accessible* self) @extern ("gtk_accessible_get_widget");
fn void Accessible.set_widget (Accessible* self, Widget* widget) @extern ("gtk_accessible_set_widget");
	1 properties
	3 virtuals
def AccessiblePrivate = void;

struct Action (Buildable) {
	inline Object object;
	ActionPrivate* private_data;
}

fn Action* Action.new (ZString name, ZString label, ZString tooltip, ZString stock_id) @operator (construct) @extern ("gtk_action_new");
fn void Action.activate (Action* self) @extern ("gtk_action_activate");
fn void Action.block_activate (Action* self) @extern ("gtk_action_block_activate");
fn void Action.connect_accelerator (Action* self) @extern ("gtk_action_connect_accelerator");
fn Widget* Action.create_icon (Action* self, int icon_size) @extern ("gtk_action_create_icon");
fn Widget* Action.create_menu (Action* self) @extern ("gtk_action_create_menu");
fn Widget* Action.create_menu_item (Action* self) @extern ("gtk_action_create_menu_item");
fn Widget* Action.create_tool_item (Action* self) @extern ("gtk_action_create_tool_item");
fn void Action.disconnect_accelerator (Action* self) @extern ("gtk_action_disconnect_accelerator");
fn Closure* Action.get_accel_closure (Action* self) @extern ("gtk_action_get_accel_closure");
fn ZString Action.get_accel_path (Action* self) @extern ("gtk_action_get_accel_path");
fn CInt Action.get_always_show_image (Action* self) @extern ("gtk_action_get_always_show_image");
fn [not parsed]* Action.get_gicon (Action* self) @extern ("gtk_action_get_gicon");
fn ZString Action.get_icon_name (Action* self) @extern ("gtk_action_get_icon_name");
fn CInt Action.get_is_important (Action* self) @extern ("gtk_action_get_is_important");
fn ZString Action.get_label (Action* self) @extern ("gtk_action_get_label");
fn ZString Action.get_name (Action* self) @extern ("gtk_action_get_name");
fn SList* Action.get_proxies (Action* self) @extern ("gtk_action_get_proxies");
fn CInt Action.get_sensitive (Action* self) @extern ("gtk_action_get_sensitive");
fn ZString Action.get_short_label (Action* self) @extern ("gtk_action_get_short_label");
fn ZString Action.get_stock_id (Action* self) @extern ("gtk_action_get_stock_id");
fn ZString Action.get_tooltip (Action* self) @extern ("gtk_action_get_tooltip");
fn CInt Action.get_visible (Action* self) @extern ("gtk_action_get_visible");
fn CInt Action.get_visible_horizontal (Action* self) @extern ("gtk_action_get_visible_horizontal");
fn CInt Action.get_visible_vertical (Action* self) @extern ("gtk_action_get_visible_vertical");
fn CInt Action.is_sensitive (Action* self) @extern ("gtk_action_is_sensitive");
fn CInt Action.is_visible (Action* self) @extern ("gtk_action_is_visible");
fn void Action.set_accel_group (Action* self, AccelGroup* accel_group) @extern ("gtk_action_set_accel_group");
fn void Action.set_accel_path (Action* self, ZString accel_path) @extern ("gtk_action_set_accel_path");
fn void Action.set_always_show_image (Action* self, CInt always_show) @extern ("gtk_action_set_always_show_image");
fn void Action.set_gicon (Action* self, [not parsed]* icon) @extern ("gtk_action_set_gicon");
fn void Action.set_icon_name (Action* self, ZString icon_name) @extern ("gtk_action_set_icon_name");
fn void Action.set_is_important (Action* self, CInt is_important) @extern ("gtk_action_set_is_important");
fn void Action.set_label (Action* self, ZString label) @extern ("gtk_action_set_label");
fn void Action.set_sensitive (Action* self, CInt sensitive) @extern ("gtk_action_set_sensitive");
fn void Action.set_short_label (Action* self, ZString short_label) @extern ("gtk_action_set_short_label");
fn void Action.set_stock_id (Action* self, ZString stock_id) @extern ("gtk_action_set_stock_id");
fn void Action.set_tooltip (Action* self, ZString tooltip) @extern ("gtk_action_set_tooltip");
fn void Action.set_visible (Action* self, CInt visible) @extern ("gtk_action_set_visible");
fn void Action.set_visible_horizontal (Action* self, CInt visible_horizontal) @extern ("gtk_action_set_visible_horizontal");
fn void Action.set_visible_vertical (Action* self, CInt visible_vertical) @extern ("gtk_action_set_visible_vertical");
fn void Action.unblock_activate (Action* self) @extern ("gtk_action_unblock_activate");
	16 properties
	1 signals
	6 virtuals
struct ActionBar (ImplementorIface, Buildable) {
	inline Bin bin;
}

fn Widget* ActionBar.new () @operator (construct) @extern ("gtk_action_bar_new");
fn Widget* ActionBar.get_center_widget (ActionBar* self) @extern ("gtk_action_bar_get_center_widget");
fn void ActionBar.pack_end (ActionBar* self, Widget* child) @extern ("gtk_action_bar_pack_end");
fn void ActionBar.pack_start (ActionBar* self, Widget* child) @extern ("gtk_action_bar_pack_start");
fn void ActionBar.set_center_widget (ActionBar* self, Widget* center_widget) @extern ("gtk_action_bar_set_center_widget");
def ActionBarPrivate = void;

struct ActionEntry {
	ZString name;
	ZString stock_id;
	ZString label;
	ZString accelerator;
	ZString tooltip;
	Callback callback;
}

struct ActionGroup (Buildable) {
	inline Object parent;
	ActionGroupPrivate* priv;
}

fn ActionGroup* ActionGroup.new (ZString name) @operator (construct) @extern ("gtk_action_group_new");
fn void ActionGroup.add_action (ActionGroup* self, Action* action) @extern ("gtk_action_group_add_action");
fn void ActionGroup.add_action_with_accel (ActionGroup* self, Action* action, ZString accelerator) @extern ("gtk_action_group_add_action_with_accel");
fn AccelGroup* ActionGroup.get_accel_group (ActionGroup* self) @extern ("gtk_action_group_get_accel_group");
fn Action* ActionGroup.get_action (ActionGroup* self, ZString action_name) @extern ("gtk_action_group_get_action");
fn ZString ActionGroup.get_name (ActionGroup* self) @extern ("gtk_action_group_get_name");
fn CInt ActionGroup.get_sensitive (ActionGroup* self) @extern ("gtk_action_group_get_sensitive");
fn CInt ActionGroup.get_visible (ActionGroup* self) @extern ("gtk_action_group_get_visible");
fn List* ActionGroup.list_actions (ActionGroup* self) @extern ("gtk_action_group_list_actions");
fn void ActionGroup.remove_action (ActionGroup* self, Action* action) @extern ("gtk_action_group_remove_action");
fn void ActionGroup.set_accel_group (ActionGroup* self, AccelGroup* accel_group) @extern ("gtk_action_group_set_accel_group");
fn void ActionGroup.set_sensitive (ActionGroup* self, CInt sensitive) @extern ("gtk_action_group_set_sensitive");
fn void ActionGroup.set_translate_func (ActionGroup* self, TranslateFunc func, void* data, DestroyNotify notify) @extern ("gtk_action_group_set_translate_func");
fn void ActionGroup.set_translation_domain (ActionGroup* self, ZString domain) @extern ("gtk_action_group_set_translation_domain");
fn void ActionGroup.set_visible (ActionGroup* self, CInt visible) @extern ("gtk_action_group_set_visible");
fn ZString ActionGroup.translate_string (ActionGroup* self, ZString string) @extern ("gtk_action_group_translate_string");
	4 properties
	4 signals
	1 virtuals
def ActionGroupPrivate = void;

def ActionPrivate = void;

Actionable (Interface)
Activatable (Interface)
struct Adjustment {
	inline InitiallyUnowned parent_instance;
	AdjustmentPrivate* priv;
}

fn Adjustment* Adjustment.new (double value, double lower, double upper, double step_increment, double page_increment, double page_size) @operator (construct) @extern ("gtk_adjustment_new");
fn void Adjustment.changed (Adjustment* self) @extern ("gtk_adjustment_changed");
fn void Adjustment.clamp_page (Adjustment* self, double lower, double upper) @extern ("gtk_adjustment_clamp_page");
fn void Adjustment.configure (Adjustment* self, double value, double lower, double upper, double step_increment, double page_increment, double page_size) @extern ("gtk_adjustment_configure");
fn double Adjustment.get_lower (Adjustment* self) @extern ("gtk_adjustment_get_lower");
fn double Adjustment.get_minimum_increment (Adjustment* self) @extern ("gtk_adjustment_get_minimum_increment");
fn double Adjustment.get_page_increment (Adjustment* self) @extern ("gtk_adjustment_get_page_increment");
fn double Adjustment.get_page_size (Adjustment* self) @extern ("gtk_adjustment_get_page_size");
fn double Adjustment.get_step_increment (Adjustment* self) @extern ("gtk_adjustment_get_step_increment");
fn double Adjustment.get_upper (Adjustment* self) @extern ("gtk_adjustment_get_upper");
fn double Adjustment.get_value (Adjustment* self) @extern ("gtk_adjustment_get_value");
fn void Adjustment.set_lower (Adjustment* self, double lower) @extern ("gtk_adjustment_set_lower");
fn void Adjustment.set_page_increment (Adjustment* self, double page_increment) @extern ("gtk_adjustment_set_page_increment");
fn void Adjustment.set_page_size (Adjustment* self, double page_size) @extern ("gtk_adjustment_set_page_size");
fn void Adjustment.set_step_increment (Adjustment* self, double step_increment) @extern ("gtk_adjustment_set_step_increment");
fn void Adjustment.set_upper (Adjustment* self, double upper) @extern ("gtk_adjustment_set_upper");
fn void Adjustment.set_value (Adjustment* self, double value) @extern ("gtk_adjustment_set_value");
fn void Adjustment.value_changed (Adjustment* self) @extern ("gtk_adjustment_value_changed");
	6 properties
	2 signals
	2 virtuals
def AdjustmentPrivate = void;


enum Align {
	FILL,
	START,
	END,
	CENTER,
	BASELINE
}

struct Alignment (ImplementorIface, Buildable) {
	inline Bin bin;
	AlignmentPrivate* priv;
}

fn Widget* Alignment.new (float xalign, float yalign, float xscale, float yscale) @operator (construct) @extern ("gtk_alignment_new");
fn void Alignment.get_padding (Alignment* self, uint padding_top, uint padding_bottom, uint padding_left, uint padding_right) @extern ("gtk_alignment_get_padding");
fn void Alignment.set (Alignment* self, float xalign, float yalign, float xscale, float yscale) @extern ("gtk_alignment_set");
fn void Alignment.set_padding (Alignment* self, uint padding_top, uint padding_bottom, uint padding_left, uint padding_right) @extern ("gtk_alignment_set_padding");
	8 properties
def AlignmentPrivate = void;

AppChooser (Interface)
struct AppChooserButton (ImplementorIface, AppChooser, Buildable, CellEditable, CellLayout) {
	inline ComboBox parent;
	AppChooserButtonPrivate* priv;
}

fn Widget* AppChooserButton.new (ZString content_type) @operator (construct) @extern ("gtk_app_chooser_button_new");
fn void AppChooserButton.append_custom_item (AppChooserButton* self, ZString name, ZString label, [not parsed]* icon) @extern ("gtk_app_chooser_button_append_custom_item");
fn void AppChooserButton.append_separator (AppChooserButton* self) @extern ("gtk_app_chooser_button_append_separator");
fn ZString AppChooserButton.get_heading (AppChooserButton* self) @extern ("gtk_app_chooser_button_get_heading");
fn CInt AppChooserButton.get_show_default_item (AppChooserButton* self) @extern ("gtk_app_chooser_button_get_show_default_item");
fn CInt AppChooserButton.get_show_dialog_item (AppChooserButton* self) @extern ("gtk_app_chooser_button_get_show_dialog_item");
fn void AppChooserButton.set_active_custom_item (AppChooserButton* self, ZString name) @extern ("gtk_app_chooser_button_set_active_custom_item");
fn void AppChooserButton.set_heading (AppChooserButton* self, ZString heading) @extern ("gtk_app_chooser_button_set_heading");
fn void AppChooserButton.set_show_default_item (AppChooserButton* self, CInt setting) @extern ("gtk_app_chooser_button_set_show_default_item");
fn void AppChooserButton.set_show_dialog_item (AppChooserButton* self, CInt setting) @extern ("gtk_app_chooser_button_set_show_dialog_item");
	3 properties
	1 signals
	1 virtuals
def AppChooserButtonPrivate = void;

struct AppChooserDialog (ImplementorIface, AppChooser, Buildable) {
	inline Dialog parent;
	AppChooserDialogPrivate* priv;
}

fn Widget* AppChooserDialog.new (Window* parent, DialogFlags flags, [not parsed]* file) @operator (construct) @extern ("gtk_app_chooser_dialog_new");
fn Widget* AppChooserDialog.new_for_content_type (Window* parent, DialogFlags flags, ZString content_type) @operator (construct) @extern ("gtk_app_chooser_dialog_new_for_content_type");
fn ZString AppChooserDialog.get_heading (AppChooserDialog* self) @extern ("gtk_app_chooser_dialog_get_heading");
fn Widget* AppChooserDialog.get_widget (AppChooserDialog* self) @extern ("gtk_app_chooser_dialog_get_widget");
fn void AppChooserDialog.set_heading (AppChooserDialog* self, ZString heading) @extern ("gtk_app_chooser_dialog_set_heading");
	2 properties
def AppChooserDialogPrivate = void;

struct AppChooserWidget (ImplementorIface, AppChooser, Buildable, Orientable) {
	inline Box parent;
	AppChooserWidgetPrivate* priv;
}

fn Widget* AppChooserWidget.new (ZString content_type) @operator (construct) @extern ("gtk_app_chooser_widget_new");
fn ZString AppChooserWidget.get_default_text (AppChooserWidget* self) @extern ("gtk_app_chooser_widget_get_default_text");
fn CInt AppChooserWidget.get_show_all (AppChooserWidget* self) @extern ("gtk_app_chooser_widget_get_show_all");
fn CInt AppChooserWidget.get_show_default (AppChooserWidget* self) @extern ("gtk_app_chooser_widget_get_show_default");
fn CInt AppChooserWidget.get_show_fallback (AppChooserWidget* self) @extern ("gtk_app_chooser_widget_get_show_fallback");
fn CInt AppChooserWidget.get_show_other (AppChooserWidget* self) @extern ("gtk_app_chooser_widget_get_show_other");
fn CInt AppChooserWidget.get_show_recommended (AppChooserWidget* self) @extern ("gtk_app_chooser_widget_get_show_recommended");
fn void AppChooserWidget.set_default_text (AppChooserWidget* self, ZString text) @extern ("gtk_app_chooser_widget_set_default_text");
fn void AppChooserWidget.set_show_all (AppChooserWidget* self, CInt setting) @extern ("gtk_app_chooser_widget_set_show_all");
fn void AppChooserWidget.set_show_default (AppChooserWidget* self, CInt setting) @extern ("gtk_app_chooser_widget_set_show_default");
fn void AppChooserWidget.set_show_fallback (AppChooserWidget* self, CInt setting) @extern ("gtk_app_chooser_widget_set_show_fallback");
fn void AppChooserWidget.set_show_other (AppChooserWidget* self, CInt setting) @extern ("gtk_app_chooser_widget_set_show_other");
fn void AppChooserWidget.set_show_recommended (AppChooserWidget* self, CInt setting) @extern ("gtk_app_chooser_widget_set_show_recommended");
	6 properties
	3 signals
	3 virtuals
def AppChooserWidgetPrivate = void;

struct Application (ActionGroup, ActionMap) {
	inline Application parent;
	ApplicationPrivate* priv;
}

fn Application* Application.new (ZString application_id, ApplicationFlags flags) @operator (construct) @extern ("gtk_application_new");
fn void Application.add_accelerator (Application* self, ZString accelerator, ZString action_name, Variant* parameter) @extern ("gtk_application_add_accelerator");
fn void Application.add_window (Application* self, Window* window) @extern ("gtk_application_add_window");
fn char** Application.get_accels_for_action (Application* self, ZString detailed_action_name) @extern ("gtk_application_get_accels_for_action");
fn char** Application.get_actions_for_accel (Application* self, ZString accel) @extern ("gtk_application_get_actions_for_accel");
fn Window* Application.get_active_window (Application* self) @extern ("gtk_application_get_active_window");
fn MenuModel* Application.get_app_menu (Application* self) @extern ("gtk_application_get_app_menu");
fn Menu* Application.get_menu_by_id (Application* self, ZString id) @extern ("gtk_application_get_menu_by_id");
fn MenuModel* Application.get_menubar (Application* self) @extern ("gtk_application_get_menubar");
fn Window* Application.get_window_by_id (Application* self, uint id) @extern ("gtk_application_get_window_by_id");
fn List* Application.get_windows (Application* self) @extern ("gtk_application_get_windows");
fn uint Application.inhibit (Application* self, Window* window, ApplicationInhibitFlags flags, ZString reason) @extern ("gtk_application_inhibit");
fn CInt Application.is_inhibited (Application* self, ApplicationInhibitFlags flags) @extern ("gtk_application_is_inhibited");
fn char** Application.list_action_descriptions (Application* self) @extern ("gtk_application_list_action_descriptions");
fn CInt Application.prefers_app_menu (Application* self) @extern ("gtk_application_prefers_app_menu");
fn void Application.remove_accelerator (Application* self, ZString action_name, Variant* parameter) @extern ("gtk_application_remove_accelerator");
fn void Application.remove_window (Application* self, Window* window) @extern ("gtk_application_remove_window");
fn void Application.set_accels_for_action (Application* self, ZString detailed_action_name, char** accels) @extern ("gtk_application_set_accels_for_action");
fn void Application.set_app_menu (Application* self, MenuModel* app_menu) @extern ("gtk_application_set_app_menu");
fn void Application.set_menubar (Application* self, MenuModel* menubar) @extern ("gtk_application_set_menubar");
fn void Application.uninhibit (Application* self, uint cookie) @extern ("gtk_application_uninhibit");
	5 properties
	3 signals
	2 virtuals
enum ApplicationInhibitFlags: CInt (inline CInt bit) {
	LOGOUT = 1,
	SWITCH = 2,
	SUSPEND = 4,
	IDLE = 8
}

def ApplicationPrivate = void;

struct ApplicationWindow (ImplementorIface, ActionGroup, ActionMap, Buildable) {
	inline Window parent_instance;
	ApplicationWindowPrivate* priv;
}

fn Widget* ApplicationWindow.new (Application* application) @operator (construct) @extern ("gtk_application_window_new");
fn ShortcutsWindow* ApplicationWindow.get_help_overlay (ApplicationWindow* self) @extern ("gtk_application_window_get_help_overlay");
fn uint ApplicationWindow.get_id (ApplicationWindow* self) @extern ("gtk_application_window_get_id");
fn CInt ApplicationWindow.get_show_menubar (ApplicationWindow* self) @extern ("gtk_application_window_get_show_menubar");
fn void ApplicationWindow.set_help_overlay (ApplicationWindow* self, ShortcutsWindow* help_overlay) @extern ("gtk_application_window_set_help_overlay");
fn void ApplicationWindow.set_show_menubar (ApplicationWindow* self, CInt show_menubar) @extern ("gtk_application_window_set_show_menubar");
	1 properties
def ApplicationWindowPrivate = void;

struct Arrow (ImplementorIface, Buildable) {
	inline Misc misc;
	ArrowPrivate* priv;
}

fn Widget* Arrow.new (ArrowType arrow_type, ShadowType shadow_type) @operator (construct) @extern ("gtk_arrow_new");
fn void Arrow.set (Arrow* self, ArrowType arrow_type, ShadowType shadow_type) @extern ("gtk_arrow_set");
	2 properties
def ArrowAccessible = void;
def ArrowAccessiblePrivate = void;


enum ArrowPlacement {
	BOTH,
	START,
	END
}

def ArrowPrivate = void;


enum ArrowType {
	UP,
	DOWN,
	LEFT,
	RIGHT,
	NONE
}

struct AspectFrame (ImplementorIface, Buildable) {
	inline Frame frame;
	AspectFramePrivate* priv;
}

fn Widget* AspectFrame.new (ZString label, float xalign, float yalign, float ratio, CInt obey_child) @operator (construct) @extern ("gtk_aspect_frame_new");
fn void AspectFrame.set (AspectFrame* self, float xalign, float yalign, float ratio, CInt obey_child) @extern ("gtk_aspect_frame_set");
	4 properties
def AspectFramePrivate = void;

struct Assistant (ImplementorIface, Buildable) {
	inline Window parent;
	AssistantPrivate* priv;
}

fn Widget* Assistant.new () @operator (construct) @extern ("gtk_assistant_new");
fn void Assistant.add_action_widget (Assistant* self, Widget* child) @extern ("gtk_assistant_add_action_widget");
fn int Assistant.append_page (Assistant* self, Widget* page) @extern ("gtk_assistant_append_page");
fn void Assistant.commit (Assistant* self) @extern ("gtk_assistant_commit");
fn int Assistant.get_current_page (Assistant* self) @extern ("gtk_assistant_get_current_page");
fn int Assistant.get_n_pages (Assistant* self) @extern ("gtk_assistant_get_n_pages");
fn Widget* Assistant.get_nth_page (Assistant* self, int page_num) @extern ("gtk_assistant_get_nth_page");
fn CInt Assistant.get_page_complete (Assistant* self, Widget* page) @extern ("gtk_assistant_get_page_complete");
fn CInt Assistant.get_page_has_padding (Assistant* self, Widget* page) @extern ("gtk_assistant_get_page_has_padding");
fn Pixbuf* Assistant.get_page_header_image (Assistant* self, Widget* page) @extern ("gtk_assistant_get_page_header_image");
fn Pixbuf* Assistant.get_page_side_image (Assistant* self, Widget* page) @extern ("gtk_assistant_get_page_side_image");
fn ZString Assistant.get_page_title (Assistant* self, Widget* page) @extern ("gtk_assistant_get_page_title");
fn AssistantPageType Assistant.get_page_type (Assistant* self, Widget* page) @extern ("gtk_assistant_get_page_type");
fn int Assistant.insert_page (Assistant* self, Widget* page, int position) @extern ("gtk_assistant_insert_page");
fn void Assistant.next_page (Assistant* self) @extern ("gtk_assistant_next_page");
fn int Assistant.prepend_page (Assistant* self, Widget* page) @extern ("gtk_assistant_prepend_page");
fn void Assistant.previous_page (Assistant* self) @extern ("gtk_assistant_previous_page");
fn void Assistant.remove_action_widget (Assistant* self, Widget* child) @extern ("gtk_assistant_remove_action_widget");
fn void Assistant.remove_page (Assistant* self, int page_num) @extern ("gtk_assistant_remove_page");
fn void Assistant.set_current_page (Assistant* self, int page_num) @extern ("gtk_assistant_set_current_page");
fn void Assistant.set_forward_page_func (Assistant* self, AssistantPageFunc page_func, void* data, DestroyNotify destroy) @extern ("gtk_assistant_set_forward_page_func");
fn void Assistant.set_page_complete (Assistant* self, Widget* page, CInt complete) @extern ("gtk_assistant_set_page_complete");
fn void Assistant.set_page_has_padding (Assistant* self, Widget* page, CInt has_padding) @extern ("gtk_assistant_set_page_has_padding");
fn void Assistant.set_page_header_image (Assistant* self, Widget* page, Pixbuf* pixbuf) @extern ("gtk_assistant_set_page_header_image");
fn void Assistant.set_page_side_image (Assistant* self, Widget* page, Pixbuf* pixbuf) @extern ("gtk_assistant_set_page_side_image");
fn void Assistant.set_page_title (Assistant* self, Widget* page, ZString title) @extern ("gtk_assistant_set_page_title");
fn void Assistant.set_page_type (Assistant* self, Widget* page, AssistantPageType type) @extern ("gtk_assistant_set_page_type");
fn void Assistant.update_buttons_state (Assistant* self) @extern ("gtk_assistant_update_buttons_state");
	1 properties
	5 signals
	4 virtuals
def AssistantPageFunc = fn int (int current_page, void* data) @export;

enum AssistantPageType {
	CONTENT,
	INTRO,
	CONFIRM,
	SUMMARY,
	PROGRESS,
	CUSTOM
}

def AssistantPrivate = void;

enum AttachOptions: CInt (inline CInt bit) {
	EXPAND = 1,
	SHRINK = 2,
	FILL = 4
}

const int BINARY_AGE = 2448;

enum BaselinePosition {
	TOP,
	CENTER,
	BOTTOM
}

struct Bin (ImplementorIface, Buildable) {
	inline Container container;
	BinPrivate* priv;
}

fn Widget* Bin.get_child (Bin* self) @extern ("gtk_bin_get_child");
def BinPrivate = void;

struct BindingArg {
	GType arg_type;
}

struct BindingEntry {
	uint keyval;
	gdk::ModifierType modifiers;
	BindingSet* binding_set;
	uint destroyed;
	uint in_emission;
	uint marks_unbound;
	BindingEntry* set_next;
	BindingEntry* hash_next;
	BindingSignal* signals;
}

fn TokenType BindingEntry.add_signal_from_string (BindingEntry* self, BindingSet* binding_set, ZString signal_desc) @extern ("gtk_binding_entry_add_signal_from_string");
fn void BindingEntry.add_signall (BindingEntry* self, BindingSet* binding_set, uint keyval, gdk::ModifierType modifiers, ZString signal_name, SList* binding_args) @extern ("gtk_binding_entry_add_signall");
fn void BindingEntry.remove (BindingEntry* self, BindingSet* binding_set, uint keyval, gdk::ModifierType modifiers) @extern ("gtk_binding_entry_remove");
fn void BindingEntry.skip (BindingEntry* self, BindingSet* binding_set, uint keyval, gdk::ModifierType modifiers) @extern ("gtk_binding_entry_skip");
struct BindingSet {
	ZString set_name;
	int priority;
	SList* widget_path_pspecs;
	SList* widget_class_pspecs;
	SList* class_branch_pspecs;
	BindingEntry* entries;
	BindingEntry* current;
	uint parsed;
}

fn CInt BindingSet.activate (BindingSet* self, uint keyval, gdk::ModifierType modifiers, Object* object) @extern ("gtk_binding_set_activate");
fn void BindingSet.add_path (BindingSet* self, PathType path_type, ZString path_pattern, PathPriorityType priority) @extern ("gtk_binding_set_add_path");
fn BindingSet* BindingSet.find (BindingSet* self, ZString set_name) @extern ("gtk_binding_set_find");
struct BindingSignal {
	BindingSignal* next;
	ZString signal_name;
	uint n_args;
	char** args;
}

def BooleanCellAccessible = void;
def BooleanCellAccessiblePrivate = void;

struct Border {
	short left;
	short right;
	short top;
	short bottom;
}

fn Border* Border.new () @operator (construct) @extern ("gtk_border_new");
fn Border* Border.copy (Border* self) @extern ("gtk_border_copy");
fn void Border.free (Border* self) @extern ("gtk_border_free");

enum BorderStyle {
	NONE,
	SOLID,
	INSET,
	OUTSET,
	HIDDEN,
	DOTTED,
	DASHED,
	DOUBLE,
	GROOVE,
	RIDGE
}

struct Box (ImplementorIface, Buildable, Orientable) {
	inline Container container;
	BoxPrivate* priv;
}

fn Widget* Box.new (Orientation orientation, int spacing) @operator (construct) @extern ("gtk_box_new");
fn BaselinePosition Box.get_baseline_position (Box* self) @extern ("gtk_box_get_baseline_position");
fn Widget* Box.get_center_widget (Box* self) @extern ("gtk_box_get_center_widget");
fn CInt Box.get_homogeneous (Box* self) @extern ("gtk_box_get_homogeneous");
fn int Box.get_spacing (Box* self) @extern ("gtk_box_get_spacing");
fn void Box.pack_end (Box* self, Widget* child, CInt expand, CInt fill, uint padding) @extern ("gtk_box_pack_end");
fn void Box.pack_start (Box* self, Widget* child, CInt expand, CInt fill, uint padding) @extern ("gtk_box_pack_start");
fn void Box.query_child_packing (Box* self, Widget* child, CInt expand, CInt fill, uint padding, PackType pack_type) @extern ("gtk_box_query_child_packing");
fn void Box.reorder_child (Box* self, Widget* child, int position) @extern ("gtk_box_reorder_child");
fn void Box.set_baseline_position (Box* self, BaselinePosition position) @extern ("gtk_box_set_baseline_position");
fn void Box.set_center_widget (Box* self, Widget* widget) @extern ("gtk_box_set_center_widget");
fn void Box.set_child_packing (Box* self, Widget* child, CInt expand, CInt fill, uint padding, PackType pack_type) @extern ("gtk_box_set_child_packing");
fn void Box.set_homogeneous (Box* self, CInt homogeneous) @extern ("gtk_box_set_homogeneous");
fn void Box.set_spacing (Box* self, int spacing) @extern ("gtk_box_set_spacing");
	3 properties
def BoxPrivate = void;

Buildable (Interface)
struct Builder {
	inline Object parent_instance;
	BuilderPrivate* priv;
}

fn Builder* Builder.new () @operator (construct) @extern ("gtk_builder_new");
fn Builder* Builder.new_from_file (ZString filename) @operator (construct) @extern ("gtk_builder_new_from_file");
fn Builder* Builder.new_from_resource (ZString resource_path) @operator (construct) @extern ("gtk_builder_new_from_resource");
fn Builder* Builder.new_from_string (ZString string, long length) @operator (construct) @extern ("gtk_builder_new_from_string");
fn void Builder.add_callback_symbol (Builder* self, ZString callback_name, Callback callback_symbol) @extern ("gtk_builder_add_callback_symbol");
fn uint Builder.add_from_file (Builder* self, ZString filename) @extern ("gtk_builder_add_from_file");
fn uint Builder.add_from_resource (Builder* self, ZString resource_path) @extern ("gtk_builder_add_from_resource");
fn uint Builder.add_from_string (Builder* self, ZString buffer, ulong length) @extern ("gtk_builder_add_from_string");
fn uint Builder.add_objects_from_file (Builder* self, ZString filename, char** object_ids) @extern ("gtk_builder_add_objects_from_file");
fn uint Builder.add_objects_from_resource (Builder* self, ZString resource_path, char** object_ids) @extern ("gtk_builder_add_objects_from_resource");
fn uint Builder.add_objects_from_string (Builder* self, ZString buffer, ulong length, char** object_ids) @extern ("gtk_builder_add_objects_from_string");
fn void Builder.connect_signals (Builder* self, void* user_data) @extern ("gtk_builder_connect_signals");
fn void Builder.connect_signals_full (Builder* self, BuilderConnectFunc func, void* user_data) @extern ("gtk_builder_connect_signals_full");
fn void Builder.expose_object (Builder* self, ZString name, Object* object) @extern ("gtk_builder_expose_object");
fn uint Builder.extend_with_template (Builder* self, Widget* widget, GType template_type, ZString buffer, ulong length) @extern ("gtk_builder_extend_with_template");
fn Application* Builder.get_application (Builder* self) @extern ("gtk_builder_get_application");
fn Object* Builder.get_object (Builder* self, ZString name) @extern ("gtk_builder_get_object");
fn SList* Builder.get_objects (Builder* self) @extern ("gtk_builder_get_objects");
fn ZString Builder.get_translation_domain (Builder* self) @extern ("gtk_builder_get_translation_domain");
fn GType Builder.get_type_from_name (Builder* self, ZString type_name) @extern ("gtk_builder_get_type_from_name");
fn void Builder.set_application (Builder* self, Application* application) @extern ("gtk_builder_set_application");
fn void Builder.set_translation_domain (Builder* self, ZString domain) @extern ("gtk_builder_set_translation_domain");
fn CInt Builder.value_from_string (Builder* self, ParamSpec* pspec, ZString string, Value value) @extern ("gtk_builder_value_from_string");
fn CInt Builder.value_from_string_type (Builder* self, GType type, ZString string, Value value) @extern ("gtk_builder_value_from_string_type");
	1 properties
	1 virtuals
def BuilderConnectFunc = fn void (Builder* builder, Object* object, ZString signal_name, ZString handler_name, Object* connect_object, ConnectFlags flags, void* user_data) @export;

enum BuilderError {
	INVALID_TYPE_FUNCTION,
	UNHANDLED_TAG,
	MISSING_ATTRIBUTE,
	INVALID_ATTRIBUTE,
	INVALID_TAG,
	MISSING_PROPERTY_VALUE,
	INVALID_VALUE,
	VERSION_MISMATCH,
	DUPLICATE_ID,
	OBJECT_TYPE_REFUSED,
	TEMPLATE_MISMATCH,
	INVALID_PROPERTY,
	INVALID_SIGNAL,
	INVALID_ID
}

def BuilderPrivate = void;

struct Button (ImplementorIface, Actionable, Activatable, Buildable) {
	inline Bin bin;
	ButtonPrivate* priv;
}

fn Widget* Button.new () @operator (construct) @extern ("gtk_button_new");
fn Widget* Button.new_from_icon_name (ZString icon_name, int size) @operator (construct) @extern ("gtk_button_new_from_icon_name");
fn Widget* Button.new_from_stock (ZString stock_id) @operator (construct) @extern ("gtk_button_new_from_stock");
fn Widget* Button.new_with_label (ZString label) @operator (construct) @extern ("gtk_button_new_with_label");
fn Widget* Button.new_with_mnemonic (ZString label) @operator (construct) @extern ("gtk_button_new_with_mnemonic");
fn void Button.clicked (Button* self) @extern ("gtk_button_clicked");
fn void Button.enter (Button* self) @extern ("gtk_button_enter");
fn void Button.get_alignment (Button* self, float xalign, float yalign) @extern ("gtk_button_get_alignment");
fn CInt Button.get_always_show_image (Button* self) @extern ("gtk_button_get_always_show_image");
fn gdk::Window* Button.get_event_window (Button* self) @extern ("gtk_button_get_event_window");
fn CInt Button.get_focus_on_click (Button* self) @extern ("gtk_button_get_focus_on_click");
fn Widget* Button.get_image (Button* self) @extern ("gtk_button_get_image");
fn PositionType Button.get_image_position (Button* self) @extern ("gtk_button_get_image_position");
fn ZString Button.get_label (Button* self) @extern ("gtk_button_get_label");
fn ReliefStyle Button.get_relief (Button* self) @extern ("gtk_button_get_relief");
fn CInt Button.get_use_stock (Button* self) @extern ("gtk_button_get_use_stock");
fn CInt Button.get_use_underline (Button* self) @extern ("gtk_button_get_use_underline");
fn void Button.leave (Button* self) @extern ("gtk_button_leave");
fn void Button.pressed (Button* self) @extern ("gtk_button_pressed");
fn void Button.released (Button* self) @extern ("gtk_button_released");
fn void Button.set_alignment (Button* self, float xalign, float yalign) @extern ("gtk_button_set_alignment");
fn void Button.set_always_show_image (Button* self, CInt always_show) @extern ("gtk_button_set_always_show_image");
fn void Button.set_focus_on_click (Button* self, CInt focus_on_click) @extern ("gtk_button_set_focus_on_click");
fn void Button.set_image (Button* self, Widget* image) @extern ("gtk_button_set_image");
fn void Button.set_image_position (Button* self, PositionType position) @extern ("gtk_button_set_image_position");
fn void Button.set_label (Button* self, ZString label) @extern ("gtk_button_set_label");
fn void Button.set_relief (Button* self, ReliefStyle relief) @extern ("gtk_button_set_relief");
fn void Button.set_use_stock (Button* self, CInt use_stock) @extern ("gtk_button_set_use_stock");
fn void Button.set_use_underline (Button* self, CInt use_underline) @extern ("gtk_button_set_use_underline");
	9 properties
	6 signals
	6 virtuals
def ButtonAccessible = void;
def ButtonAccessiblePrivate = void;

struct ButtonBox (ImplementorIface, Buildable, Orientable) {
	inline Box box;
	ButtonBoxPrivate* priv;
}

fn Widget* ButtonBox.new (Orientation orientation) @operator (construct) @extern ("gtk_button_box_new");
fn CInt ButtonBox.get_child_non_homogeneous (ButtonBox* self, Widget* child) @extern ("gtk_button_box_get_child_non_homogeneous");
fn CInt ButtonBox.get_child_secondary (ButtonBox* self, Widget* child) @extern ("gtk_button_box_get_child_secondary");
fn ButtonBoxStyle ButtonBox.get_layout (ButtonBox* self) @extern ("gtk_button_box_get_layout");
fn void ButtonBox.set_child_non_homogeneous (ButtonBox* self, Widget* child, CInt non_homogeneous) @extern ("gtk_button_box_set_child_non_homogeneous");
fn void ButtonBox.set_child_secondary (ButtonBox* self, Widget* child, CInt is_secondary) @extern ("gtk_button_box_set_child_secondary");
fn void ButtonBox.set_layout (ButtonBox* self, ButtonBoxStyle layout_style) @extern ("gtk_button_box_set_layout");
	1 properties
def ButtonBoxPrivate = void;


enum ButtonBoxStyle: CInt (inline CInt value) {
	SPREAD = 1,
	EDGE = 2,
	START = 3,
	END = 4,
	CENTER = 5,
	EXPAND = 6
}

def ButtonPrivate = void;


enum ButtonRole {
	NORMAL,
	CHECK,
	RADIO
}


enum ButtonsType {
	NONE,
	OK,
	CLOSE,
	CANCEL,
	YES_NO,
	OK_CANCEL
}

struct Calendar (ImplementorIface, Buildable) {
	inline Widget widget;
	CalendarPrivate* priv;
}

fn Widget* Calendar.new () @operator (construct) @extern ("gtk_calendar_new");
fn void Calendar.clear_marks (Calendar* self) @extern ("gtk_calendar_clear_marks");
fn void Calendar.get_date (Calendar* self, uint year, uint month, uint day) @extern ("gtk_calendar_get_date");
fn CInt Calendar.get_day_is_marked (Calendar* self, uint day) @extern ("gtk_calendar_get_day_is_marked");
fn int Calendar.get_detail_height_rows (Calendar* self) @extern ("gtk_calendar_get_detail_height_rows");
fn int Calendar.get_detail_width_chars (Calendar* self) @extern ("gtk_calendar_get_detail_width_chars");
fn CalendarDisplayOptions Calendar.get_display_options (Calendar* self) @extern ("gtk_calendar_get_display_options");
fn void Calendar.mark_day (Calendar* self, uint day) @extern ("gtk_calendar_mark_day");
fn void Calendar.select_day (Calendar* self, uint day) @extern ("gtk_calendar_select_day");
fn void Calendar.select_month (Calendar* self, uint month, uint year) @extern ("gtk_calendar_select_month");
fn void Calendar.set_detail_func (Calendar* self, CalendarDetailFunc func, void* data, DestroyNotify destroy) @extern ("gtk_calendar_set_detail_func");
fn void Calendar.set_detail_height_rows (Calendar* self, int rows) @extern ("gtk_calendar_set_detail_height_rows");
fn void Calendar.set_detail_width_chars (Calendar* self, int chars) @extern ("gtk_calendar_set_detail_width_chars");
fn void Calendar.set_display_options (Calendar* self, CalendarDisplayOptions flags) @extern ("gtk_calendar_set_display_options");
fn void Calendar.unmark_day (Calendar* self, uint day) @extern ("gtk_calendar_unmark_day");
	10 properties
	7 signals
	7 virtuals
def CalendarDetailFunc = fn ZString (Calendar* calendar, uint year, uint month, uint day, void* user_data) @export;
enum CalendarDisplayOptions: CInt (inline CInt bit) {
	SHOW_HEADING = 1,
	SHOW_DAY_NAMES = 2,
	NO_MONTH_CHANGE = 4,
	SHOW_WEEK_NUMBERS = 8,
	SHOW_DETAILS = 32
}

def CalendarPrivate = void;

def Callback = fn void (Widget* widget, void* data) @export;
def CellAccessible = void;
	1 virtuals
CellAccessibleParent (Interface)
def CellAccessiblePrivate = void;

def CellAllocCallback = fn CInt (CellRenderer* renderer, gdk::Rectangle* cell_area, gdk::Rectangle* cell_background, void* data) @export;
struct CellArea (Buildable, CellLayout) {
	inline InitiallyUnowned parent_instance;
	CellAreaPrivate* priv;
}

fn CInt CellArea.activate (CellArea* self, CellAreaContext* context, Widget* widget, gdk::Rectangle* cell_area, CellRendererState flags, CInt edit_only) @extern ("gtk_cell_area_activate");
fn CInt CellArea.activate_cell (CellArea* self, Widget* widget, CellRenderer* renderer, gdk::Event* event, gdk::Rectangle* cell_area, CellRendererState flags) @extern ("gtk_cell_area_activate_cell");
fn void CellArea.add (CellArea* self, CellRenderer* renderer) @extern ("gtk_cell_area_add");
fn void CellArea.add_focus_sibling (CellArea* self, CellRenderer* renderer, CellRenderer* sibling) @extern ("gtk_cell_area_add_focus_sibling");
fn void CellArea.apply_attributes (CellArea* self, [not parsed]* tree_model, TreeIter* iter, CInt is_expander, CInt is_expanded) @extern ("gtk_cell_area_apply_attributes");
fn void CellArea.attribute_connect (CellArea* self, CellRenderer* renderer, ZString attribute, int column) @extern ("gtk_cell_area_attribute_connect");
fn void CellArea.attribute_disconnect (CellArea* self, CellRenderer* renderer, ZString attribute) @extern ("gtk_cell_area_attribute_disconnect");
fn int CellArea.attribute_get_column (CellArea* self, CellRenderer* renderer, ZString attribute) @extern ("gtk_cell_area_attribute_get_column");
fn void CellArea.cell_get_property (CellArea* self, CellRenderer* renderer, ZString property_name, Value* value) @extern ("gtk_cell_area_cell_get_property");
fn void CellArea.cell_set_property (CellArea* self, CellRenderer* renderer, ZString property_name, Value* value) @extern ("gtk_cell_area_cell_set_property");
fn CellAreaContext* CellArea.copy_context (CellArea* self, CellAreaContext* context) @extern ("gtk_cell_area_copy_context");
fn CellAreaContext* CellArea.create_context (CellArea* self) @extern ("gtk_cell_area_create_context");
fn int CellArea.event (CellArea* self, CellAreaContext* context, Widget* widget, gdk::Event* event, gdk::Rectangle* cell_area, CellRendererState flags) @extern ("gtk_cell_area_event");
fn CInt CellArea.focus (CellArea* self, DirectionType direction) @extern ("gtk_cell_area_focus");
fn void CellArea.for_each (CellArea* self, CellCallback callback, void* callback_data) @extern ("gtk_cell_area_foreach");
fn void CellArea.foreach_alloc (CellArea* self, CellAreaContext* context, Widget* widget, gdk::Rectangle* cell_area, gdk::Rectangle* background_area, CellAllocCallback callback, void* callback_data) @extern ("gtk_cell_area_foreach_alloc");
fn void CellArea.get_cell_allocation (CellArea* self, CellAreaContext* context, Widget* widget, CellRenderer* renderer, gdk::Rectangle* cell_area, gdk::Rectangle allocation) @extern ("gtk_cell_area_get_cell_allocation");
fn CellRenderer* CellArea.get_cell_at_position (CellArea* self, CellAreaContext* context, Widget* widget, gdk::Rectangle* cell_area, int x, int y, gdk::Rectangle alloc_area) @extern ("gtk_cell_area_get_cell_at_position");
fn ZString CellArea.get_current_path_string (CellArea* self) @extern ("gtk_cell_area_get_current_path_string");
fn [not parsed]* CellArea.get_edit_widget (CellArea* self) @extern ("gtk_cell_area_get_edit_widget");
fn CellRenderer* CellArea.get_edited_cell (CellArea* self) @extern ("gtk_cell_area_get_edited_cell");
fn CellRenderer* CellArea.get_focus_cell (CellArea* self) @extern ("gtk_cell_area_get_focus_cell");
fn CellRenderer* CellArea.get_focus_from_sibling (CellArea* self, CellRenderer* renderer) @extern ("gtk_cell_area_get_focus_from_sibling");
fn List* CellArea.get_focus_siblings (CellArea* self, CellRenderer* renderer) @extern ("gtk_cell_area_get_focus_siblings");
fn void CellArea.get_preferred_height (CellArea* self, CellAreaContext* context, Widget* widget, int minimum_height, int natural_height) @extern ("gtk_cell_area_get_preferred_height");
fn void CellArea.get_preferred_height_for_width (CellArea* self, CellAreaContext* context, Widget* widget, int width, int minimum_height, int natural_height) @extern ("gtk_cell_area_get_preferred_height_for_width");
fn void CellArea.get_preferred_width (CellArea* self, CellAreaContext* context, Widget* widget, int minimum_width, int natural_width) @extern ("gtk_cell_area_get_preferred_width");
fn void CellArea.get_preferred_width_for_height (CellArea* self, CellAreaContext* context, Widget* widget, int height, int minimum_width, int natural_width) @extern ("gtk_cell_area_get_preferred_width_for_height");
fn SizeRequestMode CellArea.get_request_mode (CellArea* self) @extern ("gtk_cell_area_get_request_mode");
fn CInt CellArea.has_renderer (CellArea* self, CellRenderer* renderer) @extern ("gtk_cell_area_has_renderer");
fn void CellArea.inner_cell_area (CellArea* self, Widget* widget, gdk::Rectangle* cell_area, gdk::Rectangle inner_area) @extern ("gtk_cell_area_inner_cell_area");
fn CInt CellArea.is_activatable (CellArea* self) @extern ("gtk_cell_area_is_activatable");
fn CInt CellArea.is_focus_sibling (CellArea* self, CellRenderer* renderer, CellRenderer* sibling) @extern ("gtk_cell_area_is_focus_sibling");
fn void CellArea.remove (CellArea* self, CellRenderer* renderer) @extern ("gtk_cell_area_remove");
fn void CellArea.remove_focus_sibling (CellArea* self, CellRenderer* renderer, CellRenderer* sibling) @extern ("gtk_cell_area_remove_focus_sibling");
fn void CellArea.render (CellArea* self, CellAreaContext* context, Widget* widget, Context* cr, gdk::Rectangle* background_area, gdk::Rectangle* cell_area, CellRendererState flags, CInt paint_focus) @extern ("gtk_cell_area_render");
fn void CellArea.request_renderer (CellArea* self, CellRenderer* renderer, Orientation orientation, Widget* widget, int for_size, int minimum_size, int natural_size) @extern ("gtk_cell_area_request_renderer");
fn void CellArea.set_focus_cell (CellArea* self, CellRenderer* renderer) @extern ("gtk_cell_area_set_focus_cell");
fn void CellArea.stop_editing (CellArea* self, CInt canceled) @extern ("gtk_cell_area_stop_editing");
	3 properties
	4 signals
	19 virtuals
struct CellAreaBox (Buildable, CellLayout, Orientable) {
	inline CellArea parent_instance;
	CellAreaBoxPrivate* priv;
}

fn CellArea* CellAreaBox.new () @operator (construct) @extern ("gtk_cell_area_box_new");
fn int CellAreaBox.get_spacing (CellAreaBox* self) @extern ("gtk_cell_area_box_get_spacing");
fn void CellAreaBox.pack_end (CellAreaBox* self, CellRenderer* renderer, CInt expand, CInt align, CInt fixed) @extern ("gtk_cell_area_box_pack_end");
fn void CellAreaBox.pack_start (CellAreaBox* self, CellRenderer* renderer, CInt expand, CInt align, CInt fixed) @extern ("gtk_cell_area_box_pack_start");
fn void CellAreaBox.set_spacing (CellAreaBox* self, int spacing) @extern ("gtk_cell_area_box_set_spacing");
	1 properties
def CellAreaBoxPrivate = void;

struct CellAreaContext {
	inline Object parent_instance;
	CellAreaContextPrivate* priv;
}

fn void CellAreaContext.allocate (CellAreaContext* self, int width, int height) @extern ("gtk_cell_area_context_allocate");
fn void CellAreaContext.get_allocation (CellAreaContext* self, int width, int height) @extern ("gtk_cell_area_context_get_allocation");
fn CellArea* CellAreaContext.get_area (CellAreaContext* self) @extern ("gtk_cell_area_context_get_area");
fn void CellAreaContext.get_preferred_height (CellAreaContext* self, int minimum_height, int natural_height) @extern ("gtk_cell_area_context_get_preferred_height");
fn void CellAreaContext.get_preferred_height_for_width (CellAreaContext* self, int width, int minimum_height, int natural_height) @extern ("gtk_cell_area_context_get_preferred_height_for_width");
fn void CellAreaContext.get_preferred_width (CellAreaContext* self, int minimum_width, int natural_width) @extern ("gtk_cell_area_context_get_preferred_width");
fn void CellAreaContext.get_preferred_width_for_height (CellAreaContext* self, int height, int minimum_width, int natural_width) @extern ("gtk_cell_area_context_get_preferred_width_for_height");
fn void CellAreaContext.push_preferred_height (CellAreaContext* self, int minimum_height, int natural_height) @extern ("gtk_cell_area_context_push_preferred_height");
fn void CellAreaContext.push_preferred_width (CellAreaContext* self, int minimum_width, int natural_width) @extern ("gtk_cell_area_context_push_preferred_width");
fn void CellAreaContext.reset (CellAreaContext* self) @extern ("gtk_cell_area_context_reset");
	5 properties
	4 virtuals
def CellAreaContextPrivate = void;

def CellAreaPrivate = void;

def CellCallback = fn CInt (CellRenderer* renderer, void* data) @export;
CellEditable (Interface)
CellLayout (Interface)
def CellLayoutDataFunc = fn void ([not parsed]* cell_layout, CellRenderer* cell, [not parsed]* tree_model, TreeIter* iter, void* data) @export;
struct CellRenderer {
	inline InitiallyUnowned parent_instance;
	CellRendererPrivate* priv;
}

fn CInt CellRenderer.activate (CellRenderer* self, gdk::Event* event, Widget* widget, ZString path, gdk::Rectangle* background_area, gdk::Rectangle* cell_area, CellRendererState flags) @extern ("gtk_cell_renderer_activate");
fn void CellRenderer.get_aligned_area (CellRenderer* self, Widget* widget, CellRendererState flags, gdk::Rectangle* cell_area, gdk::Rectangle aligned_area) @extern ("gtk_cell_renderer_get_aligned_area");
fn void CellRenderer.get_alignment (CellRenderer* self, float xalign, float yalign) @extern ("gtk_cell_renderer_get_alignment");
fn void CellRenderer.get_fixed_size (CellRenderer* self, int width, int height) @extern ("gtk_cell_renderer_get_fixed_size");
fn void CellRenderer.get_padding (CellRenderer* self, int xpad, int ypad) @extern ("gtk_cell_renderer_get_padding");
fn void CellRenderer.get_preferred_height (CellRenderer* self, Widget* widget, int minimum_size, int natural_size) @extern ("gtk_cell_renderer_get_preferred_height");
fn void CellRenderer.get_preferred_height_for_width (CellRenderer* self, Widget* widget, int width, int minimum_height, int natural_height) @extern ("gtk_cell_renderer_get_preferred_height_for_width");
fn void CellRenderer.get_preferred_size (CellRenderer* self, Widget* widget, Requisition minimum_size, Requisition natural_size) @extern ("gtk_cell_renderer_get_preferred_size");
fn void CellRenderer.get_preferred_width (CellRenderer* self, Widget* widget, int minimum_size, int natural_size) @extern ("gtk_cell_renderer_get_preferred_width");
fn void CellRenderer.get_preferred_width_for_height (CellRenderer* self, Widget* widget, int height, int minimum_width, int natural_width) @extern ("gtk_cell_renderer_get_preferred_width_for_height");
fn SizeRequestMode CellRenderer.get_request_mode (CellRenderer* self) @extern ("gtk_cell_renderer_get_request_mode");
fn CInt CellRenderer.get_sensitive (CellRenderer* self) @extern ("gtk_cell_renderer_get_sensitive");
fn void CellRenderer.get_size (CellRenderer* self, Widget* widget, gdk::Rectangle* cell_area, int x_offset, int y_offset, int width, int height) @extern ("gtk_cell_renderer_get_size");
fn StateFlags CellRenderer.get_state (CellRenderer* self, Widget* widget, CellRendererState cell_state) @extern ("gtk_cell_renderer_get_state");
fn CInt CellRenderer.get_visible (CellRenderer* self) @extern ("gtk_cell_renderer_get_visible");
fn CInt CellRenderer.is_activatable (CellRenderer* self) @extern ("gtk_cell_renderer_is_activatable");
fn void CellRenderer.render (CellRenderer* self, Context* cr, Widget* widget, gdk::Rectangle* background_area, gdk::Rectangle* cell_area, CellRendererState flags) @extern ("gtk_cell_renderer_render");
fn void CellRenderer.set_alignment (CellRenderer* self, float xalign, float yalign) @extern ("gtk_cell_renderer_set_alignment");
fn void CellRenderer.set_fixed_size (CellRenderer* self, int width, int height) @extern ("gtk_cell_renderer_set_fixed_size");
fn void CellRenderer.set_padding (CellRenderer* self, int xpad, int ypad) @extern ("gtk_cell_renderer_set_padding");
fn void CellRenderer.set_sensitive (CellRenderer* self, CInt sensitive) @extern ("gtk_cell_renderer_set_sensitive");
fn void CellRenderer.set_visible (CellRenderer* self, CInt visible) @extern ("gtk_cell_renderer_set_visible");
fn [not parsed]* CellRenderer.start_editing (CellRenderer* self, gdk::Event* event, Widget* widget, ZString path, gdk::Rectangle* background_area, gdk::Rectangle* cell_area, CellRendererState flags) @extern ("gtk_cell_renderer_start_editing");
fn void CellRenderer.stop_editing (CellRenderer* self, CInt canceled) @extern ("gtk_cell_renderer_stop_editing");
	16 properties
	2 signals
	12 virtuals
struct CellRendererAccel {
	inline CellRendererText parent;
	CellRendererAccelPrivate* priv;
}

fn CellRenderer* CellRendererAccel.new () @operator (construct) @extern ("gtk_cell_renderer_accel_new");
	4 properties
	2 signals
	2 virtuals

enum CellRendererAccelMode {
	GTK,
	OTHER
}

def CellRendererAccelPrivate = void;

def CellRendererClassPrivate = void;

struct CellRendererCombo {
	inline CellRendererText parent;
	CellRendererComboPrivate* priv;
}

fn CellRenderer* CellRendererCombo.new () @operator (construct) @extern ("gtk_cell_renderer_combo_new");
	3 properties
	1 signals
def CellRendererComboPrivate = void;


enum CellRendererMode {
	INERT,
	ACTIVATABLE,
	EDITABLE
}

struct CellRendererPixbuf {
	inline CellRenderer parent;
	CellRendererPixbufPrivate* priv;
}

fn CellRenderer* CellRendererPixbuf.new () @operator (construct) @extern ("gtk_cell_renderer_pixbuf_new");
	10 properties
def CellRendererPixbufPrivate = void;

def CellRendererPrivate = void;

struct CellRendererProgress (Orientable) {
	inline CellRenderer parent_instance;
	CellRendererProgressPrivate* priv;
}

fn CellRenderer* CellRendererProgress.new () @operator (construct) @extern ("gtk_cell_renderer_progress_new");
	6 properties
def CellRendererProgressPrivate = void;

struct CellRendererSpin {
	inline CellRendererText parent;
	CellRendererSpinPrivate* priv;
}

fn CellRenderer* CellRendererSpin.new () @operator (construct) @extern ("gtk_cell_renderer_spin_new");
	3 properties
def CellRendererSpinPrivate = void;

struct CellRendererSpinner {
	inline CellRenderer parent;
	CellRendererSpinnerPrivate* priv;
}

fn CellRenderer* CellRendererSpinner.new () @operator (construct) @extern ("gtk_cell_renderer_spinner_new");
	3 properties
def CellRendererSpinnerPrivate = void;

enum CellRendererState: CInt (inline CInt bit) {
	SELECTED = 1,
	PRELIT = 2,
	INSENSITIVE = 4,
	SORTED = 8,
	FOCUSED = 16,
	EXPANDABLE = 32,
	EXPANDED = 64
}

struct CellRendererText {
	inline CellRenderer parent;
	CellRendererTextPrivate* priv;
}

fn CellRenderer* CellRendererText.new () @operator (construct) @extern ("gtk_cell_renderer_text_new");
fn void CellRendererText.set_fixed_height_from_font (CellRendererText* self, int number_of_rows) @extern ("gtk_cell_renderer_text_set_fixed_height_from_font");
	48 properties
	1 signals
	1 virtuals
def CellRendererTextPrivate = void;

struct CellRendererToggle {
	inline CellRenderer parent;
	CellRendererTogglePrivate* priv;
}

fn CellRenderer* CellRendererToggle.new () @operator (construct) @extern ("gtk_cell_renderer_toggle_new");
fn CInt CellRendererToggle.get_activatable (CellRendererToggle* self) @extern ("gtk_cell_renderer_toggle_get_activatable");
fn CInt CellRendererToggle.get_active (CellRendererToggle* self) @extern ("gtk_cell_renderer_toggle_get_active");
fn CInt CellRendererToggle.get_radio (CellRendererToggle* self) @extern ("gtk_cell_renderer_toggle_get_radio");
fn void CellRendererToggle.set_activatable (CellRendererToggle* self, CInt setting) @extern ("gtk_cell_renderer_toggle_set_activatable");
fn void CellRendererToggle.set_active (CellRendererToggle* self, CInt setting) @extern ("gtk_cell_renderer_toggle_set_active");
fn void CellRendererToggle.set_radio (CellRendererToggle* self, CInt radio) @extern ("gtk_cell_renderer_toggle_set_radio");
	5 properties
	1 signals
	1 virtuals
def CellRendererTogglePrivate = void;

struct CellView (ImplementorIface, Buildable, CellLayout, Orientable) {
	inline Widget parent_instance;
	CellViewPrivate* priv;
}

fn Widget* CellView.new () @operator (construct) @extern ("gtk_cell_view_new");
fn Widget* CellView.new_with_context (CellArea* area, CellAreaContext* context) @operator (construct) @extern ("gtk_cell_view_new_with_context");
fn Widget* CellView.new_with_markup (ZString markup) @operator (construct) @extern ("gtk_cell_view_new_with_markup");
fn Widget* CellView.new_with_pixbuf (Pixbuf* pixbuf) @operator (construct) @extern ("gtk_cell_view_new_with_pixbuf");
fn Widget* CellView.new_with_text (ZString text) @operator (construct) @extern ("gtk_cell_view_new_with_text");
fn TreePath* CellView.get_displayed_row (CellView* self) @extern ("gtk_cell_view_get_displayed_row");
fn CInt CellView.get_draw_sensitive (CellView* self) @extern ("gtk_cell_view_get_draw_sensitive");
fn CInt CellView.get_fit_model (CellView* self) @extern ("gtk_cell_view_get_fit_model");
fn [not parsed]* CellView.get_model (CellView* self) @extern ("gtk_cell_view_get_model");
fn CInt CellView.get_size_of_row (CellView* self, TreePath* path, Requisition requisition) @extern ("gtk_cell_view_get_size_of_row");
fn void CellView.set_background_color (CellView* self, gdk::Color* color) @extern ("gtk_cell_view_set_background_color");
fn void CellView.set_background_rgba (CellView* self, gdk::RGBA* rgba) @extern ("gtk_cell_view_set_background_rgba");
fn void CellView.set_displayed_row (CellView* self, TreePath* path) @extern ("gtk_cell_view_set_displayed_row");
fn void CellView.set_draw_sensitive (CellView* self, CInt draw_sensitive) @extern ("gtk_cell_view_set_draw_sensitive");
fn void CellView.set_fit_model (CellView* self, CInt fit_model) @extern ("gtk_cell_view_set_fit_model");
fn void CellView.set_model (CellView* self, [not parsed]* model) @extern ("gtk_cell_view_set_model");
	9 properties
def CellViewPrivate = void;

struct CheckButton (ImplementorIface, Actionable, Activatable, Buildable) {
	inline ToggleButton toggle_button;
}

fn Widget* CheckButton.new () @operator (construct) @extern ("gtk_check_button_new");
fn Widget* CheckButton.new_with_label (ZString label) @operator (construct) @extern ("gtk_check_button_new_with_label");
fn Widget* CheckButton.new_with_mnemonic (ZString label) @operator (construct) @extern ("gtk_check_button_new_with_mnemonic");
	1 virtuals
struct CheckMenuItem (ImplementorIface, Actionable, Activatable, Buildable) {
	inline MenuItem menu_item;
	CheckMenuItemPrivate* priv;
}

fn Widget* CheckMenuItem.new () @operator (construct) @extern ("gtk_check_menu_item_new");
fn Widget* CheckMenuItem.new_with_label (ZString label) @operator (construct) @extern ("gtk_check_menu_item_new_with_label");
fn Widget* CheckMenuItem.new_with_mnemonic (ZString label) @operator (construct) @extern ("gtk_check_menu_item_new_with_mnemonic");
fn CInt CheckMenuItem.get_active (CheckMenuItem* self) @extern ("gtk_check_menu_item_get_active");
fn CInt CheckMenuItem.get_draw_as_radio (CheckMenuItem* self) @extern ("gtk_check_menu_item_get_draw_as_radio");
fn CInt CheckMenuItem.get_inconsistent (CheckMenuItem* self) @extern ("gtk_check_menu_item_get_inconsistent");
fn void CheckMenuItem.set_active (CheckMenuItem* self, CInt is_active) @extern ("gtk_check_menu_item_set_active");
fn void CheckMenuItem.set_draw_as_radio (CheckMenuItem* self, CInt draw_as_radio) @extern ("gtk_check_menu_item_set_draw_as_radio");
fn void CheckMenuItem.set_inconsistent (CheckMenuItem* self, CInt setting) @extern ("gtk_check_menu_item_set_inconsistent");
fn void CheckMenuItem.toggled (CheckMenuItem* self) @extern ("gtk_check_menu_item_toggled");
	3 properties
	1 signals
	2 virtuals
def CheckMenuItemAccessible = void;
def CheckMenuItemAccessiblePrivate = void;

def CheckMenuItemPrivate = void;

struct Clipboard {
	void* unused;
}

fn Clipboard* Clipboard.get (Clipboard* self, gdk::Atom* selection) @extern ("gtk_clipboard_get");
fn Clipboard* Clipboard.get_default (Clipboard* self, gdk::Display* display) @extern ("gtk_clipboard_get_default");
fn Clipboard* Clipboard.get_for_display (Clipboard* self, gdk::Display* display, gdk::Atom* selection) @extern ("gtk_clipboard_get_for_display");
fn void Clipboard.clear (Clipboard* self) @extern ("gtk_clipboard_clear");
fn gdk::Display* Clipboard.get_display (Clipboard* self) @extern ("gtk_clipboard_get_display");
fn Object* Clipboard.get_owner (Clipboard* self) @extern ("gtk_clipboard_get_owner");
fn gdk::Atom* Clipboard.get_selection (Clipboard* self) @extern ("gtk_clipboard_get_selection");
fn void Clipboard.request_contents (Clipboard* self, gdk::Atom* target, ClipboardReceivedFunc callback, void* user_data) @extern ("gtk_clipboard_request_contents");
fn void Clipboard.request_image (Clipboard* self, ClipboardImageReceivedFunc callback, void* user_data) @extern ("gtk_clipboard_request_image");
fn void Clipboard.request_rich_text (Clipboard* self, TextBuffer* buffer, ClipboardRichTextReceivedFunc callback, void* user_data) @extern ("gtk_clipboard_request_rich_text");
fn void Clipboard.request_targets (Clipboard* self, ClipboardTargetsReceivedFunc callback, void* user_data) @extern ("gtk_clipboard_request_targets");
fn void Clipboard.request_text (Clipboard* self, ClipboardTextReceivedFunc callback, void* user_data) @extern ("gtk_clipboard_request_text");
fn void Clipboard.request_uris (Clipboard* self, ClipboardURIReceivedFunc callback, void* user_data) @extern ("gtk_clipboard_request_uris");
fn void Clipboard.set_can_store (Clipboard* self, char** targets, int n_targets) @extern ("gtk_clipboard_set_can_store");
fn void Clipboard.set_image (Clipboard* self, Pixbuf* pixbuf) @extern ("gtk_clipboard_set_image");
fn void Clipboard.set_text (Clipboard* self, ZString text, int len) @extern ("gtk_clipboard_set_text");
fn void Clipboard.store (Clipboard* self) @extern ("gtk_clipboard_store");
fn SelectionData* Clipboard.wait_for_contents (Clipboard* self, gdk::Atom* target) @extern ("gtk_clipboard_wait_for_contents");
fn Pixbuf* Clipboard.wait_for_image (Clipboard* self) @extern ("gtk_clipboard_wait_for_image");
fn char** Clipboard.wait_for_rich_text (Clipboard* self, TextBuffer* buffer, gdk::Atom* format, ulong length) @extern ("gtk_clipboard_wait_for_rich_text");
fn CInt Clipboard.wait_for_targets (Clipboard* self, char** targets, int n_targets) @extern ("gtk_clipboard_wait_for_targets");
fn ZString Clipboard.wait_for_text (Clipboard* self) @extern ("gtk_clipboard_wait_for_text");
fn char** Clipboard.wait_for_uris (Clipboard* self) @extern ("gtk_clipboard_wait_for_uris");
fn CInt Clipboard.wait_is_image_available (Clipboard* self) @extern ("gtk_clipboard_wait_is_image_available");
fn CInt Clipboard.wait_is_rich_text_available (Clipboard* self, TextBuffer* buffer) @extern ("gtk_clipboard_wait_is_rich_text_available");
fn CInt Clipboard.wait_is_target_available (Clipboard* self, gdk::Atom* target) @extern ("gtk_clipboard_wait_is_target_available");
fn CInt Clipboard.wait_is_text_available (Clipboard* self) @extern ("gtk_clipboard_wait_is_text_available");
fn CInt Clipboard.wait_is_uris_available (Clipboard* self) @extern ("gtk_clipboard_wait_is_uris_available");
	1 signals
def ClipboardClearFunc = fn void (Clipboard* clipboard, void* user_data_or_owner) @export;
def ClipboardGetFunc = fn void (Clipboard* clipboard, SelectionData* selection_data, uint info, void* user_data_or_owner) @export;
def ClipboardImageReceivedFunc = fn void (Clipboard* clipboard, Pixbuf* pixbuf, void* data) @export;
def ClipboardReceivedFunc = fn void (Clipboard* clipboard, SelectionData* selection_data, void* data) @export;
def ClipboardRichTextReceivedFunc = fn void (Clipboard* clipboard, gdk::Atom* format, ZString text, ulong length, void* data) @export;
def ClipboardTargetsReceivedFunc = fn void (Clipboard* clipboard, char** atoms, int n_atoms, void* data) @export;
def ClipboardTextReceivedFunc = fn void (Clipboard* clipboard, ZString text, void* data) @export;
def ClipboardURIReceivedFunc = fn void (Clipboard* clipboard, char** uris, void* data) @export;
struct ColorButton (ImplementorIface, Actionable, Activatable, Buildable, ColorChooser) {
	inline Button button;
	ColorButtonPrivate* priv;
}

fn Widget* ColorButton.new () @operator (construct) @extern ("gtk_color_button_new");
fn Widget* ColorButton.new_with_color (gdk::Color* color) @operator (construct) @extern ("gtk_color_button_new_with_color");
fn Widget* ColorButton.new_with_rgba (gdk::RGBA* rgba) @operator (construct) @extern ("gtk_color_button_new_with_rgba");
fn ushort ColorButton.get_alpha (ColorButton* self) @extern ("gtk_color_button_get_alpha");
fn void ColorButton.get_color (ColorButton* self, gdk::Color color) @extern ("gtk_color_button_get_color");
fn ZString ColorButton.get_title (ColorButton* self) @extern ("gtk_color_button_get_title");
fn CInt ColorButton.get_use_alpha (ColorButton* self) @extern ("gtk_color_button_get_use_alpha");
fn void ColorButton.set_alpha (ColorButton* self, ushort alpha) @extern ("gtk_color_button_set_alpha");
fn void ColorButton.set_color (ColorButton* self, gdk::Color* color) @extern ("gtk_color_button_set_color");
fn void ColorButton.set_title (ColorButton* self, ZString title) @extern ("gtk_color_button_set_title");
fn void ColorButton.set_use_alpha (ColorButton* self, CInt use_alpha) @extern ("gtk_color_button_set_use_alpha");
	6 properties
	1 signals
	1 virtuals
def ColorButtonPrivate = void;

ColorChooser (Interface)
struct ColorChooserDialog (ImplementorIface, Buildable, ColorChooser) {
	inline Dialog parent_instance;
	ColorChooserDialogPrivate* priv;
}

fn Widget* ColorChooserDialog.new (ZString title, Window* parent) @operator (construct) @extern ("gtk_color_chooser_dialog_new");
	1 properties
def ColorChooserDialogPrivate = void;

struct ColorChooserWidget (ImplementorIface, Buildable, ColorChooser, Orientable) {
	inline Box parent_instance;
	ColorChooserWidgetPrivate* priv;
}

fn Widget* ColorChooserWidget.new () @operator (construct) @extern ("gtk_color_chooser_widget_new");
	1 properties
def ColorChooserWidgetPrivate = void;

struct ColorSelection (ImplementorIface, Buildable, Orientable) {
	inline Box parent_instance;
	ColorSelectionPrivate* private_data;
}

fn Widget* ColorSelection.new () @operator (construct) @extern ("gtk_color_selection_new");
fn CInt ColorSelection.palette_from_string (ColorSelection* self, ZString str, char** colors, int n_colors) @extern ("gtk_color_selection_palette_from_string");
fn ZString ColorSelection.palette_to_string (ColorSelection* self, char** colors, int n_colors) @extern ("gtk_color_selection_palette_to_string");
fn ushort ColorSelection.get_current_alpha (ColorSelection* self) @extern ("gtk_color_selection_get_current_alpha");
fn void ColorSelection.get_current_color (ColorSelection* self, gdk::Color color) @extern ("gtk_color_selection_get_current_color");
fn void ColorSelection.get_current_rgba (ColorSelection* self, gdk::RGBA rgba) @extern ("gtk_color_selection_get_current_rgba");
fn CInt ColorSelection.get_has_opacity_control (ColorSelection* self) @extern ("gtk_color_selection_get_has_opacity_control");
fn CInt ColorSelection.get_has_palette (ColorSelection* self) @extern ("gtk_color_selection_get_has_palette");
fn ushort ColorSelection.get_previous_alpha (ColorSelection* self) @extern ("gtk_color_selection_get_previous_alpha");
fn void ColorSelection.get_previous_color (ColorSelection* self, gdk::Color color) @extern ("gtk_color_selection_get_previous_color");
fn void ColorSelection.get_previous_rgba (ColorSelection* self, gdk::RGBA rgba) @extern ("gtk_color_selection_get_previous_rgba");
fn CInt ColorSelection.is_adjusting (ColorSelection* self) @extern ("gtk_color_selection_is_adjusting");
fn void ColorSelection.set_current_alpha (ColorSelection* self, ushort alpha) @extern ("gtk_color_selection_set_current_alpha");
fn void ColorSelection.set_current_color (ColorSelection* self, gdk::Color* color) @extern ("gtk_color_selection_set_current_color");
fn void ColorSelection.set_current_rgba (ColorSelection* self, gdk::RGBA* rgba) @extern ("gtk_color_selection_set_current_rgba");
fn void ColorSelection.set_has_opacity_control (ColorSelection* self, CInt has_opacity) @extern ("gtk_color_selection_set_has_opacity_control");
fn void ColorSelection.set_has_palette (ColorSelection* self, CInt has_palette) @extern ("gtk_color_selection_set_has_palette");
fn void ColorSelection.set_previous_alpha (ColorSelection* self, ushort alpha) @extern ("gtk_color_selection_set_previous_alpha");
fn void ColorSelection.set_previous_color (ColorSelection* self, gdk::Color* color) @extern ("gtk_color_selection_set_previous_color");
fn void ColorSelection.set_previous_rgba (ColorSelection* self, gdk::RGBA* rgba) @extern ("gtk_color_selection_set_previous_rgba");
	5 properties
	1 signals
	1 virtuals
def ColorSelectionChangePaletteFunc = fn void (char** colors, int n_colors) @export;
def ColorSelectionChangePaletteWithScreenFunc = fn void (gdk::Screen* screen, char** colors, int n_colors) @export;
struct ColorSelectionDialog (ImplementorIface, Buildable) {
	inline Dialog parent_instance;
	ColorSelectionDialogPrivate* priv;
}

fn Widget* ColorSelectionDialog.new (ZString title) @operator (construct) @extern ("gtk_color_selection_dialog_new");
fn Widget* ColorSelectionDialog.get_color_selection (ColorSelectionDialog* self) @extern ("gtk_color_selection_dialog_get_color_selection");
	4 properties
def ColorSelectionDialogPrivate = void;

def ColorSelectionPrivate = void;

struct ComboBox (ImplementorIface, Buildable, CellEditable, CellLayout) {
	inline Bin parent_instance;
	ComboBoxPrivate* priv;
}

fn Widget* ComboBox.new () @operator (construct) @extern ("gtk_combo_box_new");
fn Widget* ComboBox.new_with_area (CellArea* area) @operator (construct) @extern ("gtk_combo_box_new_with_area");
fn Widget* ComboBox.new_with_area_and_entry (CellArea* area) @operator (construct) @extern ("gtk_combo_box_new_with_area_and_entry");
fn Widget* ComboBox.new_with_entry () @operator (construct) @extern ("gtk_combo_box_new_with_entry");
fn Widget* ComboBox.new_with_model ([not parsed]* model) @operator (construct) @extern ("gtk_combo_box_new_with_model");
fn Widget* ComboBox.new_with_model_and_entry ([not parsed]* model) @operator (construct) @extern ("gtk_combo_box_new_with_model_and_entry");
fn int ComboBox.get_active (ComboBox* self) @extern ("gtk_combo_box_get_active");
fn ZString ComboBox.get_active_id (ComboBox* self) @extern ("gtk_combo_box_get_active_id");
fn CInt ComboBox.get_active_iter (ComboBox* self, TreeIter iter) @extern ("gtk_combo_box_get_active_iter");
fn CInt ComboBox.get_add_tearoffs (ComboBox* self) @extern ("gtk_combo_box_get_add_tearoffs");
fn SensitivityType ComboBox.get_button_sensitivity (ComboBox* self) @extern ("gtk_combo_box_get_button_sensitivity");
fn int ComboBox.get_column_span_column (ComboBox* self) @extern ("gtk_combo_box_get_column_span_column");
fn int ComboBox.get_entry_text_column (ComboBox* self) @extern ("gtk_combo_box_get_entry_text_column");
fn CInt ComboBox.get_focus_on_click (ComboBox* self) @extern ("gtk_combo_box_get_focus_on_click");
fn CInt ComboBox.get_has_entry (ComboBox* self) @extern ("gtk_combo_box_get_has_entry");
fn int ComboBox.get_id_column (ComboBox* self) @extern ("gtk_combo_box_get_id_column");
fn [not parsed]* ComboBox.get_model (ComboBox* self) @extern ("gtk_combo_box_get_model");
fn atk::Object* ComboBox.get_popup_accessible (ComboBox* self) @extern ("gtk_combo_box_get_popup_accessible");
fn CInt ComboBox.get_popup_fixed_width (ComboBox* self) @extern ("gtk_combo_box_get_popup_fixed_width");
fn int ComboBox.get_row_span_column (ComboBox* self) @extern ("gtk_combo_box_get_row_span_column");
fn ZString ComboBox.get_title (ComboBox* self) @extern ("gtk_combo_box_get_title");
fn int ComboBox.get_wrap_width (ComboBox* self) @extern ("gtk_combo_box_get_wrap_width");
fn void ComboBox.popdown (ComboBox* self) @extern ("gtk_combo_box_popdown");
fn void ComboBox.popup (ComboBox* self) @extern ("gtk_combo_box_popup");
fn void ComboBox.popup_for_device (ComboBox* self, gdk::Device* device) @extern ("gtk_combo_box_popup_for_device");
fn void ComboBox.set_active (ComboBox* self, int index_) @extern ("gtk_combo_box_set_active");
fn CInt ComboBox.set_active_id (ComboBox* self, ZString active_id) @extern ("gtk_combo_box_set_active_id");
fn void ComboBox.set_active_iter (ComboBox* self, TreeIter* iter) @extern ("gtk_combo_box_set_active_iter");
fn void ComboBox.set_add_tearoffs (ComboBox* self, CInt add_tearoffs) @extern ("gtk_combo_box_set_add_tearoffs");
fn void ComboBox.set_button_sensitivity (ComboBox* self, SensitivityType sensitivity) @extern ("gtk_combo_box_set_button_sensitivity");
fn void ComboBox.set_column_span_column (ComboBox* self, int column_span) @extern ("gtk_combo_box_set_column_span_column");
fn void ComboBox.set_entry_text_column (ComboBox* self, int text_column) @extern ("gtk_combo_box_set_entry_text_column");
fn void ComboBox.set_focus_on_click (ComboBox* self, CInt focus_on_click) @extern ("gtk_combo_box_set_focus_on_click");
fn void ComboBox.set_id_column (ComboBox* self, int id_column) @extern ("gtk_combo_box_set_id_column");
fn void ComboBox.set_model (ComboBox* self, [not parsed]* model) @extern ("gtk_combo_box_set_model");
fn void ComboBox.set_popup_fixed_width (ComboBox* self, CInt fixed) @extern ("gtk_combo_box_set_popup_fixed_width");
fn void ComboBox.set_row_separator_func (ComboBox* self, TreeViewRowSeparatorFunc func, void* data, DestroyNotify destroy) @extern ("gtk_combo_box_set_row_separator_func");
fn void ComboBox.set_row_span_column (ComboBox* self, int row_span) @extern ("gtk_combo_box_set_row_span_column");
fn void ComboBox.set_title (ComboBox* self, ZString title) @extern ("gtk_combo_box_set_title");
fn void ComboBox.set_wrap_width (ComboBox* self, int width) @extern ("gtk_combo_box_set_wrap_width");
	16 properties
	5 signals
	2 virtuals
def ComboBoxAccessible = void;
def ComboBoxAccessiblePrivate = void;

def ComboBoxPrivate = void;

struct ComboBoxText (ImplementorIface, Buildable, CellEditable, CellLayout) {
	inline ComboBox parent_instance;
	ComboBoxTextPrivate* priv;
}

fn Widget* ComboBoxText.new () @operator (construct) @extern ("gtk_combo_box_text_new");
fn Widget* ComboBoxText.new_with_entry () @operator (construct) @extern ("gtk_combo_box_text_new_with_entry");
fn void ComboBoxText.append (ComboBoxText* self, ZString id, ZString text) @extern ("gtk_combo_box_text_append");
fn void ComboBoxText.append_text (ComboBoxText* self, ZString text) @extern ("gtk_combo_box_text_append_text");
fn ZString ComboBoxText.get_active_text (ComboBoxText* self) @extern ("gtk_combo_box_text_get_active_text");
fn void ComboBoxText.insert (ComboBoxText* self, int position, ZString id, ZString text) @extern ("gtk_combo_box_text_insert");
fn void ComboBoxText.insert_text (ComboBoxText* self, int position, ZString text) @extern ("gtk_combo_box_text_insert_text");
fn void ComboBoxText.prepend (ComboBoxText* self, ZString id, ZString text) @extern ("gtk_combo_box_text_prepend");
fn void ComboBoxText.prepend_text (ComboBoxText* self, ZString text) @extern ("gtk_combo_box_text_prepend_text");
fn void ComboBoxText.remove (ComboBoxText* self, int position) @extern ("gtk_combo_box_text_remove");
fn void ComboBoxText.remove_all (ComboBoxText* self) @extern ("gtk_combo_box_text_remove_all");
def ComboBoxTextPrivate = void;

struct Container (ImplementorIface, Buildable) {
	inline Widget widget;
	ContainerPrivate* priv;
}

fn void Container.add (Container* self, Widget* widget) @extern ("gtk_container_add");
fn void Container.check_resize (Container* self) @extern ("gtk_container_check_resize");
fn void Container.child_get_property (Container* self, Widget* child, ZString property_name, Value* value) @extern ("gtk_container_child_get_property");
fn void Container.child_notify (Container* self, Widget* child, ZString child_property) @extern ("gtk_container_child_notify");
fn void Container.child_notify_by_pspec (Container* self, Widget* child, ParamSpec* pspec) @extern ("gtk_container_child_notify_by_pspec");
fn void Container.child_set_property (Container* self, Widget* child, ZString property_name, Value* value) @extern ("gtk_container_child_set_property");
fn GType Container.child_type (Container* self) @extern ("gtk_container_child_type");
fn void Container.forall (Container* self, Callback callback, void* callback_data) @extern ("gtk_container_forall");
fn void Container.for_each (Container* self, Callback callback, void* callback_data) @extern ("gtk_container_foreach");
fn uint Container.get_border_width (Container* self) @extern ("gtk_container_get_border_width");
fn List* Container.get_children (Container* self) @extern ("gtk_container_get_children");
fn CInt Container.get_focus_chain (Container* self, List* focusable_widgets) @extern ("gtk_container_get_focus_chain");
fn Widget* Container.get_focus_child (Container* self) @extern ("gtk_container_get_focus_child");
fn Adjustment* Container.get_focus_hadjustment (Container* self) @extern ("gtk_container_get_focus_hadjustment");
fn Adjustment* Container.get_focus_vadjustment (Container* self) @extern ("gtk_container_get_focus_vadjustment");
fn WidgetPath* Container.get_path_for_child (Container* self, Widget* child) @extern ("gtk_container_get_path_for_child");
fn ResizeMode Container.get_resize_mode (Container* self) @extern ("gtk_container_get_resize_mode");
fn void Container.propagate_draw (Container* self, Widget* child, Context* cr) @extern ("gtk_container_propagate_draw");
fn void Container.remove (Container* self, Widget* widget) @extern ("gtk_container_remove");
fn void Container.resize_children (Container* self) @extern ("gtk_container_resize_children");
fn void Container.set_border_width (Container* self, uint border_width) @extern ("gtk_container_set_border_width");
fn void Container.set_focus_chain (Container* self, List* focusable_widgets) @extern ("gtk_container_set_focus_chain");
fn void Container.set_focus_child (Container* self, Widget* child) @extern ("gtk_container_set_focus_child");
fn void Container.set_focus_hadjustment (Container* self, Adjustment* adjustment) @extern ("gtk_container_set_focus_hadjustment");
fn void Container.set_focus_vadjustment (Container* self, Adjustment* adjustment) @extern ("gtk_container_set_focus_vadjustment");
fn void Container.set_reallocate_redraws (Container* self, CInt needs_redraws) @extern ("gtk_container_set_reallocate_redraws");
fn void Container.set_resize_mode (Container* self, ResizeMode resize_mode) @extern ("gtk_container_set_resize_mode");
fn void Container.unset_focus_chain (Container* self) @extern ("gtk_container_unset_focus_chain");
	3 properties
	4 signals
	10 virtuals
def ContainerAccessible = void;
def ContainerAccessiblePrivate = void;

struct ContainerCellAccessible (Action, Component, TableCell) {
	inline CellAccessible parent;
	ContainerCellAccessiblePrivate* priv;
}

fn ContainerCellAccessible* ContainerCellAccessible.new () @operator (construct) @extern ("gtk_container_cell_accessible_new");
fn void ContainerCellAccessible.add_child (ContainerCellAccessible* self, CellAccessible* child) @extern ("gtk_container_cell_accessible_add_child");
fn List* ContainerCellAccessible.get_children (ContainerCellAccessible* self) @extern ("gtk_container_cell_accessible_get_children");
fn void ContainerCellAccessible.remove_child (ContainerCellAccessible* self, CellAccessible* child) @extern ("gtk_container_cell_accessible_remove_child");
def ContainerCellAccessiblePrivate = void;

def ContainerPrivate = void;


enum CornerType {
	TOP_LEFT,
	BOTTOM_LEFT,
	TOP_RIGHT,
	BOTTOM_RIGHT
}

struct CssProvider (StyleProvider) {
	inline Object parent_instance;
	CssProviderPrivate* priv;
}

fn CssProvider* CssProvider.new () @operator (construct) @extern ("gtk_css_provider_new");
fn CssProvider* CssProvider.get_default (CssProvider* self) @extern ("gtk_css_provider_get_default");
fn CssProvider* CssProvider.get_named (CssProvider* self, ZString name, ZString variant) @extern ("gtk_css_provider_get_named");
fn CInt CssProvider.load_from_data (CssProvider* self, char** data, long length) @extern ("gtk_css_provider_load_from_data");
fn CInt CssProvider.load_from_file (CssProvider* self, [not parsed]* file) @extern ("gtk_css_provider_load_from_file");
fn CInt CssProvider.load_from_path (CssProvider* self, ZString path) @extern ("gtk_css_provider_load_from_path");
fn void CssProvider.load_from_resource (CssProvider* self, ZString resource_path) @extern ("gtk_css_provider_load_from_resource");
fn ZString CssProvider.to_string (CssProvider* self) @extern ("gtk_css_provider_to_string");
	1 signals
	1 virtuals

enum CssProviderError {
	FAILED,
	SYNTAX,
	IMPORT,
	NAME,
	DEPRECATED,
	UNKNOWN_VALUE
}

def CssProviderPrivate = void;

struct CssSection {
	void* unused;
}

fn uint CssSection.get_end_line (CssSection* self) @extern ("gtk_css_section_get_end_line");
fn uint CssSection.get_end_position (CssSection* self) @extern ("gtk_css_section_get_end_position");
fn [not parsed]* CssSection.get_file (CssSection* self) @extern ("gtk_css_section_get_file");
fn CssSection* CssSection.get_parent (CssSection* self) @extern ("gtk_css_section_get_parent");
fn CssSectionType CssSection.get_section_type (CssSection* self) @extern ("gtk_css_section_get_section_type");
fn uint CssSection.get_start_line (CssSection* self) @extern ("gtk_css_section_get_start_line");
fn uint CssSection.get_start_position (CssSection* self) @extern ("gtk_css_section_get_start_position");
fn CssSection* CssSection.ref (CssSection* self) @extern ("gtk_css_section_ref");
fn void CssSection.unref (CssSection* self) @extern ("gtk_css_section_unref");

enum CssSectionType {
	DOCUMENT,
	IMPORT,
	COLOR_DEFINITION,
	BINDING_SET,
	RULESET,
	SELECTOR,
	DECLARATION,
	VALUE,
	KEYFRAMES
}

enum DebugFlag: CInt (inline CInt bit) {
	MISC = 1,
	PLUGSOCKET = 2,
	TEXT = 4,
	TREE = 8,
	UPDATES = 16,
	KEYBINDINGS = 32,
	MULTIHEAD = 64,
	MODULES = 128,
	GEOMETRY = 256,
	ICONTHEME = 512,
	PRINTING = 1024,
	BUILDER = 2048,
	SIZE_REQUEST = 4096,
	NO_CSS_CACHE = 8192,
	BASELINES = 16384,
	PIXEL_CACHE = 32768,
	NO_PIXEL_CACHE = 65536,
	INTERACTIVE = 131072,
	TOUCHSCREEN = 262144,
	ACTIONS = 524288,
	RESIZE = 1048576,
	LAYOUT = 2097152
}


enum DeleteType {
	CHARS,
	WORD_ENDS,
	WORDS,
	DISPLAY_LINES,
	DISPLAY_LINE_ENDS,
	PARAGRAPH_ENDS,
	PARAGRAPHS,
	WHITESPACE
}

enum DestDefaults: CInt (inline CInt bit) {
	MOTION = 1,
	HIGHLIGHT = 2,
	DROP = 4,
	ALL = 7
}

struct Dialog (ImplementorIface, Buildable) {
	inline Window window;
	DialogPrivate* priv;
}

fn Widget* Dialog.new () @operator (construct) @extern ("gtk_dialog_new");
fn void Dialog.add_action_widget (Dialog* self, Widget* child, int response_id) @extern ("gtk_dialog_add_action_widget");
fn Widget* Dialog.add_button (Dialog* self, ZString button_text, int response_id) @extern ("gtk_dialog_add_button");
fn Box* Dialog.get_action_area (Dialog* self) @extern ("gtk_dialog_get_action_area");
fn Box* Dialog.get_content_area (Dialog* self) @extern ("gtk_dialog_get_content_area");
fn HeaderBar* Dialog.get_header_bar (Dialog* self) @extern ("gtk_dialog_get_header_bar");
fn int Dialog.get_response_for_widget (Dialog* self, Widget* widget) @extern ("gtk_dialog_get_response_for_widget");
fn Widget* Dialog.get_widget_for_response (Dialog* self, int response_id) @extern ("gtk_dialog_get_widget_for_response");
fn void Dialog.response (Dialog* self, int response_id) @extern ("gtk_dialog_response");
fn int Dialog.run (Dialog* self) @extern ("gtk_dialog_run");
fn void Dialog.set_alternative_button_order_from_array (Dialog* self, int n_params, char** new_order) @extern ("gtk_dialog_set_alternative_button_order_from_array");
fn void Dialog.set_default_response (Dialog* self, int response_id) @extern ("gtk_dialog_set_default_response");
fn void Dialog.set_response_sensitive (Dialog* self, int response_id, CInt setting) @extern ("gtk_dialog_set_response_sensitive");
	1 properties
	2 signals
	2 virtuals
enum DialogFlags: CInt (inline CInt bit) {
	MODAL = 1,
	DESTROY_WITH_PARENT = 2,
	USE_HEADER_BAR = 4
}

def DialogPrivate = void;


enum DirectionType {
	TAB_FORWARD,
	TAB_BACKWARD,
	UP,
	DOWN,
	LEFT,
	RIGHT
}


enum DragResult {
	SUCCESS,
	NO_TARGET,
	USER_CANCELLED,
	TIMEOUT_EXPIRED,
	GRAB_BROKEN,
	ERROR
}

struct DrawingArea (ImplementorIface, Buildable) {
	inline Widget widget;
	void* dummy;
}

fn Widget* DrawingArea.new () @operator (construct) @extern ("gtk_drawing_area_new");
Editable (Interface)
struct Entry (ImplementorIface, Buildable, CellEditable, Editable) {
	inline Widget parent_instance;
	EntryPrivate* priv;
}

fn Widget* Entry.new () @operator (construct) @extern ("gtk_entry_new");
fn Widget* Entry.new_with_buffer (EntryBuffer* buffer) @operator (construct) @extern ("gtk_entry_new_with_buffer");
fn CInt Entry.get_activates_default (Entry* self) @extern ("gtk_entry_get_activates_default");
fn float Entry.get_alignment (Entry* self) @extern ("gtk_entry_get_alignment");
fn AttrList* Entry.get_attributes (Entry* self) @extern ("gtk_entry_get_attributes");
fn EntryBuffer* Entry.get_buffer (Entry* self) @extern ("gtk_entry_get_buffer");
fn EntryCompletion* Entry.get_completion (Entry* self) @extern ("gtk_entry_get_completion");
fn int Entry.get_current_icon_drag_source (Entry* self) @extern ("gtk_entry_get_current_icon_drag_source");
fn Adjustment* Entry.get_cursor_hadjustment (Entry* self) @extern ("gtk_entry_get_cursor_hadjustment");
fn CInt Entry.get_has_frame (Entry* self) @extern ("gtk_entry_get_has_frame");
fn CInt Entry.get_icon_activatable (Entry* self, EntryIconPosition icon_pos) @extern ("gtk_entry_get_icon_activatable");
fn void Entry.get_icon_area (Entry* self, EntryIconPosition icon_pos, gdk::Rectangle icon_area) @extern ("gtk_entry_get_icon_area");
fn int Entry.get_icon_at_pos (Entry* self, int x, int y) @extern ("gtk_entry_get_icon_at_pos");
fn [not parsed]* Entry.get_icon_gicon (Entry* self, EntryIconPosition icon_pos) @extern ("gtk_entry_get_icon_gicon");
fn ZString Entry.get_icon_name (Entry* self, EntryIconPosition icon_pos) @extern ("gtk_entry_get_icon_name");
fn Pixbuf* Entry.get_icon_pixbuf (Entry* self, EntryIconPosition icon_pos) @extern ("gtk_entry_get_icon_pixbuf");
fn CInt Entry.get_icon_sensitive (Entry* self, EntryIconPosition icon_pos) @extern ("gtk_entry_get_icon_sensitive");
fn ZString Entry.get_icon_stock (Entry* self, EntryIconPosition icon_pos) @extern ("gtk_entry_get_icon_stock");
fn ImageType Entry.get_icon_storage_type (Entry* self, EntryIconPosition icon_pos) @extern ("gtk_entry_get_icon_storage_type");
fn ZString Entry.get_icon_tooltip_markup (Entry* self, EntryIconPosition icon_pos) @extern ("gtk_entry_get_icon_tooltip_markup");
fn ZString Entry.get_icon_tooltip_text (Entry* self, EntryIconPosition icon_pos) @extern ("gtk_entry_get_icon_tooltip_text");
fn Border* Entry.get_inner_border (Entry* self) @extern ("gtk_entry_get_inner_border");
fn InputHints Entry.get_input_hints (Entry* self) @extern ("gtk_entry_get_input_hints");
fn InputPurpose Entry.get_input_purpose (Entry* self) @extern ("gtk_entry_get_input_purpose");
fn WString Entry.get_invisible_char (Entry* self) @extern ("gtk_entry_get_invisible_char");
fn Layout* Entry.get_layout (Entry* self) @extern ("gtk_entry_get_layout");
fn void Entry.get_layout_offsets (Entry* self, int x, int y) @extern ("gtk_entry_get_layout_offsets");
fn int Entry.get_max_length (Entry* self) @extern ("gtk_entry_get_max_length");
fn int Entry.get_max_width_chars (Entry* self) @extern ("gtk_entry_get_max_width_chars");
fn CInt Entry.get_overwrite_mode (Entry* self) @extern ("gtk_entry_get_overwrite_mode");
fn ZString Entry.get_placeholder_text (Entry* self) @extern ("gtk_entry_get_placeholder_text");
fn double Entry.get_progress_fraction (Entry* self) @extern ("gtk_entry_get_progress_fraction");
fn double Entry.get_progress_pulse_step (Entry* self) @extern ("gtk_entry_get_progress_pulse_step");
fn TabArray* Entry.get_tabs (Entry* self) @extern ("gtk_entry_get_tabs");
fn ZString Entry.get_text (Entry* self) @extern ("gtk_entry_get_text");
fn void Entry.get_text_area (Entry* self, gdk::Rectangle text_area) @extern ("gtk_entry_get_text_area");
fn ushort Entry.get_text_length (Entry* self) @extern ("gtk_entry_get_text_length");
fn CInt Entry.get_visibility (Entry* self) @extern ("gtk_entry_get_visibility");
fn int Entry.get_width_chars (Entry* self) @extern ("gtk_entry_get_width_chars");
fn void Entry.grab_focus_without_selecting (Entry* self) @extern ("gtk_entry_grab_focus_without_selecting");
fn CInt Entry.im_context_filter_keypress (Entry* self, gdk::EventKey* event) @extern ("gtk_entry_im_context_filter_keypress");
fn int Entry.layout_index_to_text_index (Entry* self, int layout_index) @extern ("gtk_entry_layout_index_to_text_index");
fn void Entry.progress_pulse (Entry* self) @extern ("gtk_entry_progress_pulse");
fn void Entry.reset_im_context (Entry* self) @extern ("gtk_entry_reset_im_context");
fn void Entry.set_activates_default (Entry* self, CInt setting) @extern ("gtk_entry_set_activates_default");
fn void Entry.set_alignment (Entry* self, float xalign) @extern ("gtk_entry_set_alignment");
fn void Entry.set_attributes (Entry* self, AttrList* attrs) @extern ("gtk_entry_set_attributes");
fn void Entry.set_buffer (Entry* self, EntryBuffer* buffer) @extern ("gtk_entry_set_buffer");
fn void Entry.set_completion (Entry* self, EntryCompletion* completion) @extern ("gtk_entry_set_completion");
fn void Entry.set_cursor_hadjustment (Entry* self, Adjustment* adjustment) @extern ("gtk_entry_set_cursor_hadjustment");
fn void Entry.set_has_frame (Entry* self, CInt setting) @extern ("gtk_entry_set_has_frame");
fn void Entry.set_icon_activatable (Entry* self, EntryIconPosition icon_pos, CInt activatable) @extern ("gtk_entry_set_icon_activatable");
fn void Entry.set_icon_drag_source (Entry* self, EntryIconPosition icon_pos, TargetList* target_list, gdk::DragAction actions) @extern ("gtk_entry_set_icon_drag_source");
fn void Entry.set_icon_from_gicon (Entry* self, EntryIconPosition icon_pos, [not parsed]* icon) @extern ("gtk_entry_set_icon_from_gicon");
fn void Entry.set_icon_from_icon_name (Entry* self, EntryIconPosition icon_pos, ZString icon_name) @extern ("gtk_entry_set_icon_from_icon_name");
fn void Entry.set_icon_from_pixbuf (Entry* self, EntryIconPosition icon_pos, Pixbuf* pixbuf) @extern ("gtk_entry_set_icon_from_pixbuf");
fn void Entry.set_icon_from_stock (Entry* self, EntryIconPosition icon_pos, ZString stock_id) @extern ("gtk_entry_set_icon_from_stock");
fn void Entry.set_icon_sensitive (Entry* self, EntryIconPosition icon_pos, CInt sensitive) @extern ("gtk_entry_set_icon_sensitive");
fn void Entry.set_icon_tooltip_markup (Entry* self, EntryIconPosition icon_pos, ZString tooltip) @extern ("gtk_entry_set_icon_tooltip_markup");
fn void Entry.set_icon_tooltip_text (Entry* self, EntryIconPosition icon_pos, ZString tooltip) @extern ("gtk_entry_set_icon_tooltip_text");
fn void Entry.set_inner_border (Entry* self, Border* border) @extern ("gtk_entry_set_inner_border");
fn void Entry.set_input_hints (Entry* self, InputHints hints) @extern ("gtk_entry_set_input_hints");
fn void Entry.set_input_purpose (Entry* self, InputPurpose purpose) @extern ("gtk_entry_set_input_purpose");
fn void Entry.set_invisible_char (Entry* self, WString ch) @extern ("gtk_entry_set_invisible_char");
fn void Entry.set_max_length (Entry* self, int max) @extern ("gtk_entry_set_max_length");
fn void Entry.set_max_width_chars (Entry* self, int n_chars) @extern ("gtk_entry_set_max_width_chars");
fn void Entry.set_overwrite_mode (Entry* self, CInt overwrite) @extern ("gtk_entry_set_overwrite_mode");
fn void Entry.set_placeholder_text (Entry* self, ZString text) @extern ("gtk_entry_set_placeholder_text");
fn void Entry.set_progress_fraction (Entry* self, double fraction) @extern ("gtk_entry_set_progress_fraction");
fn void Entry.set_progress_pulse_step (Entry* self, double fraction) @extern ("gtk_entry_set_progress_pulse_step");
fn void Entry.set_tabs (Entry* self, TabArray* tabs) @extern ("gtk_entry_set_tabs");
fn void Entry.set_text (Entry* self, ZString text) @extern ("gtk_entry_set_text");
fn void Entry.set_visibility (Entry* self, CInt visible) @extern ("gtk_entry_set_visibility");
fn void Entry.set_width_chars (Entry* self, int n_chars) @extern ("gtk_entry_set_width_chars");
fn int Entry.text_index_to_layout_index (Entry* self, int text_index) @extern ("gtk_entry_text_index_to_layout_index");
fn void Entry.unset_invisible_char (Entry* self) @extern ("gtk_entry_unset_invisible_char");
	51 properties
	15 signals
	14 virtuals
def EntryAccessible = void;
def EntryAccessiblePrivate = void;

struct EntryBuffer {
	inline Object parent_instance;
	EntryBufferPrivate* priv;
}

fn EntryBuffer* EntryBuffer.new (ZString initial_chars, int n_initial_chars) @operator (construct) @extern ("gtk_entry_buffer_new");
fn uint EntryBuffer.delete_text (EntryBuffer* self, uint position, int n_chars) @extern ("gtk_entry_buffer_delete_text");
fn void EntryBuffer.emit_deleted_text (EntryBuffer* self, uint position, uint n_chars) @extern ("gtk_entry_buffer_emit_deleted_text");
fn void EntryBuffer.emit_inserted_text (EntryBuffer* self, uint position, ZString chars, uint n_chars) @extern ("gtk_entry_buffer_emit_inserted_text");
fn ulong EntryBuffer.get_bytes (EntryBuffer* self) @extern ("gtk_entry_buffer_get_bytes");
fn uint EntryBuffer.get_length (EntryBuffer* self) @extern ("gtk_entry_buffer_get_length");
fn int EntryBuffer.get_max_length (EntryBuffer* self) @extern ("gtk_entry_buffer_get_max_length");
fn ZString EntryBuffer.get_text (EntryBuffer* self) @extern ("gtk_entry_buffer_get_text");
fn uint EntryBuffer.insert_text (EntryBuffer* self, uint position, ZString chars, int n_chars) @extern ("gtk_entry_buffer_insert_text");
fn void EntryBuffer.set_max_length (EntryBuffer* self, int max_length) @extern ("gtk_entry_buffer_set_max_length");
fn void EntryBuffer.set_text (EntryBuffer* self, ZString chars, int n_chars) @extern ("gtk_entry_buffer_set_text");
	3 properties
	2 signals
	6 virtuals
def EntryBufferPrivate = void;

struct EntryCompletion (Buildable, CellLayout) {
	inline Object parent_instance;
	EntryCompletionPrivate* priv;
}

fn EntryCompletion* EntryCompletion.new () @operator (construct) @extern ("gtk_entry_completion_new");
fn EntryCompletion* EntryCompletion.new_with_area (CellArea* area) @operator (construct) @extern ("gtk_entry_completion_new_with_area");
fn void EntryCompletion.complete (EntryCompletion* self) @extern ("gtk_entry_completion_complete");
fn ZString EntryCompletion.compute_prefix (EntryCompletion* self, ZString key) @extern ("gtk_entry_completion_compute_prefix");
fn void EntryCompletion.delete_action (EntryCompletion* self, int index_) @extern ("gtk_entry_completion_delete_action");
fn ZString EntryCompletion.get_completion_prefix (EntryCompletion* self) @extern ("gtk_entry_completion_get_completion_prefix");
fn Widget* EntryCompletion.get_entry (EntryCompletion* self) @extern ("gtk_entry_completion_get_entry");
fn CInt EntryCompletion.get_inline_completion (EntryCompletion* self) @extern ("gtk_entry_completion_get_inline_completion");
fn CInt EntryCompletion.get_inline_selection (EntryCompletion* self) @extern ("gtk_entry_completion_get_inline_selection");
fn int EntryCompletion.get_minimum_key_length (EntryCompletion* self) @extern ("gtk_entry_completion_get_minimum_key_length");
fn [not parsed]* EntryCompletion.get_model (EntryCompletion* self) @extern ("gtk_entry_completion_get_model");
fn CInt EntryCompletion.get_popup_completion (EntryCompletion* self) @extern ("gtk_entry_completion_get_popup_completion");
fn CInt EntryCompletion.get_popup_set_width (EntryCompletion* self) @extern ("gtk_entry_completion_get_popup_set_width");
fn CInt EntryCompletion.get_popup_single_match (EntryCompletion* self) @extern ("gtk_entry_completion_get_popup_single_match");
fn int EntryCompletion.get_text_column (EntryCompletion* self) @extern ("gtk_entry_completion_get_text_column");
fn void EntryCompletion.insert_action_markup (EntryCompletion* self, int index_, ZString markup) @extern ("gtk_entry_completion_insert_action_markup");
fn void EntryCompletion.insert_action_text (EntryCompletion* self, int index_, ZString text) @extern ("gtk_entry_completion_insert_action_text");
fn void EntryCompletion.insert_prefix (EntryCompletion* self) @extern ("gtk_entry_completion_insert_prefix");
fn void EntryCompletion.set_inline_completion (EntryCompletion* self, CInt inline_completion) @extern ("gtk_entry_completion_set_inline_completion");
fn void EntryCompletion.set_inline_selection (EntryCompletion* self, CInt inline_selection) @extern ("gtk_entry_completion_set_inline_selection");
fn void EntryCompletion.set_match_func (EntryCompletion* self, EntryCompletionMatchFunc func, void* func_data, DestroyNotify func_notify) @extern ("gtk_entry_completion_set_match_func");
fn void EntryCompletion.set_minimum_key_length (EntryCompletion* self, int length) @extern ("gtk_entry_completion_set_minimum_key_length");
fn void EntryCompletion.set_model (EntryCompletion* self, [not parsed]* model) @extern ("gtk_entry_completion_set_model");
fn void EntryCompletion.set_popup_completion (EntryCompletion* self, CInt popup_completion) @extern ("gtk_entry_completion_set_popup_completion");
fn void EntryCompletion.set_popup_set_width (EntryCompletion* self, CInt popup_set_width) @extern ("gtk_entry_completion_set_popup_set_width");
fn void EntryCompletion.set_popup_single_match (EntryCompletion* self, CInt popup_single_match) @extern ("gtk_entry_completion_set_popup_single_match");
fn void EntryCompletion.set_text_column (EntryCompletion* self, int column) @extern ("gtk_entry_completion_set_text_column");
	9 properties
	5 signals
	5 virtuals
def EntryCompletionMatchFunc = fn CInt (EntryCompletion* completion, ZString key, TreeIter* iter, void* user_data) @export;
def EntryCompletionPrivate = void;

def EntryIconAccessible = void;

enum EntryIconPosition {
	PRIMARY,
	SECONDARY
}

def EntryPrivate = void;

struct EventBox (ImplementorIface, Buildable) {
	inline Bin bin;
	EventBoxPrivate* priv;
}

fn Widget* EventBox.new () @operator (construct) @extern ("gtk_event_box_new");
fn CInt EventBox.get_above_child (EventBox* self) @extern ("gtk_event_box_get_above_child");
fn CInt EventBox.get_visible_window (EventBox* self) @extern ("gtk_event_box_get_visible_window");
fn void EventBox.set_above_child (EventBox* self, CInt above_child) @extern ("gtk_event_box_set_above_child");
fn void EventBox.set_visible_window (EventBox* self, CInt visible_window) @extern ("gtk_event_box_set_visible_window");
	2 properties
def EventBoxPrivate = void;

struct EventController {
	void* unused;
}

fn PropagationPhase EventController.get_propagation_phase (EventController* self) @extern ("gtk_event_controller_get_propagation_phase");
fn Widget* EventController.get_widget (EventController* self) @extern ("gtk_event_controller_get_widget");
fn CInt EventController.handle_event (EventController* self, gdk::Event* event) @extern ("gtk_event_controller_handle_event");
fn void EventController.reset (EventController* self) @extern ("gtk_event_controller_reset");
fn void EventController.set_propagation_phase (EventController* self, PropagationPhase phase) @extern ("gtk_event_controller_set_propagation_phase");
	2 properties
struct EventControllerKey {
	void* unused;
}

fn EventController* EventControllerKey.new (Widget* widget) @operator (construct) @extern ("gtk_event_controller_key_new");
fn CInt EventControllerKey.forward (EventControllerKey* self, Widget* widget) @extern ("gtk_event_controller_key_forward");
fn uint EventControllerKey.get_group (EventControllerKey* self) @extern ("gtk_event_controller_key_get_group");
fn IMContext* EventControllerKey.get_im_context (EventControllerKey* self) @extern ("gtk_event_controller_key_get_im_context");
fn void EventControllerKey.set_im_context (EventControllerKey* self, IMContext* im_context) @extern ("gtk_event_controller_key_set_im_context");
	6 signals
struct EventControllerMotion {
	void* unused;
}

fn EventController* EventControllerMotion.new (Widget* widget) @operator (construct) @extern ("gtk_event_controller_motion_new");
	3 signals
struct EventControllerScroll {
	void* unused;
}

fn EventController* EventControllerScroll.new (Widget* widget, EventControllerScrollFlags flags) @operator (construct) @extern ("gtk_event_controller_scroll_new");
fn EventControllerScrollFlags EventControllerScroll.get_flags (EventControllerScroll* self) @extern ("gtk_event_controller_scroll_get_flags");
fn void EventControllerScroll.set_flags (EventControllerScroll* self, EventControllerScrollFlags flags) @extern ("gtk_event_controller_scroll_set_flags");
	1 properties
	4 signals
enum EventControllerScrollFlags: CInt (inline CInt bit) {
	NONE = 0,
	VERTICAL = 1,
	HORIZONTAL = 2,
	DISCRETE = 4,
	KINETIC = 8,
	BOTH_AXES = 3
}


enum EventSequenceState {
	NONE,
	CLAIMED,
	DENIED
}

struct Expander (ImplementorIface, Buildable) {
	inline Bin bin;
	ExpanderPrivate* priv;
}

fn Widget* Expander.new (ZString label) @operator (construct) @extern ("gtk_expander_new");
fn Widget* Expander.new_with_mnemonic (ZString label) @operator (construct) @extern ("gtk_expander_new_with_mnemonic");
fn CInt Expander.get_expanded (Expander* self) @extern ("gtk_expander_get_expanded");
fn ZString Expander.get_label (Expander* self) @extern ("gtk_expander_get_label");
fn CInt Expander.get_label_fill (Expander* self) @extern ("gtk_expander_get_label_fill");
fn Widget* Expander.get_label_widget (Expander* self) @extern ("gtk_expander_get_label_widget");
fn CInt Expander.get_resize_toplevel (Expander* self) @extern ("gtk_expander_get_resize_toplevel");
fn int Expander.get_spacing (Expander* self) @extern ("gtk_expander_get_spacing");
fn CInt Expander.get_use_markup (Expander* self) @extern ("gtk_expander_get_use_markup");
fn CInt Expander.get_use_underline (Expander* self) @extern ("gtk_expander_get_use_underline");
fn void Expander.set_expanded (Expander* self, CInt expanded) @extern ("gtk_expander_set_expanded");
fn void Expander.set_label (Expander* self, ZString label) @extern ("gtk_expander_set_label");
fn void Expander.set_label_fill (Expander* self, CInt label_fill) @extern ("gtk_expander_set_label_fill");
fn void Expander.set_label_widget (Expander* self, Widget* label_widget) @extern ("gtk_expander_set_label_widget");
fn void Expander.set_resize_toplevel (Expander* self, CInt resize_toplevel) @extern ("gtk_expander_set_resize_toplevel");
fn void Expander.set_spacing (Expander* self, int spacing) @extern ("gtk_expander_set_spacing");
fn void Expander.set_use_markup (Expander* self, CInt use_markup) @extern ("gtk_expander_set_use_markup");
fn void Expander.set_use_underline (Expander* self, CInt use_underline) @extern ("gtk_expander_set_use_underline");
	8 properties
	1 signals
	1 virtuals
def ExpanderAccessible = void;
def ExpanderAccessiblePrivate = void;

def ExpanderPrivate = void;


enum ExpanderStyle {
	COLLAPSED,
	SEMI_COLLAPSED,
	SEMI_EXPANDED,
	EXPANDED
}

FileChooser (Interface)

enum FileChooserAction {
	OPEN,
	SAVE,
	SELECT_FOLDER,
	CREATE_FOLDER
}

struct FileChooserButton (ImplementorIface, Buildable, FileChooser, Orientable) {
	inline Box parent;
	FileChooserButtonPrivate* priv;
}

fn Widget* FileChooserButton.new (ZString title, FileChooserAction action) @operator (construct) @extern ("gtk_file_chooser_button_new");
fn Widget* FileChooserButton.new_with_dialog (Dialog* dialog) @operator (construct) @extern ("gtk_file_chooser_button_new_with_dialog");
fn CInt FileChooserButton.get_focus_on_click (FileChooserButton* self) @extern ("gtk_file_chooser_button_get_focus_on_click");
fn ZString FileChooserButton.get_title (FileChooserButton* self) @extern ("gtk_file_chooser_button_get_title");
fn int FileChooserButton.get_width_chars (FileChooserButton* self) @extern ("gtk_file_chooser_button_get_width_chars");
fn void FileChooserButton.set_focus_on_click (FileChooserButton* self, CInt focus_on_click) @extern ("gtk_file_chooser_button_set_focus_on_click");
fn void FileChooserButton.set_title (FileChooserButton* self, ZString title) @extern ("gtk_file_chooser_button_set_title");
fn void FileChooserButton.set_width_chars (FileChooserButton* self, int n_chars) @extern ("gtk_file_chooser_button_set_width_chars");
	3 properties
	1 signals
	1 virtuals
def FileChooserButtonPrivate = void;


enum FileChooserConfirmation {
	CONFIRM,
	ACCEPT_FILENAME,
	SELECT_AGAIN
}

def FileChooserDialog = void;
def FileChooserDialogPrivate = void;


enum FileChooserError {
	NONEXISTENT,
	BAD_FILENAME,
	ALREADY_EXISTS,
	INCOMPLETE_HOSTNAME
}

struct FileChooserNative (FileChooser) {
	void* unused;
}

fn FileChooserNative* FileChooserNative.new (ZString title, Window* parent, FileChooserAction action, ZString accept_label, ZString cancel_label) @operator (construct) @extern ("gtk_file_chooser_native_new");
fn ZString FileChooserNative.get_accept_label (FileChooserNative* self) @extern ("gtk_file_chooser_native_get_accept_label");
fn ZString FileChooserNative.get_cancel_label (FileChooserNative* self) @extern ("gtk_file_chooser_native_get_cancel_label");
fn void FileChooserNative.set_accept_label (FileChooserNative* self, ZString accept_label) @extern ("gtk_file_chooser_native_set_accept_label");
fn void FileChooserNative.set_cancel_label (FileChooserNative* self, ZString cancel_label) @extern ("gtk_file_chooser_native_set_cancel_label");
	2 properties
struct FileChooserWidget (ImplementorIface, Buildable, FileChooser, Orientable) {
	inline Box parent_instance;
	FileChooserWidgetPrivate* priv;
}

fn Widget* FileChooserWidget.new (FileChooserAction action) @operator (construct) @extern ("gtk_file_chooser_widget_new");
	2 properties
	12 signals
def FileChooserWidgetAccessible = void;
def FileChooserWidgetAccessiblePrivate = void;

def FileChooserWidgetPrivate = void;

struct FileFilter (Buildable) {
	void* unused;
}

fn FileFilter* FileFilter.new () @operator (construct) @extern ("gtk_file_filter_new");
fn FileFilter* FileFilter.new_from_gvariant (Variant* variant) @operator (construct) @extern ("gtk_file_filter_new_from_gvariant");
fn void FileFilter.add_custom (FileFilter* self, FileFilterFlags needed, FileFilterFunc func, void* data, DestroyNotify notify) @extern ("gtk_file_filter_add_custom");
fn void FileFilter.add_mime_type (FileFilter* self, ZString mime_type) @extern ("gtk_file_filter_add_mime_type");
fn void FileFilter.add_pattern (FileFilter* self, ZString pattern) @extern ("gtk_file_filter_add_pattern");
fn void FileFilter.add_pixbuf_formats (FileFilter* self) @extern ("gtk_file_filter_add_pixbuf_formats");
fn CInt FileFilter.filter (FileFilter* self, FileFilterInfo* filter_info) @extern ("gtk_file_filter_filter");
fn ZString FileFilter.get_name (FileFilter* self) @extern ("gtk_file_filter_get_name");
fn FileFilterFlags FileFilter.get_needed (FileFilter* self) @extern ("gtk_file_filter_get_needed");
fn void FileFilter.set_name (FileFilter* self, ZString name) @extern ("gtk_file_filter_set_name");
fn Variant* FileFilter.to_gvariant (FileFilter* self) @extern ("gtk_file_filter_to_gvariant");
enum FileFilterFlags: CInt (inline CInt bit) {
	FILENAME = 1,
	URI = 2,
	DISPLAY_NAME = 4,
	MIME_TYPE = 8
}

def FileFilterFunc = fn CInt (FileFilterInfo* filter_info, void* data) @export;
struct FileFilterInfo {
	FileFilterFlags contains;
	ZString filename;
	ZString uri;
	ZString display_name;
	ZString mime_type;
}

struct Fixed (ImplementorIface, Buildable) {
	inline Container container;
	FixedPrivate* priv;
}

fn Widget* Fixed.new () @operator (construct) @extern ("gtk_fixed_new");
fn void Fixed.move (Fixed* self, Widget* widget, int x, int y) @extern ("gtk_fixed_move");
fn void Fixed.put (Fixed* self, Widget* widget, int x, int y) @extern ("gtk_fixed_put");
struct FixedChild {
	Widget* widget;
	int x;
	int y;
}

def FixedPrivate = void;

struct FlowBox (ImplementorIface, Buildable, Orientable) {
	inline Container container;
}

fn Widget* FlowBox.new () @operator (construct) @extern ("gtk_flow_box_new");
fn void FlowBox.bind_model (FlowBox* self, [not parsed]* model, FlowBoxCreateWidgetFunc create_widget_func, void* user_data, DestroyNotify user_data_free_func) @extern ("gtk_flow_box_bind_model");
fn CInt FlowBox.get_activate_on_single_click (FlowBox* self) @extern ("gtk_flow_box_get_activate_on_single_click");
fn FlowBoxChild* FlowBox.get_child_at_index (FlowBox* self, int idx) @extern ("gtk_flow_box_get_child_at_index");
fn FlowBoxChild* FlowBox.get_child_at_pos (FlowBox* self, int x, int y) @extern ("gtk_flow_box_get_child_at_pos");
fn uint FlowBox.get_column_spacing (FlowBox* self) @extern ("gtk_flow_box_get_column_spacing");
fn CInt FlowBox.get_homogeneous (FlowBox* self) @extern ("gtk_flow_box_get_homogeneous");
fn uint FlowBox.get_max_children_per_line (FlowBox* self) @extern ("gtk_flow_box_get_max_children_per_line");
fn uint FlowBox.get_min_children_per_line (FlowBox* self) @extern ("gtk_flow_box_get_min_children_per_line");
fn uint FlowBox.get_row_spacing (FlowBox* self) @extern ("gtk_flow_box_get_row_spacing");
fn List* FlowBox.get_selected_children (FlowBox* self) @extern ("gtk_flow_box_get_selected_children");
fn SelectionMode FlowBox.get_selection_mode (FlowBox* self) @extern ("gtk_flow_box_get_selection_mode");
fn void FlowBox.insert (FlowBox* self, Widget* widget, int position) @extern ("gtk_flow_box_insert");
fn void FlowBox.invalidate_filter (FlowBox* self) @extern ("gtk_flow_box_invalidate_filter");
fn void FlowBox.invalidate_sort (FlowBox* self) @extern ("gtk_flow_box_invalidate_sort");
fn void FlowBox.select_all (FlowBox* self) @extern ("gtk_flow_box_select_all");
fn void FlowBox.select_child (FlowBox* self, FlowBoxChild* child) @extern ("gtk_flow_box_select_child");
fn void FlowBox.selected_foreach (FlowBox* self, FlowBoxForeachFunc func, void* data) @extern ("gtk_flow_box_selected_foreach");
fn void FlowBox.set_activate_on_single_click (FlowBox* self, CInt single) @extern ("gtk_flow_box_set_activate_on_single_click");
fn void FlowBox.set_column_spacing (FlowBox* self, uint spacing) @extern ("gtk_flow_box_set_column_spacing");
fn void FlowBox.set_filter_func (FlowBox* self, FlowBoxFilterFunc filter_func, void* user_data, DestroyNotify destroy) @extern ("gtk_flow_box_set_filter_func");
fn void FlowBox.set_hadjustment (FlowBox* self, Adjustment* adjustment) @extern ("gtk_flow_box_set_hadjustment");
fn void FlowBox.set_homogeneous (FlowBox* self, CInt homogeneous) @extern ("gtk_flow_box_set_homogeneous");
fn void FlowBox.set_max_children_per_line (FlowBox* self, uint n_children) @extern ("gtk_flow_box_set_max_children_per_line");
fn void FlowBox.set_min_children_per_line (FlowBox* self, uint n_children) @extern ("gtk_flow_box_set_min_children_per_line");
fn void FlowBox.set_row_spacing (FlowBox* self, uint spacing) @extern ("gtk_flow_box_set_row_spacing");
fn void FlowBox.set_selection_mode (FlowBox* self, SelectionMode mode) @extern ("gtk_flow_box_set_selection_mode");
fn void FlowBox.set_sort_func (FlowBox* self, FlowBoxSortFunc sort_func, void* user_data, DestroyNotify destroy) @extern ("gtk_flow_box_set_sort_func");
fn void FlowBox.set_vadjustment (FlowBox* self, Adjustment* adjustment) @extern ("gtk_flow_box_set_vadjustment");
fn void FlowBox.unselect_all (FlowBox* self) @extern ("gtk_flow_box_unselect_all");
fn void FlowBox.unselect_child (FlowBox* self, FlowBoxChild* child) @extern ("gtk_flow_box_unselect_child");
	7 properties
	7 signals
	7 virtuals
def FlowBoxAccessible = void;
def FlowBoxAccessiblePrivate = void;

struct FlowBoxChild (ImplementorIface, Buildable) {
	inline Bin parent_instance;
}

fn Widget* FlowBoxChild.new () @operator (construct) @extern ("gtk_flow_box_child_new");
fn void FlowBoxChild.changed (FlowBoxChild* self) @extern ("gtk_flow_box_child_changed");
fn int FlowBoxChild.get_index (FlowBoxChild* self) @extern ("gtk_flow_box_child_get_index");
fn CInt FlowBoxChild.is_selected (FlowBoxChild* self) @extern ("gtk_flow_box_child_is_selected");
	1 signals
	1 virtuals
def FlowBoxChildAccessible = void;
def FlowBoxCreateWidgetFunc = fn Widget* (Object* item, void* user_data) @export;
def FlowBoxFilterFunc = fn CInt (FlowBoxChild* child, void* user_data) @export;
def FlowBoxForeachFunc = fn void (FlowBox* box, FlowBoxChild* child, void* user_data) @export;
def FlowBoxSortFunc = fn int (FlowBoxChild* child1, FlowBoxChild* child2, void* user_data) @export;
struct FontButton (ImplementorIface, Actionable, Activatable, Buildable, FontChooser) {
	inline Button button;
	FontButtonPrivate* priv;
}

fn Widget* FontButton.new () @operator (construct) @extern ("gtk_font_button_new");
fn Widget* FontButton.new_with_font (ZString fontname) @operator (construct) @extern ("gtk_font_button_new_with_font");
fn ZString FontButton.get_font_name (FontButton* self) @extern ("gtk_font_button_get_font_name");
fn CInt FontButton.get_show_size (FontButton* self) @extern ("gtk_font_button_get_show_size");
fn CInt FontButton.get_show_style (FontButton* self) @extern ("gtk_font_button_get_show_style");
fn ZString FontButton.get_title (FontButton* self) @extern ("gtk_font_button_get_title");
fn CInt FontButton.get_use_font (FontButton* self) @extern ("gtk_font_button_get_use_font");
fn CInt FontButton.get_use_size (FontButton* self) @extern ("gtk_font_button_get_use_size");
fn CInt FontButton.set_font_name (FontButton* self, ZString fontname) @extern ("gtk_font_button_set_font_name");
fn void FontButton.set_show_size (FontButton* self, CInt show_size) @extern ("gtk_font_button_set_show_size");
fn void FontButton.set_show_style (FontButton* self, CInt show_style) @extern ("gtk_font_button_set_show_style");
fn void FontButton.set_title (FontButton* self, ZString title) @extern ("gtk_font_button_set_title");
fn void FontButton.set_use_font (FontButton* self, CInt use_font) @extern ("gtk_font_button_set_use_font");
fn void FontButton.set_use_size (FontButton* self, CInt use_size) @extern ("gtk_font_button_set_use_size");
	6 properties
	1 signals
	1 virtuals
def FontButtonPrivate = void;

FontChooser (Interface)
struct FontChooserDialog (ImplementorIface, Buildable, FontChooser) {
	inline Dialog parent_instance;
	FontChooserDialogPrivate* priv;
}

fn Widget* FontChooserDialog.new (ZString title, Window* parent) @operator (construct) @extern ("gtk_font_chooser_dialog_new");
def FontChooserDialogPrivate = void;

enum FontChooserLevel: CInt (inline CInt bit) {
	FAMILY = 0,
	STYLE = 1,
	SIZE = 2,
	VARIATIONS = 4,
	FEATURES = 8
}

struct FontChooserWidget (ImplementorIface, Buildable, FontChooser, Orientable) {
	inline Box parent_instance;
	FontChooserWidgetPrivate* priv;
}

fn Widget* FontChooserWidget.new () @operator (construct) @extern ("gtk_font_chooser_widget_new");
	1 properties
def FontChooserWidgetPrivate = void;

def FontFilterFunc = fn CInt (FontFamily* family, FontFace* face, void* data) @export;
struct FontSelection (ImplementorIface, Buildable, Orientable) {
	inline Box parent_instance;
	FontSelectionPrivate* priv;
}

fn Widget* FontSelection.new () @operator (construct) @extern ("gtk_font_selection_new");
fn FontFace* FontSelection.get_face (FontSelection* self) @extern ("gtk_font_selection_get_face");
fn Widget* FontSelection.get_face_list (FontSelection* self) @extern ("gtk_font_selection_get_face_list");
fn FontFamily* FontSelection.get_family (FontSelection* self) @extern ("gtk_font_selection_get_family");
fn Widget* FontSelection.get_family_list (FontSelection* self) @extern ("gtk_font_selection_get_family_list");
fn ZString FontSelection.get_font_name (FontSelection* self) @extern ("gtk_font_selection_get_font_name");
fn Widget* FontSelection.get_preview_entry (FontSelection* self) @extern ("gtk_font_selection_get_preview_entry");
fn ZString FontSelection.get_preview_text (FontSelection* self) @extern ("gtk_font_selection_get_preview_text");
fn int FontSelection.get_size (FontSelection* self) @extern ("gtk_font_selection_get_size");
fn Widget* FontSelection.get_size_entry (FontSelection* self) @extern ("gtk_font_selection_get_size_entry");
fn Widget* FontSelection.get_size_list (FontSelection* self) @extern ("gtk_font_selection_get_size_list");
fn CInt FontSelection.set_font_name (FontSelection* self, ZString fontname) @extern ("gtk_font_selection_set_font_name");
fn void FontSelection.set_preview_text (FontSelection* self, ZString text) @extern ("gtk_font_selection_set_preview_text");
	2 properties
struct FontSelectionDialog (ImplementorIface, Buildable) {
	inline Dialog parent_instance;
	FontSelectionDialogPrivate* priv;
}

fn Widget* FontSelectionDialog.new (ZString title) @operator (construct) @extern ("gtk_font_selection_dialog_new");
fn Widget* FontSelectionDialog.get_cancel_button (FontSelectionDialog* self) @extern ("gtk_font_selection_dialog_get_cancel_button");
fn ZString FontSelectionDialog.get_font_name (FontSelectionDialog* self) @extern ("gtk_font_selection_dialog_get_font_name");
fn Widget* FontSelectionDialog.get_font_selection (FontSelectionDialog* self) @extern ("gtk_font_selection_dialog_get_font_selection");
fn Widget* FontSelectionDialog.get_ok_button (FontSelectionDialog* self) @extern ("gtk_font_selection_dialog_get_ok_button");
fn ZString FontSelectionDialog.get_preview_text (FontSelectionDialog* self) @extern ("gtk_font_selection_dialog_get_preview_text");
fn CInt FontSelectionDialog.set_font_name (FontSelectionDialog* self, ZString fontname) @extern ("gtk_font_selection_dialog_set_font_name");
fn void FontSelectionDialog.set_preview_text (FontSelectionDialog* self, ZString text) @extern ("gtk_font_selection_dialog_set_preview_text");
def FontSelectionDialogPrivate = void;

def FontSelectionPrivate = void;

struct Frame (ImplementorIface, Buildable) {
	inline Bin bin;
	FramePrivate* priv;
}

fn Widget* Frame.new (ZString label) @operator (construct) @extern ("gtk_frame_new");
fn ZString Frame.get_label (Frame* self) @extern ("gtk_frame_get_label");
fn void Frame.get_label_align (Frame* self, float xalign, float yalign) @extern ("gtk_frame_get_label_align");
fn Widget* Frame.get_label_widget (Frame* self) @extern ("gtk_frame_get_label_widget");
fn ShadowType Frame.get_shadow_type (Frame* self) @extern ("gtk_frame_get_shadow_type");
fn void Frame.set_label (Frame* self, ZString label) @extern ("gtk_frame_set_label");
fn void Frame.set_label_align (Frame* self, float xalign, float yalign) @extern ("gtk_frame_set_label_align");
fn void Frame.set_label_widget (Frame* self, Widget* label_widget) @extern ("gtk_frame_set_label_widget");
fn void Frame.set_shadow_type (Frame* self, ShadowType type) @extern ("gtk_frame_set_shadow_type");
	5 properties
	1 virtuals
def FrameAccessible = void;
def FrameAccessiblePrivate = void;

def FramePrivate = void;

struct GLArea (ImplementorIface, Buildable) {
	inline Widget parent_instance;
}

fn Widget* GLArea.new () @operator (construct) @extern ("gtk_gl_area_new");
fn void GLArea.attach_buffers (GLArea* self) @extern ("gtk_gl_area_attach_buffers");
fn CInt GLArea.get_auto_render (GLArea* self) @extern ("gtk_gl_area_get_auto_render");
fn gdk::GLContext* GLArea.get_context (GLArea* self) @extern ("gtk_gl_area_get_context");
fn Error* GLArea.get_error (GLArea* self) @extern ("gtk_gl_area_get_error");
fn CInt GLArea.get_has_alpha (GLArea* self) @extern ("gtk_gl_area_get_has_alpha");
fn CInt GLArea.get_has_depth_buffer (GLArea* self) @extern ("gtk_gl_area_get_has_depth_buffer");
fn CInt GLArea.get_has_stencil_buffer (GLArea* self) @extern ("gtk_gl_area_get_has_stencil_buffer");
fn void GLArea.get_required_version (GLArea* self, int major, int minor) @extern ("gtk_gl_area_get_required_version");
fn CInt GLArea.get_use_es (GLArea* self) @extern ("gtk_gl_area_get_use_es");
fn void GLArea.make_current (GLArea* self) @extern ("gtk_gl_area_make_current");
fn void GLArea.queue_render (GLArea* self) @extern ("gtk_gl_area_queue_render");
fn void GLArea.set_auto_render (GLArea* self, CInt auto_render) @extern ("gtk_gl_area_set_auto_render");
fn void GLArea.set_error (GLArea* self, Error* error) @extern ("gtk_gl_area_set_error");
fn void GLArea.set_has_alpha (GLArea* self, CInt has_alpha) @extern ("gtk_gl_area_set_has_alpha");
fn void GLArea.set_has_depth_buffer (GLArea* self, CInt has_depth_buffer) @extern ("gtk_gl_area_set_has_depth_buffer");
fn void GLArea.set_has_stencil_buffer (GLArea* self, CInt has_stencil_buffer) @extern ("gtk_gl_area_set_has_stencil_buffer");
fn void GLArea.set_required_version (GLArea* self, int major, int minor) @extern ("gtk_gl_area_set_required_version");
fn void GLArea.set_use_es (GLArea* self, CInt use_es) @extern ("gtk_gl_area_set_use_es");
	6 properties
	3 signals
	2 virtuals
struct Gesture {
	void* unused;
}

fn CInt Gesture.get_bounding_box (Gesture* self, gdk::Rectangle rect) @extern ("gtk_gesture_get_bounding_box");
fn CInt Gesture.get_bounding_box_center (Gesture* self, double x, double y) @extern ("gtk_gesture_get_bounding_box_center");
fn gdk::Device* Gesture.get_device (Gesture* self) @extern ("gtk_gesture_get_device");
fn List* Gesture.get_group (Gesture* self) @extern ("gtk_gesture_get_group");
fn gdk::Event* Gesture.get_last_event (Gesture* self, gdk::EventSequence* sequence) @extern ("gtk_gesture_get_last_event");
fn gdk::EventSequence* Gesture.get_last_updated_sequence (Gesture* self) @extern ("gtk_gesture_get_last_updated_sequence");
fn CInt Gesture.get_point (Gesture* self, gdk::EventSequence* sequence, double x, double y) @extern ("gtk_gesture_get_point");
fn EventSequenceState Gesture.get_sequence_state (Gesture* self, gdk::EventSequence* sequence) @extern ("gtk_gesture_get_sequence_state");
fn List* Gesture.get_sequences (Gesture* self) @extern ("gtk_gesture_get_sequences");
fn gdk::Window* Gesture.get_window (Gesture* self) @extern ("gtk_gesture_get_window");
fn void Gesture.group (Gesture* self, Gesture* gesture) @extern ("gtk_gesture_group");
fn CInt Gesture.handles_sequence (Gesture* self, gdk::EventSequence* sequence) @extern ("gtk_gesture_handles_sequence");
fn CInt Gesture.is_active (Gesture* self) @extern ("gtk_gesture_is_active");
fn CInt Gesture.is_grouped_with (Gesture* self, Gesture* other) @extern ("gtk_gesture_is_grouped_with");
fn CInt Gesture.is_recognized (Gesture* self) @extern ("gtk_gesture_is_recognized");
fn CInt Gesture.set_sequence_state (Gesture* self, gdk::EventSequence* sequence, EventSequenceState state) @extern ("gtk_gesture_set_sequence_state");
fn CInt Gesture.set_state (Gesture* self, EventSequenceState state) @extern ("gtk_gesture_set_state");
fn void Gesture.set_window (Gesture* self, gdk::Window* window) @extern ("gtk_gesture_set_window");
fn void Gesture.ungroup (Gesture* self) @extern ("gtk_gesture_ungroup");
	2 properties
	5 signals
struct GestureDrag {
	void* unused;
}

fn Gesture* GestureDrag.new (Widget* widget) @operator (construct) @extern ("gtk_gesture_drag_new");
fn CInt GestureDrag.get_offset (GestureDrag* self, double x, double y) @extern ("gtk_gesture_drag_get_offset");
fn CInt GestureDrag.get_start_point (GestureDrag* self, double x, double y) @extern ("gtk_gesture_drag_get_start_point");
	3 signals
struct GestureLongPress {
	void* unused;
}

fn Gesture* GestureLongPress.new (Widget* widget) @operator (construct) @extern ("gtk_gesture_long_press_new");
	1 properties
	2 signals
struct GestureMultiPress {
	void* unused;
}

fn Gesture* GestureMultiPress.new (Widget* widget) @operator (construct) @extern ("gtk_gesture_multi_press_new");
fn CInt GestureMultiPress.get_area (GestureMultiPress* self, gdk::Rectangle rect) @extern ("gtk_gesture_multi_press_get_area");
fn void GestureMultiPress.set_area (GestureMultiPress* self, gdk::Rectangle* rect) @extern ("gtk_gesture_multi_press_set_area");
	3 signals
struct GesturePan {
	void* unused;
}

fn Gesture* GesturePan.new (Widget* widget, Orientation orientation) @operator (construct) @extern ("gtk_gesture_pan_new");
fn Orientation GesturePan.get_orientation (GesturePan* self) @extern ("gtk_gesture_pan_get_orientation");
fn void GesturePan.set_orientation (GesturePan* self, Orientation orientation) @extern ("gtk_gesture_pan_set_orientation");
	1 properties
	1 signals
struct GestureRotate {
	void* unused;
}

fn Gesture* GestureRotate.new (Widget* widget) @operator (construct) @extern ("gtk_gesture_rotate_new");
fn double GestureRotate.get_angle_delta (GestureRotate* self) @extern ("gtk_gesture_rotate_get_angle_delta");
	1 signals
struct GestureSingle {
	void* unused;
}

fn uint GestureSingle.get_button (GestureSingle* self) @extern ("gtk_gesture_single_get_button");
fn uint GestureSingle.get_current_button (GestureSingle* self) @extern ("gtk_gesture_single_get_current_button");
fn gdk::EventSequence* GestureSingle.get_current_sequence (GestureSingle* self) @extern ("gtk_gesture_single_get_current_sequence");
fn CInt GestureSingle.get_exclusive (GestureSingle* self) @extern ("gtk_gesture_single_get_exclusive");
fn CInt GestureSingle.get_touch_only (GestureSingle* self) @extern ("gtk_gesture_single_get_touch_only");
fn void GestureSingle.set_button (GestureSingle* self, uint button) @extern ("gtk_gesture_single_set_button");
fn void GestureSingle.set_exclusive (GestureSingle* self, CInt exclusive) @extern ("gtk_gesture_single_set_exclusive");
fn void GestureSingle.set_touch_only (GestureSingle* self, CInt touch_only) @extern ("gtk_gesture_single_set_touch_only");
	3 properties
struct GestureStylus {
	void* unused;
}

fn Gesture* GestureStylus.new (Widget* widget) @operator (construct) @extern ("gtk_gesture_stylus_new");
fn CInt GestureStylus.get_axes (GestureStylus* self, char** axes, char** values) @extern ("gtk_gesture_stylus_get_axes");
fn CInt GestureStylus.get_axis (GestureStylus* self, gdk::AxisUse axis, double value) @extern ("gtk_gesture_stylus_get_axis");
fn gdk::DeviceTool* GestureStylus.get_device_tool (GestureStylus* self) @extern ("gtk_gesture_stylus_get_device_tool");
	4 signals
struct GestureSwipe {
	void* unused;
}

fn Gesture* GestureSwipe.new (Widget* widget) @operator (construct) @extern ("gtk_gesture_swipe_new");
fn CInt GestureSwipe.get_velocity (GestureSwipe* self, double velocity_x, double velocity_y) @extern ("gtk_gesture_swipe_get_velocity");
	1 signals
struct GestureZoom {
	void* unused;
}

fn Gesture* GestureZoom.new (Widget* widget) @operator (construct) @extern ("gtk_gesture_zoom_new");
fn double GestureZoom.get_scale_delta (GestureZoom* self) @extern ("gtk_gesture_zoom_get_scale_delta");
	1 signals
struct Gradient {
	void* unused;
}

fn Gradient* Gradient.new_linear (double x0, double y0, double x1, double y1) @operator (construct) @extern ("gtk_gradient_new_linear");
fn Gradient* Gradient.new_radial (double x0, double y0, double radius0, double x1, double y1, double radius1) @operator (construct) @extern ("gtk_gradient_new_radial");
fn void Gradient.add_color_stop (Gradient* self, double offset, SymbolicColor* color) @extern ("gtk_gradient_add_color_stop");
fn Gradient* Gradient.ref (Gradient* self) @extern ("gtk_gradient_ref");
fn CInt Gradient.resolve (Gradient* self, StyleProperties* props, Pattern* resolved_gradient) @extern ("gtk_gradient_resolve");
fn Pattern* Gradient.resolve_for_context (Gradient* self, StyleContext* context) @extern ("gtk_gradient_resolve_for_context");
fn ZString Gradient.to_string (Gradient* self) @extern ("gtk_gradient_to_string");
fn void Gradient.unref (Gradient* self) @extern ("gtk_gradient_unref");
struct Grid (ImplementorIface, Buildable, Orientable) {
	inline Container container;
	GridPrivate* priv;
}

fn Widget* Grid.new () @operator (construct) @extern ("gtk_grid_new");
fn void Grid.attach (Grid* self, Widget* child, int left, int top, int width, int height) @extern ("gtk_grid_attach");
fn void Grid.attach_next_to (Grid* self, Widget* child, Widget* sibling, PositionType side, int width, int height) @extern ("gtk_grid_attach_next_to");
fn int Grid.get_baseline_row (Grid* self) @extern ("gtk_grid_get_baseline_row");
fn Widget* Grid.get_child_at (Grid* self, int left, int top) @extern ("gtk_grid_get_child_at");
fn CInt Grid.get_column_homogeneous (Grid* self) @extern ("gtk_grid_get_column_homogeneous");
fn uint Grid.get_column_spacing (Grid* self) @extern ("gtk_grid_get_column_spacing");
fn BaselinePosition Grid.get_row_baseline_position (Grid* self, int row) @extern ("gtk_grid_get_row_baseline_position");
fn CInt Grid.get_row_homogeneous (Grid* self) @extern ("gtk_grid_get_row_homogeneous");
fn uint Grid.get_row_spacing (Grid* self) @extern ("gtk_grid_get_row_spacing");
fn void Grid.insert_column (Grid* self, int position) @extern ("gtk_grid_insert_column");
fn void Grid.insert_next_to (Grid* self, Widget* sibling, PositionType side) @extern ("gtk_grid_insert_next_to");
fn void Grid.insert_row (Grid* self, int position) @extern ("gtk_grid_insert_row");
fn void Grid.remove_column (Grid* self, int position) @extern ("gtk_grid_remove_column");
fn void Grid.remove_row (Grid* self, int position) @extern ("gtk_grid_remove_row");
fn void Grid.set_baseline_row (Grid* self, int row) @extern ("gtk_grid_set_baseline_row");
fn void Grid.set_column_homogeneous (Grid* self, CInt homogeneous) @extern ("gtk_grid_set_column_homogeneous");
fn void Grid.set_column_spacing (Grid* self, uint spacing) @extern ("gtk_grid_set_column_spacing");
fn void Grid.set_row_baseline_position (Grid* self, int row, BaselinePosition pos) @extern ("gtk_grid_set_row_baseline_position");
fn void Grid.set_row_homogeneous (Grid* self, CInt homogeneous) @extern ("gtk_grid_set_row_homogeneous");
fn void Grid.set_row_spacing (Grid* self, uint spacing) @extern ("gtk_grid_set_row_spacing");
	5 properties
def GridPrivate = void;

struct HBox (ImplementorIface, Buildable, Orientable) {
	inline Box box;
}

fn Widget* HBox.new (CInt homogeneous, int spacing) @operator (construct) @extern ("gtk_hbox_new");
struct HButtonBox (ImplementorIface, Buildable, Orientable) {
	inline ButtonBox button_box;
}

fn Widget* HButtonBox.new () @operator (construct) @extern ("gtk_hbutton_box_new");
struct HPaned (ImplementorIface, Buildable, Orientable) {
	inline Paned paned;
}

fn Widget* HPaned.new () @operator (construct) @extern ("gtk_hpaned_new");
struct HSV (ImplementorIface, Buildable) {
	inline Widget parent_instance;
	HSVPrivate* priv;
}

fn Widget* HSV.new () @operator (construct) @extern ("gtk_hsv_new");
fn void HSV.to_rgb (HSV* self, double h, double s, double v, double r, double g, double b) @extern ("gtk_hsv_to_rgb");
fn void HSV.get_color (HSV* self, double h, double s, double v) @extern ("gtk_hsv_get_color");
fn void HSV.get_metrics (HSV* self, int size, int ring_width) @extern ("gtk_hsv_get_metrics");
fn CInt HSV.is_adjusting (HSV* self) @extern ("gtk_hsv_is_adjusting");
fn void HSV.set_color (HSV* self, double h, double s, double v) @extern ("gtk_hsv_set_color");
fn void HSV.set_metrics (HSV* self, int size, int ring_width) @extern ("gtk_hsv_set_metrics");
	2 signals
	2 virtuals
def HSVPrivate = void;

struct HScale (ImplementorIface, Buildable, Orientable) {
	inline Scale scale;
}

fn Widget* HScale.new (Adjustment* adjustment) @operator (construct) @extern ("gtk_hscale_new");
fn Widget* HScale.new_with_range (double min, double max, double step) @operator (construct) @extern ("gtk_hscale_new_with_range");
struct HScrollbar (ImplementorIface, Buildable, Orientable) {
	inline Scrollbar scrollbar;
}

fn Widget* HScrollbar.new (Adjustment* adjustment) @operator (construct) @extern ("gtk_hscrollbar_new");
struct HSeparator (ImplementorIface, Buildable, Orientable) {
	inline Separator separator;
}

fn Widget* HSeparator.new () @operator (construct) @extern ("gtk_hseparator_new");
struct HandleBox (ImplementorIface, Buildable) {
	inline Bin bin;
	HandleBoxPrivate* priv;
}

fn Widget* HandleBox.new () @operator (construct) @extern ("gtk_handle_box_new");
fn CInt HandleBox.get_child_detached (HandleBox* self) @extern ("gtk_handle_box_get_child_detached");
fn PositionType HandleBox.get_handle_position (HandleBox* self) @extern ("gtk_handle_box_get_handle_position");
fn ShadowType HandleBox.get_shadow_type (HandleBox* self) @extern ("gtk_handle_box_get_shadow_type");
fn PositionType HandleBox.get_snap_edge (HandleBox* self) @extern ("gtk_handle_box_get_snap_edge");
fn void HandleBox.set_handle_position (HandleBox* self, PositionType position) @extern ("gtk_handle_box_set_handle_position");
fn void HandleBox.set_shadow_type (HandleBox* self, ShadowType type) @extern ("gtk_handle_box_set_shadow_type");
fn void HandleBox.set_snap_edge (HandleBox* self, PositionType edge) @extern ("gtk_handle_box_set_snap_edge");
	5 properties
	2 signals
	2 virtuals
def HandleBoxPrivate = void;

struct HeaderBar (ImplementorIface, Buildable) {
	inline Container container;
}

fn Widget* HeaderBar.new () @operator (construct) @extern ("gtk_header_bar_new");
fn Widget* HeaderBar.get_custom_title (HeaderBar* self) @extern ("gtk_header_bar_get_custom_title");
fn ZString HeaderBar.get_decoration_layout (HeaderBar* self) @extern ("gtk_header_bar_get_decoration_layout");
fn CInt HeaderBar.get_has_subtitle (HeaderBar* self) @extern ("gtk_header_bar_get_has_subtitle");
fn CInt HeaderBar.get_show_close_button (HeaderBar* self) @extern ("gtk_header_bar_get_show_close_button");
fn ZString HeaderBar.get_subtitle (HeaderBar* self) @extern ("gtk_header_bar_get_subtitle");
fn ZString HeaderBar.get_title (HeaderBar* self) @extern ("gtk_header_bar_get_title");
fn void HeaderBar.pack_end (HeaderBar* self, Widget* child) @extern ("gtk_header_bar_pack_end");
fn void HeaderBar.pack_start (HeaderBar* self, Widget* child) @extern ("gtk_header_bar_pack_start");
fn void HeaderBar.set_custom_title (HeaderBar* self, Widget* title_widget) @extern ("gtk_header_bar_set_custom_title");
fn void HeaderBar.set_decoration_layout (HeaderBar* self, ZString layout) @extern ("gtk_header_bar_set_decoration_layout");
fn void HeaderBar.set_has_subtitle (HeaderBar* self, CInt setting) @extern ("gtk_header_bar_set_has_subtitle");
fn void HeaderBar.set_show_close_button (HeaderBar* self, CInt setting) @extern ("gtk_header_bar_set_show_close_button");
fn void HeaderBar.set_subtitle (HeaderBar* self, ZString subtitle) @extern ("gtk_header_bar_set_subtitle");
fn void HeaderBar.set_title (HeaderBar* self, ZString title) @extern ("gtk_header_bar_set_title");
	8 properties
def HeaderBarAccessible = void;
def HeaderBarAccessiblePrivate = void;

def HeaderBarPrivate = void;

struct IMContext {
	inline Object parent_instance;
}

fn CInt IMContext.delete_surrounding (IMContext* self, int offset, int n_chars) @extern ("gtk_im_context_delete_surrounding");
fn CInt IMContext.filter_keypress (IMContext* self, gdk::EventKey* event) @extern ("gtk_im_context_filter_keypress");
fn void IMContext.focus_in (IMContext* self) @extern ("gtk_im_context_focus_in");
fn void IMContext.focus_out (IMContext* self) @extern ("gtk_im_context_focus_out");
fn void IMContext.get_preedit_string (IMContext* self, ZString str, AttrList* attrs, int cursor_pos) @extern ("gtk_im_context_get_preedit_string");
fn CInt IMContext.get_surrounding (IMContext* self, ZString text, int cursor_index) @extern ("gtk_im_context_get_surrounding");
fn void IMContext.reset (IMContext* self) @extern ("gtk_im_context_reset");
fn void IMContext.set_client_window (IMContext* self, gdk::Window* window) @extern ("gtk_im_context_set_client_window");
fn void IMContext.set_cursor_location (IMContext* self, gdk::Rectangle* area) @extern ("gtk_im_context_set_cursor_location");
fn void IMContext.set_surrounding (IMContext* self, ZString text, int len, int cursor_index) @extern ("gtk_im_context_set_surrounding");
fn void IMContext.set_use_preedit (IMContext* self, CInt use_preedit) @extern ("gtk_im_context_set_use_preedit");
	2 properties
	6 signals
	16 virtuals
struct IMContextInfo {
	ZString context_id;
	ZString context_name;
	ZString domain;
	ZString domain_dirname;
	ZString default_locales;
}

struct IMContextSimple {
	inline IMContext object;
	IMContextSimplePrivate* priv;
}

fn IMContext* IMContextSimple.new () @operator (construct) @extern ("gtk_im_context_simple_new");
fn void IMContextSimple.add_compose_file (IMContextSimple* self, ZString compose_file) @extern ("gtk_im_context_simple_add_compose_file");
def IMContextSimplePrivate = void;

struct IMMulticontext {
	inline IMContext object;
	IMMulticontextPrivate* priv;
}

fn IMContext* IMMulticontext.new () @operator (construct) @extern ("gtk_im_multicontext_new");
fn void IMMulticontext.append_menuitems (IMMulticontext* self, MenuShell* menushell) @extern ("gtk_im_multicontext_append_menuitems");
fn ZString IMMulticontext.get_context_id (IMMulticontext* self) @extern ("gtk_im_multicontext_get_context_id");
fn void IMMulticontext.set_context_id (IMMulticontext* self, ZString context_id) @extern ("gtk_im_multicontext_set_context_id");
def IMMulticontextPrivate = void;


enum IMPreeditStyle {
	NOTHING,
	CALLBACK,
	NONE
}


enum IMStatusStyle {
	NOTHING,
	CALLBACK,
	NONE
}

const int INPUT_ERROR = -1;
const int INTERFACE_AGE = 32;
struct IconFactory (Buildable) {
	inline Object parent_instance;
	IconFactoryPrivate* priv;
}

fn IconFactory* IconFactory.new () @operator (construct) @extern ("gtk_icon_factory_new");
fn IconSet* IconFactory.lookup_default (IconFactory* self, ZString stock_id) @extern ("gtk_icon_factory_lookup_default");
fn void IconFactory.add (IconFactory* self, ZString stock_id, IconSet* icon_set) @extern ("gtk_icon_factory_add");
fn void IconFactory.add_default (IconFactory* self) @extern ("gtk_icon_factory_add_default");
fn IconSet* IconFactory.lookup (IconFactory* self, ZString stock_id) @extern ("gtk_icon_factory_lookup");
fn void IconFactory.remove_default (IconFactory* self) @extern ("gtk_icon_factory_remove_default");
def IconFactoryPrivate = void;

struct IconInfo {
	void* unused;
}

fn IconInfo* IconInfo.new_for_pixbuf (IconTheme* icon_theme, Pixbuf* pixbuf) @operator (construct) @extern ("gtk_icon_info_new_for_pixbuf");
fn CInt IconInfo.get_attach_points (IconInfo* self, char** points, int n_points) @extern ("gtk_icon_info_get_attach_points");
fn int IconInfo.get_base_scale (IconInfo* self) @extern ("gtk_icon_info_get_base_scale");
fn int IconInfo.get_base_size (IconInfo* self) @extern ("gtk_icon_info_get_base_size");
fn Pixbuf* IconInfo.get_builtin_pixbuf (IconInfo* self) @extern ("gtk_icon_info_get_builtin_pixbuf");
fn ZString IconInfo.get_display_name (IconInfo* self) @extern ("gtk_icon_info_get_display_name");
fn CInt IconInfo.get_embedded_rect (IconInfo* self, gdk::Rectangle rectangle) @extern ("gtk_icon_info_get_embedded_rect");
fn ZString* IconInfo.get_filename (IconInfo* self) @extern ("gtk_icon_info_get_filename");
fn CInt IconInfo.is_symbolic (IconInfo* self) @extern ("gtk_icon_info_is_symbolic");
fn Pixbuf* IconInfo.load_icon (IconInfo* self) @extern ("gtk_icon_info_load_icon");
fn void IconInfo.load_icon_async (IconInfo* self, Cancellable* cancellable, AsyncReadyCallback callback, void* user_data) @extern ("gtk_icon_info_load_icon_async");
fn Pixbuf* IconInfo.load_icon_finish (IconInfo* self, [not parsed]* res) @extern ("gtk_icon_info_load_icon_finish");
fn Surface* IconInfo.load_surface (IconInfo* self, gdk::Window* for_window) @extern ("gtk_icon_info_load_surface");
fn Pixbuf* IconInfo.load_symbolic (IconInfo* self, gdk::RGBA* fg, gdk::RGBA* success_color, gdk::RGBA* warning_color, gdk::RGBA* error_color, CInt was_symbolic) @extern ("gtk_icon_info_load_symbolic");
fn void IconInfo.load_symbolic_async (IconInfo* self, gdk::RGBA* fg, gdk::RGBA* success_color, gdk::RGBA* warning_color, gdk::RGBA* error_color, Cancellable* cancellable, AsyncReadyCallback callback, void* user_data) @extern ("gtk_icon_info_load_symbolic_async");
fn Pixbuf* IconInfo.load_symbolic_finish (IconInfo* self, [not parsed]* res, CInt was_symbolic) @extern ("gtk_icon_info_load_symbolic_finish");
fn Pixbuf* IconInfo.load_symbolic_for_context (IconInfo* self, StyleContext* context, CInt was_symbolic) @extern ("gtk_icon_info_load_symbolic_for_context");
fn void IconInfo.load_symbolic_for_context_async (IconInfo* self, StyleContext* context, Cancellable* cancellable, AsyncReadyCallback callback, void* user_data) @extern ("gtk_icon_info_load_symbolic_for_context_async");
fn Pixbuf* IconInfo.load_symbolic_for_context_finish (IconInfo* self, [not parsed]* res, CInt was_symbolic) @extern ("gtk_icon_info_load_symbolic_for_context_finish");
fn Pixbuf* IconInfo.load_symbolic_for_style (IconInfo* self, Style* style, StateType state, CInt was_symbolic) @extern ("gtk_icon_info_load_symbolic_for_style");
fn void IconInfo.set_raw_coordinates (IconInfo* self, CInt raw_coordinates) @extern ("gtk_icon_info_set_raw_coordinates");
enum IconLookupFlags: CInt (inline CInt bit) {
	NO_SVG = 1,
	FORCE_SVG = 2,
	USE_BUILTIN = 4,
	GENERIC_FALLBACK = 8,
	FORCE_SIZE = 16,
	FORCE_REGULAR = 32,
	FORCE_SYMBOLIC = 64,
	DIR_LTR = 128,
	DIR_RTL = 256
}

struct IconSet {
	void* unused;
}

fn IconSet* IconSet.new () @operator (construct) @extern ("gtk_icon_set_new");
fn IconSet* IconSet.new_from_pixbuf (Pixbuf* pixbuf) @operator (construct) @extern ("gtk_icon_set_new_from_pixbuf");
fn void IconSet.add_source (IconSet* self, IconSource* source) @extern ("gtk_icon_set_add_source");
fn IconSet* IconSet.copy (IconSet* self) @extern ("gtk_icon_set_copy");
fn void IconSet.get_sizes (IconSet* self, char** sizes, int n_sizes) @extern ("gtk_icon_set_get_sizes");
fn IconSet* IconSet.ref (IconSet* self) @extern ("gtk_icon_set_ref");
fn Pixbuf* IconSet.render_icon (IconSet* self, Style* style, TextDirection direction, StateType state, int size, Widget* widget, ZString detail) @extern ("gtk_icon_set_render_icon");
fn Pixbuf* IconSet.render_icon_pixbuf (IconSet* self, StyleContext* context, int size) @extern ("gtk_icon_set_render_icon_pixbuf");
fn Surface* IconSet.render_icon_surface (IconSet* self, StyleContext* context, int size, int scale, gdk::Window* for_window) @extern ("gtk_icon_set_render_icon_surface");
fn void IconSet.unref (IconSet* self) @extern ("gtk_icon_set_unref");

enum IconSize {
	INVALID,
	MENU,
	SMALL_TOOLBAR,
	LARGE_TOOLBAR,
	BUTTON,
	DND,
	DIALOG
}

struct IconSource {
	void* unused;
}

fn IconSource* IconSource.new () @operator (construct) @extern ("gtk_icon_source_new");
fn IconSource* IconSource.copy (IconSource* self) @extern ("gtk_icon_source_copy");
fn void IconSource.free (IconSource* self) @extern ("gtk_icon_source_free");
fn TextDirection IconSource.get_direction (IconSource* self) @extern ("gtk_icon_source_get_direction");
fn CInt IconSource.get_direction_wildcarded (IconSource* self) @extern ("gtk_icon_source_get_direction_wildcarded");
fn ZString* IconSource.get_filename (IconSource* self) @extern ("gtk_icon_source_get_filename");
fn ZString IconSource.get_icon_name (IconSource* self) @extern ("gtk_icon_source_get_icon_name");
fn Pixbuf* IconSource.get_pixbuf (IconSource* self) @extern ("gtk_icon_source_get_pixbuf");
fn int IconSource.get_size (IconSource* self) @extern ("gtk_icon_source_get_size");
fn CInt IconSource.get_size_wildcarded (IconSource* self) @extern ("gtk_icon_source_get_size_wildcarded");
fn StateType IconSource.get_state (IconSource* self) @extern ("gtk_icon_source_get_state");
fn CInt IconSource.get_state_wildcarded (IconSource* self) @extern ("gtk_icon_source_get_state_wildcarded");
fn void IconSource.set_direction (IconSource* self, TextDirection direction) @extern ("gtk_icon_source_set_direction");
fn void IconSource.set_direction_wildcarded (IconSource* self, CInt setting) @extern ("gtk_icon_source_set_direction_wildcarded");
fn void IconSource.set_filename (IconSource* self, ZString* filename) @extern ("gtk_icon_source_set_filename");
fn void IconSource.set_icon_name (IconSource* self, ZString icon_name) @extern ("gtk_icon_source_set_icon_name");
fn void IconSource.set_pixbuf (IconSource* self, Pixbuf* pixbuf) @extern ("gtk_icon_source_set_pixbuf");
fn void IconSource.set_size (IconSource* self, int size) @extern ("gtk_icon_source_set_size");
fn void IconSource.set_size_wildcarded (IconSource* self, CInt setting) @extern ("gtk_icon_source_set_size_wildcarded");
fn void IconSource.set_state (IconSource* self, StateType state) @extern ("gtk_icon_source_set_state");
fn void IconSource.set_state_wildcarded (IconSource* self, CInt setting) @extern ("gtk_icon_source_set_state_wildcarded");
struct IconTheme {
	inline Object parent_instance;
	IconThemePrivate* priv;
}

fn IconTheme* IconTheme.new () @operator (construct) @extern ("gtk_icon_theme_new");
fn void IconTheme.add_builtin_icon (IconTheme* self, ZString icon_name, int size, Pixbuf* pixbuf) @extern ("gtk_icon_theme_add_builtin_icon");
fn IconTheme* IconTheme.get_default (IconTheme* self) @extern ("gtk_icon_theme_get_default");
fn IconTheme* IconTheme.get_for_screen (IconTheme* self, gdk::Screen* screen) @extern ("gtk_icon_theme_get_for_screen");
fn void IconTheme.add_resource_path (IconTheme* self, ZString path) @extern ("gtk_icon_theme_add_resource_path");
fn void IconTheme.append_search_path (IconTheme* self, ZString* path) @extern ("gtk_icon_theme_append_search_path");
fn IconInfo* IconTheme.choose_icon (IconTheme* self, char** icon_names, int size, IconLookupFlags flags) @extern ("gtk_icon_theme_choose_icon");
fn IconInfo* IconTheme.choose_icon_for_scale (IconTheme* self, char** icon_names, int size, int scale, IconLookupFlags flags) @extern ("gtk_icon_theme_choose_icon_for_scale");
fn ZString IconTheme.get_example_icon_name (IconTheme* self) @extern ("gtk_icon_theme_get_example_icon_name");
fn char** IconTheme.get_icon_sizes (IconTheme* self, ZString icon_name) @extern ("gtk_icon_theme_get_icon_sizes");
fn void IconTheme.get_search_path (IconTheme* self, char** path, int n_elements) @extern ("gtk_icon_theme_get_search_path");
fn CInt IconTheme.has_icon (IconTheme* self, ZString icon_name) @extern ("gtk_icon_theme_has_icon");
fn List* IconTheme.list_contexts (IconTheme* self) @extern ("gtk_icon_theme_list_contexts");
fn List* IconTheme.list_icons (IconTheme* self, ZString context) @extern ("gtk_icon_theme_list_icons");
fn Pixbuf* IconTheme.load_icon (IconTheme* self, ZString icon_name, int size, IconLookupFlags flags) @extern ("gtk_icon_theme_load_icon");
fn Pixbuf* IconTheme.load_icon_for_scale (IconTheme* self, ZString icon_name, int size, int scale, IconLookupFlags flags) @extern ("gtk_icon_theme_load_icon_for_scale");
fn Surface* IconTheme.load_surface (IconTheme* self, ZString icon_name, int size, int scale, gdk::Window* for_window, IconLookupFlags flags) @extern ("gtk_icon_theme_load_surface");
fn IconInfo* IconTheme.lookup_by_gicon (IconTheme* self, [not parsed]* icon, int size, IconLookupFlags flags) @extern ("gtk_icon_theme_lookup_by_gicon");
fn IconInfo* IconTheme.lookup_by_gicon_for_scale (IconTheme* self, [not parsed]* icon, int size, int scale, IconLookupFlags flags) @extern ("gtk_icon_theme_lookup_by_gicon_for_scale");
fn IconInfo* IconTheme.lookup_icon (IconTheme* self, ZString icon_name, int size, IconLookupFlags flags) @extern ("gtk_icon_theme_lookup_icon");
fn IconInfo* IconTheme.lookup_icon_for_scale (IconTheme* self, ZString icon_name, int size, int scale, IconLookupFlags flags) @extern ("gtk_icon_theme_lookup_icon_for_scale");
fn void IconTheme.prepend_search_path (IconTheme* self, ZString* path) @extern ("gtk_icon_theme_prepend_search_path");
fn CInt IconTheme.rescan_if_needed (IconTheme* self) @extern ("gtk_icon_theme_rescan_if_needed");
fn void IconTheme.set_custom_theme (IconTheme* self, ZString theme_name) @extern ("gtk_icon_theme_set_custom_theme");
fn void IconTheme.set_screen (IconTheme* self, gdk::Screen* screen) @extern ("gtk_icon_theme_set_screen");
fn void IconTheme.set_search_path (IconTheme* self, char** path, int n_elements) @extern ("gtk_icon_theme_set_search_path");
	1 signals
	1 virtuals

enum IconThemeError {
	NOT_FOUND,
	FAILED
}

def IconThemePrivate = void;

struct IconView (ImplementorIface, Buildable, CellLayout, Scrollable) {
	inline Container parent;
	IconViewPrivate* priv;
}

fn Widget* IconView.new () @operator (construct) @extern ("gtk_icon_view_new");
fn Widget* IconView.new_with_area (CellArea* area) @operator (construct) @extern ("gtk_icon_view_new_with_area");
fn Widget* IconView.new_with_model ([not parsed]* model) @operator (construct) @extern ("gtk_icon_view_new_with_model");
fn void IconView.convert_widget_to_bin_window_coords (IconView* self, int wx, int wy, int bx, int by) @extern ("gtk_icon_view_convert_widget_to_bin_window_coords");
fn Surface* IconView.create_drag_icon (IconView* self, TreePath* path) @extern ("gtk_icon_view_create_drag_icon");
fn void IconView.enable_model_drag_dest (IconView* self, char** targets, int n_targets, gdk::DragAction actions) @extern ("gtk_icon_view_enable_model_drag_dest");
fn void IconView.enable_model_drag_source (IconView* self, gdk::ModifierType start_button_mask, char** targets, int n_targets, gdk::DragAction actions) @extern ("gtk_icon_view_enable_model_drag_source");
fn CInt IconView.get_activate_on_single_click (IconView* self) @extern ("gtk_icon_view_get_activate_on_single_click");
fn CInt IconView.get_cell_rect (IconView* self, TreePath* path, CellRenderer* cell, gdk::Rectangle rect) @extern ("gtk_icon_view_get_cell_rect");
fn int IconView.get_column_spacing (IconView* self) @extern ("gtk_icon_view_get_column_spacing");
fn int IconView.get_columns (IconView* self) @extern ("gtk_icon_view_get_columns");
fn CInt IconView.get_cursor (IconView* self, TreePath* path, CellRenderer* cell) @extern ("gtk_icon_view_get_cursor");
fn CInt IconView.get_dest_item_at_pos (IconView* self, int drag_x, int drag_y, TreePath* path, IconViewDropPosition pos) @extern ("gtk_icon_view_get_dest_item_at_pos");
fn void IconView.get_drag_dest_item (IconView* self, TreePath* path, IconViewDropPosition pos) @extern ("gtk_icon_view_get_drag_dest_item");
fn CInt IconView.get_item_at_pos (IconView* self, int x, int y, TreePath* path, CellRenderer* cell) @extern ("gtk_icon_view_get_item_at_pos");
fn int IconView.get_item_column (IconView* self, TreePath* path) @extern ("gtk_icon_view_get_item_column");
fn Orientation IconView.get_item_orientation (IconView* self) @extern ("gtk_icon_view_get_item_orientation");
fn int IconView.get_item_padding (IconView* self) @extern ("gtk_icon_view_get_item_padding");
fn int IconView.get_item_row (IconView* self, TreePath* path) @extern ("gtk_icon_view_get_item_row");
fn int IconView.get_item_width (IconView* self) @extern ("gtk_icon_view_get_item_width");
fn int IconView.get_margin (IconView* self) @extern ("gtk_icon_view_get_margin");
fn int IconView.get_markup_column (IconView* self) @extern ("gtk_icon_view_get_markup_column");
fn [not parsed]* IconView.get_model (IconView* self) @extern ("gtk_icon_view_get_model");
fn TreePath* IconView.get_path_at_pos (IconView* self, int x, int y) @extern ("gtk_icon_view_get_path_at_pos");
fn int IconView.get_pixbuf_column (IconView* self) @extern ("gtk_icon_view_get_pixbuf_column");
fn CInt IconView.get_reorderable (IconView* self) @extern ("gtk_icon_view_get_reorderable");
fn int IconView.get_row_spacing (IconView* self) @extern ("gtk_icon_view_get_row_spacing");
fn List* IconView.get_selected_items (IconView* self) @extern ("gtk_icon_view_get_selected_items");
fn SelectionMode IconView.get_selection_mode (IconView* self) @extern ("gtk_icon_view_get_selection_mode");
fn int IconView.get_spacing (IconView* self) @extern ("gtk_icon_view_get_spacing");
fn int IconView.get_text_column (IconView* self) @extern ("gtk_icon_view_get_text_column");
fn int IconView.get_tooltip_column (IconView* self) @extern ("gtk_icon_view_get_tooltip_column");
fn CInt IconView.get_tooltip_context (IconView* self, int x, int y, CInt keyboard_tip, [not parsed]* model, TreePath* path, TreeIter iter) @extern ("gtk_icon_view_get_tooltip_context");
fn CInt IconView.get_visible_range (IconView* self, TreePath* start_path, TreePath* end_path) @extern ("gtk_icon_view_get_visible_range");
fn void IconView.item_activated (IconView* self, TreePath* path) @extern ("gtk_icon_view_item_activated");
fn CInt IconView.path_is_selected (IconView* self, TreePath* path) @extern ("gtk_icon_view_path_is_selected");
fn void IconView.scroll_to_path (IconView* self, TreePath* path, CInt use_align, float row_align, float col_align) @extern ("gtk_icon_view_scroll_to_path");
fn void IconView.select_all (IconView* self) @extern ("gtk_icon_view_select_all");
fn void IconView.select_path (IconView* self, TreePath* path) @extern ("gtk_icon_view_select_path");
fn void IconView.selected_foreach (IconView* self, IconViewForeachFunc func, void* data) @extern ("gtk_icon_view_selected_foreach");
fn void IconView.set_activate_on_single_click (IconView* self, CInt single) @extern ("gtk_icon_view_set_activate_on_single_click");
fn void IconView.set_column_spacing (IconView* self, int column_spacing) @extern ("gtk_icon_view_set_column_spacing");
fn void IconView.set_columns (IconView* self, int columns) @extern ("gtk_icon_view_set_columns");
fn void IconView.set_cursor (IconView* self, TreePath* path, CellRenderer* cell, CInt start_editing) @extern ("gtk_icon_view_set_cursor");
fn void IconView.set_drag_dest_item (IconView* self, TreePath* path, IconViewDropPosition pos) @extern ("gtk_icon_view_set_drag_dest_item");
fn void IconView.set_item_orientation (IconView* self, Orientation orientation) @extern ("gtk_icon_view_set_item_orientation");
fn void IconView.set_item_padding (IconView* self, int item_padding) @extern ("gtk_icon_view_set_item_padding");
fn void IconView.set_item_width (IconView* self, int item_width) @extern ("gtk_icon_view_set_item_width");
fn void IconView.set_margin (IconView* self, int margin) @extern ("gtk_icon_view_set_margin");
fn void IconView.set_markup_column (IconView* self, int column) @extern ("gtk_icon_view_set_markup_column");
fn void IconView.set_model (IconView* self, [not parsed]* model) @extern ("gtk_icon_view_set_model");
fn void IconView.set_pixbuf_column (IconView* self, int column) @extern ("gtk_icon_view_set_pixbuf_column");
fn void IconView.set_reorderable (IconView* self, CInt reorderable) @extern ("gtk_icon_view_set_reorderable");
fn void IconView.set_row_spacing (IconView* self, int row_spacing) @extern ("gtk_icon_view_set_row_spacing");
fn void IconView.set_selection_mode (IconView* self, SelectionMode mode) @extern ("gtk_icon_view_set_selection_mode");
fn void IconView.set_spacing (IconView* self, int spacing) @extern ("gtk_icon_view_set_spacing");
fn void IconView.set_text_column (IconView* self, int column) @extern ("gtk_icon_view_set_text_column");
fn void IconView.set_tooltip_cell (IconView* self, Tooltip* tooltip, TreePath* path, CellRenderer* cell) @extern ("gtk_icon_view_set_tooltip_cell");
fn void IconView.set_tooltip_column (IconView* self, int column) @extern ("gtk_icon_view_set_tooltip_column");
fn void IconView.set_tooltip_item (IconView* self, Tooltip* tooltip, TreePath* path) @extern ("gtk_icon_view_set_tooltip_item");
fn void IconView.unselect_all (IconView* self) @extern ("gtk_icon_view_unselect_all");
fn void IconView.unselect_path (IconView* self, TreePath* path) @extern ("gtk_icon_view_unselect_path");
fn void IconView.unset_model_drag_dest (IconView* self) @extern ("gtk_icon_view_unset_model_drag_dest");
fn void IconView.unset_model_drag_source (IconView* self) @extern ("gtk_icon_view_unset_model_drag_source");
	17 properties
	8 signals
	8 virtuals
def IconViewAccessible = void;
def IconViewAccessiblePrivate = void;


enum IconViewDropPosition {
	NO_DROP,
	DROP_INTO,
	DROP_LEFT,
	DROP_RIGHT,
	DROP_ABOVE,
	DROP_BELOW
}

def IconViewForeachFunc = fn void (IconView* icon_view, TreePath* path, void* data) @export;
def IconViewPrivate = void;

struct Image (ImplementorIface, Buildable) {
	inline Misc misc;
	ImagePrivate* priv;
}

fn Widget* Image.new () @operator (construct) @extern ("gtk_image_new");
fn Widget* Image.new_from_animation (PixbufAnimation* animation) @operator (construct) @extern ("gtk_image_new_from_animation");
fn Widget* Image.new_from_file (ZString* filename) @operator (construct) @extern ("gtk_image_new_from_file");
fn Widget* Image.new_from_gicon ([not parsed]* icon, int size) @operator (construct) @extern ("gtk_image_new_from_gicon");
fn Widget* Image.new_from_icon_name (ZString icon_name, int size) @operator (construct) @extern ("gtk_image_new_from_icon_name");
fn Widget* Image.new_from_icon_set (IconSet* icon_set, int size) @operator (construct) @extern ("gtk_image_new_from_icon_set");
fn Widget* Image.new_from_pixbuf (Pixbuf* pixbuf) @operator (construct) @extern ("gtk_image_new_from_pixbuf");
fn Widget* Image.new_from_resource (ZString resource_path) @operator (construct) @extern ("gtk_image_new_from_resource");
fn Widget* Image.new_from_stock (ZString stock_id, int size) @operator (construct) @extern ("gtk_image_new_from_stock");
fn Widget* Image.new_from_surface (Surface* surface) @operator (construct) @extern ("gtk_image_new_from_surface");
fn void Image.clear (Image* self) @extern ("gtk_image_clear");
fn PixbufAnimation* Image.get_animation (Image* self) @extern ("gtk_image_get_animation");
fn void Image.get_gicon (Image* self, [not parsed]* gicon, int size) @extern ("gtk_image_get_gicon");
fn void Image.get_icon_name (Image* self, ZString icon_name, int size) @extern ("gtk_image_get_icon_name");
fn void Image.get_icon_set (Image* self, IconSet* icon_set, int size) @extern ("gtk_image_get_icon_set");
fn Pixbuf* Image.get_pixbuf (Image* self) @extern ("gtk_image_get_pixbuf");
fn int Image.get_pixel_size (Image* self) @extern ("gtk_image_get_pixel_size");
fn void Image.get_stock (Image* self, ZString stock_id, int size) @extern ("gtk_image_get_stock");
fn ImageType Image.get_storage_type (Image* self) @extern ("gtk_image_get_storage_type");
fn void Image.set_from_animation (Image* self, PixbufAnimation* animation) @extern ("gtk_image_set_from_animation");
fn void Image.set_from_file (Image* self, ZString* filename) @extern ("gtk_image_set_from_file");
fn void Image.set_from_gicon (Image* self, [not parsed]* icon, int size) @extern ("gtk_image_set_from_gicon");
fn void Image.set_from_icon_name (Image* self, ZString icon_name, int size) @extern ("gtk_image_set_from_icon_name");
fn void Image.set_from_icon_set (Image* self, IconSet* icon_set, int size) @extern ("gtk_image_set_from_icon_set");
fn void Image.set_from_pixbuf (Image* self, Pixbuf* pixbuf) @extern ("gtk_image_set_from_pixbuf");
fn void Image.set_from_resource (Image* self, ZString resource_path) @extern ("gtk_image_set_from_resource");
fn void Image.set_from_stock (Image* self, ZString stock_id, int size) @extern ("gtk_image_set_from_stock");
fn void Image.set_from_surface (Image* self, Surface* surface) @extern ("gtk_image_set_from_surface");
fn void Image.set_pixel_size (Image* self, int pixel_size) @extern ("gtk_image_set_pixel_size");
	13 properties
def ImageAccessible = void;
def ImageAccessiblePrivate = void;

def ImageCellAccessible = void;
def ImageCellAccessiblePrivate = void;

struct ImageMenuItem (ImplementorIface, Actionable, Activatable, Buildable) {
	inline MenuItem menu_item;
	ImageMenuItemPrivate* priv;
}

fn Widget* ImageMenuItem.new () @operator (construct) @extern ("gtk_image_menu_item_new");
fn Widget* ImageMenuItem.new_from_stock (ZString stock_id, AccelGroup* accel_group) @operator (construct) @extern ("gtk_image_menu_item_new_from_stock");
fn Widget* ImageMenuItem.new_with_label (ZString label) @operator (construct) @extern ("gtk_image_menu_item_new_with_label");
fn Widget* ImageMenuItem.new_with_mnemonic (ZString label) @operator (construct) @extern ("gtk_image_menu_item_new_with_mnemonic");
fn CInt ImageMenuItem.get_always_show_image (ImageMenuItem* self) @extern ("gtk_image_menu_item_get_always_show_image");
fn Widget* ImageMenuItem.get_image (ImageMenuItem* self) @extern ("gtk_image_menu_item_get_image");
fn CInt ImageMenuItem.get_use_stock (ImageMenuItem* self) @extern ("gtk_image_menu_item_get_use_stock");
fn void ImageMenuItem.set_accel_group (ImageMenuItem* self, AccelGroup* accel_group) @extern ("gtk_image_menu_item_set_accel_group");
fn void ImageMenuItem.set_always_show_image (ImageMenuItem* self, CInt always_show) @extern ("gtk_image_menu_item_set_always_show_image");
fn void ImageMenuItem.set_image (ImageMenuItem* self, Widget* image) @extern ("gtk_image_menu_item_set_image");
fn void ImageMenuItem.set_use_stock (ImageMenuItem* self, CInt use_stock) @extern ("gtk_image_menu_item_set_use_stock");
	4 properties
def ImageMenuItemPrivate = void;

def ImagePrivate = void;


enum ImageType {
	EMPTY,
	PIXBUF,
	STOCK,
	ICON_SET,
	ANIMATION,
	ICON_NAME,
	GICON,
	SURFACE
}

struct InfoBar (ImplementorIface, Buildable, Orientable) {
	inline Box parent;
	InfoBarPrivate* priv;
}

fn Widget* InfoBar.new () @operator (construct) @extern ("gtk_info_bar_new");
fn void InfoBar.add_action_widget (InfoBar* self, Widget* child, int response_id) @extern ("gtk_info_bar_add_action_widget");
fn Button* InfoBar.add_button (InfoBar* self, ZString button_text, int response_id) @extern ("gtk_info_bar_add_button");
fn Box* InfoBar.get_action_area (InfoBar* self) @extern ("gtk_info_bar_get_action_area");
fn Box* InfoBar.get_content_area (InfoBar* self) @extern ("gtk_info_bar_get_content_area");
fn MessageType InfoBar.get_message_type (InfoBar* self) @extern ("gtk_info_bar_get_message_type");
fn CInt InfoBar.get_revealed (InfoBar* self) @extern ("gtk_info_bar_get_revealed");
fn CInt InfoBar.get_show_close_button (InfoBar* self) @extern ("gtk_info_bar_get_show_close_button");
fn void InfoBar.response (InfoBar* self, int response_id) @extern ("gtk_info_bar_response");
fn void InfoBar.set_default_response (InfoBar* self, int response_id) @extern ("gtk_info_bar_set_default_response");
fn void InfoBar.set_message_type (InfoBar* self, MessageType message_type) @extern ("gtk_info_bar_set_message_type");
fn void InfoBar.set_response_sensitive (InfoBar* self, int response_id, CInt setting) @extern ("gtk_info_bar_set_response_sensitive");
fn void InfoBar.set_revealed (InfoBar* self, CInt revealed) @extern ("gtk_info_bar_set_revealed");
fn void InfoBar.set_show_close_button (InfoBar* self, CInt setting) @extern ("gtk_info_bar_set_show_close_button");
	3 properties
	2 signals
	2 virtuals
def InfoBarPrivate = void;

enum InputHints: CInt (inline CInt bit) {
	NONE = 0,
	SPELLCHECK = 1,
	NO_SPELLCHECK = 2,
	WORD_COMPLETION = 4,
	LOWERCASE = 8,
	UPPERCASE_CHARS = 16,
	UPPERCASE_WORDS = 32,
	UPPERCASE_SENTENCES = 64,
	INHIBIT_OSK = 128,
	VERTICAL_WRITING = 256,
	EMOJI = 512,
	NO_EMOJI = 1024
}


enum InputPurpose {
	FREE_FORM,
	ALPHA,
	DIGITS,
	NUMBER,
	PHONE,
	URL,
	EMAIL,
	NAME,
	PASSWORD,
	PIN,
	TERMINAL
}

struct Invisible (ImplementorIface, Buildable) {
	inline Widget widget;
	InvisiblePrivate* priv;
}

fn Widget* Invisible.new () @operator (construct) @extern ("gtk_invisible_new");
fn Widget* Invisible.new_for_screen (gdk::Screen* screen) @operator (construct) @extern ("gtk_invisible_new_for_screen");
fn gdk::Screen* Invisible.get_screen (Invisible* self) @extern ("gtk_invisible_get_screen");
fn void Invisible.set_screen (Invisible* self, gdk::Screen* screen) @extern ("gtk_invisible_set_screen");
	1 properties
def InvisiblePrivate = void;

enum JunctionSides: CInt (inline CInt bit) {
	NONE = 0,
	CORNER_TOPLEFT = 1,
	CORNER_TOPRIGHT = 2,
	CORNER_BOTTOMLEFT = 4,
	CORNER_BOTTOMRIGHT = 8,
	TOP = 3,
	BOTTOM = 12,
	LEFT = 5,
	RIGHT = 10
}


enum Justification {
	LEFT,
	RIGHT,
	CENTER,
	FILL
}

def KeySnoopFunc = fn int (Widget* grab_widget, gdk::EventKey* event, void* func_data) @export;
const ZString LEVEL_BAR_OFFSET_FULL = "full";
const ZString LEVEL_BAR_OFFSET_HIGH = "high";
const ZString LEVEL_BAR_OFFSET_LOW = "low";
struct Label (ImplementorIface, Buildable) {
	inline Misc misc;
	LabelPrivate* priv;
}

fn Widget* Label.new (ZString str) @operator (construct) @extern ("gtk_label_new");
fn Widget* Label.new_with_mnemonic (ZString str) @operator (construct) @extern ("gtk_label_new_with_mnemonic");
fn double Label.get_angle (Label* self) @extern ("gtk_label_get_angle");
fn AttrList* Label.get_attributes (Label* self) @extern ("gtk_label_get_attributes");
fn ZString Label.get_current_uri (Label* self) @extern ("gtk_label_get_current_uri");
fn EllipsizeMode Label.get_ellipsize (Label* self) @extern ("gtk_label_get_ellipsize");
fn Justification Label.get_justify (Label* self) @extern ("gtk_label_get_justify");
fn ZString Label.get_label (Label* self) @extern ("gtk_label_get_label");
fn Layout* Label.get_layout (Label* self) @extern ("gtk_label_get_layout");
fn void Label.get_layout_offsets (Label* self, int x, int y) @extern ("gtk_label_get_layout_offsets");
fn CInt Label.get_line_wrap (Label* self) @extern ("gtk_label_get_line_wrap");
fn WrapMode Label.get_line_wrap_mode (Label* self) @extern ("gtk_label_get_line_wrap_mode");
fn int Label.get_lines (Label* self) @extern ("gtk_label_get_lines");
fn int Label.get_max_width_chars (Label* self) @extern ("gtk_label_get_max_width_chars");
fn uint Label.get_mnemonic_keyval (Label* self) @extern ("gtk_label_get_mnemonic_keyval");
fn Widget* Label.get_mnemonic_widget (Label* self) @extern ("gtk_label_get_mnemonic_widget");
fn CInt Label.get_selectable (Label* self) @extern ("gtk_label_get_selectable");
fn CInt Label.get_selection_bounds (Label* self, int start, int end) @extern ("gtk_label_get_selection_bounds");
fn CInt Label.get_single_line_mode (Label* self) @extern ("gtk_label_get_single_line_mode");
fn ZString Label.get_text (Label* self) @extern ("gtk_label_get_text");
fn CInt Label.get_track_visited_links (Label* self) @extern ("gtk_label_get_track_visited_links");
fn CInt Label.get_use_markup (Label* self) @extern ("gtk_label_get_use_markup");
fn CInt Label.get_use_underline (Label* self) @extern ("gtk_label_get_use_underline");
fn int Label.get_width_chars (Label* self) @extern ("gtk_label_get_width_chars");
fn float Label.get_xalign (Label* self) @extern ("gtk_label_get_xalign");
fn float Label.get_yalign (Label* self) @extern ("gtk_label_get_yalign");
fn void Label.select_region (Label* self, int start_offset, int end_offset) @extern ("gtk_label_select_region");
fn void Label.set_angle (Label* self, double angle) @extern ("gtk_label_set_angle");
fn void Label.set_attributes (Label* self, AttrList* attrs) @extern ("gtk_label_set_attributes");
fn void Label.set_ellipsize (Label* self, EllipsizeMode mode) @extern ("gtk_label_set_ellipsize");
fn void Label.set_justify (Label* self, Justification jtype) @extern ("gtk_label_set_justify");
fn void Label.set_label (Label* self, ZString str) @extern ("gtk_label_set_label");
fn void Label.set_line_wrap (Label* self, CInt wrap) @extern ("gtk_label_set_line_wrap");
fn void Label.set_line_wrap_mode (Label* self, WrapMode wrap_mode) @extern ("gtk_label_set_line_wrap_mode");
fn void Label.set_lines (Label* self, int lines) @extern ("gtk_label_set_lines");
fn void Label.set_markup (Label* self, ZString str) @extern ("gtk_label_set_markup");
fn void Label.set_markup_with_mnemonic (Label* self, ZString str) @extern ("gtk_label_set_markup_with_mnemonic");
fn void Label.set_max_width_chars (Label* self, int n_chars) @extern ("gtk_label_set_max_width_chars");
fn void Label.set_mnemonic_widget (Label* self, Widget* widget) @extern ("gtk_label_set_mnemonic_widget");
fn void Label.set_pattern (Label* self, ZString pattern) @extern ("gtk_label_set_pattern");
fn void Label.set_selectable (Label* self, CInt setting) @extern ("gtk_label_set_selectable");
fn void Label.set_single_line_mode (Label* self, CInt single_line_mode) @extern ("gtk_label_set_single_line_mode");
fn void Label.set_text (Label* self, ZString str) @extern ("gtk_label_set_text");
fn void Label.set_text_with_mnemonic (Label* self, ZString str) @extern ("gtk_label_set_text_with_mnemonic");
fn void Label.set_track_visited_links (Label* self, CInt track_links) @extern ("gtk_label_set_track_visited_links");
fn void Label.set_use_markup (Label* self, CInt setting) @extern ("gtk_label_set_use_markup");
fn void Label.set_use_underline (Label* self, CInt setting) @extern ("gtk_label_set_use_underline");
fn void Label.set_width_chars (Label* self, int n_chars) @extern ("gtk_label_set_width_chars");
fn void Label.set_xalign (Label* self, float xalign) @extern ("gtk_label_set_xalign");
fn void Label.set_yalign (Label* self, float yalign) @extern ("gtk_label_set_yalign");
	22 properties
	5 signals
	4 virtuals
def LabelAccessible = void;
def LabelAccessiblePrivate = void;

def LabelPrivate = void;

def LabelSelectionInfo = void;

struct Layout (ImplementorIface, Buildable, Scrollable) {
	inline Container container;
	LayoutPrivate* priv;
}

fn Widget* Layout.new (Adjustment* hadjustment, Adjustment* vadjustment) @operator (construct) @extern ("gtk_layout_new");
fn gdk::Window* Layout.get_bin_window (Layout* self) @extern ("gtk_layout_get_bin_window");
fn Adjustment* Layout.get_hadjustment (Layout* self) @extern ("gtk_layout_get_hadjustment");
fn void Layout.get_size (Layout* self, uint width, uint height) @extern ("gtk_layout_get_size");
fn Adjustment* Layout.get_vadjustment (Layout* self) @extern ("gtk_layout_get_vadjustment");
fn void Layout.move (Layout* self, Widget* child_widget, int x, int y) @extern ("gtk_layout_move");
fn void Layout.put (Layout* self, Widget* child_widget, int x, int y) @extern ("gtk_layout_put");
fn void Layout.set_hadjustment (Layout* self, Adjustment* adjustment) @extern ("gtk_layout_set_hadjustment");
fn void Layout.set_size (Layout* self, uint width, uint height) @extern ("gtk_layout_set_size");
fn void Layout.set_vadjustment (Layout* self, Adjustment* adjustment) @extern ("gtk_layout_set_vadjustment");
	2 properties
def LayoutPrivate = void;

struct LevelBar (ImplementorIface, Buildable, Orientable) {
	inline Widget parent;
	LevelBarPrivate* priv;
}

fn Widget* LevelBar.new () @operator (construct) @extern ("gtk_level_bar_new");
fn Widget* LevelBar.new_for_interval (double min_value, double max_value) @operator (construct) @extern ("gtk_level_bar_new_for_interval");
fn void LevelBar.add_offset_value (LevelBar* self, ZString name, double value) @extern ("gtk_level_bar_add_offset_value");
fn CInt LevelBar.get_inverted (LevelBar* self) @extern ("gtk_level_bar_get_inverted");
fn double LevelBar.get_max_value (LevelBar* self) @extern ("gtk_level_bar_get_max_value");
fn double LevelBar.get_min_value (LevelBar* self) @extern ("gtk_level_bar_get_min_value");
fn LevelBarMode LevelBar.get_mode (LevelBar* self) @extern ("gtk_level_bar_get_mode");
fn CInt LevelBar.get_offset_value (LevelBar* self, ZString name, double value) @extern ("gtk_level_bar_get_offset_value");
fn double LevelBar.get_value (LevelBar* self) @extern ("gtk_level_bar_get_value");
fn void LevelBar.remove_offset_value (LevelBar* self, ZString name) @extern ("gtk_level_bar_remove_offset_value");
fn void LevelBar.set_inverted (LevelBar* self, CInt inverted) @extern ("gtk_level_bar_set_inverted");
fn void LevelBar.set_max_value (LevelBar* self, double value) @extern ("gtk_level_bar_set_max_value");
fn void LevelBar.set_min_value (LevelBar* self, double value) @extern ("gtk_level_bar_set_min_value");
fn void LevelBar.set_mode (LevelBar* self, LevelBarMode mode) @extern ("gtk_level_bar_set_mode");
fn void LevelBar.set_value (LevelBar* self, double value) @extern ("gtk_level_bar_set_value");
	5 properties
	1 signals
	1 virtuals
def LevelBarAccessible = void;
def LevelBarAccessiblePrivate = void;


enum LevelBarMode {
	CONTINUOUS,
	DISCRETE
}

def LevelBarPrivate = void;


enum License {
	UNKNOWN,
	CUSTOM,
	GPL_2_0,
	GPL_3_0,
	LGPL_2_1,
	LGPL_3_0,
	BSD,
	MIT_X11,
	ARTISTIC,
	GPL_2_0_ONLY,
	GPL_3_0_ONLY,
	LGPL_2_1_ONLY,
	LGPL_3_0_ONLY,
	AGPL_3_0,
	AGPL_3_0_ONLY,
	BSD_3,
	APACHE_2_0,
	MPL_2_0
}

struct LinkButton (ImplementorIface, Actionable, Activatable, Buildable) {
	inline Button parent_instance;
	LinkButtonPrivate* priv;
}

fn Widget* LinkButton.new (ZString uri) @operator (construct) @extern ("gtk_link_button_new");
fn Widget* LinkButton.new_with_label (ZString uri, ZString label) @operator (construct) @extern ("gtk_link_button_new_with_label");
fn ZString LinkButton.get_uri (LinkButton* self) @extern ("gtk_link_button_get_uri");
fn CInt LinkButton.get_visited (LinkButton* self) @extern ("gtk_link_button_get_visited");
fn void LinkButton.set_uri (LinkButton* self, ZString uri) @extern ("gtk_link_button_set_uri");
fn void LinkButton.set_visited (LinkButton* self, CInt visited) @extern ("gtk_link_button_set_visited");
	2 properties
	1 signals
	1 virtuals
def LinkButtonAccessible = void;
def LinkButtonAccessiblePrivate = void;

def LinkButtonPrivate = void;

struct ListBox (ImplementorIface, Buildable) {
	inline Container parent_instance;
}

fn Widget* ListBox.new () @operator (construct) @extern ("gtk_list_box_new");
fn void ListBox.bind_model (ListBox* self, [not parsed]* model, ListBoxCreateWidgetFunc create_widget_func, void* user_data, DestroyNotify user_data_free_func) @extern ("gtk_list_box_bind_model");
fn void ListBox.drag_highlight_row (ListBox* self, ListBoxRow* row) @extern ("gtk_list_box_drag_highlight_row");
fn void ListBox.drag_unhighlight_row (ListBox* self) @extern ("gtk_list_box_drag_unhighlight_row");
fn CInt ListBox.get_activate_on_single_click (ListBox* self) @extern ("gtk_list_box_get_activate_on_single_click");
fn Adjustment* ListBox.get_adjustment (ListBox* self) @extern ("gtk_list_box_get_adjustment");
fn ListBoxRow* ListBox.get_row_at_index (ListBox* self, int index_) @extern ("gtk_list_box_get_row_at_index");
fn ListBoxRow* ListBox.get_row_at_y (ListBox* self, int y) @extern ("gtk_list_box_get_row_at_y");
fn ListBoxRow* ListBox.get_selected_row (ListBox* self) @extern ("gtk_list_box_get_selected_row");
fn List* ListBox.get_selected_rows (ListBox* self) @extern ("gtk_list_box_get_selected_rows");
fn SelectionMode ListBox.get_selection_mode (ListBox* self) @extern ("gtk_list_box_get_selection_mode");
fn void ListBox.insert (ListBox* self, Widget* child, int position) @extern ("gtk_list_box_insert");
fn void ListBox.invalidate_filter (ListBox* self) @extern ("gtk_list_box_invalidate_filter");
fn void ListBox.invalidate_headers (ListBox* self) @extern ("gtk_list_box_invalidate_headers");
fn void ListBox.invalidate_sort (ListBox* self) @extern ("gtk_list_box_invalidate_sort");
fn void ListBox.prepend (ListBox* self, Widget* child) @extern ("gtk_list_box_prepend");
fn void ListBox.select_all (ListBox* self) @extern ("gtk_list_box_select_all");
fn void ListBox.select_row (ListBox* self, ListBoxRow* row) @extern ("gtk_list_box_select_row");
fn void ListBox.selected_foreach (ListBox* self, ListBoxForeachFunc func, void* data) @extern ("gtk_list_box_selected_foreach");
fn void ListBox.set_activate_on_single_click (ListBox* self, CInt single) @extern ("gtk_list_box_set_activate_on_single_click");
fn void ListBox.set_adjustment (ListBox* self, Adjustment* adjustment) @extern ("gtk_list_box_set_adjustment");
fn void ListBox.set_filter_func (ListBox* self, ListBoxFilterFunc filter_func, void* user_data, DestroyNotify destroy) @extern ("gtk_list_box_set_filter_func");
fn void ListBox.set_header_func (ListBox* self, ListBoxUpdateHeaderFunc update_header, void* user_data, DestroyNotify destroy) @extern ("gtk_list_box_set_header_func");
fn void ListBox.set_placeholder (ListBox* self, Widget* placeholder) @extern ("gtk_list_box_set_placeholder");
fn void ListBox.set_selection_mode (ListBox* self, SelectionMode mode) @extern ("gtk_list_box_set_selection_mode");
fn void ListBox.set_sort_func (ListBox* self, ListBoxSortFunc sort_func, void* user_data, DestroyNotify destroy) @extern ("gtk_list_box_set_sort_func");
fn void ListBox.unselect_all (ListBox* self) @extern ("gtk_list_box_unselect_all");
fn void ListBox.unselect_row (ListBox* self, ListBoxRow* row) @extern ("gtk_list_box_unselect_row");
	2 properties
	8 signals
	8 virtuals
def ListBoxAccessible = void;
def ListBoxAccessiblePrivate = void;

def ListBoxCreateWidgetFunc = fn Widget* (Object* item, void* user_data) @export;
def ListBoxFilterFunc = fn CInt (ListBoxRow* row, void* user_data) @export;
def ListBoxForeachFunc = fn void (ListBox* box, ListBoxRow* row, void* user_data) @export;
struct ListBoxRow (ImplementorIface, Actionable, Buildable) {
	inline Bin parent_instance;
}

fn Widget* ListBoxRow.new () @operator (construct) @extern ("gtk_list_box_row_new");
fn void ListBoxRow.changed (ListBoxRow* self) @extern ("gtk_list_box_row_changed");
fn CInt ListBoxRow.get_activatable (ListBoxRow* self) @extern ("gtk_list_box_row_get_activatable");
fn Widget* ListBoxRow.get_header (ListBoxRow* self) @extern ("gtk_list_box_row_get_header");
fn int ListBoxRow.get_index (ListBoxRow* self) @extern ("gtk_list_box_row_get_index");
fn CInt ListBoxRow.get_selectable (ListBoxRow* self) @extern ("gtk_list_box_row_get_selectable");
fn CInt ListBoxRow.is_selected (ListBoxRow* self) @extern ("gtk_list_box_row_is_selected");
fn void ListBoxRow.set_activatable (ListBoxRow* self, CInt activatable) @extern ("gtk_list_box_row_set_activatable");
fn void ListBoxRow.set_header (ListBoxRow* self, Widget* header) @extern ("gtk_list_box_row_set_header");
fn void ListBoxRow.set_selectable (ListBoxRow* self, CInt selectable) @extern ("gtk_list_box_row_set_selectable");
	2 properties
	1 signals
	1 virtuals
def ListBoxRowAccessible = void;
def ListBoxSortFunc = fn int (ListBoxRow* row1, ListBoxRow* row2, void* user_data) @export;
def ListBoxUpdateHeaderFunc = fn void (ListBoxRow* row, ListBoxRow* before, void* user_data) @export;
struct ListStore (Buildable, TreeDragDest, TreeDragSource, TreeModel, TreeSortable) {
	inline Object parent;
	ListStorePrivate* priv;
}

fn ListStore* ListStore.new (int n_columns, char** types) @operator (construct) @extern ("gtk_list_store_newv");
fn void ListStore.append (ListStore* self, TreeIter iter) @extern ("gtk_list_store_append");
fn void ListStore.clear (ListStore* self) @extern ("gtk_list_store_clear");
fn void ListStore.insert (ListStore* self, TreeIter iter, int position) @extern ("gtk_list_store_insert");
fn void ListStore.insert_after (ListStore* self, TreeIter iter, TreeIter* sibling) @extern ("gtk_list_store_insert_after");
fn void ListStore.insert_before (ListStore* self, TreeIter iter, TreeIter* sibling) @extern ("gtk_list_store_insert_before");
fn void ListStore.insert_with_valuesv (ListStore* self, TreeIter iter, int position, char** columns, char** values, int n_values) @extern ("gtk_list_store_insert_with_valuesv");
fn CInt ListStore.iter_is_valid (ListStore* self, TreeIter* iter) @extern ("gtk_list_store_iter_is_valid");
fn void ListStore.move_after (ListStore* self, TreeIter* iter, TreeIter* position) @extern ("gtk_list_store_move_after");
fn void ListStore.move_before (ListStore* self, TreeIter* iter, TreeIter* position) @extern ("gtk_list_store_move_before");
fn void ListStore.prepend (ListStore* self, TreeIter iter) @extern ("gtk_list_store_prepend");
fn CInt ListStore.remove (ListStore* self, TreeIter* iter) @extern ("gtk_list_store_remove");
fn void ListStore.reorder (ListStore* self, char** new_order) @extern ("gtk_list_store_reorder");
fn void ListStore.set_column_types (ListStore* self, int n_columns, char** types) @extern ("gtk_list_store_set_column_types");
fn void ListStore.set_value (ListStore* self, TreeIter* iter, int column, Value* value) @extern ("gtk_list_store_set_value");
fn void ListStore.set (ListStore* self, TreeIter* iter, char** columns, char** values, int n_values) @extern ("gtk_list_store_set_valuesv");
fn void ListStore.swap (ListStore* self, TreeIter* a, TreeIter* b) @extern ("gtk_list_store_swap");
def ListStorePrivate = void;

struct LockButton (ImplementorIface, Actionable, Activatable, Buildable) {
	inline Button parent;
	LockButtonPrivate* priv;
}

fn Widget* LockButton.new (Permission* permission) @operator (construct) @extern ("gtk_lock_button_new");
fn Permission* LockButton.get_permission (LockButton* self) @extern ("gtk_lock_button_get_permission");
fn void LockButton.set_permission (LockButton* self, Permission* permission) @extern ("gtk_lock_button_set_permission");
	6 properties
def LockButtonAccessible = void;
def LockButtonAccessiblePrivate = void;

def LockButtonPrivate = void;

const int MAJOR_VERSION = 3;
const int MAX_COMPOSE_LEN = 7;
const int MICRO_VERSION = 48;
const int MINOR_VERSION = 24;
struct Menu (ImplementorIface, Buildable) {
	inline MenuShell menu_shell;
	MenuPrivate* priv;
}

fn Widget* Menu.new () @operator (construct) @extern ("gtk_menu_new");
fn Widget* Menu.new_from_model (MenuModel* model) @operator (construct) @extern ("gtk_menu_new_from_model");
fn List* Menu.get_for_attach_widget (Menu* self, Widget* widget) @extern ("gtk_menu_get_for_attach_widget");
fn void Menu.attach (Menu* self, Widget* child, uint left_attach, uint right_attach, uint top_attach, uint bottom_attach) @extern ("gtk_menu_attach");
fn void Menu.attach_to_widget (Menu* self, Widget* attach_widget, MenuDetachFunc detacher) @extern ("gtk_menu_attach_to_widget");
fn void Menu.detach (Menu* self) @extern ("gtk_menu_detach");
fn AccelGroup* Menu.get_accel_group (Menu* self) @extern ("gtk_menu_get_accel_group");
fn ZString Menu.get_accel_path (Menu* self) @extern ("gtk_menu_get_accel_path");
fn Widget* Menu.get_active (Menu* self) @extern ("gtk_menu_get_active");
fn Widget* Menu.get_attach_widget (Menu* self) @extern ("gtk_menu_get_attach_widget");
fn int Menu.get_monitor (Menu* self) @extern ("gtk_menu_get_monitor");
fn CInt Menu.get_reserve_toggle_size (Menu* self) @extern ("gtk_menu_get_reserve_toggle_size");
fn CInt Menu.get_tearoff_state (Menu* self) @extern ("gtk_menu_get_tearoff_state");
fn ZString Menu.get_title (Menu* self) @extern ("gtk_menu_get_title");
fn void Menu.place_on_monitor (Menu* self, gdk::Monitor* monitor) @extern ("gtk_menu_place_on_monitor");
fn void Menu.popdown (Menu* self) @extern ("gtk_menu_popdown");
fn void Menu.popup (Menu* self, Widget* parent_menu_shell, Widget* parent_menu_item, MenuPositionFunc func, void* data, uint button, uint activate_time) @extern ("gtk_menu_popup");
fn void Menu.popup_at_pointer (Menu* self, gdk::Event* trigger_event) @extern ("gtk_menu_popup_at_pointer");
fn void Menu.popup_at_rect (Menu* self, gdk::Window* rect_window, gdk::Rectangle* rect, gdk::Gravity rect_anchor, gdk::Gravity menu_anchor, gdk::Event* trigger_event) @extern ("gtk_menu_popup_at_rect");
fn void Menu.popup_at_widget (Menu* self, Widget* widget, gdk::Gravity widget_anchor, gdk::Gravity menu_anchor, gdk::Event* trigger_event) @extern ("gtk_menu_popup_at_widget");
fn void Menu.popup_for_device (Menu* self, gdk::Device* device, Widget* parent_menu_shell, Widget* parent_menu_item, MenuPositionFunc func, void* data, DestroyNotify destroy, uint button, uint activate_time) @extern ("gtk_menu_popup_for_device");
fn void Menu.reorder_child (Menu* self, Widget* child, int position) @extern ("gtk_menu_reorder_child");
fn void Menu.reposition (Menu* self) @extern ("gtk_menu_reposition");
fn void Menu.set_accel_group (Menu* self, AccelGroup* accel_group) @extern ("gtk_menu_set_accel_group");
fn void Menu.set_accel_path (Menu* self, ZString accel_path) @extern ("gtk_menu_set_accel_path");
fn void Menu.set_active (Menu* self, uint index) @extern ("gtk_menu_set_active");
fn void Menu.set_monitor (Menu* self, int monitor_num) @extern ("gtk_menu_set_monitor");
fn void Menu.set_reserve_toggle_size (Menu* self, CInt reserve_toggle_size) @extern ("gtk_menu_set_reserve_toggle_size");
fn void Menu.set_screen (Menu* self, gdk::Screen* screen) @extern ("gtk_menu_set_screen");
fn void Menu.set_tearoff_state (Menu* self, CInt torn_off) @extern ("gtk_menu_set_tearoff_state");
fn void Menu.set_title (Menu* self, ZString title) @extern ("gtk_menu_set_title");
	12 properties
	2 signals
def MenuAccessible = void;
def MenuAccessiblePrivate = void;

struct MenuBar (ImplementorIface, Buildable) {
	inline MenuShell menu_shell;
	MenuBarPrivate* priv;
}

fn Widget* MenuBar.new () @operator (construct) @extern ("gtk_menu_bar_new");
fn Widget* MenuBar.new_from_model (MenuModel* model) @operator (construct) @extern ("gtk_menu_bar_new_from_model");
fn PackDirection MenuBar.get_child_pack_direction (MenuBar* self) @extern ("gtk_menu_bar_get_child_pack_direction");
fn PackDirection MenuBar.get_pack_direction (MenuBar* self) @extern ("gtk_menu_bar_get_pack_direction");
fn void MenuBar.set_child_pack_direction (MenuBar* self, PackDirection child_pack_dir) @extern ("gtk_menu_bar_set_child_pack_direction");
fn void MenuBar.set_pack_direction (MenuBar* self, PackDirection pack_dir) @extern ("gtk_menu_bar_set_pack_direction");
	2 properties
def MenuBarPrivate = void;

struct MenuButton (ImplementorIface, Actionable, Activatable, Buildable) {
	inline ToggleButton parent;
	MenuButtonPrivate* priv;
}

fn Widget* MenuButton.new () @operator (construct) @extern ("gtk_menu_button_new");
fn Widget* MenuButton.get_align_widget (MenuButton* self) @extern ("gtk_menu_button_get_align_widget");
fn ArrowType MenuButton.get_direction (MenuButton* self) @extern ("gtk_menu_button_get_direction");
fn MenuModel* MenuButton.get_menu_model (MenuButton* self) @extern ("gtk_menu_button_get_menu_model");
fn Popover* MenuButton.get_popover (MenuButton* self) @extern ("gtk_menu_button_get_popover");
fn Menu* MenuButton.get_popup (MenuButton* self) @extern ("gtk_menu_button_get_popup");
fn CInt MenuButton.get_use_popover (MenuButton* self) @extern ("gtk_menu_button_get_use_popover");
fn void MenuButton.set_align_widget (MenuButton* self, Widget* align_widget) @extern ("gtk_menu_button_set_align_widget");
fn void MenuButton.set_direction (MenuButton* self, ArrowType direction) @extern ("gtk_menu_button_set_direction");
fn void MenuButton.set_menu_model (MenuButton* self, MenuModel* menu_model) @extern ("gtk_menu_button_set_menu_model");
fn void MenuButton.set_popover (MenuButton* self, Widget* popover) @extern ("gtk_menu_button_set_popover");
fn void MenuButton.set_popup (MenuButton* self, Widget* menu) @extern ("gtk_menu_button_set_popup");
fn void MenuButton.set_use_popover (MenuButton* self, CInt use_popover) @extern ("gtk_menu_button_set_use_popover");
	6 properties
def MenuButtonAccessible = void;
def MenuButtonAccessiblePrivate = void;

def MenuButtonPrivate = void;

def MenuDetachFunc = fn void (Widget* attach_widget, Menu* menu) @export;

enum MenuDirectionType {
	PARENT,
	CHILD,
	NEXT,
	PREV
}

struct MenuItem (ImplementorIface, Actionable, Activatable, Buildable) {
	inline Bin bin;
	MenuItemPrivate* priv;
}

fn Widget* MenuItem.new () @operator (construct) @extern ("gtk_menu_item_new");
fn Widget* MenuItem.new_with_label (ZString label) @operator (construct) @extern ("gtk_menu_item_new_with_label");
fn Widget* MenuItem.new_with_mnemonic (ZString label) @operator (construct) @extern ("gtk_menu_item_new_with_mnemonic");
fn void MenuItem.activate (MenuItem* self) @extern ("gtk_menu_item_activate");
fn void MenuItem.deselect (MenuItem* self) @extern ("gtk_menu_item_deselect");
fn ZString MenuItem.get_accel_path (MenuItem* self) @extern ("gtk_menu_item_get_accel_path");
fn ZString MenuItem.get_label (MenuItem* self) @extern ("gtk_menu_item_get_label");
fn CInt MenuItem.get_reserve_indicator (MenuItem* self) @extern ("gtk_menu_item_get_reserve_indicator");
fn CInt MenuItem.get_right_justified (MenuItem* self) @extern ("gtk_menu_item_get_right_justified");
fn Widget* MenuItem.get_submenu (MenuItem* self) @extern ("gtk_menu_item_get_submenu");
fn CInt MenuItem.get_use_underline (MenuItem* self) @extern ("gtk_menu_item_get_use_underline");
fn void MenuItem.select (MenuItem* self) @extern ("gtk_menu_item_select");
fn void MenuItem.set_accel_path (MenuItem* self, ZString accel_path) @extern ("gtk_menu_item_set_accel_path");
fn void MenuItem.set_label (MenuItem* self, ZString label) @extern ("gtk_menu_item_set_label");
fn void MenuItem.set_reserve_indicator (MenuItem* self, CInt reserve) @extern ("gtk_menu_item_set_reserve_indicator");
fn void MenuItem.set_right_justified (MenuItem* self, CInt right_justified) @extern ("gtk_menu_item_set_right_justified");
fn void MenuItem.set_submenu (MenuItem* self, Menu* submenu) @extern ("gtk_menu_item_set_submenu");
fn void MenuItem.set_use_underline (MenuItem* self, CInt setting) @extern ("gtk_menu_item_set_use_underline");
fn void MenuItem.toggle_size_allocate (MenuItem* self, int allocation) @extern ("gtk_menu_item_toggle_size_allocate");
fn void MenuItem.toggle_size_request (MenuItem* self, int requisition) @extern ("gtk_menu_item_toggle_size_request");
	5 properties
	6 signals
	8 virtuals
def MenuItemAccessible = void;
def MenuItemAccessiblePrivate = void;

def MenuItemPrivate = void;

def MenuPositionFunc = fn void (Menu* menu, int x, int y, CInt push_in, void* user_data) @export;
def MenuPrivate = void;

struct MenuShell (ImplementorIface, Buildable) {
	inline Container container;
	MenuShellPrivate* priv;
}

fn void MenuShell.activate_item (MenuShell* self, Widget* menu_item, CInt force_deactivate) @extern ("gtk_menu_shell_activate_item");
fn void MenuShell.append (MenuShell* self, MenuItem* child) @extern ("gtk_menu_shell_append");
fn void MenuShell.bind_model (MenuShell* self, MenuModel* model, ZString action_namespace, CInt with_separators) @extern ("gtk_menu_shell_bind_model");
fn void MenuShell.cancel (MenuShell* self) @extern ("gtk_menu_shell_cancel");
fn void MenuShell.deactivate (MenuShell* self) @extern ("gtk_menu_shell_deactivate");
fn void MenuShell.deselect (MenuShell* self) @extern ("gtk_menu_shell_deselect");
fn Widget* MenuShell.get_parent_shell (MenuShell* self) @extern ("gtk_menu_shell_get_parent_shell");
fn Widget* MenuShell.get_selected_item (MenuShell* self) @extern ("gtk_menu_shell_get_selected_item");
fn CInt MenuShell.get_take_focus (MenuShell* self) @extern ("gtk_menu_shell_get_take_focus");
fn void MenuShell.insert (MenuShell* self, Widget* child, int position) @extern ("gtk_menu_shell_insert");
fn void MenuShell.prepend (MenuShell* self, Widget* child) @extern ("gtk_menu_shell_prepend");
fn void MenuShell.select_first (MenuShell* self, CInt search_sensitive) @extern ("gtk_menu_shell_select_first");
fn void MenuShell.select_item (MenuShell* self, Widget* menu_item) @extern ("gtk_menu_shell_select_item");
fn void MenuShell.set_take_focus (MenuShell* self, CInt take_focus) @extern ("gtk_menu_shell_set_take_focus");
	1 properties
	8 signals
	9 virtuals
def MenuShellAccessible = void;
def MenuShellAccessiblePrivate = void;

def MenuShellPrivate = void;

struct MenuToolButton (ImplementorIface, Actionable, Activatable, Buildable) {
	inline ToolButton parent;
	MenuToolButtonPrivate* priv;
}

fn ToolItem* MenuToolButton.new (Widget* icon_widget, ZString label) @operator (construct) @extern ("gtk_menu_tool_button_new");
fn ToolItem* MenuToolButton.new_from_stock (ZString stock_id) @operator (construct) @extern ("gtk_menu_tool_button_new_from_stock");
fn Widget* MenuToolButton.get_menu (MenuToolButton* self) @extern ("gtk_menu_tool_button_get_menu");
fn void MenuToolButton.set_arrow_tooltip_markup (MenuToolButton* self, ZString markup) @extern ("gtk_menu_tool_button_set_arrow_tooltip_markup");
fn void MenuToolButton.set_arrow_tooltip_text (MenuToolButton* self, ZString text) @extern ("gtk_menu_tool_button_set_arrow_tooltip_text");
fn void MenuToolButton.set_menu (MenuToolButton* self, Widget* menu) @extern ("gtk_menu_tool_button_set_menu");
	1 properties
	1 signals
	1 virtuals
def MenuToolButtonPrivate = void;

struct MessageDialog (ImplementorIface, Buildable) {
	inline Dialog parent_instance;
	MessageDialogPrivate* priv;
}

fn Widget* MessageDialog.get_image (MessageDialog* self) @extern ("gtk_message_dialog_get_image");
fn Widget* MessageDialog.get_message_area (MessageDialog* self) @extern ("gtk_message_dialog_get_message_area");
fn void MessageDialog.set_image (MessageDialog* self, Widget* image) @extern ("gtk_message_dialog_set_image");
fn void MessageDialog.set_markup (MessageDialog* self, ZString str) @extern ("gtk_message_dialog_set_markup");
	8 properties
def MessageDialogPrivate = void;


enum MessageType {
	INFO,
	WARNING,
	QUESTION,
	ERROR,
	OTHER
}

struct Misc (ImplementorIface, Buildable) {
	inline Widget widget;
	MiscPrivate* priv;
}

fn void Misc.get_alignment (Misc* self, float xalign, float yalign) @extern ("gtk_misc_get_alignment");
fn void Misc.get_padding (Misc* self, int xpad, int ypad) @extern ("gtk_misc_get_padding");
fn void Misc.set_alignment (Misc* self, float xalign, float yalign) @extern ("gtk_misc_set_alignment");
fn void Misc.set_padding (Misc* self, int xpad, int ypad) @extern ("gtk_misc_set_padding");
	4 properties
def MiscPrivate = void;

struct ModelButton (ImplementorIface, Actionable, Activatable, Buildable) {
	void* unused;
}

fn Widget* ModelButton.new () @operator (construct) @extern ("gtk_model_button_new");
	9 properties
def ModuleDisplayInitFunc = fn void (gdk::Display* display) @export;
def ModuleInitFunc = fn void (int* argc, char** argv) @export;
struct MountOperation {
	inline MountOperation parent_instance;
	MountOperationPrivate* priv;
}

fn MountOperation* MountOperation.new (Window* parent) @operator (construct) @extern ("gtk_mount_operation_new");
fn Window* MountOperation.get_parent (MountOperation* self) @extern ("gtk_mount_operation_get_parent");
fn gdk::Screen* MountOperation.get_screen (MountOperation* self) @extern ("gtk_mount_operation_get_screen");
fn CInt MountOperation.is_showing (MountOperation* self) @extern ("gtk_mount_operation_is_showing");
fn void MountOperation.set_parent (MountOperation* self, Window* parent) @extern ("gtk_mount_operation_set_parent");
fn void MountOperation.set_screen (MountOperation* self, gdk::Screen* screen) @extern ("gtk_mount_operation_set_screen");
	3 properties
def MountOperationPrivate = void;


enum MovementStep {
	LOGICAL_POSITIONS,
	VISUAL_POSITIONS,
	WORDS,
	DISPLAY_LINES,
	DISPLAY_LINE_ENDS,
	PARAGRAPHS,
	PARAGRAPH_ENDS,
	PAGES,
	BUFFER_ENDS,
	HORIZONTAL_PAGES
}

struct NativeDialog {
	inline Object parent_instance;
}

fn void NativeDialog.destroy (NativeDialog* self) @extern ("gtk_native_dialog_destroy");
fn CInt NativeDialog.get_modal (NativeDialog* self) @extern ("gtk_native_dialog_get_modal");
fn ZString NativeDialog.get_title (NativeDialog* self) @extern ("gtk_native_dialog_get_title");
fn Window* NativeDialog.get_transient_for (NativeDialog* self) @extern ("gtk_native_dialog_get_transient_for");
fn CInt NativeDialog.get_visible (NativeDialog* self) @extern ("gtk_native_dialog_get_visible");
fn void NativeDialog.hide (NativeDialog* self) @extern ("gtk_native_dialog_hide");
fn int NativeDialog.run (NativeDialog* self) @extern ("gtk_native_dialog_run");
fn void NativeDialog.set_modal (NativeDialog* self, CInt modal) @extern ("gtk_native_dialog_set_modal");
fn void NativeDialog.set_title (NativeDialog* self, ZString title) @extern ("gtk_native_dialog_set_title");
fn void NativeDialog.set_transient_for (NativeDialog* self, Window* parent) @extern ("gtk_native_dialog_set_transient_for");
fn void NativeDialog.show (NativeDialog* self) @extern ("gtk_native_dialog_show");
	4 properties
	1 signals
	3 virtuals
struct Notebook (ImplementorIface, Buildable) {
	inline Container container;
	NotebookPrivate* priv;
}

fn Widget* Notebook.new () @operator (construct) @extern ("gtk_notebook_new");
fn int Notebook.append_page (Notebook* self, Widget* child, Widget* tab_label) @extern ("gtk_notebook_append_page");
fn int Notebook.append_page_menu (Notebook* self, Widget* child, Widget* tab_label, Widget* menu_label) @extern ("gtk_notebook_append_page_menu");
fn void Notebook.detach_tab (Notebook* self, Widget* child) @extern ("gtk_notebook_detach_tab");
fn Widget* Notebook.get_action_widget (Notebook* self, PackType pack_type) @extern ("gtk_notebook_get_action_widget");
fn int Notebook.get_current_page (Notebook* self) @extern ("gtk_notebook_get_current_page");
fn ZString Notebook.get_group_name (Notebook* self) @extern ("gtk_notebook_get_group_name");
fn Widget* Notebook.get_menu_label (Notebook* self, Widget* child) @extern ("gtk_notebook_get_menu_label");
fn ZString Notebook.get_menu_label_text (Notebook* self, Widget* child) @extern ("gtk_notebook_get_menu_label_text");
fn int Notebook.get_n_pages (Notebook* self) @extern ("gtk_notebook_get_n_pages");
fn Widget* Notebook.get_nth_page (Notebook* self, int page_num) @extern ("gtk_notebook_get_nth_page");
fn CInt Notebook.get_scrollable (Notebook* self) @extern ("gtk_notebook_get_scrollable");
fn CInt Notebook.get_show_border (Notebook* self) @extern ("gtk_notebook_get_show_border");
fn CInt Notebook.get_show_tabs (Notebook* self) @extern ("gtk_notebook_get_show_tabs");
fn CInt Notebook.get_tab_detachable (Notebook* self, Widget* child) @extern ("gtk_notebook_get_tab_detachable");
fn ushort Notebook.get_tab_hborder (Notebook* self) @extern ("gtk_notebook_get_tab_hborder");
fn Widget* Notebook.get_tab_label (Notebook* self, Widget* child) @extern ("gtk_notebook_get_tab_label");
fn ZString Notebook.get_tab_label_text (Notebook* self, Widget* child) @extern ("gtk_notebook_get_tab_label_text");
fn PositionType Notebook.get_tab_pos (Notebook* self) @extern ("gtk_notebook_get_tab_pos");
fn CInt Notebook.get_tab_reorderable (Notebook* self, Widget* child) @extern ("gtk_notebook_get_tab_reorderable");
fn ushort Notebook.get_tab_vborder (Notebook* self) @extern ("gtk_notebook_get_tab_vborder");
fn int Notebook.insert_page (Notebook* self, Widget* child, Widget* tab_label, int position) @extern ("gtk_notebook_insert_page");
fn int Notebook.insert_page_menu (Notebook* self, Widget* child, Widget* tab_label, Widget* menu_label, int position) @extern ("gtk_notebook_insert_page_menu");
fn void Notebook.next_page (Notebook* self) @extern ("gtk_notebook_next_page");
fn int Notebook.page_num (Notebook* self, Widget* child) @extern ("gtk_notebook_page_num");
fn void Notebook.popup_disable (Notebook* self) @extern ("gtk_notebook_popup_disable");
fn void Notebook.popup_enable (Notebook* self) @extern ("gtk_notebook_popup_enable");
fn int Notebook.prepend_page (Notebook* self, Widget* child, Widget* tab_label) @extern ("gtk_notebook_prepend_page");
fn int Notebook.prepend_page_menu (Notebook* self, Widget* child, Widget* tab_label, Widget* menu_label) @extern ("gtk_notebook_prepend_page_menu");
fn void Notebook.prev_page (Notebook* self) @extern ("gtk_notebook_prev_page");
fn void Notebook.remove_page (Notebook* self, int page_num) @extern ("gtk_notebook_remove_page");
fn void Notebook.reorder_child (Notebook* self, Widget* child, int position) @extern ("gtk_notebook_reorder_child");
fn void Notebook.set_action_widget (Notebook* self, Widget* widget, PackType pack_type) @extern ("gtk_notebook_set_action_widget");
fn void Notebook.set_current_page (Notebook* self, int page_num) @extern ("gtk_notebook_set_current_page");
fn void Notebook.set_group_name (Notebook* self, ZString group_name) @extern ("gtk_notebook_set_group_name");
fn void Notebook.set_menu_label (Notebook* self, Widget* child, Widget* menu_label) @extern ("gtk_notebook_set_menu_label");
fn void Notebook.set_menu_label_text (Notebook* self, Widget* child, ZString menu_text) @extern ("gtk_notebook_set_menu_label_text");
fn void Notebook.set_scrollable (Notebook* self, CInt scrollable) @extern ("gtk_notebook_set_scrollable");
fn void Notebook.set_show_border (Notebook* self, CInt show_border) @extern ("gtk_notebook_set_show_border");
fn void Notebook.set_show_tabs (Notebook* self, CInt show_tabs) @extern ("gtk_notebook_set_show_tabs");
fn void Notebook.set_tab_detachable (Notebook* self, Widget* child, CInt detachable) @extern ("gtk_notebook_set_tab_detachable");
fn void Notebook.set_tab_label (Notebook* self, Widget* child, Widget* tab_label) @extern ("gtk_notebook_set_tab_label");
fn void Notebook.set_tab_label_text (Notebook* self, Widget* child, ZString tab_text) @extern ("gtk_notebook_set_tab_label_text");
fn void Notebook.set_tab_pos (Notebook* self, PositionType pos) @extern ("gtk_notebook_set_tab_pos");
fn void Notebook.set_tab_reorderable (Notebook* self, Widget* child, CInt reorderable) @extern ("gtk_notebook_set_tab_reorderable");
	7 properties
	10 signals
	10 virtuals
def NotebookAccessible = void;
def NotebookAccessiblePrivate = void;

struct NotebookPageAccessible (Component) {
	inline atk::Object parent;
	NotebookPageAccessiblePrivate* priv;
}

fn atk::Object* NotebookPageAccessible.new (NotebookAccessible* notebook, Widget* child) @operator (construct) @extern ("gtk_notebook_page_accessible_new");
fn void NotebookPageAccessible.invalidate (NotebookPageAccessible* self) @extern ("gtk_notebook_page_accessible_invalidate");
def NotebookPageAccessiblePrivate = void;

def NotebookPrivate = void;


enum NotebookTab {
	FIRST,
	LAST
}


enum NumberUpLayout {
	LRTB,
	LRBT,
	RLTB,
	RLBT,
	TBLR,
	TBRL,
	BTLR,
	BTRL
}

struct NumerableIcon (Icon) {
	inline EmblemedIcon parent;
	NumerableIconPrivate* priv;
}

fn [not parsed]* NumerableIcon.new (NumerableIcon* self, [not parsed]* base_icon) @extern ("gtk_numerable_icon_new");
fn [not parsed]* NumerableIcon.new_with_style_context (NumerableIcon* self, [not parsed]* base_icon, StyleContext* context) @extern ("gtk_numerable_icon_new_with_style_context");
fn [not parsed]* NumerableIcon.get_background_gicon (NumerableIcon* self) @extern ("gtk_numerable_icon_get_background_gicon");
fn ZString NumerableIcon.get_background_icon_name (NumerableIcon* self) @extern ("gtk_numerable_icon_get_background_icon_name");
fn int NumerableIcon.get_count (NumerableIcon* self) @extern ("gtk_numerable_icon_get_count");
fn ZString NumerableIcon.get_label (NumerableIcon* self) @extern ("gtk_numerable_icon_get_label");
fn StyleContext* NumerableIcon.get_style_context (NumerableIcon* self) @extern ("gtk_numerable_icon_get_style_context");
fn void NumerableIcon.set_background_gicon (NumerableIcon* self, [not parsed]* icon) @extern ("gtk_numerable_icon_set_background_gicon");
fn void NumerableIcon.set_background_icon_name (NumerableIcon* self, ZString icon_name) @extern ("gtk_numerable_icon_set_background_icon_name");
fn void NumerableIcon.set_count (NumerableIcon* self, int count) @extern ("gtk_numerable_icon_set_count");
fn void NumerableIcon.set_label (NumerableIcon* self, ZString label) @extern ("gtk_numerable_icon_set_label");
fn void NumerableIcon.set_style_context (NumerableIcon* self, StyleContext* style) @extern ("gtk_numerable_icon_set_style_context");
	5 properties
def NumerableIconPrivate = void;

struct OffscreenWindow (ImplementorIface, Buildable) {
	inline Window parent_object;
}

fn Widget* OffscreenWindow.new () @operator (construct) @extern ("gtk_offscreen_window_new");
fn Pixbuf* OffscreenWindow.get_pixbuf (OffscreenWindow* self) @extern ("gtk_offscreen_window_get_pixbuf");
fn Surface* OffscreenWindow.get_surface (OffscreenWindow* self) @extern ("gtk_offscreen_window_get_surface");
Orientable (Interface)

enum Orientation {
	HORIZONTAL,
	VERTICAL
}

struct Overlay (ImplementorIface, Buildable) {
	inline Bin parent;
	OverlayPrivate* priv;
}

fn Widget* Overlay.new () @operator (construct) @extern ("gtk_overlay_new");
fn void Overlay.add_overlay (Overlay* self, Widget* widget) @extern ("gtk_overlay_add_overlay");
fn CInt Overlay.get_overlay_pass_through (Overlay* self, Widget* widget) @extern ("gtk_overlay_get_overlay_pass_through");
fn void Overlay.reorder_overlay (Overlay* self, Widget* child, int index_) @extern ("gtk_overlay_reorder_overlay");
fn void Overlay.set_overlay_pass_through (Overlay* self, Widget* widget, CInt pass_through) @extern ("gtk_overlay_set_overlay_pass_through");
	1 signals
	1 virtuals
def OverlayPrivate = void;

const ZString PAPER_NAME_A3 = "iso_a3";
const ZString PAPER_NAME_A4 = "iso_a4";
const ZString PAPER_NAME_A5 = "iso_a5";
const ZString PAPER_NAME_B5 = "iso_b5";
const ZString PAPER_NAME_EXECUTIVE = "na_executive";
const ZString PAPER_NAME_LEGAL = "na_legal";
const ZString PAPER_NAME_LETTER = "na_letter";
const int PATH_PRIO_MASK = 15;
const ZString PRINT_SETTINGS_COLLATE = "collate";
const ZString PRINT_SETTINGS_DEFAULT_SOURCE = "default-source";
const ZString PRINT_SETTINGS_DITHER = "dither";
const ZString PRINT_SETTINGS_DUPLEX = "duplex";
const ZString PRINT_SETTINGS_FINISHINGS = "finishings";
const ZString PRINT_SETTINGS_MEDIA_TYPE = "media-type";
const ZString PRINT_SETTINGS_NUMBER_UP = "number-up";
const ZString PRINT_SETTINGS_NUMBER_UP_LAYOUT = "number-up-layout";
const ZString PRINT_SETTINGS_N_COPIES = "n-copies";
const ZString PRINT_SETTINGS_ORIENTATION = "orientation";
const ZString PRINT_SETTINGS_OUTPUT_BASENAME = "output-basename";
const ZString PRINT_SETTINGS_OUTPUT_BIN = "output-bin";
const ZString PRINT_SETTINGS_OUTPUT_DIR = "output-dir";
const ZString PRINT_SETTINGS_OUTPUT_FILE_FORMAT = "output-file-format";
const ZString PRINT_SETTINGS_OUTPUT_URI = "output-uri";
const ZString PRINT_SETTINGS_PAGE_RANGES = "page-ranges";
const ZString PRINT_SETTINGS_PAGE_SET = "page-set";
const ZString PRINT_SETTINGS_PAPER_FORMAT = "paper-format";
const ZString PRINT_SETTINGS_PAPER_HEIGHT = "paper-height";
const ZString PRINT_SETTINGS_PAPER_WIDTH = "paper-width";
const ZString PRINT_SETTINGS_PRINTER = "printer";
const ZString PRINT_SETTINGS_PRINTER_LPI = "printer-lpi";
const ZString PRINT_SETTINGS_PRINT_PAGES = "print-pages";
const ZString PRINT_SETTINGS_QUALITY = "quality";
const ZString PRINT_SETTINGS_RESOLUTION = "resolution";
const ZString PRINT_SETTINGS_RESOLUTION_X = "resolution-x";
const ZString PRINT_SETTINGS_RESOLUTION_Y = "resolution-y";
const ZString PRINT_SETTINGS_REVERSE = "reverse";
const ZString PRINT_SETTINGS_SCALE = "scale";
const ZString PRINT_SETTINGS_USE_COLOR = "use-color";
const ZString PRINT_SETTINGS_WIN32_DRIVER_EXTRA = "win32-driver-extra";
const ZString PRINT_SETTINGS_WIN32_DRIVER_VERSION = "win32-driver-version";
const int PRIORITY_RESIZE = 110;

enum PackDirection {
	LTR,
	RTL,
	TTB,
	BTT
}


enum PackType {
	START,
	END
}

struct PadActionEntry {
	PadActionType type;
	int index;
	int mode;
	ZString label;
	ZString action_name;
}


enum PadActionType {
	BUTTON,
	RING,
	STRIP
}

struct PadController {
	void* unused;
}

fn PadController* PadController.new (Window* window, [not parsed]* group, gdk::Device* pad) @operator (construct) @extern ("gtk_pad_controller_new");
fn void PadController.set_action (PadController* self, PadActionType type, int index, int mode, ZString label, ZString action_name) @extern ("gtk_pad_controller_set_action");
fn void PadController.set_action_entries (PadController* self, char** entries, int n_entries) @extern ("gtk_pad_controller_set_action_entries");
	2 properties

enum PageOrientation {
	PORTRAIT,
	LANDSCAPE,
	REVERSE_PORTRAIT,
	REVERSE_LANDSCAPE
}

struct PageRange {
	int start;
	int end;
}


enum PageSet {
	ALL,
	EVEN,
	ODD
}

struct PageSetup {
	void* unused;
}

fn PageSetup* PageSetup.new () @operator (construct) @extern ("gtk_page_setup_new");
fn PageSetup* PageSetup.new_from_file (ZString* file_name) @operator (construct) @extern ("gtk_page_setup_new_from_file");
fn PageSetup* PageSetup.new_from_gvariant (Variant* variant) @operator (construct) @extern ("gtk_page_setup_new_from_gvariant");
fn PageSetup* PageSetup.new_from_key_file (KeyFile* key_file, ZString group_name) @operator (construct) @extern ("gtk_page_setup_new_from_key_file");
fn PageSetup* PageSetup.copy (PageSetup* self) @extern ("gtk_page_setup_copy");
fn double PageSetup.get_bottom_margin (PageSetup* self, Unit unit) @extern ("gtk_page_setup_get_bottom_margin");
fn double PageSetup.get_left_margin (PageSetup* self, Unit unit) @extern ("gtk_page_setup_get_left_margin");
fn PageOrientation PageSetup.get_orientation (PageSetup* self) @extern ("gtk_page_setup_get_orientation");
fn double PageSetup.get_page_height (PageSetup* self, Unit unit) @extern ("gtk_page_setup_get_page_height");
fn double PageSetup.get_page_width (PageSetup* self, Unit unit) @extern ("gtk_page_setup_get_page_width");
fn double PageSetup.get_paper_height (PageSetup* self, Unit unit) @extern ("gtk_page_setup_get_paper_height");
fn PaperSize* PageSetup.get_paper_size (PageSetup* self) @extern ("gtk_page_setup_get_paper_size");
fn double PageSetup.get_paper_width (PageSetup* self, Unit unit) @extern ("gtk_page_setup_get_paper_width");
fn double PageSetup.get_right_margin (PageSetup* self, Unit unit) @extern ("gtk_page_setup_get_right_margin");
fn double PageSetup.get_top_margin (PageSetup* self, Unit unit) @extern ("gtk_page_setup_get_top_margin");
fn CInt PageSetup.load_file (PageSetup* self, ZString* file_name) @extern ("gtk_page_setup_load_file");
fn CInt PageSetup.load_key_file (PageSetup* self, KeyFile* key_file, ZString group_name) @extern ("gtk_page_setup_load_key_file");
fn void PageSetup.set_bottom_margin (PageSetup* self, double margin, Unit unit) @extern ("gtk_page_setup_set_bottom_margin");
fn void PageSetup.set_left_margin (PageSetup* self, double margin, Unit unit) @extern ("gtk_page_setup_set_left_margin");
fn void PageSetup.set_orientation (PageSetup* self, PageOrientation orientation) @extern ("gtk_page_setup_set_orientation");
fn void PageSetup.set_paper_size (PageSetup* self, PaperSize* size) @extern ("gtk_page_setup_set_paper_size");
fn void PageSetup.set_paper_size_and_default_margins (PageSetup* self, PaperSize* size) @extern ("gtk_page_setup_set_paper_size_and_default_margins");
fn void PageSetup.set_right_margin (PageSetup* self, double margin, Unit unit) @extern ("gtk_page_setup_set_right_margin");
fn void PageSetup.set_top_margin (PageSetup* self, double margin, Unit unit) @extern ("gtk_page_setup_set_top_margin");
fn CInt PageSetup.to_file (PageSetup* self, ZString* file_name) @extern ("gtk_page_setup_to_file");
fn Variant* PageSetup.to_gvariant (PageSetup* self) @extern ("gtk_page_setup_to_gvariant");
fn void PageSetup.to_key_file (PageSetup* self, KeyFile* key_file, ZString group_name) @extern ("gtk_page_setup_to_key_file");
def PageSetupDoneFunc = fn void (PageSetup* page_setup, void* data) @export;

enum PanDirection {
	LEFT,
	RIGHT,
	UP,
	DOWN
}

struct Paned (ImplementorIface, Buildable, Orientable) {
	inline Container container;
	PanedPrivate* priv;
}

fn Widget* Paned.new (Orientation orientation) @operator (construct) @extern ("gtk_paned_new");
fn void Paned.add1 (Paned* self, Widget* child) @extern ("gtk_paned_add1");
fn void Paned.add2 (Paned* self, Widget* child) @extern ("gtk_paned_add2");
fn Widget* Paned.get_child1 (Paned* self) @extern ("gtk_paned_get_child1");
fn Widget* Paned.get_child2 (Paned* self) @extern ("gtk_paned_get_child2");
fn gdk::Window* Paned.get_handle_window (Paned* self) @extern ("gtk_paned_get_handle_window");
fn int Paned.get_position (Paned* self) @extern ("gtk_paned_get_position");
fn CInt Paned.get_wide_handle (Paned* self) @extern ("gtk_paned_get_wide_handle");
fn void Paned.pack1 (Paned* self, Widget* child, CInt resize, CInt shrink) @extern ("gtk_paned_pack1");
fn void Paned.pack2 (Paned* self, Widget* child, CInt resize, CInt shrink) @extern ("gtk_paned_pack2");
fn void Paned.set_position (Paned* self, int position) @extern ("gtk_paned_set_position");
fn void Paned.set_wide_handle (Paned* self, CInt wide) @extern ("gtk_paned_set_wide_handle");
	5 properties
	6 signals
	6 virtuals
def PanedAccessible = void;
def PanedAccessiblePrivate = void;

def PanedPrivate = void;

struct PaperSize {
	void* unused;
}

fn PaperSize* PaperSize.new (ZString name) @operator (construct) @extern ("gtk_paper_size_new");
fn PaperSize* PaperSize.new_custom (ZString name, ZString display_name, double width, double height, Unit unit) @operator (construct) @extern ("gtk_paper_size_new_custom");
fn PaperSize* PaperSize.new_from_gvariant (Variant* variant) @operator (construct) @extern ("gtk_paper_size_new_from_gvariant");
fn PaperSize* PaperSize.new_from_ipp (ZString ipp_name, double width, double height) @operator (construct) @extern ("gtk_paper_size_new_from_ipp");
fn PaperSize* PaperSize.new_from_key_file (KeyFile* key_file, ZString group_name) @operator (construct) @extern ("gtk_paper_size_new_from_key_file");
fn PaperSize* PaperSize.new_from_ppd (ZString ppd_name, ZString ppd_display_name, double width, double height) @operator (construct) @extern ("gtk_paper_size_new_from_ppd");
fn PaperSize* PaperSize.copy (PaperSize* self) @extern ("gtk_paper_size_copy");
fn void PaperSize.free (PaperSize* self) @extern ("gtk_paper_size_free");
fn double PaperSize.get_default_bottom_margin (PaperSize* self, Unit unit) @extern ("gtk_paper_size_get_default_bottom_margin");
fn double PaperSize.get_default_left_margin (PaperSize* self, Unit unit) @extern ("gtk_paper_size_get_default_left_margin");
fn double PaperSize.get_default_right_margin (PaperSize* self, Unit unit) @extern ("gtk_paper_size_get_default_right_margin");
fn double PaperSize.get_default_top_margin (PaperSize* self, Unit unit) @extern ("gtk_paper_size_get_default_top_margin");
fn ZString PaperSize.get_display_name (PaperSize* self) @extern ("gtk_paper_size_get_display_name");
fn double PaperSize.get_height (PaperSize* self, Unit unit) @extern ("gtk_paper_size_get_height");
fn ZString PaperSize.get_name (PaperSize* self) @extern ("gtk_paper_size_get_name");
fn ZString PaperSize.get_ppd_name (PaperSize* self) @extern ("gtk_paper_size_get_ppd_name");
fn double PaperSize.get_width (PaperSize* self, Unit unit) @extern ("gtk_paper_size_get_width");
fn CInt PaperSize.is_custom (PaperSize* self) @extern ("gtk_paper_size_is_custom");
fn CInt PaperSize.is_equal (PaperSize* self, PaperSize* size2) @extern ("gtk_paper_size_is_equal");
fn CInt PaperSize.is_ipp (PaperSize* self) @extern ("gtk_paper_size_is_ipp");
fn void PaperSize.set_size (PaperSize* self, double width, double height, Unit unit) @extern ("gtk_paper_size_set_size");
fn Variant* PaperSize.to_gvariant (PaperSize* self) @extern ("gtk_paper_size_to_gvariant");
fn void PaperSize.to_key_file (PaperSize* self, KeyFile* key_file, ZString group_name) @extern ("gtk_paper_size_to_key_file");
fn ZString PaperSize.get_default (PaperSize* self) @extern ("gtk_paper_size_get_default");
fn List* PaperSize.get_paper_sizes (PaperSize* self, CInt include_custom) @extern ("gtk_paper_size_get_paper_sizes");

enum PathPriorityType: CInt (inline CInt value) {
	LOWEST = 0,
	GTK = 4,
	APPLICATION = 8,
	THEME = 10,
	RC = 12,
	HIGHEST = 15
}


enum PathType {
	WIDGET,
	WIDGET_CLASS,
	CLASS
}

enum PlacesOpenFlags: CInt (inline CInt bit) {
	NORMAL = 1,
	NEW_TAB = 2,
	NEW_WINDOW = 4
}

struct PlacesSidebar (ImplementorIface, Buildable) {
	void* unused;
}

fn Widget* PlacesSidebar.new () @operator (construct) @extern ("gtk_places_sidebar_new");
fn void PlacesSidebar.add_shortcut (PlacesSidebar* self, [not parsed]* location) @extern ("gtk_places_sidebar_add_shortcut");
fn CInt PlacesSidebar.get_local_only (PlacesSidebar* self) @extern ("gtk_places_sidebar_get_local_only");
fn [not parsed]* PlacesSidebar.get_location (PlacesSidebar* self) @extern ("gtk_places_sidebar_get_location");
fn [not parsed]* PlacesSidebar.get_nth_bookmark (PlacesSidebar* self, int n) @extern ("gtk_places_sidebar_get_nth_bookmark");
fn PlacesOpenFlags PlacesSidebar.get_open_flags (PlacesSidebar* self) @extern ("gtk_places_sidebar_get_open_flags");
fn CInt PlacesSidebar.get_show_connect_to_server (PlacesSidebar* self) @extern ("gtk_places_sidebar_get_show_connect_to_server");
fn CInt PlacesSidebar.get_show_desktop (PlacesSidebar* self) @extern ("gtk_places_sidebar_get_show_desktop");
fn CInt PlacesSidebar.get_show_enter_location (PlacesSidebar* self) @extern ("gtk_places_sidebar_get_show_enter_location");
fn CInt PlacesSidebar.get_show_other_locations (PlacesSidebar* self) @extern ("gtk_places_sidebar_get_show_other_locations");
fn CInt PlacesSidebar.get_show_recent (PlacesSidebar* self) @extern ("gtk_places_sidebar_get_show_recent");
fn CInt PlacesSidebar.get_show_starred_location (PlacesSidebar* self) @extern ("gtk_places_sidebar_get_show_starred_location");
fn CInt PlacesSidebar.get_show_trash (PlacesSidebar* self) @extern ("gtk_places_sidebar_get_show_trash");
fn SList* PlacesSidebar.list_shortcuts (PlacesSidebar* self) @extern ("gtk_places_sidebar_list_shortcuts");
fn void PlacesSidebar.remove_shortcut (PlacesSidebar* self, [not parsed]* location) @extern ("gtk_places_sidebar_remove_shortcut");
fn void PlacesSidebar.set_drop_targets_visible (PlacesSidebar* self, CInt visible, gdk::DragContext* context) @extern ("gtk_places_sidebar_set_drop_targets_visible");
fn void PlacesSidebar.set_local_only (PlacesSidebar* self, CInt local_only) @extern ("gtk_places_sidebar_set_local_only");
fn void PlacesSidebar.set_location (PlacesSidebar* self, [not parsed]* location) @extern ("gtk_places_sidebar_set_location");
fn void PlacesSidebar.set_open_flags (PlacesSidebar* self, PlacesOpenFlags flags) @extern ("gtk_places_sidebar_set_open_flags");
fn void PlacesSidebar.set_show_connect_to_server (PlacesSidebar* self, CInt show_connect_to_server) @extern ("gtk_places_sidebar_set_show_connect_to_server");
fn void PlacesSidebar.set_show_desktop (PlacesSidebar* self, CInt show_desktop) @extern ("gtk_places_sidebar_set_show_desktop");
fn void PlacesSidebar.set_show_enter_location (PlacesSidebar* self, CInt show_enter_location) @extern ("gtk_places_sidebar_set_show_enter_location");
fn void PlacesSidebar.set_show_other_locations (PlacesSidebar* self, CInt show_other_locations) @extern ("gtk_places_sidebar_set_show_other_locations");
fn void PlacesSidebar.set_show_recent (PlacesSidebar* self, CInt show_recent) @extern ("gtk_places_sidebar_set_show_recent");
fn void PlacesSidebar.set_show_starred_location (PlacesSidebar* self, CInt show_starred_location) @extern ("gtk_places_sidebar_set_show_starred_location");
fn void PlacesSidebar.set_show_trash (PlacesSidebar* self, CInt show_trash) @extern ("gtk_places_sidebar_set_show_trash");
	11 properties
	13 signals
struct Plug (ImplementorIface, Buildable) {
	inline Window window;
	PlugPrivate* priv;
}

fn Widget* Plug.new (ulong socket_id) @operator (construct) @extern ("gtk_plug_new");
fn Widget* Plug.new_for_display (gdk::Display* display, ulong socket_id) @operator (construct) @extern ("gtk_plug_new_for_display");
fn void Plug.construct (Plug* self, ulong socket_id) @extern ("gtk_plug_construct");
fn void Plug.construct_for_display (Plug* self, gdk::Display* display, ulong socket_id) @extern ("gtk_plug_construct_for_display");
fn CInt Plug.get_embedded (Plug* self) @extern ("gtk_plug_get_embedded");
fn ulong Plug.get_id (Plug* self) @extern ("gtk_plug_get_id");
fn gdk::Window* Plug.get_socket_window (Plug* self) @extern ("gtk_plug_get_socket_window");
	2 properties
	1 signals
	1 virtuals
struct PlugAccessible (Component, Window) {
	inline WindowAccessible parent;
	PlugAccessiblePrivate* priv;
}

fn ZString PlugAccessible.get_id (PlugAccessible* self) @extern ("gtk_plug_accessible_get_id");
def PlugAccessiblePrivate = void;

def PlugPrivate = void;


enum PolicyType {
	ALWAYS,
	AUTOMATIC,
	NEVER,
	EXTERNAL
}

struct Popover (ImplementorIface, Buildable) {
	inline Bin parent_instance;
	PopoverPrivate* priv;
}

fn Widget* Popover.new (Widget* relative_to) @operator (construct) @extern ("gtk_popover_new");
fn Widget* Popover.new_from_model (Widget* relative_to, MenuModel* model) @operator (construct) @extern ("gtk_popover_new_from_model");
fn void Popover.bind_model (Popover* self, MenuModel* model, ZString action_namespace) @extern ("gtk_popover_bind_model");
fn PopoverConstraint Popover.get_constrain_to (Popover* self) @extern ("gtk_popover_get_constrain_to");
fn Widget* Popover.get_default_widget (Popover* self) @extern ("gtk_popover_get_default_widget");
fn CInt Popover.get_modal (Popover* self) @extern ("gtk_popover_get_modal");
fn CInt Popover.get_pointing_to (Popover* self, gdk::Rectangle rect) @extern ("gtk_popover_get_pointing_to");
fn PositionType Popover.get_position (Popover* self) @extern ("gtk_popover_get_position");
fn Widget* Popover.get_relative_to (Popover* self) @extern ("gtk_popover_get_relative_to");
fn CInt Popover.get_transitions_enabled (Popover* self) @extern ("gtk_popover_get_transitions_enabled");
fn void Popover.popdown (Popover* self) @extern ("gtk_popover_popdown");
fn void Popover.popup (Popover* self) @extern ("gtk_popover_popup");
fn void Popover.set_constrain_to (Popover* self, PopoverConstraint constraint) @extern ("gtk_popover_set_constrain_to");
fn void Popover.set_default_widget (Popover* self, Widget* widget) @extern ("gtk_popover_set_default_widget");
fn void Popover.set_modal (Popover* self, CInt modal) @extern ("gtk_popover_set_modal");
fn void Popover.set_pointing_to (Popover* self, gdk::Rectangle* rect) @extern ("gtk_popover_set_pointing_to");
fn void Popover.set_position (Popover* self, PositionType position) @extern ("gtk_popover_set_position");
fn void Popover.set_relative_to (Popover* self, Widget* relative_to) @extern ("gtk_popover_set_relative_to");
fn void Popover.set_transitions_enabled (Popover* self, CInt transitions_enabled) @extern ("gtk_popover_set_transitions_enabled");
	6 properties
	1 signals
	1 virtuals
def PopoverAccessible = void;

enum PopoverConstraint {
	NONE,
	WINDOW
}

struct PopoverMenu (ImplementorIface, Buildable) {
	void* unused;
}

fn Widget* PopoverMenu.new () @operator (construct) @extern ("gtk_popover_menu_new");
fn void PopoverMenu.open_submenu (PopoverMenu* self, ZString name) @extern ("gtk_popover_menu_open_submenu");
	1 properties
def PopoverPrivate = void;


enum PositionType {
	LEFT,
	RIGHT,
	TOP,
	BOTTOM
}

struct PrintContext {
	void* unused;
}

fn Context* PrintContext.create_pango_context (PrintContext* self) @extern ("gtk_print_context_create_pango_context");
fn Layout* PrintContext.create_pango_layout (PrintContext* self) @extern ("gtk_print_context_create_pango_layout");
fn Context* PrintContext.get_cairo_context (PrintContext* self) @extern ("gtk_print_context_get_cairo_context");
fn double PrintContext.get_dpi_x (PrintContext* self) @extern ("gtk_print_context_get_dpi_x");
fn double PrintContext.get_dpi_y (PrintContext* self) @extern ("gtk_print_context_get_dpi_y");
fn CInt PrintContext.get_hard_margins (PrintContext* self, double top, double bottom, double left, double right) @extern ("gtk_print_context_get_hard_margins");
fn double PrintContext.get_height (PrintContext* self) @extern ("gtk_print_context_get_height");
fn PageSetup* PrintContext.get_page_setup (PrintContext* self) @extern ("gtk_print_context_get_page_setup");
fn FontMap* PrintContext.get_pango_fontmap (PrintContext* self) @extern ("gtk_print_context_get_pango_fontmap");
fn double PrintContext.get_width (PrintContext* self) @extern ("gtk_print_context_get_width");
fn void PrintContext.set_cairo_context (PrintContext* self, Context* cr, double dpi_x, double dpi_y) @extern ("gtk_print_context_set_cairo_context");

enum PrintDuplex {
	SIMPLEX,
	HORIZONTAL,
	VERTICAL
}


enum PrintError {
	GENERAL,
	INTERNAL_ERROR,
	NOMEM,
	INVALID_FILE
}

struct PrintOperation (PrintOperationPreview) {
	inline Object parent_instance;
	PrintOperationPrivate* priv;
}

fn PrintOperation* PrintOperation.new () @operator (construct) @extern ("gtk_print_operation_new");
fn void PrintOperation.cancel (PrintOperation* self) @extern ("gtk_print_operation_cancel");
fn void PrintOperation.draw_page_finish (PrintOperation* self) @extern ("gtk_print_operation_draw_page_finish");
fn PageSetup* PrintOperation.get_default_page_setup (PrintOperation* self) @extern ("gtk_print_operation_get_default_page_setup");
fn CInt PrintOperation.get_embed_page_setup (PrintOperation* self) @extern ("gtk_print_operation_get_embed_page_setup");
fn void PrintOperation.get_error (PrintOperation* self) @extern ("gtk_print_operation_get_error");
fn CInt PrintOperation.get_has_selection (PrintOperation* self) @extern ("gtk_print_operation_get_has_selection");
fn int PrintOperation.get_n_pages_to_print (PrintOperation* self) @extern ("gtk_print_operation_get_n_pages_to_print");
fn PrintSettings* PrintOperation.get_print_settings (PrintOperation* self) @extern ("gtk_print_operation_get_print_settings");
fn PrintStatus PrintOperation.get_status (PrintOperation* self) @extern ("gtk_print_operation_get_status");
fn ZString PrintOperation.get_status_string (PrintOperation* self) @extern ("gtk_print_operation_get_status_string");
fn CInt PrintOperation.get_support_selection (PrintOperation* self) @extern ("gtk_print_operation_get_support_selection");
fn CInt PrintOperation.is_finished (PrintOperation* self) @extern ("gtk_print_operation_is_finished");
fn PrintOperationResult PrintOperation.run (PrintOperation* self, PrintOperationAction action, Window* parent) @extern ("gtk_print_operation_run");
fn void PrintOperation.set_allow_async (PrintOperation* self, CInt allow_async) @extern ("gtk_print_operation_set_allow_async");
fn void PrintOperation.set_current_page (PrintOperation* self, int current_page) @extern ("gtk_print_operation_set_current_page");
fn void PrintOperation.set_custom_tab_label (PrintOperation* self, ZString label) @extern ("gtk_print_operation_set_custom_tab_label");
fn void PrintOperation.set_default_page_setup (PrintOperation* self, PageSetup* default_page_setup) @extern ("gtk_print_operation_set_default_page_setup");
fn void PrintOperation.set_defer_drawing (PrintOperation* self) @extern ("gtk_print_operation_set_defer_drawing");
fn void PrintOperation.set_embed_page_setup (PrintOperation* self, CInt embed) @extern ("gtk_print_operation_set_embed_page_setup");
fn void PrintOperation.set_export_filename (PrintOperation* self, ZString* filename) @extern ("gtk_print_operation_set_export_filename");
fn void PrintOperation.set_has_selection (PrintOperation* self, CInt has_selection) @extern ("gtk_print_operation_set_has_selection");
fn void PrintOperation.set_job_name (PrintOperation* self, ZString job_name) @extern ("gtk_print_operation_set_job_name");
fn void PrintOperation.set_n_pages (PrintOperation* self, int n_pages) @extern ("gtk_print_operation_set_n_pages");
fn void PrintOperation.set_print_settings (PrintOperation* self, PrintSettings* print_settings) @extern ("gtk_print_operation_set_print_settings");
fn void PrintOperation.set_show_progress (PrintOperation* self, CInt show_progress) @extern ("gtk_print_operation_set_show_progress");
fn void PrintOperation.set_support_selection (PrintOperation* self, CInt support_selection) @extern ("gtk_print_operation_set_support_selection");
fn void PrintOperation.set_track_print_status (PrintOperation* self, CInt track_status) @extern ("gtk_print_operation_set_track_print_status");
fn void PrintOperation.set_unit (PrintOperation* self, Unit unit) @extern ("gtk_print_operation_set_unit");
fn void PrintOperation.set_use_full_page (PrintOperation* self, CInt full_page) @extern ("gtk_print_operation_set_use_full_page");
	18 properties
	11 signals
	10 virtuals

enum PrintOperationAction {
	PRINT_DIALOG,
	PRINT,
	PREVIEW,
	EXPORT
}

PrintOperationPreview (Interface)
def PrintOperationPrivate = void;


enum PrintOperationResult {
	ERROR,
	APPLY,
	CANCEL,
	IN_PROGRESS
}


enum PrintPages {
	ALL,
	CURRENT,
	RANGES,
	SELECTION
}


enum PrintQuality {
	LOW,
	NORMAL,
	HIGH,
	DRAFT
}

struct PrintSettings {
	void* unused;
}

fn PrintSettings* PrintSettings.new () @operator (construct) @extern ("gtk_print_settings_new");
fn PrintSettings* PrintSettings.new_from_file (ZString* file_name) @operator (construct) @extern ("gtk_print_settings_new_from_file");
fn PrintSettings* PrintSettings.new_from_gvariant (Variant* variant) @operator (construct) @extern ("gtk_print_settings_new_from_gvariant");
fn PrintSettings* PrintSettings.new_from_key_file (KeyFile* key_file, ZString group_name) @operator (construct) @extern ("gtk_print_settings_new_from_key_file");
fn PrintSettings* PrintSettings.copy (PrintSettings* self) @extern ("gtk_print_settings_copy");
fn void PrintSettings.for_each (PrintSettings* self, PrintSettingsFunc func, void* user_data) @extern ("gtk_print_settings_foreach");
fn ZString PrintSettings.get (PrintSettings* self, ZString key) @extern ("gtk_print_settings_get");
fn CInt PrintSettings.get_bool (PrintSettings* self, ZString key) @extern ("gtk_print_settings_get_bool");
fn CInt PrintSettings.get_collate (PrintSettings* self) @extern ("gtk_print_settings_get_collate");
fn ZString PrintSettings.get_default_source (PrintSettings* self) @extern ("gtk_print_settings_get_default_source");
fn ZString PrintSettings.get_dither (PrintSettings* self) @extern ("gtk_print_settings_get_dither");
fn double PrintSettings.get_double (PrintSettings* self, ZString key) @extern ("gtk_print_settings_get_double");
fn double PrintSettings.get_double_with_default (PrintSettings* self, ZString key, double def) @extern ("gtk_print_settings_get_double_with_default");
fn PrintDuplex PrintSettings.get_duplex (PrintSettings* self) @extern ("gtk_print_settings_get_duplex");
fn ZString PrintSettings.get_finishings (PrintSettings* self) @extern ("gtk_print_settings_get_finishings");
fn int PrintSettings.get_int (PrintSettings* self, ZString key) @extern ("gtk_print_settings_get_int");
fn int PrintSettings.get_int_with_default (PrintSettings* self, ZString key, int def) @extern ("gtk_print_settings_get_int_with_default");
fn double PrintSettings.get_length (PrintSettings* self, ZString key, Unit unit) @extern ("gtk_print_settings_get_length");
fn ZString PrintSettings.get_media_type (PrintSettings* self) @extern ("gtk_print_settings_get_media_type");
fn int PrintSettings.get_n_copies (PrintSettings* self) @extern ("gtk_print_settings_get_n_copies");
fn int PrintSettings.get_number_up (PrintSettings* self) @extern ("gtk_print_settings_get_number_up");
fn NumberUpLayout PrintSettings.get_number_up_layout (PrintSettings* self) @extern ("gtk_print_settings_get_number_up_layout");
fn PageOrientation PrintSettings.get_orientation (PrintSettings* self) @extern ("gtk_print_settings_get_orientation");
fn ZString PrintSettings.get_output_bin (PrintSettings* self) @extern ("gtk_print_settings_get_output_bin");
fn char** PrintSettings.get_page_ranges (PrintSettings* self, int num_ranges) @extern ("gtk_print_settings_get_page_ranges");
fn PageSet PrintSettings.get_page_set (PrintSettings* self) @extern ("gtk_print_settings_get_page_set");
fn double PrintSettings.get_paper_height (PrintSettings* self, Unit unit) @extern ("gtk_print_settings_get_paper_height");
fn PaperSize* PrintSettings.get_paper_size (PrintSettings* self) @extern ("gtk_print_settings_get_paper_size");
fn double PrintSettings.get_paper_width (PrintSettings* self, Unit unit) @extern ("gtk_print_settings_get_paper_width");
fn PrintPages PrintSettings.get_print_pages (PrintSettings* self) @extern ("gtk_print_settings_get_print_pages");
fn ZString PrintSettings.get_printer (PrintSettings* self) @extern ("gtk_print_settings_get_printer");
fn double PrintSettings.get_printer_lpi (PrintSettings* self) @extern ("gtk_print_settings_get_printer_lpi");
fn PrintQuality PrintSettings.get_quality (PrintSettings* self) @extern ("gtk_print_settings_get_quality");
fn int PrintSettings.get_resolution (PrintSettings* self) @extern ("gtk_print_settings_get_resolution");
fn int PrintSettings.get_resolution_x (PrintSettings* self) @extern ("gtk_print_settings_get_resolution_x");
fn int PrintSettings.get_resolution_y (PrintSettings* self) @extern ("gtk_print_settings_get_resolution_y");
fn CInt PrintSettings.get_reverse (PrintSettings* self) @extern ("gtk_print_settings_get_reverse");
fn double PrintSettings.get_scale (PrintSettings* self) @extern ("gtk_print_settings_get_scale");
fn CInt PrintSettings.get_use_color (PrintSettings* self) @extern ("gtk_print_settings_get_use_color");
fn CInt PrintSettings.has_key (PrintSettings* self, ZString key) @extern ("gtk_print_settings_has_key");
fn CInt PrintSettings.load_file (PrintSettings* self, ZString* file_name) @extern ("gtk_print_settings_load_file");
fn CInt PrintSettings.load_key_file (PrintSettings* self, KeyFile* key_file, ZString group_name) @extern ("gtk_print_settings_load_key_file");
fn void PrintSettings.set (PrintSettings* self, ZString key, ZString value) @extern ("gtk_print_settings_set");
fn void PrintSettings.set_bool (PrintSettings* self, ZString key, CInt value) @extern ("gtk_print_settings_set_bool");
fn void PrintSettings.set_collate (PrintSettings* self, CInt collate) @extern ("gtk_print_settings_set_collate");
fn void PrintSettings.set_default_source (PrintSettings* self, ZString default_source) @extern ("gtk_print_settings_set_default_source");
fn void PrintSettings.set_dither (PrintSettings* self, ZString dither) @extern ("gtk_print_settings_set_dither");
fn void PrintSettings.set_double (PrintSettings* self, ZString key, double value) @extern ("gtk_print_settings_set_double");
fn void PrintSettings.set_duplex (PrintSettings* self, PrintDuplex duplex) @extern ("gtk_print_settings_set_duplex");
fn void PrintSettings.set_finishings (PrintSettings* self, ZString finishings) @extern ("gtk_print_settings_set_finishings");
fn void PrintSettings.set_int (PrintSettings* self, ZString key, int value) @extern ("gtk_print_settings_set_int");
fn void PrintSettings.set_length (PrintSettings* self, ZString key, double value, Unit unit) @extern ("gtk_print_settings_set_length");
fn void PrintSettings.set_media_type (PrintSettings* self, ZString media_type) @extern ("gtk_print_settings_set_media_type");
fn void PrintSettings.set_n_copies (PrintSettings* self, int num_copies) @extern ("gtk_print_settings_set_n_copies");
fn void PrintSettings.set_number_up (PrintSettings* self, int number_up) @extern ("gtk_print_settings_set_number_up");
fn void PrintSettings.set_number_up_layout (PrintSettings* self, NumberUpLayout number_up_layout) @extern ("gtk_print_settings_set_number_up_layout");
fn void PrintSettings.set_orientation (PrintSettings* self, PageOrientation orientation) @extern ("gtk_print_settings_set_orientation");
fn void PrintSettings.set_output_bin (PrintSettings* self, ZString output_bin) @extern ("gtk_print_settings_set_output_bin");
fn void PrintSettings.set_page_ranges (PrintSettings* self, char** page_ranges, int num_ranges) @extern ("gtk_print_settings_set_page_ranges");
fn void PrintSettings.set_page_set (PrintSettings* self, PageSet page_set) @extern ("gtk_print_settings_set_page_set");
fn void PrintSettings.set_paper_height (PrintSettings* self, double height, Unit unit) @extern ("gtk_print_settings_set_paper_height");
fn void PrintSettings.set_paper_size (PrintSettings* self, PaperSize* paper_size) @extern ("gtk_print_settings_set_paper_size");
fn void PrintSettings.set_paper_width (PrintSettings* self, double width, Unit unit) @extern ("gtk_print_settings_set_paper_width");
fn void PrintSettings.set_print_pages (PrintSettings* self, PrintPages pages) @extern ("gtk_print_settings_set_print_pages");
fn void PrintSettings.set_printer (PrintSettings* self, ZString printer) @extern ("gtk_print_settings_set_printer");
fn void PrintSettings.set_printer_lpi (PrintSettings* self, double lpi) @extern ("gtk_print_settings_set_printer_lpi");
fn void PrintSettings.set_quality (PrintSettings* self, PrintQuality quality) @extern ("gtk_print_settings_set_quality");
fn void PrintSettings.set_resolution (PrintSettings* self, int resolution) @extern ("gtk_print_settings_set_resolution");
fn void PrintSettings.set_resolution_xy (PrintSettings* self, int resolution_x, int resolution_y) @extern ("gtk_print_settings_set_resolution_xy");
fn void PrintSettings.set_reverse (PrintSettings* self, CInt reverse) @extern ("gtk_print_settings_set_reverse");
fn void PrintSettings.set_scale (PrintSettings* self, double scale) @extern ("gtk_print_settings_set_scale");
fn void PrintSettings.set_use_color (PrintSettings* self, CInt use_color) @extern ("gtk_print_settings_set_use_color");
fn CInt PrintSettings.to_file (PrintSettings* self, ZString* file_name) @extern ("gtk_print_settings_to_file");
fn Variant* PrintSettings.to_gvariant (PrintSettings* self) @extern ("gtk_print_settings_to_gvariant");
fn void PrintSettings.to_key_file (PrintSettings* self, KeyFile* key_file, ZString group_name) @extern ("gtk_print_settings_to_key_file");
fn void PrintSettings.unset (PrintSettings* self, ZString key) @extern ("gtk_print_settings_unset");
def PrintSettingsFunc = fn void (ZString key, ZString value, void* user_data) @export;

enum PrintStatus {
	INITIAL,
	PREPARING,
	GENERATING_DATA,
	SENDING_DATA,
	PENDING,
	PENDING_ISSUE,
	PRINTING,
	FINISHED,
	FINISHED_ABORTED
}

struct ProgressBar (ImplementorIface, Buildable, Orientable) {
	inline Widget parent;
	ProgressBarPrivate* priv;
}

fn Widget* ProgressBar.new () @operator (construct) @extern ("gtk_progress_bar_new");
fn EllipsizeMode ProgressBar.get_ellipsize (ProgressBar* self) @extern ("gtk_progress_bar_get_ellipsize");
fn double ProgressBar.get_fraction (ProgressBar* self) @extern ("gtk_progress_bar_get_fraction");
fn CInt ProgressBar.get_inverted (ProgressBar* self) @extern ("gtk_progress_bar_get_inverted");
fn double ProgressBar.get_pulse_step (ProgressBar* self) @extern ("gtk_progress_bar_get_pulse_step");
fn CInt ProgressBar.get_show_text (ProgressBar* self) @extern ("gtk_progress_bar_get_show_text");
fn ZString ProgressBar.get_text (ProgressBar* self) @extern ("gtk_progress_bar_get_text");
fn void ProgressBar.pulse (ProgressBar* self) @extern ("gtk_progress_bar_pulse");
fn void ProgressBar.set_ellipsize (ProgressBar* self, EllipsizeMode mode) @extern ("gtk_progress_bar_set_ellipsize");
fn void ProgressBar.set_fraction (ProgressBar* self, double fraction) @extern ("gtk_progress_bar_set_fraction");
fn void ProgressBar.set_inverted (ProgressBar* self, CInt inverted) @extern ("gtk_progress_bar_set_inverted");
fn void ProgressBar.set_pulse_step (ProgressBar* self, double fraction) @extern ("gtk_progress_bar_set_pulse_step");
fn void ProgressBar.set_show_text (ProgressBar* self, CInt show_text) @extern ("gtk_progress_bar_set_show_text");
fn void ProgressBar.set_text (ProgressBar* self, ZString text) @extern ("gtk_progress_bar_set_text");
	6 properties
def ProgressBarAccessible = void;
def ProgressBarAccessiblePrivate = void;

def ProgressBarPrivate = void;


enum PropagationPhase {
	NONE,
	CAPTURE,
	BUBBLE,
	TARGET
}

struct RadioAction (Buildable) {
	inline ToggleAction parent;
	RadioActionPrivate* private_data;
}

fn RadioAction* RadioAction.new (ZString name, ZString label, ZString tooltip, ZString stock_id, int value) @operator (construct) @extern ("gtk_radio_action_new");
fn int RadioAction.get_current_value (RadioAction* self) @extern ("gtk_radio_action_get_current_value");
fn SList* RadioAction.get_group (RadioAction* self) @extern ("gtk_radio_action_get_group");
fn void RadioAction.join_group (RadioAction* self, RadioAction* group_source) @extern ("gtk_radio_action_join_group");
fn void RadioAction.set_current_value (RadioAction* self, int current_value) @extern ("gtk_radio_action_set_current_value");
fn void RadioAction.set_group (RadioAction* self, SList* group) @extern ("gtk_radio_action_set_group");
	3 properties
	1 signals
	1 virtuals
struct RadioActionEntry {
	ZString name;
	ZString stock_id;
	ZString label;
	ZString accelerator;
	ZString tooltip;
	int value;
}

def RadioActionPrivate = void;

struct RadioButton (ImplementorIface, Actionable, Activatable, Buildable) {
	inline CheckButton check_button;
	RadioButtonPrivate* priv;
}

fn Widget* RadioButton.new (SList* group) @operator (construct) @extern ("gtk_radio_button_new");
fn Widget* RadioButton.new_from_widget (RadioButton* radio_group_member) @operator (construct) @extern ("gtk_radio_button_new_from_widget");
fn Widget* RadioButton.new_with_label (SList* group, ZString label) @operator (construct) @extern ("gtk_radio_button_new_with_label");
fn Widget* RadioButton.new_with_label_from_widget (RadioButton* radio_group_member, ZString label) @operator (construct) @extern ("gtk_radio_button_new_with_label_from_widget");
fn Widget* RadioButton.new_with_mnemonic (SList* group, ZString label) @operator (construct) @extern ("gtk_radio_button_new_with_mnemonic");
fn Widget* RadioButton.new_with_mnemonic_from_widget (RadioButton* radio_group_member, ZString label) @operator (construct) @extern ("gtk_radio_button_new_with_mnemonic_from_widget");
fn SList* RadioButton.get_group (RadioButton* self) @extern ("gtk_radio_button_get_group");
fn void RadioButton.join_group (RadioButton* self, RadioButton* group_source) @extern ("gtk_radio_button_join_group");
fn void RadioButton.set_group (RadioButton* self, SList* group) @extern ("gtk_radio_button_set_group");
	1 properties
	1 signals
	1 virtuals
def RadioButtonAccessible = void;
def RadioButtonAccessiblePrivate = void;

def RadioButtonPrivate = void;

struct RadioMenuItem (ImplementorIface, Actionable, Activatable, Buildable) {
	inline CheckMenuItem check_menu_item;
	RadioMenuItemPrivate* priv;
}

fn Widget* RadioMenuItem.new (SList* group) @operator (construct) @extern ("gtk_radio_menu_item_new");
fn Widget* RadioMenuItem.new_from_widget (RadioMenuItem* group) @operator (construct) @extern ("gtk_radio_menu_item_new_from_widget");
fn Widget* RadioMenuItem.new_with_label (SList* group, ZString label) @operator (construct) @extern ("gtk_radio_menu_item_new_with_label");
fn Widget* RadioMenuItem.new_with_label_from_widget (RadioMenuItem* group, ZString label) @operator (construct) @extern ("gtk_radio_menu_item_new_with_label_from_widget");
fn Widget* RadioMenuItem.new_with_mnemonic (SList* group, ZString label) @operator (construct) @extern ("gtk_radio_menu_item_new_with_mnemonic");
fn Widget* RadioMenuItem.new_with_mnemonic_from_widget (RadioMenuItem* group, ZString label) @operator (construct) @extern ("gtk_radio_menu_item_new_with_mnemonic_from_widget");
fn SList* RadioMenuItem.get_group (RadioMenuItem* self) @extern ("gtk_radio_menu_item_get_group");
fn void RadioMenuItem.join_group (RadioMenuItem* self, RadioMenuItem* group_source) @extern ("gtk_radio_menu_item_join_group");
fn void RadioMenuItem.set_group (RadioMenuItem* self, SList* group) @extern ("gtk_radio_menu_item_set_group");
	1 properties
	1 signals
	1 virtuals
def RadioMenuItemAccessible = void;
def RadioMenuItemAccessiblePrivate = void;

def RadioMenuItemPrivate = void;

struct RadioToolButton (ImplementorIface, Actionable, Activatable, Buildable) {
	inline ToggleToolButton parent;
}

fn ToolItem* RadioToolButton.new (SList* group) @operator (construct) @extern ("gtk_radio_tool_button_new");
fn ToolItem* RadioToolButton.new_from_stock (SList* group, ZString stock_id) @operator (construct) @extern ("gtk_radio_tool_button_new_from_stock");
fn ToolItem* RadioToolButton.new_from_widget (RadioToolButton* group) @operator (construct) @extern ("gtk_radio_tool_button_new_from_widget");
fn ToolItem* RadioToolButton.new_with_stock_from_widget (RadioToolButton* group, ZString stock_id) @operator (construct) @extern ("gtk_radio_tool_button_new_with_stock_from_widget");
fn SList* RadioToolButton.get_group (RadioToolButton* self) @extern ("gtk_radio_tool_button_get_group");
fn void RadioToolButton.set_group (RadioToolButton* self, SList* group) @extern ("gtk_radio_tool_button_set_group");
	1 properties
struct Range (ImplementorIface, Buildable, Orientable) {
	inline Widget widget;
	RangePrivate* priv;
}

fn Adjustment* Range.get_adjustment (Range* self) @extern ("gtk_range_get_adjustment");
fn double Range.get_fill_level (Range* self) @extern ("gtk_range_get_fill_level");
fn CInt Range.get_flippable (Range* self) @extern ("gtk_range_get_flippable");
fn CInt Range.get_inverted (Range* self) @extern ("gtk_range_get_inverted");
fn SensitivityType Range.get_lower_stepper_sensitivity (Range* self) @extern ("gtk_range_get_lower_stepper_sensitivity");
fn int Range.get_min_slider_size (Range* self) @extern ("gtk_range_get_min_slider_size");
fn void Range.get_range_rect (Range* self, gdk::Rectangle range_rect) @extern ("gtk_range_get_range_rect");
fn CInt Range.get_restrict_to_fill_level (Range* self) @extern ("gtk_range_get_restrict_to_fill_level");
fn int Range.get_round_digits (Range* self) @extern ("gtk_range_get_round_digits");
fn CInt Range.get_show_fill_level (Range* self) @extern ("gtk_range_get_show_fill_level");
fn void Range.get_slider_range (Range* self, int slider_start, int slider_end) @extern ("gtk_range_get_slider_range");
fn CInt Range.get_slider_size_fixed (Range* self) @extern ("gtk_range_get_slider_size_fixed");
fn SensitivityType Range.get_upper_stepper_sensitivity (Range* self) @extern ("gtk_range_get_upper_stepper_sensitivity");
fn double Range.get_value (Range* self) @extern ("gtk_range_get_value");
fn void Range.set_adjustment (Range* self, Adjustment* adjustment) @extern ("gtk_range_set_adjustment");
fn void Range.set_fill_level (Range* self, double fill_level) @extern ("gtk_range_set_fill_level");
fn void Range.set_flippable (Range* self, CInt flippable) @extern ("gtk_range_set_flippable");
fn void Range.set_increments (Range* self, double step, double page) @extern ("gtk_range_set_increments");
fn void Range.set_inverted (Range* self, CInt setting) @extern ("gtk_range_set_inverted");
fn void Range.set_lower_stepper_sensitivity (Range* self, SensitivityType sensitivity) @extern ("gtk_range_set_lower_stepper_sensitivity");
fn void Range.set_min_slider_size (Range* self, int min_size) @extern ("gtk_range_set_min_slider_size");
fn void Range.set_range (Range* self, double min, double max) @extern ("gtk_range_set_range");
fn void Range.set_restrict_to_fill_level (Range* self, CInt restrict_to_fill_level) @extern ("gtk_range_set_restrict_to_fill_level");
fn void Range.set_round_digits (Range* self, int round_digits) @extern ("gtk_range_set_round_digits");
fn void Range.set_show_fill_level (Range* self, CInt show_fill_level) @extern ("gtk_range_set_show_fill_level");
fn void Range.set_slider_size_fixed (Range* self, CInt size_fixed) @extern ("gtk_range_set_slider_size_fixed");
fn void Range.set_upper_stepper_sensitivity (Range* self, SensitivityType sensitivity) @extern ("gtk_range_set_upper_stepper_sensitivity");
fn void Range.set_value (Range* self, double value) @extern ("gtk_range_set_value");
	8 properties
	4 signals
	6 virtuals
def RangeAccessible = void;
def RangeAccessiblePrivate = void;

def RangePrivate = void;

def RcContext = void;

enum RcFlags: CInt (inline CInt bit) {
	FG = 1,
	BG = 2,
	TEXT = 4,
	BASE = 8
}

struct RcProperty {
	uint type_name;
	uint property_name;
	ZString origin;
	Value value;
}

fn CInt RcProperty.parse_border (RcProperty* self, ParamSpec* pspec, String* gstring, Value* property_value) @extern ("gtk_rc_property_parse_border");
fn CInt RcProperty.parse_color (RcProperty* self, ParamSpec* pspec, String* gstring, Value* property_value) @extern ("gtk_rc_property_parse_color");
fn CInt RcProperty.parse_enum (RcProperty* self, ParamSpec* pspec, String* gstring, Value* property_value) @extern ("gtk_rc_property_parse_enum");
fn CInt RcProperty.parse_flags (RcProperty* self, ParamSpec* pspec, String* gstring, Value* property_value) @extern ("gtk_rc_property_parse_flags");
fn CInt RcProperty.parse_requisition (RcProperty* self, ParamSpec* pspec, String* gstring, Value* property_value) @extern ("gtk_rc_property_parse_requisition");
def RcPropertyParser = fn CInt (ParamSpec* pspec, String* rc_string, Value* property_value) @export;
struct RcStyle {
	inline Object parent_instance;
	ZString name;
	char[5] bg_pixmap_name;
	FontDescription* font_desc;
	char[5] color_flags;
	char[5] fg;
	char[5] bg;
	char[5] text;
	char[5] base;
	int xthickness;
	int ythickness;
	Array<<MISSING>>** rc_properties;
	SList* rc_style_lists;
	SList* icon_factories;
	uint engine_specified;
}

fn RcStyle* RcStyle.new () @operator (construct) @extern ("gtk_rc_style_new");
fn RcStyle* RcStyle.copy (RcStyle* self) @extern ("gtk_rc_style_copy");
	2 virtuals

enum RcTokenType: CInt (inline CInt value) {
	INVALID = 270,
	INCLUDE = 271,
	NORMAL = 272,
	ACTIVE = 273,
	PRELIGHT = 274,
	SELECTED = 275,
	INSENSITIVE = 276,
	FG = 277,
	BG = 278,
	TEXT = 279,
	BASE = 280,
	XTHICKNESS = 281,
	YTHICKNESS = 282,
	FONT = 283,
	FONTSET = 284,
	FONT_NAME = 285,
	BG_PIXMAP = 286,
	PIXMAP_PATH = 287,
	STYLE = 288,
	BINDING = 289,
	BIND = 290,
	WIDGET = 291,
	WIDGET_CLASS = 292,
	CLASS = 293,
	LOWEST = 294,
	GTK = 295,
	APPLICATION = 296,
	THEME = 297,
	RC = 298,
	HIGHEST = 299,
	ENGINE = 300,
	MODULE_PATH = 301,
	IM_MODULE_PATH = 302,
	IM_MODULE_FILE = 303,
	STOCK = 304,
	LTR = 305,
	RTL = 306,
	COLOR = 307,
	UNBIND = 308,
	LAST = 309
}

struct RecentAction (Buildable, RecentChooser) {
	inline Action parent_instance;
	RecentActionPrivate* priv;
}

fn Action* RecentAction.new (ZString name, ZString label, ZString tooltip, ZString stock_id) @operator (construct) @extern ("gtk_recent_action_new");
fn Action* RecentAction.new_for_manager (ZString name, ZString label, ZString tooltip, ZString stock_id, RecentManager* manager) @operator (construct) @extern ("gtk_recent_action_new_for_manager");
fn CInt RecentAction.get_show_numbers (RecentAction* self) @extern ("gtk_recent_action_get_show_numbers");
fn void RecentAction.set_show_numbers (RecentAction* self, CInt show_numbers) @extern ("gtk_recent_action_set_show_numbers");
	1 properties
def RecentActionPrivate = void;

RecentChooser (Interface)
def RecentChooserDialog = void;
def RecentChooserDialogPrivate = void;


enum RecentChooserError {
	NOT_FOUND,
	INVALID_URI
}

struct RecentChooserMenu (ImplementorIface, Activatable, Buildable, RecentChooser) {
	inline Menu parent_instance;
	RecentChooserMenuPrivate* priv;
}

fn Widget* RecentChooserMenu.new () @operator (construct) @extern ("gtk_recent_chooser_menu_new");
fn Widget* RecentChooserMenu.new_for_manager (RecentManager* manager) @operator (construct) @extern ("gtk_recent_chooser_menu_new_for_manager");
fn CInt RecentChooserMenu.get_show_numbers (RecentChooserMenu* self) @extern ("gtk_recent_chooser_menu_get_show_numbers");
fn void RecentChooserMenu.set_show_numbers (RecentChooserMenu* self, CInt show_numbers) @extern ("gtk_recent_chooser_menu_set_show_numbers");
	1 properties
def RecentChooserMenuPrivate = void;

struct RecentChooserWidget (ImplementorIface, Buildable, Orientable, RecentChooser) {
	inline Box parent_instance;
	RecentChooserWidgetPrivate* priv;
}

fn Widget* RecentChooserWidget.new () @operator (construct) @extern ("gtk_recent_chooser_widget_new");
fn Widget* RecentChooserWidget.new_for_manager (RecentManager* manager) @operator (construct) @extern ("gtk_recent_chooser_widget_new_for_manager");
def RecentChooserWidgetPrivate = void;

struct RecentData {
	ZString display_name;
	ZString description;
	ZString mime_type;
	ZString app_name;
	ZString app_exec;
	char** groups;
	CInt is_private;
}

struct RecentFilter (Buildable) {
	void* unused;
}

fn RecentFilter* RecentFilter.new () @operator (construct) @extern ("gtk_recent_filter_new");
fn void RecentFilter.add_age (RecentFilter* self, int days) @extern ("gtk_recent_filter_add_age");
fn void RecentFilter.add_application (RecentFilter* self, ZString application) @extern ("gtk_recent_filter_add_application");
fn void RecentFilter.add_custom (RecentFilter* self, RecentFilterFlags needed, RecentFilterFunc func, void* data, DestroyNotify data_destroy) @extern ("gtk_recent_filter_add_custom");
fn void RecentFilter.add_group (RecentFilter* self, ZString group) @extern ("gtk_recent_filter_add_group");
fn void RecentFilter.add_mime_type (RecentFilter* self, ZString mime_type) @extern ("gtk_recent_filter_add_mime_type");
fn void RecentFilter.add_pattern (RecentFilter* self, ZString pattern) @extern ("gtk_recent_filter_add_pattern");
fn void RecentFilter.add_pixbuf_formats (RecentFilter* self) @extern ("gtk_recent_filter_add_pixbuf_formats");
fn CInt RecentFilter.filter (RecentFilter* self, RecentFilterInfo* filter_info) @extern ("gtk_recent_filter_filter");
fn ZString RecentFilter.get_name (RecentFilter* self) @extern ("gtk_recent_filter_get_name");
fn RecentFilterFlags RecentFilter.get_needed (RecentFilter* self) @extern ("gtk_recent_filter_get_needed");
fn void RecentFilter.set_name (RecentFilter* self, ZString name) @extern ("gtk_recent_filter_set_name");
enum RecentFilterFlags: CInt (inline CInt bit) {
	URI = 1,
	DISPLAY_NAME = 2,
	MIME_TYPE = 4,
	APPLICATION = 8,
	GROUP = 16,
	AGE = 32
}

def RecentFilterFunc = fn CInt (RecentFilterInfo* filter_info, void* user_data) @export;
struct RecentFilterInfo {
	RecentFilterFlags contains;
	ZString uri;
	ZString display_name;
	ZString mime_type;
	char** applications;
	char** groups;
	int age;
}

struct RecentInfo {
	void* unused;
}

fn [not parsed]* RecentInfo.create_app_info (RecentInfo* self, ZString app_name) @extern ("gtk_recent_info_create_app_info");
fn CInt RecentInfo.exists (RecentInfo* self) @extern ("gtk_recent_info_exists");
fn long RecentInfo.get_added (RecentInfo* self) @extern ("gtk_recent_info_get_added");
fn int RecentInfo.get_age (RecentInfo* self) @extern ("gtk_recent_info_get_age");
fn CInt RecentInfo.get_application_info (RecentInfo* self, ZString app_name, ZString app_exec, uint count, long time_) @extern ("gtk_recent_info_get_application_info");
fn char** RecentInfo.get_applications (RecentInfo* self, ulong length) @extern ("gtk_recent_info_get_applications");
fn ZString RecentInfo.get_description (RecentInfo* self) @extern ("gtk_recent_info_get_description");
fn ZString RecentInfo.get_display_name (RecentInfo* self) @extern ("gtk_recent_info_get_display_name");
fn [not parsed]* RecentInfo.get_gicon (RecentInfo* self) @extern ("gtk_recent_info_get_gicon");
fn char** RecentInfo.get_groups (RecentInfo* self, ulong length) @extern ("gtk_recent_info_get_groups");
fn Pixbuf* RecentInfo.get_icon (RecentInfo* self, int size) @extern ("gtk_recent_info_get_icon");
fn ZString RecentInfo.get_mime_type (RecentInfo* self) @extern ("gtk_recent_info_get_mime_type");
fn long RecentInfo.get_modified (RecentInfo* self) @extern ("gtk_recent_info_get_modified");
fn CInt RecentInfo.get_private_hint (RecentInfo* self) @extern ("gtk_recent_info_get_private_hint");
fn ZString RecentInfo.get_short_name (RecentInfo* self) @extern ("gtk_recent_info_get_short_name");
fn ZString RecentInfo.get_uri (RecentInfo* self) @extern ("gtk_recent_info_get_uri");
fn ZString RecentInfo.get_uri_display (RecentInfo* self) @extern ("gtk_recent_info_get_uri_display");
fn long RecentInfo.get_visited (RecentInfo* self) @extern ("gtk_recent_info_get_visited");
fn CInt RecentInfo.has_application (RecentInfo* self, ZString app_name) @extern ("gtk_recent_info_has_application");
fn CInt RecentInfo.has_group (RecentInfo* self, ZString group_name) @extern ("gtk_recent_info_has_group");
fn CInt RecentInfo.is_local (RecentInfo* self) @extern ("gtk_recent_info_is_local");
fn ZString RecentInfo.last_application (RecentInfo* self) @extern ("gtk_recent_info_last_application");
fn CInt RecentInfo.match (RecentInfo* self, RecentInfo* info_b) @extern ("gtk_recent_info_match");
fn RecentInfo* RecentInfo.ref (RecentInfo* self) @extern ("gtk_recent_info_ref");
fn void RecentInfo.unref (RecentInfo* self) @extern ("gtk_recent_info_unref");
struct RecentManager {
	inline Object parent_instance;
	RecentManagerPrivate* priv;
}

fn RecentManager* RecentManager.new () @operator (construct) @extern ("gtk_recent_manager_new");
fn RecentManager* RecentManager.get_default (RecentManager* self) @extern ("gtk_recent_manager_get_default");
fn CInt RecentManager.add_full (RecentManager* self, ZString uri, RecentData* recent_data) @extern ("gtk_recent_manager_add_full");
fn CInt RecentManager.add_item (RecentManager* self, ZString uri) @extern ("gtk_recent_manager_add_item");
fn List* RecentManager.get_items (RecentManager* self) @extern ("gtk_recent_manager_get_items");
fn CInt RecentManager.has_item (RecentManager* self, ZString uri) @extern ("gtk_recent_manager_has_item");
fn RecentInfo* RecentManager.lookup_item (RecentManager* self, ZString uri) @extern ("gtk_recent_manager_lookup_item");
fn CInt RecentManager.move_item (RecentManager* self, ZString uri, ZString new_uri) @extern ("gtk_recent_manager_move_item");
fn int RecentManager.purge_items (RecentManager* self) @extern ("gtk_recent_manager_purge_items");
fn CInt RecentManager.remove_item (RecentManager* self, ZString uri) @extern ("gtk_recent_manager_remove_item");
	2 properties
	1 signals
	1 virtuals

enum RecentManagerError {
	NOT_FOUND,
	INVALID_URI,
	INVALID_ENCODING,
	NOT_REGISTERED,
	READ,
	WRITE,
	UNKNOWN
}

def RecentManagerPrivate = void;

def RecentSortFunc = fn int (RecentInfo* a, RecentInfo* b, void* user_data) @export;

enum RecentSortType {
	NONE,
	MRU,
	LRU,
	CUSTOM
}

enum RegionFlags: CInt (inline CInt bit) {
	EVEN = 1,
	ODD = 2,
	FIRST = 4,
	LAST = 8,
	ONLY = 16,
	SORTED = 32
}


enum ReliefStyle {
	NORMAL,
	HALF,
	NONE
}

struct RendererCellAccessible (Action, Component, TableCell) {
	inline CellAccessible parent;
	RendererCellAccessiblePrivate* priv;
}

fn atk::Object* RendererCellAccessible.new (CellRenderer* renderer) @operator (construct) @extern ("gtk_renderer_cell_accessible_new");
	1 properties
def RendererCellAccessiblePrivate = void;

struct RequestedSize {
	void* data;
	int minimum_size;
	int natural_size;
}

struct Requisition {
	int width;
	int height;
}

fn Requisition* Requisition.new () @operator (construct) @extern ("gtk_requisition_new");
fn Requisition* Requisition.copy (Requisition* self) @extern ("gtk_requisition_copy");
fn void Requisition.free (Requisition* self) @extern ("gtk_requisition_free");

enum ResizeMode {
	PARENT,
	QUEUE,
	IMMEDIATE
}


enum ResponseType: CInt (inline CInt value) {
	NONE = -1,
	REJECT = -2,
	ACCEPT = -3,
	DELETE_EVENT = -4,
	OK = -5,
	CANCEL = -6,
	CLOSE = -7,
	YES = -8,
	NO = -9,
	APPLY = -10,
	HELP = -11
}

struct Revealer (ImplementorIface, Buildable) {
	inline Bin parent_instance;
}

fn Widget* Revealer.new () @operator (construct) @extern ("gtk_revealer_new");
fn CInt Revealer.get_child_revealed (Revealer* self) @extern ("gtk_revealer_get_child_revealed");
fn CInt Revealer.get_reveal_child (Revealer* self) @extern ("gtk_revealer_get_reveal_child");
fn uint Revealer.get_transition_duration (Revealer* self) @extern ("gtk_revealer_get_transition_duration");
fn RevealerTransitionType Revealer.get_transition_type (Revealer* self) @extern ("gtk_revealer_get_transition_type");
fn void Revealer.set_reveal_child (Revealer* self, CInt reveal_child) @extern ("gtk_revealer_set_reveal_child");
fn void Revealer.set_transition_duration (Revealer* self, uint duration) @extern ("gtk_revealer_set_transition_duration");
fn void Revealer.set_transition_type (Revealer* self, RevealerTransitionType transition) @extern ("gtk_revealer_set_transition_type");
	4 properties

enum RevealerTransitionType {
	NONE,
	CROSSFADE,
	SLIDE_RIGHT,
	SLIDE_LEFT,
	SLIDE_UP,
	SLIDE_DOWN
}

const ZString STOCK_ABOUT = "gtk-about";
const ZString STOCK_ADD = "gtk-add";
const ZString STOCK_APPLY = "gtk-apply";
const ZString STOCK_BOLD = "gtk-bold";
const ZString STOCK_CANCEL = "gtk-cancel";
const ZString STOCK_CAPS_LOCK_WARNING = "gtk-caps-lock-warning";
const ZString STOCK_CDROM = "gtk-cdrom";
const ZString STOCK_CLEAR = "gtk-clear";
const ZString STOCK_CLOSE = "gtk-close";
const ZString STOCK_COLOR_PICKER = "gtk-color-picker";
const ZString STOCK_CONNECT = "gtk-connect";
const ZString STOCK_CONVERT = "gtk-convert";
const ZString STOCK_COPY = "gtk-copy";
const ZString STOCK_CUT = "gtk-cut";
const ZString STOCK_DELETE = "gtk-delete";
const ZString STOCK_DIALOG_AUTHENTICATION = "gtk-dialog-authentication";
const ZString STOCK_DIALOG_ERROR = "gtk-dialog-error";
const ZString STOCK_DIALOG_INFO = "gtk-dialog-info";
const ZString STOCK_DIALOG_QUESTION = "gtk-dialog-question";
const ZString STOCK_DIALOG_WARNING = "gtk-dialog-warning";
const ZString STOCK_DIRECTORY = "gtk-directory";
const ZString STOCK_DISCARD = "gtk-discard";
const ZString STOCK_DISCONNECT = "gtk-disconnect";
const ZString STOCK_DND = "gtk-dnd";
const ZString STOCK_DND_MULTIPLE = "gtk-dnd-multiple";
const ZString STOCK_EDIT = "gtk-edit";
const ZString STOCK_EXECUTE = "gtk-execute";
const ZString STOCK_FILE = "gtk-file";
const ZString STOCK_FIND = "gtk-find";
const ZString STOCK_FIND_AND_REPLACE = "gtk-find-and-replace";
const ZString STOCK_FLOPPY = "gtk-floppy";
const ZString STOCK_FULLSCREEN = "gtk-fullscreen";
const ZString STOCK_GOTO_BOTTOM = "gtk-goto-bottom";
const ZString STOCK_GOTO_FIRST = "gtk-goto-first";
const ZString STOCK_GOTO_LAST = "gtk-goto-last";
const ZString STOCK_GOTO_TOP = "gtk-goto-top";
const ZString STOCK_GO_BACK = "gtk-go-back";
const ZString STOCK_GO_DOWN = "gtk-go-down";
const ZString STOCK_GO_FORWARD = "gtk-go-forward";
const ZString STOCK_GO_UP = "gtk-go-up";
const ZString STOCK_HARDDISK = "gtk-harddisk";
const ZString STOCK_HELP = "gtk-help";
const ZString STOCK_HOME = "gtk-home";
const ZString STOCK_INDENT = "gtk-indent";
const ZString STOCK_INDEX = "gtk-index";
const ZString STOCK_INFO = "gtk-info";
const ZString STOCK_ITALIC = "gtk-italic";
const ZString STOCK_JUMP_TO = "gtk-jump-to";
const ZString STOCK_JUSTIFY_CENTER = "gtk-justify-center";
const ZString STOCK_JUSTIFY_FILL = "gtk-justify-fill";
const ZString STOCK_JUSTIFY_LEFT = "gtk-justify-left";
const ZString STOCK_JUSTIFY_RIGHT = "gtk-justify-right";
const ZString STOCK_LEAVE_FULLSCREEN = "gtk-leave-fullscreen";
const ZString STOCK_MEDIA_FORWARD = "gtk-media-forward";
const ZString STOCK_MEDIA_NEXT = "gtk-media-next";
const ZString STOCK_MEDIA_PAUSE = "gtk-media-pause";
const ZString STOCK_MEDIA_PLAY = "gtk-media-play";
const ZString STOCK_MEDIA_PREVIOUS = "gtk-media-previous";
const ZString STOCK_MEDIA_RECORD = "gtk-media-record";
const ZString STOCK_MEDIA_REWIND = "gtk-media-rewind";
const ZString STOCK_MEDIA_STOP = "gtk-media-stop";
const ZString STOCK_MISSING_IMAGE = "gtk-missing-image";
const ZString STOCK_NETWORK = "gtk-network";
const ZString STOCK_NEW = "gtk-new";
const ZString STOCK_NO = "gtk-no";
const ZString STOCK_OK = "gtk-ok";
const ZString STOCK_OPEN = "gtk-open";
const ZString STOCK_ORIENTATION_LANDSCAPE = "gtk-orientation-landscape";
const ZString STOCK_ORIENTATION_PORTRAIT = "gtk-orientation-portrait";
const ZString STOCK_ORIENTATION_REVERSE_LANDSCAPE = "gtk-orientation-reverse-landscape";
const ZString STOCK_ORIENTATION_REVERSE_PORTRAIT = "gtk-orientation-reverse-portrait";
const ZString STOCK_PAGE_SETUP = "gtk-page-setup";
const ZString STOCK_PASTE = "gtk-paste";
const ZString STOCK_PREFERENCES = "gtk-preferences";
const ZString STOCK_PRINT = "gtk-print";
const ZString STOCK_PRINT_ERROR = "gtk-print-error";
const ZString STOCK_PRINT_PAUSED = "gtk-print-paused";
const ZString STOCK_PRINT_PREVIEW = "gtk-print-preview";
const ZString STOCK_PRINT_REPORT = "gtk-print-report";
const ZString STOCK_PRINT_WARNING = "gtk-print-warning";
const ZString STOCK_PROPERTIES = "gtk-properties";
const ZString STOCK_QUIT = "gtk-quit";
const ZString STOCK_REDO = "gtk-redo";
const ZString STOCK_REFRESH = "gtk-refresh";
const ZString STOCK_REMOVE = "gtk-remove";
const ZString STOCK_REVERT_TO_SAVED = "gtk-revert-to-saved";
const ZString STOCK_SAVE = "gtk-save";
const ZString STOCK_SAVE_AS = "gtk-save-as";
const ZString STOCK_SELECT_ALL = "gtk-select-all";
const ZString STOCK_SELECT_COLOR = "gtk-select-color";
const ZString STOCK_SELECT_FONT = "gtk-select-font";
const ZString STOCK_SORT_ASCENDING = "gtk-sort-ascending";
const ZString STOCK_SORT_DESCENDING = "gtk-sort-descending";
const ZString STOCK_SPELL_CHECK = "gtk-spell-check";
const ZString STOCK_STOP = "gtk-stop";
const ZString STOCK_STRIKETHROUGH = "gtk-strikethrough";
const ZString STOCK_UNDELETE = "gtk-undelete";
const ZString STOCK_UNDERLINE = "gtk-underline";
const ZString STOCK_UNDO = "gtk-undo";
const ZString STOCK_UNINDENT = "gtk-unindent";
const ZString STOCK_YES = "gtk-yes";
const ZString STOCK_ZOOM_100 = "gtk-zoom-100";
const ZString STOCK_ZOOM_FIT = "gtk-zoom-fit";
const ZString STOCK_ZOOM_IN = "gtk-zoom-in";
const ZString STOCK_ZOOM_OUT = "gtk-zoom-out";
const ZString STYLE_CLASS_ACCELERATOR = "accelerator";
const ZString STYLE_CLASS_ARROW = "arrow";
const ZString STYLE_CLASS_BACKGROUND = "background";
const ZString STYLE_CLASS_BOTTOM = "bottom";
const ZString STYLE_CLASS_BUTTON = "button";
const ZString STYLE_CLASS_CALENDAR = "calendar";
const ZString STYLE_CLASS_CELL = "cell";
const ZString STYLE_CLASS_CHECK = "check";
const ZString STYLE_CLASS_COMBOBOX_ENTRY = "combobox-entry";
const ZString STYLE_CLASS_CONTEXT_MENU = "context-menu";
const ZString STYLE_CLASS_CSD = "csd";
const ZString STYLE_CLASS_CURSOR_HANDLE = "cursor-handle";
const ZString STYLE_CLASS_DEFAULT = "default";
const ZString STYLE_CLASS_DESTRUCTIVE_ACTION = "destructive-action";
const ZString STYLE_CLASS_DIM_LABEL = "dim-label";
const ZString STYLE_CLASS_DND = "dnd";
const ZString STYLE_CLASS_DOCK = "dock";
const ZString STYLE_CLASS_ENTRY = "entry";
const ZString STYLE_CLASS_ERROR = "error";
const ZString STYLE_CLASS_EXPANDER = "expander";
const ZString STYLE_CLASS_FLAT = "flat";
const ZString STYLE_CLASS_FRAME = "frame";
const ZString STYLE_CLASS_GRIP = "grip";
const ZString STYLE_CLASS_HEADER = "header";
const ZString STYLE_CLASS_HIGHLIGHT = "highlight";
const ZString STYLE_CLASS_HORIZONTAL = "horizontal";
const ZString STYLE_CLASS_IMAGE = "image";
const ZString STYLE_CLASS_INFO = "info";
const ZString STYLE_CLASS_INLINE_TOOLBAR = "inline-toolbar";
const ZString STYLE_CLASS_INSERTION_CURSOR = "insertion-cursor";
const ZString STYLE_CLASS_LABEL = "label";
const ZString STYLE_CLASS_LEFT = "left";
const ZString STYLE_CLASS_LEVEL_BAR = "level-bar";
const ZString STYLE_CLASS_LINKED = "linked";
const ZString STYLE_CLASS_LIST = "list";
const ZString STYLE_CLASS_LIST_ROW = "list-row";
const ZString STYLE_CLASS_MARK = "mark";
const ZString STYLE_CLASS_MENU = "menu";
const ZString STYLE_CLASS_MENUBAR = "menubar";
const ZString STYLE_CLASS_MENUITEM = "menuitem";
const ZString STYLE_CLASS_MESSAGE_DIALOG = "message-dialog";
const ZString STYLE_CLASS_MONOSPACE = "monospace";
const ZString STYLE_CLASS_NEEDS_ATTENTION = "needs-attention";
const ZString STYLE_CLASS_NOTEBOOK = "notebook";
const ZString STYLE_CLASS_OSD = "osd";
const ZString STYLE_CLASS_OVERSHOOT = "overshoot";
const ZString STYLE_CLASS_PANE_SEPARATOR = "pane-separator";
const ZString STYLE_CLASS_PAPER = "paper";
const ZString STYLE_CLASS_POPOVER = "popover";
const ZString STYLE_CLASS_POPUP = "popup";
const ZString STYLE_CLASS_PRIMARY_TOOLBAR = "primary-toolbar";
const ZString STYLE_CLASS_PROGRESSBAR = "progressbar";
const ZString STYLE_CLASS_PULSE = "pulse";
const ZString STYLE_CLASS_QUESTION = "question";
const ZString STYLE_CLASS_RADIO = "radio";
const ZString STYLE_CLASS_RAISED = "raised";
const ZString STYLE_CLASS_READ_ONLY = "read-only";
const ZString STYLE_CLASS_RIGHT = "right";
const ZString STYLE_CLASS_RUBBERBAND = "rubberband";
const ZString STYLE_CLASS_SCALE = "scale";
const ZString STYLE_CLASS_SCALE_HAS_MARKS_ABOVE = "scale-has-marks-above";
const ZString STYLE_CLASS_SCALE_HAS_MARKS_BELOW = "scale-has-marks-below";
const ZString STYLE_CLASS_SCROLLBAR = "scrollbar";
const ZString STYLE_CLASS_SCROLLBARS_JUNCTION = "scrollbars-junction";
const ZString STYLE_CLASS_SEPARATOR = "separator";
const ZString STYLE_CLASS_SIDEBAR = "sidebar";
const ZString STYLE_CLASS_SLIDER = "slider";
const ZString STYLE_CLASS_SPINBUTTON = "spinbutton";
const ZString STYLE_CLASS_SPINNER = "spinner";
const ZString STYLE_CLASS_STATUSBAR = "statusbar";
const ZString STYLE_CLASS_SUBTITLE = "subtitle";
const ZString STYLE_CLASS_SUGGESTED_ACTION = "suggested-action";
const ZString STYLE_CLASS_TITLE = "title";
const ZString STYLE_CLASS_TITLEBAR = "titlebar";
const ZString STYLE_CLASS_TOOLBAR = "toolbar";
const ZString STYLE_CLASS_TOOLTIP = "tooltip";
const ZString STYLE_CLASS_TOP = "top";
const ZString STYLE_CLASS_TOUCH_SELECTION = "touch-selection";
const ZString STYLE_CLASS_TROUGH = "trough";
const ZString STYLE_CLASS_UNDERSHOOT = "undershoot";
const ZString STYLE_CLASS_VERTICAL = "vertical";
const ZString STYLE_CLASS_VIEW = "view";
const ZString STYLE_CLASS_WARNING = "warning";
const ZString STYLE_CLASS_WIDE = "wide";
const ZString STYLE_PROPERTY_BACKGROUND_COLOR = "background-color";
const ZString STYLE_PROPERTY_BACKGROUND_IMAGE = "background-image";
const ZString STYLE_PROPERTY_BORDER_COLOR = "border-color";
const ZString STYLE_PROPERTY_BORDER_RADIUS = "border-radius";
const ZString STYLE_PROPERTY_BORDER_STYLE = "border-style";
const ZString STYLE_PROPERTY_BORDER_WIDTH = "border-width";
const ZString STYLE_PROPERTY_COLOR = "color";
const ZString STYLE_PROPERTY_FONT = "font";
const ZString STYLE_PROPERTY_MARGIN = "margin";
const ZString STYLE_PROPERTY_PADDING = "padding";
const int STYLE_PROVIDER_PRIORITY_APPLICATION = 600;
const int STYLE_PROVIDER_PRIORITY_FALLBACK = 1;
const int STYLE_PROVIDER_PRIORITY_SETTINGS = 400;
const int STYLE_PROVIDER_PRIORITY_THEME = 200;
const int STYLE_PROVIDER_PRIORITY_USER = 800;
const ZString STYLE_REGION_COLUMN = "column";
const ZString STYLE_REGION_COLUMN_HEADER = "column-header";
const ZString STYLE_REGION_ROW = "row";
const ZString STYLE_REGION_TAB = "tab";
struct Scale (ImplementorIface, Buildable, Orientable) {
	inline Range range;
	ScalePrivate* priv;
}

fn Widget* Scale.new (Orientation orientation, Adjustment* adjustment) @operator (construct) @extern ("gtk_scale_new");
fn Widget* Scale.new_with_range (Orientation orientation, double min, double max, double step) @operator (construct) @extern ("gtk_scale_new_with_range");
fn void Scale.add_mark (Scale* self, double value, PositionType position, ZString markup) @extern ("gtk_scale_add_mark");
fn void Scale.clear_marks (Scale* self) @extern ("gtk_scale_clear_marks");
fn int Scale.get_digits (Scale* self) @extern ("gtk_scale_get_digits");
fn CInt Scale.get_draw_value (Scale* self) @extern ("gtk_scale_get_draw_value");
fn CInt Scale.get_has_origin (Scale* self) @extern ("gtk_scale_get_has_origin");
fn Layout* Scale.get_layout (Scale* self) @extern ("gtk_scale_get_layout");
fn void Scale.get_layout_offsets (Scale* self, int x, int y) @extern ("gtk_scale_get_layout_offsets");
fn PositionType Scale.get_value_pos (Scale* self) @extern ("gtk_scale_get_value_pos");
fn void Scale.set_digits (Scale* self, int digits) @extern ("gtk_scale_set_digits");
fn void Scale.set_draw_value (Scale* self, CInt draw_value) @extern ("gtk_scale_set_draw_value");
fn void Scale.set_has_origin (Scale* self, CInt has_origin) @extern ("gtk_scale_set_has_origin");
fn void Scale.set_value_pos (Scale* self, PositionType pos) @extern ("gtk_scale_set_value_pos");
	4 properties
	1 signals
	3 virtuals
def ScaleAccessible = void;
def ScaleAccessiblePrivate = void;

struct ScaleButton (ImplementorIface, Actionable, Activatable, Buildable, Orientable) {
	inline Button parent;
	ScaleButtonPrivate* priv;
}

fn Widget* ScaleButton.new (int size, double min, double max, double step, char** icons) @operator (construct) @extern ("gtk_scale_button_new");
fn Adjustment* ScaleButton.get_adjustment (ScaleButton* self) @extern ("gtk_scale_button_get_adjustment");
fn Button* ScaleButton.get_minus_button (ScaleButton* self) @extern ("gtk_scale_button_get_minus_button");
fn Button* ScaleButton.get_plus_button (ScaleButton* self) @extern ("gtk_scale_button_get_plus_button");
fn Widget* ScaleButton.get_popup (ScaleButton* self) @extern ("gtk_scale_button_get_popup");
fn double ScaleButton.get_value (ScaleButton* self) @extern ("gtk_scale_button_get_value");
fn void ScaleButton.set_adjustment (ScaleButton* self, Adjustment* adjustment) @extern ("gtk_scale_button_set_adjustment");
fn void ScaleButton.set_icons (ScaleButton* self, char** icons) @extern ("gtk_scale_button_set_icons");
fn void ScaleButton.set_value (ScaleButton* self, double value) @extern ("gtk_scale_button_set_value");
	4 properties
	3 signals
	1 virtuals
def ScaleButtonAccessible = void;
def ScaleButtonAccessiblePrivate = void;

def ScaleButtonPrivate = void;

def ScalePrivate = void;


enum ScrollStep {
	STEPS,
	PAGES,
	ENDS,
	HORIZONTAL_STEPS,
	HORIZONTAL_PAGES,
	HORIZONTAL_ENDS
}


enum ScrollType {
	NONE,
	JUMP,
	STEP_BACKWARD,
	STEP_FORWARD,
	PAGE_BACKWARD,
	PAGE_FORWARD,
	STEP_UP,
	STEP_DOWN,
	PAGE_UP,
	PAGE_DOWN,
	STEP_LEFT,
	STEP_RIGHT,
	PAGE_LEFT,
	PAGE_RIGHT,
	START,
	END
}

Scrollable (Interface)

enum ScrollablePolicy {
	MINIMUM,
	NATURAL
}

struct Scrollbar (ImplementorIface, Buildable, Orientable) {
	inline Range range;
}

fn Widget* Scrollbar.new (Orientation orientation, Adjustment* adjustment) @operator (construct) @extern ("gtk_scrollbar_new");
struct ScrolledWindow (ImplementorIface, Buildable) {
	inline Bin container;
	ScrolledWindowPrivate* priv;
}

fn Widget* ScrolledWindow.new (Adjustment* hadjustment, Adjustment* vadjustment) @operator (construct) @extern ("gtk_scrolled_window_new");
fn void ScrolledWindow.add_with_viewport (ScrolledWindow* self, Widget* child) @extern ("gtk_scrolled_window_add_with_viewport");
fn CInt ScrolledWindow.get_capture_button_press (ScrolledWindow* self) @extern ("gtk_scrolled_window_get_capture_button_press");
fn Adjustment* ScrolledWindow.get_hadjustment (ScrolledWindow* self) @extern ("gtk_scrolled_window_get_hadjustment");
fn Widget* ScrolledWindow.get_hscrollbar (ScrolledWindow* self) @extern ("gtk_scrolled_window_get_hscrollbar");
fn CInt ScrolledWindow.get_kinetic_scrolling (ScrolledWindow* self) @extern ("gtk_scrolled_window_get_kinetic_scrolling");
fn int ScrolledWindow.get_max_content_height (ScrolledWindow* self) @extern ("gtk_scrolled_window_get_max_content_height");
fn int ScrolledWindow.get_max_content_width (ScrolledWindow* self) @extern ("gtk_scrolled_window_get_max_content_width");
fn int ScrolledWindow.get_min_content_height (ScrolledWindow* self) @extern ("gtk_scrolled_window_get_min_content_height");
fn int ScrolledWindow.get_min_content_width (ScrolledWindow* self) @extern ("gtk_scrolled_window_get_min_content_width");
fn CInt ScrolledWindow.get_overlay_scrolling (ScrolledWindow* self) @extern ("gtk_scrolled_window_get_overlay_scrolling");
fn CornerType ScrolledWindow.get_placement (ScrolledWindow* self) @extern ("gtk_scrolled_window_get_placement");
fn void ScrolledWindow.get_policy (ScrolledWindow* self, PolicyType hscrollbar_policy, PolicyType vscrollbar_policy) @extern ("gtk_scrolled_window_get_policy");
fn CInt ScrolledWindow.get_propagate_natural_height (ScrolledWindow* self) @extern ("gtk_scrolled_window_get_propagate_natural_height");
fn CInt ScrolledWindow.get_propagate_natural_width (ScrolledWindow* self) @extern ("gtk_scrolled_window_get_propagate_natural_width");
fn ShadowType ScrolledWindow.get_shadow_type (ScrolledWindow* self) @extern ("gtk_scrolled_window_get_shadow_type");
fn Adjustment* ScrolledWindow.get_vadjustment (ScrolledWindow* self) @extern ("gtk_scrolled_window_get_vadjustment");
fn Widget* ScrolledWindow.get_vscrollbar (ScrolledWindow* self) @extern ("gtk_scrolled_window_get_vscrollbar");
fn void ScrolledWindow.set_capture_button_press (ScrolledWindow* self, CInt capture_button_press) @extern ("gtk_scrolled_window_set_capture_button_press");
fn void ScrolledWindow.set_hadjustment (ScrolledWindow* self, Adjustment* hadjustment) @extern ("gtk_scrolled_window_set_hadjustment");
fn void ScrolledWindow.set_kinetic_scrolling (ScrolledWindow* self, CInt kinetic_scrolling) @extern ("gtk_scrolled_window_set_kinetic_scrolling");
fn void ScrolledWindow.set_max_content_height (ScrolledWindow* self, int height) @extern ("gtk_scrolled_window_set_max_content_height");
fn void ScrolledWindow.set_max_content_width (ScrolledWindow* self, int width) @extern ("gtk_scrolled_window_set_max_content_width");
fn void ScrolledWindow.set_min_content_height (ScrolledWindow* self, int height) @extern ("gtk_scrolled_window_set_min_content_height");
fn void ScrolledWindow.set_min_content_width (ScrolledWindow* self, int width) @extern ("gtk_scrolled_window_set_min_content_width");
fn void ScrolledWindow.set_overlay_scrolling (ScrolledWindow* self, CInt overlay_scrolling) @extern ("gtk_scrolled_window_set_overlay_scrolling");
fn void ScrolledWindow.set_placement (ScrolledWindow* self, CornerType window_placement) @extern ("gtk_scrolled_window_set_placement");
fn void ScrolledWindow.set_policy (ScrolledWindow* self, PolicyType hscrollbar_policy, PolicyType vscrollbar_policy) @extern ("gtk_scrolled_window_set_policy");
fn void ScrolledWindow.set_propagate_natural_height (ScrolledWindow* self, CInt propagate) @extern ("gtk_scrolled_window_set_propagate_natural_height");
fn void ScrolledWindow.set_propagate_natural_width (ScrolledWindow* self, CInt propagate) @extern ("gtk_scrolled_window_set_propagate_natural_width");
fn void ScrolledWindow.set_shadow_type (ScrolledWindow* self, ShadowType type) @extern ("gtk_scrolled_window_set_shadow_type");
fn void ScrolledWindow.set_vadjustment (ScrolledWindow* self, Adjustment* vadjustment) @extern ("gtk_scrolled_window_set_vadjustment");
fn void ScrolledWindow.unset_placement (ScrolledWindow* self) @extern ("gtk_scrolled_window_unset_placement");
	15 properties
	4 signals
	2 virtuals
def ScrolledWindowAccessible = void;
def ScrolledWindowAccessiblePrivate = void;

def ScrolledWindowPrivate = void;

struct SearchBar (ImplementorIface, Buildable) {
	inline Bin parent;
}

fn Widget* SearchBar.new () @operator (construct) @extern ("gtk_search_bar_new");
fn void SearchBar.connect_entry (SearchBar* self, Entry* entry) @extern ("gtk_search_bar_connect_entry");
fn CInt SearchBar.get_search_mode (SearchBar* self) @extern ("gtk_search_bar_get_search_mode");
fn CInt SearchBar.get_show_close_button (SearchBar* self) @extern ("gtk_search_bar_get_show_close_button");
fn CInt SearchBar.handle_event (SearchBar* self, gdk::Event* event) @extern ("gtk_search_bar_handle_event");
fn void SearchBar.set_search_mode (SearchBar* self, CInt search_mode) @extern ("gtk_search_bar_set_search_mode");
fn void SearchBar.set_show_close_button (SearchBar* self, CInt visible) @extern ("gtk_search_bar_set_show_close_button");
	2 properties
struct SearchEntry (ImplementorIface, Buildable, CellEditable, Editable) {
	inline Entry parent;
}

fn Widget* SearchEntry.new () @operator (construct) @extern ("gtk_search_entry_new");
fn CInt SearchEntry.handle_event (SearchEntry* self, gdk::Event* event) @extern ("gtk_search_entry_handle_event");
	4 signals
	4 virtuals
struct SelectionData {
	void* unused;
}

fn SelectionData* SelectionData.copy (SelectionData* self) @extern ("gtk_selection_data_copy");
fn void SelectionData.free (SelectionData* self) @extern ("gtk_selection_data_free");
fn gdk::Atom* SelectionData.get_data_type (SelectionData* self) @extern ("gtk_selection_data_get_data_type");
fn char** SelectionData.get_data (SelectionData* self, int length) @extern ("gtk_selection_data_get_data_with_length");
fn gdk::Display* SelectionData.get_display (SelectionData* self) @extern ("gtk_selection_data_get_display");
fn int SelectionData.get_format (SelectionData* self) @extern ("gtk_selection_data_get_format");
fn int SelectionData.get_length (SelectionData* self) @extern ("gtk_selection_data_get_length");
fn Pixbuf* SelectionData.get_pixbuf (SelectionData* self) @extern ("gtk_selection_data_get_pixbuf");
fn gdk::Atom* SelectionData.get_selection (SelectionData* self) @extern ("gtk_selection_data_get_selection");
fn gdk::Atom* SelectionData.get_target (SelectionData* self) @extern ("gtk_selection_data_get_target");
fn CInt SelectionData.get_targets (SelectionData* self, char** targets, int n_atoms) @extern ("gtk_selection_data_get_targets");
fn ZString SelectionData.get_text (SelectionData* self) @extern ("gtk_selection_data_get_text");
fn char** SelectionData.get_uris (SelectionData* self) @extern ("gtk_selection_data_get_uris");
fn void SelectionData.set (SelectionData* self, gdk::Atom* type, int format, char** data, int length) @extern ("gtk_selection_data_set");
fn CInt SelectionData.set_pixbuf (SelectionData* self, Pixbuf* pixbuf) @extern ("gtk_selection_data_set_pixbuf");
fn CInt SelectionData.set_text (SelectionData* self, ZString str, int len) @extern ("gtk_selection_data_set_text");
fn CInt SelectionData.set_uris (SelectionData* self, char** uris) @extern ("gtk_selection_data_set_uris");
fn CInt SelectionData.targets_include_image (SelectionData* self, CInt writable) @extern ("gtk_selection_data_targets_include_image");
fn CInt SelectionData.targets_include_rich_text (SelectionData* self, TextBuffer* buffer) @extern ("gtk_selection_data_targets_include_rich_text");
fn CInt SelectionData.targets_include_text (SelectionData* self) @extern ("gtk_selection_data_targets_include_text");
fn CInt SelectionData.targets_include_uri (SelectionData* self) @extern ("gtk_selection_data_targets_include_uri");

enum SelectionMode {
	NONE,
	SINGLE,
	BROWSE,
	MULTIPLE
}


enum SensitivityType {
	AUTO,
	ON,
	OFF
}

struct Separator (ImplementorIface, Buildable, Orientable) {
	inline Widget widget;
	SeparatorPrivate* priv;
}

fn Widget* Separator.new (Orientation orientation) @operator (construct) @extern ("gtk_separator_new");
struct SeparatorMenuItem (ImplementorIface, Actionable, Activatable, Buildable) {
	inline MenuItem menu_item;
}

fn Widget* SeparatorMenuItem.new () @operator (construct) @extern ("gtk_separator_menu_item_new");
def SeparatorPrivate = void;

struct SeparatorToolItem (ImplementorIface, Activatable, Buildable) {
	inline ToolItem parent;
	SeparatorToolItemPrivate* priv;
}

fn ToolItem* SeparatorToolItem.new () @operator (construct) @extern ("gtk_separator_tool_item_new");
fn CInt SeparatorToolItem.get_draw (SeparatorToolItem* self) @extern ("gtk_separator_tool_item_get_draw");
fn void SeparatorToolItem.set_draw (SeparatorToolItem* self, CInt draw) @extern ("gtk_separator_tool_item_set_draw");
	1 properties
def SeparatorToolItemPrivate = void;

struct Settings (StyleProvider) {
	inline Object parent_instance;
	SettingsPrivate* priv;
}

fn Settings* Settings.get_default (Settings* self) @extern ("gtk_settings_get_default");
fn Settings* Settings.get_for_screen (Settings* self, gdk::Screen* screen) @extern ("gtk_settings_get_for_screen");
fn void Settings.install_property (Settings* self, ParamSpec* pspec) @extern ("gtk_settings_install_property");
fn void Settings.install_property_parser (Settings* self, ParamSpec* pspec, RcPropertyParser parser) @extern ("gtk_settings_install_property_parser");
fn void Settings.reset_property (Settings* self, ZString name) @extern ("gtk_settings_reset_property");
fn void Settings.set_double_property (Settings* self, ZString name, double v_double, ZString origin) @extern ("gtk_settings_set_double_property");
fn void Settings.set_long_property (Settings* self, ZString name, long v_long, ZString origin) @extern ("gtk_settings_set_long_property");
fn void Settings.set_property_value (Settings* self, ZString name, SettingsValue* svalue) @extern ("gtk_settings_set_property_value");
fn void Settings.set_string_property (Settings* self, ZString name, ZString v_string, ZString origin) @extern ("gtk_settings_set_string_property");
	85 properties
def SettingsPrivate = void;

struct SettingsValue {
	ZString origin;
	Value value;
}


enum ShadowType {
	NONE,
	IN,
	OUT,
	ETCHED_IN,
	ETCHED_OUT
}

struct ShortcutLabel (ImplementorIface, Buildable, Orientable) {
	void* unused;
}

fn Widget* ShortcutLabel.new (ZString accelerator) @operator (construct) @extern ("gtk_shortcut_label_new");
fn ZString ShortcutLabel.get_accelerator (ShortcutLabel* self) @extern ("gtk_shortcut_label_get_accelerator");
fn ZString ShortcutLabel.get_disabled_text (ShortcutLabel* self) @extern ("gtk_shortcut_label_get_disabled_text");
fn void ShortcutLabel.set_accelerator (ShortcutLabel* self, ZString accelerator) @extern ("gtk_shortcut_label_set_accelerator");
fn void ShortcutLabel.set_disabled_text (ShortcutLabel* self, ZString disabled_text) @extern ("gtk_shortcut_label_set_disabled_text");
	2 properties

enum ShortcutType {
	ACCELERATOR,
	GESTURE_PINCH,
	GESTURE_STRETCH,
	GESTURE_ROTATE_CLOCKWISE,
	GESTURE_ROTATE_COUNTERCLOCKWISE,
	GESTURE_TWO_FINGER_SWIPE_LEFT,
	GESTURE_TWO_FINGER_SWIPE_RIGHT,
	GESTURE
}

def ShortcutsGroup = void;
	5 properties
def ShortcutsSection = void;
	4 properties
	1 signals
def ShortcutsShortcut = void;
	11 properties
def ShortcutsWindow = void;
	2 properties
	2 signals
	2 virtuals
struct SizeGroup (Buildable) {
	inline Object parent_instance;
	SizeGroupPrivate* priv;
}

fn SizeGroup* SizeGroup.new (SizeGroupMode mode) @operator (construct) @extern ("gtk_size_group_new");
fn void SizeGroup.add_widget (SizeGroup* self, Widget* widget) @extern ("gtk_size_group_add_widget");
fn CInt SizeGroup.get_ignore_hidden (SizeGroup* self) @extern ("gtk_size_group_get_ignore_hidden");
fn SizeGroupMode SizeGroup.get_mode (SizeGroup* self) @extern ("gtk_size_group_get_mode");
fn SList* SizeGroup.get_widgets (SizeGroup* self) @extern ("gtk_size_group_get_widgets");
fn void SizeGroup.remove_widget (SizeGroup* self, Widget* widget) @extern ("gtk_size_group_remove_widget");
fn void SizeGroup.set_ignore_hidden (SizeGroup* self, CInt ignore_hidden) @extern ("gtk_size_group_set_ignore_hidden");
fn void SizeGroup.set_mode (SizeGroup* self, SizeGroupMode mode) @extern ("gtk_size_group_set_mode");
	2 properties

enum SizeGroupMode {
	NONE,
	HORIZONTAL,
	VERTICAL,
	BOTH
}

def SizeGroupPrivate = void;


enum SizeRequestMode {
	HEIGHT_FOR_WIDTH,
	WIDTH_FOR_HEIGHT,
	CONSTANT_SIZE
}

struct Socket (ImplementorIface, Buildable) {
	inline Container container;
	SocketPrivate* priv;
}

fn Widget* Socket.new () @operator (construct) @extern ("gtk_socket_new");
fn void Socket.add_id (Socket* self, ulong window) @extern ("gtk_socket_add_id");
fn ulong Socket.get_id (Socket* self) @extern ("gtk_socket_get_id");
fn gdk::Window* Socket.get_plug_window (Socket* self) @extern ("gtk_socket_get_plug_window");
	2 signals
	2 virtuals
struct SocketAccessible (Component) {
	inline ContainerAccessible parent;
	SocketAccessiblePrivate* priv;
}

fn void SocketAccessible.embed (SocketAccessible* self, ZString path) @extern ("gtk_socket_accessible_embed");
def SocketAccessiblePrivate = void;

def SocketPrivate = void;


enum SortType {
	ASCENDING,
	DESCENDING
}

struct SpinButton (ImplementorIface, Buildable, CellEditable, Editable, Orientable) {
	inline Entry entry;
	SpinButtonPrivate* priv;
}

fn Widget* SpinButton.new (Adjustment* adjustment, double climb_rate, uint digits) @operator (construct) @extern ("gtk_spin_button_new");
fn Widget* SpinButton.new_with_range (double min, double max, double step) @operator (construct) @extern ("gtk_spin_button_new_with_range");
fn void SpinButton.configure (SpinButton* self, Adjustment* adjustment, double climb_rate, uint digits) @extern ("gtk_spin_button_configure");
fn Adjustment* SpinButton.get_adjustment (SpinButton* self) @extern ("gtk_spin_button_get_adjustment");
fn uint SpinButton.get_digits (SpinButton* self) @extern ("gtk_spin_button_get_digits");
fn void SpinButton.get_increments (SpinButton* self, double step, double page) @extern ("gtk_spin_button_get_increments");
fn CInt SpinButton.get_numeric (SpinButton* self) @extern ("gtk_spin_button_get_numeric");
fn void SpinButton.get_range (SpinButton* self, double min, double max) @extern ("gtk_spin_button_get_range");
fn CInt SpinButton.get_snap_to_ticks (SpinButton* self) @extern ("gtk_spin_button_get_snap_to_ticks");
fn SpinButtonUpdatePolicy SpinButton.get_update_policy (SpinButton* self) @extern ("gtk_spin_button_get_update_policy");
fn double SpinButton.get_value (SpinButton* self) @extern ("gtk_spin_button_get_value");
fn int SpinButton.get_value_as_int (SpinButton* self) @extern ("gtk_spin_button_get_value_as_int");
fn CInt SpinButton.get_wrap (SpinButton* self) @extern ("gtk_spin_button_get_wrap");
fn void SpinButton.set_adjustment (SpinButton* self, Adjustment* adjustment) @extern ("gtk_spin_button_set_adjustment");
fn void SpinButton.set_digits (SpinButton* self, uint digits) @extern ("gtk_spin_button_set_digits");
fn void SpinButton.set_increments (SpinButton* self, double step, double page) @extern ("gtk_spin_button_set_increments");
fn void SpinButton.set_numeric (SpinButton* self, CInt numeric) @extern ("gtk_spin_button_set_numeric");
fn void SpinButton.set_range (SpinButton* self, double min, double max) @extern ("gtk_spin_button_set_range");
fn void SpinButton.set_snap_to_ticks (SpinButton* self, CInt snap_to_ticks) @extern ("gtk_spin_button_set_snap_to_ticks");
fn void SpinButton.set_update_policy (SpinButton* self, SpinButtonUpdatePolicy policy) @extern ("gtk_spin_button_set_update_policy");
fn void SpinButton.set_value (SpinButton* self, double value) @extern ("gtk_spin_button_set_value");
fn void SpinButton.set_wrap (SpinButton* self, CInt wrap) @extern ("gtk_spin_button_set_wrap");
fn void SpinButton.spin (SpinButton* self, SpinType direction, double increment) @extern ("gtk_spin_button_spin");
fn void SpinButton.update (SpinButton* self) @extern ("gtk_spin_button_update");
	8 properties
	5 signals
	5 virtuals
def SpinButtonAccessible = void;
def SpinButtonAccessiblePrivate = void;

def SpinButtonPrivate = void;


enum SpinButtonUpdatePolicy {
	ALWAYS,
	IF_VALID
}


enum SpinType {
	STEP_FORWARD,
	STEP_BACKWARD,
	PAGE_FORWARD,
	PAGE_BACKWARD,
	HOME,
	END,
	USER_DEFINED
}

struct Spinner (ImplementorIface, Buildable) {
	inline Widget parent;
	SpinnerPrivate* priv;
}

fn Widget* Spinner.new () @operator (construct) @extern ("gtk_spinner_new");
fn void Spinner.start (Spinner* self) @extern ("gtk_spinner_start");
fn void Spinner.stop (Spinner* self) @extern ("gtk_spinner_stop");
	1 properties
def SpinnerAccessible = void;
def SpinnerAccessiblePrivate = void;

def SpinnerPrivate = void;

struct Stack (ImplementorIface, Buildable) {
	inline Container parent_instance;
}

fn Widget* Stack.new () @operator (construct) @extern ("gtk_stack_new");
fn void Stack.add_named (Stack* self, Widget* child, ZString name) @extern ("gtk_stack_add_named");
fn void Stack.add_titled (Stack* self, Widget* child, ZString name, ZString title) @extern ("gtk_stack_add_titled");
fn Widget* Stack.get_child_by_name (Stack* self, ZString name) @extern ("gtk_stack_get_child_by_name");
fn CInt Stack.get_hhomogeneous (Stack* self) @extern ("gtk_stack_get_hhomogeneous");
fn CInt Stack.get_homogeneous (Stack* self) @extern ("gtk_stack_get_homogeneous");
fn CInt Stack.get_interpolate_size (Stack* self) @extern ("gtk_stack_get_interpolate_size");
fn uint Stack.get_transition_duration (Stack* self) @extern ("gtk_stack_get_transition_duration");
fn CInt Stack.get_transition_running (Stack* self) @extern ("gtk_stack_get_transition_running");
fn StackTransitionType Stack.get_transition_type (Stack* self) @extern ("gtk_stack_get_transition_type");
fn CInt Stack.get_vhomogeneous (Stack* self) @extern ("gtk_stack_get_vhomogeneous");
fn Widget* Stack.get_visible_child (Stack* self) @extern ("gtk_stack_get_visible_child");
fn ZString Stack.get_visible_child_name (Stack* self) @extern ("gtk_stack_get_visible_child_name");
fn void Stack.set_hhomogeneous (Stack* self, CInt hhomogeneous) @extern ("gtk_stack_set_hhomogeneous");
fn void Stack.set_homogeneous (Stack* self, CInt homogeneous) @extern ("gtk_stack_set_homogeneous");
fn void Stack.set_interpolate_size (Stack* self, CInt interpolate_size) @extern ("gtk_stack_set_interpolate_size");
fn void Stack.set_transition_duration (Stack* self, uint duration) @extern ("gtk_stack_set_transition_duration");
fn void Stack.set_transition_type (Stack* self, StackTransitionType transition) @extern ("gtk_stack_set_transition_type");
fn void Stack.set_vhomogeneous (Stack* self, CInt vhomogeneous) @extern ("gtk_stack_set_vhomogeneous");
fn void Stack.set_visible_child (Stack* self, Widget* child) @extern ("gtk_stack_set_visible_child");
fn void Stack.set_visible_child_full (Stack* self, ZString name, StackTransitionType transition) @extern ("gtk_stack_set_visible_child_full");
fn void Stack.set_visible_child_name (Stack* self, ZString name) @extern ("gtk_stack_set_visible_child_name");
	9 properties
def StackAccessible = void;
struct StackSidebar (ImplementorIface, Buildable) {
	inline Bin parent;
}

fn Widget* StackSidebar.new () @operator (construct) @extern ("gtk_stack_sidebar_new");
fn Stack* StackSidebar.get_stack (StackSidebar* self) @extern ("gtk_stack_sidebar_get_stack");
fn void StackSidebar.set_stack (StackSidebar* self, Stack* stack) @extern ("gtk_stack_sidebar_set_stack");
	1 properties
def StackSidebarPrivate = void;

struct StackSwitcher (ImplementorIface, Buildable, Orientable) {
	inline Box widget;
}

fn Widget* StackSwitcher.new () @operator (construct) @extern ("gtk_stack_switcher_new");
fn Stack* StackSwitcher.get_stack (StackSwitcher* self) @extern ("gtk_stack_switcher_get_stack");
fn void StackSwitcher.set_stack (StackSwitcher* self, Stack* stack) @extern ("gtk_stack_switcher_set_stack");
	2 properties

enum StackTransitionType {
	NONE,
	CROSSFADE,
	SLIDE_RIGHT,
	SLIDE_LEFT,
	SLIDE_UP,
	SLIDE_DOWN,
	SLIDE_LEFT_RIGHT,
	SLIDE_UP_DOWN,
	OVER_UP,
	OVER_DOWN,
	OVER_LEFT,
	OVER_RIGHT,
	UNDER_UP,
	UNDER_DOWN,
	UNDER_LEFT,
	UNDER_RIGHT,
	OVER_UP_DOWN,
	OVER_DOWN_UP,
	OVER_LEFT_RIGHT,
	OVER_RIGHT_LEFT
}

enum StateFlags: CInt (inline CInt bit) {
	NORMAL = 0,
	ACTIVE = 1,
	PRELIGHT = 2,
	SELECTED = 4,
	INSENSITIVE = 8,
	INCONSISTENT = 16,
	FOCUSED = 32,
	BACKDROP = 64,
	DIR_LTR = 128,
	DIR_RTL = 256,
	LINK = 512,
	VISITED = 1024,
	CHECKED = 2048,
	DROP_ACTIVE = 4096
}


enum StateType {
	NORMAL,
	ACTIVE,
	PRELIGHT,
	SELECTED,
	INSENSITIVE,
	INCONSISTENT,
	FOCUSED
}

struct StatusIcon {
	inline Object parent_instance;
	StatusIconPrivate* priv;
}

fn StatusIcon* StatusIcon.new () @operator (construct) @extern ("gtk_status_icon_new");
fn StatusIcon* StatusIcon.new_from_file (ZString* filename) @operator (construct) @extern ("gtk_status_icon_new_from_file");
fn StatusIcon* StatusIcon.new_from_gicon ([not parsed]* icon) @operator (construct) @extern ("gtk_status_icon_new_from_gicon");
fn StatusIcon* StatusIcon.new_from_icon_name (ZString icon_name) @operator (construct) @extern ("gtk_status_icon_new_from_icon_name");
fn StatusIcon* StatusIcon.new_from_pixbuf (Pixbuf* pixbuf) @operator (construct) @extern ("gtk_status_icon_new_from_pixbuf");
fn StatusIcon* StatusIcon.new_from_stock (ZString stock_id) @operator (construct) @extern ("gtk_status_icon_new_from_stock");
fn void StatusIcon.position_menu (StatusIcon* self, Menu* menu, int x, int y, CInt push_in, StatusIcon* user_data) @extern ("gtk_status_icon_position_menu");
fn CInt StatusIcon.get_geometry (StatusIcon* self, gdk::Screen* screen, gdk::Rectangle area, Orientation orientation) @extern ("gtk_status_icon_get_geometry");
fn [not parsed]* StatusIcon.get_gicon (StatusIcon* self) @extern ("gtk_status_icon_get_gicon");
fn CInt StatusIcon.get_has_tooltip (StatusIcon* self) @extern ("gtk_status_icon_get_has_tooltip");
fn ZString StatusIcon.get_icon_name (StatusIcon* self) @extern ("gtk_status_icon_get_icon_name");
fn Pixbuf* StatusIcon.get_pixbuf (StatusIcon* self) @extern ("gtk_status_icon_get_pixbuf");
fn gdk::Screen* StatusIcon.get_screen (StatusIcon* self) @extern ("gtk_status_icon_get_screen");
fn int StatusIcon.get_size (StatusIcon* self) @extern ("gtk_status_icon_get_size");
fn ZString StatusIcon.get_stock (StatusIcon* self) @extern ("gtk_status_icon_get_stock");
fn ImageType StatusIcon.get_storage_type (StatusIcon* self) @extern ("gtk_status_icon_get_storage_type");
fn ZString StatusIcon.get_title (StatusIcon* self) @extern ("gtk_status_icon_get_title");
fn ZString StatusIcon.get_tooltip_markup (StatusIcon* self) @extern ("gtk_status_icon_get_tooltip_markup");
fn ZString StatusIcon.get_tooltip_text (StatusIcon* self) @extern ("gtk_status_icon_get_tooltip_text");
fn CInt StatusIcon.get_visible (StatusIcon* self) @extern ("gtk_status_icon_get_visible");
fn uint StatusIcon.get_x11_window_id (StatusIcon* self) @extern ("gtk_status_icon_get_x11_window_id");
fn CInt StatusIcon.is_embedded (StatusIcon* self) @extern ("gtk_status_icon_is_embedded");
fn void StatusIcon.set_from_file (StatusIcon* self, ZString* filename) @extern ("gtk_status_icon_set_from_file");
fn void StatusIcon.set_from_gicon (StatusIcon* self, [not parsed]* icon) @extern ("gtk_status_icon_set_from_gicon");
fn void StatusIcon.set_from_icon_name (StatusIcon* self, ZString icon_name) @extern ("gtk_status_icon_set_from_icon_name");
fn void StatusIcon.set_from_pixbuf (StatusIcon* self, Pixbuf* pixbuf) @extern ("gtk_status_icon_set_from_pixbuf");
fn void StatusIcon.set_from_stock (StatusIcon* self, ZString stock_id) @extern ("gtk_status_icon_set_from_stock");
fn void StatusIcon.set_has_tooltip (StatusIcon* self, CInt has_tooltip) @extern ("gtk_status_icon_set_has_tooltip");
fn void StatusIcon.set_name (StatusIcon* self, ZString name) @extern ("gtk_status_icon_set_name");
fn void StatusIcon.set_screen (StatusIcon* self, gdk::Screen* screen) @extern ("gtk_status_icon_set_screen");
fn void StatusIcon.set_title (StatusIcon* self, ZString title) @extern ("gtk_status_icon_set_title");
fn void StatusIcon.set_tooltip_markup (StatusIcon* self, ZString markup) @extern ("gtk_status_icon_set_tooltip_markup");
fn void StatusIcon.set_tooltip_text (StatusIcon* self, ZString text) @extern ("gtk_status_icon_set_tooltip_text");
fn void StatusIcon.set_visible (StatusIcon* self, CInt visible) @extern ("gtk_status_icon_set_visible");
	15 properties
	7 signals
	7 virtuals
def StatusIconPrivate = void;

struct Statusbar (ImplementorIface, Buildable, Orientable) {
	inline Box parent_widget;
	StatusbarPrivate* priv;
}

fn Widget* Statusbar.new () @operator (construct) @extern ("gtk_statusbar_new");
fn uint Statusbar.get_context_id (Statusbar* self, ZString context_description) @extern ("gtk_statusbar_get_context_id");
fn Box* Statusbar.get_message_area (Statusbar* self) @extern ("gtk_statusbar_get_message_area");
fn void Statusbar.pop (Statusbar* self, uint context_id) @extern ("gtk_statusbar_pop");
fn uint Statusbar.push (Statusbar* self, uint context_id, ZString text) @extern ("gtk_statusbar_push");
fn void Statusbar.remove (Statusbar* self, uint context_id, uint message_id) @extern ("gtk_statusbar_remove");
fn void Statusbar.remove_all (Statusbar* self, uint context_id) @extern ("gtk_statusbar_remove_all");
	2 signals
	2 virtuals
def StatusbarAccessible = void;
def StatusbarAccessiblePrivate = void;

def StatusbarPrivate = void;

struct StockItem {
	ZString stock_id;
	ZString label;
	gdk::ModifierType modifier;
	uint keyval;
	ZString translation_domain;
}

fn void StockItem.free (StockItem* self) @extern ("gtk_stock_item_free");
struct Style {
	inline Object parent_instance;
	char[5] fg;
	char[5] bg;
	char[5] light;
	char[5] dark;
	char[5] mid;
	char[5] text;
	char[5] base;
	char[5] text_aa;
	gdk::Color black;
	gdk::Color white;
	FontDescription* font_desc;
	int xthickness;
	int ythickness;
	char[5] background;
	int attach_count;
	gdk::Visual* visual;
	FontDescription* private_font_desc;
	RcStyle* rc_style;
	SList* styles;
	Array<<MISSING>>** property_cache;
	SList* icon_factories;
}

fn Style* Style.new () @operator (construct) @extern ("gtk_style_new");
fn void Style.apply_default_background (Style* self, Context* cr, gdk::Window* window, StateType state_type, int x, int y, int width, int height) @extern ("gtk_style_apply_default_background");
fn Style* Style.copy (Style* self) @extern ("gtk_style_copy");
fn void Style.detach (Style* self) @extern ("gtk_style_detach");
fn void Style.get_style_property (Style* self, GType widget_type, ZString property_name, Value value) @extern ("gtk_style_get_style_property");
fn CInt Style.has_context (Style* self) @extern ("gtk_style_has_context");
fn CInt Style.lookup_color (Style* self, ZString color_name, gdk::Color color) @extern ("gtk_style_lookup_color");
fn IconSet* Style.lookup_icon_set (Style* self, ZString stock_id) @extern ("gtk_style_lookup_icon_set");
fn Pixbuf* Style.render_icon (Style* self, IconSource* source, TextDirection direction, StateType state, int size, Widget* widget, ZString detail) @extern ("gtk_style_render_icon");
fn void Style.set_background (Style* self, gdk::Window* window, StateType state_type) @extern ("gtk_style_set_background");
	1 properties
	2 signals
	26 virtuals
struct StyleContext {
	inline Object parent_object;
	StyleContextPrivate* priv;
}

fn StyleContext* StyleContext.new () @operator (construct) @extern ("gtk_style_context_new");
fn void StyleContext.add_provider_for_screen (StyleContext* self, gdk::Screen* screen, [not parsed]* provider, uint priority) @extern ("gtk_style_context_add_provider_for_screen");
fn void StyleContext.remove_provider_for_screen (StyleContext* self, gdk::Screen* screen, [not parsed]* provider) @extern ("gtk_style_context_remove_provider_for_screen");
fn void StyleContext.reset_widgets (StyleContext* self, gdk::Screen* screen) @extern ("gtk_style_context_reset_widgets");
fn void StyleContext.add_class (StyleContext* self, ZString class_name) @extern ("gtk_style_context_add_class");
fn void StyleContext.add_provider (StyleContext* self, [not parsed]* provider, uint priority) @extern ("gtk_style_context_add_provider");
fn void StyleContext.add_region (StyleContext* self, ZString region_name, RegionFlags flags) @extern ("gtk_style_context_add_region");
fn void StyleContext.cancel_animations (StyleContext* self, void* region_id) @extern ("gtk_style_context_cancel_animations");
fn void StyleContext.get_background_color (StyleContext* self, StateFlags state, gdk::RGBA color) @extern ("gtk_style_context_get_background_color");
fn void StyleContext.get_border (StyleContext* self, StateFlags state, Border border) @extern ("gtk_style_context_get_border");
fn void StyleContext.get_border_color (StyleContext* self, StateFlags state, gdk::RGBA color) @extern ("gtk_style_context_get_border_color");
fn void StyleContext.get_color (StyleContext* self, StateFlags state, gdk::RGBA color) @extern ("gtk_style_context_get_color");
fn TextDirection StyleContext.get_direction (StyleContext* self) @extern ("gtk_style_context_get_direction");
fn FontDescription* StyleContext.get_font (StyleContext* self, StateFlags state) @extern ("gtk_style_context_get_font");
fn gdk::FrameClock* StyleContext.get_frame_clock (StyleContext* self) @extern ("gtk_style_context_get_frame_clock");
fn JunctionSides StyleContext.get_junction_sides (StyleContext* self) @extern ("gtk_style_context_get_junction_sides");
fn void StyleContext.get_margin (StyleContext* self, StateFlags state, Border margin) @extern ("gtk_style_context_get_margin");
fn void StyleContext.get_padding (StyleContext* self, StateFlags state, Border padding) @extern ("gtk_style_context_get_padding");
fn StyleContext* StyleContext.get_parent (StyleContext* self) @extern ("gtk_style_context_get_parent");
fn WidgetPath* StyleContext.get_path (StyleContext* self) @extern ("gtk_style_context_get_path");
fn void StyleContext.get_property (StyleContext* self, ZString property, StateFlags state, Value value) @extern ("gtk_style_context_get_property");
fn int StyleContext.get_scale (StyleContext* self) @extern ("gtk_style_context_get_scale");
fn gdk::Screen* StyleContext.get_screen (StyleContext* self) @extern ("gtk_style_context_get_screen");
fn CssSection* StyleContext.get_section (StyleContext* self, ZString property) @extern ("gtk_style_context_get_section");
fn StateFlags StyleContext.get_state (StyleContext* self) @extern ("gtk_style_context_get_state");
fn void StyleContext.get_style_property (StyleContext* self, ZString property_name, Value* value) @extern ("gtk_style_context_get_style_property");
fn CInt StyleContext.has_class (StyleContext* self, ZString class_name) @extern ("gtk_style_context_has_class");
fn CInt StyleContext.has_region (StyleContext* self, ZString region_name, RegionFlags flags_return) @extern ("gtk_style_context_has_region");
fn void StyleContext.invalidate (StyleContext* self) @extern ("gtk_style_context_invalidate");
fn List* StyleContext.list_classes (StyleContext* self) @extern ("gtk_style_context_list_classes");
fn List* StyleContext.list_regions (StyleContext* self) @extern ("gtk_style_context_list_regions");
fn CInt StyleContext.lookup_color (StyleContext* self, ZString color_name, gdk::RGBA color) @extern ("gtk_style_context_lookup_color");
fn IconSet* StyleContext.lookup_icon_set (StyleContext* self, ZString stock_id) @extern ("gtk_style_context_lookup_icon_set");
fn void StyleContext.notify_state_change (StyleContext* self, gdk::Window* window, void* region_id, StateType state, CInt state_value) @extern ("gtk_style_context_notify_state_change");
fn void StyleContext.pop_animatable_region (StyleContext* self) @extern ("gtk_style_context_pop_animatable_region");
fn void StyleContext.push_animatable_region (StyleContext* self, void* region_id) @extern ("gtk_style_context_push_animatable_region");
fn void StyleContext.remove_class (StyleContext* self, ZString class_name) @extern ("gtk_style_context_remove_class");
fn void StyleContext.remove_provider (StyleContext* self, [not parsed]* provider) @extern ("gtk_style_context_remove_provider");
fn void StyleContext.remove_region (StyleContext* self, ZString region_name) @extern ("gtk_style_context_remove_region");
fn void StyleContext.restore (StyleContext* self) @extern ("gtk_style_context_restore");
fn void StyleContext.save (StyleContext* self) @extern ("gtk_style_context_save");
fn void StyleContext.scroll_animations (StyleContext* self, gdk::Window* window, int dx, int dy) @extern ("gtk_style_context_scroll_animations");
fn void StyleContext.set_background (StyleContext* self, gdk::Window* window) @extern ("gtk_style_context_set_background");
fn void StyleContext.set_direction (StyleContext* self, TextDirection direction) @extern ("gtk_style_context_set_direction");
fn void StyleContext.set_frame_clock (StyleContext* self, gdk::FrameClock* frame_clock) @extern ("gtk_style_context_set_frame_clock");
fn void StyleContext.set_junction_sides (StyleContext* self, JunctionSides sides) @extern ("gtk_style_context_set_junction_sides");
fn void StyleContext.set_parent (StyleContext* self, StyleContext* parent) @extern ("gtk_style_context_set_parent");
fn void StyleContext.set_path (StyleContext* self, WidgetPath* path) @extern ("gtk_style_context_set_path");
fn void StyleContext.set_scale (StyleContext* self, int scale) @extern ("gtk_style_context_set_scale");
fn void StyleContext.set_screen (StyleContext* self, gdk::Screen* screen) @extern ("gtk_style_context_set_screen");
fn void StyleContext.set_state (StyleContext* self, StateFlags flags) @extern ("gtk_style_context_set_state");
fn CInt StyleContext.state_is_running (StyleContext* self, StateType state, double progress) @extern ("gtk_style_context_state_is_running");
fn ZString StyleContext.to_string (StyleContext* self, StyleContextPrintFlags flags) @extern ("gtk_style_context_to_string");
	4 properties
	1 signals
	1 virtuals
enum StyleContextPrintFlags: CInt (inline CInt bit) {
	NONE = 0,
	RECURSE = 1,
	SHOW_STYLE = 2
}

def StyleContextPrivate = void;

struct StyleProperties (StyleProvider) {
	inline Object parent_object;
	StylePropertiesPrivate* priv;
}

fn StyleProperties* StyleProperties.new () @operator (construct) @extern ("gtk_style_properties_new");
fn void StyleProperties.clear (StyleProperties* self) @extern ("gtk_style_properties_clear");
fn CInt StyleProperties.get_property (StyleProperties* self, ZString property, StateFlags state, Value value) @extern ("gtk_style_properties_get_property");
fn SymbolicColor* StyleProperties.lookup_color (StyleProperties* self, ZString name) @extern ("gtk_style_properties_lookup_color");
fn void StyleProperties.map_color (StyleProperties* self, ZString name, SymbolicColor* color) @extern ("gtk_style_properties_map_color");
fn void StyleProperties.merge (StyleProperties* self, StyleProperties* props_to_merge, CInt replace) @extern ("gtk_style_properties_merge");
fn void StyleProperties.set_property (StyleProperties* self, ZString property, StateFlags state, Value* value) @extern ("gtk_style_properties_set_property");
fn void StyleProperties.unset_property (StyleProperties* self, ZString property, StateFlags state) @extern ("gtk_style_properties_unset_property");
def StylePropertiesPrivate = void;

def StylePropertyParser = fn CInt (ZString string, Value* value) @export;
StyleProvider (Interface)
struct Switch (ImplementorIface, Actionable, Activatable, Buildable) {
	inline Widget parent_instance;
	SwitchPrivate* priv;
}

fn Widget* Switch.new () @operator (construct) @extern ("gtk_switch_new");
fn CInt Switch.get_active (Switch* self) @extern ("gtk_switch_get_active");
fn CInt Switch.get_state (Switch* self) @extern ("gtk_switch_get_state");
fn void Switch.set_active (Switch* self, CInt is_active) @extern ("gtk_switch_set_active");
fn void Switch.set_state (Switch* self, CInt state) @extern ("gtk_switch_set_state");
	2 properties
	2 signals
	2 virtuals
def SwitchAccessible = void;
def SwitchAccessiblePrivate = void;

def SwitchPrivate = void;

struct SymbolicColor {
	void* unused;
}

fn SymbolicColor* SymbolicColor.new_alpha (SymbolicColor* color, double factor) @operator (construct) @extern ("gtk_symbolic_color_new_alpha");
fn SymbolicColor* SymbolicColor.new_literal (gdk::RGBA* color) @operator (construct) @extern ("gtk_symbolic_color_new_literal");
fn SymbolicColor* SymbolicColor.new_mix (SymbolicColor* color1, SymbolicColor* color2, double factor) @operator (construct) @extern ("gtk_symbolic_color_new_mix");
fn SymbolicColor* SymbolicColor.new_name (ZString name) @operator (construct) @extern ("gtk_symbolic_color_new_name");
fn SymbolicColor* SymbolicColor.new_shade (SymbolicColor* color, double factor) @operator (construct) @extern ("gtk_symbolic_color_new_shade");
fn SymbolicColor* SymbolicColor.new_win32 (ZString theme_class, int id) @operator (construct) @extern ("gtk_symbolic_color_new_win32");
fn SymbolicColor* SymbolicColor.ref (SymbolicColor* self) @extern ("gtk_symbolic_color_ref");
fn CInt SymbolicColor.resolve (SymbolicColor* self, StyleProperties* props, gdk::RGBA resolved_color) @extern ("gtk_symbolic_color_resolve");
fn ZString SymbolicColor.to_string (SymbolicColor* self) @extern ("gtk_symbolic_color_to_string");
fn void SymbolicColor.unref (SymbolicColor* self) @extern ("gtk_symbolic_color_unref");
const int TEXT_VIEW_PRIORITY_VALIDATE = 125;
const int TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID = -1;
const int TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID = -2;
struct Table (ImplementorIface, Buildable) {
	inline Container container;
	TablePrivate* priv;
}

fn Widget* Table.new (uint rows, uint columns, CInt homogeneous) @operator (construct) @extern ("gtk_table_new");
fn void Table.attach (Table* self, Widget* child, uint left_attach, uint right_attach, uint top_attach, uint bottom_attach, AttachOptions xoptions, AttachOptions yoptions, uint xpadding, uint ypadding) @extern ("gtk_table_attach");
fn void Table.attach_defaults (Table* self, Widget* widget, uint left_attach, uint right_attach, uint top_attach, uint bottom_attach) @extern ("gtk_table_attach_defaults");
fn uint Table.get_col_spacing (Table* self, uint column) @extern ("gtk_table_get_col_spacing");
fn uint Table.get_default_col_spacing (Table* self) @extern ("gtk_table_get_default_col_spacing");
fn uint Table.get_default_row_spacing (Table* self) @extern ("gtk_table_get_default_row_spacing");
fn CInt Table.get_homogeneous (Table* self) @extern ("gtk_table_get_homogeneous");
fn uint Table.get_row_spacing (Table* self, uint row) @extern ("gtk_table_get_row_spacing");
fn void Table.get_size (Table* self, uint rows, uint columns) @extern ("gtk_table_get_size");
fn void Table.resize (Table* self, uint rows, uint columns) @extern ("gtk_table_resize");
fn void Table.set_col_spacing (Table* self, uint column, uint spacing) @extern ("gtk_table_set_col_spacing");
fn void Table.set_col_spacings (Table* self, uint spacing) @extern ("gtk_table_set_col_spacings");
fn void Table.set_homogeneous (Table* self, CInt homogeneous) @extern ("gtk_table_set_homogeneous");
fn void Table.set_row_spacing (Table* self, uint row, uint spacing) @extern ("gtk_table_set_row_spacing");
fn void Table.set_row_spacings (Table* self, uint spacing) @extern ("gtk_table_set_row_spacings");
	5 properties
struct TableChild {
	Widget* widget;
	ushort left_attach;
	ushort right_attach;
	ushort top_attach;
	ushort bottom_attach;
	ushort xpadding;
	ushort ypadding;
	uint xexpand;
	uint yexpand;
	uint xshrink;
	uint yshrink;
	uint xfill;
	uint yfill;
}

def TablePrivate = void;

struct TableRowCol {
	ushort requisition;
	ushort allocation;
	ushort spacing;
	uint need_expand;
	uint need_shrink;
	uint expand;
	uint shrink;
	uint empty;
}

struct TargetEntry {
	ZString target;
	uint flags;
	uint info;
}

fn TargetEntry* TargetEntry.new (ZString target, uint flags, uint info) @operator (construct) @extern ("gtk_target_entry_new");
fn TargetEntry* TargetEntry.copy (TargetEntry* self) @extern ("gtk_target_entry_copy");
fn void TargetEntry.free (TargetEntry* self) @extern ("gtk_target_entry_free");
enum TargetFlags: CInt (inline CInt bit) {
	SAME_APP = 1,
	SAME_WIDGET = 2,
	OTHER_APP = 4,
	OTHER_WIDGET = 8
}

struct TargetList {
	void* unused;
}

fn TargetList* TargetList.new (char** targets, uint ntargets) @operator (construct) @extern ("gtk_target_list_new");
fn void TargetList.add (TargetList* self, gdk::Atom* target, uint flags, uint info) @extern ("gtk_target_list_add");
fn void TargetList.add_image_targets (TargetList* self, uint info, CInt writable) @extern ("gtk_target_list_add_image_targets");
fn void TargetList.add_rich_text_targets (TargetList* self, uint info, CInt deserializable, TextBuffer* buffer) @extern ("gtk_target_list_add_rich_text_targets");
fn void TargetList.add_table (TargetList* self, char** targets, uint ntargets) @extern ("gtk_target_list_add_table");
fn void TargetList.add_text_targets (TargetList* self, uint info) @extern ("gtk_target_list_add_text_targets");
fn void TargetList.add_uri_targets (TargetList* self, uint info) @extern ("gtk_target_list_add_uri_targets");
fn CInt TargetList.find (TargetList* self, gdk::Atom* target, uint info) @extern ("gtk_target_list_find");
fn TargetList* TargetList.ref (TargetList* self) @extern ("gtk_target_list_ref");
fn void TargetList.remove (TargetList* self, gdk::Atom* target) @extern ("gtk_target_list_remove");
fn void TargetList.unref (TargetList* self) @extern ("gtk_target_list_unref");
struct TargetPair {
	gdk::Atom* target;
	uint flags;
	uint info;
}

struct TearoffMenuItem (ImplementorIface, Actionable, Activatable, Buildable) {
	inline MenuItem menu_item;
	TearoffMenuItemPrivate* priv;
}

fn Widget* TearoffMenuItem.new () @operator (construct) @extern ("gtk_tearoff_menu_item_new");
def TearoffMenuItemPrivate = void;

struct TextAppearance {
	gdk::Color bg_color;
	gdk::Color fg_color;
	int rise;
	uint underline;
	uint strikethrough;
	uint draw_bg;
	uint inside_selection;
	uint is_text;
}

struct TextAttributes {
	uint refcount;
	TextAppearance appearance;
	Justification justification;
	TextDirection direction;
	FontDescription* font;
	double font_scale;
	int left_margin;
	int right_margin;
	int indent;
	int pixels_above_lines;
	int pixels_below_lines;
	int pixels_inside_wrap;
	TabArray* tabs;
	WrapMode wrap_mode;
	Language* language;
	gdk::Color* pg_bg_color;
	uint invisible;
	uint bg_full_height;
	uint editable;
	uint no_fallback;
	gdk::RGBA* pg_bg_rgba;
	int letter_spacing;
}

fn TextAttributes* TextAttributes.new () @operator (construct) @extern ("gtk_text_attributes_new");
fn TextAttributes* TextAttributes.copy (TextAttributes* self) @extern ("gtk_text_attributes_copy");
fn void TextAttributes.copy_values (TextAttributes* self, TextAttributes* dest) @extern ("gtk_text_attributes_copy_values");
fn TextAttributes* TextAttributes.ref (TextAttributes* self) @extern ("gtk_text_attributes_ref");
fn void TextAttributes.unref (TextAttributes* self) @extern ("gtk_text_attributes_unref");
def TextBTree = void;

struct TextBuffer {
	inline Object parent_instance;
	TextBufferPrivate* priv;
}

fn TextBuffer* TextBuffer.new (TextTagTable* table) @operator (construct) @extern ("gtk_text_buffer_new");
fn void TextBuffer.add_mark (TextBuffer* self, TextMark* mark, TextIter* where) @extern ("gtk_text_buffer_add_mark");
fn void TextBuffer.add_selection_clipboard (TextBuffer* self, Clipboard* clipboard) @extern ("gtk_text_buffer_add_selection_clipboard");
fn void TextBuffer.apply_tag (TextBuffer* self, TextTag* tag, TextIter* start, TextIter* end) @extern ("gtk_text_buffer_apply_tag");
fn void TextBuffer.apply_tag_by_name (TextBuffer* self, ZString name, TextIter* start, TextIter* end) @extern ("gtk_text_buffer_apply_tag_by_name");
fn CInt TextBuffer.backspace (TextBuffer* self, TextIter* iter, CInt interactive, CInt default_editable) @extern ("gtk_text_buffer_backspace");
fn void TextBuffer.begin_user_action (TextBuffer* self) @extern ("gtk_text_buffer_begin_user_action");
fn void TextBuffer.copy_clipboard (TextBuffer* self, Clipboard* clipboard) @extern ("gtk_text_buffer_copy_clipboard");
fn TextChildAnchor* TextBuffer.create_child_anchor (TextBuffer* self, TextIter* iter) @extern ("gtk_text_buffer_create_child_anchor");
fn TextMark* TextBuffer.create_mark (TextBuffer* self, ZString mark_name, TextIter* where, CInt left_gravity) @extern ("gtk_text_buffer_create_mark");
fn void TextBuffer.cut_clipboard (TextBuffer* self, Clipboard* clipboard, CInt default_editable) @extern ("gtk_text_buffer_cut_clipboard");
fn void TextBuffer.delete (TextBuffer* self, TextIter* start, TextIter* end) @extern ("gtk_text_buffer_delete");
fn CInt TextBuffer.delete_interactive (TextBuffer* self, TextIter* start_iter, TextIter* end_iter, CInt default_editable) @extern ("gtk_text_buffer_delete_interactive");
fn void TextBuffer.delete_mark (TextBuffer* self, TextMark* mark) @extern ("gtk_text_buffer_delete_mark");
fn void TextBuffer.delete_mark_by_name (TextBuffer* self, ZString name) @extern ("gtk_text_buffer_delete_mark_by_name");
fn CInt TextBuffer.delete_selection (TextBuffer* self, CInt interactive, CInt default_editable) @extern ("gtk_text_buffer_delete_selection");
fn CInt TextBuffer.deserialize (TextBuffer* self, TextBuffer* content_buffer, gdk::Atom* format, TextIter* iter, char** data, ulong length) @extern ("gtk_text_buffer_deserialize");
fn CInt TextBuffer.deserialize_get_can_create_tags (TextBuffer* self, gdk::Atom* format) @extern ("gtk_text_buffer_deserialize_get_can_create_tags");
fn void TextBuffer.deserialize_set_can_create_tags (TextBuffer* self, gdk::Atom* format, CInt can_create_tags) @extern ("gtk_text_buffer_deserialize_set_can_create_tags");
fn void TextBuffer.end_user_action (TextBuffer* self) @extern ("gtk_text_buffer_end_user_action");
fn void TextBuffer.get_bounds (TextBuffer* self, TextIter start, TextIter end) @extern ("gtk_text_buffer_get_bounds");
fn int TextBuffer.get_char_count (TextBuffer* self) @extern ("gtk_text_buffer_get_char_count");
fn TargetList* TextBuffer.get_copy_target_list (TextBuffer* self) @extern ("gtk_text_buffer_get_copy_target_list");
fn char** TextBuffer.get_deserialize_formats (TextBuffer* self, int n_formats) @extern ("gtk_text_buffer_get_deserialize_formats");
fn void TextBuffer.get_end_iter (TextBuffer* self, TextIter iter) @extern ("gtk_text_buffer_get_end_iter");
fn CInt TextBuffer.get_has_selection (TextBuffer* self) @extern ("gtk_text_buffer_get_has_selection");
fn TextMark* TextBuffer.get_insert (TextBuffer* self) @extern ("gtk_text_buffer_get_insert");
fn void TextBuffer.get_iter_at_child_anchor (TextBuffer* self, TextIter iter, TextChildAnchor* anchor) @extern ("gtk_text_buffer_get_iter_at_child_anchor");
fn void TextBuffer.get_iter_at_line (TextBuffer* self, TextIter iter, int line_number) @extern ("gtk_text_buffer_get_iter_at_line");
fn void TextBuffer.get_iter_at_line_index (TextBuffer* self, TextIter iter, int line_number, int byte_index) @extern ("gtk_text_buffer_get_iter_at_line_index");
fn void TextBuffer.get_iter_at_line_offset (TextBuffer* self, TextIter iter, int line_number, int char_offset) @extern ("gtk_text_buffer_get_iter_at_line_offset");
fn void TextBuffer.get_iter_at_mark (TextBuffer* self, TextIter iter, TextMark* mark) @extern ("gtk_text_buffer_get_iter_at_mark");
fn void TextBuffer.get_iter_at_offset (TextBuffer* self, TextIter iter, int char_offset) @extern ("gtk_text_buffer_get_iter_at_offset");
fn int TextBuffer.get_line_count (TextBuffer* self) @extern ("gtk_text_buffer_get_line_count");
fn TextMark* TextBuffer.get_mark (TextBuffer* self, ZString name) @extern ("gtk_text_buffer_get_mark");
fn CInt TextBuffer.get_modified (TextBuffer* self) @extern ("gtk_text_buffer_get_modified");
fn TargetList* TextBuffer.get_paste_target_list (TextBuffer* self) @extern ("gtk_text_buffer_get_paste_target_list");
fn TextMark* TextBuffer.get_selection_bound (TextBuffer* self) @extern ("gtk_text_buffer_get_selection_bound");
fn CInt TextBuffer.get_selection_bounds (TextBuffer* self, TextIter start, TextIter end) @extern ("gtk_text_buffer_get_selection_bounds");
fn char** TextBuffer.get_serialize_formats (TextBuffer* self, int n_formats) @extern ("gtk_text_buffer_get_serialize_formats");
fn ZString TextBuffer.get_slice (TextBuffer* self, TextIter* start, TextIter* end, CInt include_hidden_chars) @extern ("gtk_text_buffer_get_slice");
fn void TextBuffer.get_start_iter (TextBuffer* self, TextIter iter) @extern ("gtk_text_buffer_get_start_iter");
fn TextTagTable* TextBuffer.get_tag_table (TextBuffer* self) @extern ("gtk_text_buffer_get_tag_table");
fn ZString TextBuffer.get_text (TextBuffer* self, TextIter* start, TextIter* end, CInt include_hidden_chars) @extern ("gtk_text_buffer_get_text");
fn void TextBuffer.insert (TextBuffer* self, TextIter* iter, ZString text, int len) @extern ("gtk_text_buffer_insert");
fn void TextBuffer.insert_at_cursor (TextBuffer* self, ZString text, int len) @extern ("gtk_text_buffer_insert_at_cursor");
fn void TextBuffer.insert_child_anchor (TextBuffer* self, TextIter* iter, TextChildAnchor* anchor) @extern ("gtk_text_buffer_insert_child_anchor");
fn CInt TextBuffer.insert_interactive (TextBuffer* self, TextIter* iter, ZString text, int len, CInt default_editable) @extern ("gtk_text_buffer_insert_interactive");
fn CInt TextBuffer.insert_interactive_at_cursor (TextBuffer* self, ZString text, int len, CInt default_editable) @extern ("gtk_text_buffer_insert_interactive_at_cursor");
fn void TextBuffer.insert_markup (TextBuffer* self, TextIter* iter, ZString markup, int len) @extern ("gtk_text_buffer_insert_markup");
fn void TextBuffer.insert_pixbuf (TextBuffer* self, TextIter* iter, Pixbuf* pixbuf) @extern ("gtk_text_buffer_insert_pixbuf");
fn void TextBuffer.insert_range (TextBuffer* self, TextIter* iter, TextIter* start, TextIter* end) @extern ("gtk_text_buffer_insert_range");
fn CInt TextBuffer.insert_range_interactive (TextBuffer* self, TextIter* iter, TextIter* start, TextIter* end, CInt default_editable) @extern ("gtk_text_buffer_insert_range_interactive");
fn void TextBuffer.move_mark (TextBuffer* self, TextMark* mark, TextIter* where) @extern ("gtk_text_buffer_move_mark");
fn void TextBuffer.move_mark_by_name (TextBuffer* self, ZString name, TextIter* where) @extern ("gtk_text_buffer_move_mark_by_name");
fn void TextBuffer.paste_clipboard (TextBuffer* self, Clipboard* clipboard, TextIter* override_location, CInt default_editable) @extern ("gtk_text_buffer_paste_clipboard");
fn void TextBuffer.place_cursor (TextBuffer* self, TextIter* where) @extern ("gtk_text_buffer_place_cursor");
fn gdk::Atom* TextBuffer.register_deserialize_format (TextBuffer* self, ZString mime_type, TextBufferDeserializeFunc function, void* user_data, DestroyNotify user_data_destroy) @extern ("gtk_text_buffer_register_deserialize_format");
fn gdk::Atom* TextBuffer.register_deserialize_tagset (TextBuffer* self, ZString tagset_name) @extern ("gtk_text_buffer_register_deserialize_tagset");
fn gdk::Atom* TextBuffer.register_serialize_format (TextBuffer* self, ZString mime_type, TextBufferSerializeFunc function, void* user_data, DestroyNotify user_data_destroy) @extern ("gtk_text_buffer_register_serialize_format");
fn gdk::Atom* TextBuffer.register_serialize_tagset (TextBuffer* self, ZString tagset_name) @extern ("gtk_text_buffer_register_serialize_tagset");
fn void TextBuffer.remove_all_tags (TextBuffer* self, TextIter* start, TextIter* end) @extern ("gtk_text_buffer_remove_all_tags");
fn void TextBuffer.remove_selection_clipboard (TextBuffer* self, Clipboard* clipboard) @extern ("gtk_text_buffer_remove_selection_clipboard");
fn void TextBuffer.remove_tag (TextBuffer* self, TextTag* tag, TextIter* start, TextIter* end) @extern ("gtk_text_buffer_remove_tag");
fn void TextBuffer.remove_tag_by_name (TextBuffer* self, ZString name, TextIter* start, TextIter* end) @extern ("gtk_text_buffer_remove_tag_by_name");
fn void TextBuffer.select_range (TextBuffer* self, TextIter* ins, TextIter* bound) @extern ("gtk_text_buffer_select_range");
fn char** TextBuffer.serialize (TextBuffer* self, TextBuffer* content_buffer, gdk::Atom* format, TextIter* start, TextIter* end, ulong length) @extern ("gtk_text_buffer_serialize");
fn void TextBuffer.set_modified (TextBuffer* self, CInt setting) @extern ("gtk_text_buffer_set_modified");
fn void TextBuffer.set_text (TextBuffer* self, ZString text, int len) @extern ("gtk_text_buffer_set_text");
fn void TextBuffer.unregister_deserialize_format (TextBuffer* self, gdk::Atom* format) @extern ("gtk_text_buffer_unregister_deserialize_format");
fn void TextBuffer.unregister_serialize_format (TextBuffer* self, gdk::Atom* format) @extern ("gtk_text_buffer_unregister_serialize_format");
	6 properties
	13 signals
	13 virtuals
def TextBufferDeserializeFunc = fn CInt (TextBuffer* register_buffer, TextBuffer* content_buffer, TextIter* iter, char** data, ulong length, CInt create_tags, void* user_data) @export;
def TextBufferPrivate = void;

def TextBufferSerializeFunc = fn char** (TextBuffer* register_buffer, TextBuffer* content_buffer, TextIter* start, TextIter* end, ulong length, void* user_data) @export;

enum TextBufferTargetInfo: CInt (inline CInt value) {
	BUFFER_CONTENTS = -1,
	RICH_TEXT = -2,
	TEXT = -3
}

def TextCellAccessible = void;
def TextCellAccessiblePrivate = void;

def TextCharPredicate = fn CInt (WString ch, void* user_data) @export;
struct TextChildAnchor {
	inline Object parent_instance;
	void* segment;
}

fn TextChildAnchor* TextChildAnchor.new () @operator (construct) @extern ("gtk_text_child_anchor_new");
fn CInt TextChildAnchor.get_deleted (TextChildAnchor* self) @extern ("gtk_text_child_anchor_get_deleted");
fn List* TextChildAnchor.get_widgets (TextChildAnchor* self) @extern ("gtk_text_child_anchor_get_widgets");

enum TextDirection {
	NONE,
	LTR,
	RTL
}


enum TextExtendSelection {
	WORD,
	LINE
}

struct TextIter {
	void* dummy1;
	void* dummy2;
	int dummy3;
	int dummy4;
	int dummy5;
	int dummy6;
	int dummy7;
	int dummy8;
	void* dummy9;
	void* dummy10;
	int dummy11;
	int dummy12;
	int dummy13;
	void* dummy14;
}

fn void TextIter.assign (TextIter* self, TextIter* other) @extern ("gtk_text_iter_assign");
fn CInt TextIter.backward_char (TextIter* self) @extern ("gtk_text_iter_backward_char");
fn CInt TextIter.backward_chars (TextIter* self, int count) @extern ("gtk_text_iter_backward_chars");
fn CInt TextIter.backward_cursor_position (TextIter* self) @extern ("gtk_text_iter_backward_cursor_position");
fn CInt TextIter.backward_cursor_positions (TextIter* self, int count) @extern ("gtk_text_iter_backward_cursor_positions");
fn CInt TextIter.backward_find_char (TextIter* self, TextCharPredicate pred, void* user_data, TextIter* limit) @extern ("gtk_text_iter_backward_find_char");
fn CInt TextIter.backward_line (TextIter* self) @extern ("gtk_text_iter_backward_line");
fn CInt TextIter.backward_lines (TextIter* self, int count) @extern ("gtk_text_iter_backward_lines");
fn CInt TextIter.backward_search (TextIter* self, ZString str, TextSearchFlags flags, TextIter match_start, TextIter match_end, TextIter* limit) @extern ("gtk_text_iter_backward_search");
fn CInt TextIter.backward_sentence_start (TextIter* self) @extern ("gtk_text_iter_backward_sentence_start");
fn CInt TextIter.backward_sentence_starts (TextIter* self, int count) @extern ("gtk_text_iter_backward_sentence_starts");
fn CInt TextIter.backward_to_tag_toggle (TextIter* self, TextTag* tag) @extern ("gtk_text_iter_backward_to_tag_toggle");
fn CInt TextIter.backward_visible_cursor_position (TextIter* self) @extern ("gtk_text_iter_backward_visible_cursor_position");
fn CInt TextIter.backward_visible_cursor_positions (TextIter* self, int count) @extern ("gtk_text_iter_backward_visible_cursor_positions");
fn CInt TextIter.backward_visible_line (TextIter* self) @extern ("gtk_text_iter_backward_visible_line");
fn CInt TextIter.backward_visible_lines (TextIter* self, int count) @extern ("gtk_text_iter_backward_visible_lines");
fn CInt TextIter.backward_visible_word_start (TextIter* self) @extern ("gtk_text_iter_backward_visible_word_start");
fn CInt TextIter.backward_visible_word_starts (TextIter* self, int count) @extern ("gtk_text_iter_backward_visible_word_starts");
fn CInt TextIter.backward_word_start (TextIter* self) @extern ("gtk_text_iter_backward_word_start");
fn CInt TextIter.backward_word_starts (TextIter* self, int count) @extern ("gtk_text_iter_backward_word_starts");
fn CInt TextIter.begins_tag (TextIter* self, TextTag* tag) @extern ("gtk_text_iter_begins_tag");
fn CInt TextIter.can_insert (TextIter* self, CInt default_editability) @extern ("gtk_text_iter_can_insert");
fn int TextIter.compare (TextIter* self, TextIter* rhs) @extern ("gtk_text_iter_compare");
fn TextIter* TextIter.copy (TextIter* self) @extern ("gtk_text_iter_copy");
fn CInt TextIter.editable (TextIter* self, CInt default_setting) @extern ("gtk_text_iter_editable");
fn CInt TextIter.ends_line (TextIter* self) @extern ("gtk_text_iter_ends_line");
fn CInt TextIter.ends_sentence (TextIter* self) @extern ("gtk_text_iter_ends_sentence");
fn CInt TextIter.ends_tag (TextIter* self, TextTag* tag) @extern ("gtk_text_iter_ends_tag");
fn CInt TextIter.ends_word (TextIter* self) @extern ("gtk_text_iter_ends_word");
fn CInt TextIter.equal (TextIter* self, TextIter* rhs) @extern ("gtk_text_iter_equal");
fn CInt TextIter.forward_char (TextIter* self) @extern ("gtk_text_iter_forward_char");
fn CInt TextIter.forward_chars (TextIter* self, int count) @extern ("gtk_text_iter_forward_chars");
fn CInt TextIter.forward_cursor_position (TextIter* self) @extern ("gtk_text_iter_forward_cursor_position");
fn CInt TextIter.forward_cursor_positions (TextIter* self, int count) @extern ("gtk_text_iter_forward_cursor_positions");
fn CInt TextIter.forward_find_char (TextIter* self, TextCharPredicate pred, void* user_data, TextIter* limit) @extern ("gtk_text_iter_forward_find_char");
fn CInt TextIter.forward_line (TextIter* self) @extern ("gtk_text_iter_forward_line");
fn CInt TextIter.forward_lines (TextIter* self, int count) @extern ("gtk_text_iter_forward_lines");
fn CInt TextIter.forward_search (TextIter* self, ZString str, TextSearchFlags flags, TextIter match_start, TextIter match_end, TextIter* limit) @extern ("gtk_text_iter_forward_search");
fn CInt TextIter.forward_sentence_end (TextIter* self) @extern ("gtk_text_iter_forward_sentence_end");
fn CInt TextIter.forward_sentence_ends (TextIter* self, int count) @extern ("gtk_text_iter_forward_sentence_ends");
fn void TextIter.forward_to_end (TextIter* self) @extern ("gtk_text_iter_forward_to_end");
fn CInt TextIter.forward_to_line_end (TextIter* self) @extern ("gtk_text_iter_forward_to_line_end");
fn CInt TextIter.forward_to_tag_toggle (TextIter* self, TextTag* tag) @extern ("gtk_text_iter_forward_to_tag_toggle");
fn CInt TextIter.forward_visible_cursor_position (TextIter* self) @extern ("gtk_text_iter_forward_visible_cursor_position");
fn CInt TextIter.forward_visible_cursor_positions (TextIter* self, int count) @extern ("gtk_text_iter_forward_visible_cursor_positions");
fn CInt TextIter.forward_visible_line (TextIter* self) @extern ("gtk_text_iter_forward_visible_line");
fn CInt TextIter.forward_visible_lines (TextIter* self, int count) @extern ("gtk_text_iter_forward_visible_lines");
fn CInt TextIter.forward_visible_word_end (TextIter* self) @extern ("gtk_text_iter_forward_visible_word_end");
fn CInt TextIter.forward_visible_word_ends (TextIter* self, int count) @extern ("gtk_text_iter_forward_visible_word_ends");
fn CInt TextIter.forward_word_end (TextIter* self) @extern ("gtk_text_iter_forward_word_end");
fn CInt TextIter.forward_word_ends (TextIter* self, int count) @extern ("gtk_text_iter_forward_word_ends");
fn void TextIter.free (TextIter* self) @extern ("gtk_text_iter_free");
fn CInt TextIter.get_attributes (TextIter* self, TextAttributes values) @extern ("gtk_text_iter_get_attributes");
fn TextBuffer* TextIter.get_buffer (TextIter* self) @extern ("gtk_text_iter_get_buffer");
fn int TextIter.get_bytes_in_line (TextIter* self) @extern ("gtk_text_iter_get_bytes_in_line");
fn WString TextIter.get_char (TextIter* self) @extern ("gtk_text_iter_get_char");
fn int TextIter.get_chars_in_line (TextIter* self) @extern ("gtk_text_iter_get_chars_in_line");
fn TextChildAnchor* TextIter.get_child_anchor (TextIter* self) @extern ("gtk_text_iter_get_child_anchor");
fn Language* TextIter.get_language (TextIter* self) @extern ("gtk_text_iter_get_language");
fn int TextIter.get_line (TextIter* self) @extern ("gtk_text_iter_get_line");
fn int TextIter.get_line_index (TextIter* self) @extern ("gtk_text_iter_get_line_index");
fn int TextIter.get_line_offset (TextIter* self) @extern ("gtk_text_iter_get_line_offset");
fn SList* TextIter.get_marks (TextIter* self) @extern ("gtk_text_iter_get_marks");
fn int TextIter.get_offset (TextIter* self) @extern ("gtk_text_iter_get_offset");
fn Pixbuf* TextIter.get_pixbuf (TextIter* self) @extern ("gtk_text_iter_get_pixbuf");
fn ZString TextIter.get_slice (TextIter* self, TextIter* end) @extern ("gtk_text_iter_get_slice");
fn SList* TextIter.get_tags (TextIter* self) @extern ("gtk_text_iter_get_tags");
fn ZString TextIter.get_text (TextIter* self, TextIter* end) @extern ("gtk_text_iter_get_text");
fn SList* TextIter.get_toggled_tags (TextIter* self, CInt toggled_on) @extern ("gtk_text_iter_get_toggled_tags");
fn int TextIter.get_visible_line_index (TextIter* self) @extern ("gtk_text_iter_get_visible_line_index");
fn int TextIter.get_visible_line_offset (TextIter* self) @extern ("gtk_text_iter_get_visible_line_offset");
fn ZString TextIter.get_visible_slice (TextIter* self, TextIter* end) @extern ("gtk_text_iter_get_visible_slice");
fn ZString TextIter.get_visible_text (TextIter* self, TextIter* end) @extern ("gtk_text_iter_get_visible_text");
fn CInt TextIter.has_tag (TextIter* self, TextTag* tag) @extern ("gtk_text_iter_has_tag");
fn CInt TextIter.in_range (TextIter* self, TextIter* start, TextIter* end) @extern ("gtk_text_iter_in_range");
fn CInt TextIter.inside_sentence (TextIter* self) @extern ("gtk_text_iter_inside_sentence");
fn CInt TextIter.inside_word (TextIter* self) @extern ("gtk_text_iter_inside_word");
fn CInt TextIter.is_cursor_position (TextIter* self) @extern ("gtk_text_iter_is_cursor_position");
fn CInt TextIter.is_end (TextIter* self) @extern ("gtk_text_iter_is_end");
fn CInt TextIter.is_start (TextIter* self) @extern ("gtk_text_iter_is_start");
fn void TextIter.order (TextIter* self, TextIter* second) @extern ("gtk_text_iter_order");
fn void TextIter.set_line (TextIter* self, int line_number) @extern ("gtk_text_iter_set_line");
fn void TextIter.set_line_index (TextIter* self, int byte_on_line) @extern ("gtk_text_iter_set_line_index");
fn void TextIter.set_line_offset (TextIter* self, int char_on_line) @extern ("gtk_text_iter_set_line_offset");
fn void TextIter.set_offset (TextIter* self, int char_offset) @extern ("gtk_text_iter_set_offset");
fn void TextIter.set_visible_line_index (TextIter* self, int byte_on_line) @extern ("gtk_text_iter_set_visible_line_index");
fn void TextIter.set_visible_line_offset (TextIter* self, int char_on_line) @extern ("gtk_text_iter_set_visible_line_offset");
fn CInt TextIter.starts_line (TextIter* self) @extern ("gtk_text_iter_starts_line");
fn CInt TextIter.starts_sentence (TextIter* self) @extern ("gtk_text_iter_starts_sentence");
fn CInt TextIter.starts_tag (TextIter* self, TextTag* tag) @extern ("gtk_text_iter_starts_tag");
fn CInt TextIter.starts_word (TextIter* self) @extern ("gtk_text_iter_starts_word");
fn CInt TextIter.toggles_tag (TextIter* self, TextTag* tag) @extern ("gtk_text_iter_toggles_tag");
struct TextMark {
	inline Object parent_instance;
	void* segment;
}

fn TextMark* TextMark.new (ZString name, CInt left_gravity) @operator (construct) @extern ("gtk_text_mark_new");
fn TextBuffer* TextMark.get_buffer (TextMark* self) @extern ("gtk_text_mark_get_buffer");
fn CInt TextMark.get_deleted (TextMark* self) @extern ("gtk_text_mark_get_deleted");
fn CInt TextMark.get_left_gravity (TextMark* self) @extern ("gtk_text_mark_get_left_gravity");
fn ZString TextMark.get_name (TextMark* self) @extern ("gtk_text_mark_get_name");
fn CInt TextMark.get_visible (TextMark* self) @extern ("gtk_text_mark_get_visible");
fn void TextMark.set_visible (TextMark* self, CInt setting) @extern ("gtk_text_mark_set_visible");
	2 properties
enum TextSearchFlags: CInt (inline CInt bit) {
	VISIBLE_ONLY = 1,
	TEXT_ONLY = 2,
	CASE_INSENSITIVE = 4
}

struct TextTag {
	inline Object parent_instance;
	TextTagPrivate* priv;
}

fn TextTag* TextTag.new (ZString name) @operator (construct) @extern ("gtk_text_tag_new");
fn void TextTag.changed (TextTag* self, CInt size_changed) @extern ("gtk_text_tag_changed");
fn CInt TextTag.event (TextTag* self, Object* event_object, gdk::Event* event, TextIter* iter) @extern ("gtk_text_tag_event");
fn int TextTag.get_priority (TextTag* self) @extern ("gtk_text_tag_get_priority");
fn void TextTag.set_priority (TextTag* self, int priority) @extern ("gtk_text_tag_set_priority");
	74 properties
	1 signals
	1 virtuals
def TextTagPrivate = void;

struct TextTagTable (Buildable) {
	inline Object parent_instance;
	TextTagTablePrivate* priv;
}

fn TextTagTable* TextTagTable.new () @operator (construct) @extern ("gtk_text_tag_table_new");
fn CInt TextTagTable.add (TextTagTable* self, TextTag* tag) @extern ("gtk_text_tag_table_add");
fn void TextTagTable.for_each (TextTagTable* self, TextTagTableForeach func, void* data) @extern ("gtk_text_tag_table_foreach");
fn int TextTagTable.get_size (TextTagTable* self) @extern ("gtk_text_tag_table_get_size");
fn TextTag* TextTagTable.lookup (TextTagTable* self, ZString name) @extern ("gtk_text_tag_table_lookup");
fn void TextTagTable.remove (TextTagTable* self, TextTag* tag) @extern ("gtk_text_tag_table_remove");
	3 signals
	3 virtuals
def TextTagTableForeach = fn void (TextTag* tag, void* data) @export;
def TextTagTablePrivate = void;

struct TextView (ImplementorIface, Buildable, Scrollable) {
	inline Container parent_instance;
	TextViewPrivate* priv;
}

fn Widget* TextView.new () @operator (construct) @extern ("gtk_text_view_new");
fn Widget* TextView.new_with_buffer (TextBuffer* buffer) @operator (construct) @extern ("gtk_text_view_new_with_buffer");
fn void TextView.add_child_at_anchor (TextView* self, Widget* child, TextChildAnchor* anchor) @extern ("gtk_text_view_add_child_at_anchor");
fn void TextView.add_child_in_window (TextView* self, Widget* child, TextWindowType which_window, int xpos, int ypos) @extern ("gtk_text_view_add_child_in_window");
fn CInt TextView.backward_display_line (TextView* self, TextIter* iter) @extern ("gtk_text_view_backward_display_line");
fn CInt TextView.backward_display_line_start (TextView* self, TextIter* iter) @extern ("gtk_text_view_backward_display_line_start");
fn void TextView.buffer_to_window_coords (TextView* self, TextWindowType win, int buffer_x, int buffer_y, int window_x, int window_y) @extern ("gtk_text_view_buffer_to_window_coords");
fn CInt TextView.forward_display_line (TextView* self, TextIter* iter) @extern ("gtk_text_view_forward_display_line");
fn CInt TextView.forward_display_line_end (TextView* self, TextIter* iter) @extern ("gtk_text_view_forward_display_line_end");
fn CInt TextView.get_accepts_tab (TextView* self) @extern ("gtk_text_view_get_accepts_tab");
fn int TextView.get_border_window_size (TextView* self, TextWindowType type) @extern ("gtk_text_view_get_border_window_size");
fn int TextView.get_bottom_margin (TextView* self) @extern ("gtk_text_view_get_bottom_margin");
fn TextBuffer* TextView.get_buffer (TextView* self) @extern ("gtk_text_view_get_buffer");
fn void TextView.get_cursor_locations (TextView* self, TextIter* iter, gdk::Rectangle strong, gdk::Rectangle weak) @extern ("gtk_text_view_get_cursor_locations");
fn CInt TextView.get_cursor_visible (TextView* self) @extern ("gtk_text_view_get_cursor_visible");
fn TextAttributes* TextView.get_default_attributes (TextView* self) @extern ("gtk_text_view_get_default_attributes");
fn CInt TextView.get_editable (TextView* self) @extern ("gtk_text_view_get_editable");
fn Adjustment* TextView.get_hadjustment (TextView* self) @extern ("gtk_text_view_get_hadjustment");
fn int TextView.get_indent (TextView* self) @extern ("gtk_text_view_get_indent");
fn InputHints TextView.get_input_hints (TextView* self) @extern ("gtk_text_view_get_input_hints");
fn InputPurpose TextView.get_input_purpose (TextView* self) @extern ("gtk_text_view_get_input_purpose");
fn CInt TextView.get_iter_at_location (TextView* self, TextIter iter, int x, int y) @extern ("gtk_text_view_get_iter_at_location");
fn CInt TextView.get_iter_at_position (TextView* self, TextIter iter, int trailing, int x, int y) @extern ("gtk_text_view_get_iter_at_position");
fn void TextView.get_iter_location (TextView* self, TextIter* iter, gdk::Rectangle location) @extern ("gtk_text_view_get_iter_location");
fn Justification TextView.get_justification (TextView* self) @extern ("gtk_text_view_get_justification");
fn int TextView.get_left_margin (TextView* self) @extern ("gtk_text_view_get_left_margin");
fn void TextView.get_line_at_y (TextView* self, TextIter target_iter, int y, int line_top) @extern ("gtk_text_view_get_line_at_y");
fn void TextView.get_line_yrange (TextView* self, TextIter* iter, int y, int height) @extern ("gtk_text_view_get_line_yrange");
fn CInt TextView.get_monospace (TextView* self) @extern ("gtk_text_view_get_monospace");
fn CInt TextView.get_overwrite (TextView* self) @extern ("gtk_text_view_get_overwrite");
fn int TextView.get_pixels_above_lines (TextView* self) @extern ("gtk_text_view_get_pixels_above_lines");
fn int TextView.get_pixels_below_lines (TextView* self) @extern ("gtk_text_view_get_pixels_below_lines");
fn int TextView.get_pixels_inside_wrap (TextView* self) @extern ("gtk_text_view_get_pixels_inside_wrap");
fn int TextView.get_right_margin (TextView* self) @extern ("gtk_text_view_get_right_margin");
fn TabArray* TextView.get_tabs (TextView* self) @extern ("gtk_text_view_get_tabs");
fn int TextView.get_top_margin (TextView* self) @extern ("gtk_text_view_get_top_margin");
fn Adjustment* TextView.get_vadjustment (TextView* self) @extern ("gtk_text_view_get_vadjustment");
fn void TextView.get_visible_rect (TextView* self, gdk::Rectangle visible_rect) @extern ("gtk_text_view_get_visible_rect");
fn gdk::Window* TextView.get_window (TextView* self, TextWindowType win) @extern ("gtk_text_view_get_window");
fn TextWindowType TextView.get_window_type (TextView* self, gdk::Window* window) @extern ("gtk_text_view_get_window_type");
fn WrapMode TextView.get_wrap_mode (TextView* self) @extern ("gtk_text_view_get_wrap_mode");
fn CInt TextView.im_context_filter_keypress (TextView* self, gdk::EventKey* event) @extern ("gtk_text_view_im_context_filter_keypress");
fn void TextView.move_child (TextView* self, Widget* child, int xpos, int ypos) @extern ("gtk_text_view_move_child");
fn CInt TextView.move_mark_onscreen (TextView* self, TextMark* mark) @extern ("gtk_text_view_move_mark_onscreen");
fn CInt TextView.move_visually (TextView* self, TextIter* iter, int count) @extern ("gtk_text_view_move_visually");
fn CInt TextView.place_cursor_onscreen (TextView* self) @extern ("gtk_text_view_place_cursor_onscreen");
fn void TextView.reset_cursor_blink (TextView* self) @extern ("gtk_text_view_reset_cursor_blink");
fn void TextView.reset_im_context (TextView* self) @extern ("gtk_text_view_reset_im_context");
fn void TextView.scroll_mark_onscreen (TextView* self, TextMark* mark) @extern ("gtk_text_view_scroll_mark_onscreen");
fn CInt TextView.scroll_to_iter (TextView* self, TextIter* iter, double within_margin, CInt use_align, double xalign, double yalign) @extern ("gtk_text_view_scroll_to_iter");
fn void TextView.scroll_to_mark (TextView* self, TextMark* mark, double within_margin, CInt use_align, double xalign, double yalign) @extern ("gtk_text_view_scroll_to_mark");
fn void TextView.set_accepts_tab (TextView* self, CInt accepts_tab) @extern ("gtk_text_view_set_accepts_tab");
fn void TextView.set_border_window_size (TextView* self, TextWindowType type, int size) @extern ("gtk_text_view_set_border_window_size");
fn void TextView.set_bottom_margin (TextView* self, int bottom_margin) @extern ("gtk_text_view_set_bottom_margin");
fn void TextView.set_buffer (TextView* self, TextBuffer* buffer) @extern ("gtk_text_view_set_buffer");
fn void TextView.set_cursor_visible (TextView* self, CInt setting) @extern ("gtk_text_view_set_cursor_visible");
fn void TextView.set_editable (TextView* self, CInt setting) @extern ("gtk_text_view_set_editable");
fn void TextView.set_indent (TextView* self, int indent) @extern ("gtk_text_view_set_indent");
fn void TextView.set_input_hints (TextView* self, InputHints hints) @extern ("gtk_text_view_set_input_hints");
fn void TextView.set_input_purpose (TextView* self, InputPurpose purpose) @extern ("gtk_text_view_set_input_purpose");
fn void TextView.set_justification (TextView* self, Justification justification) @extern ("gtk_text_view_set_justification");
fn void TextView.set_left_margin (TextView* self, int left_margin) @extern ("gtk_text_view_set_left_margin");
fn void TextView.set_monospace (TextView* self, CInt monospace) @extern ("gtk_text_view_set_monospace");
fn void TextView.set_overwrite (TextView* self, CInt overwrite) @extern ("gtk_text_view_set_overwrite");
fn void TextView.set_pixels_above_lines (TextView* self, int pixels_above_lines) @extern ("gtk_text_view_set_pixels_above_lines");
fn void TextView.set_pixels_below_lines (TextView* self, int pixels_below_lines) @extern ("gtk_text_view_set_pixels_below_lines");
fn void TextView.set_pixels_inside_wrap (TextView* self, int pixels_inside_wrap) @extern ("gtk_text_view_set_pixels_inside_wrap");
fn void TextView.set_right_margin (TextView* self, int right_margin) @extern ("gtk_text_view_set_right_margin");
fn void TextView.set_tabs (TextView* self, TabArray* tabs) @extern ("gtk_text_view_set_tabs");
fn void TextView.set_top_margin (TextView* self, int top_margin) @extern ("gtk_text_view_set_top_margin");
fn void TextView.set_wrap_mode (TextView* self, WrapMode wrap_mode) @extern ("gtk_text_view_set_wrap_mode");
fn CInt TextView.starts_display_line (TextView* self, TextIter* iter) @extern ("gtk_text_view_starts_display_line");
fn void TextView.window_to_buffer_coords (TextView* self, TextWindowType win, int window_x, int window_y, int buffer_x, int buffer_y) @extern ("gtk_text_view_window_to_buffer_coords");
	21 properties
	16 signals
	13 virtuals
def TextViewAccessible = void;
def TextViewAccessiblePrivate = void;


enum TextViewLayer {
	BELOW,
	ABOVE,
	BELOW_TEXT,
	ABOVE_TEXT
}

def TextViewPrivate = void;


enum TextWindowType {
	PRIVATE,
	WIDGET,
	TEXT,
	LEFT,
	RIGHT,
	TOP,
	BOTTOM
}

def ThemeEngine = void;

struct ThemingEngine {
	inline Object parent_object;
	ThemingEnginePrivate* priv;
}

fn ThemingEngine* ThemingEngine.load (ThemingEngine* self, ZString name) @extern ("gtk_theming_engine_load");
fn void ThemingEngine.get_background_color (ThemingEngine* self, StateFlags state, gdk::RGBA color) @extern ("gtk_theming_engine_get_background_color");
fn void ThemingEngine.get_border (ThemingEngine* self, StateFlags state, Border border) @extern ("gtk_theming_engine_get_border");
fn void ThemingEngine.get_border_color (ThemingEngine* self, StateFlags state, gdk::RGBA color) @extern ("gtk_theming_engine_get_border_color");
fn void ThemingEngine.get_color (ThemingEngine* self, StateFlags state, gdk::RGBA color) @extern ("gtk_theming_engine_get_color");
fn TextDirection ThemingEngine.get_direction (ThemingEngine* self) @extern ("gtk_theming_engine_get_direction");
fn FontDescription* ThemingEngine.get_font (ThemingEngine* self, StateFlags state) @extern ("gtk_theming_engine_get_font");
fn JunctionSides ThemingEngine.get_junction_sides (ThemingEngine* self) @extern ("gtk_theming_engine_get_junction_sides");
fn void ThemingEngine.get_margin (ThemingEngine* self, StateFlags state, Border margin) @extern ("gtk_theming_engine_get_margin");
fn void ThemingEngine.get_padding (ThemingEngine* self, StateFlags state, Border padding) @extern ("gtk_theming_engine_get_padding");
fn WidgetPath* ThemingEngine.get_path (ThemingEngine* self) @extern ("gtk_theming_engine_get_path");
fn void ThemingEngine.get_property (ThemingEngine* self, ZString property, StateFlags state, Value value) @extern ("gtk_theming_engine_get_property");
fn gdk::Screen* ThemingEngine.get_screen (ThemingEngine* self) @extern ("gtk_theming_engine_get_screen");
fn StateFlags ThemingEngine.get_state (ThemingEngine* self) @extern ("gtk_theming_engine_get_state");
fn void ThemingEngine.get_style_property (ThemingEngine* self, ZString property_name, Value value) @extern ("gtk_theming_engine_get_style_property");
fn CInt ThemingEngine.has_class (ThemingEngine* self, ZString style_class) @extern ("gtk_theming_engine_has_class");
fn CInt ThemingEngine.has_region (ThemingEngine* self, ZString style_region, RegionFlags flags) @extern ("gtk_theming_engine_has_region");
fn CInt ThemingEngine.lookup_color (ThemingEngine* self, ZString color_name, gdk::RGBA color) @extern ("gtk_theming_engine_lookup_color");
fn CInt ThemingEngine.state_is_running (ThemingEngine* self, StateType state, double progress) @extern ("gtk_theming_engine_state_is_running");
	1 properties
	16 virtuals
def ThemingEnginePrivate = void;

def TickCallback = fn CInt (Widget* widget, gdk::FrameClock* frame_clock, void* user_data) @export;
struct ToggleAction (Buildable) {
	inline Action parent;
	ToggleActionPrivate* private_data;
}

fn ToggleAction* ToggleAction.new (ZString name, ZString label, ZString tooltip, ZString stock_id) @operator (construct) @extern ("gtk_toggle_action_new");
fn CInt ToggleAction.get_active (ToggleAction* self) @extern ("gtk_toggle_action_get_active");
fn CInt ToggleAction.get_draw_as_radio (ToggleAction* self) @extern ("gtk_toggle_action_get_draw_as_radio");
fn void ToggleAction.set_active (ToggleAction* self, CInt is_active) @extern ("gtk_toggle_action_set_active");
fn void ToggleAction.set_draw_as_radio (ToggleAction* self, CInt draw_as_radio) @extern ("gtk_toggle_action_set_draw_as_radio");
fn void ToggleAction.toggled (ToggleAction* self) @extern ("gtk_toggle_action_toggled");
	2 properties
	1 signals
	1 virtuals
struct ToggleActionEntry {
	ZString name;
	ZString stock_id;
	ZString label;
	ZString accelerator;
	ZString tooltip;
	Callback callback;
	CInt is_active;
}

def ToggleActionPrivate = void;

struct ToggleButton (ImplementorIface, Actionable, Activatable, Buildable) {
	inline Button button;
	ToggleButtonPrivate* priv;
}

fn Widget* ToggleButton.new () @operator (construct) @extern ("gtk_toggle_button_new");
fn Widget* ToggleButton.new_with_label (ZString label) @operator (construct) @extern ("gtk_toggle_button_new_with_label");
fn Widget* ToggleButton.new_with_mnemonic (ZString label) @operator (construct) @extern ("gtk_toggle_button_new_with_mnemonic");
fn CInt ToggleButton.get_active (ToggleButton* self) @extern ("gtk_toggle_button_get_active");
fn CInt ToggleButton.get_inconsistent (ToggleButton* self) @extern ("gtk_toggle_button_get_inconsistent");
fn CInt ToggleButton.get_mode (ToggleButton* self) @extern ("gtk_toggle_button_get_mode");
fn void ToggleButton.set_active (ToggleButton* self, CInt is_active) @extern ("gtk_toggle_button_set_active");
fn void ToggleButton.set_inconsistent (ToggleButton* self, CInt setting) @extern ("gtk_toggle_button_set_inconsistent");
fn void ToggleButton.set_mode (ToggleButton* self, CInt draw_indicator) @extern ("gtk_toggle_button_set_mode");
fn void ToggleButton.toggled (ToggleButton* self) @extern ("gtk_toggle_button_toggled");
	3 properties
	1 signals
	1 virtuals
def ToggleButtonAccessible = void;
def ToggleButtonAccessiblePrivate = void;

def ToggleButtonPrivate = void;

struct ToggleToolButton (ImplementorIface, Actionable, Activatable, Buildable) {
	inline ToolButton parent;
	ToggleToolButtonPrivate* priv;
}

fn ToolItem* ToggleToolButton.new () @operator (construct) @extern ("gtk_toggle_tool_button_new");
fn ToolItem* ToggleToolButton.new_from_stock (ZString stock_id) @operator (construct) @extern ("gtk_toggle_tool_button_new_from_stock");
fn CInt ToggleToolButton.get_active (ToggleToolButton* self) @extern ("gtk_toggle_tool_button_get_active");
fn void ToggleToolButton.set_active (ToggleToolButton* self, CInt is_active) @extern ("gtk_toggle_tool_button_set_active");
	1 properties
	1 signals
	1 virtuals
def ToggleToolButtonPrivate = void;

struct ToolButton (ImplementorIface, Actionable, Activatable, Buildable) {
	inline ToolItem parent;
	ToolButtonPrivate* priv;
}

fn ToolItem* ToolButton.new (Widget* icon_widget, ZString label) @operator (construct) @extern ("gtk_tool_button_new");
fn ToolItem* ToolButton.new_from_stock (ZString stock_id) @operator (construct) @extern ("gtk_tool_button_new_from_stock");
fn ZString ToolButton.get_icon_name (ToolButton* self) @extern ("gtk_tool_button_get_icon_name");
fn Widget* ToolButton.get_icon_widget (ToolButton* self) @extern ("gtk_tool_button_get_icon_widget");
fn ZString ToolButton.get_label (ToolButton* self) @extern ("gtk_tool_button_get_label");
fn Widget* ToolButton.get_label_widget (ToolButton* self) @extern ("gtk_tool_button_get_label_widget");
fn ZString ToolButton.get_stock_id (ToolButton* self) @extern ("gtk_tool_button_get_stock_id");
fn CInt ToolButton.get_use_underline (ToolButton* self) @extern ("gtk_tool_button_get_use_underline");
fn void ToolButton.set_icon_name (ToolButton* self, ZString icon_name) @extern ("gtk_tool_button_set_icon_name");
fn void ToolButton.set_icon_widget (ToolButton* self, Widget* icon_widget) @extern ("gtk_tool_button_set_icon_widget");
fn void ToolButton.set_label (ToolButton* self, ZString label) @extern ("gtk_tool_button_set_label");
fn void ToolButton.set_label_widget (ToolButton* self, Widget* label_widget) @extern ("gtk_tool_button_set_label_widget");
fn void ToolButton.set_stock_id (ToolButton* self, ZString stock_id) @extern ("gtk_tool_button_set_stock_id");
fn void ToolButton.set_use_underline (ToolButton* self, CInt use_underline) @extern ("gtk_tool_button_set_use_underline");
	6 properties
	1 signals
	1 virtuals
def ToolButtonPrivate = void;

struct ToolItem (ImplementorIface, Activatable, Buildable) {
	inline Bin parent;
	ToolItemPrivate* priv;
}

fn ToolItem* ToolItem.new () @operator (construct) @extern ("gtk_tool_item_new");
fn EllipsizeMode ToolItem.get_ellipsize_mode (ToolItem* self) @extern ("gtk_tool_item_get_ellipsize_mode");
fn CInt ToolItem.get_expand (ToolItem* self) @extern ("gtk_tool_item_get_expand");
fn CInt ToolItem.get_homogeneous (ToolItem* self) @extern ("gtk_tool_item_get_homogeneous");
fn int ToolItem.get_icon_size (ToolItem* self) @extern ("gtk_tool_item_get_icon_size");
fn CInt ToolItem.get_is_important (ToolItem* self) @extern ("gtk_tool_item_get_is_important");
fn Orientation ToolItem.get_orientation (ToolItem* self) @extern ("gtk_tool_item_get_orientation");
fn Widget* ToolItem.get_proxy_menu_item (ToolItem* self, ZString menu_item_id) @extern ("gtk_tool_item_get_proxy_menu_item");
fn ReliefStyle ToolItem.get_relief_style (ToolItem* self) @extern ("gtk_tool_item_get_relief_style");
fn float ToolItem.get_text_alignment (ToolItem* self) @extern ("gtk_tool_item_get_text_alignment");
fn Orientation ToolItem.get_text_orientation (ToolItem* self) @extern ("gtk_tool_item_get_text_orientation");
fn SizeGroup* ToolItem.get_text_size_group (ToolItem* self) @extern ("gtk_tool_item_get_text_size_group");
fn ToolbarStyle ToolItem.get_toolbar_style (ToolItem* self) @extern ("gtk_tool_item_get_toolbar_style");
fn CInt ToolItem.get_use_drag_window (ToolItem* self) @extern ("gtk_tool_item_get_use_drag_window");
fn CInt ToolItem.get_visible_horizontal (ToolItem* self) @extern ("gtk_tool_item_get_visible_horizontal");
fn CInt ToolItem.get_visible_vertical (ToolItem* self) @extern ("gtk_tool_item_get_visible_vertical");
fn void ToolItem.rebuild_menu (ToolItem* self) @extern ("gtk_tool_item_rebuild_menu");
fn Widget* ToolItem.retrieve_proxy_menu_item (ToolItem* self) @extern ("gtk_tool_item_retrieve_proxy_menu_item");
fn void ToolItem.set_expand (ToolItem* self, CInt expand) @extern ("gtk_tool_item_set_expand");
fn void ToolItem.set_homogeneous (ToolItem* self, CInt homogeneous) @extern ("gtk_tool_item_set_homogeneous");
fn void ToolItem.set_is_important (ToolItem* self, CInt is_important) @extern ("gtk_tool_item_set_is_important");
fn void ToolItem.set_proxy_menu_item (ToolItem* self, ZString menu_item_id, Widget* menu_item) @extern ("gtk_tool_item_set_proxy_menu_item");
fn void ToolItem.set_tooltip_markup (ToolItem* self, ZString markup) @extern ("gtk_tool_item_set_tooltip_markup");
fn void ToolItem.set_tooltip_text (ToolItem* self, ZString text) @extern ("gtk_tool_item_set_tooltip_text");
fn void ToolItem.set_use_drag_window (ToolItem* self, CInt use_drag_window) @extern ("gtk_tool_item_set_use_drag_window");
fn void ToolItem.set_visible_horizontal (ToolItem* self, CInt visible_horizontal) @extern ("gtk_tool_item_set_visible_horizontal");
fn void ToolItem.set_visible_vertical (ToolItem* self, CInt visible_vertical) @extern ("gtk_tool_item_set_visible_vertical");
fn void ToolItem.toolbar_reconfigured (ToolItem* self) @extern ("gtk_tool_item_toolbar_reconfigured");
	3 properties
	2 signals
	2 virtuals
struct ToolItemGroup (ImplementorIface, Buildable, ToolShell) {
	inline Container parent_instance;
	ToolItemGroupPrivate* priv;
}

fn Widget* ToolItemGroup.new (ZString label) @operator (construct) @extern ("gtk_tool_item_group_new");
fn CInt ToolItemGroup.get_collapsed (ToolItemGroup* self) @extern ("gtk_tool_item_group_get_collapsed");
fn ToolItem* ToolItemGroup.get_drop_item (ToolItemGroup* self, int x, int y) @extern ("gtk_tool_item_group_get_drop_item");
fn EllipsizeMode ToolItemGroup.get_ellipsize (ToolItemGroup* self) @extern ("gtk_tool_item_group_get_ellipsize");
fn ReliefStyle ToolItemGroup.get_header_relief (ToolItemGroup* self) @extern ("gtk_tool_item_group_get_header_relief");
fn int ToolItemGroup.get_item_position (ToolItemGroup* self, ToolItem* item) @extern ("gtk_tool_item_group_get_item_position");
fn ZString ToolItemGroup.get_label (ToolItemGroup* self) @extern ("gtk_tool_item_group_get_label");
fn Widget* ToolItemGroup.get_label_widget (ToolItemGroup* self) @extern ("gtk_tool_item_group_get_label_widget");
fn uint ToolItemGroup.get_n_items (ToolItemGroup* self) @extern ("gtk_tool_item_group_get_n_items");
fn ToolItem* ToolItemGroup.get_nth_item (ToolItemGroup* self, uint index) @extern ("gtk_tool_item_group_get_nth_item");
fn void ToolItemGroup.insert (ToolItemGroup* self, ToolItem* item, int position) @extern ("gtk_tool_item_group_insert");
fn void ToolItemGroup.set_collapsed (ToolItemGroup* self, CInt collapsed) @extern ("gtk_tool_item_group_set_collapsed");
fn void ToolItemGroup.set_ellipsize (ToolItemGroup* self, EllipsizeMode ellipsize) @extern ("gtk_tool_item_group_set_ellipsize");
fn void ToolItemGroup.set_header_relief (ToolItemGroup* self, ReliefStyle style) @extern ("gtk_tool_item_group_set_header_relief");
fn void ToolItemGroup.set_item_position (ToolItemGroup* self, ToolItem* item, int position) @extern ("gtk_tool_item_group_set_item_position");
fn void ToolItemGroup.set_label (ToolItemGroup* self, ZString label) @extern ("gtk_tool_item_group_set_label");
fn void ToolItemGroup.set_label_widget (ToolItemGroup* self, Widget* label_widget) @extern ("gtk_tool_item_group_set_label_widget");
	5 properties
def ToolItemGroupPrivate = void;

def ToolItemPrivate = void;

struct ToolPalette (ImplementorIface, Buildable, Orientable, Scrollable) {
	inline Container parent_instance;
	ToolPalettePrivate* priv;
}

fn Widget* ToolPalette.new () @operator (construct) @extern ("gtk_tool_palette_new");
fn TargetEntry* ToolPalette.get_drag_target_group (ToolPalette* self) @extern ("gtk_tool_palette_get_drag_target_group");
fn TargetEntry* ToolPalette.get_drag_target_item (ToolPalette* self) @extern ("gtk_tool_palette_get_drag_target_item");
fn void ToolPalette.add_drag_dest (ToolPalette* self, Widget* widget, DestDefaults flags, ToolPaletteDragTargets targets, gdk::DragAction actions) @extern ("gtk_tool_palette_add_drag_dest");
fn Widget* ToolPalette.get_drag_item (ToolPalette* self, SelectionData* selection) @extern ("gtk_tool_palette_get_drag_item");
fn ToolItemGroup* ToolPalette.get_drop_group (ToolPalette* self, int x, int y) @extern ("gtk_tool_palette_get_drop_group");
fn ToolItem* ToolPalette.get_drop_item (ToolPalette* self, int x, int y) @extern ("gtk_tool_palette_get_drop_item");
fn CInt ToolPalette.get_exclusive (ToolPalette* self, ToolItemGroup* group) @extern ("gtk_tool_palette_get_exclusive");
fn CInt ToolPalette.get_expand (ToolPalette* self, ToolItemGroup* group) @extern ("gtk_tool_palette_get_expand");
fn int ToolPalette.get_group_position (ToolPalette* self, ToolItemGroup* group) @extern ("gtk_tool_palette_get_group_position");
fn Adjustment* ToolPalette.get_hadjustment (ToolPalette* self) @extern ("gtk_tool_palette_get_hadjustment");
fn int ToolPalette.get_icon_size (ToolPalette* self) @extern ("gtk_tool_palette_get_icon_size");
fn ToolbarStyle ToolPalette.get_style (ToolPalette* self) @extern ("gtk_tool_palette_get_style");
fn Adjustment* ToolPalette.get_vadjustment (ToolPalette* self) @extern ("gtk_tool_palette_get_vadjustment");
fn void ToolPalette.set_drag_source (ToolPalette* self, ToolPaletteDragTargets targets) @extern ("gtk_tool_palette_set_drag_source");
fn void ToolPalette.set_exclusive (ToolPalette* self, ToolItemGroup* group, CInt exclusive) @extern ("gtk_tool_palette_set_exclusive");
fn void ToolPalette.set_expand (ToolPalette* self, ToolItemGroup* group, CInt expand) @extern ("gtk_tool_palette_set_expand");
fn void ToolPalette.set_group_position (ToolPalette* self, ToolItemGroup* group, int position) @extern ("gtk_tool_palette_set_group_position");
fn void ToolPalette.set_icon_size (ToolPalette* self, int icon_size) @extern ("gtk_tool_palette_set_icon_size");
fn void ToolPalette.set_style (ToolPalette* self, ToolbarStyle style) @extern ("gtk_tool_palette_set_style");
fn void ToolPalette.unset_icon_size (ToolPalette* self) @extern ("gtk_tool_palette_unset_icon_size");
fn void ToolPalette.unset_style (ToolPalette* self) @extern ("gtk_tool_palette_unset_style");
	3 properties
enum ToolPaletteDragTargets: CInt (inline CInt bit) {
	ITEMS = 1,
	GROUPS = 2
}

def ToolPalettePrivate = void;

ToolShell (Interface)
struct Toolbar (ImplementorIface, Buildable, Orientable, ToolShell) {
	inline Container container;
	ToolbarPrivate* priv;
}

fn Widget* Toolbar.new () @operator (construct) @extern ("gtk_toolbar_new");
fn int Toolbar.get_drop_index (Toolbar* self, int x, int y) @extern ("gtk_toolbar_get_drop_index");
fn IconSize Toolbar.get_icon_size (Toolbar* self) @extern ("gtk_toolbar_get_icon_size");
fn int Toolbar.get_item_index (Toolbar* self, ToolItem* item) @extern ("gtk_toolbar_get_item_index");
fn int Toolbar.get_n_items (Toolbar* self) @extern ("gtk_toolbar_get_n_items");
fn ToolItem* Toolbar.get_nth_item (Toolbar* self, int n) @extern ("gtk_toolbar_get_nth_item");
fn ReliefStyle Toolbar.get_relief_style (Toolbar* self) @extern ("gtk_toolbar_get_relief_style");
fn CInt Toolbar.get_show_arrow (Toolbar* self) @extern ("gtk_toolbar_get_show_arrow");
fn ToolbarStyle Toolbar.get_style (Toolbar* self) @extern ("gtk_toolbar_get_style");
fn void Toolbar.insert (Toolbar* self, ToolItem* item, int pos) @extern ("gtk_toolbar_insert");
fn void Toolbar.set_drop_highlight_item (Toolbar* self, ToolItem* tool_item, int index_) @extern ("gtk_toolbar_set_drop_highlight_item");
fn void Toolbar.set_icon_size (Toolbar* self, IconSize icon_size) @extern ("gtk_toolbar_set_icon_size");
fn void Toolbar.set_show_arrow (Toolbar* self, CInt show_arrow) @extern ("gtk_toolbar_set_show_arrow");
fn void Toolbar.set_style (Toolbar* self, ToolbarStyle style) @extern ("gtk_toolbar_set_style");
fn void Toolbar.unset_icon_size (Toolbar* self) @extern ("gtk_toolbar_unset_icon_size");
fn void Toolbar.unset_style (Toolbar* self) @extern ("gtk_toolbar_unset_style");
	4 properties
	4 signals
	3 virtuals
def ToolbarPrivate = void;


enum ToolbarSpaceStyle {
	EMPTY,
	LINE
}


enum ToolbarStyle {
	ICONS,
	TEXT,
	BOTH,
	BOTH_HORIZ
}

struct Tooltip {
	void* unused;
}

fn void Tooltip.trigger_tooltip_query (Tooltip* self, gdk::Display* display) @extern ("gtk_tooltip_trigger_tooltip_query");
fn void Tooltip.set_custom (Tooltip* self, Widget* custom_widget) @extern ("gtk_tooltip_set_custom");
fn void Tooltip.set_icon (Tooltip* self, Pixbuf* pixbuf) @extern ("gtk_tooltip_set_icon");
fn void Tooltip.set_icon_from_gicon (Tooltip* self, [not parsed]* gicon, int size) @extern ("gtk_tooltip_set_icon_from_gicon");
fn void Tooltip.set_icon_from_icon_name (Tooltip* self, ZString icon_name, int size) @extern ("gtk_tooltip_set_icon_from_icon_name");
fn void Tooltip.set_icon_from_stock (Tooltip* self, ZString stock_id, int size) @extern ("gtk_tooltip_set_icon_from_stock");
fn void Tooltip.set_markup (Tooltip* self, ZString markup) @extern ("gtk_tooltip_set_markup");
fn void Tooltip.set_text (Tooltip* self, ZString text) @extern ("gtk_tooltip_set_text");
fn void Tooltip.set_tip_area (Tooltip* self, gdk::Rectangle* rect) @extern ("gtk_tooltip_set_tip_area");
struct ToplevelAccessible {
	inline atk::Object parent;
	ToplevelAccessiblePrivate* priv;
}

fn List* ToplevelAccessible.get_children (ToplevelAccessible* self) @extern ("gtk_toplevel_accessible_get_children");
def ToplevelAccessiblePrivate = void;

def TranslateFunc = fn ZString (ZString path, void* func_data) @export;
def TreeCellDataFunc = fn void (TreeViewColumn* tree_column, CellRenderer* cell, [not parsed]* tree_model, TreeIter* iter, void* data) @export;
def TreeDestroyCountFunc = fn void (TreeView* tree_view, TreePath* path, int children, void* user_data) @export;
TreeDragDest (Interface)
TreeDragSource (Interface)
struct TreeIter {
	int stamp;
	void* user_data;
	void* user_data2;
	void* user_data3;
}

fn TreeIter* TreeIter.copy (TreeIter* self) @extern ("gtk_tree_iter_copy");
fn void TreeIter.free (TreeIter* self) @extern ("gtk_tree_iter_free");
def TreeIterCompareFunc = fn int ([not parsed]* model, TreeIter* a, TreeIter* b, void* user_data) @export;
TreeModel (Interface)
struct TreeModelFilter (TreeDragSource, TreeModel) {
	inline Object parent;
	TreeModelFilterPrivate* priv;
}

fn void TreeModelFilter.clear_cache (TreeModelFilter* self) @extern ("gtk_tree_model_filter_clear_cache");
fn CInt TreeModelFilter.convert_child_iter_to_iter (TreeModelFilter* self, TreeIter filter_iter, TreeIter* child_iter) @extern ("gtk_tree_model_filter_convert_child_iter_to_iter");
fn TreePath* TreeModelFilter.convert_child_path_to_path (TreeModelFilter* self, TreePath* child_path) @extern ("gtk_tree_model_filter_convert_child_path_to_path");
fn void TreeModelFilter.convert_iter_to_child_iter (TreeModelFilter* self, TreeIter child_iter, TreeIter* filter_iter) @extern ("gtk_tree_model_filter_convert_iter_to_child_iter");
fn TreePath* TreeModelFilter.convert_path_to_child_path (TreeModelFilter* self, TreePath* filter_path) @extern ("gtk_tree_model_filter_convert_path_to_child_path");
fn [not parsed]* TreeModelFilter.get_model (TreeModelFilter* self) @extern ("gtk_tree_model_filter_get_model");
fn void TreeModelFilter.refilter (TreeModelFilter* self) @extern ("gtk_tree_model_filter_refilter");
fn void TreeModelFilter.set_modify_func (TreeModelFilter* self, int n_columns, char** types, TreeModelFilterModifyFunc func, void* data, DestroyNotify destroy) @extern ("gtk_tree_model_filter_set_modify_func");
fn void TreeModelFilter.set_visible_column (TreeModelFilter* self, int column) @extern ("gtk_tree_model_filter_set_visible_column");
fn void TreeModelFilter.set_visible_func (TreeModelFilter* self, TreeModelFilterVisibleFunc func, void* data, DestroyNotify destroy) @extern ("gtk_tree_model_filter_set_visible_func");
	2 properties
	2 virtuals
def TreeModelFilterModifyFunc = fn void ([not parsed]* model, TreeIter* iter, Value value, int column, void* data) @export;
def TreeModelFilterPrivate = void;

def TreeModelFilterVisibleFunc = fn CInt ([not parsed]* model, TreeIter* iter, void* data) @export;
enum TreeModelFlags: CInt (inline CInt bit) {
	ITERS_PERSIST = 1,
	LIST_ONLY = 2
}

def TreeModelForeachFunc = fn CInt ([not parsed]* model, TreePath* path, TreeIter* iter, void* data) @export;
struct TreeModelSort (TreeDragSource, TreeModel, TreeSortable) {
	inline Object parent;
	TreeModelSortPrivate* priv;
}

fn TreeModelSort* TreeModelSort.new_with_model ([not parsed]* child_model) @operator (construct) @extern ("gtk_tree_model_sort_new_with_model");
fn void TreeModelSort.clear_cache (TreeModelSort* self) @extern ("gtk_tree_model_sort_clear_cache");
fn CInt TreeModelSort.convert_child_iter_to_iter (TreeModelSort* self, TreeIter sort_iter, TreeIter* child_iter) @extern ("gtk_tree_model_sort_convert_child_iter_to_iter");
fn TreePath* TreeModelSort.convert_child_path_to_path (TreeModelSort* self, TreePath* child_path) @extern ("gtk_tree_model_sort_convert_child_path_to_path");
fn void TreeModelSort.convert_iter_to_child_iter (TreeModelSort* self, TreeIter child_iter, TreeIter* sorted_iter) @extern ("gtk_tree_model_sort_convert_iter_to_child_iter");
fn TreePath* TreeModelSort.convert_path_to_child_path (TreeModelSort* self, TreePath* sorted_path) @extern ("gtk_tree_model_sort_convert_path_to_child_path");
fn [not parsed]* TreeModelSort.get_model (TreeModelSort* self) @extern ("gtk_tree_model_sort_get_model");
fn CInt TreeModelSort.iter_is_valid (TreeModelSort* self, TreeIter* iter) @extern ("gtk_tree_model_sort_iter_is_valid");
fn void TreeModelSort.reset_default_sort_func (TreeModelSort* self) @extern ("gtk_tree_model_sort_reset_default_sort_func");
	1 properties
def TreeModelSortPrivate = void;

struct TreePath {
	void* unused;
}

fn TreePath* TreePath.new () @operator (construct) @extern ("gtk_tree_path_new");
fn TreePath* TreePath.new_first () @operator (construct) @extern ("gtk_tree_path_new_first");
fn TreePath* TreePath.new_from_indices (char** indices, ulong length) @operator (construct) @extern ("gtk_tree_path_new_from_indicesv");
fn TreePath* TreePath.new_from_string (ZString path) @operator (construct) @extern ("gtk_tree_path_new_from_string");
fn void TreePath.append_index (TreePath* self, int index_) @extern ("gtk_tree_path_append_index");
fn int TreePath.compare (TreePath* self, TreePath* b) @extern ("gtk_tree_path_compare");
fn TreePath* TreePath.copy (TreePath* self) @extern ("gtk_tree_path_copy");
fn void TreePath.down (TreePath* self) @extern ("gtk_tree_path_down");
fn void TreePath.free (TreePath* self) @extern ("gtk_tree_path_free");
fn int TreePath.get_depth (TreePath* self) @extern ("gtk_tree_path_get_depth");
fn char** TreePath.get_indices (TreePath* self, int depth) @extern ("gtk_tree_path_get_indices_with_depth");
fn CInt TreePath.is_ancestor (TreePath* self, TreePath* descendant) @extern ("gtk_tree_path_is_ancestor");
fn CInt TreePath.is_descendant (TreePath* self, TreePath* ancestor) @extern ("gtk_tree_path_is_descendant");
fn void TreePath.next (TreePath* self) @extern ("gtk_tree_path_next");
fn void TreePath.prepend_index (TreePath* self, int index_) @extern ("gtk_tree_path_prepend_index");
fn CInt TreePath.prev (TreePath* self) @extern ("gtk_tree_path_prev");
fn ZString TreePath.to_string (TreePath* self) @extern ("gtk_tree_path_to_string");
fn CInt TreePath.up (TreePath* self) @extern ("gtk_tree_path_up");
struct TreeRowReference {
	void* unused;
}

fn TreeRowReference* TreeRowReference.new ([not parsed]* model, TreePath* path) @operator (construct) @extern ("gtk_tree_row_reference_new");
fn TreeRowReference* TreeRowReference.new_proxy (Object* proxy, [not parsed]* model, TreePath* path) @operator (construct) @extern ("gtk_tree_row_reference_new_proxy");
fn TreeRowReference* TreeRowReference.copy (TreeRowReference* self) @extern ("gtk_tree_row_reference_copy");
fn void TreeRowReference.free (TreeRowReference* self) @extern ("gtk_tree_row_reference_free");
fn [not parsed]* TreeRowReference.get_model (TreeRowReference* self) @extern ("gtk_tree_row_reference_get_model");
fn TreePath* TreeRowReference.get_path (TreeRowReference* self) @extern ("gtk_tree_row_reference_get_path");
fn CInt TreeRowReference.valid (TreeRowReference* self) @extern ("gtk_tree_row_reference_valid");
fn void TreeRowReference.deleted (TreeRowReference* self, Object* proxy, TreePath* path) @extern ("gtk_tree_row_reference_deleted");
fn void TreeRowReference.inserted (TreeRowReference* self, Object* proxy, TreePath* path) @extern ("gtk_tree_row_reference_inserted");
struct TreeSelection {
	inline Object parent;
	TreeSelectionPrivate* priv;
}

fn int TreeSelection.count_selected_rows (TreeSelection* self) @extern ("gtk_tree_selection_count_selected_rows");
fn SelectionMode TreeSelection.get_mode (TreeSelection* self) @extern ("gtk_tree_selection_get_mode");
fn CInt TreeSelection.get_selected (TreeSelection* self, [not parsed]* model, TreeIter iter) @extern ("gtk_tree_selection_get_selected");
fn List* TreeSelection.get_selected_rows (TreeSelection* self, [not parsed]* model) @extern ("gtk_tree_selection_get_selected_rows");
fn TreeView* TreeSelection.get_tree_view (TreeSelection* self) @extern ("gtk_tree_selection_get_tree_view");
fn CInt TreeSelection.iter_is_selected (TreeSelection* self, TreeIter* iter) @extern ("gtk_tree_selection_iter_is_selected");
fn CInt TreeSelection.path_is_selected (TreeSelection* self, TreePath* path) @extern ("gtk_tree_selection_path_is_selected");
fn void TreeSelection.select_all (TreeSelection* self) @extern ("gtk_tree_selection_select_all");
fn void TreeSelection.select_iter (TreeSelection* self, TreeIter* iter) @extern ("gtk_tree_selection_select_iter");
fn void TreeSelection.select_path (TreeSelection* self, TreePath* path) @extern ("gtk_tree_selection_select_path");
fn void TreeSelection.select_range (TreeSelection* self, TreePath* start_path, TreePath* end_path) @extern ("gtk_tree_selection_select_range");
fn void TreeSelection.selected_foreach (TreeSelection* self, TreeSelectionForeachFunc func, void* data) @extern ("gtk_tree_selection_selected_foreach");
fn void TreeSelection.set_mode (TreeSelection* self, SelectionMode type) @extern ("gtk_tree_selection_set_mode");
fn void TreeSelection.set_select_function (TreeSelection* self, TreeSelectionFunc func, void* data, DestroyNotify destroy) @extern ("gtk_tree_selection_set_select_function");
fn void TreeSelection.unselect_all (TreeSelection* self) @extern ("gtk_tree_selection_unselect_all");
fn void TreeSelection.unselect_iter (TreeSelection* self, TreeIter* iter) @extern ("gtk_tree_selection_unselect_iter");
fn void TreeSelection.unselect_path (TreeSelection* self, TreePath* path) @extern ("gtk_tree_selection_unselect_path");
fn void TreeSelection.unselect_range (TreeSelection* self, TreePath* start_path, TreePath* end_path) @extern ("gtk_tree_selection_unselect_range");
	1 properties
	1 signals
	1 virtuals
def TreeSelectionForeachFunc = fn void ([not parsed]* model, TreePath* path, TreeIter* iter, void* data) @export;
def TreeSelectionFunc = fn CInt (TreeSelection* selection, [not parsed]* model, TreePath* path, CInt path_currently_selected, void* data) @export;
def TreeSelectionPrivate = void;

TreeSortable (Interface)
struct TreeStore (Buildable, TreeDragDest, TreeDragSource, TreeModel, TreeSortable) {
	inline Object parent;
	TreeStorePrivate* priv;
}

fn TreeStore* TreeStore.new (int n_columns, char** types) @operator (construct) @extern ("gtk_tree_store_newv");
fn void TreeStore.append (TreeStore* self, TreeIter iter, TreeIter* parent) @extern ("gtk_tree_store_append");
fn void TreeStore.clear (TreeStore* self) @extern ("gtk_tree_store_clear");
fn void TreeStore.insert (TreeStore* self, TreeIter iter, TreeIter* parent, int position) @extern ("gtk_tree_store_insert");
fn void TreeStore.insert_after (TreeStore* self, TreeIter iter, TreeIter* parent, TreeIter* sibling) @extern ("gtk_tree_store_insert_after");
fn void TreeStore.insert_before (TreeStore* self, TreeIter iter, TreeIter* parent, TreeIter* sibling) @extern ("gtk_tree_store_insert_before");
fn void TreeStore.insert_with_values (TreeStore* self, TreeIter iter, TreeIter* parent, int position, char** columns, char** values, int n_values) @extern ("gtk_tree_store_insert_with_valuesv");
fn CInt TreeStore.is_ancestor (TreeStore* self, TreeIter* iter, TreeIter* descendant) @extern ("gtk_tree_store_is_ancestor");
fn int TreeStore.iter_depth (TreeStore* self, TreeIter* iter) @extern ("gtk_tree_store_iter_depth");
fn CInt TreeStore.iter_is_valid (TreeStore* self, TreeIter* iter) @extern ("gtk_tree_store_iter_is_valid");
fn void TreeStore.move_after (TreeStore* self, TreeIter* iter, TreeIter* position) @extern ("gtk_tree_store_move_after");
fn void TreeStore.move_before (TreeStore* self, TreeIter* iter, TreeIter* position) @extern ("gtk_tree_store_move_before");
fn void TreeStore.prepend (TreeStore* self, TreeIter iter, TreeIter* parent) @extern ("gtk_tree_store_prepend");
fn CInt TreeStore.remove (TreeStore* self, TreeIter* iter) @extern ("gtk_tree_store_remove");
fn void TreeStore.set_column_types (TreeStore* self, int n_columns, char** types) @extern ("gtk_tree_store_set_column_types");
fn void TreeStore.set_value (TreeStore* self, TreeIter* iter, int column, Value* value) @extern ("gtk_tree_store_set_value");
fn void TreeStore.set (TreeStore* self, TreeIter* iter, char** columns, char** values, int n_values) @extern ("gtk_tree_store_set_valuesv");
fn void TreeStore.swap (TreeStore* self, TreeIter* a, TreeIter* b) @extern ("gtk_tree_store_swap");
def TreeStorePrivate = void;

struct TreeView (ImplementorIface, Buildable, Scrollable) {
	inline Container parent;
	TreeViewPrivate* priv;
}

fn Widget* TreeView.new () @operator (construct) @extern ("gtk_tree_view_new");
fn Widget* TreeView.new_with_model ([not parsed]* model) @operator (construct) @extern ("gtk_tree_view_new_with_model");
fn int TreeView.append_column (TreeView* self, TreeViewColumn* column) @extern ("gtk_tree_view_append_column");
fn void TreeView.collapse_all (TreeView* self) @extern ("gtk_tree_view_collapse_all");
fn CInt TreeView.collapse_row (TreeView* self, TreePath* path) @extern ("gtk_tree_view_collapse_row");
fn void TreeView.columns_autosize (TreeView* self) @extern ("gtk_tree_view_columns_autosize");
fn void TreeView.convert_bin_window_to_tree_coords (TreeView* self, int bx, int by, int tx, int ty) @extern ("gtk_tree_view_convert_bin_window_to_tree_coords");
fn void TreeView.convert_bin_window_to_widget_coords (TreeView* self, int bx, int by, int wx, int wy) @extern ("gtk_tree_view_convert_bin_window_to_widget_coords");
fn void TreeView.convert_tree_to_bin_window_coords (TreeView* self, int tx, int ty, int bx, int by) @extern ("gtk_tree_view_convert_tree_to_bin_window_coords");
fn void TreeView.convert_tree_to_widget_coords (TreeView* self, int tx, int ty, int wx, int wy) @extern ("gtk_tree_view_convert_tree_to_widget_coords");
fn void TreeView.convert_widget_to_bin_window_coords (TreeView* self, int wx, int wy, int bx, int by) @extern ("gtk_tree_view_convert_widget_to_bin_window_coords");
fn void TreeView.convert_widget_to_tree_coords (TreeView* self, int wx, int wy, int tx, int ty) @extern ("gtk_tree_view_convert_widget_to_tree_coords");
fn Surface* TreeView.create_row_drag_icon (TreeView* self, TreePath* path) @extern ("gtk_tree_view_create_row_drag_icon");
fn void TreeView.enable_model_drag_dest (TreeView* self, char** targets, int n_targets, gdk::DragAction actions) @extern ("gtk_tree_view_enable_model_drag_dest");
fn void TreeView.enable_model_drag_source (TreeView* self, gdk::ModifierType start_button_mask, char** targets, int n_targets, gdk::DragAction actions) @extern ("gtk_tree_view_enable_model_drag_source");
fn void TreeView.expand_all (TreeView* self) @extern ("gtk_tree_view_expand_all");
fn CInt TreeView.expand_row (TreeView* self, TreePath* path, CInt open_all) @extern ("gtk_tree_view_expand_row");
fn void TreeView.expand_to_path (TreeView* self, TreePath* path) @extern ("gtk_tree_view_expand_to_path");
fn CInt TreeView.get_activate_on_single_click (TreeView* self) @extern ("gtk_tree_view_get_activate_on_single_click");
fn void TreeView.get_background_area (TreeView* self, TreePath* path, TreeViewColumn* column, gdk::Rectangle rect) @extern ("gtk_tree_view_get_background_area");
fn gdk::Window* TreeView.get_bin_window (TreeView* self) @extern ("gtk_tree_view_get_bin_window");
fn void TreeView.get_cell_area (TreeView* self, TreePath* path, TreeViewColumn* column, gdk::Rectangle rect) @extern ("gtk_tree_view_get_cell_area");
fn TreeViewColumn* TreeView.get_column (TreeView* self, int n) @extern ("gtk_tree_view_get_column");
fn List* TreeView.get_columns (TreeView* self) @extern ("gtk_tree_view_get_columns");
fn void TreeView.get_cursor (TreeView* self, TreePath* path, TreeViewColumn* focus_column) @extern ("gtk_tree_view_get_cursor");
fn CInt TreeView.get_dest_row_at_pos (TreeView* self, int drag_x, int drag_y, TreePath* path, TreeViewDropPosition pos) @extern ("gtk_tree_view_get_dest_row_at_pos");
fn void TreeView.get_drag_dest_row (TreeView* self, TreePath* path, TreeViewDropPosition pos) @extern ("gtk_tree_view_get_drag_dest_row");
fn CInt TreeView.get_enable_search (TreeView* self) @extern ("gtk_tree_view_get_enable_search");
fn CInt TreeView.get_enable_tree_lines (TreeView* self) @extern ("gtk_tree_view_get_enable_tree_lines");
fn TreeViewColumn* TreeView.get_expander_column (TreeView* self) @extern ("gtk_tree_view_get_expander_column");
fn CInt TreeView.get_fixed_height_mode (TreeView* self) @extern ("gtk_tree_view_get_fixed_height_mode");
fn TreeViewGridLines TreeView.get_grid_lines (TreeView* self) @extern ("gtk_tree_view_get_grid_lines");
fn Adjustment* TreeView.get_hadjustment (TreeView* self) @extern ("gtk_tree_view_get_hadjustment");
fn CInt TreeView.get_headers_clickable (TreeView* self) @extern ("gtk_tree_view_get_headers_clickable");
fn CInt TreeView.get_headers_visible (TreeView* self) @extern ("gtk_tree_view_get_headers_visible");
fn CInt TreeView.get_hover_expand (TreeView* self) @extern ("gtk_tree_view_get_hover_expand");
fn CInt TreeView.get_hover_selection (TreeView* self) @extern ("gtk_tree_view_get_hover_selection");
fn int TreeView.get_level_indentation (TreeView* self) @extern ("gtk_tree_view_get_level_indentation");
fn [not parsed]* TreeView.get_model (TreeView* self) @extern ("gtk_tree_view_get_model");
fn uint TreeView.get_n_columns (TreeView* self) @extern ("gtk_tree_view_get_n_columns");
fn CInt TreeView.get_path_at_pos (TreeView* self, int x, int y, TreePath* path, TreeViewColumn* column, int cell_x, int cell_y) @extern ("gtk_tree_view_get_path_at_pos");
fn CInt TreeView.get_reorderable (TreeView* self) @extern ("gtk_tree_view_get_reorderable");
fn CInt TreeView.get_rubber_banding (TreeView* self) @extern ("gtk_tree_view_get_rubber_banding");
fn CInt TreeView.get_rules_hint (TreeView* self) @extern ("gtk_tree_view_get_rules_hint");
fn int TreeView.get_search_column (TreeView* self) @extern ("gtk_tree_view_get_search_column");
fn Entry* TreeView.get_search_entry (TreeView* self) @extern ("gtk_tree_view_get_search_entry");
fn TreeSelection* TreeView.get_selection (TreeView* self) @extern ("gtk_tree_view_get_selection");
fn CInt TreeView.get_show_expanders (TreeView* self) @extern ("gtk_tree_view_get_show_expanders");
fn int TreeView.get_tooltip_column (TreeView* self) @extern ("gtk_tree_view_get_tooltip_column");
fn CInt TreeView.get_tooltip_context (TreeView* self, int x, int y, CInt keyboard_tip, [not parsed]* model, TreePath* path, TreeIter iter) @extern ("gtk_tree_view_get_tooltip_context");
fn Adjustment* TreeView.get_vadjustment (TreeView* self) @extern ("gtk_tree_view_get_vadjustment");
fn CInt TreeView.get_visible_range (TreeView* self, TreePath* start_path, TreePath* end_path) @extern ("gtk_tree_view_get_visible_range");
fn void TreeView.get_visible_rect (TreeView* self, gdk::Rectangle visible_rect) @extern ("gtk_tree_view_get_visible_rect");
fn int TreeView.insert_column (TreeView* self, TreeViewColumn* column, int position) @extern ("gtk_tree_view_insert_column");
fn int TreeView.insert_column_with_data_func (TreeView* self, int position, ZString title, CellRenderer* cell, TreeCellDataFunc func, void* data, DestroyNotify dnotify) @extern ("gtk_tree_view_insert_column_with_data_func");
fn CInt TreeView.is_blank_at_pos (TreeView* self, int x, int y, TreePath* path, TreeViewColumn* column, int cell_x, int cell_y) @extern ("gtk_tree_view_is_blank_at_pos");
fn CInt TreeView.is_rubber_banding_active (TreeView* self) @extern ("gtk_tree_view_is_rubber_banding_active");
fn void TreeView.map_expanded_rows (TreeView* self, TreeViewMappingFunc func, void* data) @extern ("gtk_tree_view_map_expanded_rows");
fn void TreeView.move_column_after (TreeView* self, TreeViewColumn* column, TreeViewColumn* base_column) @extern ("gtk_tree_view_move_column_after");
fn int TreeView.remove_column (TreeView* self, TreeViewColumn* column) @extern ("gtk_tree_view_remove_column");
fn void TreeView.row_activated (TreeView* self, TreePath* path, TreeViewColumn* column) @extern ("gtk_tree_view_row_activated");
fn CInt TreeView.row_expanded (TreeView* self, TreePath* path) @extern ("gtk_tree_view_row_expanded");
fn void TreeView.scroll_to_cell (TreeView* self, TreePath* path, TreeViewColumn* column, CInt use_align, float row_align, float col_align) @extern ("gtk_tree_view_scroll_to_cell");
fn void TreeView.scroll_to_point (TreeView* self, int tree_x, int tree_y) @extern ("gtk_tree_view_scroll_to_point");
fn void TreeView.set_activate_on_single_click (TreeView* self, CInt single) @extern ("gtk_tree_view_set_activate_on_single_click");
fn void TreeView.set_column_drag_function (TreeView* self, TreeViewColumnDropFunc func, void* user_data, DestroyNotify destroy) @extern ("gtk_tree_view_set_column_drag_function");
fn void TreeView.set_cursor (TreeView* self, TreePath* path, TreeViewColumn* focus_column, CInt start_editing) @extern ("gtk_tree_view_set_cursor");
fn void TreeView.set_cursor_on_cell (TreeView* self, TreePath* path, TreeViewColumn* focus_column, CellRenderer* focus_cell, CInt start_editing) @extern ("gtk_tree_view_set_cursor_on_cell");
fn void TreeView.set_destroy_count_func (TreeView* self, TreeDestroyCountFunc func, void* data, DestroyNotify destroy) @extern ("gtk_tree_view_set_destroy_count_func");
fn void TreeView.set_drag_dest_row (TreeView* self, TreePath* path, TreeViewDropPosition pos) @extern ("gtk_tree_view_set_drag_dest_row");
fn void TreeView.set_enable_search (TreeView* self, CInt enable_search) @extern ("gtk_tree_view_set_enable_search");
fn void TreeView.set_enable_tree_lines (TreeView* self, CInt enabled) @extern ("gtk_tree_view_set_enable_tree_lines");
fn void TreeView.set_expander_column (TreeView* self, TreeViewColumn* column) @extern ("gtk_tree_view_set_expander_column");
fn void TreeView.set_fixed_height_mode (TreeView* self, CInt enable) @extern ("gtk_tree_view_set_fixed_height_mode");
fn void TreeView.set_grid_lines (TreeView* self, TreeViewGridLines grid_lines) @extern ("gtk_tree_view_set_grid_lines");
fn void TreeView.set_hadjustment (TreeView* self, Adjustment* adjustment) @extern ("gtk_tree_view_set_hadjustment");
fn void TreeView.set_headers_clickable (TreeView* self, CInt setting) @extern ("gtk_tree_view_set_headers_clickable");
fn void TreeView.set_headers_visible (TreeView* self, CInt headers_visible) @extern ("gtk_tree_view_set_headers_visible");
fn void TreeView.set_hover_expand (TreeView* self, CInt expand) @extern ("gtk_tree_view_set_hover_expand");
fn void TreeView.set_hover_selection (TreeView* self, CInt hover) @extern ("gtk_tree_view_set_hover_selection");
fn void TreeView.set_level_indentation (TreeView* self, int indentation) @extern ("gtk_tree_view_set_level_indentation");
fn void TreeView.set_model (TreeView* self, [not parsed]* model) @extern ("gtk_tree_view_set_model");
fn void TreeView.set_reorderable (TreeView* self, CInt reorderable) @extern ("gtk_tree_view_set_reorderable");
fn void TreeView.set_row_separator_func (TreeView* self, TreeViewRowSeparatorFunc func, void* data, DestroyNotify destroy) @extern ("gtk_tree_view_set_row_separator_func");
fn void TreeView.set_rubber_banding (TreeView* self, CInt enable) @extern ("gtk_tree_view_set_rubber_banding");
fn void TreeView.set_rules_hint (TreeView* self, CInt setting) @extern ("gtk_tree_view_set_rules_hint");
fn void TreeView.set_search_column (TreeView* self, int column) @extern ("gtk_tree_view_set_search_column");
fn void TreeView.set_search_entry (TreeView* self, Entry* entry) @extern ("gtk_tree_view_set_search_entry");
fn void TreeView.set_search_equal_func (TreeView* self, TreeViewSearchEqualFunc search_equal_func, void* search_user_data, DestroyNotify search_destroy) @extern ("gtk_tree_view_set_search_equal_func");
fn void TreeView.set_search_position_func (TreeView* self, TreeViewSearchPositionFunc func, void* data, DestroyNotify destroy) @extern ("gtk_tree_view_set_search_position_func");
fn void TreeView.set_show_expanders (TreeView* self, CInt enabled) @extern ("gtk_tree_view_set_show_expanders");
fn void TreeView.set_tooltip_cell (TreeView* self, Tooltip* tooltip, TreePath* path, TreeViewColumn* column, CellRenderer* cell) @extern ("gtk_tree_view_set_tooltip_cell");
fn void TreeView.set_tooltip_column (TreeView* self, int column) @extern ("gtk_tree_view_set_tooltip_column");
fn void TreeView.set_tooltip_row (TreeView* self, Tooltip* tooltip, TreePath* path) @extern ("gtk_tree_view_set_tooltip_row");
fn void TreeView.set_vadjustment (TreeView* self, Adjustment* adjustment) @extern ("gtk_tree_view_set_vadjustment");
fn void TreeView.unset_rows_drag_dest (TreeView* self) @extern ("gtk_tree_view_unset_rows_drag_dest");
fn void TreeView.unset_rows_drag_source (TreeView* self) @extern ("gtk_tree_view_unset_rows_drag_source");
	18 properties
	15 signals
	15 virtuals
def TreeViewAccessible = void;
def TreeViewAccessiblePrivate = void;

struct TreeViewColumn (Buildable, CellLayout) {
	inline InitiallyUnowned parent_instance;
	TreeViewColumnPrivate* priv;
}

fn TreeViewColumn* TreeViewColumn.new () @operator (construct) @extern ("gtk_tree_view_column_new");
fn TreeViewColumn* TreeViewColumn.new_with_area (CellArea* area) @operator (construct) @extern ("gtk_tree_view_column_new_with_area");
fn void TreeViewColumn.add_attribute (TreeViewColumn* self, CellRenderer* cell_renderer, ZString attribute, int column) @extern ("gtk_tree_view_column_add_attribute");
fn CInt TreeViewColumn.cell_get_position (TreeViewColumn* self, CellRenderer* cell_renderer, int x_offset, int width) @extern ("gtk_tree_view_column_cell_get_position");
fn void TreeViewColumn.cell_get_size (TreeViewColumn* self, gdk::Rectangle* cell_area, int x_offset, int y_offset, int width, int height) @extern ("gtk_tree_view_column_cell_get_size");
fn CInt TreeViewColumn.cell_is_visible (TreeViewColumn* self) @extern ("gtk_tree_view_column_cell_is_visible");
fn void TreeViewColumn.cell_set_cell_data (TreeViewColumn* self, [not parsed]* tree_model, TreeIter* iter, CInt is_expander, CInt is_expanded) @extern ("gtk_tree_view_column_cell_set_cell_data");
fn void TreeViewColumn.clear (TreeViewColumn* self) @extern ("gtk_tree_view_column_clear");
fn void TreeViewColumn.clear_attributes (TreeViewColumn* self, CellRenderer* cell_renderer) @extern ("gtk_tree_view_column_clear_attributes");
fn void TreeViewColumn.clicked (TreeViewColumn* self) @extern ("gtk_tree_view_column_clicked");
fn void TreeViewColumn.focus_cell (TreeViewColumn* self, CellRenderer* cell) @extern ("gtk_tree_view_column_focus_cell");
fn float TreeViewColumn.get_alignment (TreeViewColumn* self) @extern ("gtk_tree_view_column_get_alignment");
fn Widget* TreeViewColumn.get_button (TreeViewColumn* self) @extern ("gtk_tree_view_column_get_button");
fn CInt TreeViewColumn.get_clickable (TreeViewColumn* self) @extern ("gtk_tree_view_column_get_clickable");
fn CInt TreeViewColumn.get_expand (TreeViewColumn* self) @extern ("gtk_tree_view_column_get_expand");
fn int TreeViewColumn.get_fixed_width (TreeViewColumn* self) @extern ("gtk_tree_view_column_get_fixed_width");
fn int TreeViewColumn.get_max_width (TreeViewColumn* self) @extern ("gtk_tree_view_column_get_max_width");
fn int TreeViewColumn.get_min_width (TreeViewColumn* self) @extern ("gtk_tree_view_column_get_min_width");
fn CInt TreeViewColumn.get_reorderable (TreeViewColumn* self) @extern ("gtk_tree_view_column_get_reorderable");
fn CInt TreeViewColumn.get_resizable (TreeViewColumn* self) @extern ("gtk_tree_view_column_get_resizable");
fn TreeViewColumnSizing TreeViewColumn.get_sizing (TreeViewColumn* self) @extern ("gtk_tree_view_column_get_sizing");
fn int TreeViewColumn.get_sort_column_id (TreeViewColumn* self) @extern ("gtk_tree_view_column_get_sort_column_id");
fn CInt TreeViewColumn.get_sort_indicator (TreeViewColumn* self) @extern ("gtk_tree_view_column_get_sort_indicator");
fn SortType TreeViewColumn.get_sort_order (TreeViewColumn* self) @extern ("gtk_tree_view_column_get_sort_order");
fn int TreeViewColumn.get_spacing (TreeViewColumn* self) @extern ("gtk_tree_view_column_get_spacing");
fn ZString TreeViewColumn.get_title (TreeViewColumn* self) @extern ("gtk_tree_view_column_get_title");
fn Widget* TreeViewColumn.get_tree_view (TreeViewColumn* self) @extern ("gtk_tree_view_column_get_tree_view");
fn CInt TreeViewColumn.get_visible (TreeViewColumn* self) @extern ("gtk_tree_view_column_get_visible");
fn Widget* TreeViewColumn.get_widget (TreeViewColumn* self) @extern ("gtk_tree_view_column_get_widget");
fn int TreeViewColumn.get_width (TreeViewColumn* self) @extern ("gtk_tree_view_column_get_width");
fn int TreeViewColumn.get_x_offset (TreeViewColumn* self) @extern ("gtk_tree_view_column_get_x_offset");
fn void TreeViewColumn.pack_end (TreeViewColumn* self, CellRenderer* cell, CInt expand) @extern ("gtk_tree_view_column_pack_end");
fn void TreeViewColumn.pack_start (TreeViewColumn* self, CellRenderer* cell, CInt expand) @extern ("gtk_tree_view_column_pack_start");
fn void TreeViewColumn.queue_resize (TreeViewColumn* self) @extern ("gtk_tree_view_column_queue_resize");
fn void TreeViewColumn.set_alignment (TreeViewColumn* self, float xalign) @extern ("gtk_tree_view_column_set_alignment");
fn void TreeViewColumn.set_cell_data_func (TreeViewColumn* self, CellRenderer* cell_renderer, TreeCellDataFunc func, void* func_data, DestroyNotify destroy) @extern ("gtk_tree_view_column_set_cell_data_func");
fn void TreeViewColumn.set_clickable (TreeViewColumn* self, CInt clickable) @extern ("gtk_tree_view_column_set_clickable");
fn void TreeViewColumn.set_expand (TreeViewColumn* self, CInt expand) @extern ("gtk_tree_view_column_set_expand");
fn void TreeViewColumn.set_fixed_width (TreeViewColumn* self, int fixed_width) @extern ("gtk_tree_view_column_set_fixed_width");
fn void TreeViewColumn.set_max_width (TreeViewColumn* self, int max_width) @extern ("gtk_tree_view_column_set_max_width");
fn void TreeViewColumn.set_min_width (TreeViewColumn* self, int min_width) @extern ("gtk_tree_view_column_set_min_width");
fn void TreeViewColumn.set_reorderable (TreeViewColumn* self, CInt reorderable) @extern ("gtk_tree_view_column_set_reorderable");
fn void TreeViewColumn.set_resizable (TreeViewColumn* self, CInt resizable) @extern ("gtk_tree_view_column_set_resizable");
fn void TreeViewColumn.set_sizing (TreeViewColumn* self, TreeViewColumnSizing type) @extern ("gtk_tree_view_column_set_sizing");
fn void TreeViewColumn.set_sort_column_id (TreeViewColumn* self, int sort_column_id) @extern ("gtk_tree_view_column_set_sort_column_id");
fn void TreeViewColumn.set_sort_indicator (TreeViewColumn* self, CInt setting) @extern ("gtk_tree_view_column_set_sort_indicator");
fn void TreeViewColumn.set_sort_order (TreeViewColumn* self, SortType order) @extern ("gtk_tree_view_column_set_sort_order");
fn void TreeViewColumn.set_spacing (TreeViewColumn* self, int spacing) @extern ("gtk_tree_view_column_set_spacing");
fn void TreeViewColumn.set_title (TreeViewColumn* self, ZString title) @extern ("gtk_tree_view_column_set_title");
fn void TreeViewColumn.set_visible (TreeViewColumn* self, CInt visible) @extern ("gtk_tree_view_column_set_visible");
fn void TreeViewColumn.set_widget (TreeViewColumn* self, Widget* widget) @extern ("gtk_tree_view_column_set_widget");
	19 properties
	1 signals
	1 virtuals
def TreeViewColumnDropFunc = fn CInt (TreeView* tree_view, TreeViewColumn* column, TreeViewColumn* prev_column, TreeViewColumn* next_column, void* data) @export;
def TreeViewColumnPrivate = void;


enum TreeViewColumnSizing {
	GROW_ONLY,
	AUTOSIZE,
	FIXED
}


enum TreeViewDropPosition {
	BEFORE,
	AFTER,
	INTO_OR_BEFORE,
	INTO_OR_AFTER
}


enum TreeViewGridLines {
	NONE,
	HORIZONTAL,
	VERTICAL,
	BOTH
}

def TreeViewMappingFunc = fn void (TreeView* tree_view, TreePath* path, void* user_data) @export;
def TreeViewPrivate = void;

def TreeViewRowSeparatorFunc = fn CInt ([not parsed]* model, TreeIter* iter, void* data) @export;
def TreeViewSearchEqualFunc = fn CInt ([not parsed]* model, int column, ZString key, TreeIter* iter, void* search_data) @export;
def TreeViewSearchPositionFunc = fn void (TreeView* tree_view, Widget* search_dialog, void* user_data) @export;
struct UIManager (Buildable) {
	inline Object parent;
	UIManagerPrivate* private_data;
}

fn UIManager* UIManager.new () @operator (construct) @extern ("gtk_ui_manager_new");
fn void UIManager.add_ui (UIManager* self, uint merge_id, ZString path, ZString name, ZString action, UIManagerItemType type, CInt top) @extern ("gtk_ui_manager_add_ui");
fn uint UIManager.add_ui_from_file (UIManager* self, ZString* filename) @extern ("gtk_ui_manager_add_ui_from_file");
fn uint UIManager.add_ui_from_resource (UIManager* self, ZString resource_path) @extern ("gtk_ui_manager_add_ui_from_resource");
fn uint UIManager.add_ui_from_string (UIManager* self, ZString buffer, long length) @extern ("gtk_ui_manager_add_ui_from_string");
fn void UIManager.ensure_update (UIManager* self) @extern ("gtk_ui_manager_ensure_update");
fn AccelGroup* UIManager.get_accel_group (UIManager* self) @extern ("gtk_ui_manager_get_accel_group");
fn Action* UIManager.get_action (UIManager* self, ZString path) @extern ("gtk_ui_manager_get_action");
fn List* UIManager.get_action_groups (UIManager* self) @extern ("gtk_ui_manager_get_action_groups");
fn CInt UIManager.get_add_tearoffs (UIManager* self) @extern ("gtk_ui_manager_get_add_tearoffs");
fn SList* UIManager.get_toplevels (UIManager* self, UIManagerItemType types) @extern ("gtk_ui_manager_get_toplevels");
fn ZString UIManager.get_ui (UIManager* self) @extern ("gtk_ui_manager_get_ui");
fn Widget* UIManager.get_widget (UIManager* self, ZString path) @extern ("gtk_ui_manager_get_widget");
fn void UIManager.insert_action_group (UIManager* self, ActionGroup* action_group, int pos) @extern ("gtk_ui_manager_insert_action_group");
fn uint UIManager.new_merge_id (UIManager* self) @extern ("gtk_ui_manager_new_merge_id");
fn void UIManager.remove_action_group (UIManager* self, ActionGroup* action_group) @extern ("gtk_ui_manager_remove_action_group");
fn void UIManager.remove_ui (UIManager* self, uint merge_id) @extern ("gtk_ui_manager_remove_ui");
fn void UIManager.set_add_tearoffs (UIManager* self, CInt add_tearoffs) @extern ("gtk_ui_manager_set_add_tearoffs");
	2 properties
	6 signals
	8 virtuals
enum UIManagerItemType: CInt (inline CInt bit) {
	AUTO = 0,
	MENUBAR = 1,
	MENU = 2,
	TOOLBAR = 4,
	PLACEHOLDER = 8,
	POPUP = 16,
	MENUITEM = 32,
	TOOLITEM = 64,
	SEPARATOR = 128,
	ACCELERATOR = 256,
	POPUP_WITH_ACCELS = 512
}

def UIManagerPrivate = void;


enum Unit {
	NONE,
	POINTS,
	INCH,
	MM
}

struct VBox (ImplementorIface, Buildable, Orientable) {
	inline Box box;
}

fn Widget* VBox.new (CInt homogeneous, int spacing) @operator (construct) @extern ("gtk_vbox_new");
struct VButtonBox (ImplementorIface, Buildable, Orientable) {
	inline ButtonBox button_box;
}

fn Widget* VButtonBox.new () @operator (construct) @extern ("gtk_vbutton_box_new");
struct VPaned (ImplementorIface, Buildable, Orientable) {
	inline Paned paned;
}

fn Widget* VPaned.new () @operator (construct) @extern ("gtk_vpaned_new");
struct VScale (ImplementorIface, Buildable, Orientable) {
	inline Scale scale;
}

fn Widget* VScale.new (Adjustment* adjustment) @operator (construct) @extern ("gtk_vscale_new");
fn Widget* VScale.new_with_range (double min, double max, double step) @operator (construct) @extern ("gtk_vscale_new_with_range");
struct VScrollbar (ImplementorIface, Buildable, Orientable) {
	inline Scrollbar scrollbar;
}

fn Widget* VScrollbar.new (Adjustment* adjustment) @operator (construct) @extern ("gtk_vscrollbar_new");
struct VSeparator (ImplementorIface, Buildable, Orientable) {
	inline Separator separator;
}

fn Widget* VSeparator.new () @operator (construct) @extern ("gtk_vseparator_new");
struct Viewport (ImplementorIface, Buildable, Scrollable) {
	inline Bin bin;
	ViewportPrivate* priv;
}

fn Widget* Viewport.new (Adjustment* hadjustment, Adjustment* vadjustment) @operator (construct) @extern ("gtk_viewport_new");
fn gdk::Window* Viewport.get_bin_window (Viewport* self) @extern ("gtk_viewport_get_bin_window");
fn Adjustment* Viewport.get_hadjustment (Viewport* self) @extern ("gtk_viewport_get_hadjustment");
fn ShadowType Viewport.get_shadow_type (Viewport* self) @extern ("gtk_viewport_get_shadow_type");
fn Adjustment* Viewport.get_vadjustment (Viewport* self) @extern ("gtk_viewport_get_vadjustment");
fn gdk::Window* Viewport.get_view_window (Viewport* self) @extern ("gtk_viewport_get_view_window");
fn void Viewport.set_hadjustment (Viewport* self, Adjustment* adjustment) @extern ("gtk_viewport_set_hadjustment");
fn void Viewport.set_shadow_type (Viewport* self, ShadowType type) @extern ("gtk_viewport_set_shadow_type");
fn void Viewport.set_vadjustment (Viewport* self, Adjustment* adjustment) @extern ("gtk_viewport_set_vadjustment");
	1 properties
def ViewportPrivate = void;

struct VolumeButton (ImplementorIface, Actionable, Activatable, Buildable, Orientable) {
	inline ScaleButton parent;
}

fn Widget* VolumeButton.new () @operator (construct) @extern ("gtk_volume_button_new");
	1 properties
struct Widget (ImplementorIface, Buildable) {
	inline InitiallyUnowned parent_instance;
	WidgetPrivate* priv;
}

fn TextDirection Widget.get_default_direction (Widget* self) @extern ("gtk_widget_get_default_direction");
fn Style* Widget.get_default_style (Widget* self) @extern ("gtk_widget_get_default_style");
fn void Widget.pop_composite_child (Widget* self) @extern ("gtk_widget_pop_composite_child");
fn void Widget.push_composite_child (Widget* self) @extern ("gtk_widget_push_composite_child");
fn void Widget.set_default_direction (Widget* self, TextDirection dir) @extern ("gtk_widget_set_default_direction");
fn CInt Widget.activate (Widget* self) @extern ("gtk_widget_activate");
fn void Widget.add_accelerator (Widget* self, ZString accel_signal, AccelGroup* accel_group, uint accel_key, gdk::ModifierType accel_mods, AccelFlags accel_flags) @extern ("gtk_widget_add_accelerator");
fn void Widget.add_device_events (Widget* self, gdk::Device* device, gdk::EventMask events) @extern ("gtk_widget_add_device_events");
fn void Widget.add_events (Widget* self, int events) @extern ("gtk_widget_add_events");
fn void Widget.add_mnemonic_label (Widget* self, Widget* label) @extern ("gtk_widget_add_mnemonic_label");
fn uint Widget.add_tick_callback (Widget* self, TickCallback callback, void* user_data, DestroyNotify notify) @extern ("gtk_widget_add_tick_callback");
fn CInt Widget.can_activate_accel (Widget* self, uint signal_id) @extern ("gtk_widget_can_activate_accel");
fn CInt Widget.child_focus (Widget* self, DirectionType direction) @extern ("gtk_widget_child_focus");
fn void Widget.child_notify (Widget* self, ZString child_property) @extern ("gtk_widget_child_notify");
fn void Widget.class_path (Widget* self, uint path_length, ZString path, ZString path_reversed) @extern ("gtk_widget_class_path");
fn CInt Widget.compute_expand (Widget* self, Orientation orientation) @extern ("gtk_widget_compute_expand");
fn Context* Widget.create_pango_context (Widget* self) @extern ("gtk_widget_create_pango_context");
fn Layout* Widget.create_pango_layout (Widget* self, ZString text) @extern ("gtk_widget_create_pango_layout");
fn void Widget.destroy (Widget* self) @extern ("gtk_widget_destroy");
fn void Widget.destroyed (Widget* self, Widget* widget_pointer) @extern ("gtk_widget_destroyed");
fn CInt Widget.device_is_shadowed (Widget* self, gdk::Device* device) @extern ("gtk_widget_device_is_shadowed");
fn gdk::DragContext* Widget.drag_begin (Widget* self, TargetList* targets, gdk::DragAction actions, int button, gdk::Event* event) @extern ("gtk_drag_begin");
fn gdk::DragContext* Widget.drag_begin_with_coordinates (Widget* self, TargetList* targets, gdk::DragAction actions, int button, gdk::Event* event, int x, int y) @extern ("gtk_drag_begin_with_coordinates");
fn CInt Widget.drag_check_threshold (Widget* self, int start_x, int start_y, int current_x, int current_y) @extern ("gtk_drag_check_threshold");
fn void Widget.drag_dest_add_image_targets (Widget* self) @extern ("gtk_drag_dest_add_image_targets");
fn void Widget.drag_dest_add_text_targets (Widget* self) @extern ("gtk_drag_dest_add_text_targets");
fn void Widget.drag_dest_add_uri_targets (Widget* self) @extern ("gtk_drag_dest_add_uri_targets");
fn gdk::Atom* Widget.drag_dest_find_target (Widget* self, gdk::DragContext* context, TargetList* target_list) @extern ("gtk_drag_dest_find_target");
fn TargetList* Widget.drag_dest_get_target_list (Widget* self) @extern ("gtk_drag_dest_get_target_list");
fn CInt Widget.drag_dest_get_track_motion (Widget* self) @extern ("gtk_drag_dest_get_track_motion");
fn void Widget.drag_dest_set (Widget* self, DestDefaults flags, char** targets, int n_targets, gdk::DragAction actions) @extern ("gtk_drag_dest_set");
fn void Widget.drag_dest_set_proxy (Widget* self, gdk::Window* proxy_window, gdk::DragProtocol protocol, CInt use_coordinates) @extern ("gtk_drag_dest_set_proxy");
fn void Widget.drag_dest_set_target_list (Widget* self, TargetList* target_list) @extern ("gtk_drag_dest_set_target_list");
fn void Widget.drag_dest_set_track_motion (Widget* self, CInt track_motion) @extern ("gtk_drag_dest_set_track_motion");
fn void Widget.drag_dest_unset (Widget* self) @extern ("gtk_drag_dest_unset");
fn void Widget.drag_get_data (Widget* self, gdk::DragContext* context, gdk::Atom* target, uint time_) @extern ("gtk_drag_get_data");
fn void Widget.drag_highlight (Widget* self) @extern ("gtk_drag_highlight");
fn void Widget.drag_source_add_image_targets (Widget* self) @extern ("gtk_drag_source_add_image_targets");
fn void Widget.drag_source_add_text_targets (Widget* self) @extern ("gtk_drag_source_add_text_targets");
fn void Widget.drag_source_add_uri_targets (Widget* self) @extern ("gtk_drag_source_add_uri_targets");
fn TargetList* Widget.drag_source_get_target_list (Widget* self) @extern ("gtk_drag_source_get_target_list");
fn void Widget.drag_source_set (Widget* self, gdk::ModifierType start_button_mask, char** targets, int n_targets, gdk::DragAction actions) @extern ("gtk_drag_source_set");
fn void Widget.drag_source_set_icon_gicon (Widget* self, [not parsed]* icon) @extern ("gtk_drag_source_set_icon_gicon");
fn void Widget.drag_source_set_icon_name (Widget* self, ZString icon_name) @extern ("gtk_drag_source_set_icon_name");
fn void Widget.drag_source_set_icon_pixbuf (Widget* self, Pixbuf* pixbuf) @extern ("gtk_drag_source_set_icon_pixbuf");
fn void Widget.drag_source_set_icon_stock (Widget* self, ZString stock_id) @extern ("gtk_drag_source_set_icon_stock");
fn void Widget.drag_source_set_target_list (Widget* self, TargetList* target_list) @extern ("gtk_drag_source_set_target_list");
fn void Widget.drag_source_unset (Widget* self) @extern ("gtk_drag_source_unset");
fn void Widget.drag_unhighlight (Widget* self) @extern ("gtk_drag_unhighlight");
fn void Widget.draw (Widget* self, Context* cr) @extern ("gtk_widget_draw");
fn void Widget.ensure_style (Widget* self) @extern ("gtk_widget_ensure_style");
fn void Widget.error_bell (Widget* self) @extern ("gtk_widget_error_bell");
fn CInt Widget.event (Widget* self, gdk::Event* event) @extern ("gtk_widget_event");
fn void Widget.freeze_child_notify (Widget* self) @extern ("gtk_widget_freeze_child_notify");
fn atk::Object* Widget.get_accessible (Widget* self) @extern ("gtk_widget_get_accessible");
fn [not parsed]* Widget.get_action_group (Widget* self, ZString prefix) @extern ("gtk_widget_get_action_group");
fn int Widget.get_allocated_baseline (Widget* self) @extern ("gtk_widget_get_allocated_baseline");
fn int Widget.get_allocated_height (Widget* self) @extern ("gtk_widget_get_allocated_height");
fn void Widget.get_allocated_size (Widget* self, gdk::Rectangle allocation, int baseline) @extern ("gtk_widget_get_allocated_size");
fn int Widget.get_allocated_width (Widget* self) @extern ("gtk_widget_get_allocated_width");
fn void Widget.get_allocation (Widget* self, gdk::Rectangle allocation) @extern ("gtk_widget_get_allocation");
fn Widget* Widget.get_ancestor (Widget* self, GType widget_type) @extern ("gtk_widget_get_ancestor");
fn CInt Widget.get_app_paintable (Widget* self) @extern ("gtk_widget_get_app_paintable");
fn CInt Widget.get_can_default (Widget* self) @extern ("gtk_widget_get_can_default");
fn CInt Widget.get_can_focus (Widget* self) @extern ("gtk_widget_get_can_focus");
fn void Widget.get_child_requisition (Widget* self, Requisition requisition) @extern ("gtk_widget_get_child_requisition");
fn CInt Widget.get_child_visible (Widget* self) @extern ("gtk_widget_get_child_visible");
fn void Widget.get_clip (Widget* self, gdk::Rectangle clip) @extern ("gtk_widget_get_clip");
fn Clipboard* Widget.get_clipboard (Widget* self, gdk::Atom* selection) @extern ("gtk_widget_get_clipboard");
fn ZString Widget.get_composite_name (Widget* self) @extern ("gtk_widget_get_composite_name");
fn CInt Widget.get_device_enabled (Widget* self, gdk::Device* device) @extern ("gtk_widget_get_device_enabled");
fn gdk::EventMask Widget.get_device_events (Widget* self, gdk::Device* device) @extern ("gtk_widget_get_device_events");
fn TextDirection Widget.get_direction (Widget* self) @extern ("gtk_widget_get_direction");
fn gdk::Display* Widget.get_display (Widget* self) @extern ("gtk_widget_get_display");
fn CInt Widget.get_double_buffered (Widget* self) @extern ("gtk_widget_get_double_buffered");
fn int Widget.get_events (Widget* self) @extern ("gtk_widget_get_events");
fn CInt Widget.get_focus_on_click (Widget* self) @extern ("gtk_widget_get_focus_on_click");
fn FontMap* Widget.get_font_map (Widget* self) @extern ("gtk_widget_get_font_map");
fn FontOptions* Widget.get_font_options (Widget* self) @extern ("gtk_widget_get_font_options");
fn gdk::FrameClock* Widget.get_frame_clock (Widget* self) @extern ("gtk_widget_get_frame_clock");
fn Align Widget.get_halign (Widget* self) @extern ("gtk_widget_get_halign");
fn CInt Widget.get_has_tooltip (Widget* self) @extern ("gtk_widget_get_has_tooltip");
fn CInt Widget.get_has_window (Widget* self) @extern ("gtk_widget_get_has_window");
fn CInt Widget.get_hexpand (Widget* self) @extern ("gtk_widget_get_hexpand");
fn CInt Widget.get_hexpand_set (Widget* self) @extern ("gtk_widget_get_hexpand_set");
fn CInt Widget.get_mapped (Widget* self) @extern ("gtk_widget_get_mapped");
fn int Widget.get_margin_bottom (Widget* self) @extern ("gtk_widget_get_margin_bottom");
fn int Widget.get_margin_end (Widget* self) @extern ("gtk_widget_get_margin_end");
fn int Widget.get_margin_left (Widget* self) @extern ("gtk_widget_get_margin_left");
fn int Widget.get_margin_right (Widget* self) @extern ("gtk_widget_get_margin_right");
fn int Widget.get_margin_start (Widget* self) @extern ("gtk_widget_get_margin_start");
fn int Widget.get_margin_top (Widget* self) @extern ("gtk_widget_get_margin_top");
fn gdk::ModifierType Widget.get_modifier_mask (Widget* self, gdk::ModifierIntent intent) @extern ("gtk_widget_get_modifier_mask");
fn RcStyle* Widget.get_modifier_style (Widget* self) @extern ("gtk_widget_get_modifier_style");
fn ZString Widget.get_name (Widget* self) @extern ("gtk_widget_get_name");
fn CInt Widget.get_no_show_all (Widget* self) @extern ("gtk_widget_get_no_show_all");
fn double Widget.get_opacity (Widget* self) @extern ("gtk_widget_get_opacity");
fn Context* Widget.get_pango_context (Widget* self) @extern ("gtk_widget_get_pango_context");
fn Widget* Widget.get_parent (Widget* self) @extern ("gtk_widget_get_parent");
fn gdk::Window* Widget.get_parent_window (Widget* self) @extern ("gtk_widget_get_parent_window");
fn WidgetPath* Widget.get_path (Widget* self) @extern ("gtk_widget_get_path");
fn void Widget.get_pointer (Widget* self, int x, int y) @extern ("gtk_widget_get_pointer");
fn void Widget.get_preferred_height (Widget* self, int minimum_height, int natural_height) @extern ("gtk_widget_get_preferred_height");
fn void Widget.get_preferred_height_and_baseline_for_width (Widget* self, int width, int minimum_height, int natural_height, int minimum_baseline, int natural_baseline) @extern ("gtk_widget_get_preferred_height_and_baseline_for_width");
fn void Widget.get_preferred_height_for_width (Widget* self, int width, int minimum_height, int natural_height) @extern ("gtk_widget_get_preferred_height_for_width");
fn void Widget.get_preferred_size (Widget* self, Requisition minimum_size, Requisition natural_size) @extern ("gtk_widget_get_preferred_size");
fn void Widget.get_preferred_width (Widget* self, int minimum_width, int natural_width) @extern ("gtk_widget_get_preferred_width");
fn void Widget.get_preferred_width_for_height (Widget* self, int height, int minimum_width, int natural_width) @extern ("gtk_widget_get_preferred_width_for_height");
fn CInt Widget.get_realized (Widget* self) @extern ("gtk_widget_get_realized");
fn CInt Widget.get_receives_default (Widget* self) @extern ("gtk_widget_get_receives_default");
fn SizeRequestMode Widget.get_request_mode (Widget* self) @extern ("gtk_widget_get_request_mode");
fn void Widget.get_requisition (Widget* self, Requisition requisition) @extern ("gtk_widget_get_requisition");
fn gdk::Window* Widget.get_root_window (Widget* self) @extern ("gtk_widget_get_root_window");
fn int Widget.get_scale_factor (Widget* self) @extern ("gtk_widget_get_scale_factor");
fn gdk::Screen* Widget.get_screen (Widget* self) @extern ("gtk_widget_get_screen");
fn CInt Widget.get_sensitive (Widget* self) @extern ("gtk_widget_get_sensitive");
fn Settings* Widget.get_settings (Widget* self) @extern ("gtk_widget_get_settings");
fn void Widget.get_size_request (Widget* self, int width, int height) @extern ("gtk_widget_get_size_request");
fn StateType Widget.get_state (Widget* self) @extern ("gtk_widget_get_state");
fn StateFlags Widget.get_state_flags (Widget* self) @extern ("gtk_widget_get_state_flags");
fn Style* Widget.get_style (Widget* self) @extern ("gtk_widget_get_style");
fn StyleContext* Widget.get_style_context (Widget* self) @extern ("gtk_widget_get_style_context");
fn CInt Widget.get_support_multidevice (Widget* self) @extern ("gtk_widget_get_support_multidevice");
fn Object* Widget.get_template_child (Widget* self, GType widget_type, ZString name) @extern ("gtk_widget_get_template_child");
fn ZString Widget.get_tooltip_markup (Widget* self) @extern ("gtk_widget_get_tooltip_markup");
fn ZString Widget.get_tooltip_text (Widget* self) @extern ("gtk_widget_get_tooltip_text");
fn Window* Widget.get_tooltip_window (Widget* self) @extern ("gtk_widget_get_tooltip_window");
fn Widget* Widget.get_toplevel (Widget* self) @extern ("gtk_widget_get_toplevel");
fn Align Widget.get_valign (Widget* self) @extern ("gtk_widget_get_valign");
fn Align Widget.get_valign_with_baseline (Widget* self) @extern ("gtk_widget_get_valign_with_baseline");
fn CInt Widget.get_vexpand (Widget* self) @extern ("gtk_widget_get_vexpand");
fn CInt Widget.get_vexpand_set (Widget* self) @extern ("gtk_widget_get_vexpand_set");
fn CInt Widget.get_visible (Widget* self) @extern ("gtk_widget_get_visible");
fn gdk::Visual* Widget.get_visual (Widget* self) @extern ("gtk_widget_get_visual");
fn gdk::Window* Widget.get_window (Widget* self) @extern ("gtk_widget_get_window");
fn void Widget.grab_add (Widget* self) @extern ("gtk_grab_add");
fn void Widget.grab_default (Widget* self) @extern ("gtk_widget_grab_default");
fn void Widget.grab_focus (Widget* self) @extern ("gtk_widget_grab_focus");
fn void Widget.grab_remove (Widget* self) @extern ("gtk_grab_remove");
fn CInt Widget.has_default (Widget* self) @extern ("gtk_widget_has_default");
fn CInt Widget.has_focus (Widget* self) @extern ("gtk_widget_has_focus");
fn CInt Widget.has_grab (Widget* self) @extern ("gtk_widget_has_grab");
fn CInt Widget.has_rc_style (Widget* self) @extern ("gtk_widget_has_rc_style");
fn CInt Widget.has_screen (Widget* self) @extern ("gtk_widget_has_screen");
fn CInt Widget.has_visible_focus (Widget* self) @extern ("gtk_widget_has_visible_focus");
fn void Widget.hide (Widget* self) @extern ("gtk_widget_hide");
fn CInt Widget.hide_on_delete (Widget* self) @extern ("gtk_widget_hide_on_delete");
fn CInt Widget.in_destruction (Widget* self) @extern ("gtk_widget_in_destruction");
fn void Widget.init_template (Widget* self) @extern ("gtk_widget_init_template");
fn void Widget.input_shape_combine_region (Widget* self, Region* region) @extern ("gtk_widget_input_shape_combine_region");
fn void Widget.insert_action_group (Widget* self, ZString name, [not parsed]* group) @extern ("gtk_widget_insert_action_group");
fn CInt Widget.intersect (Widget* self, gdk::Rectangle* area, gdk::Rectangle intersection) @extern ("gtk_widget_intersect");
fn CInt Widget.is_ancestor (Widget* self, Widget* ancestor) @extern ("gtk_widget_is_ancestor");
fn CInt Widget.is_composited (Widget* self) @extern ("gtk_widget_is_composited");
fn CInt Widget.is_drawable (Widget* self) @extern ("gtk_widget_is_drawable");
fn CInt Widget.is_focus (Widget* self) @extern ("gtk_widget_is_focus");
fn CInt Widget.is_sensitive (Widget* self) @extern ("gtk_widget_is_sensitive");
fn CInt Widget.is_toplevel (Widget* self) @extern ("gtk_widget_is_toplevel");
fn CInt Widget.is_visible (Widget* self) @extern ("gtk_widget_is_visible");
fn CInt Widget.keynav_failed (Widget* self, DirectionType direction) @extern ("gtk_widget_keynav_failed");
fn List* Widget.list_accel_closures (Widget* self) @extern ("gtk_widget_list_accel_closures");
fn char** Widget.list_action_prefixes (Widget* self) @extern ("gtk_widget_list_action_prefixes");
fn List* Widget.list_mnemonic_labels (Widget* self) @extern ("gtk_widget_list_mnemonic_labels");
fn void Widget.map (Widget* self) @extern ("gtk_widget_map");
fn CInt Widget.mnemonic_activate (Widget* self, CInt group_cycling) @extern ("gtk_widget_mnemonic_activate");
fn void Widget.modify_base (Widget* self, StateType state, gdk::Color* color) @extern ("gtk_widget_modify_base");
fn void Widget.modify_bg (Widget* self, StateType state, gdk::Color* color) @extern ("gtk_widget_modify_bg");
fn void Widget.modify_cursor (Widget* self, gdk::Color* primary, gdk::Color* secondary) @extern ("gtk_widget_modify_cursor");
fn void Widget.modify_fg (Widget* self, StateType state, gdk::Color* color) @extern ("gtk_widget_modify_fg");
fn void Widget.modify_font (Widget* self, FontDescription* font_desc) @extern ("gtk_widget_modify_font");
fn void Widget.modify_style (Widget* self, RcStyle* style) @extern ("gtk_widget_modify_style");
fn void Widget.modify_text (Widget* self, StateType state, gdk::Color* color) @extern ("gtk_widget_modify_text");
fn void Widget.override_background_color (Widget* self, StateFlags state, gdk::RGBA* color) @extern ("gtk_widget_override_background_color");
fn void Widget.override_color (Widget* self, StateFlags state, gdk::RGBA* color) @extern ("gtk_widget_override_color");
fn void Widget.override_cursor (Widget* self, gdk::RGBA* cursor, gdk::RGBA* secondary_cursor) @extern ("gtk_widget_override_cursor");
fn void Widget.override_font (Widget* self, FontDescription* font_desc) @extern ("gtk_widget_override_font");
fn void Widget.override_symbolic_color (Widget* self, ZString name, gdk::RGBA* color) @extern ("gtk_widget_override_symbolic_color");
fn void Widget.path (Widget* self, uint path_length, ZString path, ZString path_reversed) @extern ("gtk_widget_path");
fn void Widget.queue_allocate (Widget* self) @extern ("gtk_widget_queue_allocate");
fn void Widget.queue_compute_expand (Widget* self) @extern ("gtk_widget_queue_compute_expand");
fn void Widget.queue_draw (Widget* self) @extern ("gtk_widget_queue_draw");
fn void Widget.queue_draw_area (Widget* self, int x, int y, int width, int height) @extern ("gtk_widget_queue_draw_area");
fn void Widget.queue_draw_region (Widget* self, Region* region) @extern ("gtk_widget_queue_draw_region");
fn void Widget.queue_resize (Widget* self) @extern ("gtk_widget_queue_resize");
fn void Widget.queue_resize_no_redraw (Widget* self) @extern ("gtk_widget_queue_resize_no_redraw");
fn void Widget.realize (Widget* self) @extern ("gtk_widget_realize");
fn Region* Widget.region_intersect (Widget* self, Region* region) @extern ("gtk_widget_region_intersect");
fn void Widget.register_window (Widget* self, gdk::Window* window) @extern ("gtk_widget_register_window");
fn CInt Widget.remove_accelerator (Widget* self, AccelGroup* accel_group, uint accel_key, gdk::ModifierType accel_mods) @extern ("gtk_widget_remove_accelerator");
fn void Widget.remove_mnemonic_label (Widget* self, Widget* label) @extern ("gtk_widget_remove_mnemonic_label");
fn void Widget.remove_tick_callback (Widget* self, uint id) @extern ("gtk_widget_remove_tick_callback");
fn Pixbuf* Widget.render_icon (Widget* self, ZString stock_id, int size, ZString detail) @extern ("gtk_widget_render_icon");
fn Pixbuf* Widget.render_icon_pixbuf (Widget* self, ZString stock_id, int size) @extern ("gtk_widget_render_icon_pixbuf");
fn void Widget.reparent (Widget* self, Widget* new_parent) @extern ("gtk_widget_reparent");
fn void Widget.reset_rc_styles (Widget* self) @extern ("gtk_widget_reset_rc_styles");
fn void Widget.reset_style (Widget* self) @extern ("gtk_widget_reset_style");
fn int Widget.send_expose (Widget* self, gdk::Event* event) @extern ("gtk_widget_send_expose");
fn CInt Widget.send_focus_change (Widget* self, gdk::Event* event) @extern ("gtk_widget_send_focus_change");
fn void Widget.set_accel_path (Widget* self, ZString accel_path, AccelGroup* accel_group) @extern ("gtk_widget_set_accel_path");
fn void Widget.set_allocation (Widget* self, gdk::Rectangle* allocation) @extern ("gtk_widget_set_allocation");
fn void Widget.set_app_paintable (Widget* self, CInt app_paintable) @extern ("gtk_widget_set_app_paintable");
fn void Widget.set_can_default (Widget* self, CInt can_default) @extern ("gtk_widget_set_can_default");
fn void Widget.set_can_focus (Widget* self, CInt can_focus) @extern ("gtk_widget_set_can_focus");
fn void Widget.set_child_visible (Widget* self, CInt is_visible) @extern ("gtk_widget_set_child_visible");
fn void Widget.set_clip (Widget* self, gdk::Rectangle* clip) @extern ("gtk_widget_set_clip");
fn void Widget.set_composite_name (Widget* self, ZString name) @extern ("gtk_widget_set_composite_name");
fn void Widget.set_device_enabled (Widget* self, gdk::Device* device, CInt enabled) @extern ("gtk_widget_set_device_enabled");
fn void Widget.set_device_events (Widget* self, gdk::Device* device, gdk::EventMask events) @extern ("gtk_widget_set_device_events");
fn void Widget.set_direction (Widget* self, TextDirection dir) @extern ("gtk_widget_set_direction");
fn void Widget.set_double_buffered (Widget* self, CInt double_buffered) @extern ("gtk_widget_set_double_buffered");
fn void Widget.set_events (Widget* self, int events) @extern ("gtk_widget_set_events");
fn void Widget.set_focus_on_click (Widget* self, CInt focus_on_click) @extern ("gtk_widget_set_focus_on_click");
fn void Widget.set_font_map (Widget* self, FontMap* font_map) @extern ("gtk_widget_set_font_map");
fn void Widget.set_font_options (Widget* self, FontOptions* options) @extern ("gtk_widget_set_font_options");
fn void Widget.set_halign (Widget* self, Align align) @extern ("gtk_widget_set_halign");
fn void Widget.set_has_tooltip (Widget* self, CInt has_tooltip) @extern ("gtk_widget_set_has_tooltip");
fn void Widget.set_has_window (Widget* self, CInt has_window) @extern ("gtk_widget_set_has_window");
fn void Widget.set_hexpand (Widget* self, CInt expand) @extern ("gtk_widget_set_hexpand");
fn void Widget.set_hexpand_set (Widget* self, CInt set) @extern ("gtk_widget_set_hexpand_set");
fn void Widget.set_mapped (Widget* self, CInt mapped) @extern ("gtk_widget_set_mapped");
fn void Widget.set_margin_bottom (Widget* self, int margin) @extern ("gtk_widget_set_margin_bottom");
fn void Widget.set_margin_end (Widget* self, int margin) @extern ("gtk_widget_set_margin_end");
fn void Widget.set_margin_left (Widget* self, int margin) @extern ("gtk_widget_set_margin_left");
fn void Widget.set_margin_right (Widget* self, int margin) @extern ("gtk_widget_set_margin_right");
fn void Widget.set_margin_start (Widget* self, int margin) @extern ("gtk_widget_set_margin_start");
fn void Widget.set_margin_top (Widget* self, int margin) @extern ("gtk_widget_set_margin_top");
fn void Widget.set_name (Widget* self, ZString name) @extern ("gtk_widget_set_name");
fn void Widget.set_no_show_all (Widget* self, CInt no_show_all) @extern ("gtk_widget_set_no_show_all");
fn void Widget.set_opacity (Widget* self, double opacity) @extern ("gtk_widget_set_opacity");
fn void Widget.set_parent (Widget* self, Widget* parent) @extern ("gtk_widget_set_parent");
fn void Widget.set_parent_window (Widget* self, gdk::Window* parent_window) @extern ("gtk_widget_set_parent_window");
fn void Widget.set_realized (Widget* self, CInt realized) @extern ("gtk_widget_set_realized");
fn void Widget.set_receives_default (Widget* self, CInt receives_default) @extern ("gtk_widget_set_receives_default");
fn void Widget.set_redraw_on_allocate (Widget* self, CInt redraw_on_allocate) @extern ("gtk_widget_set_redraw_on_allocate");
fn void Widget.set_sensitive (Widget* self, CInt sensitive) @extern ("gtk_widget_set_sensitive");
fn void Widget.set_size_request (Widget* self, int width, int height) @extern ("gtk_widget_set_size_request");
fn void Widget.set_state (Widget* self, StateType state) @extern ("gtk_widget_set_state");
fn void Widget.set_state_flags (Widget* self, StateFlags flags, CInt clear) @extern ("gtk_widget_set_state_flags");
fn void Widget.set_style (Widget* self, Style* style) @extern ("gtk_widget_set_style");
fn void Widget.set_support_multidevice (Widget* self, CInt support_multidevice) @extern ("gtk_widget_set_support_multidevice");
fn void Widget.set_tooltip_markup (Widget* self, ZString markup) @extern ("gtk_widget_set_tooltip_markup");
fn void Widget.set_tooltip_text (Widget* self, ZString text) @extern ("gtk_widget_set_tooltip_text");
fn void Widget.set_tooltip_window (Widget* self, Window* custom_window) @extern ("gtk_widget_set_tooltip_window");
fn void Widget.set_valign (Widget* self, Align align) @extern ("gtk_widget_set_valign");
fn void Widget.set_vexpand (Widget* self, CInt expand) @extern ("gtk_widget_set_vexpand");
fn void Widget.set_vexpand_set (Widget* self, CInt set) @extern ("gtk_widget_set_vexpand_set");
fn void Widget.set_visible (Widget* self, CInt visible) @extern ("gtk_widget_set_visible");
fn void Widget.set_visual (Widget* self, gdk::Visual* visual) @extern ("gtk_widget_set_visual");
fn void Widget.set_window (Widget* self, gdk::Window* window) @extern ("gtk_widget_set_window");
fn void Widget.shape_combine_region (Widget* self, Region* region) @extern ("gtk_widget_shape_combine_region");
fn void Widget.show (Widget* self) @extern ("gtk_widget_show");
fn void Widget.show_all (Widget* self) @extern ("gtk_widget_show_all");
fn void Widget.show_now (Widget* self) @extern ("gtk_widget_show_now");
fn void Widget.size_allocate (Widget* self, gdk::Rectangle* allocation) @extern ("gtk_widget_size_allocate");
fn void Widget.size_allocate_with_baseline (Widget* self, gdk::Rectangle* allocation, int baseline) @extern ("gtk_widget_size_allocate_with_baseline");
fn void Widget.size_request (Widget* self, Requisition requisition) @extern ("gtk_widget_size_request");
fn void Widget.style_attach (Widget* self) @extern ("gtk_widget_style_attach");
fn void Widget.style_get_property (Widget* self, ZString property_name, Value* value) @extern ("gtk_widget_style_get_property");
fn void Widget.thaw_child_notify (Widget* self) @extern ("gtk_widget_thaw_child_notify");
fn CInt Widget.translate_coordinates (Widget* self, Widget* dest_widget, int src_x, int src_y, int dest_x, int dest_y) @extern ("gtk_widget_translate_coordinates");
fn void Widget.trigger_tooltip_query (Widget* self) @extern ("gtk_widget_trigger_tooltip_query");
fn void Widget.unmap (Widget* self) @extern ("gtk_widget_unmap");
fn void Widget.unparent (Widget* self) @extern ("gtk_widget_unparent");
fn void Widget.unrealize (Widget* self) @extern ("gtk_widget_unrealize");
fn void Widget.unregister_window (Widget* self, gdk::Window* window) @extern ("gtk_widget_unregister_window");
fn void Widget.unset_state_flags (Widget* self, StateFlags flags) @extern ("gtk_widget_unset_state_flags");
	39 properties
	69 signals
	82 virtuals
def WidgetAccessible = void;
def WidgetAccessiblePrivate = void;

def WidgetClassPrivate = void;


enum WidgetHelpType {
	TOOLTIP,
	WHATS_THIS
}

struct WidgetPath {
	void* unused;
}

fn WidgetPath* WidgetPath.new () @operator (construct) @extern ("gtk_widget_path_new");
fn int WidgetPath.append_for_widget (WidgetPath* self, Widget* widget) @extern ("gtk_widget_path_append_for_widget");
fn int WidgetPath.append_type (WidgetPath* self, GType type) @extern ("gtk_widget_path_append_type");
fn int WidgetPath.append_with_siblings (WidgetPath* self, WidgetPath* siblings, uint sibling_index) @extern ("gtk_widget_path_append_with_siblings");
fn WidgetPath* WidgetPath.copy (WidgetPath* self) @extern ("gtk_widget_path_copy");
fn void WidgetPath.free (WidgetPath* self) @extern ("gtk_widget_path_free");
fn GType WidgetPath.get_object_type (WidgetPath* self) @extern ("gtk_widget_path_get_object_type");
fn CInt WidgetPath.has_parent (WidgetPath* self, GType type) @extern ("gtk_widget_path_has_parent");
fn CInt WidgetPath.is_type (WidgetPath* self, GType type) @extern ("gtk_widget_path_is_type");
fn void WidgetPath.iter_add_class (WidgetPath* self, int pos, ZString name) @extern ("gtk_widget_path_iter_add_class");
fn void WidgetPath.iter_add_region (WidgetPath* self, int pos, ZString name, RegionFlags flags) @extern ("gtk_widget_path_iter_add_region");
fn void WidgetPath.iter_clear_classes (WidgetPath* self, int pos) @extern ("gtk_widget_path_iter_clear_classes");
fn void WidgetPath.iter_clear_regions (WidgetPath* self, int pos) @extern ("gtk_widget_path_iter_clear_regions");
fn ZString WidgetPath.iter_get_name (WidgetPath* self, int pos) @extern ("gtk_widget_path_iter_get_name");
fn ZString WidgetPath.iter_get_object_name (WidgetPath* self, int pos) @extern ("gtk_widget_path_iter_get_object_name");
fn GType WidgetPath.iter_get_object_type (WidgetPath* self, int pos) @extern ("gtk_widget_path_iter_get_object_type");
fn uint WidgetPath.iter_get_sibling_index (WidgetPath* self, int pos) @extern ("gtk_widget_path_iter_get_sibling_index");
fn WidgetPath* WidgetPath.iter_get_siblings (WidgetPath* self, int pos) @extern ("gtk_widget_path_iter_get_siblings");
fn StateFlags WidgetPath.iter_get_state (WidgetPath* self, int pos) @extern ("gtk_widget_path_iter_get_state");
fn CInt WidgetPath.iter_has_class (WidgetPath* self, int pos, ZString name) @extern ("gtk_widget_path_iter_has_class");
fn CInt WidgetPath.iter_has_name (WidgetPath* self, int pos, ZString name) @extern ("gtk_widget_path_iter_has_name");
fn CInt WidgetPath.iter_has_qclass (WidgetPath* self, int pos, uint qname) @extern ("gtk_widget_path_iter_has_qclass");
fn CInt WidgetPath.iter_has_qname (WidgetPath* self, int pos, uint qname) @extern ("gtk_widget_path_iter_has_qname");
fn CInt WidgetPath.iter_has_qregion (WidgetPath* self, int pos, uint qname, RegionFlags flags) @extern ("gtk_widget_path_iter_has_qregion");
fn CInt WidgetPath.iter_has_region (WidgetPath* self, int pos, ZString name, RegionFlags flags) @extern ("gtk_widget_path_iter_has_region");
fn SList* WidgetPath.iter_list_classes (WidgetPath* self, int pos) @extern ("gtk_widget_path_iter_list_classes");
fn SList* WidgetPath.iter_list_regions (WidgetPath* self, int pos) @extern ("gtk_widget_path_iter_list_regions");
fn void WidgetPath.iter_remove_class (WidgetPath* self, int pos, ZString name) @extern ("gtk_widget_path_iter_remove_class");
fn void WidgetPath.iter_remove_region (WidgetPath* self, int pos, ZString name) @extern ("gtk_widget_path_iter_remove_region");
fn void WidgetPath.iter_set_name (WidgetPath* self, int pos, ZString name) @extern ("gtk_widget_path_iter_set_name");
fn void WidgetPath.iter_set_object_name (WidgetPath* self, int pos, ZString name) @extern ("gtk_widget_path_iter_set_object_name");
fn void WidgetPath.iter_set_object_type (WidgetPath* self, int pos, GType type) @extern ("gtk_widget_path_iter_set_object_type");
fn void WidgetPath.iter_set_state (WidgetPath* self, int pos, StateFlags state) @extern ("gtk_widget_path_iter_set_state");
fn int WidgetPath.length (WidgetPath* self) @extern ("gtk_widget_path_length");
fn void WidgetPath.prepend_type (WidgetPath* self, GType type) @extern ("gtk_widget_path_prepend_type");
fn WidgetPath* WidgetPath.ref (WidgetPath* self) @extern ("gtk_widget_path_ref");
fn ZString WidgetPath.to_string (WidgetPath* self) @extern ("gtk_widget_path_to_string");
fn void WidgetPath.unref (WidgetPath* self) @extern ("gtk_widget_path_unref");
def WidgetPrivate = void;

struct Window (ImplementorIface, Buildable) {
	inline Bin bin;
	WindowPrivate* priv;
}

fn Widget* Window.new (WindowType type) @operator (construct) @extern ("gtk_window_new");
fn List* Window.get_default_icon_list (Window* self) @extern ("gtk_window_get_default_icon_list");
fn ZString Window.get_default_icon_name (Window* self) @extern ("gtk_window_get_default_icon_name");
fn List* Window.list_toplevels (Window* self) @extern ("gtk_window_list_toplevels");
fn void Window.set_auto_startup_notification (Window* self, CInt setting) @extern ("gtk_window_set_auto_startup_notification");
fn void Window.set_default_icon (Window* self, Pixbuf* icon) @extern ("gtk_window_set_default_icon");
fn CInt Window.set_default_icon_from_file (Window* self, ZString* filename) @extern ("gtk_window_set_default_icon_from_file");
fn void Window.set_default_icon_list (Window* self, List* list) @extern ("gtk_window_set_default_icon_list");
fn void Window.set_default_icon_name (Window* self, ZString name) @extern ("gtk_window_set_default_icon_name");
fn void Window.set_interactive_debugging (Window* self, CInt enable) @extern ("gtk_window_set_interactive_debugging");
fn CInt Window.activate_default (Window* self) @extern ("gtk_window_activate_default");
fn CInt Window.activate_focus (Window* self) @extern ("gtk_window_activate_focus");
fn CInt Window.activate_key (Window* self, gdk::EventKey* event) @extern ("gtk_window_activate_key");
fn void Window.add_accel_group (Window* self, AccelGroup* accel_group) @extern ("gtk_window_add_accel_group");
fn void Window.add_mnemonic (Window* self, uint keyval, Widget* target) @extern ("gtk_window_add_mnemonic");
fn void Window.begin_move_drag (Window* self, int button, int root_x, int root_y, uint timestamp) @extern ("gtk_window_begin_move_drag");
fn void Window.begin_resize_drag (Window* self, gdk::WindowEdge edge, int button, int root_x, int root_y, uint timestamp) @extern ("gtk_window_begin_resize_drag");
fn void Window.close (Window* self) @extern ("gtk_window_close");
fn void Window.deiconify (Window* self) @extern ("gtk_window_deiconify");
fn void Window.fullscreen (Window* self) @extern ("gtk_window_fullscreen");
fn void Window.fullscreen_on_monitor (Window* self, gdk::Screen* screen, int monitor) @extern ("gtk_window_fullscreen_on_monitor");
fn CInt Window.get_accept_focus (Window* self) @extern ("gtk_window_get_accept_focus");
fn Application* Window.get_application (Window* self) @extern ("gtk_window_get_application");
fn Widget* Window.get_attached_to (Window* self) @extern ("gtk_window_get_attached_to");
fn CInt Window.get_decorated (Window* self) @extern ("gtk_window_get_decorated");
fn void Window.get_default_size (Window* self, int width, int height) @extern ("gtk_window_get_default_size");
fn Widget* Window.get_default_widget (Window* self) @extern ("gtk_window_get_default_widget");
fn CInt Window.get_deletable (Window* self) @extern ("gtk_window_get_deletable");
fn CInt Window.get_destroy_with_parent (Window* self) @extern ("gtk_window_get_destroy_with_parent");
fn Widget* Window.get_focus (Window* self) @extern ("gtk_window_get_focus");
fn CInt Window.get_focus_on_map (Window* self) @extern ("gtk_window_get_focus_on_map");
fn CInt Window.get_focus_visible (Window* self) @extern ("gtk_window_get_focus_visible");
fn gdk::Gravity Window.get_gravity (Window* self) @extern ("gtk_window_get_gravity");
fn WindowGroup* Window.get_group (Window* self) @extern ("gtk_window_get_group");
fn CInt Window.get_has_resize_grip (Window* self) @extern ("gtk_window_get_has_resize_grip");
fn CInt Window.get_hide_titlebar_when_maximized (Window* self) @extern ("gtk_window_get_hide_titlebar_when_maximized");
fn Pixbuf* Window.get_icon (Window* self) @extern ("gtk_window_get_icon");
fn List* Window.get_icon_list (Window* self) @extern ("gtk_window_get_icon_list");
fn ZString Window.get_icon_name (Window* self) @extern ("gtk_window_get_icon_name");
fn gdk::ModifierType Window.get_mnemonic_modifier (Window* self) @extern ("gtk_window_get_mnemonic_modifier");
fn CInt Window.get_mnemonics_visible (Window* self) @extern ("gtk_window_get_mnemonics_visible");
fn CInt Window.get_modal (Window* self) @extern ("gtk_window_get_modal");
fn double Window.get_opacity (Window* self) @extern ("gtk_window_get_opacity");
fn void Window.get_position (Window* self, int root_x, int root_y) @extern ("gtk_window_get_position");
fn CInt Window.get_resizable (Window* self) @extern ("gtk_window_get_resizable");
fn CInt Window.get_resize_grip_area (Window* self, gdk::Rectangle rect) @extern ("gtk_window_get_resize_grip_area");
fn ZString Window.get_role (Window* self) @extern ("gtk_window_get_role");
fn gdk::Screen* Window.get_screen (Window* self) @extern ("gtk_window_get_screen");
fn void Window.get_size (Window* self, int width, int height) @extern ("gtk_window_get_size");
fn CInt Window.get_skip_pager_hint (Window* self) @extern ("gtk_window_get_skip_pager_hint");
fn CInt Window.get_skip_taskbar_hint (Window* self) @extern ("gtk_window_get_skip_taskbar_hint");
fn ZString Window.get_title (Window* self) @extern ("gtk_window_get_title");
fn Widget* Window.get_titlebar (Window* self) @extern ("gtk_window_get_titlebar");
fn Window* Window.get_transient_for (Window* self) @extern ("gtk_window_get_transient_for");
fn gdk::WindowTypeHint Window.get_type_hint (Window* self) @extern ("gtk_window_get_type_hint");
fn CInt Window.get_urgency_hint (Window* self) @extern ("gtk_window_get_urgency_hint");
fn WindowType Window.get_window_type (Window* self) @extern ("gtk_window_get_window_type");
fn CInt Window.has_group (Window* self) @extern ("gtk_window_has_group");
fn CInt Window.has_toplevel_focus (Window* self) @extern ("gtk_window_has_toplevel_focus");
fn void Window.iconify (Window* self) @extern ("gtk_window_iconify");
fn CInt Window.is_active (Window* self) @extern ("gtk_window_is_active");
fn CInt Window.is_maximized (Window* self) @extern ("gtk_window_is_maximized");
fn void Window.maximize (Window* self) @extern ("gtk_window_maximize");
fn CInt Window.mnemonic_activate (Window* self, uint keyval, gdk::ModifierType modifier) @extern ("gtk_window_mnemonic_activate");
fn void Window.move (Window* self, int x, int y) @extern ("gtk_window_move");
fn CInt Window.parse_geometry (Window* self, ZString geometry) @extern ("gtk_window_parse_geometry");
fn void Window.present (Window* self) @extern ("gtk_window_present");
fn void Window.present_with_time (Window* self, uint timestamp) @extern ("gtk_window_present_with_time");
fn CInt Window.propagate_key_event (Window* self, gdk::EventKey* event) @extern ("gtk_window_propagate_key_event");
fn void Window.remove_accel_group (Window* self, AccelGroup* accel_group) @extern ("gtk_window_remove_accel_group");
fn void Window.remove_mnemonic (Window* self, uint keyval, Widget* target) @extern ("gtk_window_remove_mnemonic");
fn void Window.reshow_with_initial_size (Window* self) @extern ("gtk_window_reshow_with_initial_size");
fn void Window.resize (Window* self, int width, int height) @extern ("gtk_window_resize");
fn CInt Window.resize_grip_is_visible (Window* self) @extern ("gtk_window_resize_grip_is_visible");
fn void Window.resize_to_geometry (Window* self, int width, int height) @extern ("gtk_window_resize_to_geometry");
fn void Window.set_accept_focus (Window* self, CInt setting) @extern ("gtk_window_set_accept_focus");
fn void Window.set_application (Window* self, Application* application) @extern ("gtk_window_set_application");
fn void Window.set_attached_to (Window* self, Widget* attach_widget) @extern ("gtk_window_set_attached_to");
fn void Window.set_decorated (Window* self, CInt setting) @extern ("gtk_window_set_decorated");
fn void Window.set_default (Window* self, Widget* default_widget) @extern ("gtk_window_set_default");
fn void Window.set_default_geometry (Window* self, int width, int height) @extern ("gtk_window_set_default_geometry");
fn void Window.set_default_size (Window* self, int width, int height) @extern ("gtk_window_set_default_size");
fn void Window.set_deletable (Window* self, CInt setting) @extern ("gtk_window_set_deletable");
fn void Window.set_destroy_with_parent (Window* self, CInt setting) @extern ("gtk_window_set_destroy_with_parent");
fn void Window.set_focus (Window* self, Widget* focus) @extern ("gtk_window_set_focus");
fn void Window.set_focus_on_map (Window* self, CInt setting) @extern ("gtk_window_set_focus_on_map");
fn void Window.set_focus_visible (Window* self, CInt setting) @extern ("gtk_window_set_focus_visible");
fn void Window.set_geometry_hints (Window* self, Widget* geometry_widget, gdk::Geometry* geometry, gdk::WindowHints geom_mask) @extern ("gtk_window_set_geometry_hints");
fn void Window.set_gravity (Window* self, gdk::Gravity gravity) @extern ("gtk_window_set_gravity");
fn void Window.set_has_resize_grip (Window* self, CInt value) @extern ("gtk_window_set_has_resize_grip");
fn void Window.set_has_user_ref_count (Window* self, CInt setting) @extern ("gtk_window_set_has_user_ref_count");
fn void Window.set_hide_titlebar_when_maximized (Window* self, CInt setting) @extern ("gtk_window_set_hide_titlebar_when_maximized");
fn void Window.set_icon (Window* self, Pixbuf* icon) @extern ("gtk_window_set_icon");
fn CInt Window.set_icon_from_file (Window* self, ZString* filename) @extern ("gtk_window_set_icon_from_file");
fn void Window.set_icon_list (Window* self, List* list) @extern ("gtk_window_set_icon_list");
fn void Window.set_icon_name (Window* self, ZString name) @extern ("gtk_window_set_icon_name");
fn void Window.set_keep_above (Window* self, CInt setting) @extern ("gtk_window_set_keep_above");
fn void Window.set_keep_below (Window* self, CInt setting) @extern ("gtk_window_set_keep_below");
fn void Window.set_mnemonic_modifier (Window* self, gdk::ModifierType modifier) @extern ("gtk_window_set_mnemonic_modifier");
fn void Window.set_mnemonics_visible (Window* self, CInt setting) @extern ("gtk_window_set_mnemonics_visible");
fn void Window.set_modal (Window* self, CInt modal) @extern ("gtk_window_set_modal");
fn void Window.set_opacity (Window* self, double opacity) @extern ("gtk_window_set_opacity");
fn void Window.set_position (Window* self, WindowPosition position) @extern ("gtk_window_set_position");
fn void Window.set_resizable (Window* self, CInt resizable) @extern ("gtk_window_set_resizable");
fn void Window.set_role (Window* self, ZString role) @extern ("gtk_window_set_role");
fn void Window.set_screen (Window* self, gdk::Screen* screen) @extern ("gtk_window_set_screen");
fn void Window.set_skip_pager_hint (Window* self, CInt setting) @extern ("gtk_window_set_skip_pager_hint");
fn void Window.set_skip_taskbar_hint (Window* self, CInt setting) @extern ("gtk_window_set_skip_taskbar_hint");
fn void Window.set_startup_id (Window* self, ZString startup_id) @extern ("gtk_window_set_startup_id");
fn void Window.set_title (Window* self, ZString title) @extern ("gtk_window_set_title");
fn void Window.set_titlebar (Window* self, Widget* titlebar) @extern ("gtk_window_set_titlebar");
fn void Window.set_transient_for (Window* self, Window* parent) @extern ("gtk_window_set_transient_for");
fn void Window.set_type_hint (Window* self, gdk::WindowTypeHint hint) @extern ("gtk_window_set_type_hint");
fn void Window.set_urgency_hint (Window* self, CInt setting) @extern ("gtk_window_set_urgency_hint");
fn void Window.set_wmclass (Window* self, ZString wmclass_name, ZString wmclass_class) @extern ("gtk_window_set_wmclass");
fn void Window.stick (Window* self) @extern ("gtk_window_stick");
fn void Window.unfullscreen (Window* self) @extern ("gtk_window_unfullscreen");
fn void Window.unmaximize (Window* self) @extern ("gtk_window_unmaximize");
fn void Window.unstick (Window* self) @extern ("gtk_window_unstick");
	33 properties
	5 signals
	5 virtuals
def WindowAccessible = void;
def WindowAccessiblePrivate = void;

def WindowGeometryInfo = void;

struct WindowGroup {
	inline Object parent_instance;
	WindowGroupPrivate* priv;
}

fn WindowGroup* WindowGroup.new () @operator (construct) @extern ("gtk_window_group_new");
fn void WindowGroup.add_window (WindowGroup* self, Window* window) @extern ("gtk_window_group_add_window");
fn Widget* WindowGroup.get_current_device_grab (WindowGroup* self, gdk::Device* device) @extern ("gtk_window_group_get_current_device_grab");
fn Widget* WindowGroup.get_current_grab (WindowGroup* self) @extern ("gtk_window_group_get_current_grab");
fn List* WindowGroup.list_windows (WindowGroup* self) @extern ("gtk_window_group_list_windows");
fn void WindowGroup.remove_window (WindowGroup* self, Window* window) @extern ("gtk_window_group_remove_window");
def WindowGroupPrivate = void;


enum WindowPosition {
	NONE,
	CENTER,
	MOUSE,
	CENTER_ALWAYS,
	CENTER_ON_PARENT
}

def WindowPrivate = void;


enum WindowType {
	TOPLEVEL,
	POPUP
}


enum WrapMode {
	NONE,
	CHAR,
	WORD,
	WORD_CHAR
}

def _MountOperationHandler = void;

struct _MountOperationHandlerIface {
	TypeInterface parent_iface;
	void* handle_ask_password;
	void* handle_ask_question;
	void* handle_close;
	void* handle_show_processes;
}

struct _MountOperationHandlerProxy {
	DBusProxy parent_instance;
	void* priv;
}

struct _MountOperationHandlerProxyClass {
	DBusProxyClass parent_class;
}

def _MountOperationHandlerProxyPrivate = void;

struct _MountOperationHandlerSkeleton {
	DBusInterfaceSkeleton parent_instance;
	void* priv;
}

struct _MountOperationHandlerSkeletonClass {
	DBusInterfaceSkeletonClass parent_class;
}

def _MountOperationHandlerSkeletonPrivate = void;

extern fn CInt gtk_accel_groups_activate (Object* object, uint accel_key, gdk::ModifierType accel_mods);
extern fn SList* gtk_accel_groups_from_object (Object* object);
extern fn gdk::ModifierType gtk_accelerator_get_default_mod_mask ();
extern fn ZString gtk_accelerator_get_label (uint accelerator_key, gdk::ModifierType accelerator_mods);
extern fn ZString gtk_accelerator_get_label_with_keycode (gdk::Display* display, uint accelerator_key, uint keycode, gdk::ModifierType accelerator_mods);
extern fn ZString gtk_accelerator_name (uint accelerator_key, gdk::ModifierType accelerator_mods);
extern fn ZString gtk_accelerator_name_with_keycode (gdk::Display* display, uint accelerator_key, uint keycode, gdk::ModifierType accelerator_mods);
extern fn void gtk_accelerator_parse (ZString accelerator, uint accelerator_key, gdk::ModifierType accelerator_mods);
extern fn void gtk_accelerator_parse_with_keycode (ZString accelerator, uint accelerator_key, char** accelerator_codes, gdk::ModifierType accelerator_mods);
extern fn void gtk_accelerator_set_default_mod_mask (gdk::ModifierType default_mod_mask);
extern fn CInt gtk_accelerator_valid (uint keyval, gdk::ModifierType modifiers);
extern fn CInt gtk_alternative_dialog_button_order (gdk::Screen* screen);
extern fn TokenType gtk_binding_entry_add_signal_from_string (BindingSet* binding_set, ZString signal_desc);
extern fn void gtk_binding_entry_add_signall (BindingSet* binding_set, uint keyval, gdk::ModifierType modifiers, ZString signal_name, SList* binding_args);
extern fn void gtk_binding_entry_remove (BindingSet* binding_set, uint keyval, gdk::ModifierType modifiers);
extern fn void gtk_binding_entry_skip (BindingSet* binding_set, uint keyval, gdk::ModifierType modifiers);
extern fn BindingSet* gtk_binding_set_find (ZString set_name);
extern fn CInt gtk_bindings_activate (Object* object, uint keyval, gdk::ModifierType modifiers);
extern fn CInt gtk_bindings_activate_event (Object* object, gdk::EventKey* event);
extern fn uint gtk_builder_error_quark ();
extern fn CInt gtk_cairo_should_draw_window (Context* cr, gdk::Window* window);
extern fn void gtk_cairo_transform_to_window (Context* cr, Widget* widget, gdk::Window* window);
extern fn ZString gtk_check_version (uint required_major, uint required_minor, uint required_micro);
extern fn uint gtk_css_provider_error_quark ();
extern fn void gtk_device_grab_add (Widget* widget, gdk::Device* device, CInt block_others);
extern fn void gtk_device_grab_remove (Widget* widget, gdk::Device* device);
extern fn void gtk_disable_setlocale ();
extern fn int gtk_distribute_natural_allocation (int extra_space, uint n_requested_sizes, RequestedSize* sizes);
extern fn void gtk_drag_cancel (gdk::DragContext* context);
extern fn void gtk_drag_finish (gdk::DragContext* context, CInt success, CInt del, uint time_);
extern fn Widget* gtk_drag_get_source_widget (gdk::DragContext* context);
extern fn void gtk_drag_set_icon_default (gdk::DragContext* context);
extern fn void gtk_drag_set_icon_gicon (gdk::DragContext* context, [not parsed]* icon, int hot_x, int hot_y);
extern fn void gtk_drag_set_icon_name (gdk::DragContext* context, ZString icon_name, int hot_x, int hot_y);
extern fn void gtk_drag_set_icon_pixbuf (gdk::DragContext* context, Pixbuf* pixbuf, int hot_x, int hot_y);
extern fn void gtk_drag_set_icon_stock (gdk::DragContext* context, ZString stock_id, int hot_x, int hot_y);
extern fn void gtk_drag_set_icon_surface (gdk::DragContext* context, Surface* surface);
extern fn void gtk_drag_set_icon_widget (gdk::DragContext* context, Widget* widget, int hot_x, int hot_y);
extern fn void gtk_draw_insertion_cursor (Widget* widget, Context* cr, gdk::Rectangle* location, CInt is_primary, TextDirection direction, CInt draw_arrow);
extern fn CInt gtk_events_pending ();
extern fn CInt gtk_false ();
extern fn uint gtk_file_chooser_error_quark ();
extern fn uint gtk_get_binary_age ();
extern fn gdk::Event* gtk_get_current_event ();
extern fn gdk::Device* gtk_get_current_event_device ();
extern fn CInt gtk_get_current_event_state (gdk::ModifierType state);
extern fn uint gtk_get_current_event_time ();
extern fn uint gtk_get_debug_flags ();
extern fn Language* gtk_get_default_language ();
extern fn Widget* gtk_get_event_widget (gdk::Event* event);
extern fn uint gtk_get_interface_age ();
extern fn TextDirection gtk_get_locale_direction ();
extern fn uint gtk_get_major_version ();
extern fn uint gtk_get_micro_version ();
extern fn uint gtk_get_minor_version ();
extern fn OptionGroup* gtk_get_option_group (CInt open_default_display);
extern fn Widget* gtk_grab_get_current ();
extern fn int gtk_icon_size_from_name (ZString name);
extern fn ZString gtk_icon_size_get_name (int size);
extern fn CInt gtk_icon_size_lookup (int size, int width, int height);
extern fn CInt gtk_icon_size_lookup_for_settings (Settings* settings, int size, int width, int height);
extern fn int gtk_icon_size_register (ZString name, int width, int height);
extern fn void gtk_icon_size_register_alias (ZString alias, int target);
extern fn uint gtk_icon_theme_error_quark ();
extern fn void gtk_init (int argc, char** argv);
extern fn CInt gtk_init_check (int argc, char** argv);
extern fn CInt gtk_init_with_args (int argc, char** argv, ZString parameter_string, char** entries, ZString translation_domain);
extern fn void gtk_key_snooper_remove (uint snooper_handler_id);
extern fn void gtk_main ();
extern fn void gtk_main_do_event (gdk::Event* event);
extern fn CInt gtk_main_iteration ();
extern fn CInt gtk_main_iteration_do (CInt blocking);
extern fn uint gtk_main_level ();
extern fn void gtk_main_quit ();
extern fn void gtk_paint_arrow (Style* style, Context* cr, StateType state_type, ShadowType shadow_type, Widget* widget, ZString detail, ArrowType arrow_type, CInt fill, int x, int y, int width, int height);
extern fn void gtk_paint_box (Style* style, Context* cr, StateType state_type, ShadowType shadow_type, Widget* widget, ZString detail, int x, int y, int width, int height);
extern fn void gtk_paint_box_gap (Style* style, Context* cr, StateType state_type, ShadowType shadow_type, Widget* widget, ZString detail, int x, int y, int width, int height, PositionType gap_side, int gap_x, int gap_width);
extern fn void gtk_paint_check (Style* style, Context* cr, StateType state_type, ShadowType shadow_type, Widget* widget, ZString detail, int x, int y, int width, int height);
extern fn void gtk_paint_diamond (Style* style, Context* cr, StateType state_type, ShadowType shadow_type, Widget* widget, ZString detail, int x, int y, int width, int height);
extern fn void gtk_paint_expander (Style* style, Context* cr, StateType state_type, Widget* widget, ZString detail, int x, int y, ExpanderStyle expander_style);
extern fn void gtk_paint_extension (Style* style, Context* cr, StateType state_type, ShadowType shadow_type, Widget* widget, ZString detail, int x, int y, int width, int height, PositionType gap_side);
extern fn void gtk_paint_flat_box (Style* style, Context* cr, StateType state_type, ShadowType shadow_type, Widget* widget, ZString detail, int x, int y, int width, int height);
extern fn void gtk_paint_focus (Style* style, Context* cr, StateType state_type, Widget* widget, ZString detail, int x, int y, int width, int height);
extern fn void gtk_paint_handle (Style* style, Context* cr, StateType state_type, ShadowType shadow_type, Widget* widget, ZString detail, int x, int y, int width, int height, Orientation orientation);
extern fn void gtk_paint_hline (Style* style, Context* cr, StateType state_type, Widget* widget, ZString detail, int x1, int x2, int y);
extern fn void gtk_paint_layout (Style* style, Context* cr, StateType state_type, CInt use_text, Widget* widget, ZString detail, int x, int y, Layout* layout);
extern fn void gtk_paint_option (Style* style, Context* cr, StateType state_type, ShadowType shadow_type, Widget* widget, ZString detail, int x, int y, int width, int height);
extern fn void gtk_paint_resize_grip (Style* style, Context* cr, StateType state_type, Widget* widget, ZString detail, gdk::WindowEdge edge, int x, int y, int width, int height);
extern fn void gtk_paint_shadow (Style* style, Context* cr, StateType state_type, ShadowType shadow_type, Widget* widget, ZString detail, int x, int y, int width, int height);
extern fn void gtk_paint_shadow_gap (Style* style, Context* cr, StateType state_type, ShadowType shadow_type, Widget* widget, ZString detail, int x, int y, int width, int height, PositionType gap_side, int gap_x, int gap_width);
extern fn void gtk_paint_slider (Style* style, Context* cr, StateType state_type, ShadowType shadow_type, Widget* widget, ZString detail, int x, int y, int width, int height, Orientation orientation);
extern fn void gtk_paint_spinner (Style* style, Context* cr, StateType state_type, Widget* widget, ZString detail, uint step, int x, int y, int width, int height);
extern fn void gtk_paint_tab (Style* style, Context* cr, StateType state_type, ShadowType shadow_type, Widget* widget, ZString detail, int x, int y, int width, int height);
extern fn void gtk_paint_vline (Style* style, Context* cr, StateType state_type, Widget* widget, ZString detail, int y1_, int y2_, int x);
extern fn ZString gtk_paper_size_get_default ();
extern fn List* gtk_paper_size_get_paper_sizes (CInt include_custom);
extern fn CInt gtk_parse_args (int argc, char** argv);
extern fn uint gtk_print_error_quark ();
extern fn PageSetup* gtk_print_run_page_setup_dialog (Window* parent, PageSetup* page_setup, PrintSettings* settings);
extern fn void gtk_print_run_page_setup_dialog_async (Window* parent, PageSetup* page_setup, PrintSettings* settings, PageSetupDoneFunc done_cb, void* data);
extern fn void gtk_propagate_event (Widget* widget, gdk::Event* event);
extern fn void gtk_rc_add_default_file (ZString* filename);
extern fn ZString* gtk_rc_find_module_in_path (ZString module_file);
extern fn ZString* gtk_rc_find_pixmap_in_path (Settings* settings, Scanner* scanner, ZString pixmap_file);
extern fn char** gtk_rc_get_default_files ();
extern fn ZString* gtk_rc_get_im_module_file ();
extern fn ZString* gtk_rc_get_im_module_path ();
extern fn ZString* gtk_rc_get_module_dir ();
extern fn Style* gtk_rc_get_style (Widget* widget);
extern fn Style* gtk_rc_get_style_by_paths (Settings* settings, ZString widget_path, ZString class_path, GType type);
extern fn ZString gtk_rc_get_theme_dir ();
extern fn void gtk_rc_parse (ZString filename);
extern fn uint gtk_rc_parse_color (Scanner* scanner, gdk::Color color);
extern fn uint gtk_rc_parse_color_full (Scanner* scanner, RcStyle* style, gdk::Color color);
extern fn uint gtk_rc_parse_priority (Scanner* scanner, PathPriorityType* priority);
extern fn uint gtk_rc_parse_state (Scanner* scanner, StateType state);
extern fn void gtk_rc_parse_string (ZString rc_string);
extern fn CInt gtk_rc_property_parse_border (ParamSpec* pspec, String* gstring, Value* property_value);
extern fn CInt gtk_rc_property_parse_color (ParamSpec* pspec, String* gstring, Value* property_value);
extern fn CInt gtk_rc_property_parse_enum (ParamSpec* pspec, String* gstring, Value* property_value);
extern fn CInt gtk_rc_property_parse_flags (ParamSpec* pspec, String* gstring, Value* property_value);
extern fn CInt gtk_rc_property_parse_requisition (ParamSpec* pspec, String* gstring, Value* property_value);
extern fn CInt gtk_rc_reparse_all ();
extern fn CInt gtk_rc_reparse_all_for_settings (Settings* settings, CInt force_load);
extern fn void gtk_rc_reset_styles (Settings* settings);
extern fn void gtk_rc_set_default_files (char** filenames);
extern fn uint gtk_recent_chooser_error_quark ();
extern fn uint gtk_recent_manager_error_quark ();
extern fn void gtk_render_activity (StyleContext* context, Context* cr, double x, double y, double width, double height);
extern fn void gtk_render_arrow (StyleContext* context, Context* cr, double angle, double x, double y, double size);
extern fn void gtk_render_background (StyleContext* context, Context* cr, double x, double y, double width, double height);
extern fn void gtk_render_background_get_clip (StyleContext* context, double x, double y, double width, double height, gdk::Rectangle out_clip);
extern fn void gtk_render_check (StyleContext* context, Context* cr, double x, double y, double width, double height);
extern fn void gtk_render_expander (StyleContext* context, Context* cr, double x, double y, double width, double height);
extern fn void gtk_render_extension (StyleContext* context, Context* cr, double x, double y, double width, double height, PositionType gap_side);
extern fn void gtk_render_focus (StyleContext* context, Context* cr, double x, double y, double width, double height);
extern fn void gtk_render_frame (StyleContext* context, Context* cr, double x, double y, double width, double height);
extern fn void gtk_render_frame_gap (StyleContext* context, Context* cr, double x, double y, double width, double height, PositionType gap_side, double xy0_gap, double xy1_gap);
extern fn void gtk_render_handle (StyleContext* context, Context* cr, double x, double y, double width, double height);
extern fn void gtk_render_icon (StyleContext* context, Context* cr, Pixbuf* pixbuf, double x, double y);
extern fn Pixbuf* gtk_render_icon_pixbuf (StyleContext* context, IconSource* source, int size);
extern fn void gtk_render_icon_surface (StyleContext* context, Context* cr, Surface* surface, double x, double y);
extern fn void gtk_render_insertion_cursor (StyleContext* context, Context* cr, double x, double y, Layout* layout, int index, Direction direction);
extern fn void gtk_render_layout (StyleContext* context, Context* cr, double x, double y, Layout* layout);
extern fn void gtk_render_line (StyleContext* context, Context* cr, double x0, double y0, double x1, double y1);
extern fn void gtk_render_option (StyleContext* context, Context* cr, double x, double y, double width, double height);
extern fn void gtk_render_slider (StyleContext* context, Context* cr, double x, double y, double width, double height, Orientation orientation);
extern fn void gtk_rgb_to_hsv (double r, double g, double b, double h, double s, double v);
extern fn void gtk_selection_add_target (Widget* widget, gdk::Atom* selection, gdk::Atom* target, uint info);
extern fn void gtk_selection_add_targets (Widget* widget, gdk::Atom* selection, char** targets, uint ntargets);
extern fn void gtk_selection_clear_targets (Widget* widget, gdk::Atom* selection);
extern fn CInt gtk_selection_convert (Widget* widget, gdk::Atom* selection, gdk::Atom* target, uint time_);
extern fn CInt gtk_selection_owner_set (Widget* widget, gdk::Atom* selection, uint time_);
extern fn CInt gtk_selection_owner_set_for_display (gdk::Display* display, Widget* widget, gdk::Atom* selection, uint time_);
extern fn void gtk_selection_remove_all (Widget* widget);
extern fn void gtk_set_debug_flags (uint flags);
extern fn CInt gtk_show_uri (gdk::Screen* screen, ZString uri, uint timestamp);
extern fn CInt gtk_show_uri_on_window (Window* parent, ZString uri, uint timestamp);
extern fn void gtk_stock_add (char** items, uint n_items);
extern fn void gtk_stock_add_static (char** items, uint n_items);
extern fn SList* gtk_stock_list_ids ();
extern fn CInt gtk_stock_lookup (ZString stock_id, StockItem item);
extern fn void gtk_stock_set_translate_func (ZString domain, TranslateFunc func, void* data, DestroyNotify notify);
extern fn void gtk_target_table_free (char** targets, int n_targets);
extern fn char** gtk_target_table_new_from_list (TargetList* list, int n_targets);
extern fn CInt gtk_targets_include_image (char** targets, int n_targets, CInt writable);
extern fn CInt gtk_targets_include_rich_text (char** targets, int n_targets, TextBuffer* buffer);
extern fn CInt gtk_targets_include_text (char** targets, int n_targets);
extern fn CInt gtk_targets_include_uri (char** targets, int n_targets);
extern fn Widget* gtk_test_create_simple_window (ZString window_title, ZString dialog_text);
extern fn Widget* gtk_test_find_label (Widget* widget, ZString label_pattern);
extern fn Widget* gtk_test_find_sibling (Widget* base_widget, GType widget_type);
extern fn Widget* gtk_test_find_widget (Widget* widget, ZString label_pattern, GType widget_type);
extern fn char** gtk_test_list_all_types (uint n_types);
extern fn void gtk_test_register_all_types ();
extern fn double gtk_test_slider_get_value (Widget* widget);
extern fn void gtk_test_slider_set_perc (Widget* widget, double percentage);
extern fn CInt gtk_test_spin_button_click (SpinButton* spinner, uint button, CInt upwards);
extern fn ZString gtk_test_text_get (Widget* widget);
extern fn void gtk_test_text_set (Widget* widget, ZString string);
extern fn CInt gtk_test_widget_click (Widget* widget, uint button, gdk::ModifierType modifiers);
extern fn CInt gtk_test_widget_send_key (Widget* widget, uint keyval, gdk::ModifierType modifiers);
extern fn void gtk_test_widget_wait_for_draw (Widget* widget);
extern fn CInt gtk_tree_get_row_drag_data (SelectionData* selection_data, [not parsed]* tree_model, TreePath* path);
extern fn void gtk_tree_row_reference_deleted (Object* proxy, TreePath* path);
extern fn void gtk_tree_row_reference_inserted (Object* proxy, TreePath* path);
extern fn CInt gtk_tree_set_row_drag_data (SelectionData* selection_data, [not parsed]* tree_model, TreePath* path);
extern fn CInt gtk_true ();

Not parsed
	Interface (21)
Completed
